<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Reusable Tools for Formal Modeling of Machine Code</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2016</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>13936.00</AwardTotalIntnAmount>
<AwardAmount>13936</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Recent advances in program verification show that we are on the verge of being able to prove correctness of safety and security critical software systems. But the proofs only establish correctness with respect to a model of the underlying processor on which the code executes.  Unfortunately, the community lacks high-fidelity, carefully tested specifications of widely-used processors, such as Intel's x86 family of processors. This severely limits efforts in making software reliable and secure, from software assurance to malware analysis to sandboxing technologies. The goal of this project is to provide tools for building, reasoning about, and validating models of widely-used processors.  The proposed research will result in public specifications of common processors, which will benefit a wide range of software applications. It will help improve the dependability and security of critical software applications.&lt;br/&gt; &lt;br/&gt;The investigators' approach to building processor models is carefully designed to support reuse of components across different architectures and different applications.  In particular, they propose to formalize two domain-specific languages that will make it easy to specify decoders and instruction semantics.  The tools for these languages will include support for efficient execution so that the models can be tested against implementations.  To demonstrate the efficacy of these tools, the investigators will build and validate models of both the x86 and ARM families of processors.  They will also investigate applications of these models by building correctness proofs of verifiers for inlined reference monitors and by integrating them as the target languages of a verified compiler. The investigators plan to expend efforts on building a community of researchers for formal processor models and to involve this community to give feedback, improve, and use the models. The project will also provide excellent opportunities for training undergraduate students and for developing new curriculum materials on formal methods.</AbstractNarration>
<MinAmdLetterDate>02/17/2016</MinAmdLetterDate>
<MaxAmdLetterDate>02/17/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1624125</AwardID>
<Investigator>
<FirstName>Gang</FirstName>
<LastName>Tan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gang Tan</PI_FULL_NAME>
<EmailAddress>gtan@psu.edu</EmailAddress>
<PI_PHON>6172720380</PI_PHON>
<NSF_ID>000193259</NSF_ID>
<StartDate>02/17/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Pennsylvania State Univ University Park</Name>
<CityName>University Park</CityName>
<ZipCode>168021503</ZipCode>
<PhoneNumber>8148651372</PhoneNumber>
<StreetAddress>201 Old Main</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003403953</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PENNSYLVANIA STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003403953</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Pennsylvania State Univ University Park]]></Name>
<CityName>University Park</CityName>
<StateCode>PA</StateCode>
<ZipCode>168021503</ZipCode>
<StreetAddress><![CDATA[201 Old Main]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~13936</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Recent successes in verification show how machine-checked proofs can be scaled to real software systems. &nbsp;But these proofs only establish correctness with respect to a model of the underlying machine on which the code executes, and unfortunately, the community lacks high-fidelity, carefully tested specifications of widely-used machines, such as the x86. &nbsp;Rather, researchers are forced to develop, test, and use their own low-fidelity subsets, or even idealized architectures that ignore important aspects of processor semantics. This severely limits progress of many research efforts and their interaction, from certified compilers to verified hypervisors to malware analysis.</p> <p>The high-level goals of this project are (1) design Domain-Specific Languages (DSLs) for writing high-level specifications of machine models; (2) use the proposed DSLs to build formal models of commonly used processors and perform extensive validation of the machine models against real processors; (3) evaluate the usefulness of the models by developing applications on top of them.</p> <p>For the first goal, we have designed a decoder specification DSL, a decoder/encoder bidirectional DSL, and a DSL for specifying instruction semantics. These DSLs enable the formal specification of the syntax and semantics of machine code. The specifications in these DSLs can be formally reasoned about and can also be translated into executable code for simulation. For the second goal, we have built a formal model for x86 that includes about 400 instructions. The formal model has been released to the public for reuse. Finally, the formalx86 model is being used in other applications, including a study that uses the model to evaluate the security of Control-Flow Integrity.</p> <p>Through the completion of the project, much progress has been made both in the specification techniques of machine models and in producing a high-quality x86 model. The methodologies and DSLs that are produced by the project are applicable to specifying the formal models of architectures other than x86.</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/31/2016<br>      Modified by: Gang&nbsp;Tan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Recent successes in verification show how machine-checked proofs can be scaled to real software systems.  But these proofs only establish correctness with respect to a model of the underlying machine on which the code executes, and unfortunately, the community lacks high-fidelity, carefully tested specifications of widely-used machines, such as the x86.  Rather, researchers are forced to develop, test, and use their own low-fidelity subsets, or even idealized architectures that ignore important aspects of processor semantics. This severely limits progress of many research efforts and their interaction, from certified compilers to verified hypervisors to malware analysis.  The high-level goals of this project are (1) design Domain-Specific Languages (DSLs) for writing high-level specifications of machine models; (2) use the proposed DSLs to build formal models of commonly used processors and perform extensive validation of the machine models against real processors; (3) evaluate the usefulness of the models by developing applications on top of them.  For the first goal, we have designed a decoder specification DSL, a decoder/encoder bidirectional DSL, and a DSL for specifying instruction semantics. These DSLs enable the formal specification of the syntax and semantics of machine code. The specifications in these DSLs can be formally reasoned about and can also be translated into executable code for simulation. For the second goal, we have built a formal model for x86 that includes about 400 instructions. The formal model has been released to the public for reuse. Finally, the formalx86 model is being used in other applications, including a study that uses the model to evaluate the security of Control-Flow Integrity.  Through the completion of the project, much progress has been made both in the specification techniques of machine models and in producing a high-quality x86 model. The methodologies and DSLs that are produced by the project are applicable to specifying the formal models of architectures other than x86.          Last Modified: 08/31/2016       Submitted by: Gang Tan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
