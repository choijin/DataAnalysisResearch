<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Context-Sensitive Decoding: Exploiting Translated ISAs for Security, Safety, Energy, and Performance</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2016</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Matt Mutka</SignBlockName>
<PO_EMAI>mmutka@nsf.gov</PO_EMAI>
<PO_PHON>7032927344</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Context-Sensitive Decoding allows a processor with a translated instruction set architecture (such as x86, and often ARM) to decode a given instruction into a different set of micro-ops, depending on conditions set, for example, by the operating system.  This allows the system to transparently add features (for security, performance, energy efficiency, debugging, etc.) to executing code with no changes to the code or access to the original sources.  It could be used to add security features to unknown code with significantly reduced cost, and thus move closer to the point where such security can be always turned on.  Context-sensitive decoding can be used to add a level of specialization to general-purpose processors (an industry dominated by US-based companies) that better enables them to compete with domain-specific specialized solutions, with no significant changes to current pipelines.&lt;br/&gt;&lt;br/&gt;Many modern processors translate the programmer-visible instruction set architecture (ISA) to a separate, simpler internal ISA. This research makes that traditionally static translation dynamic, where instructions can be decoded/translated differently based on context.  For example, we can seamlessly transition from a performant (traditional) translation to a secure translation that now includes data address randomization by setting a single flag in the processor.  In addition to security, other applications abound in areas such as programming languages (e.g., on demand type safety, range checking, etc.), software engineering (full-performance debug mode), profiling and performance programming (performance counters of much greater variety than supported natively in hardware, seamlessly enabled or disabled), etc.</AbstractNarration>
<MinAmdLetterDate>09/13/2016</MinAmdLetterDate>
<MaxAmdLetterDate>09/13/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1652925</AwardID>
<Investigator>
<FirstName>Dean</FirstName>
<LastName>Tullsen</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Dean M Tullsen</PI_FULL_NAME>
<EmailAddress>tullsen@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585346181</PI_PHON>
<NSF_ID>000461702</NSF_ID>
<StartDate>09/13/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930404</ZipCode>
<StreetAddress><![CDATA[9500 Gilman Dr.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~300000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Modern instruction set decoders feature translation of native instructions into internal micro-ops to simplify the CPU design and improve instruction-level parallelism. However, this translation is static in most known instances. This research proposes context-sensitive decoding, a technique that enables customization of the micro-op translation based on the current execution context and/or preset hardware events. Further, it can transition between different translation modes rapidly. There are a myriad of potential applications of this technology, including on-demand security mitigation, performance and/or energy improvements, debugging and programmability, user-definable performance counting, etc.&nbsp; In particular, this research examined several effective applications of Context Sensitive Docoding.</p> <p>It explores a novel security defense to thwart instruction/data cache-based side-channel attacks.&nbsp; It does so by translating secret-dependent individual load accesses to sensitive data regions into multiple loads that leave no secret-dependent footprint in the cache, at minimal performance cost.</p> <p>It demonstrates a power management technique that performs selective devectorization to enable efficient unit-level power gating by identifying times when it is more effective to keep the vector units power gated and instead translate vector instructions as a series of scalar instructions, preserving both power and eliminating power-on delays.</p> <p>We also show the ability for CSD to mitigate speculation cybersecurity attacks, such as Spectre and Meltdown.&nbsp; The most common mitigation that has been deployed has been the sprinkling of fences (individual instructions that impede forward progress int the pipeline until completed and thereby preventing speculative execution) in vulerable code, at a high performance cost.&nbsp; We show that introducing these fences dynamically, only when they are required, significantly reduced the overhead of providing secure execution.&nbsp; In this work, we also identified new fence primitives that impose a much lower performance overhead, more targeted at security applications of the fence.</p> <p>This work also examined other security applications of CSD, including mechanisms to prevent buffer overflows that could enable hijacking of stored return values, as well as ways to dynamically prevent return instructions from directing control flow anywhere but the expected return to the calling function.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/18/2020<br>      Modified by: Dean&nbsp;M&nbsp;Tullsen</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Modern instruction set decoders feature translation of native instructions into internal micro-ops to simplify the CPU design and improve instruction-level parallelism. However, this translation is static in most known instances. This research proposes context-sensitive decoding, a technique that enables customization of the micro-op translation based on the current execution context and/or preset hardware events. Further, it can transition between different translation modes rapidly. There are a myriad of potential applications of this technology, including on-demand security mitigation, performance and/or energy improvements, debugging and programmability, user-definable performance counting, etc.  In particular, this research examined several effective applications of Context Sensitive Docoding.  It explores a novel security defense to thwart instruction/data cache-based side-channel attacks.  It does so by translating secret-dependent individual load accesses to sensitive data regions into multiple loads that leave no secret-dependent footprint in the cache, at minimal performance cost.  It demonstrates a power management technique that performs selective devectorization to enable efficient unit-level power gating by identifying times when it is more effective to keep the vector units power gated and instead translate vector instructions as a series of scalar instructions, preserving both power and eliminating power-on delays.  We also show the ability for CSD to mitigate speculation cybersecurity attacks, such as Spectre and Meltdown.  The most common mitigation that has been deployed has been the sprinkling of fences (individual instructions that impede forward progress int the pipeline until completed and thereby preventing speculative execution) in vulerable code, at a high performance cost.  We show that introducing these fences dynamically, only when they are required, significantly reduced the overhead of providing secure execution.  In this work, we also identified new fence primitives that impose a much lower performance overhead, more targeted at security applications of the fence.  This work also examined other security applications of CSD, including mechanisms to prevent buffer overflows that could enable hijacking of stored return values, as well as ways to dynamically prevent return instructions from directing control flow anywhere but the expected return to the calling function.             Last Modified: 08/18/2020       Submitted by: Dean M Tullsen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
