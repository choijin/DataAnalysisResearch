<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Efficient Formal Analysis of Evolving Software Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2016</AwardEffectiveDate>
<AwardExpirationDate>06/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>499170.00</AwardTotalIntnAmount>
<AwardAmount>515170</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern software systems are very complex and tend to evolve over time. Formal specification languages and the corresponding analysis environments have shown promise in aiding the engineers to reason about the properties (e.g., security, reliability) of complex software systems. Despite their strengths, the reliance of such formally precise techniques on computationally heavy constraint solvers means that it can take a significant amount of time to verify the properties of software. This research devises a novel, and fully automated technique for efficient analysis of evolving software systems. The principles emerging from this research provide the foundation for making formal analysis of evolving software systems less expensive to conduct and more scalable, which in turn enable the vibrant software industry to significantly improve the quality of its products. The research produces a new breed of technologies with promising benefits for reduced defect density in specifications, designs, and code, achieved at reasonable cost, and within the constraints of real industrial settings. &lt;br/&gt;&lt;br/&gt;An opportunity to reduce the analysis time is presented by the fact that in a software development project, the formal specifications representing the software are unlikely to change completely from one analysis to the next. Unlike the existing analysis techniques that dispose of the prior results in response to changes in the system specification, the approach developed in this research automatically and efficiently updates the analysis results, where solutions to a prior system specification are leveraged to, among other things, narrow the space of values to be explored by the underlying constraint solver for the revised system specification, thereby greatly reducing the required computational effort.  The intellectual merit of this research is a suite of optimization techniques to foster bounded verification of evolving software systems. The project advances the state-of-the-art by making bounded formal verification of software more scalable and cost effective, thereby expanding the domains in which such techniques can be applied.</AbstractNarration>
<MinAmdLetterDate>05/31/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/07/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1618132</AwardID>
<Investigator>
<FirstName>Sam</FirstName>
<LastName>Malek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sam Malek</PI_FULL_NAME>
<EmailAddress>malek@uci.edu</EmailAddress>
<PI_PHON>9498240639</PI_PHON>
<NSF_ID>000488088</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Hamid</FirstName>
<LastName>Bagheri</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Hamid Bagheri</PI_FULL_NAME>
<EmailAddress>bagheri@unl.edu</EmailAddress>
<PI_PHON>4024725087</PI_PHON>
<NSF_ID>000678516</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926173067</ZipCode>
<StreetAddress><![CDATA[Donald Bren Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~499170</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In this project, we developed novel techniques for formal analysis of evolving software systems. Formal verification techniques have shown significant promise in evaluating various software properties. However, they are generally known to be computationally expensive. This computational complexity is exacerbated when applied to an evolving software system, since an analysis performed on one version of the software may not hold for a later version of the software, forcing the analysis to be repeated. In this project, we studied the interplay between formal verification techniques and software evolution. Specifically, the intellectual merit of this research is the development of a suite of methods to foster formal verification of evolving software systems in a manner that is efficient, scalable, and cost effective.&nbsp;</p> <p>&nbsp;</p> <p>We showed that by leveraging the results of the analysis performed on a prior version of a specification, it is possible to optimize subsequent analyses on its revisions. We showed that this idea can be realized in practice by developing the first known formal analyzer, called Titanium, which supports efficient analysis of evolving specifications, realized in Alloy's relational logic. We further showed that constraint solutions can be reused over sequences of analyses performed on evolving specifications. Finally, we conducted extensive experiments using real-world software, which corroborated the efficacy and practicality of such an approach.&nbsp;</p> <p>&nbsp;</p> <p>The project had broader impacts on education through incorporation of the results from this project in course materials at both undergraduate and graduate levels. Several PhD students that participated in this project are now employed in software companies, providing an impetus for technology transfer. The project also promoted diversity in computing by supporting multiple female and underrepresent students. The techniques developed as part of this project enable engineers to improve the quality of software systems, which ultimately has a positive impact on society that is increasingly reliant on software.&nbsp;</p> <p>&nbsp;</p> <p>The results of this work were disseminated widely. Numerous publications resulted from this work at top academic conferences and journals. The PIs and students working on this project also delivered numerous presentations of this work at conferences, universities, and companies. Finally, the tools and artifacts resulting from this project have been made available to the public to facilitate future research and transitioning of technology to industry.</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/02/2020<br>      Modified by: Sam&nbsp;Malek</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In this project, we developed novel techniques for formal analysis of evolving software systems. Formal verification techniques have shown significant promise in evaluating various software properties. However, they are generally known to be computationally expensive. This computational complexity is exacerbated when applied to an evolving software system, since an analysis performed on one version of the software may not hold for a later version of the software, forcing the analysis to be repeated. In this project, we studied the interplay between formal verification techniques and software evolution. Specifically, the intellectual merit of this research is the development of a suite of methods to foster formal verification of evolving software systems in a manner that is efficient, scalable, and cost effective.      We showed that by leveraging the results of the analysis performed on a prior version of a specification, it is possible to optimize subsequent analyses on its revisions. We showed that this idea can be realized in practice by developing the first known formal analyzer, called Titanium, which supports efficient analysis of evolving specifications, realized in Alloy's relational logic. We further showed that constraint solutions can be reused over sequences of analyses performed on evolving specifications. Finally, we conducted extensive experiments using real-world software, which corroborated the efficacy and practicality of such an approach.      The project had broader impacts on education through incorporation of the results from this project in course materials at both undergraduate and graduate levels. Several PhD students that participated in this project are now employed in software companies, providing an impetus for technology transfer. The project also promoted diversity in computing by supporting multiple female and underrepresent students. The techniques developed as part of this project enable engineers to improve the quality of software systems, which ultimately has a positive impact on society that is increasingly reliant on software.      The results of this work were disseminated widely. Numerous publications resulted from this work at top academic conferences and journals. The PIs and students working on this project also delivered numerous presentations of this work at conferences, universities, and companies. Finally, the tools and artifacts resulting from this project have been made available to the public to facilitate future research and transitioning of technology to industry.          Last Modified: 08/02/2020       Submitted by: Sam Malek]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
