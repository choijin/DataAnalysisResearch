<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Project T: Enabling Open Innovation in Mobile Platforms through API Virtualization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2016</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>472444.00</AwardTotalIntnAmount>
<AwardAmount>486444</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Openness is a key to innovation. Numerous areas in computer science and other disciplines have embraced openness and witnessed an explosion of new technological advances. This proposal argues that mobile platforms (such as Android and iOS) need to embrace openness as well. This is motivated by the fact that the current mobile platforms are mostly closed and do not allow third-party innovation, making it extremely difficult to introduce disruptive technologies. This can be observed easily by examining the most open mobile platform, Android. Android is regarded as an open platform since its source code is open. However, it is indeed a closed platform from the perspective of open innovation; this is because a small, independent third party has no easy way to modify the platform and distribute the modification at a large scale to end users. Only a select few, such as Google and Samsung, have the power to modify the platform and deliver it.&lt;br/&gt;&lt;br/&gt;Recognizing such a problem, this project proposes a new technique called API virtualization that enables open innovation in mobile platforms. API virtualization allows third-party developers to modify, reimplement, or customize platform APIs and deploy the modifications seamlessly. The uniqueness of the proposed technique is that it enables modifications completely at the app layer without requiring any platform-level changes. This allows practical openness---third parties can easily distribute their modifications for a platform without the need to update the entire platform.&lt;br/&gt;&lt;br/&gt;If successful, this project will produce (1) a working prototype that implements API virtualization on Android, (2) several case-study systems that leverage API virtualization and provide better functionality such as app anonymity, automatic mobile-cloud integration, and energy policy customization, and (3) a Web service where third-party developers upload their platform API modifications that end users can download and use.</AbstractNarration>
<MinAmdLetterDate>08/02/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/29/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1618531</AwardID>
<Investigator>
<FirstName>Steven</FirstName>
<LastName>Ko</LastName>
<PI_MID_INIT>Y</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Steven Y Ko</PI_FULL_NAME>
<EmailAddress>stevko@buffalo.edu</EmailAddress>
<PI_PHON>7166454732</PI_PHON>
<NSF_ID>000554971</NSF_ID>
<StartDate>08/02/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Karthik</FirstName>
<LastName>Dantu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Karthik Dantu</PI_FULL_NAME>
<EmailAddress>kdantu@buffalo.edu</EmailAddress>
<PI_PHON>7166452670</PI_PHON>
<NSF_ID>000663253</NSF_ID>
<StartDate>08/02/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Buffalo</Name>
<CityName>Buffalo</CityName>
<ZipCode>142282567</ZipCode>
<PhoneNumber>7166452634</PhoneNumber>
<StreetAddress>520 Lee Entrance</StreetAddress>
<StreetAddress2><![CDATA[Suite 211]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>26</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY26</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>038633251</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020657151</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SUNY at Buffalo]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>142602500</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>26</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY26</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~472444</FUND_OBLG>
<FUND_OBLG>2018~14000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The primary goal of the project is studying API virtualization on Android. API virtualization allows developers to intercept an Android API call and execute an arbitrary piece of code, which is useful in extending the capability of Android. For example, using API virtualization, a developer can intercept a storage write API call, and perform a write not only to the local storage but also to a cloud service for backup.</p> <p>To comprehensively study API virtualization on Android, we have sought to answer the following three questions.</p> <ul> <li>Is it possible to enable API virtualization on Android (feasibility)?</li> <li>Is API virtualization useful on Android (applicability)?</li> <li>Can API virtualization be done correctly so we can deploy it for regular apps (deployability)?</li> </ul> <p>For each question, we have developed prototypes that demonstrate the capability. Through these prototypes, we have shown that API virtualization is indeed feasible, applicable, and deployable on Android. We summarize these prototypes and our findings below.</p> <p><strong>Feasibility of API Virtualization</strong></p> <p>To demonstrate the feasibility of API virtualization, we have developed a prototype called Reptor and published a paper on it (MobiSys'17). Reptor demonstrates that it is possible to enable API virtualization with low overhead using bytecode instrumentation. Reptor analyzes an Android app's bytecode and statically detects all possible API calls that the app makes within its code. Reptor can then statically rewrite API calls in a way that the calls are redirected to an injected piece of code, enabling API virtualization. In implementing Reptor, we have overcome several challenges including correctly handling Java-language features such as sub-typing, polymorphism, and callbacks.</p> <p>We have instrumented 1,200 apps downloaded from Google Play using Reptor and performed automated testing to verify correctness of our implementation. Our paper also discusses various use cases and performance results. Our findings are that Reptor enables API virtualization with low performance overhead in terms of call latency, memory usage, and energy consumption.</p> <p><strong>Applicability of API Virtualization</strong></p> <p>To demonstrate the applicability of API virtualization, we have developed two systems, BlueMountain (MobiCom'17) and Gesto (EICS'19) that uses API virtualization to enable functionality that was not previously possible on Android.</p> <p>Our first system, BlueMountain, imagines a world where there are two types of developers. One type is regular developers who write mobile apps. The other type is what we call data management app developers who develop and write innovative data management solutions for mobile apps. For example, they could develop a solution that automatically backs up app data to a cloud, or a solution that automatically shares app data among a group of users. The innovation of BlueMountain is that it allows these data management solutions to be developed as regular Android apps, which means that data management solutions can be distributed using standard channels such as Google Play. BlueMountain can then take a data management app and "combine" it with a regular app so that a regular app can execute the data management solution. We use API virtualization as the basis to accomplish this; using API viritualization, we intercept all storage API calls and execute the code provided by a data management app. Our website (http://bluemountain.cse.buffalo.edu/) has a video clip that describes how BlueMountain works.</p> <p>Our second system, Gesto, is a system that enables task automation for Android apps using gestures and voice commands. Gesto allows a user to record a sequence of UI actions for an app, choose a gesture or a voice command to activate the UI action sequence, and later trigger the UI action sequence by the corresponding gesture/voice command. Gesto uses API virtualization to implement UI action record-and-replay.</p> <p>These two systems demonstrate that by using API virtualization, we can add new and innovative functionality to Android that was previously not possible.</p> <p><strong>Deployability of API Virtualization</strong></p> <p>We have developed a system called Mimic (ICSE'19) that demonstrates the deployability of API virtualization. Mimic tests the correctness of API virtualization for an app to ensure that the app is ready for deployment.</p> <p>Initially, Mimic was developed to evaluate our prototypes for Reptor, BlueMountain, and Gesto. However, it evolved into a more general system that enables what we call UI compatibility testing. UI compatibility testing compares and contrasts two different versions of the same app by automatically and programmatically interacting with the UI of the app. For API virtualization, Mimic tests an app before and after instrumentation, and shows the differences between the two versions.</p> <p><strong>Conclusion</strong></p> <p>We have developed Reptor, BlueMountain, Gesto, and Mimic to comprehensively study API virutalization on Android. Our publications on these systems describe how to implement API virtualization using bytecode instrumentation (Reptor), how we enable new functionality that was previously not possible using API virtualization (BlueMountain and Gesto), and how we can test the correctness of our API virtualization (Mimic). Collectively, these systems show that API virtualization is feasible, applicable, and deployable on Android.</p><br> <p>            Last Modified: 09/09/2020<br>      Modified by: Steven&nbsp;Y&nbsp;Ko</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The primary goal of the project is studying API virtualization on Android. API virtualization allows developers to intercept an Android API call and execute an arbitrary piece of code, which is useful in extending the capability of Android. For example, using API virtualization, a developer can intercept a storage write API call, and perform a write not only to the local storage but also to a cloud service for backup.  To comprehensively study API virtualization on Android, we have sought to answer the following three questions.  Is it possible to enable API virtualization on Android (feasibility)? Is API virtualization useful on Android (applicability)? Can API virtualization be done correctly so we can deploy it for regular apps (deployability)?   For each question, we have developed prototypes that demonstrate the capability. Through these prototypes, we have shown that API virtualization is indeed feasible, applicable, and deployable on Android. We summarize these prototypes and our findings below.  Feasibility of API Virtualization  To demonstrate the feasibility of API virtualization, we have developed a prototype called Reptor and published a paper on it (MobiSys'17). Reptor demonstrates that it is possible to enable API virtualization with low overhead using bytecode instrumentation. Reptor analyzes an Android app's bytecode and statically detects all possible API calls that the app makes within its code. Reptor can then statically rewrite API calls in a way that the calls are redirected to an injected piece of code, enabling API virtualization. In implementing Reptor, we have overcome several challenges including correctly handling Java-language features such as sub-typing, polymorphism, and callbacks.  We have instrumented 1,200 apps downloaded from Google Play using Reptor and performed automated testing to verify correctness of our implementation. Our paper also discusses various use cases and performance results. Our findings are that Reptor enables API virtualization with low performance overhead in terms of call latency, memory usage, and energy consumption.  Applicability of API Virtualization  To demonstrate the applicability of API virtualization, we have developed two systems, BlueMountain (MobiCom'17) and Gesto (EICS'19) that uses API virtualization to enable functionality that was not previously possible on Android.  Our first system, BlueMountain, imagines a world where there are two types of developers. One type is regular developers who write mobile apps. The other type is what we call data management app developers who develop and write innovative data management solutions for mobile apps. For example, they could develop a solution that automatically backs up app data to a cloud, or a solution that automatically shares app data among a group of users. The innovation of BlueMountain is that it allows these data management solutions to be developed as regular Android apps, which means that data management solutions can be distributed using standard channels such as Google Play. BlueMountain can then take a data management app and "combine" it with a regular app so that a regular app can execute the data management solution. We use API virtualization as the basis to accomplish this; using API viritualization, we intercept all storage API calls and execute the code provided by a data management app. Our website (http://bluemountain.cse.buffalo.edu/) has a video clip that describes how BlueMountain works.  Our second system, Gesto, is a system that enables task automation for Android apps using gestures and voice commands. Gesto allows a user to record a sequence of UI actions for an app, choose a gesture or a voice command to activate the UI action sequence, and later trigger the UI action sequence by the corresponding gesture/voice command. Gesto uses API virtualization to implement UI action record-and-replay.  These two systems demonstrate that by using API virtualization, we can add new and innovative functionality to Android that was previously not possible.  Deployability of API Virtualization  We have developed a system called Mimic (ICSE'19) that demonstrates the deployability of API virtualization. Mimic tests the correctness of API virtualization for an app to ensure that the app is ready for deployment.  Initially, Mimic was developed to evaluate our prototypes for Reptor, BlueMountain, and Gesto. However, it evolved into a more general system that enables what we call UI compatibility testing. UI compatibility testing compares and contrasts two different versions of the same app by automatically and programmatically interacting with the UI of the app. For API virtualization, Mimic tests an app before and after instrumentation, and shows the differences between the two versions.  Conclusion  We have developed Reptor, BlueMountain, Gesto, and Mimic to comprehensively study API virutalization on Android. Our publications on these systems describe how to implement API virtualization using bytecode instrumentation (Reptor), how we enable new functionality that was previously not possible using API virtualization (BlueMountain and Gesto), and how we can test the correctness of our API virtualization (Mimic). Collectively, these systems show that API virtualization is feasible, applicable, and deployable on Android.       Last Modified: 09/09/2020       Submitted by: Steven Y Ko]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
