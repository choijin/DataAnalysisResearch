<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Online Verification-Validation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>309990.00</AwardTotalIntnAmount>
<AwardAmount>309990</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Increasingly, modern software on the web is richly extensible, accelerating its evolution and dramatically reducing the time between development and deployment.  The intellectual merit of this research consists of challenging the false choice between creating software that is extensible (easy to reuse and extend) and software that is correct (meets its specifications). The new approach advanced by this work, Incremental Verification-Validation, enables programmers to bring domain-specific safely disciplines to extensible systems, by providing a framework where these disciplines are communicated both precisely and usefully, as executable code.  The project's broader significance and importance consist in changing the way programmers approach building correct extensible software for the web. The research targets ECMAScript (JavaScript), enabling this research to have a direct impact on the vast number of languages and systems that create and use JavaScript.  Further, the project represents a new collaboration across the University of Colorado and University of Maryland, bringing together experts across verification, incremental computing, and runtime systems. Finally, this project benefits the graduate and undergraduate teaching mission at the participating universities, as aspects of the project enriches the program analysis and programming language courses.&lt;br/&gt;&lt;br/&gt;Incremental Verification-Validation encourages programmers to co-design their systems with executable specifications that check these systems dynamically, as they execute. Moreover, unlike typical assertions, which execute dynamically and non-incrementally, the proposed  are subject to novel patterns that enhance their performance: In regressive validation, verification partially discharges some checks, dynamically rewriting the program with residual versions; in progressive verification, online verification occurs in passes that each cache and reuse work, to avoid from-scratch verification of facts that still hold from earlier passes. Finally, to avoid forcing analysis programmers to reason about incremental changes explicitly in each analysis that they create, the meta layer expresses incremental computations implicitly, using an implicitly-incremental meta language whose abstractions hide reasoning on a per-change basis.</AbstractNarration>
<MinAmdLetterDate>05/13/2016</MinAmdLetterDate>
<MaxAmdLetterDate>03/15/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1619282</AwardID>
<Investigator>
<FirstName>Bor-Yuh Evan</FirstName>
<LastName>Chang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bor-Yuh Evan Chang</PI_FULL_NAME>
<EmailAddress>evan.chang@colorado.edu</EmailAddress>
<PI_PHON>3034928894</PI_PHON>
<NSF_ID>000512429</NSF_ID>
<StartDate>05/13/2016</StartDate>
<EndDate>03/15/2019</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Bor-Yuh Evan</FirstName>
<LastName>Chang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bor-Yuh Evan Chang</PI_FULL_NAME>
<EmailAddress>evan.chang@colorado.edu</EmailAddress>
<PI_PHON>3034928894</PI_PHON>
<NSF_ID>000512429</NSF_ID>
<StartDate>03/15/2019</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Matthew</FirstName>
<LastName>Hammer</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Matthew A Hammer</PI_FULL_NAME>
<EmailAddress>Matthew.Hammer@colorado.edu</EmailAddress>
<PI_PHON>3034927514</PI_PHON>
<NSF_ID>000702529</NSF_ID>
<StartDate>05/13/2016</StartDate>
<EndDate>03/15/2019</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Boulder</Name>
<CityName>Boulder</CityName>
<ZipCode>803031058</ZipCode>
<PhoneNumber>3034926221</PhoneNumber>
<StreetAddress>3100 Marine Street, Room 481</StreetAddress>
<StreetAddress2><![CDATA[572 UCB]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>007431505</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF COLORADO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007431505</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Colorado at Boulder]]></Name>
<CityName>Boulder</CityName>
<StateCode>CO</StateCode>
<ZipCode>803031058</ZipCode>
<StreetAddress><![CDATA[3100 Marine Street, Room 481]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~309990</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Increasingly, modern software on the web is richly extensible, accelerating its evolution and dramatically reducing the time between development and deployment. The intellectual merit of this research consists of challenging the false choice between creating software that is extensible (easy to reuse and extend) and software that is correct (meets its specifications). The new approach developed in this project, Incremental Verification-Validation, has made it possible for programmers to bring domain-specific safety disciplines to extensible systems by providing a framework where these disciplines are communicated both precisely and usefully, as executable code. The project's broader significance and importance have had impact on changing the way programmers approach building correct extensible software for the web and other domains.<br /><br />The long-term vision of this line of investigation is to encourage programmers to co-design their systems with executable specifications that check these systems dynamically, as they execute. While this vision extends beyond this project, this project realized several essential building blocks.<br /><br />The most significant research thread funded by this grant has been developing a foundational framework for refining program analyses on demand. Traditionally, program analyzers, to a first approximation, compute a full, exhaustive summary of the possible behavior a program. But in the context of modern, richly extensible, dynamically evolving software, this up-front computation to exhaustively summarize program behavior is simply infeasible. The project has also advanced the start of the art of run-time analysis methods based on novel run-time architecture design and has had important practical impact on widely used programming language concepts such as static analysis and type systems.<br /><br />As a whole the project has advanced the state-of-the-art for developing highly reliable and trustworthy software systems.<br /><br />This project has led to a number of publications in top-tier scientific conferences and journals. The ideas have been broadly disseminated to the community through conference presentations, video recordings, and guest lectures. The materials has been incorporated into graduate courses and course notes. The project has developed several software artifacts that have been peer-evaluated as part of the artifact evaluation process now common in programming language and software engineering publications. These software systems are available as open-source software projects and archived on the ACM Digital Library. The project has supported the training of both graduate and undergraduate researchers who will shape the future theory and practice of software. <br /><br />The primary impact on society stem from two efforts of this project:<br /><br />1. The technical ideas developed in this project will materially advance the reliability and trustworthiness of software, which will have a broad positive effect on society's reliance on software systems.<br /><br />2. The graduate and undergraduate researchers trained as part of this project will contribute positively to their fields over the course of their careers.</p><br> <p>            Last Modified: 06/10/2021<br>      Modified by: Bor-Yuh Evan&nbsp;Chang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Increasingly, modern software on the web is richly extensible, accelerating its evolution and dramatically reducing the time between development and deployment. The intellectual merit of this research consists of challenging the false choice between creating software that is extensible (easy to reuse and extend) and software that is correct (meets its specifications). The new approach developed in this project, Incremental Verification-Validation, has made it possible for programmers to bring domain-specific safety disciplines to extensible systems by providing a framework where these disciplines are communicated both precisely and usefully, as executable code. The project's broader significance and importance have had impact on changing the way programmers approach building correct extensible software for the web and other domains.  The long-term vision of this line of investigation is to encourage programmers to co-design their systems with executable specifications that check these systems dynamically, as they execute. While this vision extends beyond this project, this project realized several essential building blocks.  The most significant research thread funded by this grant has been developing a foundational framework for refining program analyses on demand. Traditionally, program analyzers, to a first approximation, compute a full, exhaustive summary of the possible behavior a program. But in the context of modern, richly extensible, dynamically evolving software, this up-front computation to exhaustively summarize program behavior is simply infeasible. The project has also advanced the start of the art of run-time analysis methods based on novel run-time architecture design and has had important practical impact on widely used programming language concepts such as static analysis and type systems.  As a whole the project has advanced the state-of-the-art for developing highly reliable and trustworthy software systems.  This project has led to a number of publications in top-tier scientific conferences and journals. The ideas have been broadly disseminated to the community through conference presentations, video recordings, and guest lectures. The materials has been incorporated into graduate courses and course notes. The project has developed several software artifacts that have been peer-evaluated as part of the artifact evaluation process now common in programming language and software engineering publications. These software systems are available as open-source software projects and archived on the ACM Digital Library. The project has supported the training of both graduate and undergraduate researchers who will shape the future theory and practice of software.   The primary impact on society stem from two efforts of this project:  1. The technical ideas developed in this project will materially advance the reliability and trustworthiness of software, which will have a broad positive effect on society's reliance on software systems.  2. The graduate and undergraduate researchers trained as part of this project will contribute positively to their fields over the course of their careers.       Last Modified: 06/10/2021       Submitted by: Bor-Yuh Evan Chang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
