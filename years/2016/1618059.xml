<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Concurrent Software Verification with Rely/Guarantee Abstractions</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2016</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>240252.00</AwardTotalIntnAmount>
<AwardAmount>240252</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>It is now widely recognized that increasing the reliability of&lt;br/&gt;concurrent software is one of the most important scientific and&lt;br/&gt;technological challenges in the emerging era of multi-core and&lt;br/&gt;distributed computing.  The last decade has seen substantial advances&lt;br/&gt;in automatic verification technology to improve the reliability of&lt;br/&gt;sequential programs, and software tools that can be applied to large &lt;br/&gt;industrial code bases. Unfortunately, the underlying technology of &lt;br/&gt;such tools cannot be directly applied to concurrent programs. &lt;br/&gt;&lt;br/&gt;This project investigates scalable techniques for automatic verification of &lt;br/&gt;concurrent software. The approach uses thread-modular decomposition of &lt;br/&gt;the overall problem that does not completely decompose to the granularity &lt;br/&gt;of an individual thread. Since base components may exhibit concurrent &lt;br/&gt;behavior, the investigators develop analysis algorithms for these base components &lt;br/&gt;so that they can be automatically proven correct with respect to their environment&lt;br/&gt;description and vice-versa. This work yields automatic verification tools that &lt;br/&gt;exploit richer notions of modular reasoning about parallelism, thereby offering &lt;br/&gt;improved scalability and robustness over previous approaches. The project team&lt;br/&gt;includes graduate and undergraduate students.</AbstractNarration>
<MinAmdLetterDate>05/19/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/19/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1618059</AwardID>
<Investigator>
<FirstName>Thomas</FirstName>
<LastName>Wies</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Thomas Wies</PI_FULL_NAME>
<EmailAddress>tw47@nyu.edu</EmailAddress>
<PI_PHON>2129983293</PI_PHON>
<NSF_ID>000611335</NSF_ID>
<StartDate>05/19/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>New York University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100121019</ZipCode>
<PhoneNumber>2129982121</PhoneNumber>
<StreetAddress>70 WASHINGTON SQUARE S</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041968306</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NEW YORK UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041968306</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[New York University]]></Name>
<CityName>New York</CityName>
<StateCode>NY</StateCode>
<ZipCode>100121110</ZipCode>
<StreetAddress><![CDATA[251 Mercer Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~240252</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The focus of this project has been the formal verification of concurrent data structures. These are parallel algorithms that help to store and organize data. The need for such data structures arises from the continuing trend towards a parallel computing infrastructure, both at the small scale in the form of multi-core processors and at the large scale in the form of geo-distributed data centers. To make the most of the available computational resources, software needs to be carefully designed to efficiently divide work into threads, sequences of instructions that can be executed concurrently. Concurrent data structures help to distribute the workload among threads in a way that minimizes the amount of time spent waiting for each other. They are now core components of critical applications such as drive-by-wire controllers in cars, database algorithms managing financial, healthcare, and government data, and the software-defined-networks of internet service providers.<br /><br />Even though concurrent data structures are designed and implemented by experts, the sheer complexity and subtlety of the ways in which different threads can interact with one another means that even these experts sometimes fail to anticipate subtle bugs. These bugs can cause the data to be corrupted or the program to misbehave in unexpected ways. Concurrent data structures are therefore a prime target for formal verification.<br /><br />This project has developed a new mathematical formalism for verifying the correctness of concurrent data structure algorithms and their implementations. The new formalism increases the modularity of the overall correctness proof by exploiting a novel form of rely/guarantee reasoning. The approach has made the verification of concurrent data structures more scalable and enabled the reuse of proof artifacts across different data structure implementations. In particular, it has lead to the first formally verified implementation of a concurrent B-link tree, a commonly used data structure whose verification has so far been out of scope.<br /><br />The results of this research have been published in five papers that have appeared in major publication venues for Computer Science research. In addition, the software and proof artifacts that have been developed in the course of this project are publicly available under non-restrictive open source licenses.<br /><br />The project has provided training opportunities for two PhD students who conducted research related to the project. One student has successfully graduated during the project duration and has subsequently found employment as a postdoctoral researcher. The other PhD student, currently in his third year of studies, has made significant progress towards the completion of his degree. In addition, two master students have conducted research related to the project. One of these students has meanwhile joined a Computer Science PhD program. The other student is completing an MS thesis under the supervision of PI Wies.</p><br> <p>            Last Modified: 01/04/2021<br>      Modified by: Thomas&nbsp;Wies</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The focus of this project has been the formal verification of concurrent data structures. These are parallel algorithms that help to store and organize data. The need for such data structures arises from the continuing trend towards a parallel computing infrastructure, both at the small scale in the form of multi-core processors and at the large scale in the form of geo-distributed data centers. To make the most of the available computational resources, software needs to be carefully designed to efficiently divide work into threads, sequences of instructions that can be executed concurrently. Concurrent data structures help to distribute the workload among threads in a way that minimizes the amount of time spent waiting for each other. They are now core components of critical applications such as drive-by-wire controllers in cars, database algorithms managing financial, healthcare, and government data, and the software-defined-networks of internet service providers.  Even though concurrent data structures are designed and implemented by experts, the sheer complexity and subtlety of the ways in which different threads can interact with one another means that even these experts sometimes fail to anticipate subtle bugs. These bugs can cause the data to be corrupted or the program to misbehave in unexpected ways. Concurrent data structures are therefore a prime target for formal verification.  This project has developed a new mathematical formalism for verifying the correctness of concurrent data structure algorithms and their implementations. The new formalism increases the modularity of the overall correctness proof by exploiting a novel form of rely/guarantee reasoning. The approach has made the verification of concurrent data structures more scalable and enabled the reuse of proof artifacts across different data structure implementations. In particular, it has lead to the first formally verified implementation of a concurrent B-link tree, a commonly used data structure whose verification has so far been out of scope.  The results of this research have been published in five papers that have appeared in major publication venues for Computer Science research. In addition, the software and proof artifacts that have been developed in the course of this project are publicly available under non-restrictive open source licenses.  The project has provided training opportunities for two PhD students who conducted research related to the project. One student has successfully graduated during the project duration and has subsequently found employment as a postdoctoral researcher. The other PhD student, currently in his third year of studies, has made significant progress towards the completion of his degree. In addition, two master students have conducted research related to the project. One of these students has meanwhile joined a Computer Science PhD program. The other student is completing an MS thesis under the supervision of PI Wies.       Last Modified: 01/04/2021       Submitted by: Thomas Wies]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
