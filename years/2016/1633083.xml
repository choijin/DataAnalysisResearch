<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>BIGDATA: Collaborative Research: IA: OSCAR - Open Source Supply Chains and Avoidance of Risk: An Evidence Based Approach to Improve FLOSS Supply Chains</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>429352.00</AwardTotalIntnAmount>
<AwardAmount>429352</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Open source software is an engine for innovation and a critical infrastructure for the nation and yet it is implemented by communities formed from a loose collection of individuals. With each software project relying on thousands of other software projects, this complex and dynamic supply chain introduces new risks and unpredictability, since, unlike in traditional software projects, no contractual relationships with the community exist and individuals could simply lose interest or move on to other activities.&lt;br/&gt;The big data-based approach to software supply chains will stimulate academic and practical work. The tools and practices to quantify and mitigate risks in the rapidly changing global environment with no centralized control or authority will lead to dramatic reductions in risk manifested in, for example, the spread of vulnerabilities thus making the nation both safer and more innovative. The theoretical frameworks and approaches developed will likely influence research and practice in other supply chain contexts.&lt;br/&gt;&lt;br/&gt;The objective of this research is to advance the state of knowledge of software supply chains by collecting and integrating massive public operational data representing development activity and source code from all open source projects and using it to develop novel theories, methods, and tools.   The construction and analysis of the entire open source supply chain provides static and dynamic properties of the network, risk propagation, and system-level risks.  Novel statistical and game-theoretic models are used to assess and mitigate these risks, while methods to contextualize, augment, and correct operational data provide ways to cope with data?s size, complexity, and observational nature.</AbstractNarration>
<MinAmdLetterDate>09/20/2016</MinAmdLetterDate>
<MaxAmdLetterDate>09/20/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1633083</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Herbsleb</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James D Herbsleb</PI_FULL_NAME>
<EmailAddress>jdh@cs.cmu.edu</EmailAddress>
<PI_PHON>4122688933</PI_PHON>
<NSF_ID>000298289</NSF_ID>
<StartDate>09/20/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie Mellon University]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133890</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8083</Code>
<Text>Big Data Science &amp;Engineering</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8083</Code>
<Text>Big Data Science &amp;Engineering</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~429352</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Nearly all companies include open source software (OSS) in their software supply chains, yet there is little understanding of the risks of OSS or of mitigation strategies. In this research we investigated a primary source of OSS risk, i.e., the embedding of projects in ecosystems of highly interdependent yet independently managed projects.</p> <p>We studied how ecosystem dynamics generated risk in several related research projects.&nbsp; We performed a mixed method study of the influence of ecosystem-level factors on the survival of individual projects. Using projects in the PyPI ecosystem, we found a number of factors that were associated with survival of projects, including the number of projects the focal project depends on, the number of projects that depend on the focal project, and the involvement of academic or industry developers. We also conducted interviews with PyPI developers, asking about their interpretation and observations with regard to the statistical relations we observed, and to probe for other potential variables not in our models. We replicated the quantitative elements of this study in the npm ecosystem, finding essentially identical results. This work provides clear guidance, when selecting projects to use, about characteristics that predict survival and continued development versus project dormancy.</p> <p>We also used Ostrom?s theory of Common-Pool Resources (CPR) to inform our work. CPR holds that the appropriation of a subtractive resource such as maintenance effort must be limited to avoid depletion. Very little is known about the sources of demand for maintenance effort or how projects manage this demand. Using a combination of archival analysis and interviews to identify key characteristics of maintenance effort appropriators, we found e.g., demand primarily arises from leaf nodes on the dependency graph, from established users in work-related contexts, and that new adopters tend to ask questions rather than report bugs. Understanding origins is important, since some types of users (e.g., established users in work contexts) are more committed to use of the project and have access to more resources, thus are promising targets for solicitation of support. Projects adopted a variety of effort management strategies, e.g., ignoring questions in favor of attending to bugs, which were higher priority.</p> <p>Identifying sources of effort appropriation was a difficult, manual process. But we were able to identify several predictors of moderate strength that together should allow automated source identification, hence more efficient effort management.</p> <p>We also examined the variety of ways that ecosystems manage changes that ripple across dependency networks. In a typical link in a dependency networks, a ?downstream? project depends on an ?upstream?, e.g., a library of statistical routines. Problems occur when the upstream developer (e.g., the developer of the statistics package) makes changes that cause downstream projects to ?break,? either fail or produce incorrect results. Breaking changes are nearly unavoidable and quite frequent. Since dependency chains are often deep (i.e., A depends on B, which depends on C, which depends on D, etc.) and broad (W, X, Y, and Z all depend on V) breaking changes can cause a cascade of failures with wide-reaching effects; they pose serious risks.</p> <p>We conducted a multiple case study of breaking changes in three ecosystems, and followed this up with a large scale survey of 18 ecosystems. We identified several dozen practices used by upstream and downstream developers to manage changes. Each practice requires additional work, but different practices distribute this effort differently among the various ecosystem participants. An upstream developer, for example, might do nothing after making the breaking change, which imposes all of the costs on downstream developers to discover the change and modify their code. Some practices require upstream developers to shoulder some of the effort, by e.g., bundling changes together into a documented release; creating a detailed ?migration guide? telling downstream developers how to use the new code; or even making the code changes needed by their downstream users. Practices distributed work differently among upstream developers, downstream developers, and end users.</p> <p>We found that the practices used and their associated effort distributions are related to ecosystem values. Some practices, for example, help ensure that end users have a trouble-free experience, but impose high costs on developers. Other practices impose few costs on upstream developers, making it very easy to contribute packages, but impose high costs on downstream developers and end users. We also found that while some values (e.g., quality and stability) are broadly shared, other values (e.g., compatibility of new versions, rapid access to the latest innovations) were highly variable. We also found that while ecosystems generally adopted practices that aligned with their values, there was not a simple relationship between values and practices. The same values were often served by very different practices.</p> <p>These findings will allow better risk identification and management, as well as pointing the way to practices and effort management strategies that can be used to mitigate their impacts.</p><br> <p>            Last Modified: 12/30/2020<br>      Modified by: James&nbsp;D&nbsp;Herbsleb</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Nearly all companies include open source software (OSS) in their software supply chains, yet there is little understanding of the risks of OSS or of mitigation strategies. In this research we investigated a primary source of OSS risk, i.e., the embedding of projects in ecosystems of highly interdependent yet independently managed projects.  We studied how ecosystem dynamics generated risk in several related research projects.  We performed a mixed method study of the influence of ecosystem-level factors on the survival of individual projects. Using projects in the PyPI ecosystem, we found a number of factors that were associated with survival of projects, including the number of projects the focal project depends on, the number of projects that depend on the focal project, and the involvement of academic or industry developers. We also conducted interviews with PyPI developers, asking about their interpretation and observations with regard to the statistical relations we observed, and to probe for other potential variables not in our models. We replicated the quantitative elements of this study in the npm ecosystem, finding essentially identical results. This work provides clear guidance, when selecting projects to use, about characteristics that predict survival and continued development versus project dormancy.  We also used Ostrom?s theory of Common-Pool Resources (CPR) to inform our work. CPR holds that the appropriation of a subtractive resource such as maintenance effort must be limited to avoid depletion. Very little is known about the sources of demand for maintenance effort or how projects manage this demand. Using a combination of archival analysis and interviews to identify key characteristics of maintenance effort appropriators, we found e.g., demand primarily arises from leaf nodes on the dependency graph, from established users in work-related contexts, and that new adopters tend to ask questions rather than report bugs. Understanding origins is important, since some types of users (e.g., established users in work contexts) are more committed to use of the project and have access to more resources, thus are promising targets for solicitation of support. Projects adopted a variety of effort management strategies, e.g., ignoring questions in favor of attending to bugs, which were higher priority.  Identifying sources of effort appropriation was a difficult, manual process. But we were able to identify several predictors of moderate strength that together should allow automated source identification, hence more efficient effort management.  We also examined the variety of ways that ecosystems manage changes that ripple across dependency networks. In a typical link in a dependency networks, a ?downstream? project depends on an ?upstream?, e.g., a library of statistical routines. Problems occur when the upstream developer (e.g., the developer of the statistics package) makes changes that cause downstream projects to ?break,? either fail or produce incorrect results. Breaking changes are nearly unavoidable and quite frequent. Since dependency chains are often deep (i.e., A depends on B, which depends on C, which depends on D, etc.) and broad (W, X, Y, and Z all depend on V) breaking changes can cause a cascade of failures with wide-reaching effects; they pose serious risks.  We conducted a multiple case study of breaking changes in three ecosystems, and followed this up with a large scale survey of 18 ecosystems. We identified several dozen practices used by upstream and downstream developers to manage changes. Each practice requires additional work, but different practices distribute this effort differently among the various ecosystem participants. An upstream developer, for example, might do nothing after making the breaking change, which imposes all of the costs on downstream developers to discover the change and modify their code. Some practices require upstream developers to shoulder some of the effort, by e.g., bundling changes together into a documented release; creating a detailed ?migration guide? telling downstream developers how to use the new code; or even making the code changes needed by their downstream users. Practices distributed work differently among upstream developers, downstream developers, and end users.  We found that the practices used and their associated effort distributions are related to ecosystem values. Some practices, for example, help ensure that end users have a trouble-free experience, but impose high costs on developers. Other practices impose few costs on upstream developers, making it very easy to contribute packages, but impose high costs on downstream developers and end users. We also found that while some values (e.g., quality and stability) are broadly shared, other values (e.g., compatibility of new versions, rapid access to the latest innovations) were highly variable. We also found that while ecosystems generally adopted practices that aligned with their values, there was not a simple relationship between values and practices. The same values were often served by very different practices.  These findings will allow better risk identification and management, as well as pointing the way to practices and effort management strategies that can be used to mitigate their impacts.       Last Modified: 12/30/2020       Submitted by: James D Herbsleb]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
