<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Collaborative Research: Instruction Address Translation Revisited</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2016</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Matt Mutka</SignBlockName>
<PO_EMAI>mmutka@nsf.gov</PO_EMAI>
<PO_PHON>7032927344</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Applications continue to grow both in the size of their code and in the amount&lt;br/&gt;of data they access.  Whether on mobile, desktop, or server platforms,&lt;br/&gt;applications are written in a modular fashion, relying heavily on common&lt;br/&gt;functionality provided by a large number of libraries.  Modern operating&lt;br/&gt;systems leverage this commonality by sharing libraries across applications to&lt;br/&gt;avoid duplicate copies of instructions in memory.  However, operating systems&lt;br/&gt;still maintain independent memory management (address translation) data&lt;br/&gt;for each process, consuming memory resources proportional to the number of&lt;br/&gt;simultaneously executing processes.  The goal of this project is to enhance&lt;br/&gt;the efficiency of memory system access and management for shared code&lt;br/&gt;libraries.  The success of these efforts will contribute to the long-term&lt;br/&gt;sustainability of the world's fast evolving digital economy and society,&lt;br/&gt;reducing computational waste and improving responsiveness.  The education&lt;br/&gt;component will include improving classroom instruction by contributing new&lt;br/&gt;course modules as well as training graduate students in the importance of&lt;br/&gt;efficient sharing.&lt;br/&gt;&lt;br/&gt;This project involves designing novel hardware and software to promote&lt;br/&gt;efficient access to shared code in a multi-tasking environment, including: 1)&lt;br/&gt;new operating system memory management mechanisms and policies to eliminate&lt;br/&gt;duplication and minimize cache and translation lookaside buffer (TLB)&lt;br/&gt;footprint, examining the tradeoffs between the use of variable segments and&lt;br/&gt;hierarchical page tables; 2) reexamining the need for caching translations&lt;br/&gt;when utilizing emerging low-latency persistent memory; and 3) using available&lt;br/&gt;protection support for safe translation sharing in modern TLBs in addition to&lt;br/&gt;designing new hardware support to improve efficiency.</AbstractNarration>
<MinAmdLetterDate>08/11/2016</MinAmdLetterDate>
<MaxAmdLetterDate>08/11/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1618497</AwardID>
<Investigator>
<FirstName>Sandhya</FirstName>
<LastName>Dwarkadas</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sandhya Dwarkadas</PI_FULL_NAME>
<EmailAddress>sandhya@cs.rochester.edu</EmailAddress>
<PI_PHON>5852755647</PI_PHON>
<NSF_ID>000368396</NSF_ID>
<StartDate>08/11/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Rochester</Name>
<CityName>Rochester</CityName>
<ZipCode>146270140</ZipCode>
<PhoneNumber>5852754031</PhoneNumber>
<StreetAddress>518 HYLAN, RC BOX 270140</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY25</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041294109</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ROCHESTER</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041294109</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Rochester]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>146270140</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><br />As applications continue to grow both in the size of code and in the amount<br />of data accessed, virtual memory support, which provides applications with<br />an abstract view of physical memory and enables portability, has become<br />a bottleneck to efficiency and scalability.<br />Research supported by this grant has developed <br />combined hardware and software techniques to improve the efficiency of <br />address translation.<br />Specifically, leveraging the characteristics of modern<br />applications, which increasingly have large code bases and<br />rely on shared library code,<br />this research shows that with appropriate hardware and <br />software modifications, address translation memory and hardware requirements can be reduced.<br />The result is improvements in speed and resource efficiency for<br />mobile, desktop, and commercial workloads.&nbsp; <br />The supported research <br />1) developed new operating system memory management policies that use<br />large pages for code, <br />eliminate duplicate translations in the presence of sharing,<br />and minimize the footprint of translations in  the cache and translation lookaside buffer (TLB);<br />2) made the case against a recent trend of dropping  some hardware mechanisms that can be used to support safe sharing of  translations in TLBs among applications;<br />3) developed virtual memory management techniques to defend against page table<br />side channel attacks with low overhead;<br />4) demonstrated the subtle interactions of translation hardware with the<br />processor pipeline, pointing to the need for more careful design of the core processor pipeline.<br />The results from this project contribute to the<br />long-term sustainability of the world's fast evolving digital economy and<br />society, reducing computational waste and improving responsiveness.<br /><br /><br /></p><br> <p>            Last Modified: 03/29/2020<br>      Modified by: Sandhya&nbsp;Dwarkadas</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  As applications continue to grow both in the size of code and in the amount of data accessed, virtual memory support, which provides applications with an abstract view of physical memory and enables portability, has become a bottleneck to efficiency and scalability. Research supported by this grant has developed  combined hardware and software techniques to improve the efficiency of  address translation. Specifically, leveraging the characteristics of modern applications, which increasingly have large code bases and rely on shared library code, this research shows that with appropriate hardware and  software modifications, address translation memory and hardware requirements can be reduced. The result is improvements in speed and resource efficiency for mobile, desktop, and commercial workloads.   The supported research  1) developed new operating system memory management policies that use large pages for code,  eliminate duplicate translations in the presence of sharing, and minimize the footprint of translations in  the cache and translation lookaside buffer (TLB); 2) made the case against a recent trend of dropping  some hardware mechanisms that can be used to support safe sharing of  translations in TLBs among applications; 3) developed virtual memory management techniques to defend against page table side channel attacks with low overhead; 4) demonstrated the subtle interactions of translation hardware with the processor pipeline, pointing to the need for more careful design of the core processor pipeline. The results from this project contribute to the long-term sustainability of the world's fast evolving digital economy and society, reducing computational waste and improving responsiveness.          Last Modified: 03/29/2020       Submitted by: Sandhya Dwarkadas]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
