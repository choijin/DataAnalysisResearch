<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Secure by Construction: An Automated Approach to Comprehensive Side Channel Resistance</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A software implementation shows side-channel leakage when the physical effects of its implementation have a dependency to secret data such as cryptographic keys. Relevant physical effects include instruction execution time, memory access time, power consumption and electromagnetic radiation. Fifteen years after differential power analysis was first demonstrated, side-channel attacks are affecting software implementations in a broad variety of processors. Yet, without the support of automatic tools, programmers still have to resort to manual and error-prone insertion of countermeasures. This is problematic because side-channel leakage is an implementation effect that is difficult to infer or predict from source code. This project will create automatic software tools that can help software developers synthesize and verify side-channel resistant software, quickly and correctly. The automatic software code transformation techniques to be developed in this project will be released as an open-source compiler, thereby bringing the results in reach of a larger community.&lt;br/&gt;&lt;br/&gt;This project will develop design automation techniques to systematically remove the dependency of side channel leakage to secret data. The proposed countermeasures will be based on inductive synthesis and formal verification, and they will be integrated as compiler-driven transformations on the software code. The estimation of side-channel leakage will be guided through a parameterized processor architecture model. This will ensure that the side-channel resistant code is portable across different architecture targets. Compared to existing countermeasure designs, the proposed approach is generic and application independent; it can be used by non-specialist programmers; and it offers correct-by-construction guarantees through formal analysis techniques.&lt;br/&gt;&lt;br/&gt;The cross-cutting nature of security brings a need for side-channel resistant design to a wide variety of application domains including automotive, industrial, health-care, or smart-grid. Developers from these fields need tools to help them to quickly build correct and secure software without having to deal with the pitfalls of side-channel resistant design. Automatic insertion of side-channel countermeasures will address this need and lead to cheaper and more secure products. The research outcomes of this project include an open-source, extensible compiler, and a hardware demonstration platform to validate the side-channel resistant code generated using the compiler. These artifacts enable the formal methods and compiler community to investigate new countermeasure techniques, and they help the cryptographic engineering community to create a benchmark suite to validate these countermeasures. The PIs will advertise this potential in their respective communities by developing a summer school to teach the outcomes of their research. The PIs will also develop a graduate course that teams up students in embedded system design with students in compiler design.</AbstractNarration>
<MinAmdLetterDate>05/31/2016</MinAmdLetterDate>
<MaxAmdLetterDate>10/26/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1617203</AwardID>
<Investigator>
<FirstName>Patrick</FirstName>
<LastName>Schaumont</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Patrick Schaumont</PI_FULL_NAME>
<EmailAddress>pschaumont@wpi.edu</EmailAddress>
<PI_PHON>5088316472</PI_PHON>
<NSF_ID>000488021</NSF_ID>
<StartDate>10/26/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Patrick</FirstName>
<LastName>Schaumont</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Patrick Schaumont</PI_FULL_NAME>
<EmailAddress>pschaumont@wpi.edu</EmailAddress>
<PI_PHON>5088316472</PI_PHON>
<NSF_ID>000488021</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate>09/13/2016</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Chao</FirstName>
<LastName>Wang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Chao Wang</PI_FULL_NAME>
<EmailAddress>wang626@usc.edu</EmailAddress>
<PI_PHON>2318212962</PI_PHON>
<NSF_ID>000596776</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate>09/13/2016</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Virginia Polytechnic Institute and State University</Name>
<CityName>BLACKSBURG</CityName>
<ZipCode>240610001</ZipCode>
<PhoneNumber>5402315281</PhoneNumber>
<StreetAddress>Sponsored Programs 0170</StreetAddress>
<StreetAddress2><![CDATA[300 Turner Street NW, Suite 4200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003137015</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>VIRGINIA POLYTECHNIC INSTITUTE AND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003137015</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Virginia Polytechnic Institute and State University]]></Name>
<CityName/>
<StateCode>VA</StateCode>
<ZipCode>240610001</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The world relies on software in ever greater measures, and software governs everything from banking infrastructure to control of critical infrastruture. While it has long been understood that the security properties of software are critical to create reliable, trustworthy infrastructure, it is only relatively recently that we understand that hardware plays a critical role in achieving that software security. Hardware, as the engine that runs software, maintains absolute control over what happens in a software program. Conversely, the activities of the software program are reflected in the properties of the hardware. In this project, we investigate an important hardware property affected by secure software. We investigate how secure software is reflected in the physical characteristics of the hardware (such as its power consumption and execution time).</p> <p>This effect is called side-channel leakage, and this effect becomes a problem when the physical effects of the hardware have a dependency on secret data in software such as cryptographic keys. In that case, it is possible to exploit the side-channel leakage and exfiltrate the software secrets even if the software itself appears perfectly secure in a classic (software-oriented) cybersecurity sense.</p> <p>Therefore, this project develops design automation and techniques to systematically remove the dependency of side channel leakage to secret data. This is achieved by means of three concurrent activities.</p> <p>(a) The project develops techniques for the synthesis of software that mitigate side-channel leakage, by including software countermeasures that suppress hardware side-channels in the power consumption and software execution time.</p> <p>(b) The project develops techniques to verify if software is free from side-channel leaks by means of formal techniques. Such techniques&nbsp;automatically verify the quality of side-channel resistant software code, and under practical assumptions, they quantify the amount of residual side-channel leakage.</p> <p>(c) The project investigates the root cause of side channel leakage in hardware using by prototyping and&nbsp; measurement. The project investigates how microprocessors can be created that offer a handle on side-channel leakage and that are amendable to the synthesis of side-channel countermeasures.</p> <p>The broader impact of the project included mentoring of 5 Ph.D. theses (four by female students), 3 MS theses (two by female students), and 4 REU students (four female students). Research findings have been published in peer-reviewed conferences and journals. Software tools developed as part of the project have been released to the research community to enable follow-up research.</p><br> <p>            Last Modified: 12/20/2020<br>      Modified by: Patrick&nbsp;Schaumont</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The world relies on software in ever greater measures, and software governs everything from banking infrastructure to control of critical infrastruture. While it has long been understood that the security properties of software are critical to create reliable, trustworthy infrastructure, it is only relatively recently that we understand that hardware plays a critical role in achieving that software security. Hardware, as the engine that runs software, maintains absolute control over what happens in a software program. Conversely, the activities of the software program are reflected in the properties of the hardware. In this project, we investigate an important hardware property affected by secure software. We investigate how secure software is reflected in the physical characteristics of the hardware (such as its power consumption and execution time).  This effect is called side-channel leakage, and this effect becomes a problem when the physical effects of the hardware have a dependency on secret data in software such as cryptographic keys. In that case, it is possible to exploit the side-channel leakage and exfiltrate the software secrets even if the software itself appears perfectly secure in a classic (software-oriented) cybersecurity sense.  Therefore, this project develops design automation and techniques to systematically remove the dependency of side channel leakage to secret data. This is achieved by means of three concurrent activities.  (a) The project develops techniques for the synthesis of software that mitigate side-channel leakage, by including software countermeasures that suppress hardware side-channels in the power consumption and software execution time.  (b) The project develops techniques to verify if software is free from side-channel leaks by means of formal techniques. Such techniques automatically verify the quality of side-channel resistant software code, and under practical assumptions, they quantify the amount of residual side-channel leakage.  (c) The project investigates the root cause of side channel leakage in hardware using by prototyping and  measurement. The project investigates how microprocessors can be created that offer a handle on side-channel leakage and that are amendable to the synthesis of side-channel countermeasures.  The broader impact of the project included mentoring of 5 Ph.D. theses (four by female students), 3 MS theses (two by female students), and 4 REU students (four female students). Research findings have been published in peer-reviewed conferences and journals. Software tools developed as part of the project have been released to the research community to enable follow-up research.       Last Modified: 12/20/2020       Submitted by: Patrick Schaumont]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
