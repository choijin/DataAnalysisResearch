<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Explore, Understand, and Build a New Profiling Framework for Managed Language Virtual Machines</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2016</AwardEffectiveDate>
<AwardExpirationDate>05/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>224943.00</AwardTotalIntnAmount>
<AwardAmount>240943</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Program profiling is a fundamental and powerful technique to discover, understand and reason about the dynamic or run-time behavior of a program. Existing run-time systems (or Virtual Machines, VM) for managed languages vastly under-utilize the potential of profiling systems, which results in severe performance losses, and increases costs or curtails the suitability of VMs in many domains. The goal of this research is to understand and resolve the limitations that restrict the applicability and effectiveness of program profiling. The intellectual merits are to develop a complete understanding of the fundamental characteristics of program profiling, its limitations and its impact on the effectiveness of dependent optimizations, build a comprehensive and structured profiling framework to increase the efficiency and ease the adoption of profiling mechanisms during VM tasks, and set the stage for increased employment and realized benefits from adaptive optimizations in a VM. The project's broader significance and importance are to deploy managed run-time environments in diverse domains that include the web/Internet, desktop, server, cloud-computing, and mobile systems.&lt;br/&gt;&lt;br/&gt;The research aims to: (a) develop a deeper fundamental understanding of the benefits and limitations of different profiling strategies, and their impact on the effectiveness and performance of feedback-directed optimizations (FDOs), (b) conduct research and engineering that applies this understanding to develop new profiling mechanisms and machinery in the VM, and (c) construct higher-level predictive models that maximize the ease and benefit of using profile knowledge during VM tasks. To conduct this fundamental study, assess and demonstrate its observations, and show the benefits of more effective program profiling to improve existing VM optimizations, and to enable the creation of new adaptive VM optimizations, this work will employ three sets of real VM adaptive tasks: (a) selective compilation and feedback-directed optimizations to improve program speed, (b) heap memory management to increase performance and power efficiency, and (c) code cache management to maintain performance at lower memory utilization. This research promises to improve the performance and accessibility of managed language programs, which is very important for future computing systems as they provide an ideal programming platform in the face of growing software complexity, the best distribution format for portable Internet-based applications, and the most effective execution strategy for safe and secure execution of untrusted web services.</AbstractNarration>
<MinAmdLetterDate>05/31/2016</MinAmdLetterDate>
<MaxAmdLetterDate>01/12/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1619140</AwardID>
<Investigator>
<FirstName>Prasad</FirstName>
<LastName>Kulkarni</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Prasad A Kulkarni</PI_FULL_NAME>
<EmailAddress>prasadk@ku.edu</EmailAddress>
<PI_PHON>7858648819</PI_PHON>
<NSF_ID>000495187</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Kansas Center for Research Inc</Name>
<CityName>Lawrence</CityName>
<ZipCode>660457552</ZipCode>
<PhoneNumber>7858643441</PhoneNumber>
<StreetAddress>2385 IRVING HILL RD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Kansas</StateName>
<StateCode>KS</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>KS02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>076248616</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF KANSAS CENTER FOR RESEARCH, INC.</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007180078</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Kansas Center for Research Inc]]></Name>
<CityName>Lawrence</CityName>
<StateCode>KS</StateCode>
<ZipCode>660457568</ZipCode>
<StreetAddress><![CDATA[2385 Irving Hill Road]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Kansas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>KS02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~224943</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-ec8e801c-7fff-43c8-2598-22b2cd6073c8"> </span></p> <p dir="ltr"><span>The broad project goal was to understand the characteristics, behavior, potential, and impact of profiling and profile-guided optimizations (PGOs) and algorithms in static and dynamic compilers. The project studied the properties of profiling and PGOs for code generation in static compilers (LLVM and GCC) and dynamic compilers (Oracle HotSpot). The project also explored the impact of profiling on critical tasks in high-level language runtime environments, including code cache management and memory management.</span></p> <p><br /><br /></p> <p dir="ltr"><span>Intellectual Merit:</span></p> <p>&nbsp;</p> <p dir="ltr"><span>1. We designed and developed the framework and experiments to understand and quantify the impact of </span><span>intrinsic</span><span> profiling limitations on the effectiveness of adaptive optimizations. For offline profiling, we measure: (a) the performance impact of the difference in training and evaluation inputs on performance of FDOs, and (b) the effect of aggregating profile information across the entire program run. For online profiling, we: (a) assess the effectiveness of FDOs when they have access to the best online profiling data while ignoring any cost overhead, and (b) evaluate the impact of online techniques that only have access to incomplete profile information due to practical issues of run-time overhead and profile data collection delay.</span></p> <p dir="ltr"><span>Results of this study are published in our ACM TACO 2016 paper.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>2. Just-in-time (JIT) compilation during program execution and ahead-of-time (AOT) compilation during software installation are alternate techniques used by managed language virtual machines (VM) to generate optimized native code. We designed and developed the framework and experiments to investigate and quantify the implications of the AOT compilation model on the quality of the generated native code for current VMs.</span></p> <p dir="ltr"><span>This work provides greater insight in the workings, characteristics, and benefits of existing profiling based VM optimization systems, and demonstrates some of the challenges that AOT compilation systems must overcome to achieve comparable code quality to JIT based VMs.</span></p> <p dir="ltr"><span>Results of this study are published in our ACM LCTES 2017 paper.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>3. We extended the previous study by exploring how the quality of profile data impacts the benefit and effectiveness of individual optimizations in a dynamic JIT compiler. One important finding was that most optimizations do not contribute significantly to performance improvement; profile data appears to be most profitably used by inlining and other optimizations that assist with inlining decisions.</span></p> <p dir="ltr"><span>Results of this study were published in our ACM TECS 2020 paper.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>4. Our previous studies had developed a novel framework based in the HotSpot Java VM and Linux operating system, that enables applications to distribute data objects across the DRAM hardware to exploit low-power modes and achieve desired power/performance goals. For this project, we extended our existing&nbsp; framework with an online profile guided optimization for separating hot and cold data objects in the Java VM. We showed that the online optimization reduces DRAM energy consumption by more than 25.5% on average. We also showed that our approach can reduce DRAM energy consumption by up to 48%, in the best case. </span></p> <p dir="ltr"><span>Results of this study are published in the ACM TACO 2018.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>5. We proposed, designed, implemented and evaluated a multi-tiered allocation strategy that uses prior information to group sites for automatic tier selection. We showed that a guidance-based approach has the potential to outperform precise information based reactive placement of data. </span></p> <p dir="ltr"><span>Results of this study are published at LNCS ARCS 201.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>6. We developed MemBrain, a software-guided tiering framework that aims to enable efficient data placement on hybrid memory systems. MemBrain facilitates the use of data-tier guidance by associating profiles of memory usage characteristics, such as bandwidth and capacity, with program allocation sites. </span></p> <p dir="ltr"><span>Results of this study are published in IEEE NAS 2018, where it received the Best Paper award.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>7. We developed Valence (Variable-length encoding of calling contexts), a compiler-based approach to generate precise, efficient, and scalable calling context encodings. Our study developed a novel variable length encoding scheme that uses only a small number of bits to store each piece of the calling context. </span></p> <p dir="ltr"><span>Results of this study are published at ACM CC 2019.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>8. We studied the effectiveness of program features for guiding memory management. The results show that even relatively simple features, such as object size, are useful for distinguishing data with different usage properties, but finer-grained features significantly increase classification accuracy. </span></p> <p dir="ltr"><span>Results of this study are blished at ACM/IEEE MemSys 2019.</span></p> <p><br /><br /></p> <p dir="ltr"><span>Broader Impacts:</span></p> <p>&nbsp;</p> <p dir="ltr"><span>The results of this research are being integrated into the PIs' core Compiler Construction and Virtual Machine classes at each institution. We applied this research during outreach and mentoring activities for K-12 and high-school students to enhance scientific literacy among women and underrepresented groups in CS. Several graduate and undergraduate students have gained important skills in research and development of large software systems, including compilers and virtual machines. Publications on our work describing our innovations and experiences will enable others to learn new techniques and tools.&nbsp;</span></p> <p>&nbsp;</p><br> <p>            Last Modified: 11/02/2020<br>      Modified by: Prasad&nbsp;A&nbsp;Kulkarni</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   The broad project goal was to understand the characteristics, behavior, potential, and impact of profiling and profile-guided optimizations (PGOs) and algorithms in static and dynamic compilers. The project studied the properties of profiling and PGOs for code generation in static compilers (LLVM and GCC) and dynamic compilers (Oracle HotSpot). The project also explored the impact of profiling on critical tasks in high-level language runtime environments, including code cache management and memory management.     Intellectual Merit:    1. We designed and developed the framework and experiments to understand and quantify the impact of intrinsic profiling limitations on the effectiveness of adaptive optimizations. For offline profiling, we measure: (a) the performance impact of the difference in training and evaluation inputs on performance of FDOs, and (b) the effect of aggregating profile information across the entire program run. For online profiling, we: (a) assess the effectiveness of FDOs when they have access to the best online profiling data while ignoring any cost overhead, and (b) evaluate the impact of online techniques that only have access to incomplete profile information due to practical issues of run-time overhead and profile data collection delay. Results of this study are published in our ACM TACO 2016 paper.    2. Just-in-time (JIT) compilation during program execution and ahead-of-time (AOT) compilation during software installation are alternate techniques used by managed language virtual machines (VM) to generate optimized native code. We designed and developed the framework and experiments to investigate and quantify the implications of the AOT compilation model on the quality of the generated native code for current VMs. This work provides greater insight in the workings, characteristics, and benefits of existing profiling based VM optimization systems, and demonstrates some of the challenges that AOT compilation systems must overcome to achieve comparable code quality to JIT based VMs. Results of this study are published in our ACM LCTES 2017 paper.    3. We extended the previous study by exploring how the quality of profile data impacts the benefit and effectiveness of individual optimizations in a dynamic JIT compiler. One important finding was that most optimizations do not contribute significantly to performance improvement; profile data appears to be most profitably used by inlining and other optimizations that assist with inlining decisions. Results of this study were published in our ACM TECS 2020 paper.    4. Our previous studies had developed a novel framework based in the HotSpot Java VM and Linux operating system, that enables applications to distribute data objects across the DRAM hardware to exploit low-power modes and achieve desired power/performance goals. For this project, we extended our existing  framework with an online profile guided optimization for separating hot and cold data objects in the Java VM. We showed that the online optimization reduces DRAM energy consumption by more than 25.5% on average. We also showed that our approach can reduce DRAM energy consumption by up to 48%, in the best case.  Results of this study are published in the ACM TACO 2018.    5. We proposed, designed, implemented and evaluated a multi-tiered allocation strategy that uses prior information to group sites for automatic tier selection. We showed that a guidance-based approach has the potential to outperform precise information based reactive placement of data.  Results of this study are published at LNCS ARCS 201.    6. We developed MemBrain, a software-guided tiering framework that aims to enable efficient data placement on hybrid memory systems. MemBrain facilitates the use of data-tier guidance by associating profiles of memory usage characteristics, such as bandwidth and capacity, with program allocation sites.  Results of this study are published in IEEE NAS 2018, where it received the Best Paper award.    7. We developed Valence (Variable-length encoding of calling contexts), a compiler-based approach to generate precise, efficient, and scalable calling context encodings. Our study developed a novel variable length encoding scheme that uses only a small number of bits to store each piece of the calling context.  Results of this study are published at ACM CC 2019.    8. We studied the effectiveness of program features for guiding memory management. The results show that even relatively simple features, such as object size, are useful for distinguishing data with different usage properties, but finer-grained features significantly increase classification accuracy.  Results of this study are blished at ACM/IEEE MemSys 2019.     Broader Impacts:    The results of this research are being integrated into the PIs' core Compiler Construction and Virtual Machine classes at each institution. We applied this research during outreach and mentoring activities for K-12 and high-school students to enhance scientific literacy among women and underrepresented groups in CS. Several graduate and undergraduate students have gained important skills in research and development of large software systems, including compilers and virtual machines. Publications on our work describing our innovations and experiences will enable others to learn new techniques and tools.           Last Modified: 11/02/2020       Submitted by: Prasad A Kulkarni]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
