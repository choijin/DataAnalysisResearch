<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SBIR Phase I:  Proactive Network Configuration Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2016</AwardEffectiveDate>
<AwardExpirationDate>06/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>225000.00</AwardTotalIntnAmount>
<AwardAmount>225000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07070000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>IIP</Abbreviation>
<LongName>Div Of Industrial Innovation &amp; Partnersh</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Peter Atherton</SignBlockName>
<PO_EMAI>patherto@nsf.gov</PO_EMAI>
<PO_PHON>7032928772</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The broader impact/commercial potential of this Small Business Innovation Research (SBIR) Phase I project stems from technology that automatically analyzes network configurations for errors. Computer networks are so tightly woven into the fabric of modern business and society that the delivery of almost all products and services relies on them. Yet networks are notoriously difficult to manage correctly today, and configuration errors that compromise availability, security, and performance are common. Today operators are left to simply wait for bad things to happen and then diagnose and repair the errors as quickly as possible to mitigate the damage. The technology developed in this project will enable organizations to identify network security and availability errors before they are introduced into the running network, thereby saving significant time and money, preventing unauthorized access to customer information, and minimizing down time.  The project will also lead to a better understanding of the most prevalent kinds of network configuration errors and how to design networks to prevent them.&lt;br/&gt;&lt;br/&gt;This Small Business Innovation Research (SBIR) Phase I project will perform the research and development necessary to demonstrate the technical feasibility of a proactive approach to detecting network configuration errors, as instantiated in a software tool. The key innovation underlying the approach is the ability to comprehensively and precisely model and validate the behavior of a network solely by analyzing the network's configuration files. The proposed work has three primary technical goals.  First, configuration languages are extremely diverse and complex, so the tool currently only supports features that have been used by the networks to which it has been applied. A key challenge is to augment the logical model underlying the tool to support other features that are used by real-world networks.  Second, the tool is currently computationally expensive for large networks. Scalability will be improved by leveraging the structure inherent in network configurations and topologies to perform configuration analysis modularly.  Third, to be usable by network operators, the tool must integrate with existing source-control repositories and must provide an expressive interface enabling operators to explore the analysis results.  In summary, these research directions will turn the software tool from a research prototype into an expressive, scalable, and usable tool for analyzing real networks.</AbstractNarration>
<MinAmdLetterDate>06/22/2016</MinAmdLetterDate>
<MaxAmdLetterDate>06/22/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1621685</AwardID>
<Investigator>
<FirstName>Ari</FirstName>
<LastName>Fogel</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ari Fogel</PI_FULL_NAME>
<EmailAddress>ari@intentionet.com</EmailAddress>
<PI_PHON>6318800531</PI_PHON>
<NSF_ID>000712721</NSF_ID>
<StartDate>06/22/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Intentionet, Inc.</Name>
<CityName>Redmond</CityName>
<ZipCode>980524444</ZipCode>
<PhoneNumber>2065796567</PhoneNumber>
<StreetAddress>16625 Redmond Way Ste M241</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>080073865</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>INTENTIONET, INC.</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Intentionet, Inc.]]></Name>
<CityName>Redmond</CityName>
<StateCode>WA</StateCode>
<ZipCode>980524444</ZipCode>
<StreetAddress><![CDATA[16625 Redmond Way Ste M241]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>5371</Code>
<Text>SBIR Phase I</Text>
</ProgramElement>
<ProgramReference>
<Code>5371</Code>
<Text>SMALL BUSINESS PHASE I</Text>
</ProgramReference>
<ProgramReference>
<Code>8032</Code>
<Text>Software Services and Applications</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~225000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Computer networks are so tightly woven into the fabric of modern business and society that the delivery of almost all products and services relies on them. &nbsp;When they fail or their security is breached, organizations lose revenue, employee productivity suffers, and customers are frustrated. Yet network errors that compromise availability, security, and performance are a regular occurrence today. &nbsp;Many studies over the last two decades have consistently shown that the dominant root causes of such issues are errors in <em>network configuration</em>, which is done today through hundreds of low-level directives that determine the behavior of individual network devices.</p> <p>&nbsp;In this project we extended the capabilities of the Batfish tool for automatic network configuration analysis, with the overall goal of demonstrating its technical feasibility in a commercial setting. &nbsp;Batfish takes as input the unmodified configuration files for each network router, which are expressed in various vendor-specific languages (e.g., Cisco's IOS, Juniper's JunOS). &nbsp;Batfish then answers queries about network configuration and behavior. &nbsp;Given a query, Batfish either guarantees that the desired network property holds or provides concrete example packets and/or relevant configuration directives that illustrate the violation.</p> <p>Because Batfish analyzes a network's configuration files offline, without requiring access to the network itself, it enables a <em>proactive</em> approach to network validation. &nbsp;Network engineers can validate proposed configuration changes in advance, before they are installed in the running network. &nbsp;Further, Batfish enables a host of other capabilities that are absent today. For example, network engineers can propose "what-if" questions about network behavior under various failure and other scenarios. &nbsp;As another example, they can go "back in time" to understand why something worked yesterday but is broken today.</p> <p>In this project we enhanced Batfish in three major directions. &nbsp;First, a distinguishing feature of Batfish is its ability to comprehensively analyze a network based only on its configuration. &nbsp;However, configuration languages are extremely diverse and complex, with hundreds of commands, each of which can be parameterized in various ways. Further, these languages are vendor-specific and can also be specific to particular models of routers from a given vendor. &nbsp;Before the grant period began, Batfish included support for the most common configuration commands of the most common routing protocols (BGP and OSPF) for both Cisco's IOS and Juniper's JunOS configuration languages. &nbsp;&nbsp;</p> <p>A key technical thrust has therefore been to augment Batfish to support other control-plane features that are used by real-world networks. &nbsp;We have undergone this process of updating Batfish iteratively, to the point where it can precisely analyze the network configurations of our pilot customers. &nbsp;We have extended our support for IOS and JunOS significantly, added support for reasoning about the network's management plane via protocols such as AAA (authentication, authorization, accounting) and NTP (network time protocol), and have added support for more devices, such as firewalls.</p> <p>Second, we developed new techniques to improve the efficiency and scalability of Batfish's analysis. &nbsp;The original research prototype of the Batfish tool employed a form of logic programming to model a network's configuration. &nbsp;This program was then simply executed to produce a representation of the network's data plane, which describes the forwarding behavior of each router. &nbsp;While this approach is conceptually simple and elegant, it turned out to be a significant scalability bottleneck even for relatively small networks.</p> <p>To address this problem, in this project we completely reimplemented Batfish's analysis engine in Java. &nbsp; This implementation style gives us finer-grained control over the analysis, allowing us to optimize it significantly. &nbsp;The new code is also much easier to maintain and evolve as we incorporate new configuration features. &nbsp; Batfish's computation is now multiple orders of magnitude more time- and space-efficient than the original version.</p> <p>Third, we developed new interfaces to the Batfish tool to improve its usability. At the start of the grant period, Batfish had only a very simple command-line interface, which enabled performing a handful of built-in analyses. &nbsp;We have enhanced Batfish's usability in several ways, based on feedback from our pilot customers. &nbsp;We have exposed and documented a data model for Batfish's representation of the network configuration and data plane. &nbsp;The data model employs the widely used JSON format, with which many network engineers are already familiar. &nbsp;Engineers can manually or programmatically (in their favorite programming language) navigate through the data model to check various properties of the network. &nbsp;In this way, engineers are no longer restricted to checking the small number of built-in queries that Batfish provides. &nbsp;We also created Python bindings to Batfish. &nbsp;The Python API allows complete access to Batfish functionality. &nbsp;Further, it can be used either in an interactive Python session or in batch mode as part of a larger Python-based application.</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/18/2017<br>      Modified by: Ari&nbsp;Fogel</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Computer networks are so tightly woven into the fabric of modern business and society that the delivery of almost all products and services relies on them.  When they fail or their security is breached, organizations lose revenue, employee productivity suffers, and customers are frustrated. Yet network errors that compromise availability, security, and performance are a regular occurrence today.  Many studies over the last two decades have consistently shown that the dominant root causes of such issues are errors in network configuration, which is done today through hundreds of low-level directives that determine the behavior of individual network devices.   In this project we extended the capabilities of the Batfish tool for automatic network configuration analysis, with the overall goal of demonstrating its technical feasibility in a commercial setting.  Batfish takes as input the unmodified configuration files for each network router, which are expressed in various vendor-specific languages (e.g., Cisco's IOS, Juniper's JunOS).  Batfish then answers queries about network configuration and behavior.  Given a query, Batfish either guarantees that the desired network property holds or provides concrete example packets and/or relevant configuration directives that illustrate the violation.  Because Batfish analyzes a network's configuration files offline, without requiring access to the network itself, it enables a proactive approach to network validation.  Network engineers can validate proposed configuration changes in advance, before they are installed in the running network.  Further, Batfish enables a host of other capabilities that are absent today. For example, network engineers can propose "what-if" questions about network behavior under various failure and other scenarios.  As another example, they can go "back in time" to understand why something worked yesterday but is broken today.  In this project we enhanced Batfish in three major directions.  First, a distinguishing feature of Batfish is its ability to comprehensively analyze a network based only on its configuration.  However, configuration languages are extremely diverse and complex, with hundreds of commands, each of which can be parameterized in various ways. Further, these languages are vendor-specific and can also be specific to particular models of routers from a given vendor.  Before the grant period began, Batfish included support for the most common configuration commands of the most common routing protocols (BGP and OSPF) for both Cisco's IOS and Juniper's JunOS configuration languages.     A key technical thrust has therefore been to augment Batfish to support other control-plane features that are used by real-world networks.  We have undergone this process of updating Batfish iteratively, to the point where it can precisely analyze the network configurations of our pilot customers.  We have extended our support for IOS and JunOS significantly, added support for reasoning about the network's management plane via protocols such as AAA (authentication, authorization, accounting) and NTP (network time protocol), and have added support for more devices, such as firewalls.  Second, we developed new techniques to improve the efficiency and scalability of Batfish's analysis.  The original research prototype of the Batfish tool employed a form of logic programming to model a network's configuration.  This program was then simply executed to produce a representation of the network's data plane, which describes the forwarding behavior of each router.  While this approach is conceptually simple and elegant, it turned out to be a significant scalability bottleneck even for relatively small networks.  To address this problem, in this project we completely reimplemented Batfish's analysis engine in Java.   This implementation style gives us finer-grained control over the analysis, allowing us to optimize it significantly.  The new code is also much easier to maintain and evolve as we incorporate new configuration features.   Batfish's computation is now multiple orders of magnitude more time- and space-efficient than the original version.  Third, we developed new interfaces to the Batfish tool to improve its usability. At the start of the grant period, Batfish had only a very simple command-line interface, which enabled performing a handful of built-in analyses.  We have enhanced Batfish's usability in several ways, based on feedback from our pilot customers.  We have exposed and documented a data model for Batfish's representation of the network configuration and data plane.  The data model employs the widely used JSON format, with which many network engineers are already familiar.  Engineers can manually or programmatically (in their favorite programming language) navigate through the data model to check various properties of the network.  In this way, engineers are no longer restricted to checking the small number of built-in queries that Batfish provides.  We also created Python bindings to Batfish.  The Python API allows complete access to Batfish functionality.  Further, it can be used either in an interactive Python session or in batch mode as part of a larger Python-based application.          Last Modified: 07/18/2017       Submitted by: Ari Fogel]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
