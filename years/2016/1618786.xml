<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>STARSS: Small: Defending Against Hardware Covert Timing Channels</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>299564.00</AwardTotalIntnAmount>
<AwardAmount>299564</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sandip Kundu</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Safeguarding sensitive user information stored in computer systems is a fast growing concern, especially as computers are universally used everywhere from national defense to mobile phones. Malicious hackers have found unscrupulous ways to steal sensitive information largely by exploiting the vulnerabilities in existing hardware and software. Among the many forms of information leakage, covert timing channels exfiltrate secrets from a trojan process with higher security credentials to a spy process with lesser credentials by exploiting the access timing of system resources. Such covert timing channels are elusive since they communicate indirectly through timing modulation without leaving any physical trace in memory. By detecting the presence of covert timing channels and defending against them, our project offers significant benefits to society through preventing undesired sensitive data leakage to malicious parties. &lt;br/&gt;&lt;br/&gt;The three central objectives of this project are to: 1. Investigate the science behind the construction and operation of hardware covert timing channels, 2. Devise mechanisms to detect hardware timing channels, 3. Mount cost-effective, runtime defense strategies to undermine the reliability of covert timing channels. We investigate scientific ways to identify key indicator events, and analyze their roles in the operation of covert timing channels. We design mechanisms to capture the runtime system behavior, and detect the presence of a covert timing channel. Finally, to prevent information leakage, we use hierarchical, multi-level defense strategy where we estimate the agility of the adversary by measuring the defense?s effectiveness after deployment, and automatically recalibrate our defense to decimate the timing channel activity.</AbstractNarration>
<MinAmdLetterDate>08/24/2016</MinAmdLetterDate>
<MaxAmdLetterDate>08/24/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1618786</AwardID>
<Investigator>
<FirstName>Milos</FirstName>
<LastName>Doroslovacki</LastName>
<PI_MID_INIT>I</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Milos I Doroslovacki</PI_FULL_NAME>
<EmailAddress>doroslov@gwu.edu</EmailAddress>
<PI_PHON>2029946916</PI_PHON>
<NSF_ID>000285192</NSF_ID>
<StartDate>08/24/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Guru Prasadh</FirstName>
<LastName>Venkataramani</LastName>
<PI_MID_INIT>V</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Guru Prasadh V Venkataramani</PI_FULL_NAME>
<EmailAddress>guruv@gwu.edu</EmailAddress>
<PI_PHON>2029942980</PI_PHON>
<NSF_ID>000580837</NSF_ID>
<StartDate>08/24/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>George Washington University</Name>
<CityName>Washington</CityName>
<ZipCode>200520086</ZipCode>
<PhoneNumber>2029940728</PhoneNumber>
<StreetAddress>1922 F Street NW</StreetAddress>
<StreetAddress2><![CDATA[4th Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>District of Columbia</StateName>
<StateCode>DC</StateCode>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>DC00</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>043990498</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGE WASHINGTON UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>043990498</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[George Washington University]]></Name>
<CityName>Washington</CityName>
<StateCode>DC</StateCode>
<ZipCode>200520001</ZipCode>
<StreetAddress><![CDATA[800 22nd St NW]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>District of Columbia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>DC00</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>021Z</Code>
<Text>Industry Partnerships</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>8225</Code>
<Text>SaTC Special Projects</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~299564</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Information leakage is a fast growing concern that affects computer users, exacerbated by the increasing amount of shared multicore resources. Timing channels in micoarchitecture are becoming a widely studied class of information leakage attacks, where modulation in access timing of shared hardware resources (such as hardware cache memory structures) can be observed by a covertly-operating spy processes in order to receive secrets from an insider application with malicious intent.</span></p> <p><span><br /></span></p> <p><span>To address this significant computer system security challenge, this research project has pioneered algorithms and solutions to identify the vulnerabilities and defense approaches to guard against covert timing channels. These attacks usually target hardware resource contention and cache conflict-based communication on shared multicore hardware.</span></p> <p>&nbsp;</p> <p>Overall, this project has highlighted and addressed several key issues surrounding hardware covert timing channels, namely:</p> <p class="p1">1. Methods to discover the indicator events behind covert timing channels on shared hardware.</p> <p class="p1">2. Mathematical models to represent access event patterns in hardware units.</p> <p class="p1">3. Hardware designs with simple and robust signal processing methods to detect covert communication.</p> <p class="p1">4. On-demand, runtime defenses in order to cripple the timing channel activity.</p> <p class="p1">5. Quantifying the efficacy of the proposed detection/defense techniques using mathematical and experimental techniques.</p> <p class="p1">6. Adopting automated diagnosis and remediation to minimize performance impact on applications already running in computer systems.</p> <p class="p1">7. Identifying hardware/software support needed by our security framework.</p> <p class="p1">&nbsp;</p> <p class="p1">The research publications from this project have aimed to understand the unique traits and characteristics that facilitate the creation of hardware-based covert timing channels, and subsequently detect and undermine their operation dynamically to improve the resiliency of the system. This has eventually led to better hardware design for assurance. The research has systematically aimed to develop scientific methodologies to quantify the agility of the adversaries, and mount dynamic, cost-effective, multi-tier defense strategies against them. In other words, the defenses are mounted judiciously based on the observed malicious behavior instead of having to preemptively guard every shared resource and sacrifice system performance unnecessarily.</p> <p class="p1">&nbsp;</p> <p class="p1">Some of the prominent outcomes from this project have included the following findings:</p> <p class="p1"><span>1. In IEEE MICRO 2016 article, we present a microarchitecture-level framework that detects the possible presence of covert timing channels on shared hardware including cache memory. Experiments demonstrate the framework's ability to successfully detect different types of covert timing channels on various hardware structures and communication patterns accurately.</span></p> <p class="p1">2. Cache&nbsp;<span>Coherence protocols are a performance-enhancing feature incorporated into most modern processors that are in use today. Our study published in IEEE HPCA 2018 showed that such oft-used features can be prone to timing channels, and as such, computer architects need to carefully avoid designing such features from becoming security exploits.</span></p> <p class="p1">3. W<span>e have designed Prefetch-guard, an efficient and low-cost mitigation mechanism against cache-based timing channels (published in IEEE HOST 2018). Prefetch-guard leverages hardware prefetchers (already present in modern processors to enhance cache memory performance) in order to obfuscate the effect of timing modulation used by adversaries during security attacks.&nbsp; With prefetch-guard, we observe that the cache timing channels suffer a 53% bit error rate which makes it very hard or impossible for the spy to decipher any useful information. This work was selected for Top Picks in Hardware and Embedded Security.</span></p> <p class="p1">4.&nbsp;<span>In our IEEE HOST 2019 publication,&nbsp;&nbsp;we proposed COTSknight, a new framework that guards the system against several classes of cache timing channel attacks by making novel use of Commercial Off-The-Shelf (COTS) architectural support for cache resource monitoring and prioritization.&nbsp;<span>Our results show that COTSknight can successfully thwart several classes of timing channel attacks at practically zero extra cost, as most of the features utilized by COTSknight are already available in processors.</span></span></p> <p class="p1">5. In our ACM DAC 2020 paper,&nbsp;<span>we repurpose a classic cache performance metric namely, reuse distance, to capture the activity of an adversary in cache timing channels. Our experimental results show that we can identify adversaries with zero false positives and make timing channels suffer from over 50% bit error rate on average. This new metric can be immensely useful to&nbsp;<span>carefully inject noise and mislead the adversary from inferring the victim application's activity when executing on a computer system.</span></span></p> <p><span>As broader impact, this project has begun to bridge a critical gap posed by security vulnerabilities arising from timing channel exploits on multi-core processors. Further, it offers a much needed understanding of covert timing channels with thorough studies aimed at understanding their characteristics, and by devising mechanisms to detect and defend against them. Through this endeavor, hardware security and protection of sensistive user data will gain increased focus within the computing community.</span></p> <p><span><br /></span></p><br> <p>            Last Modified: 11/11/2020<br>      Modified by: Guru Prasadh&nbsp;V&nbsp;Venkataramani</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Information leakage is a fast growing concern that affects computer users, exacerbated by the increasing amount of shared multicore resources. Timing channels in micoarchitecture are becoming a widely studied class of information leakage attacks, where modulation in access timing of shared hardware resources (such as hardware cache memory structures) can be observed by a covertly-operating spy processes in order to receive secrets from an insider application with malicious intent.     To address this significant computer system security challenge, this research project has pioneered algorithms and solutions to identify the vulnerabilities and defense approaches to guard against covert timing channels. These attacks usually target hardware resource contention and cache conflict-based communication on shared multicore hardware.     Overall, this project has highlighted and addressed several key issues surrounding hardware covert timing channels, namely: 1. Methods to discover the indicator events behind covert timing channels on shared hardware. 2. Mathematical models to represent access event patterns in hardware units. 3. Hardware designs with simple and robust signal processing methods to detect covert communication. 4. On-demand, runtime defenses in order to cripple the timing channel activity. 5. Quantifying the efficacy of the proposed detection/defense techniques using mathematical and experimental techniques. 6. Adopting automated diagnosis and remediation to minimize performance impact on applications already running in computer systems. 7. Identifying hardware/software support needed by our security framework.   The research publications from this project have aimed to understand the unique traits and characteristics that facilitate the creation of hardware-based covert timing channels, and subsequently detect and undermine their operation dynamically to improve the resiliency of the system. This has eventually led to better hardware design for assurance. The research has systematically aimed to develop scientific methodologies to quantify the agility of the adversaries, and mount dynamic, cost-effective, multi-tier defense strategies against them. In other words, the defenses are mounted judiciously based on the observed malicious behavior instead of having to preemptively guard every shared resource and sacrifice system performance unnecessarily.   Some of the prominent outcomes from this project have included the following findings: 1. In IEEE MICRO 2016 article, we present a microarchitecture-level framework that detects the possible presence of covert timing channels on shared hardware including cache memory. Experiments demonstrate the framework's ability to successfully detect different types of covert timing channels on various hardware structures and communication patterns accurately. 2. Cache Coherence protocols are a performance-enhancing feature incorporated into most modern processors that are in use today. Our study published in IEEE HPCA 2018 showed that such oft-used features can be prone to timing channels, and as such, computer architects need to carefully avoid designing such features from becoming security exploits. 3. We have designed Prefetch-guard, an efficient and low-cost mitigation mechanism against cache-based timing channels (published in IEEE HOST 2018). Prefetch-guard leverages hardware prefetchers (already present in modern processors to enhance cache memory performance) in order to obfuscate the effect of timing modulation used by adversaries during security attacks.  With prefetch-guard, we observe that the cache timing channels suffer a 53% bit error rate which makes it very hard or impossible for the spy to decipher any useful information. This work was selected for Top Picks in Hardware and Embedded Security. 4. In our IEEE HOST 2019 publication,  we proposed COTSknight, a new framework that guards the system against several classes of cache timing channel attacks by making novel use of Commercial Off-The-Shelf (COTS) architectural support for cache resource monitoring and prioritization. Our results show that COTSknight can successfully thwart several classes of timing channel attacks at practically zero extra cost, as most of the features utilized by COTSknight are already available in processors. 5. In our ACM DAC 2020 paper, we repurpose a classic cache performance metric namely, reuse distance, to capture the activity of an adversary in cache timing channels. Our experimental results show that we can identify adversaries with zero false positives and make timing channels suffer from over 50% bit error rate on average. This new metric can be immensely useful to carefully inject noise and mislead the adversary from inferring the victim application's activity when executing on a computer system.  As broader impact, this project has begun to bridge a critical gap posed by security vulnerabilities arising from timing channel exploits on multi-core processors. Further, it offers a much needed understanding of covert timing channels with thorough studies aimed at understanding their characteristics, and by devising mechanisms to detect and defend against them. Through this endeavor, hardware security and protection of sensistive user data will gain increased focus within the computing community.          Last Modified: 11/11/2020       Submitted by: Guru Prasadh V Venkataramani]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
