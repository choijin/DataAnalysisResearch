<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small: Techniques for Pruning Problem and Solution Spaces to Enable Methodical Exploration of Software Development Alternatives</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2016</AwardEffectiveDate>
<AwardExpirationDate>05/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software engineers make thousands of design decisions during development.  That process remains manual and error-prone, while new research advances tend to be partial and disconnected from one another. A key reason is that prevailing approaches treat uniformly software systems across application domains (e.g., games, banking, avionics).  The variations among different kinds of software systems have led some researchers to narrow their focus to specific domains.  Domain-specific approaches work well, but only within the confines of a domain.  This project is developing simple, but powerful techniques that enable software engineers to extend the benefits of domain-specificity across diverse domains, and that guide and support engineers in modeling and analyzing complex problems.&lt;br/&gt;&lt;br/&gt;The project furthers the advances to-date in model-driven engineering (MDE). MDE has two known shortcomings: (1) existing techniques generate software modeling support for an application domain, but not analysis and simulation tools; (2) implementation generation is restricted to specific domains, languages, and toolsets.  This is coupled with two additional shortcomings: (3) modeling editors generated by MDE toolsets provide no support for design space exploration; (4) optimal system deployment depends on parameters that form a massive space of options.  This project targets the above four shortcomings. It defines an MDE platform with extensible semantics and automatically synthesizes model interpreters for software system design, analysis, simulation, and generation.  The biggest envisioned impact of this project is in its potential to change how software engineers approach development.  In particular, the burden of making a possibly overwhelming number of non-critical, but also non-obvious, decisions is shifted to tools, allowing engineers to focus on things that matter.  This presents an opportunity to change the way software engineers are trained, from the predominant one-size-fits-all curricula of today to the more appropriate domain-driven specializations.</AbstractNarration>
<MinAmdLetterDate>05/31/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/31/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1618231</AwardID>
<Investigator>
<FirstName>Nenad</FirstName>
<LastName>Medvidovic</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nenad Medvidovic</PI_FULL_NAME>
<EmailAddress>neno@usc.edu</EmailAddress>
<PI_PHON>2137405579</PI_PHON>
<NSF_ID>000485161</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900890001</ZipCode>
<StreetAddress><![CDATA[3720 S. Flower St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA37</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="p1">When designing a software system, software architects make a series of design decisions that directly impact the system&rsquo;s quality. The number of available design alternatives grows rapidly with system size, creating an enormous space of intertwined design concerns that renders their manual exploration impractical. While there are techniques that automate portions of the exploration process, they still require significant involvement from architects. This project has resulted in the development of eQual, a novel technique for simulation-based assessment of architectural designs. eQual is effective in practice because it (1) limits the amount of information the architects have to provide and (2) adapts existing optimization algorithms to effectively explore massive spaces of design alternatives using the architects&rsquo; inputs. This project has also resulted in two &ldquo;sister techniques&rdquo; to eQual: RecovAr identifies architectural design decisions in already implemented software systems, while PredictAr uses the identified architectural design decisions to predict implementation-level issues that are likely to be reported about the system in a future version.</p> <p class="p1">We empirically demonstrate our solution's scope, usability, effectiveness, and scalability, showing that its results outperform the state-of-the-art.&nbsp;&nbsp;(1) We demonstrate that our solution&nbsp;<em>matches the problem scope&nbsp;</em>of state-of-the-art competing approaches by using them side-by-side in a controlled user study involving real engineers tasked with different software design scenarios. Our results show that users of our solution are statistically significantly more confident in their designs, and that they prefer our tools&rsquo; usability to that of the competing approaches. We further apply our work on a set of real-world systems with previously published ground-truths regarding their key design choices. (2) We show that our work is&nbsp;<em>easier to use</em>&nbsp;than competing approaches by analyzing the burden placed on engineers via published models of real-world systems. For example, in one instance, we showed that for a model of the Hadoop real-world system, our implementation of eQual requireed architects to spend six minutes to interactively answer its required questions, while the analogous use of the competing technique took more than four hours. (3) We show that our work produces designs of&nbsp;<em>very high quality</em>. Our user study indicates that engineers using the tools emerging from this project produce statistically significantly higher-quality designs than those who use competing approaches. Moreover, we show that, for the real-world systems with published ground-truths, our solution recommends system desings of comparable quality to the solutions previously (manually) determined to be optimal. (4) We demonstrate that our technique&nbsp;<em>scales optimally</em>&nbsp;with the number of available computer and the system's size.</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/08/2019<br>      Modified by: Nenad&nbsp;Medvidovic</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[When designing a software system, software architects make a series of design decisions that directly impact the system?s quality. The number of available design alternatives grows rapidly with system size, creating an enormous space of intertwined design concerns that renders their manual exploration impractical. While there are techniques that automate portions of the exploration process, they still require significant involvement from architects. This project has resulted in the development of eQual, a novel technique for simulation-based assessment of architectural designs. eQual is effective in practice because it (1) limits the amount of information the architects have to provide and (2) adapts existing optimization algorithms to effectively explore massive spaces of design alternatives using the architects? inputs. This project has also resulted in two "sister techniques" to eQual: RecovAr identifies architectural design decisions in already implemented software systems, while PredictAr uses the identified architectural design decisions to predict implementation-level issues that are likely to be reported about the system in a future version. We empirically demonstrate our solution's scope, usability, effectiveness, and scalability, showing that its results outperform the state-of-the-art.  (1) We demonstrate that our solution matches the problem scope of state-of-the-art competing approaches by using them side-by-side in a controlled user study involving real engineers tasked with different software design scenarios. Our results show that users of our solution are statistically significantly more confident in their designs, and that they prefer our tools? usability to that of the competing approaches. We further apply our work on a set of real-world systems with previously published ground-truths regarding their key design choices. (2) We show that our work is easier to use than competing approaches by analyzing the burden placed on engineers via published models of real-world systems. For example, in one instance, we showed that for a model of the Hadoop real-world system, our implementation of eQual requireed architects to spend six minutes to interactively answer its required questions, while the analogous use of the competing technique took more than four hours. (3) We show that our work produces designs of very high quality. Our user study indicates that engineers using the tools emerging from this project produce statistically significantly higher-quality designs than those who use competing approaches. Moreover, we show that, for the real-world systems with published ground-truths, our solution recommends system desings of comparable quality to the solutions previously (manually) determined to be optimal. (4) We demonstrate that our technique scales optimally with the number of available computer and the system's size.          Last Modified: 09/08/2019       Submitted by: Nenad Medvidovic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
