<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AitF: Collaborative Research: Foundations of Intent-based Networking</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>01/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>339985.00</AwardTotalIntnAmount>
<AwardAmount>355985</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computer networks play an essential role in the day-to-day operations of businesses, organizations, and governments: they facilitate access to services and information as well as help protect against some types of cyberattacks.  Unfortunately, current networks require highly-skilled network operators to provide detailed specifications of how the network should behave.  This is a tedious and error prone process that limits how easily a network can evolve to meet emerging business needs and opens the door for subtle errors that can have a drastic impact on network availability, performance, and security.  The goal of this project is to automatically produce the detailed specifications required by networking hardware from a set of high-level security and performance objectives specified by individuals who may have limited networking background.  In other words, this project aims to allow administrators to focus on what the network should do rather than how it should be achieved.  The broader impact of this project is to pave the way for increased network stability and security, and also to aid in training the next generation of network professionals.&lt;br/&gt;&lt;br/&gt;Automatically producing network configurations that satisfy a set of high-level policies and objectives (collectively referred to as "intent") requires both a language for network administrators to formally specify their intents and a mechanism for generating optimal and correct configurations for various types of networking hardware.  To satisfy these requirements, the PIs plan to explore how program synthesis techniques can be applied and extended to network configurations.  The project will lead to the design of synthesis techniques for generating specific types of intent implementations (e.g., traditional control plane configurations), as well as introduce domain-specific refinements to the chosen synthesis algorithms to ensure the time required for synthesis is practical and the resulting data and control planes are optimal (e.g., the configurations have minimal complexity).  The algorithms produced by this research will advance the state of the art of program synthesis and provide new insights into how to apply program synthesis to other domains.</AbstractNarration>
<MinAmdLetterDate>08/23/2016</MinAmdLetterDate>
<MaxAmdLetterDate>06/26/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1637516</AwardID>
<Investigator>
<FirstName>Aditya</FirstName>
<LastName>Akella</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Aditya Akella</PI_FULL_NAME>
<EmailAddress>akella@cs.utexas.edu</EmailAddress>
<PI_PHON>4128183779</PI_PHON>
<NSF_ID>000204197</NSF_ID>
<StartDate>08/23/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Loris</FirstName>
<LastName>D'Antoni</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Loris D'Antoni</PI_FULL_NAME>
<EmailAddress>loris@cs.wisc.edu</EmailAddress>
<PI_PHON>6082623822</PI_PHON>
<NSF_ID>000701818</NSF_ID>
<StartDate>08/23/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>Madison</CityName>
<StateCode>WI</StateCode>
<ZipCode>537151218</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7239</Code>
<Text>Algorithms in the Field</Text>
</ProgramElement>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~339985</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="p1"><span class="s1">Modern computer networks must satisfy increasingly complex security,&nbsp;</span><span class="s1">availability, and performance objectives to meet the diverse needs of users&nbsp;</span><span class="s1">and applications. Consequently, programming a network to satisfy these&nbsp;</span><span class="s1">requirements has become extremely challenging, even for highly skilled network&nbsp;</span><span class="s1">operators. To address this challenge, and allow almost anyone to program a&nbsp;</span><span class="s1">network, this project aims to provide: (1) a high-level language for&nbsp;</span><span class="s1">expressing network policies; and (2) a suite of algorithms for quickly&nbsp;</span><span class="s1">generating optimal implementations of the expressed policies.&nbsp; These are the&nbsp;</span><span class="s1">key components of a framework for intent-based networking--a revolutionary&nbsp;</span><span class="s1">network management paradigm in which network operators specify what the&nbsp;</span><span class="s1">network should do (e.g., allow communication between pairs of hosts), rather&nbsp;</span>than how it should be achieved (e.g., which network routing protocols to use).</p> <p class="p1"><span class="s1">This project had the goal of generating network data and control planes directly from intents.<span>&nbsp;</span></span><span class="s1">Solving this problem required us to design new synthesis techniques that could handle the complexity&nbsp;</span>of modern networks and scale to their sizes. <span class="s2">The</span><span class="s1"><strong>&nbsp;</strong>PIs together with their students have designed, implemented, and published tools for synthesizing complex network configurations in a variety of network domains.&nbsp;</span></p> <p class="p3"><span class="s1">GENESIS is a datacenter network management system which allows policies to be specified in a declarative manner without explicitly programming the network data plane. GENESIS provides a declarative language for describing complex policies such as reachability, waypoints, traffic isolation, and limits on traffic load. As a synthesis engine, GENESIS tackles the problem of enforcing policies by synthesizing switch forwarding tables. It uses the formal foundations of constraint solving in combination with fast off-the-shelf SMT solvers. GENESIS can automatically synthesize forwarding tables that satisfy complex intents for medium-sized networks with hundreds of switches and ~100 packet classes (1000s of policies).<span>&nbsp;</span></span></p> <p class="p3"><span class="s1">Zeppelin is&nbsp;a&nbsp;network management system for designing&nbsp;<em>control plane router/switch configurations,</em>&nbsp;which allows policies to be specified in a declarative manner without explicitly programming the network data plane. Zeppelin builds on top of Genesis and uses integer linear programming to transform data plane configurations synthesized by Genesis into control plane configuration (e.g., shortest path routing). Zeppelin can efficiently synthesize configurations for medium size topologies. Moreover, the configurations synthesized by Zeppelin are more resilient to failure than those of traditional networks.</span>&nbsp;</p> <p class="p5"><span class="s1">CPR (for Control Plane Repair) takes as input a network's existing configurations and desired security and availability intents and outputs configuration patches. After applying the patches, the network is guaranteed to compute intent-compliant paths for all traffic classes under arbitrary failures. Specific Objectives:</span></p> <p class="p5"><span class="s1">To accomplish the projects, PIs have mentored four graduate students and two undergraduate students. The implementations of CPR, Zeppelin, and GENESIS have been open sourced and published at peer-reviewed conferences.<span>&nbsp;</span></span></p> <p class="p5">Finally, the PI have succesfully evaluated their tools on real networks with real traffice patterns obtaine from industry collaborators.</p> <p class="p1"><span class="s1">Key outcomes:&nbsp;</span>The project was successful in its main goal of designing tools for synthesizing network configuration from high-level policies.</p> <p>&nbsp;</p><br> <p>            Last Modified: 03/23/2020<br>      Modified by: Loris&nbsp;D'antoni</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Modern computer networks must satisfy increasingly complex security, availability, and performance objectives to meet the diverse needs of users and applications. Consequently, programming a network to satisfy these requirements has become extremely challenging, even for highly skilled network operators. To address this challenge, and allow almost anyone to program a network, this project aims to provide: (1) a high-level language for expressing network policies; and (2) a suite of algorithms for quickly generating optimal implementations of the expressed policies.  These are the key components of a framework for intent-based networking--a revolutionary network management paradigm in which network operators specify what the network should do (e.g., allow communication between pairs of hosts), rather than how it should be achieved (e.g., which network routing protocols to use). This project had the goal of generating network data and control planes directly from intents. Solving this problem required us to design new synthesis techniques that could handle the complexity of modern networks and scale to their sizes. The PIs together with their students have designed, implemented, and published tools for synthesizing complex network configurations in a variety of network domains.  GENESIS is a datacenter network management system which allows policies to be specified in a declarative manner without explicitly programming the network data plane. GENESIS provides a declarative language for describing complex policies such as reachability, waypoints, traffic isolation, and limits on traffic load. As a synthesis engine, GENESIS tackles the problem of enforcing policies by synthesizing switch forwarding tables. It uses the formal foundations of constraint solving in combination with fast off-the-shelf SMT solvers. GENESIS can automatically synthesize forwarding tables that satisfy complex intents for medium-sized networks with hundreds of switches and ~100 packet classes (1000s of policies).  Zeppelin is a network management system for designing control plane router/switch configurations, which allows policies to be specified in a declarative manner without explicitly programming the network data plane. Zeppelin builds on top of Genesis and uses integer linear programming to transform data plane configurations synthesized by Genesis into control plane configuration (e.g., shortest path routing). Zeppelin can efficiently synthesize configurations for medium size topologies. Moreover, the configurations synthesized by Zeppelin are more resilient to failure than those of traditional networks.  CPR (for Control Plane Repair) takes as input a network's existing configurations and desired security and availability intents and outputs configuration patches. After applying the patches, the network is guaranteed to compute intent-compliant paths for all traffic classes under arbitrary failures. Specific Objectives: To accomplish the projects, PIs have mentored four graduate students and two undergraduate students. The implementations of CPR, Zeppelin, and GENESIS have been open sourced and published at peer-reviewed conferences.  Finally, the PI have succesfully evaluated their tools on real networks with real traffice patterns obtaine from industry collaborators. Key outcomes: The project was successful in its main goal of designing tools for synthesizing network configuration from high-level policies.          Last Modified: 03/23/2020       Submitted by: Loris D'antoni]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
