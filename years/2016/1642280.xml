<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Developing scalable benchmark mini-apps for graph engine comparison</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2016</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>299869.00</AwardTotalIntnAmount>
<AwardAmount>307369</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The last decade has seen the growth of extremely large, unstructured, and dynamic data sets, loosely termed Big Data. However, there is a growing desire to extract not just specific properties of collections of such facts, but also relationships between the underlying entities in that data. Examples come from a broad swatch of modern life: bioinformatics, financial, recommendation systems, cyber and national security, and social networks. Graphs have emerged as a valuable and productive paradigm for expressing such problems, where a graph is a collection of a set of objects (vertices) where some pairs of objects are connected by links (edges) that represent some relation between the two. &lt;br/&gt;In the last decade there has been an explosion in support for graphs, with widely differing execution models and targeted applicability. Although numerous graph benchmarks have been proposed, only one has had a rigorous accumulation of performance data from multiple platforms (www.graph500.org). Computation is over a whole static graph, whereas the real world sees applications where update data is streaming into large persistent graphs, and very many small targeted queries may be in progress at once.&lt;br/&gt;Given the expected productivity increase of using a graph programming paradigm over conventional programming, especially for parallel systems, it is of growing importance to have common mini-apps that can be used for cross-paradigm comparisons. Also, given the continued increase in graph sizes, it is important to understand how the underlying graph engines scale both in the size and type of the target graphs and in the amount and mix of parallelism and concurrency they can support.&lt;br/&gt;This project addresses this need. In collaboration with commercial and government research labs, the primary objective is on defining a set of mini-apps that reflect complex real-world applications more sophisticated than today's simple benchmarks, converting these mini-apps to the existing major graph packages, and then running them on a wide range of parallel systems. &lt;br/&gt;The wider impact can be significant. Identification of relevant mini-apps and how they perform across different systems will provide insight into both how to write more complete graph applications in more scalable ways, and which aspects of which programming systems and platforms are best suited. It is also expected that not all mini-apps will be expressible in all the current paradigms, providing insight to the developers of those paradigms on expressibility issues. Given the relative infancy of such graph packages such insight now can radically improve their applicability to real applications in the future.</AbstractNarration>
<MinAmdLetterDate>07/28/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/16/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1642280</AwardID>
<Investigator>
<FirstName>Peter</FirstName>
<LastName>Kogge</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Peter M Kogge</PI_FULL_NAME>
<EmailAddress>kogge@cse.nd.edu</EmailAddress>
<PI_PHON>5746316763</PI_PHON>
<NSF_ID>000235482</NSF_ID>
<StartDate>07/28/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Douglas</FirstName>
<LastName>Thain</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Douglas Thain</PI_FULL_NAME>
<EmailAddress>dthain@nd.edu</EmailAddress>
<PI_PHON>5746316845</PI_PHON>
<NSF_ID>000341714</NSF_ID>
<StartDate>07/28/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Nitesh</FirstName>
<LastName>Chawla</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nitesh Chawla</PI_FULL_NAME>
<EmailAddress>nchawla@nd.edu</EmailAddress>
<PI_PHON>5746311090</PI_PHON>
<NSF_ID>000484327</NSF_ID>
<StartDate>07/28/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Notre Dame</Name>
<CityName>NOTRE DAME</CityName>
<ZipCode>465565708</ZipCode>
<PhoneNumber>5746317432</PhoneNumber>
<StreetAddress>940 Grace Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>824910376</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NOTRE DAME DU LAC</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>048994727</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Notre Dame]]></Name>
<CityName>Notre Dame</CityName>
<StateCode>IN</StateCode>
<ZipCode>465565637</ZipCode>
<StreetAddress><![CDATA[Fitzpatrick Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~299869</FUND_OBLG>
<FUND_OBLG>2017~7500</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The last decade has seen the growth of data sets that are not only extremely large, but also unstructured and very dynamic, with the desire to extract not just specific facts about specific entries in those sets but also relationships between entities represented by those entries. Some examples include recommendations systems as used in e-commerce, and social networks. Graphs have emerged as a productive paradigm for expressing such problems, with an explosion in new graph algorithms, graph query languages, and graph engines that perform such computations. This project had two major goals. First,&nbsp; to define a set of graph-based mini-apps to reflect complex real-world applications that are more sophisticated than simple benchmarks. Second was to expand our understanding of tradeoffs in expressiveness, performance, and scalability in the design of graph processing systems.</p> <p>From discussions with external government, industrial, and academic collaborators, several generic problems emerged as targets for special focus. These included finding &ldquo;relationships&rdquo; between entities represented through such graphs (and through such relationships finding &ldquo;communities&rdquo; of related entities), &ldquo;matching up&rdquo; such entities, and &ldquo;higher order networks&rdquo; where what is important is not a relationship but chains of such relationships. Three of these are now part of three different&nbsp; PhD-level projects, with implementations on different parallel computing platforms in progress.</p> <p>This set of kernels was enhanced through an experimental 2018 graduate course on &ldquo;Scalable Graph Computing.&rdquo; The students developed baseline implementations of additional mini-apps, mostly of direct relevance to their thesis. They then looked at performance scaling in either the size of the data sets and/or in the level of parallelism. These studies were compiled into a publically available report. We expect to augment this report as the continuing PhD research comes to conclusions.</p> <p>The other goal of exploring graph programming paradigms was tackled similarly. A second publically available report with chapters covering various languages, libraries, or runtimes that were relevant to graph computing was started. The students in the same class mentioned above augmented the existing chapters of this report with their own chapters, each of which covered an additional paradigm in a relatively standardized fashion. Additional placeholders for other related topics have since been added to this report and will be fleshed out as time goes on.</p> <p>During the timeframe of this project, one graph paradigm has burst into prominence. GraphBLAS supported a modified matrix linear algebra where basic multiplication and addition functions can be replaced by any pair of functions that have certain functional characteristics. A large suite of graph kernels is expressible in this framework by the appropriate choice of function pairs. A second attribute of GraphBLAS is that it was designed from the start to handle very sparse irregular problems where the matrices and vectors are largely &ldquo;zeros.&rdquo; This is exactly what is observed in virtually all real-world graph problems. Studying GraphBLAS led to perhaps the most important outcomes of this project. First, given that real-world problems are often huge, it is important to understand how their processing scales as larger computer systems are employed. Perhaps the key function for such processing, Sparse Matrix Vector Products (SpMV), was extensively studied via multiple implementations on a variety of high end computers. The results (documented in several papers) showed that without exception the architecture of modern systems are poor fits. The intrinsic computation is memory access-limited, not compute--limited. The &ldquo;efficiency&rdquo; of modern cores is low, but computation time by itself does scale well with system size. However, the cost of communicating the pieces of such computations very quickly overwhelms the compute time, so that all systems tested to date eventually actually slows down with bigger systems, often literally by orders of magnitude. Ongoing work is focused on alternative &ldquo;communication-avoiding&rdquo; algorithms where more computation may be performed but communication, and thus overall time, &nbsp;is lowered.</p> <p>The second major outcome from this GraphBLAS work grew out of the observation that as currently defined, computation is &ldquo;batched.&rdquo; An entire data set is processed at one time. Real world problems, however, are rapidly becoming incremental; after some initial data set has been processed to derive the desired analytics, it would be significant value to respond quickly to incremental changes provided in real time, without recomputing from the start. A study of how to modify the underlying mathematics of GraphBLAS led to an approach that may be amenable to automated code generation.. This was documented in a conference paper (which was nominated for a best paper) that included examples drawn from several of the graph kernels discussed above. Followon work is planned to try to prototype this process.</p><br> <p>            Last Modified: 09/18/2019<br>      Modified by: Peter&nbsp;M&nbsp;Kogge</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The last decade has seen the growth of data sets that are not only extremely large, but also unstructured and very dynamic, with the desire to extract not just specific facts about specific entries in those sets but also relationships between entities represented by those entries. Some examples include recommendations systems as used in e-commerce, and social networks. Graphs have emerged as a productive paradigm for expressing such problems, with an explosion in new graph algorithms, graph query languages, and graph engines that perform such computations. This project had two major goals. First,  to define a set of graph-based mini-apps to reflect complex real-world applications that are more sophisticated than simple benchmarks. Second was to expand our understanding of tradeoffs in expressiveness, performance, and scalability in the design of graph processing systems.  From discussions with external government, industrial, and academic collaborators, several generic problems emerged as targets for special focus. These included finding "relationships" between entities represented through such graphs (and through such relationships finding "communities" of related entities), "matching up" such entities, and "higher order networks" where what is important is not a relationship but chains of such relationships. Three of these are now part of three different  PhD-level projects, with implementations on different parallel computing platforms in progress.  This set of kernels was enhanced through an experimental 2018 graduate course on "Scalable Graph Computing." The students developed baseline implementations of additional mini-apps, mostly of direct relevance to their thesis. They then looked at performance scaling in either the size of the data sets and/or in the level of parallelism. These studies were compiled into a publically available report. We expect to augment this report as the continuing PhD research comes to conclusions.  The other goal of exploring graph programming paradigms was tackled similarly. A second publically available report with chapters covering various languages, libraries, or runtimes that were relevant to graph computing was started. The students in the same class mentioned above augmented the existing chapters of this report with their own chapters, each of which covered an additional paradigm in a relatively standardized fashion. Additional placeholders for other related topics have since been added to this report and will be fleshed out as time goes on.  During the timeframe of this project, one graph paradigm has burst into prominence. GraphBLAS supported a modified matrix linear algebra where basic multiplication and addition functions can be replaced by any pair of functions that have certain functional characteristics. A large suite of graph kernels is expressible in this framework by the appropriate choice of function pairs. A second attribute of GraphBLAS is that it was designed from the start to handle very sparse irregular problems where the matrices and vectors are largely "zeros." This is exactly what is observed in virtually all real-world graph problems. Studying GraphBLAS led to perhaps the most important outcomes of this project. First, given that real-world problems are often huge, it is important to understand how their processing scales as larger computer systems are employed. Perhaps the key function for such processing, Sparse Matrix Vector Products (SpMV), was extensively studied via multiple implementations on a variety of high end computers. The results (documented in several papers) showed that without exception the architecture of modern systems are poor fits. The intrinsic computation is memory access-limited, not compute--limited. The "efficiency" of modern cores is low, but computation time by itself does scale well with system size. However, the cost of communicating the pieces of such computations very quickly overwhelms the compute time, so that all systems tested to date eventually actually slows down with bigger systems, often literally by orders of magnitude. Ongoing work is focused on alternative "communication-avoiding" algorithms where more computation may be performed but communication, and thus overall time,  is lowered.  The second major outcome from this GraphBLAS work grew out of the observation that as currently defined, computation is "batched." An entire data set is processed at one time. Real world problems, however, are rapidly becoming incremental; after some initial data set has been processed to derive the desired analytics, it would be significant value to respond quickly to incremental changes provided in real time, without recomputing from the start. A study of how to modify the underlying mathematics of GraphBLAS led to an approach that may be amenable to automated code generation.. This was documented in a conference paper (which was nominated for a best paper) that included examples drawn from several of the graph kernels discussed above. Followon work is planned to try to prototype this process.       Last Modified: 09/18/2019       Submitted by: Peter M Kogge]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
