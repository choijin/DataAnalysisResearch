<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CCF:  Small:  Accelerating Irregular Algorithms using Cache-Coherent FPGA Accelerators</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2016</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>330000.00</AwardTotalIntnAmount>
<AwardAmount>330000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Yuanyuan Yang</SignBlockName>
<PO_EMAI>yyang@nsf.gov</PO_EMAI>
<PO_PHON>7032928067</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Until recently, FPGA acceleration of computations has largely focused on algorithms that exhibit a high degree of regularity and predictability in their parallelism and memory access. The advent of high-capacity FPGA accelerators connected to the processor and main memory through a high-performance cache-coherent interconnect enables algorithms with irregular parallelism to be considered. These irregular algorithms, including many data analytic and machine learning kernels, operate on very large, memory-resident, pointer-based data structures. This project will study the opportunity to accelerate irregular algorithms for performance and energy efficiency on emerging cache-coherent FPGA accelerators. The outcome of this investigation has potential for practical commercial impact by helping to establish cache-coherent FPGA acceleration as a viable new platform option for accelerating irregular algorithms that are fundamental to datacenter workloads. This project will also provide valuable training to both graduate and undergraduate students, and improve graduate-level coursework.&lt;br/&gt;&lt;br/&gt;Instead of the traditional "off-load" model of FPGA acceleration, this project seek to develop a new tightly-coupled FPGA-processor collaboration model that takes advantage of the low-latency, fine-grain shared-memory interactions between the processor and FPGA that are now possible. The project studies fine-grain concurrent mappings of irregular algorithms where the processor and FPGA work together---each leveraging its own characteristic advantages, e.g., large cache, high frequency ALUs for the processor and energy-efficient spatial hardware concurrency for the FPGA---to outperform what either can achieve alone. An integral part of the investigation is also to develop new insights toward what should cache-coherent FPGA accelerators ultimately look like, especially with the support for irregular algorithms in mind.</AbstractNarration>
<MinAmdLetterDate>07/27/2016</MinAmdLetterDate>
<MaxAmdLetterDate>07/27/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1618014</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Hoe</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James Hoe</PI_FULL_NAME>
<EmailAddress>jhoe@cmu.edu</EmailAddress>
<PI_PHON>4122684259</PI_PHON>
<NSF_ID>000464902</NSF_ID>
<StartDate>07/27/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName/>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~330000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Field Programmable Gate Arrays (FPGAs) have been undergoing a dramatic transformation from a logic technology to a computing technology.&nbsp;This project investigated the opportunity to leverage the newly arrived architecture of high-capacity FPGA accelerators connected to the processor and main memory through a high-performance cache-coherent interconnect.&nbsp; The project in particular looked to apply this new capability to accelerate irregular algorithms that were previously unsuitable for FPGA-offload acceleration.</p> <p>Irregular algorithms, including many data analytic and machine learning kernels, operate on very large, memory-resident, pointer-based data structures. Focusing on graph processing, we studied a new acceleration strategy of tightly-coupled FPGA-processor collaboration, working concurrently on in-memory data and each handling the aspects of the computation best suited to it.</p> <p>In comparison to processors, FPGA-based solutions often fall short in terms of processing throughput due to the lack of off-chip memory bandwidth. By tailoring the on-chip buffering according to the access patterns of different data types and preprocessing the input graphs using a novel vertex remapping optimization to improve locality, we were able to maximize the on-chip data reuse and reduce off-chip memory traffic. This allows the proposed accelerator to deliver computation throughputs comparable to state-of-the-art software on a processor that has significantly better memory bandwidth and latency.</p> <p>Scheduling optimization is highly effective but rarely used in graph processing accelerator designs due to the implementation complexity and memory access overhead. We developed a heterogeneous processing approach for priority scheduling on a shared-memory CPU-FPGA platform. By exploiting the closely coupled integration of the host processor and the FPGA accelerator, our system dynamically offloads (in the reverse direction) the task of scheduling from FPGA to a software scheduler on the processor for its programmability, high capacity cache and low memory latency, while the FPGA graph processing accelerator enjoys the scheduling benefit and delivers higher performance with excellent energy efficiency.</p> <p>Our solution is demonstrated and evaluated on working Intel HARP shared-memory CPU-FPGA &nbsp;systems. We compared&nbsp;our collaborative model of acceleration to traditional offload solutions for two scheduling schemes: the well-known Dijkstra scheduling for the Single Source Shortest Path and a new scheduling optimization we developed for improving the data locality of Breadth First Search. Whereas the FPGA-offload solution requires an impractical amount of on-chip storage to implement a priority queue, the proposed processor-assisted scheduling that moves the task of scheduling to the processor consumes a negligible load on the processor and retains most of the performance benefit from priority scheduling.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/02/2020<br>      Modified by: James&nbsp;Hoe</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Field Programmable Gate Arrays (FPGAs) have been undergoing a dramatic transformation from a logic technology to a computing technology. This project investigated the opportunity to leverage the newly arrived architecture of high-capacity FPGA accelerators connected to the processor and main memory through a high-performance cache-coherent interconnect.  The project in particular looked to apply this new capability to accelerate irregular algorithms that were previously unsuitable for FPGA-offload acceleration.  Irregular algorithms, including many data analytic and machine learning kernels, operate on very large, memory-resident, pointer-based data structures. Focusing on graph processing, we studied a new acceleration strategy of tightly-coupled FPGA-processor collaboration, working concurrently on in-memory data and each handling the aspects of the computation best suited to it.  In comparison to processors, FPGA-based solutions often fall short in terms of processing throughput due to the lack of off-chip memory bandwidth. By tailoring the on-chip buffering according to the access patterns of different data types and preprocessing the input graphs using a novel vertex remapping optimization to improve locality, we were able to maximize the on-chip data reuse and reduce off-chip memory traffic. This allows the proposed accelerator to deliver computation throughputs comparable to state-of-the-art software on a processor that has significantly better memory bandwidth and latency.  Scheduling optimization is highly effective but rarely used in graph processing accelerator designs due to the implementation complexity and memory access overhead. We developed a heterogeneous processing approach for priority scheduling on a shared-memory CPU-FPGA platform. By exploiting the closely coupled integration of the host processor and the FPGA accelerator, our system dynamically offloads (in the reverse direction) the task of scheduling from FPGA to a software scheduler on the processor for its programmability, high capacity cache and low memory latency, while the FPGA graph processing accelerator enjoys the scheduling benefit and delivers higher performance with excellent energy efficiency.  Our solution is demonstrated and evaluated on working Intel HARP shared-memory CPU-FPGA  systems. We compared our collaborative model of acceleration to traditional offload solutions for two scheduling schemes: the well-known Dijkstra scheduling for the Single Source Shortest Path and a new scheduling optimization we developed for improving the data locality of Breadth First Search. Whereas the FPGA-offload solution requires an impractical amount of on-chip storage to implement a priority queue, the proposed processor-assisted scheduling that moves the task of scheduling to the processor consumes a negligible load on the processor and retains most of the performance benefit from priority scheduling.             Last Modified: 10/02/2020       Submitted by: James Hoe]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
