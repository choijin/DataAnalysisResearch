<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: RUI: Characterizing, Detecting, and Fixing Performance Bugs That Have Non-Intrusive Fixes</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2016</AwardEffectiveDate>
<AwardExpirationDate>06/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>217415.00</AwardTotalIntnAmount>
<AwardAmount>217415</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software performance is critical for the success of a software&lt;br/&gt;project.  Performance bugs are programming errors that slow down&lt;br/&gt;execution.  Many recent techniques have been proposed to detect&lt;br/&gt;various performance bugs.  However, there are still many performance&lt;br/&gt;bugs that cannot be detected by existing techniques.  Furthermore, a&lt;br/&gt;crucial and practical aspect of performance bugs has not received the&lt;br/&gt;attention it deserves: How likely are developers to fix a detected&lt;br/&gt;performance bug?&lt;br/&gt;&lt;br/&gt;To significantly improve software performance, this project will&lt;br/&gt;develop a set of novel techniques that focus on a class of performance&lt;br/&gt;bugs that are very likely to be fixed by developers, specifically on&lt;br/&gt;performance bugs that have non-intrusive fixes.  Performance bugs that&lt;br/&gt;have non-intrusive fixes are very likely to be fixed by developers&lt;br/&gt;because the benefits of the fix (i.e., code speedup) clearly outweigh&lt;br/&gt;the drawbacks of the fix (e.g., introducing new correctness bugs,&lt;br/&gt;breaking good software engineering practices, development time and&lt;br/&gt;effort, etc).  This project will address three fundamental challenges:&lt;br/&gt;(1) What performance bugs have non-intrusive fixes and what are their&lt;br/&gt;defining characteristics?  (2) How to automatically detect performance&lt;br/&gt;bugs and how to establish that their fixes will be non-intrusive?  (3)&lt;br/&gt;How to automatically fix some of the detected performance bugs?  This&lt;br/&gt;work will broaden our understanding of an understudied yet important&lt;br/&gt;aspect of software performance and will provide automated solutions to&lt;br/&gt;improve software performance.</AbstractNarration>
<MinAmdLetterDate>06/28/2016</MinAmdLetterDate>
<MaxAmdLetterDate>10/16/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1644285</AwardID>
<Investigator>
<FirstName>Sonia</FirstName>
<LastName>Haiduc</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sonia C Haiduc</PI_FULL_NAME>
<EmailAddress>shaiduc@cs.fsu.edu</EmailAddress>
<PI_PHON>8506445260</PI_PHON>
<NSF_ID>000662623</NSF_ID>
<StartDate>10/16/2018</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Adrian</FirstName>
<LastName>Nistor</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Adrian Nistor</PI_FULL_NAME>
<EmailAddress>nistor@cs.fsu.edu</EmailAddress>
<PI_PHON>4847169495</PI_PHON>
<NSF_ID>000677954</NSF_ID>
<StartDate>06/28/2016</StartDate>
<EndDate>10/16/2018</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Florida State University</Name>
<CityName>TALLAHASSEE</CityName>
<ZipCode>323064166</ZipCode>
<PhoneNumber>8506445260</PhoneNumber>
<StreetAddress>874 Traditions Way, 3rd Floor</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>790877419</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>FLORIDA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>159621697</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Florida State University]]></Name>
<CityName>TALLAHASSEE</CityName>
<StateCode>FL</StateCode>
<ZipCode>323064166</ZipCode>
<StreetAddress><![CDATA[874 Traditions Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~217415</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software has become essential for almost every area of our modern lives. Therefore, the success of software systems is extremely important not only for software engineers, but also for society at large. Software performance is critical for the success of a software project. Performance bugs are programming errors or choices that slow down execution. Performance bugs affect the user-perceived software quality. Even expert programmers introduce performance bugs, which caused many high-profile incidents. Even well-tested commercial products such as Internet Explorer, Microsoft SQLServer, Visual Studio, and Acrobat Reader are affected by performance bugs.</p> <p>Many recent techniques were proposed to detect various performance bugs. However, there are still many performance bugs that cannot be detected by existing techniques. Furthermore, a crucial and practical aspect of performance bugs has not received the attention it deserves: How likely are developers to fix a detected performance bug?</p> <p>In practice, when developers decide if they should fix a performance bug, developers face a difficult choice between the potential drawbacks and the potential benefits of the fix. Drawbacks include: introducing severe correctness bugs, breaking good software engineering practices, spending development time/effort/budget, and slowing down other code. The benefit is code speedup, but unfortunately the exact speedup---and thus the magnitude of the benefit---is difficult to assess. In practice, developers fix performance bugs when the benefits outweigh the drawbacks. Specifically, developers are very likely to fix performance bugs that have simple and non-intrusive fixes. For this type of performance bugs, the choice between benefits and drawbacks is made easy for developers: because the fixes are simple and non-intrusive, fixing the bugs brings only benefits.</p> <p>To significantly improve software performance, this project proposed to investigate performance bugs that have non-intrusive fixes. The project started by investigating a set of performance bugs found in open source software systems in order to understand the nature of existing performance bugs and to identify types of performance bugs with potential non-intrusive fixes. During this activity, it was observed that some performance bugs can be caused by poor choices of programming language constructs, such as the type of loops and list-like structures used in a program. While these loops and list structures perform similar functionality and a software developer can use any of them almost interchangeably to perform a specific task, their performance footprint can be different.</p> <p>In order to investigate this further, the project continued by performing a large-scale evaluation on the impact of the choice of loops and list-like structures on the performance of programs written in three programming languages (C++, C#, and Python). The results unveiled that there is a significant difference between the performance of some of the programming structures studied, which can lead to noticeable performance delays in the software execution when inefficient loops and data structures are used. Therefore, the grant led to the discovery of a type of performance bugs that can be easily detected and fixed using non-intrusive fixes. This can lead to performance improvements in many software systems in existence, leading to overall better performing software in society.&nbsp;</p> <p class="Default">During the duration of the grant, four graduate students worked on topics related to this project under the direct advising of the PI and two of them were from underrepresented groups (Hispanic/Latino). This grant contributed to the training and professional development of the supported graduate students, by allowing the students to learn various aspects of performing research in software engineering, such as performing literature surveys, collecting data, formulating hypotheses, performing empirical studies to test these hypotheses, and drafting research manuscripts.</p><br> <p>            Last Modified: 09/29/2020<br>      Modified by: Sonia&nbsp;C&nbsp;Haiduc</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software has become essential for almost every area of our modern lives. Therefore, the success of software systems is extremely important not only for software engineers, but also for society at large. Software performance is critical for the success of a software project. Performance bugs are programming errors or choices that slow down execution. Performance bugs affect the user-perceived software quality. Even expert programmers introduce performance bugs, which caused many high-profile incidents. Even well-tested commercial products such as Internet Explorer, Microsoft SQLServer, Visual Studio, and Acrobat Reader are affected by performance bugs.  Many recent techniques were proposed to detect various performance bugs. However, there are still many performance bugs that cannot be detected by existing techniques. Furthermore, a crucial and practical aspect of performance bugs has not received the attention it deserves: How likely are developers to fix a detected performance bug?  In practice, when developers decide if they should fix a performance bug, developers face a difficult choice between the potential drawbacks and the potential benefits of the fix. Drawbacks include: introducing severe correctness bugs, breaking good software engineering practices, spending development time/effort/budget, and slowing down other code. The benefit is code speedup, but unfortunately the exact speedup---and thus the magnitude of the benefit---is difficult to assess. In practice, developers fix performance bugs when the benefits outweigh the drawbacks. Specifically, developers are very likely to fix performance bugs that have simple and non-intrusive fixes. For this type of performance bugs, the choice between benefits and drawbacks is made easy for developers: because the fixes are simple and non-intrusive, fixing the bugs brings only benefits.  To significantly improve software performance, this project proposed to investigate performance bugs that have non-intrusive fixes. The project started by investigating a set of performance bugs found in open source software systems in order to understand the nature of existing performance bugs and to identify types of performance bugs with potential non-intrusive fixes. During this activity, it was observed that some performance bugs can be caused by poor choices of programming language constructs, such as the type of loops and list-like structures used in a program. While these loops and list structures perform similar functionality and a software developer can use any of them almost interchangeably to perform a specific task, their performance footprint can be different.  In order to investigate this further, the project continued by performing a large-scale evaluation on the impact of the choice of loops and list-like structures on the performance of programs written in three programming languages (C++, C#, and Python). The results unveiled that there is a significant difference between the performance of some of the programming structures studied, which can lead to noticeable performance delays in the software execution when inefficient loops and data structures are used. Therefore, the grant led to the discovery of a type of performance bugs that can be easily detected and fixed using non-intrusive fixes. This can lead to performance improvements in many software systems in existence, leading to overall better performing software in society.  During the duration of the grant, four graduate students worked on topics related to this project under the direct advising of the PI and two of them were from underrepresented groups (Hispanic/Latino). This grant contributed to the training and professional development of the supported graduate students, by allowing the students to learn various aspects of performing research in software engineering, such as performing literature surveys, collecting data, formulating hypotheses, performing empirical studies to test these hypotheses, and drafting research manuscripts.       Last Modified: 09/29/2020       Submitted by: Sonia C Haiduc]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
