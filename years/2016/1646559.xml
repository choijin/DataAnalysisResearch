<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>I-Corps: Automatic Formal Program Transformation for Improving Software Quality</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2016</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>50000.00</AwardTotalIntnAmount>
<AwardAmount>50000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07070000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>IIP</Abbreviation>
<LongName>Div Of Industrial Innovation &amp; Partnersh</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Pamela McCauley</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This I-Corps project explores the potential of using formal program transformation for improving commercial software quality. The broader impact/commercial potential of this I-Corps project is the use of an automatic program transformation technology which can significantly improve developer productivity and software quality. The technology improves software quality by automating the detection and fixing of bugs and other software issues, freeing developers to focus on other areas thus increasing their productivity. Fault-fixes are crucial for avoiding software bugs and, more generally, for maintaining high software quality. The automatic fixing technology will allow developers to easily and consistently avoid entire classes of bugs and software quality problems. In the long term, widespread use of this automatic program transformation system may result in fewer bugs that threaten life and property.&lt;br/&gt;&lt;br/&gt;The current practice in software fault repair is to automate fixes through custom scripts written by hand. However, this is an error-prone exercise and requires a very large development effort. This team's approach is to automate the fixes by expressing them as formal program transformation rules. The formal rules are powerful, allowing complex fixes, and are expressed in the underlying programming language. Consequently, they are easy to comprehend by developers. The underlying technology is the K framework, which has been successful as a specification and verification infrastructure for several widely-used programming languages, including JavaScript, Java, and C. Recent results indicate the K framework can also be used successfully for automatic program transformation.</AbstractNarration>
<MinAmdLetterDate>09/15/2016</MinAmdLetterDate>
<MaxAmdLetterDate>09/15/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1646559</AwardID>
<Investigator>
<FirstName>Grigore</FirstName>
<LastName>Rosu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Grigore Rosu</PI_FULL_NAME>
<EmailAddress>grosu@illinois.edu</EmailAddress>
<PI_PHON>2172447431</PI_PHON>
<NSF_ID>000488532</NSF_ID>
<StartDate>09/15/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8023</Code>
<Text>I-Corps</Text>
</ProgramElement>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~50000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>The broader impact/commercial potential of this I-Corps project is the widespread usage of an automatic program transformation technology,&nbsp; which can significantly improve developer productivity and software quality. The technology helps by automating the detection and fixing of bugs and other software quality issues. This frees developers to focus on other areas, where their creative thinking and expertise is better used, thus increasing their productivity. The fixes are crucial for avoiding software bugs and, more generally, for maintaining high software quality. The fixing process is tedious and repetitive so developers tend to avoid it. When they do perform it, they are inconsistent and make mistakes. The automatic fixing technology will allow developers to easily and consistently avoid entire classes of bugs and software quality problems, in effect increasing software quality. For example, a serious and notorious security vulnerability discovered in Apple code (the &ldquo;goto fail'' bug) could have been easily detected and automatically fixed by this technology. In the long term, widespread use of this automatic program transformation will result in fewer bugs that threaten life and property.</span></p> <p><span>&nbsp;</span></p> <p><span>This I-Corps project explores the commercialization potential of using formal program transformation for improving software quality. The current practice is to automate fixes through custom scripts written by hand, but this is error-prone and requires a very large development effort. The proposed approach is to automate the fixes by expressing them as formal program transformation rules. The formal rules are powerful, allowing complex fixes, and are expressed in the underlying programming language, so they are easy to comprehend by the users. The underlying technology is the K framework, which has been successful as a specification and verification infrastructure for several widely-used programming languages, including JavaScript, Java, and C. Recent results indicate the K framework can be as successful for automatic program transformation.</span></p> <p><span>&nbsp;</span></p> <p><span>The market discovery process revealed several key aspects that will contribute to the successful transfer of formal program transformation research to industry. First, managers and team leaders are open to using technology that can improve software quality automatically. Still, some developers are reluctant because of previous bad experiences with tools which raised many false alarms. While newer technology alleviates this issue, the perception will slow adoption. Second, the code reviewing process is a good target for automation as software developers spend more than six our per month reviewing other developer's code. Third, developers would prefer the program transformation technology to be integrated vertically into the entire software development process. Forth, the technology would be particularly useful to developers using C/C++ and data scientists using Python and R. Finally, the technology would be more useful in the enterprise sector, and most companies that would be interested in adopting it in the near future are currently using the GitHub platform.</span></p> <p>&nbsp;</p><br> <p>            Last Modified: 09/18/2018<br>      Modified by: Grigore&nbsp;Rosu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The broader impact/commercial potential of this I-Corps project is the widespread usage of an automatic program transformation technology,  which can significantly improve developer productivity and software quality. The technology helps by automating the detection and fixing of bugs and other software quality issues. This frees developers to focus on other areas, where their creative thinking and expertise is better used, thus increasing their productivity. The fixes are crucial for avoiding software bugs and, more generally, for maintaining high software quality. The fixing process is tedious and repetitive so developers tend to avoid it. When they do perform it, they are inconsistent and make mistakes. The automatic fixing technology will allow developers to easily and consistently avoid entire classes of bugs and software quality problems, in effect increasing software quality. For example, a serious and notorious security vulnerability discovered in Apple code (the "goto fail'' bug) could have been easily detected and automatically fixed by this technology. In the long term, widespread use of this automatic program transformation will result in fewer bugs that threaten life and property.     This I-Corps project explores the commercialization potential of using formal program transformation for improving software quality. The current practice is to automate fixes through custom scripts written by hand, but this is error-prone and requires a very large development effort. The proposed approach is to automate the fixes by expressing them as formal program transformation rules. The formal rules are powerful, allowing complex fixes, and are expressed in the underlying programming language, so they are easy to comprehend by the users. The underlying technology is the K framework, which has been successful as a specification and verification infrastructure for several widely-used programming languages, including JavaScript, Java, and C. Recent results indicate the K framework can be as successful for automatic program transformation.     The market discovery process revealed several key aspects that will contribute to the successful transfer of formal program transformation research to industry. First, managers and team leaders are open to using technology that can improve software quality automatically. Still, some developers are reluctant because of previous bad experiences with tools which raised many false alarms. While newer technology alleviates this issue, the perception will slow adoption. Second, the code reviewing process is a good target for automation as software developers spend more than six our per month reviewing other developer's code. Third, developers would prefer the program transformation technology to be integrated vertically into the entire software development process. Forth, the technology would be particularly useful to developers using C/C++ and data scientists using Python and R. Finally, the technology would be more useful in the enterprise sector, and most companies that would be interested in adopting it in the near future are currently using the GitHub platform.          Last Modified: 09/18/2018       Submitted by: Grigore Rosu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
