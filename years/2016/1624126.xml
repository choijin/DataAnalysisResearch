<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Medium: Collaborative: Retrofitting Software for Defense-in-Depth</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>273318.00</AwardTotalIntnAmount>
<AwardAmount>273318</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The computer security community has long advocated the concept of building multiple layers of defense to protect a system.  Unfortunately, it has been difficult to realize this vision in the practice of software development, and software often ships with inadequate defenses, typically developed in an ad hoc fashion.&lt;br/&gt;&lt;br/&gt;Developers face a number of challenges when protecting a software system with multiple layers of defense. They lack holistic frameworks in which to express policies and mechanisms for different software layers, automated tools to add these defenses, and tools to prove that software enhanced with defenses has an advertised level of assurance.&lt;br/&gt;&lt;br/&gt;This project develops new techniques to retrofit software for defense in depth. It takes a comprehensive view of the problem, with an emphasis on automated, interactive tools that developers can use to identify site-level security goals, explore the design space of adding security mechanisms, and retrofit legacy code to enforce security policies in a manner that can be machine-verified for assurance. The project develops theory and tools for formal policy language design and validation, static and dynamic code analyses, interactive tools for developers to explore the design space of security, functionality and performance tradeoffs, and methods to formally verify the correctness of program transformations to introduce defenses such as authorization, attacker containment, and auditing mechanisms.&lt;br/&gt;&lt;br/&gt;The broader impact stems from the improved security of systems and the reduced cost of achieving better security, also education activities in the form of summer schools for graduate, undergraduate and high-school students. The tools developed will be released to the public domain, benefiting software developers in the field.</AbstractNarration>
<MinAmdLetterDate>06/03/2016</MinAmdLetterDate>
<MaxAmdLetterDate>06/03/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1624126</AwardID>
<Investigator>
<FirstName>Gang</FirstName>
<LastName>Tan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gang Tan</PI_FULL_NAME>
<EmailAddress>gtan@psu.edu</EmailAddress>
<PI_PHON>6172720380</PI_PHON>
<NSF_ID>000193259</NSF_ID>
<StartDate>06/03/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Pennsylvania State Univ University Park</Name>
<CityName>University Park</CityName>
<ZipCode>168021503</ZipCode>
<PhoneNumber>8148651372</PhoneNumber>
<StreetAddress>201 Old Main</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003403953</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PENNSYLVANIA STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003403953</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Pennsylvania State Univ University Park]]></Name>
<CityName>University Park</CityName>
<StateCode>PA</StateCode>
<ZipCode>168021503</ZipCode>
<StreetAddress><![CDATA[201 Old Main]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~273318</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p> <div> <div><span>In this project, we developed methods that programmers can use to</span></div> <div><span>retrofit their programs with security controls for containment,</span></div> <div><span>authorization, and auditing to satisfy explicit security goals.&nbsp; This</span></div> <div><span>project has included major activities on automating key tasks in</span></div> <div><span>retrofitting programs via privilege separation for containment,</span></div> <div><span>retrofitting programs with authorization hook placements to enforce</span></div> <div><span>desired policies, retrofitting programs automatically with auditing</span></div> <div><span>code, and retrofitting programs to enforce the finest-grained</span></div> <div><span>control-flow integrity policies yet computed.&nbsp; Through this research,</span></div> <div><span>we have also explored methods to unify defenses to improve overall</span></div> <div><span>security, developed open-source mechanisms to enforce security that</span></div> <div><span>have been widely used, and discovered and fixed flaws in commercial</span></div> <div><span>systems.&nbsp; Many of our results have been published in top conferences</span></div> <div><span>in computer security and related domains.</span></div> <div><span>&nbsp;</span></div> <div><span>The main objectives met during the project include the following.</span></div> <div><span>First, we developed new methods to automate key challenges in</span></div> <div><span>privilege separating programs to enable confinement, by handling</span></div> <div><span>general pointers (PtrSplit, ACM CCS 2017) and by balancing performane</span></div> <div><span>and security (PrograMander, ACM CCS 2019).&nbsp; Second, we developed new</span></div> <div><span>methods to automate retrofitting of programs with authorization hooks</span></div> <div><span>to minimize a hook placement necessary to enforce any access control</span></div> <div><span>policy that satisfied prescribed constraints (ESSoS 2015) and to</span></div> <div><span>provide a security namespace abstraction for Linux container systems</span></div> <div><span>(USENIX Security 2018).&nbsp; Third, we developed foundational theories for</span></div> <div><span>auditing based on information algebra, which combines elements of both</span></div> <div><span>access control and auditing to enable a uniform method to express</span></div> <div><span>break-the-glass policies (POST 2016), and developed new methods to</span></div> <div><span>retrofit programs for authorization by leveraging dynamic taint</span></div> <div><span>analysis (PLAS 2016).&nbsp; Fourth, we invented a technique to compute</span></div> <div><span>control-flow integrity policies statically that is finer-grained than</span></div> <div><span>prior techniques and could be implemented more efficiently (IEEE Euro</span></div> </div> <div><span> <div><span>S&amp;P 2016) and adapted a recent Intel PT hardware feature to enforce</span></div> <div><span>control-flow integrity without program modification (ASPLOS 2017).&nbsp; In</span></div> <div><span>the course of this CFI work, we discovered a latent flaw in Linux</span></div> <div><span>compiler toolchains that allows extensive modification of various</span></div> <div><span>types of read-only data and proposed detailed countermeasures (NDSS</span></div> <div><span>2017).</span></div> <div><span>&nbsp;</span></div> <div><span>The key outcomes of this project include the novel techniques</span></div> <div><span>(described above), new open-source systems, repairs and extensions for</span></div> <div><span>the Linux kernel, and several student theses.&nbsp; The methods for</span></div> <div><span>privilege separation and Linux kernel support for efficient use of the</span></div> <div><span>Intel PT hardware (Linux Griffin) feature have been open sourced.&nbsp; The</span></div> <div><span>privilege separation work has led to two collaborations, one on the</span></div> <div><span>DARPA GAPS program, and the Linux Griffin kernel has been used by</span></div> <div><span>several research groups.&nbsp; Through our efforts, the Linux compiler</span></div> <div><span>toolchain flaw we discovered has been fixed in both GCC and LLVM</span></div> <div><span>toolchains, and the Linux security namespace is under consideration</span></div> <div><span>for upstreaming into the mainline kernel.&nbsp; This project has resulted</span></div> <div><span>in five theses, include three Ph.D. theses (one to be held in January</span></div> <div><span>2020) and two M.S. theses.&nbsp; The project was inspired by the</span></div> <div><span>Ph.D. thesis of a female student, and one of the M.S. theses was</span></div> <div><span>completed by a female student.&nbsp; The materials developed in this</span></div> <div><span>project were applied to the creation of a new Software Security course</span></div> <div><span>at Penn State, which is a key component of the new Cybersecurity</span></div> <div><span>Foundations minor.</span></div> </span></div> <strong></strong><em></em></p><br> <p>            Last Modified: 11/27/2019<br>      Modified by: Gang&nbsp;Tan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   In this project, we developed methods that programmers can use to retrofit their programs with security controls for containment, authorization, and auditing to satisfy explicit security goals.  This project has included major activities on automating key tasks in retrofitting programs via privilege separation for containment, retrofitting programs with authorization hook placements to enforce desired policies, retrofitting programs automatically with auditing code, and retrofitting programs to enforce the finest-grained control-flow integrity policies yet computed.  Through this research, we have also explored methods to unify defenses to improve overall security, developed open-source mechanisms to enforce security that have been widely used, and discovered and fixed flaws in commercial systems.  Many of our results have been published in top conferences in computer security and related domains.   The main objectives met during the project include the following. First, we developed new methods to automate key challenges in privilege separating programs to enable confinement, by handling general pointers (PtrSplit, ACM CCS 2017) and by balancing performane and security (PrograMander, ACM CCS 2019).  Second, we developed new methods to automate retrofitting of programs with authorization hooks to minimize a hook placement necessary to enforce any access control policy that satisfied prescribed constraints (ESSoS 2015) and to provide a security namespace abstraction for Linux container systems (USENIX Security 2018).  Third, we developed foundational theories for auditing based on information algebra, which combines elements of both access control and auditing to enable a uniform method to express break-the-glass policies (POST 2016), and developed new methods to retrofit programs for authorization by leveraging dynamic taint analysis (PLAS 2016).  Fourth, we invented a technique to compute control-flow integrity policies statically that is finer-grained than prior techniques and could be implemented more efficiently (IEEE Euro   S&amp;P 2016) and adapted a recent Intel PT hardware feature to enforce control-flow integrity without program modification (ASPLOS 2017).  In the course of this CFI work, we discovered a latent flaw in Linux compiler toolchains that allows extensive modification of various types of read-only data and proposed detailed countermeasures (NDSS 2017).   The key outcomes of this project include the novel techniques (described above), new open-source systems, repairs and extensions for the Linux kernel, and several student theses.  The methods for privilege separation and Linux kernel support for efficient use of the Intel PT hardware (Linux Griffin) feature have been open sourced.  The privilege separation work has led to two collaborations, one on the DARPA GAPS program, and the Linux Griffin kernel has been used by several research groups.  Through our efforts, the Linux compiler toolchain flaw we discovered has been fixed in both GCC and LLVM toolchains, and the Linux security namespace is under consideration for upstreaming into the mainline kernel.  This project has resulted in five theses, include three Ph.D. theses (one to be held in January 2020) and two M.S. theses.  The project was inspired by the Ph.D. thesis of a female student, and one of the M.S. theses was completed by a female student.  The materials developed in this project were applied to the creation of a new Software Security course at Penn State, which is a key component of the new Cybersecurity Foundations minor.         Last Modified: 11/27/2019       Submitted by: Gang Tan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
