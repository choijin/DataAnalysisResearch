<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Medium: Collaborative Research: Program Analysis for Smartphone Application Security</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>46389.00</AwardTotalIntnAmount>
<AwardAmount>46389</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project investigates a new approach for describing and reasoning about security properties of smartphone applications.  Smartphones are becoming pervasive, and smartphone applications are increasingly used for a variety of social, health, scientific, and military purposes. However, the capabilities these phones provide, such as access to GPS, camera, Internet, calendar, contacts, and other sensitive information can lead to major security risks.  Today's smartphone development methodologies do little to help developers construct applications that safely access sensitive resources.&lt;br/&gt;&lt;br/&gt;The goal of this project is to develop new program analysis techniques that can help developers express, reason about, and enforce security policies in smartphones.  The proposed technical approach will allow developers to define rich security policies in an intuitive and flexible manner: as program code that interacts with a mobile application and checks desired properties.  To ensure that application code conforms to such policies, the project is pursuing several techniques that leverage recent advances in static and dynamic program analysis.  The project is also investigating approaches to automatically synthesize a code-based policy for a given application. The project is instantiating these ideas in the context of Google's Android operating system, and is evaluating the ideas in terms of effectiveness and performance on a broad range of Android-based smartphone applications.</AbstractNarration>
<MinAmdLetterDate>06/21/2016</MinAmdLetterDate>
<MaxAmdLetterDate>06/21/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1630037</AwardID>
<Investigator>
<FirstName>Iulian</FirstName>
<LastName>Neamtiu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Iulian Neamtiu</PI_FULL_NAME>
<EmailAddress>ineamtiu@njit.edu</EmailAddress>
<PI_PHON>9735963340</PI_PHON>
<NSF_ID>000537180</NSF_ID>
<StartDate>06/21/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>New Jersey Institute of Technology</Name>
<CityName>Newark</CityName>
<ZipCode>071021982</ZipCode>
<PhoneNumber>9735965275</PhoneNumber>
<StreetAddress>University Heights</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NJ10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>075162990</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NEW JERSEY INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>075162990</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[New Jersey Institute of Technology]]></Name>
<CityName/>
<StateCode>NJ</StateCode>
<ZipCode>071021982</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NJ10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~46389</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project has made fundamental contributions to the state of<br />practice and research in mobile security.<br />Three tools -- helping improve Android security and reliability --<br />have been created and released.<br />The grant has been the primary funding source for the dissertations of<br />three PhD students, who are now employed <br />The findings and advances were reported in 17 publications. <br /><br /><br />Specifically, this work has made advances in several directions.<br /><br /><strong>App profiling </strong><br /><br /><br />We have built experimental test beds and<br />instrumentation methodologies to answer fundamental questions about<br />mobile apps: whom do apps communicate with? Does an app "tell the<br />truth" in its description? Can users trust that the app does not do<br />"bad things" such as talking to malicious websites, draining the<br />battery, or leak user secrets?<br /><br />Our findings, reported in several publications indicate that <br />- app specification/description differ from what the app actually does;<br />free versions of apps could end&nbsp; up&nbsp; costing&nbsp; more&nbsp; than&nbsp; their&nbsp; paid<br />counterparts,&nbsp; due&nbsp; to an order of magnitude increase in traffic [Mobicom'12]<br />- both pre-installed apps (that come with the phone and are hard to remove)<br />as well as "regular" apps require more permissions that needed to do<br />their job, which opens the door to resource abuse and privacy leaks<br />[ACSAC'12]<br />- "idle" phones and tablets can needlessly waste network resources<br />[INFOCOM'15]<br />- "good" apps can talk to "bad" websites, putting the user at risk of<br />&nbsp; security and privacy leaks, as well as malware infection<br />&nbsp; [GLOBECOM'15]<br /><br /><br /><strong>Automating testing</strong><br /><br /><br />Systematic (thorough) testing is a critical step toward<br />reliable and secure apps. We have developed and released A3E,<br />(http://spruce.cs.ucr.edu/a3e) an approach and tool that allows<br />widely-popular Android apps to be tested systematically; A3E achieves<br />substantially better testing than testing from several human users<br />combined [OOPSLA'13].&nbsp;&nbsp; <br /><br /><br /><strong>Record-and-replay</strong><br /><br /><br />Recording a "run", i.e., a particular execution of an app so it can be<br />replayed later, over and over again, is essential for tasks such as<br />reproducibility -- a basics science tenet; or helping developers study<br />and fix bugs or security leaks.&nbsp; We have released two tools that allow<br />record-and-replay of widely popular apps. The first tool, RERAN<br />(http://www.androidreran.com/) is lightweight -- captures just<br />touchscreen events, and does so very efficiently [ICSE'13]. RERAN has<br />been used widely and downloaded thousands of times.&nbsp; The second tool,<br />VALERA (http://spruce.cs.ucr.edu/valera/) captures a lot more context<br />so it allows more thorough studies, but it is more complex in use;<br />consequently, VALERA has enabled record-and-replay for<br />high-throughput, timing-sensitive apps such as video/audio capture and<br />recognition [OOPSLA'15]. VALERA has also allowed us to <br />expose bugs in popular apps [AST'16] as well as capture and<br />reproduce subtle concurrency errors [ISSTA'16].</p><br> <p>            Last Modified: 11/28/2017<br>      Modified by: Iulian&nbsp;Neamtiu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project has made fundamental contributions to the state of practice and research in mobile security. Three tools -- helping improve Android security and reliability -- have been created and released. The grant has been the primary funding source for the dissertations of three PhD students, who are now employed  The findings and advances were reported in 17 publications.    Specifically, this work has made advances in several directions.  App profiling    We have built experimental test beds and instrumentation methodologies to answer fundamental questions about mobile apps: whom do apps communicate with? Does an app "tell the truth" in its description? Can users trust that the app does not do "bad things" such as talking to malicious websites, draining the battery, or leak user secrets?  Our findings, reported in several publications indicate that  - app specification/description differ from what the app actually does; free versions of apps could end  up  costing  more  than  their  paid counterparts,  due  to an order of magnitude increase in traffic [Mobicom'12] - both pre-installed apps (that come with the phone and are hard to remove) as well as "regular" apps require more permissions that needed to do their job, which opens the door to resource abuse and privacy leaks [ACSAC'12] - "idle" phones and tablets can needlessly waste network resources [INFOCOM'15] - "good" apps can talk to "bad" websites, putting the user at risk of   security and privacy leaks, as well as malware infection   [GLOBECOM'15]   Automating testing   Systematic (thorough) testing is a critical step toward reliable and secure apps. We have developed and released A3E, (http://spruce.cs.ucr.edu/a3e) an approach and tool that allows widely-popular Android apps to be tested systematically; A3E achieves substantially better testing than testing from several human users combined [OOPSLA'13].      Record-and-replay   Recording a "run", i.e., a particular execution of an app so it can be replayed later, over and over again, is essential for tasks such as reproducibility -- a basics science tenet; or helping developers study and fix bugs or security leaks.  We have released two tools that allow record-and-replay of widely popular apps. The first tool, RERAN (http://www.androidreran.com/) is lightweight -- captures just touchscreen events, and does so very efficiently [ICSE'13]. RERAN has been used widely and downloaded thousands of times.  The second tool, VALERA (http://spruce.cs.ucr.edu/valera/) captures a lot more context so it allows more thorough studies, but it is more complex in use; consequently, VALERA has enabled record-and-replay for high-throughput, timing-sensitive apps such as video/audio capture and recognition [OOPSLA'15]. VALERA has also allowed us to  expose bugs in popular apps [AST'16] as well as capture and reproduce subtle concurrency errors [ISSTA'16].       Last Modified: 11/28/2017       Submitted by: Iulian Neamtiu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
