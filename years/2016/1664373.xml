<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small:Taming Small Data Writes to Block Storage Devices for Higher I/O Efficiency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>441397.00</AwardTotalIntnAmount>
<AwardAmount>456397</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Storage systems are one of the most critical infrastructures in large-scale data centers.  Much effort has been directed to allow data to be scalable and efficiently accessed on storage devices. While big data poses big challenges to storage systems, small data presents equally serious access efficiency challenges and begs for innovative research solutions. Almost all storage devices use block interface, which can hardly be replaced. Accessing small data potentially results in wasted device bandwidth and significantly reduced input/output (I/O) efficiency which leads to substantially higher hardware and energy costs and compromised service quality to end users. This research project, based on preliminary results that have shown consistent effectiveness in various application scenarios, will employ a disruptive process using data compression techniques to hide or remove small data writes. &lt;br/&gt;&lt;br/&gt;Because of demand on immediate data persistency, writes of the small-data continue to be the Achilles' heel of block devices. There are multiple software layers across the I/O stack interacting with the block interface, where small-data writes can inflict a substantial performance penalty. The layers include virtual block devices, I/O schedulers, and file systems. Instead of relying on special hardware support or demanding interface changes, the proposed solution leverages data compression techniques. It allows small data to efficiently pass through the rigid but necessary block interface adopted by almost all storage devices to provide persistency and atomicity without extra block write and flush operations. The proposed strategy would effectively address the issue with small writes to a great extent and profoundly benefit the industry. The expected software artifacts will be built into Linux and file systems such as Ext3, and be open to the community for sharing.</AbstractNarration>
<MinAmdLetterDate>10/04/2016</MinAmdLetterDate>
<MaxAmdLetterDate>11/02/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1664373</AwardID>
<Investigator>
<FirstName>Song</FirstName>
<LastName>Jiang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Song Jiang</PI_FULL_NAME>
<EmailAddress>song.jiang@uta.edu</EmailAddress>
<PI_PHON>4699963465</PI_PHON>
<NSF_ID>000240353</NSF_ID>
<StartDate>10/04/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Arlington</Name>
<CityName>Arlington</CityName>
<ZipCode>760190145</ZipCode>
<PhoneNumber>8172722105</PhoneNumber>
<StreetAddress>701 S Nedderman Dr, Box 19145</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX06</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>064234610</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT ARLINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Arlington]]></Name>
<CityName>Arlington</CityName>
<StateCode>TX</StateCode>
<ZipCode>760190001</ZipCode>
<StreetAddress><![CDATA[202 E. Border St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX06</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~441397</FUND_OBLG>
<FUND_OBLG>2018~15000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project was proposed in the context of processing big data in a system with storage devices and memory of large capacities. This large data set often includes a huge amount of small data items, such as metadata describing data items and small data objects that are often seen in the Internet-wide services. Management of these small data items poses major challenges in today&rsquo;s computer systems. One is their incompatibility with the block interface of storage devices, such as hard disks and SSDs. When writing a small data item, the system often has to write the entire block containing the item to the disk. And the block size can be many times as large as the item&rsquo;s size, leading to a very large write amplification and compromised write efficiency. The other challenge is that the data management efficiency (either on the disk or in the memory) deteriorates with increase of data item count. While the small data issue constantly becomes a performance barrier, this project designs and implements strategies to address the issue and remove the barrier from various perspectives.&nbsp; &nbsp; &nbsp;&nbsp;</p> <p>&nbsp;</p> <p>After years of extensive research on the issues, the PI and his team obtained three major outcomes demonstrating intellectual merits of the project. First, they use data compression technique to remove explicit writes of metadata. As the metadata are usually required to be synchronously written with their corresponding data blocks for high data reliability, the solution is to embed the small metadata into compressed data blocks, and makes writing of these small data almost free. To demonstrate its efficacy, the solution has been implemented into virtual disks, I/O schedulers, file systems, and deduplication systems. Experiment results reported in the publications reveal consistent and often significant performance improvements. Second, to address the challenge posed by the very large data item count in the memory, they design and implement the Wormhole data structure and its associated algorithms. It integrates merits of multiple existing sorted data structures and avoids their respective limitations. Meanwhile, to address the challenge about small data on the disk, they design and implement WipDB, a key-value store that minimizes write amplification in its internal data reorganization. It has been observed that its write throughput can be 3X-5X higher than similar systems developed by Google and Facebook. Third, deduplication is a major technique to reduce write traffic. To be effective, the unit of deduplication, chunk, must be formed based on file content. However, such a chunking operation is expensive. In the project, they develop a chunking approach, named RapidCDC, that can accelerate the operation often by tens of times, making the deduplication technique that can effectively write traffic practical.&nbsp;&nbsp;</p> <p>&nbsp;</p> <p>The broader impacts of the project are demonstrated by the prototyped and open-sourced systems, publications, as well as human resource training opportunities produced during execution of the project. In particular, the PI and his team prototyped multiple systems. They are those incorporating the data compression technique to avoid explicit metadata writes in virtual disks and file systems (Selfie) and in a deduplication system (ThinDedup), those for management of a huge number of small data items in the memory (Wormhole) and on the disk (WipDB), and that for accelerating chunking operation to enable a more effective deduplication for reduced data writes (WipDB). The proposal and design of the Wormhole and RapidCDC techniques represent breakthroughs in the data structure and deduplication research areas, respectively. All the systems have been extensively evaluated demonstrating their performance advantages. There are over ten papers published resulting from the project, including some on top-tier conferences, such as ACM SoCC, ICS, Eurosys, and SYSTOR conferences. Two Ph.D students and two Master students had graduated with this project as major parts of their thesis work. One of them had been accepted a job offer from University of Illinois at Chicago as a tenure track assistant professor. There are two more Ph.D students who had been substantially involved in the project. Six undergraduate students, majority of whom are minority students, including female, African-American, and Hispanic students, participated in the project. They learned skills for workload characterization, problem formulation and solving, and coding. This project&rsquo;s research findings have been incorporated into &nbsp;&ldquo;CSE6350 Advanced Topics in Computer Architecture&rdquo; regularly taught by the PI.</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/27/2020<br>      Modified by: Song&nbsp;Jiang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project was proposed in the context of processing big data in a system with storage devices and memory of large capacities. This large data set often includes a huge amount of small data items, such as metadata describing data items and small data objects that are often seen in the Internet-wide services. Management of these small data items poses major challenges in today’s computer systems. One is their incompatibility with the block interface of storage devices, such as hard disks and SSDs. When writing a small data item, the system often has to write the entire block containing the item to the disk. And the block size can be many times as large as the item’s size, leading to a very large write amplification and compromised write efficiency. The other challenge is that the data management efficiency (either on the disk or in the memory) deteriorates with increase of data item count. While the small data issue constantly becomes a performance barrier, this project designs and implements strategies to address the issue and remove the barrier from various perspectives.           After years of extensive research on the issues, the PI and his team obtained three major outcomes demonstrating intellectual merits of the project. First, they use data compression technique to remove explicit writes of metadata. As the metadata are usually required to be synchronously written with their corresponding data blocks for high data reliability, the solution is to embed the small metadata into compressed data blocks, and makes writing of these small data almost free. To demonstrate its efficacy, the solution has been implemented into virtual disks, I/O schedulers, file systems, and deduplication systems. Experiment results reported in the publications reveal consistent and often significant performance improvements. Second, to address the challenge posed by the very large data item count in the memory, they design and implement the Wormhole data structure and its associated algorithms. It integrates merits of multiple existing sorted data structures and avoids their respective limitations. Meanwhile, to address the challenge about small data on the disk, they design and implement WipDB, a key-value store that minimizes write amplification in its internal data reorganization. It has been observed that its write throughput can be 3X-5X higher than similar systems developed by Google and Facebook. Third, deduplication is a major technique to reduce write traffic. To be effective, the unit of deduplication, chunk, must be formed based on file content. However, such a chunking operation is expensive. In the project, they develop a chunking approach, named RapidCDC, that can accelerate the operation often by tens of times, making the deduplication technique that can effectively write traffic practical.       The broader impacts of the project are demonstrated by the prototyped and open-sourced systems, publications, as well as human resource training opportunities produced during execution of the project. In particular, the PI and his team prototyped multiple systems. They are those incorporating the data compression technique to avoid explicit metadata writes in virtual disks and file systems (Selfie) and in a deduplication system (ThinDedup), those for management of a huge number of small data items in the memory (Wormhole) and on the disk (WipDB), and that for accelerating chunking operation to enable a more effective deduplication for reduced data writes (WipDB). The proposal and design of the Wormhole and RapidCDC techniques represent breakthroughs in the data structure and deduplication research areas, respectively. All the systems have been extensively evaluated demonstrating their performance advantages. There are over ten papers published resulting from the project, including some on top-tier conferences, such as ACM SoCC, ICS, Eurosys, and SYSTOR conferences. Two Ph.D students and two Master students had graduated with this project as major parts of their thesis work. One of them had been accepted a job offer from University of Illinois at Chicago as a tenure track assistant professor. There are two more Ph.D students who had been substantially involved in the project. Six undergraduate students, majority of whom are minority students, including female, African-American, and Hispanic students, participated in the project. They learned skills for workload characterization, problem formulation and solving, and coding. This project’s research findings have been incorporated into  "CSE6350 Advanced Topics in Computer Architecture" regularly taught by the PI.          Last Modified: 01/27/2020       Submitted by: Song Jiang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
