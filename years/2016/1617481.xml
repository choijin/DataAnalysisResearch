<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Collaborative Research: Taming Mobile Hardware &amp; OS Diversity for Comprehensive Software Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2016</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Today, the Android operating system running on mobile systems such as smartphones, tablets, and wearables, is increasingly diverse. This is mainly because Android is heavily customized at multiple layers by many different vendors and mobile carriers, for various reasons including the difference in hardware and brand-specific value-added applications and services. This diversity of Android creates important challenges for testing, debugging, and analysis of software running on these mobile systems, including testing for consistent functionality and performance across different systems, finding crash bugs, analyzing malware, and identifying security vulnerabilities. The goal of this project is to make testing and analysis of the entire software stack of mobile systems running Android faster and more affordable, while at the same time requiring small engineering effort, all despite the diversity of mobile software and hardware. The proposed project will help improve the quality and security of software on mobile systems - a significant benefit to society and the economy.  &lt;br/&gt;&lt;br/&gt;The plan to achieve the aforementioned goals through a cloud-based mobile farm service, which provides virtual mobile instances, or virtual instances for short. Each virtual instance is a virtual machine that runs on powerful servers and that fully resembles the hardware and software configurations of a particular mobile system. By leveraging virtual machines running in servers, the proposed solution will provide a low cost, thus lower prices for the users. The important challenges will be addressed in two research thrusts. The first thrust investigates techniques to consolidate the real mobile systems in the cloud to reduce the overall infrastructure cost. The second research thrust targets at enhancing the performance of virtual instances by leveraging software and hardware techniques such as speculation, record and replay, dynamic boundary, and Remote Direct Memory Access (RDMA).</AbstractNarration>
<MinAmdLetterDate>09/01/2016</MinAmdLetterDate>
<MaxAmdLetterDate>09/01/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1617481</AwardID>
<Investigator>
<FirstName>Ardalan</FirstName>
<LastName>Amiri Sani</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ardalan Amiri Sani</PI_FULL_NAME>
<EmailAddress>ardalan@uci.edu</EmailAddress>
<PI_PHON>9498244768</PI_PHON>
<NSF_ID>000702468</NSF_ID>
<StartDate>09/01/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926970001</ZipCode>
<StreetAddress><![CDATA[3062 Bren Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-325aa554-7fff-3a2d-859b-6251a47c3c0d"> <p dir="ltr"><span>The goal of the project was to make testing and analysis of the entire software stack of mobile systems running Android operating system affordable and fast while requiring low engineering effort, all despite the diversity of mobile software and hardware. A cloud&shy;-based mobile farm service, called Charm, was proposed to achieve the aforementioned goal through virtualized mobile instances, or virtual instances for short. Each virtual instance is a virtual machine that runs on powerful servers and that fully resembles the hardware and software configurations of a particular mobile system. By leveraging virtual machines running in servers, Charm enjoys a low cost and hence low prices for the users who need to use these virtual instances for testing and analysis.</span></p> <p dir="ltr"><span>The team finished a working prototype of the Charm framework to enable various dynamic analysis of device drivers in mobile devices. Under this framework, the team ported several drivers including camera, audio, GPU, and IMU sensor drivers, in different mobile systems, including LG Nexus 5X, Huawei Nexus 6P, and Samsung Galaxy S7. In an extensive evaluation, the team showed that Charm enhances the usability of fuzzing of device drivers, enables record-and-replay of driver&rsquo;s execution, and facilitates detailed vulnerability analysis. Altogether, these capabilities enabled the team to find 25 bugs in device drivers, analyze 3 existing ones, and even build an arbitrary-code-execution kernel exploit using one of them.</span></p> <p dir="ltr"><span>In addition, the team also built a related system called FIBER to test the presence of a vulnerability in a binary kernel image. </span><span>This allowed the team to test patch presence of known CVEs.</span></p> <p dir="ltr"><span>Finally, evaluation with the Charm prototype uncovered bottlenecks in fuzzing of device drivers. In particular, the team noticed that OS kernel fuzzing wastes a significant amount of time in rebooting (recovering from a triggered bug). Secondly, the team noticed that OS kernel fuzzing often achieves extremely low coverage due to dependencies. To solve the first problem, the team built a framework, called Hecaton, for undoing system calls that result in a crash. To solve the second problem, the team investigated adding dependency-awareness into the fuzzer.</span></p> </span></p><br> <p>            Last Modified: 01/29/2020<br>      Modified by: Ardalan&nbsp;Amiri Sani</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  The goal of the project was to make testing and analysis of the entire software stack of mobile systems running Android operating system affordable and fast while requiring low engineering effort, all despite the diversity of mobile software and hardware. A cloud&shy;-based mobile farm service, called Charm, was proposed to achieve the aforementioned goal through virtualized mobile instances, or virtual instances for short. Each virtual instance is a virtual machine that runs on powerful servers and that fully resembles the hardware and software configurations of a particular mobile system. By leveraging virtual machines running in servers, Charm enjoys a low cost and hence low prices for the users who need to use these virtual instances for testing and analysis. The team finished a working prototype of the Charm framework to enable various dynamic analysis of device drivers in mobile devices. Under this framework, the team ported several drivers including camera, audio, GPU, and IMU sensor drivers, in different mobile systems, including LG Nexus 5X, Huawei Nexus 6P, and Samsung Galaxy S7. In an extensive evaluation, the team showed that Charm enhances the usability of fuzzing of device drivers, enables record-and-replay of driverâ€™s execution, and facilitates detailed vulnerability analysis. Altogether, these capabilities enabled the team to find 25 bugs in device drivers, analyze 3 existing ones, and even build an arbitrary-code-execution kernel exploit using one of them. In addition, the team also built a related system called FIBER to test the presence of a vulnerability in a binary kernel image. This allowed the team to test patch presence of known CVEs. Finally, evaluation with the Charm prototype uncovered bottlenecks in fuzzing of device drivers. In particular, the team noticed that OS kernel fuzzing wastes a significant amount of time in rebooting (recovering from a triggered bug). Secondly, the team noticed that OS kernel fuzzing often achieves extremely low coverage due to dependencies. To solve the first problem, the team built a framework, called Hecaton, for undoing system calls that result in a crash. To solve the second problem, the team investigated adding dependency-awareness into the fuzzer.        Last Modified: 01/29/2020       Submitted by: Ardalan Amiri Sani]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
