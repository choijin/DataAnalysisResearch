<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Writing to Learn to Program for Undergraduate Engineers</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2016</AwardEffectiveDate>
<AwardExpirationDate>05/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>299620.00</AwardTotalIntnAmount>
<AwardAmount>299620</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040000</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Paul Tymann</SignBlockName>
<PO_EMAI>ptymann@nsf.gov</PO_EMAI>
<PO_PHON>7032922832</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This country's dependency on correct, robust software drives the significance and importance of this work. Vital aspects of national security depend on the US government's ability to withstand daily cyber intrusions. Likewise, the national infrastructure depends on the smart grid and thousands of other software-driven control systems that regulate water supplies, run factories, and operate cars. Yet, teaching students how to write efficient, error-free software continues to be a challenge. This project investigates a new programming pedagogy that will significantly improve training for the programmers we rely on, by advancing ideas on three fronts. First, the project investigates the integration of literate programming ideas into technology supporting learning and into classroom environments, i.e., marrying informal writing and programming. Second, the project contributes to the writing-to-learn (WTL) literature by incorporating WTL principles into a new domain of programming. Third, the project contributes to computer science education literature by investigating the learning processes associated with learning to program in order to improve programming pedagogy.&lt;br/&gt;&lt;br/&gt;The goals and scope of this project include advancing the understanding of learning in technology-rich environments by examining how WTL strategies can support novice programmer development. This project employs a case study design that emphasizes concurrent qualitative and quantitative data collection and analysis with mixing occurring during the final interpretation stage. Through a combination of interviews, writing samples, programming metrics, and writing metrics, this project will 1) capture understanding of how writing helps students connect big-picture concepts to specific implementations of programming solutions; 2) identify roles that intermingled writing takes in promoting programming mastery; and 3) identify types of learners (e.g., computing majors, non-computing majors) that most benefit from intermingled writing while learning to program.</AbstractNarration>
<MinAmdLetterDate>04/04/2016</MinAmdLetterDate>
<MaxAmdLetterDate>04/04/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1612132</AwardID>
<Investigator>
<FirstName>Donna</FirstName>
<LastName>Reese</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Donna S Reese</PI_FULL_NAME>
<EmailAddress>dreese@cse.msstate.edu</EmailAddress>
<PI_PHON>6623252756</PI_PHON>
<NSF_ID>000232656</NSF_ID>
<StartDate>04/04/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Bryan</FirstName>
<LastName>Jones</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bryan A Jones</PI_FULL_NAME>
<EmailAddress>bjones@ece.msstate.edu</EmailAddress>
<PI_PHON>6623253149</PI_PHON>
<NSF_ID>000077379</NSF_ID>
<StartDate>04/04/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Mahnas</FirstName>
<LastName>Mohammadi-Aragh</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mahnas J Mohammadi-Aragh</PI_FULL_NAME>
<EmailAddress>jean@ece.msstate.edu</EmailAddress>
<PI_PHON>6623252042</PI_PHON>
<NSF_ID>000648844</NSF_ID>
<StartDate>04/04/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Mississippi State University</Name>
<CityName>MISSISSIPPI STATE</CityName>
<ZipCode>397629662</ZipCode>
<PhoneNumber>6623257404</PhoneNumber>
<StreetAddress>PO Box 6156</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Mississippi</StateName>
<StateCode>MS</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MS03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>075461814</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MISSISSIPPI STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>075461814</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Mississippi State University]]></Name>
<CityName>Mississippi State</CityName>
<StateCode>MS</StateCode>
<ZipCode>397629662</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Mississippi</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MS03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1998</Code>
<Text>IUSE</Text>
</ProgramElement>
<ProgramReference>
<Code>8209</Code>
<Text>Improv Undergrad STEM Ed(IUSE)</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0416</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~299620</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project examined how writing activities (e.g., paraphrasing,  reflection) could improve curriculum for teaching students how to  program. The project produced materials for incorporating writing instruction into programming courses, a framework of writing metrics, and a proof-of-concept tool to illustrate how the writing metrics could inform assessment and feedback practices.</p> <p>Learning to program is a critical skill for students pursuing degrees in science, technology, engineering, and mathematics. We  are a nation driven by computer code, a people that depend on software  to live their everyday lives. Programmers and the software they create  are ubiquitous. To illustrate with a few examples, software drives our  cars, trains, and planes; secures our power and water systems; and forms  the basis of our communication through voice calls, text messages, and  video conferencing using cell phones. Our country is dependent on  software, and our dependency is increasing. As industries grow and change in the  United States, the need for cognitive competencies typically associated  with computing is becoming essential for many types of jobs that did not  traditionally require those skills, including financial services,  healthcare, and manufacturing. Thus, we must educate students to create  the software necessary to run our daily lives and enable them to compete in the global  workforce. However, learning to program is challenging and has  historically created a barrier that prevents some students from  graduating with computing-focused degrees. <br /><br />This project explored  whether source code comments, which are a type of writing embedded  within a program, could be used as low-stakes, informal writing to  reveal the underlying thought processes that were involved with writing  the program. For programmers, there is a fundamental knowledge and skill  base that helps create a clean, well-structured algorithm. For example,  programmers must be able to think critically in order to decompose a  problem, reformulate the problem into a series of ordered steps, and  identify when and where to strategically apply techniques such as  iteration or logical operations. Additionally, programmers must know the  syntax and rules for the chosen language in order to provide directions  to a computer. The ability to write source code does not indicate that  one understands the code. Nor does the ability to explain concepts on a  test and score well indicate that one can develop code. However, by  developing students' ability to explain code in written English,  instructors can improve on students' ability to code. Writing, by  revealing students' underlying thinking processes, helps instructors  identify conceptual gaps or misunderstandings, which improves formative  assessment practices.<br /><br />The key intellectual merit and broader impact of this project are as follows: <br /><br />The  team developed materials that can be used to incorporate writing into  computer programming courses, including software to support simultaneous  writing and coding and revised laboratory exercises for introductory  programming courses. These materials are available upon request to the  project PI. These materials have been used to incorporate writing into  introductory computer programming courses, a microprocessor course, and  an embedded systems hardware course.<br /><br />The project team included  computer programming experts, computing education researchers, and  writing experts. The team examined nearly 200 programming assignment  submissions to investigate links between writing within source code  (source code comments) and learning. The approach was unique in that the  team examined source code comments for links between reflective  writing, organizational writing, and learning. The examination produced a  framework of programming writing metrics for identifying students'  Thinking Processes and Visual Organization strategies. Thinking  Processes quantify individual comments within source code, which is  analogous to classifying sentences within an essay. Visual Organization  quantifies the overall structure of a program, which is analogous to  paragraphing within an essay. Examples of each classification for the  framework are available in the publications associated with this project.<br /><br />The project team developed a proof of concept online  tool to illustrate how the framework produced by this  project could provide feedback to students in order to improve their  programming skills. Both a student and instructor interface were  modeled. To use the tool, a student uploads source code, the tool  processes the code using basic machine learning algorithms, and the GUI  displays a summary of writing metrics. The instructor interface shows  summaries of student metrics and can allow an instructor to view the  results over time. The proof-of-concept tool was fully described in our  2020 IEEE/ASEE Frontiers in Education conference paper.</p><br> <p>            Last Modified: 10/13/2020<br>      Modified by: Mahnas&nbsp;J&nbsp;Mohammadi-Aragh</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project examined how writing activities (e.g., paraphrasing,  reflection) could improve curriculum for teaching students how to  program. The project produced materials for incorporating writing instruction into programming courses, a framework of writing metrics, and a proof-of-concept tool to illustrate how the writing metrics could inform assessment and feedback practices.  Learning to program is a critical skill for students pursuing degrees in science, technology, engineering, and mathematics. We  are a nation driven by computer code, a people that depend on software  to live their everyday lives. Programmers and the software they create  are ubiquitous. To illustrate with a few examples, software drives our  cars, trains, and planes; secures our power and water systems; and forms  the basis of our communication through voice calls, text messages, and  video conferencing using cell phones. Our country is dependent on  software, and our dependency is increasing. As industries grow and change in the  United States, the need for cognitive competencies typically associated  with computing is becoming essential for many types of jobs that did not  traditionally require those skills, including financial services,  healthcare, and manufacturing. Thus, we must educate students to create  the software necessary to run our daily lives and enable them to compete in the global  workforce. However, learning to program is challenging and has  historically created a barrier that prevents some students from  graduating with computing-focused degrees.   This project explored  whether source code comments, which are a type of writing embedded  within a program, could be used as low-stakes, informal writing to  reveal the underlying thought processes that were involved with writing  the program. For programmers, there is a fundamental knowledge and skill  base that helps create a clean, well-structured algorithm. For example,  programmers must be able to think critically in order to decompose a  problem, reformulate the problem into a series of ordered steps, and  identify when and where to strategically apply techniques such as  iteration or logical operations. Additionally, programmers must know the  syntax and rules for the chosen language in order to provide directions  to a computer. The ability to write source code does not indicate that  one understands the code. Nor does the ability to explain concepts on a  test and score well indicate that one can develop code. However, by  developing students' ability to explain code in written English,  instructors can improve on students' ability to code. Writing, by  revealing students' underlying thinking processes, helps instructors  identify conceptual gaps or misunderstandings, which improves formative  assessment practices.  The key intellectual merit and broader impact of this project are as follows:   The  team developed materials that can be used to incorporate writing into  computer programming courses, including software to support simultaneous  writing and coding and revised laboratory exercises for introductory  programming courses. These materials are available upon request to the  project PI. These materials have been used to incorporate writing into  introductory computer programming courses, a microprocessor course, and  an embedded systems hardware course.  The project team included  computer programming experts, computing education researchers, and  writing experts. The team examined nearly 200 programming assignment  submissions to investigate links between writing within source code  (source code comments) and learning. The approach was unique in that the  team examined source code comments for links between reflective  writing, organizational writing, and learning. The examination produced a  framework of programming writing metrics for identifying students'  Thinking Processes and Visual Organization strategies. Thinking  Processes quantify individual comments within source code, which is  analogous to classifying sentences within an essay. Visual Organization  quantifies the overall structure of a program, which is analogous to  paragraphing within an essay. Examples of each classification for the  framework are available in the publications associated with this project.  The project team developed a proof of concept online  tool to illustrate how the framework produced by this  project could provide feedback to students in order to improve their  programming skills. Both a student and instructor interface were  modeled. To use the tool, a student uploads source code, the tool  processes the code using basic machine learning algorithms, and the GUI  displays a summary of writing metrics. The instructor interface shows  summaries of student metrics and can allow an instructor to view the  results over time. The proof-of-concept tool was fully described in our  2020 IEEE/ASEE Frontiers in Education conference paper.       Last Modified: 10/13/2020       Submitted by: Mahnas J Mohammadi-Aragh]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
