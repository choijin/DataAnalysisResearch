<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Word-level Abstraction of Arithmetic Gate-level Circuits</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/15/2016</AwardEffectiveDate>
<AwardExpirationDate>12/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>With an ever-increasing complexity of integrated circuits, hardware verification has become the dominating factor of the overall electronic design flow. Particularly critical and challenging is the verification of complex arithmetic components present in almost every design, from microprocessors to medical devices to a communication equipment.  In contrast to logic circuits, for which effective Boolean methods have been developed, the difficulty of arithmetic hardware verification lies in the size and the amount of data that needs to be analyzed. Different mathematical models, based on higher abstraction level than logic bits need to be developed to deal with this complexity. This project addresses this problem by developing new techniques for abstracting arithmetic structures from physical circuit implementations. In addition to verification, abstracting higher-level information from a design is important in hardware trust and security applications, where it can be used to analyze the design to isolate malicious hardware. Successful implementation of this work will contribute to the development of the state-of-the-art tools for electronic design automation and will increase design productivity. The project will also train undergraduate and graduate students, postdocs for future workforce in this technical area.&lt;br/&gt;&lt;br/&gt;The project will develop a new method to abstract high-level information from arithmetic circuits using computer algebra approach. In this approach, circuit components, such as logic gates, are modeled in algebraic domain as pseudo-Boolean polynomials. Rewriting polynomials from circuit outputs to inputs makes it possible to extract arithmetic function embedded in the circuit. During the rewriting, the intermediate pseudo-Boolean expressions are examined in order to identify possible arithmetic structures. The identification is done using a novel "spectral analysis" technique, which matches the polynomial expressions against the reference "spectra" of basic arithmetic blocks, such as multipliers, adders, and multiply-and-accumulate operators. This approach will abstract word components from polynomial expressions to reason about the word-level structure from the internal expressions. By representing logic and arithmetic functions as pseudo-Boolean polynomials, it is possible to mitigate the size explosion typically encountered in Boolean based methods.</AbstractNarration>
<MinAmdLetterDate>06/10/2016</MinAmdLetterDate>
<MaxAmdLetterDate>06/10/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1617708</AwardID>
<Investigator>
<FirstName>Maciej</FirstName>
<LastName>Ciesielski</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Maciej Ciesielski</PI_FULL_NAME>
<EmailAddress>ciesiel@ecs.umass.edu</EmailAddress>
<PI_PHON>4135450401</PI_PHON>
<NSF_ID>000209810</NSF_ID>
<StartDate>06/10/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Massachusetts Amherst</Name>
<CityName>Hadley</CityName>
<ZipCode>010359450</ZipCode>
<PhoneNumber>4135450698</PhoneNumber>
<StreetAddress>Research Administration Building</StreetAddress>
<StreetAddress2><![CDATA[100 Venture Way, Suite 201]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>153926712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MASSACHUSETTS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>079520631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Massachusetts Amherst]]></Name>
<CityName>Amherst</CityName>
<StateCode>MA</StateCode>
<ZipCode>010039293</ZipCode>
<StreetAddress><![CDATA[151 Holdsworth Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>This project addresses the problem of extracting functional specification from hardware implementation of large arithmetic circuits using a novel concept of algebraic rewriting and spectral computation. Extracting higher-level information from low-level (typically gate-level) implementation of a circuit is important for several reasons: 1) In formal verification of integrated circuits by bringing the design representation to a higher level of abstraction; 2) In reverse engineering, when the higher level model of the design is not available; 3) In hardware trust and security applications, to analyze the design and isolate malicious hardware; and 4) To understand the general structure of the design, useful in fixing the design bugs (in a process called debugging).&nbsp;</span></p> <p><span><br /></span><span>The result of this work is a formal verification method of arithmetic circuits that employs modern computer algebra technique without resorting to complicated mathematics and computationally expensive computer algebra software, such as Maple or Singular. The technique represents the circuit in an algebraic (rather than Boolean) domain by modeling the circuit elements (logic gates) as pseudo-Boolean polynomials, i.e. polynomials whose variables are Boolean. It then uses efficient algebraic rewriting technique to extract arithmetic function implemented by the circuit. During the rewriting, the intermediate pseudo-Boolean expressions are examined using a novel &ldquo;spectral analysis&rdquo; technique: it analyzes the values and distribution of polynomial coefficients and matches them against the reference spectra of basic arithmetic blocks, such as multipliers and adders. By representing the internal logic and arithmetic functions in this form, it is possible to mitigate the size explosion of the intermediate expressions typically encountered in Boolean domain or in standard algebraic rewriting. The experiments confirm that the spectral method developed in this project can indeed extract arithmetic function blocks from large circuit regardless of its internal gate-level structure. This novel algebraic rewriting approach supported by spectral computation is considered a state-of-the art of formal verification of integer arithmetic designs and can handle designs with up to 1024 bits and different architectures.</span></p> <p><span><br /></span><span>The result of this work will contribute to the advancement of the state-of-the-art EDA tools for hardware analysis and verification, developed in academia and industry. The new abstraction and verification technique conceived in this project will find applications across several disciplines, including computer science and engineering, and mathematics. Specifically, it demonstrates how to solve a complicated problem of formal verification of arithmetic circuits using a more straightforward and efficient engineering approach to polynomial division and manipulation.&nbsp;</span><span>The project also has an important educational impact: it educates students in applying mathematical models to engineering practice and teaches engineers how to model complex problems and apply computer algebra techniques to large-scale systems.&nbsp;&nbsp;</span><span>This work has been presented in graduate courses, tutorials, conferences and seminars offered world-wide. The results have been published in archived journals, such as IEEE Transactions on Computer-Aided Design and in proceedings of major EDA conferences. The prototype software system is available on the world-wide web and on several open-source platforms.</span></p><br> <p>            Last Modified: 01/06/2021<br>      Modified by: Maciej&nbsp;Ciesielski</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project addresses the problem of extracting functional specification from hardware implementation of large arithmetic circuits using a novel concept of algebraic rewriting and spectral computation. Extracting higher-level information from low-level (typically gate-level) implementation of a circuit is important for several reasons: 1) In formal verification of integrated circuits by bringing the design representation to a higher level of abstraction; 2) In reverse engineering, when the higher level model of the design is not available; 3) In hardware trust and security applications, to analyze the design and isolate malicious hardware; and 4) To understand the general structure of the design, useful in fixing the design bugs (in a process called debugging).    The result of this work is a formal verification method of arithmetic circuits that employs modern computer algebra technique without resorting to complicated mathematics and computationally expensive computer algebra software, such as Maple or Singular. The technique represents the circuit in an algebraic (rather than Boolean) domain by modeling the circuit elements (logic gates) as pseudo-Boolean polynomials, i.e. polynomials whose variables are Boolean. It then uses efficient algebraic rewriting technique to extract arithmetic function implemented by the circuit. During the rewriting, the intermediate pseudo-Boolean expressions are examined using a novel "spectral analysis" technique: it analyzes the values and distribution of polynomial coefficients and matches them against the reference spectra of basic arithmetic blocks, such as multipliers and adders. By representing the internal logic and arithmetic functions in this form, it is possible to mitigate the size explosion of the intermediate expressions typically encountered in Boolean domain or in standard algebraic rewriting. The experiments confirm that the spectral method developed in this project can indeed extract arithmetic function blocks from large circuit regardless of its internal gate-level structure. This novel algebraic rewriting approach supported by spectral computation is considered a state-of-the art of formal verification of integer arithmetic designs and can handle designs with up to 1024 bits and different architectures.   The result of this work will contribute to the advancement of the state-of-the-art EDA tools for hardware analysis and verification, developed in academia and industry. The new abstraction and verification technique conceived in this project will find applications across several disciplines, including computer science and engineering, and mathematics. Specifically, it demonstrates how to solve a complicated problem of formal verification of arithmetic circuits using a more straightforward and efficient engineering approach to polynomial division and manipulation. The project also has an important educational impact: it educates students in applying mathematical models to engineering practice and teaches engineers how to model complex problems and apply computer algebra techniques to large-scale systems.  This work has been presented in graduate courses, tutorials, conferences and seminars offered world-wide. The results have been published in archived journals, such as IEEE Transactions on Computer-Aided Design and in proceedings of major EDA conferences. The prototype software system is available on the world-wide web and on several open-source platforms.       Last Modified: 01/06/2021       Submitted by: Maciej Ciesielski]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
