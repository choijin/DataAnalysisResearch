<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CI-EN: Enhancement of ECJ, A High-Performance Community Metaheuristics Library for Stochastic Optimization Research</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>474991.00</AwardTotalIntnAmount>
<AwardAmount>482991</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Wendy Nilsen</SignBlockName>
<PO_EMAI>wnilsen@nsf.gov</PO_EMAI>
<PO_PHON>7032922568</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This grant funds the transformation of the popular ECJ software library into a general-purpose software tool for performing so-called "metaheuristic" optimization.  Metaheuristics are methods for coming up with optimal (or close to optimal) solutions to hard problems, and particularly ones for which there are no straightforward ways to find answers.  For example, imagine if we wanted to find the best walking behavior for a robot, but didn't really know how to program one, we could instead "evolve" a solution by trying many arbitrary behaviors in a simulator, then selecting the best-performing ones and breeding them to produce a new generation, then testing them in the simulator, and so on.  This approach, a form of genetic programming, is an example of a metaheuristic.  Metaheuristics are widely used in science and engineering for everything from robot design to protein folding to simulation of migration patterns.  Metaheuristics are also popular in teaching computer science as many of them are closely related to similar notions drawn from genetics and population biology, swarms, human organizational behavior, and physics.  While ECJ is particularly popular for genetic programming and related methods, there is no standard community tool for metaheuristics as a whole.  This grant will enable development of such a tool.  This would give students and researchers alike access to a broad range of metaheuristics algorithms to compare and use, make those algorithms usable in massively parallel environments, and provide a centralized environment for community contribution.&lt;br/&gt;&lt;br/&gt;Metaheuristics are stochastic optimization techniques in wide use for those classes of problems, such as the parameters of complex simulations, for which there is no "principled" optimization approach.  ECJ is a popular tool certain subfamilies of metaheuristics, such as genetic programming and genetic algorithms, which have dominated much of the early research in the area.  But much recent metaheuristics research has branched out to areas such as multiobjective optimization, combinatorial optimization, constrained methods, model-fitting, and so on, and has led to a host of new techniques.  These techniques have a high degree of commonality, and the metheuristics community often seeks to "mix and match" elements from these techniques in order to customize methods for certain problems, and also to compare them against one another.  However there is at present no popular common library to make this possible.  This proposal aims to extend and enhance ECJ into a community metaheuristics toolkit for both researchers and educators.  Enhancements will include: a testing harness and various testing facilities; new metaheuristics in single-state optimization, hybrid architectures, NEAT, combinatorial optimization, and model-fitting optimization; GUI and Eclipse environments; statistics utilities; and new benchmark problems for testing metaheuristics methods. The work will be done in conjunction with the metheuristics research community and also with teachers from high schools in the Washington D.C. area to assess the utility of the tool in STEM education.</AbstractNarration>
<MinAmdLetterDate>07/25/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/18/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1629850</AwardID>
<Investigator>
<FirstName>Sean</FirstName>
<LastName>Luke</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sean Luke</PI_FULL_NAME>
<EmailAddress>sean@cs.gmu.edu</EmailAddress>
<PI_PHON>7039934169</PI_PHON>
<NSF_ID>000239818</NSF_ID>
<StartDate>07/25/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>George Mason University</Name>
<CityName>FAIRFAX</CityName>
<ZipCode>220304422</ZipCode>
<PhoneNumber>7039932295</PhoneNumber>
<StreetAddress>4400 UNIVERSITY DR</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>11</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA11</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>077817450</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGE MASON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>077817450</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[George Mason University]]></Name>
<CityName>Fairfax</CityName>
<StateCode>VA</StateCode>
<ZipCode>220304422</ZipCode>
<StreetAddress><![CDATA[4400 University Drive MSN 4A5]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>11</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA11</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7359</Code>
<Text>CCRI-CISE Cmnty Rsrch Infrstrc</Text>
</ProgramElement>
<ProgramReference>
<Code>7359</Code>
<Text>COMPUTING RES INFRASTRUCTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~474991</FUND_OBLG>
<FUND_OBLG>2017~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><em>Metaheuristics</em> are computer algorithms which try to find optimal or near-optimal solutions to difficult, and often difficult-to-describe, problems.&nbsp; For example, we might use metaheuritics to search for an optimal building design, or for an optimal RNA sequence, or for an optimal collection of team robot behaviors for playing robot soccer.&nbsp; These kinds of problems show up everywhere in science and engineering, but can be very difficult and can require large amounts of massively distributed computer power.<br /><br />ECJ is a popular open source toolkit for applying algorithms drawn from a widely-used family of high-performance metaheuristics called <em>evolutionary computation</em>.&nbsp; This project entailed extending ECJ to support the broader metaheuristics community with the goal of providing a unifying and open framework for scientists and engineers to contribute to, share and compare new methods and approaches, and extend its capabilities.<br /><br />To this end, this project extended ECJ in many ways.&nbsp; First, it added many new metaheuristics algorithms to ECJ, including single-state optimization algorithms such as hill-climbing and simulated annealing; combinatorial optimization methods such as Ant Colony Optimization and GRASP; estimation of distribution methods such as PBIL, AMaLGaM IDEA, and DOVs; hooks for certain hybrid architectures; and support for the NEAT evolutionary neural network algorithm.&nbsp; Second, the project made improvements to ECJ's GUI and charting and added integration with other software.&nbsp; Third, the project added a test harness and a large number of custom tests to verify ECJ's performance.&nbsp; Fourth, the project added new benchmark applications, demonstration examples, multiple new statistics utilities, integration with R and other statistics tools, and major modification to all of ECJ to better integrate it with many other kinds of applications.<br /><br />As an example test of this final outcome, we integrated ECJ with the MASON multiagent simulation toolkit to make possible the massively distributed optimization of <em>agent-based models</em>.&nbsp; These are very large and costly simulations of many objects, people, animals, etc. interacting with one another in complex ways.&nbsp; Agent-based models are common in the social sciences, population biology, and in engineering, but are extremely difficult to optimize.&nbsp; The combination of ECJ+MASON is now the the best-in-class software for massive agent-based model optimization and calibration.<br /><br />Because metaheuristics are applicable to such a wide range of problems, improvements to ECJ will impact on a broad community of scientists, researchers, and engineers across many disciplines.&nbsp; These improvements will also make ECJ much more reliable and trusted in the community, and provide new ways for metaherustics designers and practitioners to collaborate and share approaches.&nbsp; Other improvements in ECJ, such as demos and GUI improvements, specifically target its use as an educational tool, as evolutionary computation is a popular and engaging topic in artificial intelligence or computer science classes.<br /><br />These improvements and changes in ECJ were done with input from a panel of advisors and experts, plus input both teachers and students both at the high school and university level.&nbsp; These efforts were disseminated and discussed at many conferences and other venues to solicit feedback.</p><br> <p>            Last Modified: 01/12/2021<br>      Modified by: Sean&nbsp;Luke</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Metaheuristics are computer algorithms which try to find optimal or near-optimal solutions to difficult, and often difficult-to-describe, problems.  For example, we might use metaheuritics to search for an optimal building design, or for an optimal RNA sequence, or for an optimal collection of team robot behaviors for playing robot soccer.  These kinds of problems show up everywhere in science and engineering, but can be very difficult and can require large amounts of massively distributed computer power.  ECJ is a popular open source toolkit for applying algorithms drawn from a widely-used family of high-performance metaheuristics called evolutionary computation.  This project entailed extending ECJ to support the broader metaheuristics community with the goal of providing a unifying and open framework for scientists and engineers to contribute to, share and compare new methods and approaches, and extend its capabilities.  To this end, this project extended ECJ in many ways.  First, it added many new metaheuristics algorithms to ECJ, including single-state optimization algorithms such as hill-climbing and simulated annealing; combinatorial optimization methods such as Ant Colony Optimization and GRASP; estimation of distribution methods such as PBIL, AMaLGaM IDEA, and DOVs; hooks for certain hybrid architectures; and support for the NEAT evolutionary neural network algorithm.  Second, the project made improvements to ECJ's GUI and charting and added integration with other software.  Third, the project added a test harness and a large number of custom tests to verify ECJ's performance.  Fourth, the project added new benchmark applications, demonstration examples, multiple new statistics utilities, integration with R and other statistics tools, and major modification to all of ECJ to better integrate it with many other kinds of applications.  As an example test of this final outcome, we integrated ECJ with the MASON multiagent simulation toolkit to make possible the massively distributed optimization of agent-based models.  These are very large and costly simulations of many objects, people, animals, etc. interacting with one another in complex ways.  Agent-based models are common in the social sciences, population biology, and in engineering, but are extremely difficult to optimize.  The combination of ECJ+MASON is now the the best-in-class software for massive agent-based model optimization and calibration.  Because metaheuristics are applicable to such a wide range of problems, improvements to ECJ will impact on a broad community of scientists, researchers, and engineers across many disciplines.  These improvements will also make ECJ much more reliable and trusted in the community, and provide new ways for metaherustics designers and practitioners to collaborate and share approaches.  Other improvements in ECJ, such as demos and GUI improvements, specifically target its use as an educational tool, as evolutionary computation is a popular and engaging topic in artificial intelligence or computer science classes.  These improvements and changes in ECJ were done with input from a panel of advisors and experts, plus input both teachers and students both at the high school and university level.  These efforts were disseminated and discussed at many conferences and other venues to solicit feedback.       Last Modified: 01/12/2021       Submitted by: Sean Luke]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
