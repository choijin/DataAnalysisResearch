<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Enhancing the Security and Performance of GPU Access in Web Browsers</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/15/2016</AwardEffectiveDate>
<AwardExpirationDate>05/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>499805.00</AwardTotalIntnAmount>
<AwardAmount>515805</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Indrajit Ray</SignBlockName>
<PO_EMAI>iray@nsf.gov</PO_EMAI>
<PO_PHON>7032925387</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern personal computers have embraced increasingly powerful Graphics Processing Units (GPUs), hardware components that enable high performance graphics. The software that controls the programming of these GPUs in today's computers (i.e., the graphics stack) was designed to be used by applications acquired from trustworthy developers and installed directly by the user. However, web applications (i.e., applications running inside a web browser) are gaining in popularity and WebGL is a recent industry effort to provide GPU-based graphics for web applications. However, WebGL has posed serious security concerns as malicious web applications have used WebGL to accomplish attacks on user's systems. Unfortunately, web browser-based protection techniques have not solved the security concerns and have significantly worsened WebGL performance. This project is developing techniques to improve the security of GPU-based graphics for web applications, without worsening performance.&lt;br/&gt;&lt;br/&gt;The project is proceeding in two research thrusts. In the first thrust, the researchers are using GPU virtualization technology to sandbox a web application's access to the GPU, providing hardware-level isolation for sharing a GPU. In this design, each web application uses a dedicated virtual GPU (or vGPU) allowing the web application to achieve high graphics performance, while isolating it from the rest of the system. The project is developing a new operating system compositor to control and schedule the shared resources between the vGPUs. Unfortunately, the vGPU-based architecture cannot prevent all possible GPU-based security attacks, including some forms of information leakage, denials-of-service, and memory integrity attacks. In the second thrust, the researchers are studying these remaining attack vectors and developing complementary solutions.</AbstractNarration>
<MinAmdLetterDate>06/10/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/22/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1617513</AwardID>
<Investigator>
<FirstName>Ardalan</FirstName>
<LastName>Amiri Sani</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ardalan Amiri Sani</PI_FULL_NAME>
<EmailAddress>ardalan@uci.edu</EmailAddress>
<PI_PHON>9498244768</PI_PHON>
<NSF_ID>000702468</NSF_ID>
<StartDate>06/10/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926970001</ZipCode>
<StreetAddress><![CDATA[3062 Bren Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>025Z</Code>
<Text>SaTC: Secure and Trustworthy Cyberspace</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~499805</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-4a0e6ff6-7fff-deed-1919-0f8a6b50cfff"> <p dir="ltr"><span>The goal of this project was to enhance the security of GPU access in web browsers while achieving close-to-native performance. This was achieved with two research thrusts. The first thrust investigated decoupling the data and control planes of the operating system and browser graphics stack using GPU virtualization. In this design, each web app uses a dedicated virtual GPU (or vGPU) as an isolated data plane while the operating system compositor uses a privileged vGPU as the control plane. Moreover, the whole graphics stack for the data plane (from the web app down to the hardware) runs inside the web app process, isolating it from other web apps and from the rest of the system, improving the system security. Moreover, such a design eliminates the need for security checks performed by the browser and hence improves the graphics performance achieved by web apps as well. Decoupling and isolating the data and control planes of the graphics stack protects against many attack vectors. However, a malicious web app can still leverage side channels, attack the GPU resources shared between vGPUs, or attack the trusted component in the web app process, such as the JavaScript engine, using vGPU&rsquo;s Direct Memory Access (DMA) capability. The second thrust studied these attack vectors and investigated solutions to defeat them.</span></p> <p dir="ltr"><span>The team built several systems for these two research thrusts. For the first thrust, the team built Sugar and designed IDaaS. Sugar decouples the data and control planes of WebGL in web browsers using GPU virtualization. IDaaS is a design that allows the software stack (i.e., the data plane and the control plane) of an I/O device (including GPUs) to be fully decoupled from the system and run closer to the device itself in order to enhance the security of the system.</span></p> <span>For the second research thrust, the team built Milkomeda, Viola, Ditio, Tabellion, Hecaton, and SchrodinText. Milkomeda runs security checks for application's access to the graphics stack at the WebGL/OpenGL ES interface. Ditio and Viola perform security checks on the stack of some I/O devices in the virtual machine monitor layer. Tabellion, among others, secures the content shown on the display (including content rendered by the GPU) in the virtual machine monitor and ARM TrustZone&rsquo;s secure world layers. Hecaton enhances the security of device drivers (including GPU device drivers) by finding bugs in them using an efficient and effective reboot-free fuzzing scheme. </span><span>SchrodinText protects textual content against a compromised OS, while allowing the OS to use the GPU to render its UI. </span><span>These systems can collectively protect against various GPU-related attacks.</span></span></p> <p>&nbsp;</p><br> <p>            Last Modified: 10/02/2020<br>      Modified by: Ardalan&nbsp;Amiri Sani</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  The goal of this project was to enhance the security of GPU access in web browsers while achieving close-to-native performance. This was achieved with two research thrusts. The first thrust investigated decoupling the data and control planes of the operating system and browser graphics stack using GPU virtualization. In this design, each web app uses a dedicated virtual GPU (or vGPU) as an isolated data plane while the operating system compositor uses a privileged vGPU as the control plane. Moreover, the whole graphics stack for the data plane (from the web app down to the hardware) runs inside the web app process, isolating it from other web apps and from the rest of the system, improving the system security. Moreover, such a design eliminates the need for security checks performed by the browser and hence improves the graphics performance achieved by web apps as well. Decoupling and isolating the data and control planes of the graphics stack protects against many attack vectors. However, a malicious web app can still leverage side channels, attack the GPU resources shared between vGPUs, or attack the trusted component in the web app process, such as the JavaScript engine, using vGPUâ€™s Direct Memory Access (DMA) capability. The second thrust studied these attack vectors and investigated solutions to defeat them. The team built several systems for these two research thrusts. For the first thrust, the team built Sugar and designed IDaaS. Sugar decouples the data and control planes of WebGL in web browsers using GPU virtualization. IDaaS is a design that allows the software stack (i.e., the data plane and the control plane) of an I/O device (including GPUs) to be fully decoupled from the system and run closer to the device itself in order to enhance the security of the system. For the second research thrust, the team built Milkomeda, Viola, Ditio, Tabellion, Hecaton, and SchrodinText. Milkomeda runs security checks for application's access to the graphics stack at the WebGL/OpenGL ES interface. Ditio and Viola perform security checks on the stack of some I/O devices in the virtual machine monitor layer. Tabellion, among others, secures the content shown on the display (including content rendered by the GPU) in the virtual machine monitor and ARM TrustZoneâ€™s secure world layers. Hecaton enhances the security of device drivers (including GPU device drivers) by finding bugs in them using an efficient and effective reboot-free fuzzing scheme. SchrodinText protects textual content against a compromised OS, while allowing the OS to use the GPU to render its UI. These systems can collectively protect against various GPU-related attacks.          Last Modified: 10/02/2020       Submitted by: Ardalan Amiri Sani]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
