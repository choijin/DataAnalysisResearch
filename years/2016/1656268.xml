<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TTP: Small: A Kit for Exploring Databases under the Hood for Security, Forensics and Data Recovery</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>264838.00</AwardTotalIntnAmount>
<AwardAmount>312830</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Robert Beverly</SignBlockName>
<PO_EMAI>rbeverly@nsf.gov</PO_EMAI>
<PO_PHON>7032927068</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Database Management Systems (DBMS) have been used to store and process data in organizations for decades. Larger organizations use a variety of databases (commercial, open-source or custom-built) for different departments. However, neither users nor Database Administrators (DBAs) know exactly where the data is stored on the system or how it is processed. Most relational databases store internal data using universal principles that can be inferred and captured. This project will build tools that draw on these principles to offer x-ray vision into storage of many DBMS, illustrating exactly what is happening inside. This research benefits users from a variety of backgrounds: students, teachers, database users, DBAs and forensic analysts. Tools developed by the research team enable DBAs to inspect storage and observe any leaking data, thereby helping forensic analysts discover what happened in a database during an attack. Users are given the power to restore data that was deleted in the face of a critical corruption event and recover it. The same tools help students understand concepts of database operations by their use in introductory courses during which students observe security vulnerabilities. &lt;br/&gt;&lt;br/&gt;Some DBMS's provide profiling and recovery tools, but the functionality is always database-specific and varies wildly across different platforms. This research project standardizes basic profiling and data recovery capabilities and delivers a universal solution for most major relational DBMS. This solution includes recovery against corruption events that can cause data loss or incapacitate any modern DBMS; reconstruction of "unrecoverable" (i.e., discarded or deleted) data; and visualizing artifacts that offer insight to forensic analysts. The tools built in this project focus on providing easy-to-use and intuitive visualization of all deconstructed DBMS content from disk and RAM and recommend strategies for minimizing data leaks. Development and evaluation is done in collaboration with Information Technology (IT) professionals and academic DBAs as well as industry partners. This project also produces a suite of standard benchmarks that can quantify data leakage and recovery rates for different databases. Finally, the visualization tools and benchmarks are combined into training tutorials and student lessons both for database and security curriculums.</AbstractNarration>
<MinAmdLetterDate>09/07/2016</MinAmdLetterDate>
<MaxAmdLetterDate>02/20/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1656268</AwardID>
<Investigator>
<FirstName>Jacob</FirstName>
<LastName>Furst</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jacob D Furst</PI_FULL_NAME>
<EmailAddress>jfurst@cdm.depaul.edu</EmailAddress>
<PI_PHON>3123625158</PI_PHON>
<NSF_ID>000176791</NSF_ID>
<StartDate>09/07/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Alexander</FirstName>
<LastName>Rasin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Alexander Rasin</PI_FULL_NAME>
<EmailAddress>arasin@cdm.depaul.edu</EmailAddress>
<PI_PHON>3123627008</PI_PHON>
<NSF_ID>000637500</NSF_ID>
<StartDate>09/07/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>DePaul University</Name>
<CityName>Chicago</CityName>
<ZipCode>606042287</ZipCode>
<PhoneNumber>3123627388</PhoneNumber>
<StreetAddress>1 East Jackson Boulevard</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>045694130</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DE PAUL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>045694130</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[DePaul University]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606042341</ZipCode>
<StreetAddress><![CDATA[243 S. Wabash Av.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>025Z</Code>
<Text>SaTC: Secure and Trustworthy Cyberspace</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~264838</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<FUND_OBLG>2018~15996</FUND_OBLG>
<FUND_OBLG>2019~15996</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project was to develop algorithms and tools to investigate the activity within database management systems (DBMS) and to detect security breaches and data integrity violations. DBMS software (e.g., Oracle, PostgreSQL, SQLite) is designed to take over data processing, making it opaque and difficult to audit. Database security tools are typically available only in commercial DBMSes and are usually vendor-specific in their capability. When we started this project, database forensic tools were not available, with the exception of tools for SQLite (a lightweight open-source DBMS). Thus, our primary focus in this project was to create universal approaches that could generalize to security and forensic database analysis and lead to new, freely available software tools.&nbsp;</p> <p><strong>Generalized reverse-engineering:</strong>&nbsp;We have developed generalized algorithms for reverse-engineering DBMS storage, by parametrizing the storage layout and automating the detection of these parameters. We have shown our approach to be effective for all major relational row-store DBMSes (including Oracle, PostgreSQL, MS SQL Server, and Db2). Generalized storage parametrization has also led to significant insights into DBMS storage behavior and database-agnostic security and forensic audit tools.</p> <p><strong>Forensic tools:&nbsp;</strong>Our storage parametrization approach led us to developing DBCarver, a forensic software suite that could reconstruct database storage from any medium (e.g., disk, RAM), including deleted, fragmented or partially erased data. As a database-agnostic tool, DBCarver could support an indepent audit on a varitey of DBMSes, and by operating on read-only storage images it could further provide forensically-sound analysis. We have made DBCarver freely available to law enforcement and industry analysts. To further improve accessibility of our tools and to support the community, we have developed and released the following:</p> <p>1) A standardized database forensic storage format (DB3F) specification, which followed the same principles as well recognized forensic formats (e.g., AFF). We also included support for DB3F in DBCarver output.&nbsp;</p> <p>2) DF-Toolkit software that processes DB3F files to provide forensic artifact visualization, supports SQL-based forensic artifact querying, and implements several of our security audit algorithms through a generalized API. We further published a demo paper documenting the use of different functionality available in DF-Toolkit.</p> <p>3) An extensible benchmarking framework (SysGen) designed to evaluate forensic tools. SysGen uses virtual machines (VMs) to execute a specified workload scenario (consisting of an operating system, pre-installed software, and customized series of user queries) on a "clean room" VM image and then immediately capture an image of the VM. We have included sample representative workloads and images with our SysGen release, to allow for comparative testing of database forensic tools.&nbsp;</p> <p><strong>Security tools: </strong>Reverse-engineering DBMS storage further enabled audits of database state, to detect security breaches and integrity violations. By abstracting database storage representation, we were able to develop audit algorithms applicable to all supported DBMSes. We have considered and addressed two types of attack vectors: 1) A malicious database administrator who may choose to subvert database audit logs (by executing unlogged or "invisible" commands) and 2) A malicious system administrator who may not have DBMS&nbsp;privileges, but could tamper with the data by altering the underlying disk storage. In each case, our algorithms conducted an integrity validation, comparing the state of the data storage, the audit log records, and other auxiliary structures (e.g., indexes) to find and report inconsistencies. Our security analysis algorithms are supported by the API and integrated into our open-sourced DF-Toolkit and the associated tool demo.</p> <p><strong>Collaborations: </strong>Over the duration of the project, DBCarver and associated tools have been transitioned into practice, benefitting multiple active investigations (e.g., Chicago Regional Computer Forensics Lab, FireEye/Mandiant). The research in this project also led to our participation in an NSF I-Corps program, investigating the customization of our technology into an off-the-shelf (OTS) audit tool for databases. This effort served as the foundation for an NSF Partnerships for Innovation grant that will continue exploring commercialization of this OTS tool.</p><br> <p>            Last Modified: 03/04/2021<br>      Modified by: Alexander&nbsp;Rasin</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project was to develop algorithms and tools to investigate the activity within database management systems (DBMS) and to detect security breaches and data integrity violations. DBMS software (e.g., Oracle, PostgreSQL, SQLite) is designed to take over data processing, making it opaque and difficult to audit. Database security tools are typically available only in commercial DBMSes and are usually vendor-specific in their capability. When we started this project, database forensic tools were not available, with the exception of tools for SQLite (a lightweight open-source DBMS). Thus, our primary focus in this project was to create universal approaches that could generalize to security and forensic database analysis and lead to new, freely available software tools.   Generalized reverse-engineering: We have developed generalized algorithms for reverse-engineering DBMS storage, by parametrizing the storage layout and automating the detection of these parameters. We have shown our approach to be effective for all major relational row-store DBMSes (including Oracle, PostgreSQL, MS SQL Server, and Db2). Generalized storage parametrization has also led to significant insights into DBMS storage behavior and database-agnostic security and forensic audit tools.  Forensic tools: Our storage parametrization approach led us to developing DBCarver, a forensic software suite that could reconstruct database storage from any medium (e.g., disk, RAM), including deleted, fragmented or partially erased data. As a database-agnostic tool, DBCarver could support an indepent audit on a varitey of DBMSes, and by operating on read-only storage images it could further provide forensically-sound analysis. We have made DBCarver freely available to law enforcement and industry analysts. To further improve accessibility of our tools and to support the community, we have developed and released the following:  1) A standardized database forensic storage format (DB3F) specification, which followed the same principles as well recognized forensic formats (e.g., AFF). We also included support for DB3F in DBCarver output.   2) DF-Toolkit software that processes DB3F files to provide forensic artifact visualization, supports SQL-based forensic artifact querying, and implements several of our security audit algorithms through a generalized API. We further published a demo paper documenting the use of different functionality available in DF-Toolkit.  3) An extensible benchmarking framework (SysGen) designed to evaluate forensic tools. SysGen uses virtual machines (VMs) to execute a specified workload scenario (consisting of an operating system, pre-installed software, and customized series of user queries) on a "clean room" VM image and then immediately capture an image of the VM. We have included sample representative workloads and images with our SysGen release, to allow for comparative testing of database forensic tools.   Security tools: Reverse-engineering DBMS storage further enabled audits of database state, to detect security breaches and integrity violations. By abstracting database storage representation, we were able to develop audit algorithms applicable to all supported DBMSes. We have considered and addressed two types of attack vectors: 1) A malicious database administrator who may choose to subvert database audit logs (by executing unlogged or "invisible" commands) and 2) A malicious system administrator who may not have DBMS privileges, but could tamper with the data by altering the underlying disk storage. In each case, our algorithms conducted an integrity validation, comparing the state of the data storage, the audit log records, and other auxiliary structures (e.g., indexes) to find and report inconsistencies. Our security analysis algorithms are supported by the API and integrated into our open-sourced DF-Toolkit and the associated tool demo.  Collaborations: Over the duration of the project, DBCarver and associated tools have been transitioned into practice, benefitting multiple active investigations (e.g., Chicago Regional Computer Forensics Lab, FireEye/Mandiant). The research in this project also led to our participation in an NSF I-Corps program, investigating the customization of our technology into an off-the-shelf (OTS) audit tool for databases. This effort served as the foundation for an NSF Partnerships for Innovation grant that will continue exploring commercialization of this OTS tool.       Last Modified: 03/04/2021       Submitted by: Alexander Rasin]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
