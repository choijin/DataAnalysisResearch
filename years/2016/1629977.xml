<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CI-P: Collaborative Research: Planning and Prototyping a Community-Wide Software Architecture Instrument</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2016</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>70000.00</AwardTotalIntnAmount>
<AwardAmount>70000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The effort and cost of maintenance dominate activities in a software system's lifecycle. Over the past two decades, software architecture research has yielded many tools and techniques for understanding and maintaining the architectures of software systems. However, empirical research and technology transfer are impeded by myriad disjoint environments, lack of a shared research infrastructure, the costs of making tools robust, and lack of datasets needed to conduct architecture-oriented empirical research. Consequently, researchers and practitioners often repeat each other's efforts, thus limiting potential breakthroughs. This projects develops the plans and an initial prototype for an integration framework that assembles architecture-related techniques to enable maintenance-focused empirical research. The framework revolutionizes the future of software systems research and development. It facilitates the discovery and adoption of cutting-edge techniques and tools, and fosters much more effective university-industry collaboration than exists today.&lt;br/&gt; &lt;br/&gt;This planning project elicits and prioritizes the requirements, collects the community feedback, and develops a prototype for the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework. SAIN comprises three principal components: (1) a catalogued library of tools for reverse engineering and analyzing software architectures; (2) a plug-and-play instrument for integrating the techniques to enable architecture-oriented empirical studies; and (3) a repository of Web-accessible software-architecture datasets and benchmarks. This planning project develops a proof-of-concept solution that demonstrates the feasibility of the proposed instrument, as well as the research activities enabled by this instrument. SAIN provides an effective, community-wide platform for software architecture research and practice through continuous integration of diverse tools. It supports architecture's central role in a broad range of software engineering activities. The framework comprises the first repository hosting large numbers of recovered architectures to enable researchers to effectively evaluate their techniques, and is aimed at reinvigorating empirical research in software architecture.</AbstractNarration>
<MinAmdLetterDate>08/08/2016</MinAmdLetterDate>
<MaxAmdLetterDate>08/08/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1629977</AwardID>
<Investigator>
<FirstName>Nenad</FirstName>
<LastName>Medvidovic</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nenad Medvidovic</PI_FULL_NAME>
<EmailAddress>neno@usc.edu</EmailAddress>
<PI_PHON>2137405579</PI_PHON>
<NSF_ID>000485161</NSF_ID>
<StartDate>08/08/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900890001</ZipCode>
<StreetAddress><![CDATA[3720 S. Flower St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA37</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7359</Code>
<Text>CCRI-CISE Cmnty Rsrch Infrstrc</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7359</Code>
<Text>COMPUTING RES INFRASTRUCTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~70000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 10.0px Helvetica} --> <p class="p1">A software system&rsquo;s architecture is the primary determinant of the system&rsquo;s key properties. Highly successful software solutions are successful because of their architectures first and foremost. Similarly, many well-known software failures are caused by inadequate architectures. One of the biggest challenges software engineers face is that the architectures of many systems are not explicitly documented&#894; instead, those architectures are &ldquo;hidden&rdquo; in the systems&rsquo; implementation details. Engineers are then forced to guess the architectural implications of their choices and decisions during system maintenance and evolution.</p> <!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 10.0px Helvetica} --> <p class="p1">This project has engaged the US and world-wide software engineering communities to provide a starting point for dealing with this problem. The goal of the project was to collect a set of requirements for the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework for assembling architecture-related techniques and tools. The goal of SAIN is to enable empirical research in the area of software maintenance, where software architecture plays a central role. By extension, this would alleviate many of the problems software engineers currently face.</p> <p class="p1">To collect the requirements for SAIN, the principal investigators conducted several questionnaires and surveys of both researchers and practitioners. Furthermore, the PIs held four workshops over a 2.5-year span. In the process, the PIs collected and organized into different categories nearly 90 existing software architectur tools. The resulting requirements and tool catalog are a novel contribution of this project, and provide a critical starting point for constructing SAIN.</p><br> <p>            Last Modified: 09/08/2019<br>      Modified by: Nenad&nbsp;Medvidovic</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A software system?s architecture is the primary determinant of the system?s key properties. Highly successful software solutions are successful because of their architectures first and foremost. Similarly, many well-known software failures are caused by inadequate architectures. One of the biggest challenges software engineers face is that the architectures of many systems are not explicitly documented&#894; instead, those architectures are "hidden" in the systems? implementation details. Engineers are then forced to guess the architectural implications of their choices and decisions during system maintenance and evolution.  This project has engaged the US and world-wide software engineering communities to provide a starting point for dealing with this problem. The goal of the project was to collect a set of requirements for the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework for assembling architecture-related techniques and tools. The goal of SAIN is to enable empirical research in the area of software maintenance, where software architecture plays a central role. By extension, this would alleviate many of the problems software engineers currently face. To collect the requirements for SAIN, the principal investigators conducted several questionnaires and surveys of both researchers and practitioners. Furthermore, the PIs held four workshops over a 2.5-year span. In the process, the PIs collected and organized into different categories nearly 90 existing software architectur tools. The resulting requirements and tool catalog are a novel contribution of this project, and provide a critical starting point for constructing SAIN.       Last Modified: 09/08/2019       Submitted by: Nenad Medvidovic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
