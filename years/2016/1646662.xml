<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Real-time Enforcement of Content Security Policy upon Real-world Websites</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>94718.00</AwardTotalIntnAmount>
<AwardAmount>94718</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Cross-site scripting (XSS) vulnerabilities -- though being known for more than ten years -- are still one of the most commonly-found web application vulnerabilities in the wild. Among all the defenses proposed by researchers, one widely-adopted approach is called Content Security Policy (CSP) -- which has been standardized by W3C and adopted by all major commercial browsers, such as Google Chrome, Internet Explorer, Safari, and Firefox.  Though being successful in the client-side adoption, the server-side adoption of CSP is worrisome: According to a recent Internet-scale survey of 1M websites, at the time of the study, only 2% of top 100 Alexa websites enabled CSP, and 0.00086% of 900,000 least popular sites did so.  This project is creating a backend-language-agnostic approach to help CSP's deployment at the server side, which automatically transforms existing real-world web contents to comply with CSP. &lt;br/&gt;&lt;br/&gt;The key insight of the project is that although web scripts may occur in different formats, contain real-time, user-related information, or be generated dynamically, these scripts are originated from the server and generated from certain templates. Therefore, the project can group scripts based on their similarities and infer the templates behind the scripts. Specifically, there are two types of scripts to handle: inline scripts and dynamic scripts.  For the former, the project generalizes the script structures -- such as for loop and if statement -- as well as the type information of each object as templates and only allows scripts that matches the templates.  For the latter, in addition to the matching with templates, the project instantiates these templates in runtime.</AbstractNarration>
<MinAmdLetterDate>08/01/2016</MinAmdLetterDate>
<MaxAmdLetterDate>08/01/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1646662</AwardID>
<Investigator>
<FirstName>Yinzhi</FirstName>
<LastName>Cao</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yinzhi Cao</PI_FULL_NAME>
<EmailAddress>ycao43@jhu.edu</EmailAddress>
<PI_PHON>4105166718</PI_PHON>
<NSF_ID>000689464</NSF_ID>
<StartDate>08/01/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Lehigh University</Name>
<CityName>Bethlehem</CityName>
<ZipCode>180153005</ZipCode>
<PhoneNumber>6107583021</PhoneNumber>
<StreetAddress>Alumni Building 27</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>808264444</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LEHIGH UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>068570936</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Lehigh University]]></Name>
<CityName>Bethlehem</CityName>
<StateCode>PA</StateCode>
<ZipCode>180153005</ZipCode>
<StreetAddress><![CDATA[19 Memorial Drive West]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~94718</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The one-year EAGER project conducts a research study about how to deploy content security policy, a modern cross-site scripting defense, upon real-world websites. Our findings show that an automatic generated template, called general abstract syntax tree (gAST), can be used to match real-world website scripts and prevent attacker-injected ones. &nbsp;The project outcome shows that the proposed technique is effective, efficient and scalable. &nbsp;</p> <p>The broader impacts of the EAGER project involve both research and education improvement. &nbsp;</p> <p>Research-wise, we publish a research paper about our newly proposed gAST technique and create a demo website (http://dod.cs.northwestern.edu/xpan/cspautogen/DynamicScriptsDemo.html) so that the research community can utilize. &nbsp;To the best of our knowledge, several research group has already started investigating and using such technique. &nbsp;Broadly speaking, we believe that the proposed gAST can be used in various areas of Web Security to deal with dynamically generated scripts, including these via eval, document.write and innerHTML.&nbsp;</p> <p>Education-wise, the PI has created a new course, called "cyber defesense and offese" at Lehigh University, which drew attention from many undergraduates and graduate students. &nbsp;The PI spent two weeks on Web Security including content security policy, and conveyed the core idea in Web Security to the students. &nbsp;The students also read several research papers about the recent advance.&nbsp;</p><br> <p>            Last Modified: 09/01/2017<br>      Modified by: Yinzhi&nbsp;Cao</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The one-year EAGER project conducts a research study about how to deploy content security policy, a modern cross-site scripting defense, upon real-world websites. Our findings show that an automatic generated template, called general abstract syntax tree (gAST), can be used to match real-world website scripts and prevent attacker-injected ones.  The project outcome shows that the proposed technique is effective, efficient and scalable.    The broader impacts of the EAGER project involve both research and education improvement.    Research-wise, we publish a research paper about our newly proposed gAST technique and create a demo website (http://dod.cs.northwestern.edu/xpan/cspautogen/DynamicScriptsDemo.html) so that the research community can utilize.  To the best of our knowledge, several research group has already started investigating and using such technique.  Broadly speaking, we believe that the proposed gAST can be used in various areas of Web Security to deal with dynamically generated scripts, including these via eval, document.write and innerHTML.   Education-wise, the PI has created a new course, called "cyber defesense and offese" at Lehigh University, which drew attention from many undergraduates and graduate students.  The PI spent two weeks on Web Security including content security policy, and conveyed the core idea in Web Security to the students.  The students also read several research papers about the recent advance.        Last Modified: 09/01/2017       Submitted by: Yinzhi Cao]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
