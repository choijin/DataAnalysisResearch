<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Collaborative: Improving Android Security with Dynamic Slicing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Mobile devices have been very successful and continue to expand their user base.  However, the very features that have made these devices successful, e.g., rich sensor inputs (GPS, camera, microphone) and continuous Internet connectivity, have also made the devices a favorite target for attackers.  Attacks can have many negative consequences, from stealing users' secrets to spying on the users or installing viruses that render devices inoperable.  This project will develop dynamic slicing techniques so that developers and researchers will be able to gain effective insights into device and app behavior, including malicious apps; this will make it easier to construct secure apps and to find/eliminate malicious behavior, which in turn will benefit mobile device users. Undergraduate and graduate students will be introduced to new approaches to smartphone security, which will make students better equipped for tackling emerging software research and development challenges.&lt;br/&gt;&lt;br/&gt;Dynamic slicing (analyzing an execution to identify relevant code and data dependences) is a particularly effective technique for addressing a wide range of security problems. This project will develop a dynamic slicer for Android and then use the slicer, as well as its integration with other existing tools, for three main security applications.  First, improving dynamic taint analysis via efficient, effective, integrated control/data slicing. Second, finding relevant parts in the input to identity which sensor stream and part thereof are responsible for security-relevant behavior, e.g., attack, crash, botnet operation, or use of anti-detection techniques. Third,  Undo Computing, in particular combining slicing with record-and-replay to support undo computing on Android.  These lines of work are expected to lead to advances in: security, e.g., precise and effective dynamic taint tracking, finding leaks due to control dependences, understanding botnet behavior, principled discovery of anti-detection techniques, separating benign from malicious state changes; and program analysis, e.g., slicing programs that are event-oriented or rely heavily on inter-process communication; computing input/data/code interdependences in the presence of high-throughput event streams.</AbstractNarration>
<MinAmdLetterDate>06/03/2016</MinAmdLetterDate>
<MaxAmdLetterDate>06/03/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1617424</AwardID>
<Investigator>
<FirstName>Rajiv</FirstName>
<LastName>Gupta</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rajiv Gupta</PI_FULL_NAME>
<EmailAddress>gupta@cs.ucr.edu</EmailAddress>
<PI_PHON>9518272558</PI_PHON>
<NSF_ID>000077772</NSF_ID>
<StartDate>06/03/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Riverside</Name>
<CityName>RIVERSIDE</CityName>
<ZipCode>925210217</ZipCode>
<PhoneNumber>9518275535</PhoneNumber>
<StreetAddress>Research &amp; Economic Development</StreetAddress>
<StreetAddress2><![CDATA[245 University Office Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>44</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA44</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>627797426</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Riverside]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>925210001</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>41</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA41</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><br />The Android framework is widely used as millions of mobile Android devices are being used by people. Due to the complex interactions between a mobile App and the Android Framework, debugging unexpected behavior of an App is a challenging task. Dynamic Slicing is a powerful technique for accurately capturing the runtime behavior of an executing program, including its interactions with other entities. It allows the programmer to isolate the cause of unexpected behavior and hence understand and remove the error. Although dynamic slicing is very powerful, it is also very expensive causing slowdowns in running applications. Since mobile App behavior can be altered by delays introduced by operations required by dynamic slicing, bring the power of dynamic slicing to Android has been a challenge. In this project, through a novel combination of static and dynamic techniques, we have developed a dynamic slicing for Android that does not interfere with the runtime behavior of an App. Thus, it accurately captures the Apps behavior which can then be used to understand program behavior. The tool was released via github so it is available for use and extension by other researchers.<br /><br />The utility of the Android dynamic slicing tool has been demonstrated by showing its effectiveness in finding parts of the input that trigger faulty behavior, regression testing, and locating faults and vulnerabilities. New applications of dynamic slicing explored include finding discrepancies in mobile App and its website counterpart as these discrepancies give rise to exploitable vulnerabilities, detecting missing progress indicators in Apps, and transitioning mobile Apps to adopt Android's new permission model. Finally, the lessons learned from dealing with concurrency related issues in Android have also been applied in other contexts including testing of parallel programs running on clusters and GPUs. <br /><br />A PhD student who carried out his dissertation work on this project has graduated. The student is currently employed at an institution that is engaged in research in the field of healthcare delivery. The training received under this project has enabled the student to contribute to the development of an App that runs a smartwatch and enables early detection of COVID-19.</p><br> <p>            Last Modified: 08/30/2020<br>      Modified by: Rajiv&nbsp;Gupta</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  The Android framework is widely used as millions of mobile Android devices are being used by people. Due to the complex interactions between a mobile App and the Android Framework, debugging unexpected behavior of an App is a challenging task. Dynamic Slicing is a powerful technique for accurately capturing the runtime behavior of an executing program, including its interactions with other entities. It allows the programmer to isolate the cause of unexpected behavior and hence understand and remove the error. Although dynamic slicing is very powerful, it is also very expensive causing slowdowns in running applications. Since mobile App behavior can be altered by delays introduced by operations required by dynamic slicing, bring the power of dynamic slicing to Android has been a challenge. In this project, through a novel combination of static and dynamic techniques, we have developed a dynamic slicing for Android that does not interfere with the runtime behavior of an App. Thus, it accurately captures the Apps behavior which can then be used to understand program behavior. The tool was released via github so it is available for use and extension by other researchers.  The utility of the Android dynamic slicing tool has been demonstrated by showing its effectiveness in finding parts of the input that trigger faulty behavior, regression testing, and locating faults and vulnerabilities. New applications of dynamic slicing explored include finding discrepancies in mobile App and its website counterpart as these discrepancies give rise to exploitable vulnerabilities, detecting missing progress indicators in Apps, and transitioning mobile Apps to adopt Android's new permission model. Finally, the lessons learned from dealing with concurrency related issues in Android have also been applied in other contexts including testing of parallel programs running on clusters and GPUs.   A PhD student who carried out his dissertation work on this project has graduated. The student is currently employed at an institution that is engaged in research in the field of healthcare delivery. The training received under this project has enabled the student to contribute to the development of an App that runs a smartwatch and enables early detection of COVID-19.       Last Modified: 08/30/2020       Submitted by: Rajiv Gupta]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
