<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AitF: The Fuzzy Log: A Unifying Abstraction for the Theory and Practice of Distributed Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2016</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>600000.00</AwardTotalIntnAmount>
<AwardAmount>600000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The Fuzzy Log project seeks to democratize the design and development of complex distributed systems, accelerating innovation by allowing developers to focus on high-level application functionality instead of low-level protocol details. Examples of such complex systems include Software Defined Network controllers for the network, filesystem namespaces for storage, schedulers and allocators for big data run-times, and general-purpose coordination services.  These distributed systems require large numbers of highly trained engineers and scientists to construct and operate them. Simplifying the design, development, deployment and debugging of such systems can drastically reduce the cost to create and operate massively scalable cloud services that are reliable and responsive. More broadly, the Fuzzy Log project will also act as an educational gestalt that combines distributed systems and theory to improve the state of the art in cloud computing.&lt;br/&gt;&lt;br/&gt;A Fuzzy Log is a partially ordered shared log that multiple clients can append to and read from concurrently. As in other shared log designs, applications can extract properties such as consistency, durability, and concurrency control from the Fuzzy Log. However, unlike a conventional shared log, a Fuzzy Log does not impose a total order over all entries. When clients append to the log, they specify dependencies to define a partial order; when they read from the log, the system returns entries in some sequence satisfying the partial order. Fuzzy Log applications are simple to design, implement, and debug, with full-fledged distributed systems realized in hundreds of lines of code. Fuzzy Log applications are also fast and scalable, extracting parallelism from workloads while imposing order only when strictly necessary.</AbstractNarration>
<MinAmdLetterDate>08/16/2016</MinAmdLetterDate>
<MaxAmdLetterDate>07/07/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1637385</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Aspnes</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James Aspnes</PI_FULL_NAME>
<EmailAddress>aspnes@cs.yale.edu</EmailAddress>
<PI_PHON>2035339862</PI_PHON>
<NSF_ID>000193087</NSF_ID>
<StartDate>08/16/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Zhong</FirstName>
<LastName>Shao</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zhong Shao</PI_FULL_NAME>
<EmailAddress>zhong.shao@yale.edu</EmailAddress>
<PI_PHON>2034326828</PI_PHON>
<NSF_ID>000201856</NSF_ID>
<StartDate>07/07/2018</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Abadi</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel J Abadi</PI_FULL_NAME>
<EmailAddress>abadi@umd.edu</EmailAddress>
<PI_PHON>3014052662</PI_PHON>
<NSF_ID>000508003</NSF_ID>
<StartDate>08/16/2016</StartDate>
<EndDate>07/24/2017</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Mahesh</FirstName>
<LastName>Balakrishnan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mahesh Balakrishnan</PI_FULL_NAME>
<EmailAddress>mahesh.balakrishnan@yale.edu</EmailAddress>
<PI_PHON>2034321246</PI_PHON>
<NSF_ID>000702029</NSF_ID>
<StartDate>08/16/2016</StartDate>
<EndDate>07/07/2018</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Yale University</Name>
<CityName>New Haven</CityName>
<ZipCode>065208327</ZipCode>
<PhoneNumber>2037854689</PhoneNumber>
<StreetAddress>Office of Sponsored Projects</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 208327]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CT03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>043207562</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>YALE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>043207562</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Yale University]]></Name>
<CityName>New Haven</CityName>
<StateCode>CT</StateCode>
<ZipCode>065208285</ZipCode>
<StreetAddress><![CDATA[AKWatson Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CT03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7239</Code>
<Text>Algorithms in the Field</Text>
</ProgramElement>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~600000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-a6c9e3e8-7fff-7325-1b1c-7fbfdebf542e"> </span></p> <p dir="ltr"><span>The FuzzyLog project investigated new abstractions for designing, implementing, and verifying distributed systems.&nbsp;</span></p> <p>&nbsp;</p> <p dir="ltr"><span>The FuzzyLog is a partially ordered shared log abstraction. In the past few years, shared logs have enormously simplified the construction of distributed systems by hiding the complexity of asynchrony and failures behind a simple, data-centric abstraction. However, this simplicity comes at the cost of scaling and availability, since shared logs require all commands in a distributed system to be totally ordered. The FuzzyLog advances this state of the art by providing the simplicity of a shared log while allowing for the partial ordering of commands. FuzzyLog applications can scale linearly and tolerate network partitions while retaining simple code and design. The FuzzyLog system was presented at the OSDI 2018 conference.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>While systems such as the FuzzyLog make it easier to build distributed applications, their own implementations are complex and difficult to evolve. To make it simpler to build and reason about such implementations, we proposed the Write-Once Register (WOR), which is a programming and theoretical abstraction for hiding the logic of a single consensus slot. WORs can be combined in different ways to implement systems such as shared logs and fault-tolerant atomic commit. We proposed a system called WormSpace that provides the WOR as a first-class programming abstraction; this work was presented at the SoCC 2019 conference.</span><span><br /></span><span><br /></span><span>The abstractions proposed in the FuzzyLog project were successful in providing a common collaborative platform for systems practitioners and theoreticians. The FuzzyLog system introduces new distributed algorithms for transaction ordering that advance the state of the art. The WormSpace system is the first fully verified distributed systems stack from the application to the operating system.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>In terms of broader impact, the abstractions in the FuzzyLog project are already beginning to see adoption in real production systems. Systems are increasingly distributed by default, as we move towards a mix of edge devices and powerful cloud platforms to serve applications ranging from the mundane to the mission-critical. In such an environment, the inherent complexity of distributed coordination results in systems that are slow to develop and evolve, and prone to failures and inconsistency. By simplifying the construction and formal verification of distributed systems, we accelerate innovation while still providing extremely high levels of consistency and fault-tolerance.</span></p> <div><span><br /></span></div> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/13/2020<br>      Modified by: James&nbsp;Aspnes</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   The FuzzyLog project investigated new abstractions for designing, implementing, and verifying distributed systems.     The FuzzyLog is a partially ordered shared log abstraction. In the past few years, shared logs have enormously simplified the construction of distributed systems by hiding the complexity of asynchrony and failures behind a simple, data-centric abstraction. However, this simplicity comes at the cost of scaling and availability, since shared logs require all commands in a distributed system to be totally ordered. The FuzzyLog advances this state of the art by providing the simplicity of a shared log while allowing for the partial ordering of commands. FuzzyLog applications can scale linearly and tolerate network partitions while retaining simple code and design. The FuzzyLog system was presented at the OSDI 2018 conference.    While systems such as the FuzzyLog make it easier to build distributed applications, their own implementations are complex and difficult to evolve. To make it simpler to build and reason about such implementations, we proposed the Write-Once Register (WOR), which is a programming and theoretical abstraction for hiding the logic of a single consensus slot. WORs can be combined in different ways to implement systems such as shared logs and fault-tolerant atomic commit. We proposed a system called WormSpace that provides the WOR as a first-class programming abstraction; this work was presented at the SoCC 2019 conference.  The abstractions proposed in the FuzzyLog project were successful in providing a common collaborative platform for systems practitioners and theoreticians. The FuzzyLog system introduces new distributed algorithms for transaction ordering that advance the state of the art. The WormSpace system is the first fully verified distributed systems stack from the application to the operating system.    In terms of broader impact, the abstractions in the FuzzyLog project are already beginning to see adoption in real production systems. Systems are increasingly distributed by default, as we move towards a mix of edge devices and powerful cloud platforms to serve applications ranging from the mundane to the mission-critical. In such an environment, the inherent complexity of distributed coordination results in systems that are slow to develop and evolve, and prone to failures and inconsistency. By simplifying the construction and formal verification of distributed systems, we accelerate innovation while still providing extremely high levels of consistency and fault-tolerance.               Last Modified: 01/13/2020       Submitted by: James Aspnes]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
