<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Automatically Localizing Functional Faults In Deployed Software Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/15/2016</AwardEffectiveDate>
<AwardExpirationDate>06/30/2021</AwardExpirationDate>
<AwardTotalIntnAmount>350896.00</AwardTotalIntnAmount>
<AwardAmount>350896</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Even though most software applications are tested before they are released to customers, these applications still contain production (or field) functional faults that result in field failures, which have costly consequences and are expensive to fix. Due to their limitations, existing automatic debugging approaches do not adequately isolate and identify production faults for field failures.  Prior interviews of test managers and studies of bug repositories revealed that programmers spent close to 50% of their time on average to localize production faults, which is a major factor in software system and software project failures. The educational innovation of this project is in developing an integrated approach to teaching by applying probabilistic graphical models to software engineering problems.&lt;br/&gt; &lt;br/&gt;The goal of this proposal is to create a novel theoretical foundation that allows stakeholders to predict and localize functional faults for field failures automatically with a high degree of precision using symptoms only (e.g., the sign of the output value is incorrect) and without instrumenting deployed applications to collect runtime data, thus avoiding the deployment runtime overhead, and without having any tests with oracles to uncover the fault, without performing contrasting successful and failed runs, and without collecting runtime data from field failures. With this theoretical foundation, researchers can collaborate more closely in planning the future of fault localization by expanding each other's results based on probabilistic graphical models as common abstractions.  Based only on failure symptoms occurring during deployment of a given application, the location of faults in the source code will be determined, as well as navigation paths from likely faults to the code that can fix these faults. The project will create, evaluate and deploy: (1) new theories, algorithms and techniques for automatically obtaining probabilistic graphical models that approximate specific fault models for software applications; (2) a novel way in which model-based differential diagnoses are used to perform abductive reasoning to localize production faults given symptoms for field failures, and (3) a comprehensive experimentation framework for evaluating the effectiveness of the algorithms for localizing production faults. In addition to localizing production functional faults, the implementation can be used as a broad experimental platform for creating and testing hypotheses for various software debugging and testing ideas, e.g., for guiding test selection and prioritization.</AbstractNarration>
<MinAmdLetterDate>07/08/2016</MinAmdLetterDate>
<MaxAmdLetterDate>07/08/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1615563</AwardID>
<Investigator>
<FirstName>Mark</FirstName>
<LastName>Grechanik</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mark Grechanik</PI_FULL_NAME>
<EmailAddress>drmark@uic.edu</EmailAddress>
<PI_PHON>3129969406</PI_PHON>
<NSF_ID>000516683</NSF_ID>
<StartDate>07/08/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606124305</ZipCode>
<PhoneNumber>3129962862</PhoneNumber>
<StreetAddress>809 S. Marshfield Avenue</StreetAddress>
<StreetAddress2><![CDATA[MB 502, M/C 551]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>098987217</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Chicago]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606127301</ZipCode>
<StreetAddress><![CDATA[809 S MARSHFIELD RM 608]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~350896</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><br />Imagine the world where each human has a distinct anatomy and reacts to viruses and bacteria in ways that are totally different from other humans. The medical science, as we know it, will cease to exist. When we get sick, we will pray that the medical staff will be able to understand the nature of our diseases that uniquely affect each individual and ways to cure them, which will be specific for each human. Does it sound horrible?</p> <p><br />This is the state of the art in software engineering, and very few problems impact people more negatively than field failures, where deployed software behaves incorrectly. Just like distinct human anatomies would prevent medical professionals from quickly diagnosing diseases using symptoms, production fault localisation requires a huge effort from software professionals, since each software application has its own unique structure and programmers must spend a lot of time to understand it even for smaller applications. Not only do field failures zap every shred of customer&rsquo;s confidence in software applications, but also they cost dearly, sometimes in human lives, since software applications support all aspects of our lives.</p> <p><br /> Despite hundreds of different approaches for fault localisation, the problem of localising production&#8232;faults for field failures automatically had been unsolved until we introduced our approach. A problem is that production faults are not known by definition when the application is deployed, therefore running existing test suites is not applicable. Only when field failures occur in a deployed application, programmers start analysing the symptoms to determine what faults can cause them. The number of the possibilities of what application&rsquo;s statements or combinations thereof can cause faults is enormous even for small programs. Time to fix is critical, since the applications&rsquo; downtime often costs thousands of dollars per minute. Currently, there is no solution that can automatically localise functional production faults in deployed software applications with a high degree of precision using only symptoms of the field failures and input values and without deploying instrumented applications and without collecting any runtime data and without having any tests with oracles, without performing successful and failed runs, and without collecting large amounts of state information from field failures. To the best of our knowledge, ours is the first solution to this big and important problem.</p> <p><br />The PI has accomplished multiple goals and objectives that fall in three main categories: implementing the AL5 architecture and making it efficient, evaluating it using a number of open-source applications and seeding the creation of a new subfied of fault localization where the effects are studied and applied of speculative application specific fault modeling using PGMs. Most importantly, we concentrated on localising production faults for field failures, although there are many more applications of this new abstraction. <br /><br />Our approach disrupted accepted theories of software bug localization. A main way of current thinking in automated debugging is to start working on fault localisation when a failure is observed. One of our significant results is that we showed that it was possible to reverse this thinking by proactively modeling possible faults and reverse-engineering the behavior of the application in the presence of these faults. Given an incomplete nature of this exercise, we summarised this fault model in a PGM offline, i.e., this exercise is done independently and in parallel to deploying software applications and this exercise does not interfere with customers who use this application. Given resources that are needed to make this idea work, it is highly unlikely that it was possible even five years ago. Only recently, with the advent of powerful cloud computing infrastructures it becomes possible to realise this idea. We expect that research direction of many projects in automated debugging will change to utilize the ideas from &alpha;5, so that new algorithms and approaches for fault localisation and quality prediction for software applications will developed using &alpha;5.<br /><br />As part of the work on this project five graduate RAs were trained and two RAs defended their master theses. Specifically, Mr.Davide Pagano defended his master thesis on An Experimental Framework For Localizing Field Failures in Deployed Software Applications. In 2019 United States Patent 10,296,443 was granted to the PI on automatically predicting faults that caused software failures using a Markov logic network thus confirming the practicality of our approach and its effectiveness. In addition a number of papers, master theses and reports were published and talks were given at conferences and workshops. The work on this topic does not stop and we will continue to produce publications from the data that we have collected and will collect as part of our experimental evaluation.</p><br> <p>            Last Modified: 07/03/2021<br>      Modified by: Mark&nbsp;Grechanik</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Imagine the world where each human has a distinct anatomy and reacts to viruses and bacteria in ways that are totally different from other humans. The medical science, as we know it, will cease to exist. When we get sick, we will pray that the medical staff will be able to understand the nature of our diseases that uniquely affect each individual and ways to cure them, which will be specific for each human. Does it sound horrible?   This is the state of the art in software engineering, and very few problems impact people more negatively than field failures, where deployed software behaves incorrectly. Just like distinct human anatomies would prevent medical professionals from quickly diagnosing diseases using symptoms, production fault localisation requires a huge effort from software professionals, since each software application has its own unique structure and programmers must spend a lot of time to understand it even for smaller applications. Not only do field failures zap every shred of customer’s confidence in software applications, but also they cost dearly, sometimes in human lives, since software applications support all aspects of our lives.    Despite hundreds of different approaches for fault localisation, the problem of localising production&#8232;faults for field failures automatically had been unsolved until we introduced our approach. A problem is that production faults are not known by definition when the application is deployed, therefore running existing test suites is not applicable. Only when field failures occur in a deployed application, programmers start analysing the symptoms to determine what faults can cause them. The number of the possibilities of what application’s statements or combinations thereof can cause faults is enormous even for small programs. Time to fix is critical, since the applications’ downtime often costs thousands of dollars per minute. Currently, there is no solution that can automatically localise functional production faults in deployed software applications with a high degree of precision using only symptoms of the field failures and input values and without deploying instrumented applications and without collecting any runtime data and without having any tests with oracles, without performing successful and failed runs, and without collecting large amounts of state information from field failures. To the best of our knowledge, ours is the first solution to this big and important problem.   The PI has accomplished multiple goals and objectives that fall in three main categories: implementing the AL5 architecture and making it efficient, evaluating it using a number of open-source applications and seeding the creation of a new subfied of fault localization where the effects are studied and applied of speculative application specific fault modeling using PGMs. Most importantly, we concentrated on localising production faults for field failures, although there are many more applications of this new abstraction.   Our approach disrupted accepted theories of software bug localization. A main way of current thinking in automated debugging is to start working on fault localisation when a failure is observed. One of our significant results is that we showed that it was possible to reverse this thinking by proactively modeling possible faults and reverse-engineering the behavior of the application in the presence of these faults. Given an incomplete nature of this exercise, we summarised this fault model in a PGM offline, i.e., this exercise is done independently and in parallel to deploying software applications and this exercise does not interfere with customers who use this application. Given resources that are needed to make this idea work, it is highly unlikely that it was possible even five years ago. Only recently, with the advent of powerful cloud computing infrastructures it becomes possible to realise this idea. We expect that research direction of many projects in automated debugging will change to utilize the ideas from &alpha;5, so that new algorithms and approaches for fault localisation and quality prediction for software applications will developed using &alpha;5.  As part of the work on this project five graduate RAs were trained and two RAs defended their master theses. Specifically, Mr.Davide Pagano defended his master thesis on An Experimental Framework For Localizing Field Failures in Deployed Software Applications. In 2019 United States Patent 10,296,443 was granted to the PI on automatically predicting faults that caused software failures using a Markov logic network thus confirming the practicality of our approach and its effectiveness. In addition a number of papers, master theses and reports were published and talks were given at conferences and workshops. The work on this topic does not stop and we will continue to produce publications from the data that we have collected and will collect as part of our experimental evaluation.       Last Modified: 07/03/2021       Submitted by: Mark Grechanik]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
