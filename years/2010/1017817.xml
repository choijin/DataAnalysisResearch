<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>RI: Small: RUI: Evolution of Robustly Intelligent Computational Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>423288.00</AwardTotalIntnAmount>
<AwardAmount>423288</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Todd Leen</SignBlockName>
<PO_EMAI>tleen@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project is extending the science of automatic programming, using concepts derived from evolutionary biology and software engineering, to permit the evolution of general and robust computational systems with multiple interacting functionalities and interfaces. The project uses the PI's Push programming language as the target language for evolved programs. Push programs are syntactically unconstrained, which facilitates evolution, but they can make use of arbitrary control and data structures; this supports the evolution of complex, modular programs.&lt;br/&gt;&lt;br/&gt;This project will add new features to the Push language and develop new methods that allow requirements specifications and tests, of the type employed in software engineering practice, to be transformed into fitness functions that drive evolution. The cumulative effect of these extensions will be to support the evolution of significantly more general and robust computational systems.&lt;br/&gt;&lt;br/&gt;The effectiveness of the technologies developed in this project will be demonstrated in two application areas: the automatic programming of small but complete productivity software applications and the automatic programming of robustly intelligent software agents for complex, time-varying economic games. The project is contributing to long-standing goals in computer science of building robustly intelligent systems and automatic synthesis of useful computer programs.</AbstractNarration>
<MinAmdLetterDate>08/19/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/19/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017817</AwardID>
<Investigator>
<FirstName>Lee</FirstName>
<LastName>Spector</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Lee Spector</PI_FULL_NAME>
<EmailAddress>lspector@amherst.edu</EmailAddress>
<PI_PHON>4135425755</PI_PHON>
<NSF_ID>000229487</NSF_ID>
<StartDate>08/19/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Hampshire College</Name>
<CityName>Amherst</CityName>
<ZipCode>010023372</ZipCode>
<PhoneNumber>4135595378</PhoneNumber>
<StreetAddress>893 West Street</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>066981226</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF HAMPSHIRE COLLEGE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>066981226</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Hampshire College]]></Name>
<CityName>Amherst</CityName>
<StateCode>MA</StateCode>
<ZipCode>010023372</ZipCode>
<StreetAddress><![CDATA[893 West Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7495</Code>
<Text>Robust Intelligence</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~423288</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project developed, tested, and applied new methods for automatic computer programming, using concepts derived from evolutionary biology and software engineering.</p> <p><br />An approach to automatic programming called "genetic programming" has been under development by researchers for approximately two and a half decades. This approach uses processes of random variation and selection to produce executable code that solves specific computational problems. Initially applicable only to simple, artificial problems, the approach has been refined and has recently begun to produce human-competitive results in several areas of science and engineering. That is, it can sometimes solve problems and produce programs that present significant challenges for human programmers. Nonetheless, in nearly all prior cases the approach had been used only to produce isolated functions that solve single, specific computational problems. This project built on the pre-existing technologies and extended them in several ways to permit the evolution of more general and complex programs.&nbsp;</p> <p><br />Among the advances to genetic programming methods that were developed in this effort were a new method for selecting programs from a population for variation, new methods for varying selected programs, and a new method for evolving programs with modular structure. These and other new methods were tested on problems that included the automatic specification of database queries, the automatic completion of programming assignments from a college-level programming textbook, the modeling of complex dynamic systems such as wind turbines, and problems involving the discovery of mathematical expressions. In many cases the new methods developed in this project were shown to significantly outperform previous methods, and to solve problems that could not previously be solved. The project also produced and published a benchmark suite of problems that can be used to assess continued progress in the field.</p> <p><br />This project extended technologies that have already produced human-competitive results in disciplines ranging from pure mathematics to antenna and quantum system design. In doing so it integrated research from two distinct and independently successful research traditions, evolutionary computation and software engineering. Work on this project also contributed to the solution of a long-standing problem in computer science: the automatic synthesis of useful computer programs from user specifications.&nbsp;</p> <p><br />The automatic programming technologies developed in this project have the potential for broad impacts on science and society, both because they may produce useful programs that human programmers are not able to write, and because they permit software to be produced more rapidly and routinely by non-programmers. The project also had impacts on science education; it was conducted at an undergraduate institution with a curriculum based on independent student research, in conjunction with a top-ranked computer science Ph.D. program at a consortial partner institution. The project included educational activities that integrated research and education across undergraduate and graduate levels, and produced publications with undergraduate and graduate student co-authors.</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/21/2015<br>      Modified by: Lee&nbsp;Spector</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project developed, tested, and applied new methods for automatic computer programming, using concepts derived from evolutionary biology and software engineering.   An approach to automatic programming called "genetic programming" has been under development by researchers for approximately two and a half decades. This approach uses processes of random variation and selection to produce executable code that solves specific computational problems. Initially applicable only to simple, artificial problems, the approach has been refined and has recently begun to produce human-competitive results in several areas of science and engineering. That is, it can sometimes solve problems and produce programs that present significant challenges for human programmers. Nonetheless, in nearly all prior cases the approach had been used only to produce isolated functions that solve single, specific computational problems. This project built on the pre-existing technologies and extended them in several ways to permit the evolution of more general and complex programs.    Among the advances to genetic programming methods that were developed in this effort were a new method for selecting programs from a population for variation, new methods for varying selected programs, and a new method for evolving programs with modular structure. These and other new methods were tested on problems that included the automatic specification of database queries, the automatic completion of programming assignments from a college-level programming textbook, the modeling of complex dynamic systems such as wind turbines, and problems involving the discovery of mathematical expressions. In many cases the new methods developed in this project were shown to significantly outperform previous methods, and to solve problems that could not previously be solved. The project also produced and published a benchmark suite of problems that can be used to assess continued progress in the field.   This project extended technologies that have already produced human-competitive results in disciplines ranging from pure mathematics to antenna and quantum system design. In doing so it integrated research from two distinct and independently successful research traditions, evolutionary computation and software engineering. Work on this project also contributed to the solution of a long-standing problem in computer science: the automatic synthesis of useful computer programs from user specifications.    The automatic programming technologies developed in this project have the potential for broad impacts on science and society, both because they may produce useful programs that human programmers are not able to write, and because they permit software to be produced more rapidly and routinely by non-programmers. The project also had impacts on science education; it was conducted at an undergraduate institution with a curriculum based on independent student research, in conjunction with a top-ranked computer science Ph.D. program at a consortial partner institution. The project included educational activities that integrated research and education across undergraduate and graduate levels, and produced publications with undergraduate and graduate student co-authors.          Last Modified: 11/21/2015       Submitted by: Lee Spector]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
