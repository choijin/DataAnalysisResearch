<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Integrating Automated Software Testing Methods</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Testing is one of the most frequently performed and important activities in the work life of all programmers.  Unfortunately, for critical and frequently re-used code, manual testing often requires great effort for mediocre results.  This project focuses on automatically generating tests for modules with an interface that alters system state, e.g. critical modules such as file systems and data structures that are used in many safety- or economically- critical software systems.&lt;br/&gt;&lt;br/&gt;This project improves the state-of-the-art through a novel integration of proven methods, combined with fundamental improvements to underlying testing approaches.  The most efficient test methods (in terms of program paths explored per second) are used to generate very large numbers of unique paths to expose faults, while the most effective method (in terms of exploring hard-to-reach paths that reveal very difficult-to-find faults) are used to complete testing in a two-stage approach.  The central idea is to resort to expensive test generation methods only when it is unlikely that cost-effective methods will succeed.&lt;br/&gt;&lt;br/&gt;This project improves software testing education by curriculum and textbook development aimed at introducing undergraduate students to principled testing, a far-too-common omission in current CS education.&lt;br/&gt;&lt;br/&gt;Spacecraft flight software, including file systems and data structures used in flight systems, provides early applications for this approach. Inadequate testing methods cost tens of billions of dollars each year, despite high test budgets.  More effective testing will provide economic benefit and contribute (e.g., through spacecraft software or other scientific applications) to basic scientific research and exploration in other fields.</AbstractNarration>
<MinAmdLetterDate>01/11/2011</MinAmdLetterDate>
<MaxAmdLetterDate>09/15/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1054876</AwardID>
<Investigator>
<FirstName>Alex</FirstName>
<LastName>Groce</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Alex D Groce</PI_FULL_NAME>
<EmailAddress>agroce@gmail.com</EmailAddress>
<PI_PHON>3362448738</PI_PHON>
<NSF_ID>000512250</NSF_ID>
<StartDate>01/11/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Oregon State University</Name>
<CityName>Corvallis</CityName>
<ZipCode>973318507</ZipCode>
<PhoneNumber>5417374933</PhoneNumber>
<StreetAddress>OREGON STATE UNIVERSITY</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>053599908</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OREGON STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053599908</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Oregon State University]]></Name>
<CityName>Corvallis</CityName>
<StateCode>OR</StateCode>
<ZipCode>973318507</ZipCode>
<StreetAddress><![CDATA[OREGON STATE UNIVERSITY]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~66678</FUND_OBLG>
<FUND_OBLG>2012~92123</FUND_OBLG>
<FUND_OBLG>2013~78092</FUND_OBLG>
<FUND_OBLG>2014~163107</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project investigated methods for integrating software testing approaches, which are essential for improving the reliability, security, and availability of critical software used throughout our increasingly automated society. &nbsp;The underlying idea of the project was that the methods that are most efficient for generating tests that quickly examine much of the behavior of a system are very different from the methods that are best for examining certain difficult-to-discover (from a computer's perspective) behaviors. &nbsp;How can these kinds of methods be evaluated (how can we easily determine how fast/effective a testing method is) and combined (how can we use multiple methods together)?</p> <p>The project resulted in a large number of publications in major scientific venues (highly ranked conferences and journals) improving the state-of-the-art for understanding this problem. &nbsp;The core publication on how to evaluate tests was published in 2013, and has been cited 73 times in the 4 years since publication, as well as leading to a journal paper ACM Transactions on Software Engineering and Methodology, appearing in 2016 and already cited 11 times. &nbsp;The core proposal of a two-phase approach, using quick random testing, was published in a 2014 paper at the International Symposium on Software Testing and Analysis, and has been cited 18 times; more importantly, a variation of two-phase methods has increasingly become common practice in the field, due to this project and other related efforts.</p> <p>In order to make the results more widely usable, many of the software tools used have been released as open source projects, and an integrated system, TSTL, for test generation and analysis for the popular Python language has been actively and continuously developed since 2015. &nbsp;TSTL has been used to discover and report bugs in numerous software systems, including more than 60 bugs in various widely-used Python libraries and the Mac OS X operating system. &nbsp;TSTL is available via Python's "pip" system (pip install tstl) or through github: &nbsp;https://github.com/agroce/tstl. &nbsp;TSTL will continue to be developed and supported for the forseeable future, and is serving as a foundation for research efforts after the lifetime of this project and being used in software testing classes at multiple universities.</p> <p>Ideas from this project were used to enhance classes on software testing, and involve multiple high school and undergraduate students in research activities (in fact, one of the students supported by this project, now beginning college, is a co-author already on a journal and conference paper). &nbsp;Talks explaining ideas from the project at Google, Galois, and other companies helped spread the concepts to advanced automated testing groups in industry. &nbsp;Two PhD students supported by this project graduated, one now working in core infrastructure at Google, and one an assistant professor at the University of Houston.</p><br> <p>            Last Modified: 09/12/2017<br>      Modified by: Alex&nbsp;D&nbsp;Groce</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project investigated methods for integrating software testing approaches, which are essential for improving the reliability, security, and availability of critical software used throughout our increasingly automated society.  The underlying idea of the project was that the methods that are most efficient for generating tests that quickly examine much of the behavior of a system are very different from the methods that are best for examining certain difficult-to-discover (from a computer's perspective) behaviors.  How can these kinds of methods be evaluated (how can we easily determine how fast/effective a testing method is) and combined (how can we use multiple methods together)?  The project resulted in a large number of publications in major scientific venues (highly ranked conferences and journals) improving the state-of-the-art for understanding this problem.  The core publication on how to evaluate tests was published in 2013, and has been cited 73 times in the 4 years since publication, as well as leading to a journal paper ACM Transactions on Software Engineering and Methodology, appearing in 2016 and already cited 11 times.  The core proposal of a two-phase approach, using quick random testing, was published in a 2014 paper at the International Symposium on Software Testing and Analysis, and has been cited 18 times; more importantly, a variation of two-phase methods has increasingly become common practice in the field, due to this project and other related efforts.  In order to make the results more widely usable, many of the software tools used have been released as open source projects, and an integrated system, TSTL, for test generation and analysis for the popular Python language has been actively and continuously developed since 2015.  TSTL has been used to discover and report bugs in numerous software systems, including more than 60 bugs in various widely-used Python libraries and the Mac OS X operating system.  TSTL is available via Python's "pip" system (pip install tstl) or through github:  https://github.com/agroce/tstl.  TSTL will continue to be developed and supported for the forseeable future, and is serving as a foundation for research efforts after the lifetime of this project and being used in software testing classes at multiple universities.  Ideas from this project were used to enhance classes on software testing, and involve multiple high school and undergraduate students in research activities (in fact, one of the students supported by this project, now beginning college, is a co-author already on a journal and conference paper).  Talks explaining ideas from the project at Google, Galois, and other companies helped spread the concepts to advanced automated testing groups in industry.  Two PhD students supported by this project graduated, one now working in core infrastructure at Google, and one an assistant professor at the University of Houston.       Last Modified: 09/12/2017       Submitted by: Alex D Groce]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
