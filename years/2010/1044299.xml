<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:  Responding to Manycore: Teaching parallel computing with higher-level languages and activity-based laboratories</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>82382.00</AwardTotalIntnAmount>
<AwardAmount>82382</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Victor Piotrowski</SignBlockName>
<PO_EMAI>vpiotrow@nsf.gov</PO_EMAI>
<PO_PHON>7032925141</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The objective of this collaborative project is to: (1) assess and identify programming languages suitable for teaching parallel programming to all students; (2) develop and collect learning resources that will help others learn and teach these languages at the undergraduate level; (3) identify compelling examples of applications to excite and grow student interest in parallel programming; and (4) present findings and prepare adaptable and reproducible materials through publications, conference presentations, and tutorials.&lt;br/&gt;&lt;br/&gt;This project addresses the need to transform undergraduate education in computer science in response to a major shift in computer hardware to focus on the multicore processor and parallel programming. The project assesses the applicability of high-level languages and creates both classroom and laboratory materials to teach these languages in an undergraduate setting. &lt;br/&gt;&lt;br/&gt;The project has a potential to transform undergraduate computer science education of the next generation of parallel programmers and multicore developers. The project contributes resources to the NSDL library to encourage other educators to integrate parallel programming and higher-level languages into the undergraduate curriculum at their institutions.</AbstractNarration>
<MinAmdLetterDate>08/30/2011</MinAmdLetterDate>
<MaxAmdLetterDate>08/30/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1044299</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Bunde</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David Bunde</PI_FULL_NAME>
<EmailAddress>dbunde@knox.edu</EmailAddress>
<PI_PHON>3093417000</PI_PHON>
<NSF_ID>000560516</NSF_ID>
<StartDate>08/30/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Knox College</Name>
<CityName>Galesburg</CityName>
<ZipCode>614014999</ZipCode>
<PhoneNumber>3093358860</PhoneNumber>
<StreetAddress>2 East South Street</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL17</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>071429823</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>KNOX COLLEGE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071429823</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Knox College]]></Name>
<CityName>Galesburg</CityName>
<StateCode>IL</StateCode>
<ZipCode>614014999</ZipCode>
<StreetAddress><![CDATA[2 East South Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL17</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>7513</Code>
<Text>TUES-Type 1 Project</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0411</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~82382</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 7"> <div class="section" style="background-color: rgb(100.000000%, 100.000000%, 100.000000%);"> <div class="layoutArea"> <div class="column"><span style="font-size: 10.000000pt; font-family: 'ArialMT';">One of the main challenges in Computer Science at the moment comes from the fact that now essentially all computers (even tablets and smart phones) are now multicore.&nbsp; This means that they can perform more than one operation at a time.&nbsp; As the number of cores (and hence the number of operations the system can perform simultaneously) increases, this means that the full potential of these devices can only be harnessed by writing parallel programs.&nbsp; This poses a challenge for CS educators because traditionally parallel programming has been regarded as a specialized skill taught in upper division electives and graduate courses. This project aimed to help instructors move this material into lower-level CS courses in two ways:</span></div> <div class="column"></div> <div class="column"><span style="font-size: 10.000000pt; font-family: 'ArialMT';">1) We explored instructional use of parallel programming languages.&nbsp; Most programming languages are designed for traditional (single core) systems, with parallel programming features "tacked on" later.&nbsp; Parallel programming languages are designed from the beginning with parallelism in mind and thus tend to make it simpler.&nbsp; This is attractive, but since these languages are newer, there are fewer materials for students and instructors to use in the classroom.&nbsp; The project developed tutorials for several of these languages to make it easier for others to adopt them.</span></div> <div class="column"></div> <div class="column"><span style="font-size: 10.000000pt; font-family: 'ArialMT';">2) We developed assignments around examples of important computations.&nbsp; There is a tension when designing assignments and examples.&nbsp; The assignment or example shouldn't be too complicated or students will have difficulty understanding it and not be able to focus on the particular concept that is the main goal.&nbsp; At the same time, examples that are stripped of all complications become very abstract and students can find them unmotivating because there is no clear connection to any real application.&nbsp; Thus, this project tried to use examples that would appeal to students.&nbsp; One approach that we found to be promising was graphical simulations such as the Game of Life or watching heat diffuse through an environment.&nbsp; This kind of application makes it easy to see the use of parallelism (the animation speeds up) and also to detect errors (it doesn't look right).&nbsp; Another, more locally-focused, approach was to parallelize programs actually being used by researchers at our institution, giving them some inherited "street cred" because other students and faculty the class knew would be using the result.</span></div> <div class="column"><span style="font-size: 10.000000pt; font-family: 'ArialMT';"><br /></span></div> <div class="column"><span style="font-size: 10.000000pt; font-family: 'ArialMT';">Materials developed as part of this project were used in courses taught  at Knox College.&nbsp; They were also presented numerous times at CS  education conferences and are available on the project webpage:  http://faculty.knox.edu/dbunde/parallel.html</span></div> <div class="column"><span style="font-size: 10.000000pt; font-family: 'ArialMT';"><br /></span></div> </div> </div> </div><br> <p>            Last Modified: 11/30/2015<br>      Modified by: David&nbsp;Bunde</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   One of the main challenges in Computer Science at the moment comes from the fact that now essentially all computers (even tablets and smart phones) are now multicore.  This means that they can perform more than one operation at a time.  As the number of cores (and hence the number of operations the system can perform simultaneously) increases, this means that the full potential of these devices can only be harnessed by writing parallel programs.  This poses a challenge for CS educators because traditionally parallel programming has been regarded as a specialized skill taught in upper division electives and graduate courses. This project aimed to help instructors move this material into lower-level CS courses in two ways:  1) We explored instructional use of parallel programming languages.  Most programming languages are designed for traditional (single core) systems, with parallel programming features "tacked on" later.  Parallel programming languages are designed from the beginning with parallelism in mind and thus tend to make it simpler.  This is attractive, but since these languages are newer, there are fewer materials for students and instructors to use in the classroom.  The project developed tutorials for several of these languages to make it easier for others to adopt them.  2) We developed assignments around examples of important computations.  There is a tension when designing assignments and examples.  The assignment or example shouldn't be too complicated or students will have difficulty understanding it and not be able to focus on the particular concept that is the main goal.  At the same time, examples that are stripped of all complications become very abstract and students can find them unmotivating because there is no clear connection to any real application.  Thus, this project tried to use examples that would appeal to students.  One approach that we found to be promising was graphical simulations such as the Game of Life or watching heat diffuse through an environment.  This kind of application makes it easy to see the use of parallelism (the animation speeds up) and also to detect errors (it doesn't look right).  Another, more locally-focused, approach was to parallelize programs actually being used by researchers at our institution, giving them some inherited "street cred" because other students and faculty the class knew would be using the result.   Materials developed as part of this project were used in courses taught  at Knox College.  They were also presented numerous times at CS  education conferences and are available on the project webpage:  http://faculty.knox.edu/dbunde/parallel.html            Last Modified: 11/30/2015       Submitted by: David Bunde]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
