<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Reining in Side-Channel Information Leaks in the Software-as-a-Service Era</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>494110.00</AwardTotalIntnAmount>
<AwardAmount>494110</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
<PO_EMAI>jepstein@nsf.gov</PO_EMAI>
<PO_PHON>7032928338</PO_PHON>
</ProgramOfficer>
<AbstractNarration>With software-as-a-service (SaaS) rapidly becoming mainstream, web applications increasingly substitute for desktop software. A web application is a two-part program, with its components deployed both in the browser and in the web server.  The interactions between these two components inevitably reveal the program's internal states to any observer of the communication stream, simply through the pattern of packet lengths and the timing of interactions, even if stream is entirely encrypted.  This research reveals that these "side-channel" information leaks are both fundamental and common: a number of popular web applications are found to disclose highly sensitive user data such as one's family income, health profile, investments and more.   This research will develop an in-depth understanding of web applications' side channel vulnerabilities, particularly the design features and domain knowledge that lead to side-channel leaks. Based upon this understanding, new technologies are developed to facilitate the detection and mitigation of the side-channel threats during the development and operation of web applications. These technologies will be made available to users so they can assess their vulnerabilities and to developers so they can reduce the vulnerabilities in the applications they build. The outcomes of the project will contribute to the improvement of privacy protection in the SaaS infrastructure and cloud computing.</AbstractNarration>
<MinAmdLetterDate>07/14/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/14/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017782</AwardID>
<Investigator>
<FirstName>XiaoFeng</FirstName>
<LastName>Wang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>XiaoFeng Wang</PI_FULL_NAME>
<EmailAddress>xw7@indiana.edu</EmailAddress>
<PI_PHON>8128561862</PI_PHON>
<NSF_ID>000219306</NSF_ID>
<StartDate>07/14/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Indiana University</Name>
<CityName>Bloomington</CityName>
<ZipCode>474013654</ZipCode>
<PhoneNumber>3172783473</PhoneNumber>
<StreetAddress>509 E 3RD ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>006046700</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF INDIANA UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>006046700</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Indiana University]]></Name>
<CityName>Bloomington</CityName>
<StateCode>IN</StateCode>
<ZipCode>474013654</ZipCode>
<StreetAddress><![CDATA[509 E 3RD ST]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~494110</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The prosperity of software-as-a-service (SaaS) comes with new security challenges.&nbsp; Different from their desktop counterparts, the web application delivered through the SaaS infrastructure is a two-part program, with its components deployed both in the browser and in the web server.&nbsp; The interactions between these two components inevitably discloses the internal states of the program to the network eavesdropper, through various &ldquo;side channels&rdquo; of the communication, such as packet lengths and the timing of interactions, even when the communication is entirely encrypted.&nbsp; &nbsp;Further complicating the situation is the recent popularity of smartphone and tablet techniques, with millions of mobile applications (app for short) already on the market, most of which are essentially web applications with their client-side components directly running on various mobile devices.&nbsp; &nbsp;Not only are those apps equally vulnerable to the network side-channel attack, just like their corresponding browser-side counterparts,&nbsp; but they are also subject to the risks of information leaks through mobile operating systems (OS),&nbsp; including each app&rsquo;s mobile data, CPU and memory usages and more, which has all been made public to even untrusted apps running on the same devices.</p> <p>&nbsp;</p> <p><strong>Intellectual Merits. </strong>In this project, we performed a series of in-depth security analyses under different SaaS computing scenarios, on emerging mobile apps as well as conventional browser-based web applications. &nbsp;Our studies have brought to light the scope and the magnitude of this new security risk (side channel leaks in SaaS):&nbsp; a number of popular web applications are found to disclose highly sensitive user data, such as one's family income, health profile, investments and more through the patterns of their traffic; mobile computing devices expose the types of the applications they are running and their users&rsquo; activities through encrypted Wi-Fi packet sequences;&nbsp; also high-profile mobile apps and even the mobile OS itself can be monitored by a malicious app without any permission to figure out the mobile user&rsquo;s location, identity, driving routes and health and financial information, using such apparently innocent information as the BSSIDs of Wi-Fi access points, &nbsp;mobile data usages,&nbsp; CPU uses and the status of the speaker (on or off).&nbsp;&nbsp; Further, the presence of such side-channel leaks enables the adversary to conduct reconnaissance on the states of the target OS or applications, which makes possible a wide range of attacks, from inferring the content of encrypted data on the cloud to taping the victim&rsquo;s phone conversation and stealing her medical data from mobile healthcare accessories. &nbsp;&nbsp;Examples of such information leaks are made available through video demos (<a href="https://sites.google.com/site/sidedroid/">https://sites.google.com/site/sidedroid/</a>,&nbsp; <a href="https://sites.google.com/site/edmbdroid/">https://sites.google.com/site/edmbdroid/</a>).</p> <p>&nbsp;</p> <p>To mitigate those security risks, we developed a suite of new techniques for different computing platforms. &nbsp;&nbsp;For conventional web applications, our automatic program analyzer, called &ldquo;Sidebuster&rdquo;, was designed to statically evaluate the source code of the program, identifying the potential program locations of side channels.&nbsp; Then, a dynamic analysis is performed to quantify the amount of the information that can be exposed through the channels.&nbsp; This helps the developer to analyze her programs and fix the potential weaknesses within the code during the application development stage.&nbsp;&nbsp; In a mobile computing environment, we propose a new demultiplexing technique that decomposes a Wi-Fi communication flow into a set of streams, each mimicking the opera...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The prosperity of software-as-a-service (SaaS) comes with new security challenges.  Different from their desktop counterparts, the web application delivered through the SaaS infrastructure is a two-part program, with its components deployed both in the browser and in the web server.  The interactions between these two components inevitably discloses the internal states of the program to the network eavesdropper, through various "side channels" of the communication, such as packet lengths and the timing of interactions, even when the communication is entirely encrypted.   Further complicating the situation is the recent popularity of smartphone and tablet techniques, with millions of mobile applications (app for short) already on the market, most of which are essentially web applications with their client-side components directly running on various mobile devices.   Not only are those apps equally vulnerable to the network side-channel attack, just like their corresponding browser-side counterparts,  but they are also subject to the risks of information leaks through mobile operating systems (OS),  including each appÃ†s mobile data, CPU and memory usages and more, which has all been made public to even untrusted apps running on the same devices.     Intellectual Merits. In this project, we performed a series of in-depth security analyses under different SaaS computing scenarios, on emerging mobile apps as well as conventional browser-based web applications.  Our studies have brought to light the scope and the magnitude of this new security risk (side channel leaks in SaaS):  a number of popular web applications are found to disclose highly sensitive user data, such as one's family income, health profile, investments and more through the patterns of their traffic; mobile computing devices expose the types of the applications they are running and their usersÃ† activities through encrypted Wi-Fi packet sequences;  also high-profile mobile apps and even the mobile OS itself can be monitored by a malicious app without any permission to figure out the mobile userÃ†s location, identity, driving routes and health and financial information, using such apparently innocent information as the BSSIDs of Wi-Fi access points,  mobile data usages,  CPU uses and the status of the speaker (on or off).   Further, the presence of such side-channel leaks enables the adversary to conduct reconnaissance on the states of the target OS or applications, which makes possible a wide range of attacks, from inferring the content of encrypted data on the cloud to taping the victimÃ†s phone conversation and stealing her medical data from mobile healthcare accessories.   Examples of such information leaks are made available through video demos (https://sites.google.com/site/sidedroid/,  https://sites.google.com/site/edmbdroid/).     To mitigate those security risks, we developed a suite of new techniques for different computing platforms.   For conventional web applications, our automatic program analyzer, called "Sidebuster", was designed to statically evaluate the source code of the program, identifying the potential program locations of side channels.  Then, a dynamic analysis is performed to quantify the amount of the information that can be exposed through the channels.  This helps the developer to analyze her programs and fix the potential weaknesses within the code during the application development stage.   In a mobile computing environment, we propose a new demultiplexing technique that decomposes a Wi-Fi communication flow into a set of streams, each mimicking the operations of a different application, so as to confuse a Wi-Fi eavesdropper.   On the mobile device, both OS-level and app-level protection mechanisms were designed to defend the mobile user against all known side-channel attacks.  All these new techniques have been thoroughly evaluated in real-world computing environments, using popular web applications.   As a result of this research, 11 pa...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
