<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Algorithms for Dynamic Analysis of Run-Time Bloat</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>356531.00</AwardTotalIntnAmount>
<AwardAmount>356531</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Many object-oriented programs, and in particular large enterprise applications, suffer from chronic run-time bloat: the excessive memory usage and run-time work that occur as part of seemingly simple computations. Such bloat significantly affects scalability and performance, and presents a serious problem for software used every day by thousands of businesses. Performance tuning may find substantial optimization opportunities, but it is very labor-intensive and requires a great deal of skill.&lt;br/&gt;&lt;br/&gt;This project develops novel algorithms for run-time analysis of Java programs to identify the symptoms of bloat and to pinpoint their causes. These algorithms can be used in checking tools during software development, and later in tuning tools for performance debugging. A framework for algorithm design and implementation defines a generalized form of a run-time data dependence graph, with abstractions specific to the targeted analysis, and with several dimensions of parameterization. Framework instances are used to create analyses of temporary data structures, analyses of copy chains, data structure cost-benefit analyses, and analyses of inefficiently-used containers. Experimental evaluation investigates the cost/precision trade-offs in the design and implementation of these algorithms, and their effectiveness in helping a programmer to improve performance.&lt;br/&gt;&lt;br/&gt;The project provides a foundation for systematic exploration of bloat analyses, which will help increase software performance and reduce tuning efforts. The framework and its instances will be made publicly available. These advances could become part of development toolkits, leading to higher performance of enterprise applications. Educational efforts will contribute to the skills of the next generation of developers of enterprise systems.</AbstractNarration>
<MinAmdLetterDate>09/15/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/15/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017204</AwardID>
<Investigator>
<FirstName>Atanas</FirstName>
<LastName>Rountev</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Atanas Rountev</PI_FULL_NAME>
<EmailAddress>rountev@cse.ohio-state.edu</EmailAddress>
<PI_PHON>6142927203</PI_PHON>
<NSF_ID>000191396</NSF_ID>
<StartDate>09/15/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888735</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1960 Kenny Road]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>832127323</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001964634</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName>Columbus</CityName>
<StateCode>OH</StateCode>
<ZipCode>432101016</ZipCode>
<StreetAddress><![CDATA[Office of Sponsored Programs]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~356531</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software reliability, performance, and usability are of paramount<br />importance for individuals, businesses, and society in general.<br />However, complex software systems often suffer from hard-to-diagnose<br />performance problems (e.g., sluggishness, excessive use of memory,<br />etc.). The goal of this project is to develop software analysis<br />algorithms that can automatically detect symptoms and root causes of<br />such problems.&nbsp; When such algorithms are used in software tools to<br />assist software programmers and testers, they increase software<br />developer productivity, help to reduce software defects, and<br />ultimately contribute to more reliable and better-performing software.<br /><br />The technical contributions of our work include general analyses for<br />tracking object lifetimes and reference propagation in complex<br />object-oriented software, as well as specialized analysis techniques<br />focusing on specific sources of inefficiencies such as loop-related<br />redundancies/leaks, container inefficiencies, and inefficiencies for<br />devices with constrained resources (e.g., smartphones).&nbsp; This work has<br />resulted in 11 peer-reviewed publications, two Ph.D. dissertations,<br />and 4 publicly-available software packages.<br /><br />The main outcomes of this project are as follows: (1) New dynamic<br />analysis for tracking and inferring certain invariants among lifetimes<br />of related objects. The analysis is used to identify potential<br />symptoms of inefficient memory usage leading to memory leaks. (2) New<br />reference propagation analysis - a dynamic analysis for tracking the<br />flow of reference values in Java programs - together with three client<br />analyses used to uncover performance inefficiencies in Java<br />programs. (3) Dynamic analysis to identify patterns of behavior for<br />containers, and to use these to identify container-related bloat. (4)<br />New static analysis to identify loop-invariant data structures that<br />can be hoisted out of loops. Such data structures are a major source<br />of run-time bloat in object-oriented programs. (5) Dynamic analysis of<br />sequential programs to track dynamic dependences and represent them in<br />a dependence graph, together with a client analysis to identify code<br />regions with high potential for parallelism. (6) Static analysis that<br />considers each important loop in a Java program and detects the<br />objects that escape one loop iteration and never flow back into any<br />later iteration (i.e., each iteration leaks objects). (7) Diagnostic<br />and test generation techniques to expose bloated operations in Android<br />applications, with focus on resource leaks and poor responsiveness.</p><br> <p>            Last Modified: 05/17/2015<br>      Modified by: Atanas&nbsp;Rountev</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software reliability, performance, and usability are of paramount importance for individuals, businesses, and society in general. However, complex software systems often suffer from hard-to-diagnose performance problems (e.g., sluggishness, excessive use of memory, etc.). The goal of this project is to develop software analysis algorithms that can automatically detect symptoms and root causes of such problems.  When such algorithms are used in software tools to assist software programmers and testers, they increase software developer productivity, help to reduce software defects, and ultimately contribute to more reliable and better-performing software.  The technical contributions of our work include general analyses for tracking object lifetimes and reference propagation in complex object-oriented software, as well as specialized analysis techniques focusing on specific sources of inefficiencies such as loop-related redundancies/leaks, container inefficiencies, and inefficiencies for devices with constrained resources (e.g., smartphones).  This work has resulted in 11 peer-reviewed publications, two Ph.D. dissertations, and 4 publicly-available software packages.  The main outcomes of this project are as follows: (1) New dynamic analysis for tracking and inferring certain invariants among lifetimes of related objects. The analysis is used to identify potential symptoms of inefficient memory usage leading to memory leaks. (2) New reference propagation analysis - a dynamic analysis for tracking the flow of reference values in Java programs - together with three client analyses used to uncover performance inefficiencies in Java programs. (3) Dynamic analysis to identify patterns of behavior for containers, and to use these to identify container-related bloat. (4) New static analysis to identify loop-invariant data structures that can be hoisted out of loops. Such data structures are a major source of run-time bloat in object-oriented programs. (5) Dynamic analysis of sequential programs to track dynamic dependences and represent them in a dependence graph, together with a client analysis to identify code regions with high potential for parallelism. (6) Static analysis that considers each important loop in a Java program and detects the objects that escape one loop iteration and never flow back into any later iteration (i.e., each iteration leaks objects). (7) Diagnostic and test generation techniques to expose bloated operations in Android applications, with focus on resource leaks and poor responsiveness.       Last Modified: 05/17/2015       Submitted by: Atanas Rountev]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
