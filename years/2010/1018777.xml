<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CIF:  Small:  Network Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>368843.00</AwardTotalIntnAmount>
<AwardAmount>368843</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Phillip Regalia</SignBlockName>
<PO_EMAI>pregalia@nsf.gov</PO_EMAI>
<PO_PHON>7032922981</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The project develops a mathematical and algorithmic foundation for the field of network computing.  The project ties together ideas from network coding with computational problems.  While some special cases of network computing have been recently studied, this project carries out a unified study of the field of network computing.  The project exploits the promise of improved performance using non-linear codes over traditional network routing and linear coding techniques.  Emphasis is placed on computing in networks that allow coding in addition to routing.  Applications of network computing include sensor networks and wireless networks.  The broad fields studied are: (1) theory and algorithms, and (2) alternative network computing models.&lt;br/&gt;&lt;br/&gt;The main objectives of the project are to achieve a deep mathematical understanding of network computing capacity and solvability and to develop practical algorithms that can be used effectively to improve performance in real applications.  The investigation involves mathematical analysis, algorithm design, and computer simulation.  The main topic areas investigated are: (1) Capacity computability and alphabet size, (2) Iterative design of network computing algorithms, (3) Limiting the number of network nodes that can perform coding, (4) Average computation rate in network coding, (5) Bi-directional and broadcast-mode network computing.</AbstractNarration>
<MinAmdLetterDate>08/23/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/23/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018777</AwardID>
<Investigator>
<FirstName>Kenneth</FirstName>
<LastName>Zeger</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kenneth A Zeger</PI_FULL_NAME>
<EmailAddress>zeger@ucsd.edu</EmailAddress>
<PI_PHON>8584425679</PI_PHON>
<NSF_ID>000213121</NSF_ID>
<StartDate>08/23/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930934</ZipCode>
<StreetAddress><![CDATA[Office of Contract &amp; Grant A]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7935</Code>
<Text>COMM &amp; INFORMATION THEORY</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~368843</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project studies network coding and computing. Traditionally, networks such as the Internet, send information such as email or video content from one location to another using packets of binary data that are routed between a number (typically around 10-20) of network nodes (typically a computer). A routing node that receives packets from multiple input locations has to decide which packets to send on its output and when. The essence of routing is that incoming packets become outgoing packets by a selection process.&nbsp;</p> <p>In contrast, in network coding, a network node may choose to mathematically combine multiple input packets, such as by adding them together in binary using the exclusive OR logical function. By so doing, greater data rates can potentially be achieved compared to routing.</p> <p>A further generalization of this concenpt is that of network computing, where instead of conveying data from one location in a network to another location, rather some function of the input data at various nodes of a network is conveyed to one or more particular reciever node. For example, a receiver node might need to know the arithmetic sum of 1000 different input data values (such as in a sensor network). Instead of individually transmitting all 1000 data values and adding them up at the receiver, partial sums can be computed inside the network and then less data needs to be transmitted internally. This can reduce network congestion.</p> <p>This project has studied both network coding and computing and has obtained a number of new results in both fields, that advance the understanding of this science for both the theoretician and the practicing engineer. A semi-technical summary of such results that have been published is given here:</p> <p>&nbsp;<strong>Network Coding for Computing: Cut-Set Bounds</strong></p> <p>Source nodes in a directed acyclic network generate independent messages and a single receiver node computes a target function f of the messages. The objective is to maximize the average number of times f can be computed per network usage, i.e., the ``computing capacity''.</p> <p>We extend the definition of min-cut to the network computing problem and show that the min-cut is still an upper bound on the maximum achievable rate and is tight for computing (using coding) any target function in multi-edge tree networks and for computing linear target functions in any network. We also study the bound's tightness for different classes of target functions.</p> <p>&nbsp;<strong>Network Coding and Matroid Theory</strong></p> <p>Networks derived from matroids have played a fundamental role in proving theoretical results about the limits of network coding. We review many connections between matroids and network coding theory, with specific emphasis on network solvability, admissible network alphabet sizes, linear coding, and network capacity.</p> <p><strong>Linear rank inequalities on five or more variables</strong></p> <p>&nbsp;Ranks of subspaces of vector spaces satisfy all linear inequalities satisfied by entropies (including the standard Shannon inequalities) and an additional inequality due to Ingleton. It is known that the Shannon and Ingleton inequalities generate all such linear rank inequalities on up to four variables, but it has been an open question whether additional inequalities hold for the case of five or more variables. Here we give a list of 24 inequalities which, together with the Shannon and Ingleton inequalities, generate all linear rank inequalities on five variables. We also give a partial</p> <p><strong>&nbsp;Linear Codes, Target Function Classes, and Network Computing Capacity</strong></p> <p>We study the use of linear codes for network computing in single-receiver networks with various classes of target functions of the source messages. Such classes include reducible, injective, semi-injective, and linear target functions over finite fi...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project studies network coding and computing. Traditionally, networks such as the Internet, send information such as email or video content from one location to another using packets of binary data that are routed between a number (typically around 10-20) of network nodes (typically a computer). A routing node that receives packets from multiple input locations has to decide which packets to send on its output and when. The essence of routing is that incoming packets become outgoing packets by a selection process.   In contrast, in network coding, a network node may choose to mathematically combine multiple input packets, such as by adding them together in binary using the exclusive OR logical function. By so doing, greater data rates can potentially be achieved compared to routing.  A further generalization of this concenpt is that of network computing, where instead of conveying data from one location in a network to another location, rather some function of the input data at various nodes of a network is conveyed to one or more particular reciever node. For example, a receiver node might need to know the arithmetic sum of 1000 different input data values (such as in a sensor network). Instead of individually transmitting all 1000 data values and adding them up at the receiver, partial sums can be computed inside the network and then less data needs to be transmitted internally. This can reduce network congestion.  This project has studied both network coding and computing and has obtained a number of new results in both fields, that advance the understanding of this science for both the theoretician and the practicing engineer. A semi-technical summary of such results that have been published is given here:   Network Coding for Computing: Cut-Set Bounds  Source nodes in a directed acyclic network generate independent messages and a single receiver node computes a target function f of the messages. The objective is to maximize the average number of times f can be computed per network usage, i.e., the ``computing capacity''.  We extend the definition of min-cut to the network computing problem and show that the min-cut is still an upper bound on the maximum achievable rate and is tight for computing (using coding) any target function in multi-edge tree networks and for computing linear target functions in any network. We also study the bound's tightness for different classes of target functions.   Network Coding and Matroid Theory  Networks derived from matroids have played a fundamental role in proving theoretical results about the limits of network coding. We review many connections between matroids and network coding theory, with specific emphasis on network solvability, admissible network alphabet sizes, linear coding, and network capacity.  Linear rank inequalities on five or more variables   Ranks of subspaces of vector spaces satisfy all linear inequalities satisfied by entropies (including the standard Shannon inequalities) and an additional inequality due to Ingleton. It is known that the Shannon and Ingleton inequalities generate all such linear rank inequalities on up to four variables, but it has been an open question whether additional inequalities hold for the case of five or more variables. Here we give a list of 24 inequalities which, together with the Shannon and Ingleton inequalities, generate all linear rank inequalities on five variables. We also give a partial   Linear Codes, Target Function Classes, and Network Computing Capacity  We study the use of linear codes for network computing in single-receiver networks with various classes of target functions of the source messages. Such classes include reducible, injective, semi-injective, and linear target functions over finite fields. Computing capacity bounds and achievability are given with respect to these target function classes for network codes that use routing, linear coding, or nonlinear coding.  Achievable Rate Regions for Network Coding  Dete...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
