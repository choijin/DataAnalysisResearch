<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III:  Small: Database-driven Ajax applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>532000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>nan zhang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>AJAX programming enables superior performance and interface quality that is comparable to desktop applications, despite the fact that the users? browsers interact with a remote server on the cloud. The challenge is that AJAX programs are hard to write since they are essentially distributed programs combining three different languages: browser-side Javascript, a server side programming language (e.g., Java, PHP, etc) and database access with SQL. &lt;br/&gt;&lt;br/&gt;The proposal develops a framework for the rapid creation of fully-fledged AJAX-based web application pages from declarative, data-driven, SQL-based specifications. The proposal delivers an architecture and SQL-based page specification language that is sufficiently abstract and declarative to enable rapid development, while it is also (a) performant and (b) enables the same class of data-driven web applications with what can be manually coded. Novel incremental view maintenance, distributed query processing and concurrency control techniques enable performance, while the component-based structuring of pages blends the data aspects of the language with front-end mechanisms for creating rich interfaces.&lt;br/&gt;&lt;br/&gt;Declarative specifications lead to rapid programming, fewer bugs and easy application maintenance and evolution, while the framework solves performance optimization and correctness problems and provides functionalities that otherwise the developer would need to take care of with tedious custom AJAX code. The results are carried over besides Ajax to Adobe's Flash, the recent Microsoft's Silverlight and the emerging mobile application platforms. Furthermore, they contribute to UCSD?s web application development curriculum by providing a principled method of architecting and implementing interactive data-driven applications. The information about the project can be found at http://db.ucsd.edu/NSF10FWD/</AbstractNarration>
<MinAmdLetterDate>08/07/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/14/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018961</AwardID>
<Investigator>
<FirstName>Yannis</FirstName>
<LastName>Papakonstantinou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yannis Papakonstantinou</PI_FULL_NAME>
<EmailAddress>yannis@cs.ucsd.edu</EmailAddress>
<PI_PHON>8588221612</PI_PHON>
<NSF_ID>000229823</NSF_ID>
<StartDate>08/07/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930934</ZipCode>
<StreetAddress><![CDATA[Office of Contract &amp; Grant A]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~500000</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Implementing a data-driven web application or analytics visualization (even a conceptually simple one) requires an inordinate amount of time. Projects that are relatively easy to specify are fairly time consuming. There is an obvious benefit to IT people in reducing this time. </span></p> <p><span>This project argued that one common reason is the many integration frictions across the multiple sources of data in the application. For example, some data may reside in application server memory, some other data reside on client (browser) memory, some data reside in a conventional SQL database, while other data nowadays reside on scalable NoSQL systems. All these data must be integrated and must interact in order to create a functional application.</span></p> <p>The high level goal of the project was to</p> <p>(a) research novel solutions to the identified frictions and</p> <p>(b) deliver an application development platform that encompasses the individual solutions into a usable, coordinated programming tool for building data-driven applications. Emphasis was given on analytics applications.</p> <p>The first identified frictions were the data heterogeneity and distribution problems: Applications access distributed and heterogeneous data across multiple data sources (user input of the browser page, session data in the application server, SQL database, NoSQL database etc). A novel distributed query processing problem is caused by the emergence of NoSQL stores. It has became commonplace that a company keeps its conventional enterprise data in a relational, ACID database, while Big and Fast data from web activity, sensors and devices are kept in NoSQL stores. Applications that require access to both (even for rudimentary purposes) do not get the benefit of having a single data platform.</p> <p>In response, the project built middleware that can integrate memory data with SQL and noSQL stores. The middleware results into an integrated database (see image) that may either be virtual or materialized. If virtual,&nbsp;the technical problem is to execute distributed queries over memory, SQL and noSQL stores.&nbsp;If materialized the technical problem is incremental view maintenance: How does the system keep the integrated database (also called integrated view) up-to-date as the underlying data change.</p> <p>The second identified friction pertains to coordinating the data of the multiple layers. The reporting components connect to reported data part that are automatically and incrementally updated views of the application state.&nbsp;</p> <p>In response to the SQL/NoSQL heterogeneity/mismatch problems, the project introduced theSQL++ data model, which is a minimally expanded JSON. It provides an excellent semi-structured model that captures SQL databases, noSQL databases (naturally since most of them indeed model their data as JSON extensions), browser Javascript-originating data, and application-level objects.&nbsp;The project extended SQL to SQL++ so that it can be viewed either as an expanded SQL or as a JSON query language.</p> <p>A language novelty of SQL++ is the inclusion of configuration options that formally itemize the semantics variations that language designers may choose from ([NOS14], [NOS15]). The options often pertain to the treatment of semi-structuredness (missing attributes, heterogeneous types, etc), where more than one sensible approaches are possible. The net effect of configuration options is that SQL++ became unifying: By appropriate choices of configuration options, the SQL++ semantics can morph into the semantics of existing semi-structured (NoSQL) database query languages. Extensive experimental validation showed how SQL and four semi-structured database query languages (MongoDB, Cassandra CQL, Couchbase N1QL and AsterixDB AQL) are formally described by appropriate settings of the configuration options.&nbsp;</p> <p>This project developed a novel i...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Implementing a data-driven web application or analytics visualization (even a conceptually simple one) requires an inordinate amount of time. Projects that are relatively easy to specify are fairly time consuming. There is an obvious benefit to IT people in reducing this time.   This project argued that one common reason is the many integration frictions across the multiple sources of data in the application. For example, some data may reside in application server memory, some other data reside on client (browser) memory, some data reside in a conventional SQL database, while other data nowadays reside on scalable NoSQL systems. All these data must be integrated and must interact in order to create a functional application.  The high level goal of the project was to  (a) research novel solutions to the identified frictions and  (b) deliver an application development platform that encompasses the individual solutions into a usable, coordinated programming tool for building data-driven applications. Emphasis was given on analytics applications.  The first identified frictions were the data heterogeneity and distribution problems: Applications access distributed and heterogeneous data across multiple data sources (user input of the browser page, session data in the application server, SQL database, NoSQL database etc). A novel distributed query processing problem is caused by the emergence of NoSQL stores. It has became commonplace that a company keeps its conventional enterprise data in a relational, ACID database, while Big and Fast data from web activity, sensors and devices are kept in NoSQL stores. Applications that require access to both (even for rudimentary purposes) do not get the benefit of having a single data platform.  In response, the project built middleware that can integrate memory data with SQL and noSQL stores. The middleware results into an integrated database (see image) that may either be virtual or materialized. If virtual, the technical problem is to execute distributed queries over memory, SQL and noSQL stores. If materialized the technical problem is incremental view maintenance: How does the system keep the integrated database (also called integrated view) up-to-date as the underlying data change.  The second identified friction pertains to coordinating the data of the multiple layers. The reporting components connect to reported data part that are automatically and incrementally updated views of the application state.   In response to the SQL/NoSQL heterogeneity/mismatch problems, the project introduced theSQL++ data model, which is a minimally expanded JSON. It provides an excellent semi-structured model that captures SQL databases, noSQL databases (naturally since most of them indeed model their data as JSON extensions), browser Javascript-originating data, and application-level objects. The project extended SQL to SQL++ so that it can be viewed either as an expanded SQL or as a JSON query language.  A language novelty of SQL++ is the inclusion of configuration options that formally itemize the semantics variations that language designers may choose from ([NOS14], [NOS15]). The options often pertain to the treatment of semi-structuredness (missing attributes, heterogeneous types, etc), where more than one sensible approaches are possible. The net effect of configuration options is that SQL++ became unifying: By appropriate choices of configuration options, the SQL++ semantics can morph into the semantics of existing semi-structured (NoSQL) database query languages. Extensive experimental validation showed how SQL and four semi-structured database query languages (MongoDB, Cassandra CQL, Couchbase N1QL and AsterixDB AQL) are formally described by appropriate settings of the configuration options.   This project developed a novel incremental view maintenance solution by observing that the most typical state modifications involve an application inserting a new record (possibly a semistructured one in n...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
