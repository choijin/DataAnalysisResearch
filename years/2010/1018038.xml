<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  Dynamic Detection of Heap-Based Bugs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>484949.00</AwardTotalIntnAmount>
<AwardAmount>484949</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Identifying bugs in software continues to be a challenging, but essential problem to solve. One particularly difficult task is ensuring the integrity of large-scale data structures stored in memory. Existing bug-finding techniques, such as static analysis of the code, have not been effective on this problem, especially for complex and highly dynamic software, such as web applications.&lt;br/&gt;&lt;br/&gt;This project explores a new technique for checking data structures dynamically as the program executes. Dynamic checking is effective and precise, but must be efficient in order to avoid significantly slowing program execution. The key idea in this work is to piggyback checking on the garbage collector, which already periodically visits all data structures in the program. An efficient and precise tool for detecting data structure errors could be widely deployed to improve the reliability of critical software infrastructure.&lt;br/&gt;&lt;br/&gt;The project consists of three specific avenues of research. The first involves developing a declarative language for expressing dynamic data structure properties, building on existing techniques from static analysis and verification. The second investigates the class of properties that can be checked during a single pass of the garbage collector. The third builds on the machinery of concurrent garbage collection, allowing heap checks to proceed concurrently with the application on available extra CPU cores.</AbstractNarration>
<MinAmdLetterDate>07/23/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/23/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018038</AwardID>
<Investigator>
<FirstName>Samuel</FirstName>
<LastName>Guyer</LastName>
<PI_MID_INIT>Z</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Samuel Z Guyer</PI_FULL_NAME>
<EmailAddress>sguyer@cs.tufts.edu</EmailAddress>
<PI_PHON>6176273417</PI_PHON>
<NSF_ID>000091427</NSF_ID>
<StartDate>07/23/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Tufts University</Name>
<CityName>Boston</CityName>
<ZipCode>021111817</ZipCode>
<PhoneNumber>6176273696</PhoneNumber>
<StreetAddress>136 Harrison Ave</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>073134835</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF TUFTS COLLEGE INC</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>073134835</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Tufts University]]></Name>
<CityName>Boston</CityName>
<StateCode>MA</StateCode>
<ZipCode>021111817</ZipCode>
<StreetAddress><![CDATA[136 Harrison Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~484949</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The overall goal of this project is to develop a family of new tools to help programmers find and diagnose software errors. Bugs continue to be a huge problem with major consequences for our society as we increasingly depend on software to run everything from commerce to cars. Over the last 10 to 15 years computer science researchers have developed a wide array of tools and techniques that help programmers build better software. The problem is so difficult, though, that no single approach is likely to solve the entire problem. Existing tools have focused on trying to find bugs in software by analyzing the source code. While valuable, these tools are not good at finding problems in a program's data -- they do not involve running the program, so there is no actual data to check.<br /><br />We have developed three techniques that excel at finding problems in data structures. Our tools consist of small pieces of extra code that are added to existing programs to monitor their behavior. Programmers use a kind of mathematical logic to describe concisely how the data should look. The tool code runs alongside the program code and ensures that data integrity is preserved.<br /><br />One of our central contributions is the invention of a way to make program monitoring very cheap (almost no extra cost) by piggybacking on an existing component that is present in many systems -- the garbage collector. Ordinarily, verifying the integrity of a program's data (especially large programs, like server applications) is very expensive and can slow programs down significantly. We noticed that garbage collectors already do much of this work: they visit all the data in a program looking for unused memory that can be recycled. Our programming monitors reside inside the garbage collector and perform a little bit of extra work on each data item that the garbage collector inspects.</p> <p>Over the course of the project we developed three approaches to program monitoring using the garbage collector. The first, called <span><span>GC</span></span> Assertions, provides a simple and efficient way for programmers to specify and check basic program properties. The second introduces a rich language for expressing more complex program properties and a way to translate this language into efficient program checking code. The third approach uses parallelism to speed up program monitoring using the extra processing power available on many of today's chips. This system performs program checking while the program is running, without interrupting it at all. The key challenge in this work is coordinating the monitor code with the program code so that they don't interfere with each other.<br /><br />All three systems were implemented and tested on real programs -- open source applications and systems that are widely used. We believe that these ideas could be readily adopted in commercial systems and have a significant impact on software reliability at a low cost.</p><br> <p>            Last Modified: 11/29/2014<br>      Modified by: Samuel&nbsp;Z&nbsp;Guyer</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The overall goal of this project is to develop a family of new tools to help programmers find and diagnose software errors. Bugs continue to be a huge problem with major consequences for our society as we increasingly depend on software to run everything from commerce to cars. Over the last 10 to 15 years computer science researchers have developed a wide array of tools and techniques that help programmers build better software. The problem is so difficult, though, that no single approach is likely to solve the entire problem. Existing tools have focused on trying to find bugs in software by analyzing the source code. While valuable, these tools are not good at finding problems in a program's data -- they do not involve running the program, so there is no actual data to check.  We have developed three techniques that excel at finding problems in data structures. Our tools consist of small pieces of extra code that are added to existing programs to monitor their behavior. Programmers use a kind of mathematical logic to describe concisely how the data should look. The tool code runs alongside the program code and ensures that data integrity is preserved.  One of our central contributions is the invention of a way to make program monitoring very cheap (almost no extra cost) by piggybacking on an existing component that is present in many systems -- the garbage collector. Ordinarily, verifying the integrity of a program's data (especially large programs, like server applications) is very expensive and can slow programs down significantly. We noticed that garbage collectors already do much of this work: they visit all the data in a program looking for unused memory that can be recycled. Our programming monitors reside inside the garbage collector and perform a little bit of extra work on each data item that the garbage collector inspects.  Over the course of the project we developed three approaches to program monitoring using the garbage collector. The first, called GC Assertions, provides a simple and efficient way for programmers to specify and check basic program properties. The second introduces a rich language for expressing more complex program properties and a way to translate this language into efficient program checking code. The third approach uses parallelism to speed up program monitoring using the extra processing power available on many of today's chips. This system performs program checking while the program is running, without interrupting it at all. The key challenge in this work is coordinating the monitor code with the program code so that they don't interfere with each other.  All three systems were implemented and tested on real programs -- open source applications and systems that are widely used. We believe that these ideas could be readily adopted in commercial systems and have a significant impact on software reliability at a low cost.       Last Modified: 11/29/2014       Submitted by: Samuel Z Guyer]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
