<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  CSR:  Small:  Assisted Partitioning and Automated Synthesis of Hybrid Manycore Simulators</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>04/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>388749.00</AwardTotalIntnAmount>
<AwardAmount>388749</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hong Jiang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Microprocessor designers wish to predict the performance of future microprocessors, evaluate new ideas, and validate new systems.  The primary technique they use is software-based simulation. Unfortunately, software-based simulators for manycore microprocessors are slow and will become even slower as the number of cores increases. Slow simulators imply that little exploration of the design space can be done -- few design alternatives are considered and those that are considered are not evaluated thoroughly.  Hybrid simulators, which use reconfigurable hardware devices such as Field Programmable Gate Arrays (FPGAs), could accelerate simulators by orders of magnitude, but are themselves very difficult and time-consuming to create; this difficulty arises from the need to first partition the simulator between hardware and software and then design the hardware portions.&lt;br/&gt;&lt;br/&gt;The goal of this project is to provide tools which allow a designer to easily and quickly create a hybrid simulator from a software-based simulator.  The tools will assist the designer to partition the design and then automatically synthesize the hardware portions based upon the selected partitioning.  Three different software simulation frameworks -- SystemC, Unisim, and the Liberty Simulation Environment -- will be supported.  We target a 100x simulation speed improvement relative to software-based simulators.  Achieving this target will require the development of new means to exploit parallel communication and execution between the hardware and software and new means to virtualize the hardware resources.  The resulting tools will enable researchers and practitioners to better explore the manycore design space, evaluate new ideas, and validate designs.</AbstractNarration>
<MinAmdLetterDate>07/28/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/28/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017004</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Penry</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David A Penry</PI_FULL_NAME>
<EmailAddress>dpenry@ee.byu.edu</EmailAddress>
<PI_PHON>8014227665</PI_PHON>
<NSF_ID>000069557</NSF_ID>
<StartDate>07/28/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brigham Young University</Name>
<CityName>Provo</CityName>
<ZipCode>846021231</ZipCode>
<PhoneNumber>8014223360</PhoneNumber>
<StreetAddress>A-285 ASB</StreetAddress>
<StreetAddress2><![CDATA[Campus Drive]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<StateCode>UT</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>UT03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009094012</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BRIGHAM YOUNG UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001940170</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Brigham Young University]]></Name>
<CityName>Provo</CityName>
<StateCode>UT</StateCode>
<ZipCode>846021231</ZipCode>
<StreetAddress><![CDATA[A-285 ASB]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>UT03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~388749</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Microprocessors are everywhere in our lives; they appear in computers, cell phones, applicances, vehicles, and more. In order to make ever-better products, the designers of microprocessors need to validate and predict the performance of their design ideas. The primary technique they use is software-based simulation: they write computer programs which mimic the hardware they are trying to design. These simulators are very slow and becoming slower as microprocessors become more complex. Slow simulators reduce designers' ability to explore new and potentially powerful design improvements.</p> <p>Simulators which offload much of their work onto reconfigurable hardware devices can be much faster. Such a simulator is called a <em>hybrid</em> simulator. &nbsp;However, writing a hybrid simulator is not easy and requires a great deal of effort by the microprocessor designer both to change their software and to design simulator hardware -- effort that would be better spent in designing better microprocessors. &nbsp;</p> <p>This project has developed a tool which automatically creates hybrid simulators with negligible effort on the part of the microprocessor designer. The designer provides a software-only simulator writen in the SystemC simulation framework and a small control file to the tool, and the tool creates the hybrid simulator software and hardware design. This tool has been released under an open-source license so that microprocessor researchers and designers in both industry and academia may use it.</p> <p>In the course of this project, we have made several advancements in the techniques used when translating from a programming language like C++ to hardware. &nbsp; We have also improved the interface between the software and hardware portions of hybrid simulators.</p> <p>This project has contributed to the development of several graduate and undergraduate students, providing them with experience in software development and microprocessor design. These students are working at companies such as Intel, Amazon, National Instruments, Apple, Cadence, and Northrop Grumman.</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/28/2015<br>      Modified by: David&nbsp;A&nbsp;Penry</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Microprocessors are everywhere in our lives; they appear in computers, cell phones, applicances, vehicles, and more. In order to make ever-better products, the designers of microprocessors need to validate and predict the performance of their design ideas. The primary technique they use is software-based simulation: they write computer programs which mimic the hardware they are trying to design. These simulators are very slow and becoming slower as microprocessors become more complex. Slow simulators reduce designers' ability to explore new and potentially powerful design improvements.  Simulators which offload much of their work onto reconfigurable hardware devices can be much faster. Such a simulator is called a hybrid simulator.  However, writing a hybrid simulator is not easy and requires a great deal of effort by the microprocessor designer both to change their software and to design simulator hardware -- effort that would be better spent in designing better microprocessors.    This project has developed a tool which automatically creates hybrid simulators with negligible effort on the part of the microprocessor designer. The designer provides a software-only simulator writen in the SystemC simulation framework and a small control file to the tool, and the tool creates the hybrid simulator software and hardware design. This tool has been released under an open-source license so that microprocessor researchers and designers in both industry and academia may use it.  In the course of this project, we have made several advancements in the techniques used when translating from a programming language like C++ to hardware.   We have also improved the interface between the software and hardware portions of hybrid simulators.  This project has contributed to the development of several graduate and undergraduate students, providing them with experience in software development and microprocessor design. These students are working at companies such as Intel, Amazon, National Instruments, Apple, Cadence, and Northrop Grumman.          Last Modified: 07/28/2015       Submitted by: David A Penry]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
