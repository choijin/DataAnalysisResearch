<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SDCI: HPC: Improvement: Infrastructure for Multi-Node Manycore Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>391859.00</AwardTotalIntnAmount>
<AwardAmount>397622</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Edward Walker</SignBlockName>
<PO_EMAI>edwalker@nsf.gov</PO_EMAI>
<PO_PHON>7032924863</PO_PHON>
</ProgramOfficer>
<AbstractNarration>One of the major challenges facing manycore computing today is to make parallelism accessible to the mainstream programmer. In today?s era, where nearly every computer contains a manycore processor in the form of the GPU, we have not yet successfully built the primitives and techniques that we require to make manycore processing readily available to the entire computing community.&lt;br/&gt;&lt;br/&gt;One solution to this challenge is the construction of libraries that encapsulate common programming patterns and idioms. Libraries are self-contained and thus easily added to existing projects; can easily be upgraded; and are well-suited for development and maintenance by academic groups such as ours.&lt;br/&gt;&lt;br/&gt;High-performance computing is extensively supported by such libraries on the CPU side, but there are few in the manycore world. Our CUDPP (CUDA Data-Parallel Primitives) library is widely used in the GPU computing community, albeit only on single-node (largely non-HPC) systems. We believe the next-generation OpenCL programming environment is the future of manycore programming and thus target our future work toward this standard.&lt;br/&gt;&lt;br/&gt;Our plan is to extend and support CUDPP for use in the high-performance computing community, which is increasingly adopting manycore processors as core computational engines. We will add single- and many-node primitives to CUDPP and the OpenCL-based CLDPP library, primitives we consider to be vital to the growth of the manycore HPC community. We also plan to define best practices for manycore libraries and to build not just a library but also tools to help others build libraries.&lt;br/&gt;&lt;br/&gt;The intellectual merit of this proposal lies in the development and improvement of core data structures and algorithms targeted to manycore computing environments in general and HPC computing environments specifically. Other interesting outcomes from this project include multi-node data structures and algorithms and the software engineering of tools to build manycore libraries.&lt;br/&gt;&lt;br/&gt;Like its predecessor, CUDPP, the library that will result from this work will be open-sourced and widely used in the manycore programming community. The optimization techniques and tools will also find widespread use. We will work with the OpenCL consortium and our industry partners to bring libraries into the OpenCL standard, directly impacting the entire manycore community. The PI will also continue to introduce undergraduates to research through manycore computing, including collaborating with our industrial partners to host Google Summer of Code engineers on this project.</AbstractNarration>
<MinAmdLetterDate>08/16/2010</MinAmdLetterDate>
<MaxAmdLetterDate>04/30/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1032859</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Owens</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John D Owens</PI_FULL_NAME>
<EmailAddress>jowens@ece.ucdavis.edu</EmailAddress>
<PI_PHON>5307544289</PI_PHON>
<NSF_ID>000377403</NSF_ID>
<StartDate>08/16/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Davis</Name>
<CityName>Davis</CityName>
<ZipCode>956186134</ZipCode>
<PhoneNumber>5307547700</PhoneNumber>
<StreetAddress>OR/Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1850 Research Park Dr., Ste 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>047120084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, DAVIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Davis]]></Name>
<CityName>Davis</CityName>
<StateCode>CA</StateCode>
<ZipCode>956186134</ZipCode>
<StreetAddress><![CDATA[OR/Sponsored Programs]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7231</Code>
<Text>CYBERINFRASTRUCTURE</Text>
</ProgramElement>
<ProgramElement>
<Code>7683</Code>
<Text>SOFTWARE DEVELOPEMENT FOR CI</Text>
</ProgramElement>
<ProgramReference>
<Code>7683</Code>
<Text>SOFTWARE DEVELOPEMENT FOR CI</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~391859</FUND_OBLG>
<FUND_OBLG>2014~5763</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our work focuses on techniques for efficient parallel computing. Over its history, the dominant form of computing has been serial computing, where a computer gets a series of instructions and executes them in sequence, one after another. Recently, the progress in building faster serial computers has significantly slowed; computers and programs today can run faster not by running serial programs faster but instead by running pieces of their programs simultaneously ("in parallel").</p> <p>This move to parallel computing comes with numerous challenges. Our research group primarily focuses on a particular parallel processor called the graphics processing unit, or GPU, which has historically been used to render images quickly, but can also be used to process a wide range of computing problems faster and more efficiently than serial computers. These processors are now ubiquitous in modern computing, present in nearly all cell phones and tablets, computers, and increasingly powering the most powerful supercomputers in the world. From a power and cost perspective, GPUs are superior to CPUs for the programs they can address, and if we can use them efficiently, they will be the centerpiece of much of next-generation computing.</p> <p>However, the GPU and other "manycore" processors are quite challenging to program. In our field, we talk about the "ninja gap", the performance gap between the code that experts ("ninjas") can write and what an average programmer might write. The ninja gap is large. Closing the ninja gap is vital for making the most of these processors.</p> <p>In this project we built open-source libraries for the GPU. These are building blocks that other developers can use in their own applications. We chose a liberal license for these libraries so that both industry and academic programmers can use them. In this way we ensure our work has the broadest impact.</p> <p>Our first library, CUDPP, the "CUDA Data Parallel Primitives", provides code for numerous algorithms and data structures that are broadly useful across a variety of different application domains. These data-parallel building blocks are the foundation of GPU computing. Our code is used (and used as a point of comparison) in dozens of projects around the world.</p> <p>Our second (and newer) library is Gunrock, which targets graph analytics: computations on graphs. Graphs are often visible to the general public in terms of their social networks, but are also used across a wide variety of applications such as epidemiology, genomics, networking, and many others. Compared to prior work, Gunrock makes advances in both performance and programmability, making it much easier for others to integrate high-performance graph analytics into their applications.</p> <p>Our work has both produced novel research results in parallel data structures, algorithms, and graph analytics (our "intellectual merit") as well as made our these research results available to the world in the form of our open-source libraries (our chief "broader impact").</p> <p>Thank you to the taxpayers of the United States of America for funding our work and to our NSF program directors for their leadership and guidance.</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/01/2016<br>      Modified by: John&nbsp;D&nbsp;Owens</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Our work focuses on techniques for efficient parallel computing. Over its history, the dominant form of computing has been serial computing, where a computer gets a series of instructions and executes them in sequence, one after another. Recently, the progress in building faster serial computers has significantly slowed; computers and programs today can run faster not by running serial programs faster but instead by running pieces of their programs simultaneously ("in parallel").  This move to parallel computing comes with numerous challenges. Our research group primarily focuses on a particular parallel processor called the graphics processing unit, or GPU, which has historically been used to render images quickly, but can also be used to process a wide range of computing problems faster and more efficiently than serial computers. These processors are now ubiquitous in modern computing, present in nearly all cell phones and tablets, computers, and increasingly powering the most powerful supercomputers in the world. From a power and cost perspective, GPUs are superior to CPUs for the programs they can address, and if we can use them efficiently, they will be the centerpiece of much of next-generation computing.  However, the GPU and other "manycore" processors are quite challenging to program. In our field, we talk about the "ninja gap", the performance gap between the code that experts ("ninjas") can write and what an average programmer might write. The ninja gap is large. Closing the ninja gap is vital for making the most of these processors.  In this project we built open-source libraries for the GPU. These are building blocks that other developers can use in their own applications. We chose a liberal license for these libraries so that both industry and academic programmers can use them. In this way we ensure our work has the broadest impact.  Our first library, CUDPP, the "CUDA Data Parallel Primitives", provides code for numerous algorithms and data structures that are broadly useful across a variety of different application domains. These data-parallel building blocks are the foundation of GPU computing. Our code is used (and used as a point of comparison) in dozens of projects around the world.  Our second (and newer) library is Gunrock, which targets graph analytics: computations on graphs. Graphs are often visible to the general public in terms of their social networks, but are also used across a wide variety of applications such as epidemiology, genomics, networking, and many others. Compared to prior work, Gunrock makes advances in both performance and programmability, making it much easier for others to integrate high-performance graph analytics into their applications.  Our work has both produced novel research results in parallel data structures, algorithms, and graph analytics (our "intellectual merit") as well as made our these research results available to the world in the form of our open-source libraries (our chief "broader impact").  Thank you to the taxpayers of the United States of America for funding our work and to our NSF program directors for their leadership and guidance.          Last Modified: 12/01/2016       Submitted by: John D Owens]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
