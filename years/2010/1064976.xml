<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Compiler and Chip Multiprocessor Co-Design for Scalable Efficient Data Access and Communication</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/15/2011</AwardEffectiveDate>
<AwardExpirationDate>02/28/2017</AwardExpirationDate>
<AwardTotalIntnAmount>601671.00</AwardTotalIntnAmount>
<AwardAmount>809600</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>tao li</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Multi-core computing, where several processor cores are combined together into a single chip, has become&lt;br/&gt;the standard in computer processor design. In effect, each chip has become a small parallel computer&lt;br/&gt;and leveraging the processing power of parallel computing efficiently is a difficult challenge. Parallel&lt;br/&gt;computing attempts to accelerate computational tasks by separating the work into segments that can be&lt;br/&gt;calculated independently using different processors. Unfortunately, these processors need to communicate&lt;br/&gt;with each other to complete the computational tasks correctly. This communication and the resulting&lt;br/&gt;access to data are major limiting factors to how much a computational task can be accelerated with&lt;br/&gt;multiple processors.&lt;br/&gt;This research proposes a cooperatively designed system that considers the method for storing and accessing&lt;br/&gt;data (memory), the method for communication between processors (network), the software that&lt;br/&gt;controls how programs are executed (operating system), and the design of the program executables themselves&lt;br/&gt;(compilation) to maximize the program execution speed. The key observation is that while each&lt;br/&gt;component of the system can be improved independently, each component contains information that can&lt;br/&gt;help the other components to realize even greater benefits. Just as a transportation infrastructure requires&lt;br/&gt;information about traffic patterns; for example, if traffic patterns were ignored and if highways connect&lt;br/&gt;rural areas and only side streets connect major cities, traffic would reach a standstill while highways are&lt;br/&gt;inefficiently used. Likewise, the communication network cannot be efficiently designed without information&lt;br/&gt;from programs on communication patterns.&lt;br/&gt;The outcomes from this project will be the development of ?cross-layer? design concepts for multi-core&lt;br/&gt;computer architectures that will result in performance improvements and effective use of more processor&lt;br/&gt;cores within a single chip.</AbstractNarration>
<MinAmdLetterDate>03/10/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/16/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1064976</AwardID>
<Investigator>
<FirstName>Rami</FirstName>
<LastName>Melhem</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rami Melhem</PI_FULL_NAME>
<EmailAddress>melhem@cs.pitt.edu</EmailAddress>
<PI_PHON>4126248426</PI_PHON>
<NSF_ID>000214915</NSF_ID>
<StartDate>03/10/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Alex</FirstName>
<LastName>Jones</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Alex Jones</PI_FULL_NAME>
<EmailAddress>akjones@engr.pitt.edu</EmailAddress>
<PI_PHON>4126249666</PI_PHON>
<NSF_ID>000239841</NSF_ID>
<StartDate>03/10/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sangyeun</FirstName>
<LastName>Cho</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sangyeun Cho</PI_FULL_NAME>
<EmailAddress>cho@cs.pitt.edu</EmailAddress>
<PI_PHON>4123837018</PI_PHON>
<NSF_ID>000386645</NSF_ID>
<StartDate>03/10/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pittsburgh</Name>
<CityName>Pittsburgh</CityName>
<ZipCode>152133203</ZipCode>
<PhoneNumber>4126247400</PhoneNumber>
<StreetAddress>300 Murdoch Building</StreetAddress>
<StreetAddress2><![CDATA[3420 Forbes Avenue]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>004514360</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF PITTSBURGH, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>004514360</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Pittsburgh]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133203</ZipCode>
<StreetAddress><![CDATA[300 Murdoch Building]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~393564</FUND_OBLG>
<FUND_OBLG>2013~201545</FUND_OBLG>
<FUND_OBLG>2014~214491</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Next generation computer processor architectures can no longer depend on technology scaling alone to provide enhancements in performance and energy consumption.&nbsp; As a result, modern processors have become increasingly parallel and heterogeneous to enable further performance and energy efficiency.&nbsp; Moreover, increasing amounts of memory and flexible interconnection are required to support this parallelism.&nbsp; This project made several advancements in the cooperative design of the computing cores, memory elements, and interconnection to fully leverage these resources efficiently.&nbsp; Moreover, it developed new ways to tailor these resources by learning about the application requirements from the compiler and runtime system for further system efficiency and performance improvements.</p> <p>&nbsp;</p> <p><strong>Intellectual Merit</strong></p> <p>The intellectual merit of this work can be seen in several outcomes that advance the community in the areas of cooperative design of modern computing systems.</p> <p><strong>Compiler</strong></p> <p>We developed a compiler that could determine the sharing property of data in the system.&nbsp; The compiler can determine if the data is private to a particular processing element or is shared amongst multiple processing elements.&nbsp; To improve on this categorization, we proposed a new category called &ldquo;practically private&rdquo; data, which is private for &ldquo;all intents and purposes.&rdquo; Based on these properties, we expanded the compiler to discover the intended data partitioning of an application.&nbsp; We used this information to enforce this partition in the system and guide the network to allow for fast communication between partners or small groups of processing elements that frequently share data.</p> <p>We also developed a compiled approach to utilizing emerging non-volatile memories in the system.&nbsp; The compiler uses a fast read-access mode when reads dominate and uses a slower but lower energy access mode when writes, which are typically most energy consuming in emerging memories, dominate.</p> <p><strong>Data Placement and Networks on Chip (NoCs)</strong></p> <p>We designed ?a Unique Private caching scheme targeting the class of interconnects which exploit communication locality to improve communication latency. The Unique Private cache stores the data that is mostly accessed by each processor core in the core's locally accessible ?cache bank, while leveraging dedicated high speed circuits in the interconnect to provide remote cores with fast access to shared data.&nbsp; We also proposed a partial sharing TLB (PS-TLB) for reducing off-chip translation misses without sacrificing the timing-critical requirement of on-chip ?translation. &nbsp;We further developed&nbsp;ContextPreRF: a method to enhance the performance and energy of register files constructed with hybrid conventional (e.g., SRAM/DRAM) and domain-wall memory in GPUs.</p> <p>For NoCs, we developed ?Deja Vu switching splits the NoC into two planes: a fast plane dedicated to the critical messages and a slower, more power-efficient plane dedicated only to the non-critical messages.&nbsp; Deja Vu enables reducing the voltage and frequency of one plane while reducing communication latency through circuit switching and support of advance, possibly conflicting, circuit reservations.</p> <p><strong>Encoding for Energy and Reliability</strong></p> <p>We proposed a Space Oblivious COmpression (SOCO), an in-place lightweight compression mechanism particularly designed for reducing non-volatile-based main-memory energy (such as phase change memory) rather than saving space. We further developed&nbsp;PRES, a Pseudo-Random Encoding Scheme and a Hybrid biased/random approach to increase the bit flip reduction in memories.</p> <p>We created a memory and network system co-design approach that stores data using in-place lightweight compressed pages in memory (e.g., SOCO), and utilizes this compressed data to send shortened blocks over a wireless point to point network. Additionally, we proposed a technique called source-aware layout reorganization (SALR) to improve the compressibility of certain types of data, using either software- or hardware-based approaches.&nbsp; We also created a low-cost Probabilistic Online Learning En/decoding (POLE) framework to improve energy efficiency of main memory buses by minimizing the number of 0s in the data being transmitted.</p> <p>We developed a counter-based tree structure to efficiently mitigate row hammering (wordline crosstalk) and a periodic flip encoding (PFE) to mitigate bitline crosstalk in DRAM main memory.</p> <p>&nbsp;</p> <p><strong>Broader Impact</strong></p> <p>As part of this work, we have developed several advancements that can be applied in core compiler research.&nbsp; Moreover, we have developed new simulation and validation tool methodologies to study the impact of proposed architectural and system advancements that have impacts to many other computer architecture as well as general computer science research problems.&nbsp; For example, we created In-N-Out, a fast approximate simulation method to reproduce the behavior of an out-of order superscalar processor with a reduced in-order trace. &nbsp;We developed a GPU accelerator for both cache and network simulations.&nbsp; We also developed a co-simulation methodology to integrate abstract and detailed simulators operating at different levels of precision.</p> <p>The PIs brought these research findings to outreach activities targeting female and underrepresented communities such as advisement of multiple female and African American undergraduate students through the EXCEL program and Computer Science Day, for students (including high school) in the Pittsburgh area.</p><br> <p>            Last Modified: 05/03/2017<br>      Modified by: Alex&nbsp;Jones</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Next generation computer processor architectures can no longer depend on technology scaling alone to provide enhancements in performance and energy consumption.  As a result, modern processors have become increasingly parallel and heterogeneous to enable further performance and energy efficiency.  Moreover, increasing amounts of memory and flexible interconnection are required to support this parallelism.  This project made several advancements in the cooperative design of the computing cores, memory elements, and interconnection to fully leverage these resources efficiently.  Moreover, it developed new ways to tailor these resources by learning about the application requirements from the compiler and runtime system for further system efficiency and performance improvements.     Intellectual Merit  The intellectual merit of this work can be seen in several outcomes that advance the community in the areas of cooperative design of modern computing systems.  Compiler  We developed a compiler that could determine the sharing property of data in the system.  The compiler can determine if the data is private to a particular processing element or is shared amongst multiple processing elements.  To improve on this categorization, we proposed a new category called "practically private" data, which is private for "all intents and purposes." Based on these properties, we expanded the compiler to discover the intended data partitioning of an application.  We used this information to enforce this partition in the system and guide the network to allow for fast communication between partners or small groups of processing elements that frequently share data.  We also developed a compiled approach to utilizing emerging non-volatile memories in the system.  The compiler uses a fast read-access mode when reads dominate and uses a slower but lower energy access mode when writes, which are typically most energy consuming in emerging memories, dominate.  Data Placement and Networks on Chip (NoCs)  We designed ?a Unique Private caching scheme targeting the class of interconnects which exploit communication locality to improve communication latency. The Unique Private cache stores the data that is mostly accessed by each processor core in the core's locally accessible ?cache bank, while leveraging dedicated high speed circuits in the interconnect to provide remote cores with fast access to shared data.  We also proposed a partial sharing TLB (PS-TLB) for reducing off-chip translation misses without sacrificing the timing-critical requirement of on-chip ?translation.  We further developed ContextPreRF: a method to enhance the performance and energy of register files constructed with hybrid conventional (e.g., SRAM/DRAM) and domain-wall memory in GPUs.  For NoCs, we developed ?Deja Vu switching splits the NoC into two planes: a fast plane dedicated to the critical messages and a slower, more power-efficient plane dedicated only to the non-critical messages.  Deja Vu enables reducing the voltage and frequency of one plane while reducing communication latency through circuit switching and support of advance, possibly conflicting, circuit reservations.  Encoding for Energy and Reliability  We proposed a Space Oblivious COmpression (SOCO), an in-place lightweight compression mechanism particularly designed for reducing non-volatile-based main-memory energy (such as phase change memory) rather than saving space. We further developed PRES, a Pseudo-Random Encoding Scheme and a Hybrid biased/random approach to increase the bit flip reduction in memories.  We created a memory and network system co-design approach that stores data using in-place lightweight compressed pages in memory (e.g., SOCO), and utilizes this compressed data to send shortened blocks over a wireless point to point network. Additionally, we proposed a technique called source-aware layout reorganization (SALR) to improve the compressibility of certain types of data, using either software- or hardware-based approaches.  We also created a low-cost Probabilistic Online Learning En/decoding (POLE) framework to improve energy efficiency of main memory buses by minimizing the number of 0s in the data being transmitted.  We developed a counter-based tree structure to efficiently mitigate row hammering (wordline crosstalk) and a periodic flip encoding (PFE) to mitigate bitline crosstalk in DRAM main memory.     Broader Impact  As part of this work, we have developed several advancements that can be applied in core compiler research.  Moreover, we have developed new simulation and validation tool methodologies to study the impact of proposed architectural and system advancements that have impacts to many other computer architecture as well as general computer science research problems.  For example, we created In-N-Out, a fast approximate simulation method to reproduce the behavior of an out-of order superscalar processor with a reduced in-order trace.  We developed a GPU accelerator for both cache and network simulations.  We also developed a co-simulation methodology to integrate abstract and detailed simulators operating at different levels of precision.  The PIs brought these research findings to outreach activities targeting female and underrepresented communities such as advisement of multiple female and African American undergraduate students through the EXCEL program and Computer Science Day, for students (including high school) in the Pittsburgh area.       Last Modified: 05/03/2017       Submitted by: Alex Jones]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
