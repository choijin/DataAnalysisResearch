<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Large:  A Working Set Approach to Integrated Development Environments</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>1123918.00</AwardTotalIntnAmount>
<AwardAmount>1155918</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computer software has become highly complex, with many applications now in the millions of lines of code, and program features often spread across many files and directories. As a result of this, software engineers today spend a significant amount of time struggling with navigating through all of this code as they add new features to complex applications .  This research project will develop a new user interface for programmers called Code Bubbles that visualizes the many pieces of code they need to work with and reference on the screen simultaneously, along with the interrelationships between these code fragments. Providing such a "working set" of all the relevant code fragments on one screen marks a radical departure from the way software development environments work today, where programmers can only see or work with a few locations in the code at a time and have to rely either on memory or on continuous navigation between files to examine their working set.   Preliminary user studies with software developers using an early version of Code Bubbles indicate that the approach has the potential to revolutionize the way programmers think about software development and lead to more efficient and more robust applications, and to lower development costs. &lt;br/&gt;&lt;br/&gt;Code Bubbles is based on a user interface design that facilitates the simultaneous viewing and manipulation of the fine-grained fragments of information needed to perform tasks.  Unlike conventional Interactive Development Environments, which are grounded upon the notion of viewing code at the granularity of a file, Code Bubbles displays fragments of code, documentation, and other artifacts as small bubbles which avoid occlusion by pushing each other out of the way across a large virtual display.  Text is automatically reflowed within bubbles for maximum efficiency in using screen space, and "chrome", i.e., controls for manipulating a bubble,  is kept to a minimum, again to preserve space for content. This project  will apply the Code Bubbles concept to a wide range of programming artifacts including scripting, debugging, code review, and collaboration.  An iterative design process  will be used  that involves professional developers as well as students giving feedback on visualization and user interface designs throughout  the design process.   The experiments to be conducted  as part of  the evaluation plan will include longitudinal studies in which developers "take home" the Code Bubbles system and use it on their projects and then give feedback and participate in regular interviews.  A  version of Code Bubbles will be implemented for educational purposes (high school through college) and  will be integrated  into Computer Science courses at Brown University and the University of Central Florida.  Finally, Code Bubbles  will be distributed freely, as open source, so that software developers can begin using it and also contribute their own features.</AbstractNarration>
<MinAmdLetterDate>07/28/2010</MinAmdLetterDate>
<MaxAmdLetterDate>05/07/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1012056</AwardID>
<Investigator>
<FirstName>Steven</FirstName>
<LastName>Reiss</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Steven P Reiss</PI_FULL_NAME>
<EmailAddress>spr@cs.brown.edu</EmailAddress>
<PI_PHON>4018637641</PI_PHON>
<NSF_ID>000222286</NSF_ID>
<StartDate>07/28/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Andries</FirstName>
<LastName>van Dam</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andries van Dam</PI_FULL_NAME>
<EmailAddress>avd@cs.brown.edu</EmailAddress>
<PI_PHON>4018637640</PI_PHON>
<NSF_ID>000100416</NSF_ID>
<StartDate>07/28/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brown University</Name>
<CityName>Providence</CityName>
<ZipCode>029129002</ZipCode>
<PhoneNumber>4018632777</PhoneNumber>
<StreetAddress>BOX 1929</StreetAddress>
<StreetAddress2><![CDATA[350 Eddy Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<StateCode>RI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>RI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001785542</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BROWN UNIVERSITY IN PROVIDENCE IN THE STATE OF RHODE ISLAND AND PROVIDENCE PLANTATIONS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001785542</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Brown University]]></Name>
<CityName>Providence</CityName>
<StateCode>RI</StateCode>
<ZipCode>029129002</ZipCode>
<StreetAddress><![CDATA[BOX 1929]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>RI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~377483</FUND_OBLG>
<FUND_OBLG>2011~400948</FUND_OBLG>
<FUND_OBLG>2012~377487</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><pre>Our project concentrated on improving programmer productivity.  Programmers think in terms of software fragments.  These fragments may be logical portions of code, pieces of documentation, portions of design diagrams, notes, test cases, to-do list entries, information about bugs, etc.  A particular programming task, be it creating new code, debugging existing code, or understanding code other programmers have written, is accomplished using an integrated set of such chunks.  We call this integrated set a software working set.  Existing programming environment are file-oriented and make working in terms of such working sets difficult.  They make it difficult for programmers to construct the appropriate working set for a task.  They make it difficult for programmers to switch between a working set when switching tasks. They even make it difficult to view a whole working set at once.  Studies have shown that programmers spend up to half their time just navigating between software components in order to construct or view the appropriate working set for their current tasks.  Our work attempts to address these problems by taking a new approach to software development that is centered on working sets.  We do this by redefining the user interface that the software development environment offers to the programmer.  Our approach make it easy to display software fragments of a variety of different types as a working set.  It ensures the set of fragments comprising a working set an be easily located by providing a variety of efficient navigation and history mechanisms.  It displays the various fragments in a compact manner so that the whole working set can be displayed and manipulated on a single screen.  It allows the display to highlight the relationships between the fragments to provide a more logical view of the working set. It allows working sets to be saved and shared among the different programmers on a project.  All this is reflected in the Code Bubbles programming environment which we developed under this grant.  Views of the Code Bubbles enviroment are attached.  The first view shows a working environment with a variety of different types of bubbles.  The second shows a different working set that includes some of the software visualizations we have incorportated into the environment.  The third view shows how the environment applies the working set concept to debugging, providing the programmer with the code fragments and other information that are relevant to the debugging process automatically.  As part of our research, we have made the Code Bubbles environment publically available. The latest running binary version is available from our web site at  http://www.cs.brown.edu/people/spr/codebubbles.   The source code is available from the SourceForge repository.  The running system includes development environments for Java, Python, and JavaScript. </pre> <p>&nbsp;</p><br> <p>            Last Modified: 09/18/2015<br>      Modified by: Steven&nbsp;P&nbsp;Reiss</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2015/1012056/1012056_10019257_1442608137560_bubbles11--rgov-214x142.jpg" original="/por/images/Reports/POR/2015/1012056/1012056_10019257_1442608137560_bubbles11--rgov-800width.jpg" title="The Code Bubbles Environment"><img src="/por/images/Reports/POR/2015/1012056/1012056_10019257_1442608137560_bubbles11--rgov-66x44.jpg" alt="The Code Bubbles Environment"></a> <div class="imageC...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Our project concentrated on improving programmer productivity.  Programmers think in terms of software fragments.  These fragments may be logical portions of code, pieces of documentation, portions of design diagrams, notes, test cases, to-do list entries, information about bugs, etc.  A particular programming task, be it creating new code, debugging existing code, or understanding code other programmers have written, is accomplished using an integrated set of such chunks.  We call this integrated set a software working set.  Existing programming environment are file-oriented and make working in terms of such working sets difficult.  They make it difficult for programmers to construct the appropriate working set for a task.  They make it difficult for programmers to switch between a working set when switching tasks. They even make it difficult to view a whole working set at once.  Studies have shown that programmers spend up to half their time just navigating between software components in order to construct or view the appropriate working set for their current tasks.  Our work attempts to address these problems by taking a new approach to software development that is centered on working sets.  We do this by redefining the user interface that the software development environment offers to the programmer.  Our approach make it easy to display software fragments of a variety of different types as a working set.  It ensures the set of fragments comprising a working set an be easily located by providing a variety of efficient navigation and history mechanisms.  It displays the various fragments in a compact manner so that the whole working set can be displayed and manipulated on a single screen.  It allows the display to highlight the relationships between the fragments to provide a more logical view of the working set. It allows working sets to be saved and shared among the different programmers on a project.  All this is reflected in the Code Bubbles programming environment which we developed under this grant.  Views of the Code Bubbles enviroment are attached.  The first view shows a working environment with a variety of different types of bubbles.  The second shows a different working set that includes some of the software visualizations we have incorportated into the environment.  The third view shows how the environment applies the working set concept to debugging, providing the programmer with the code fragments and other information that are relevant to the debugging process automatically.  As part of our research, we have made the Code Bubbles environment publically available. The latest running binary version is available from our web site at  http://www.cs.brown.edu/people/spr/codebubbles.   The source code is available from the SourceForge repository.  The running system includes development environments for Java, Python, and JavaScript.           Last Modified: 09/18/2015       Submitted by: Steven P Reiss]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
