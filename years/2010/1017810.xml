<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Programming Support for Checkpointing and Replay</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The fastest growing areas of IT application development are for mobile devices and browser-based applications. Smartphones are becoming more capable and widespread, which attracts both users and application developers. Browser-based applications are replacing traditional native applications.  &lt;br/&gt;&lt;br/&gt;This project investigates new programming abstractions, libraries, and tools that can increase programmer and maintainer productivity for mobile and browser-based applications. Among the programming concerns that distinguish these applications from traditional applications, the project focusses on application-level checkpointing and replay. This feature enables the application to save a compact description of its state for restoring at a future time. This is one aspect that is required for usability of mobile and browser-based applications, yet is error-prone, lacks programming support and, if solved properly, can serve as foundation for powerful testing and debugging tools.&lt;br/&gt;&lt;br/&gt;This project addresses the checkpointing and replay problem from a language-level and application-level perspective. A system of program annotations will be developed to assist programmers in developing the checkpointing and replay aspects of their programs. The annotations can be used as a basis for synthesis of the checkpointing code, and also as an input for static and dynamic analysis tools that can ensure the correctness of the checkpointing and replay aspects. &lt;br/&gt;&lt;br/&gt;This project also explores ways in which an effective checkpointing and replay mechanism for mobile and web-based applications can improve the software maintenance lifecycle, through automated test generation and improved debugging support of deployed software.</AbstractNarration>
<MinAmdLetterDate>07/31/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/31/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017810</AwardID>
<Investigator>
<FirstName>George</FirstName>
<LastName>Necula</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>George C Necula</PI_FULL_NAME>
<EmailAddress>necula@cs.berkeley.edu</EmailAddress>
<PI_PHON>5106431481</PI_PHON>
<NSF_ID>000215459</NSF_ID>
<StartDate>07/31/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<StreetAddress2><![CDATA[1608 Fourth Street, Suite 220]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>124726725</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Berkeley]]></Name>
<CityName>BERKELEY</CityName>
<StateCode>CA</StateCode>
<ZipCode>947101749</ZipCode>
<StreetAddress><![CDATA[Sponsored Projects Office]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~400000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project was to investigate programming and development techniques and tools that can increase the programmer productivity in general, and for mobile and browser-based applications in particular. Over the course of this project we have developed techniques for: cross-compilation of browser and mobile application (simplify the development of mobile application for multiple platforms by writing the application once and cross-compiling it for the other desired platforms), debugging mobile applications using reverse execution (execute the program backwards from a crash or an error to pinpoint the original source of the error), guided graphical-user interface testing (automated testing techniques for user interfaces combining simulation of pseudo-random user action with learning of the user interface based on this interaction), and responsiveness testing of user interfaces (automated test generation technique that attempts to uncover user actions that can slow down the application).</p> <p>We built prototype implementations of our research ideas on the above-mentioned topics and we performed significant experiments to validate whether these ideas work on real-world applications. We have published our results in high-impact peer-reviewed conferences in the area of programming languages and software engineering. &nbsp;In addition, where appropriate, we made available the implementation of our experimental prototypes and the experimental setups that we use in our work. For example, we have published as open source the implementation of both the SwiftHand tool that implements our automated GUI testing research, and the EventBreak tool that implements the Responsiveness Testing of User Interfaces.</p> <p><br />Our research project involves mainly graduate students, but also two postdoctoral researchers and one undergraduate student. All the students involved in the project have been actively engaged in research, publication of research papers, and presentation of results at group meetings and research conferences. Graduates from the project have taken research positions in industry (e.g., Google Inc., Azul Systems, Sift Science), and academia (Technical University Darmstadt, Germany).</p><br> <p>            Last Modified: 12/13/2015<br>      Modified by: George&nbsp;C&nbsp;Necula</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project was to investigate programming and development techniques and tools that can increase the programmer productivity in general, and for mobile and browser-based applications in particular. Over the course of this project we have developed techniques for: cross-compilation of browser and mobile application (simplify the development of mobile application for multiple platforms by writing the application once and cross-compiling it for the other desired platforms), debugging mobile applications using reverse execution (execute the program backwards from a crash or an error to pinpoint the original source of the error), guided graphical-user interface testing (automated testing techniques for user interfaces combining simulation of pseudo-random user action with learning of the user interface based on this interaction), and responsiveness testing of user interfaces (automated test generation technique that attempts to uncover user actions that can slow down the application).  We built prototype implementations of our research ideas on the above-mentioned topics and we performed significant experiments to validate whether these ideas work on real-world applications. We have published our results in high-impact peer-reviewed conferences in the area of programming languages and software engineering.  In addition, where appropriate, we made available the implementation of our experimental prototypes and the experimental setups that we use in our work. For example, we have published as open source the implementation of both the SwiftHand tool that implements our automated GUI testing research, and the EventBreak tool that implements the Responsiveness Testing of User Interfaces.   Our research project involves mainly graduate students, but also two postdoctoral researchers and one undergraduate student. All the students involved in the project have been actively engaged in research, publication of research papers, and presentation of results at group meetings and research conferences. Graduates from the project have taken research positions in industry (e.g., Google Inc., Azul Systems, Sift Science), and academia (Technical University Darmstadt, Germany).       Last Modified: 12/13/2015       Submitted by: George C Necula]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
