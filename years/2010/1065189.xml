<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Collaborative Research: An Economics-Based Framework for Assessing Software Modularization Decisions</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/01/2011</AwardEffectiveDate>
<AwardExpirationDate>04/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>499372.00</AwardTotalIntnAmount>
<AwardAmount>515332</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The research goal of this grant is to provide a scientific foundation for the economic implications of software modularization activities during software development and maintenance. A difficult question during software development is when to perform software code refactoring to restructure the code to achieve better modularity for the purpose of improving reducing complexity, improving code readability, and achieving other, so-called nonfunctional properties. The costs of modularization activities such as refactoring is significant and immediate, and the benefits are largely invisible, intangible, and long-term.  However, delaying refactoring causes modularity decay, which is blamed for significantly reduced productivity, operational failures and even canceled projects. Knowing when to refactor is a long-standing, important and difficult question.  This research will conduct extensive empirical studies to establish quantitative relationships between software project parameters and software modularity decisions. Based on the empirical data, the project will develop modularity violation detection techniques to locate modularity debts and evaluate a proposed modularization activity by combining Monte Carlo simulation based on Datar-Mathews option valuation method. These scientific foundations for economic decision-making will lead to a better understanding of the costs and benefits of modularization activities, with a goal of providing tools that will better support such decisions. The research will be performed by an interdisciplinary team of researchers with expertise in software engineering and economics.</AbstractNarration>
<MinAmdLetterDate>03/28/2011</MinAmdLetterDate>
<MaxAmdLetterDate>05/29/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1065189</AwardID>
<Investigator>
<FirstName>Yuanfang</FirstName>
<LastName>Cai</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yuanfang Cai</PI_FULL_NAME>
<EmailAddress>yfcai@cs.drexel.edu</EmailAddress>
<PI_PHON>2158952000</PI_PHON>
<NSF_ID>000244198</NSF_ID>
<StartDate>03/28/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Drexel University</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191021119</ZipCode>
<PhoneNumber>2158956342</PhoneNumber>
<StreetAddress>1505 Race St, 10th Floor</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002604817</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DREXEL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002604817</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Drexel University]]></Name>
<CityName>Philadelphia</CityName>
<StateCode>PA</StateCode>
<ZipCode>191021119</ZipCode>
<StreetAddress><![CDATA[1505 Race St, 10th Floor]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~91790</FUND_OBLG>
<FUND_OBLG>2012~132882</FUND_OBLG>
<FUND_OBLG>2013~170785</FUND_OBLG>
<FUND_OBLG>2014~103915</FUND_OBLG>
<FUND_OBLG>2015~15960</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Towards our goal of creating a modularity decision-making system, we have&nbsp;proposed a framework that allows the user to conduct Return-On-Investment (ROI) calculations for refactoring activities. We have used this framework to help multiple software organizations quantity the technical debt they have incurred due to modularity issues and to make concrete refactoring decisions and plans. This framework is based on the following breakthroughs resulting from this grant:</p> <ol> <li>We have created a novel approach to pinpoint modularity problems that have incurred significant maintenance costs. Moreover, our hotspot detection approach can identify the precise architecture flaws and, using this information, an architect can plan refactoring strategies. These techniques make it possible to quantify the scope and amount of maintenance costs incurred, and hence aid in the choice of refactoring strategies and aid in the estimation of refactoring costs. </li> <li>We have proposed a novel architecture model, called Design Rule Space (DRSpace), that models software architecture as multiple overlapping design spaces. This new model makes it possible to divide and conquer a complex system, and to pinpoint architecture flaws. </li> <li>We have created a novel modularity metric, called Decoupling Level (DL), that captures the degree to which an architecture is properly modularized and can hence support the parallel efforts of multiple developers. DL can be used to compare projects of different characters and to monitor architecture degradation. Using this metric, the users do not need to wait for modularity debt to accumulate. Instead, management should be able to judge the quality of the project based on comparison with industrial benchmarks. </li> <li>All of these techniques are supported by our tool chain, called Titan, that provides the integrated analysis of software&nbsp;structure, evolution history, and file bugginess. Titan includes tools to extract&nbsp;evolution coupling from a given period of a project&rsquo;s revision history, to extract structural relations from&nbsp;the output of Understand (a commercial reverse engineering tool), and a GUI that can visualize and allow a user to manipulate a representation of software architecture and its evolutionary structure.</li> </ol> <p>Using Titan, we have investigated the relationships between file bugginess&nbsp;and software modular structure for more than 150 open-source and industrial projects, through our industrial and academic collaborators. For many of the projects that we have analyzed we have collected sufficient information to be able to identify architecture flaws (hotspots), identify refactoring opportunities, and make return on investment predictions on the proposed refactorings.</p> <p>Titan has been licensed by several multinational industrial organizations. We have worked with these organizations who have committed to refactorings, to document longitudinal case studies of doing refactorings, so that we can validate the predictions that we made based on our analyses.</p> <p>Our PhD student, Lu Xiao, won both the first place in&nbsp;ACM Student Research Competition&nbsp;(SRC) hosted in FSE 2014, and the ACM research competition grand finale.&nbsp;</p> <p>We have published two journal papers, numerous conference papers, a book chapter, and a pending patent.</p> <p>The journal papers are:</p> <ul> <li>M.      Naedele, H-M Chen, R. Kazman, Y. Cai, L. Xiao, C. Silva, &ldquo;Manufacturing      Execution Systems: A Vision for Managing Software Development&rdquo;,&nbsp;<em>Journal of Systems and Software</em>, 2015.</li> </ul> <ul> <li>M. Naedele, R. Kazman. Y. Cai, &ldquo;Making the Case for a &ldquo;Manufacturing Execution System&rdquo; for Software Development&rdquo;, <em>Communications of the ACM</em>, December 2014, 57:12, 33-36.</li> </ul> <p>Our representative papers published in the premier software engineering and software architecture conferences include the following:</p> <ul> <li>L.      Xiao, Y. Cai, R. Kazman, R. Mo, Q. Feng, &ldquo;Identifying and Quantifying      Architectural Debts&rdquo;, <em>Proceedings of      the International Conference on Software Engineering (ICSE) 2016</em>,      (Austin, TX), May 2016. </li> <li>R.      Mo, Y. Cai, R. Kazman, L. Xiao, Q. Feng, &ldquo;Decoupling Level: A New Metric      for Architectural Maintenance Complexity&rdquo;, <em>Proceedings of the International Conference on Software      Engineering (ICSE) 2016</em>, (Austin, TX), May 2016.</li> <li>R.      Mo, Y. Cai, R. Kazman, L. Xiao, &ldquo;Hotspot Patterns: The Formal Definition      and Automatic Detection of Architecture Smells&rdquo;,&nbsp;<em>Proceedings of The Working IEEE/IFIP Conference on Software      Architecture</em>&nbsp;<em>(WICSA 2015</em>),      (Montreal, Canada), May 2015.</li> <li>R.      Kazman, Y. Cai, R. Mo, Q. Feng, L. Xiao, S. Haziyev, V. Fedak, A.      Shapochka, &ldquo;A Case Study in Locating the Architectural Roots of Technical      Debt&rdquo;,&nbsp;<em>Proceedings of the International      Conference on Software Engineering (ICSE) 2015</em>, (Florence,      Italy), May 2015. &nbsp; &nbsp;</li> <li>L.      Xiao, Y. Cai, R. Kazman, &ldquo;Titan: A Toolset That Connects Software      Architecture with Quality Analysis&rdquo;, <em>Proceedings of the 22nd      ACM SIGSOFT International Symposium on the Foundations of Software      Engineering (FSE 2014)</em>, (Hong Kong), November 2014.</li> <li>L.      Xiao, Y. Cai, R. Kazman, &ldquo;Design Rule Spaces: A New Form of Architecture      Insights&rdquo;, <em>Proceedings of the      International Conference on Software Engineering (ICSE) 2014</em>, (Hyderabad,      India), May 2014.</li> </ul> <p>&nbsp;</p> <p>Finally, we have published one book chapter on the&nbsp;modularity decision-support system framework for reasoning about architecture/modularity debt:</p> <ul> <li>Y. Cai, R. Kazman, C. A. Silva, L.      Xiao, H-M Chen, &ldquo;A Decision-Support System Approach to Economics-Driven      Modularity Evaluation&rdquo;, in&nbsp;<em>Economics-Driven Software Architecture</em>,      Elsevier, 2014.</li> </ul> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/29/2016<br>      Modified by: Yuanfang&nbsp;Cai</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Towards our goal of creating a modularity decision-making system, we have proposed a framework that allows the user to conduct Return-On-Investment (ROI) calculations for refactoring activities. We have used this framework to help multiple software organizations quantity the technical debt they have incurred due to modularity issues and to make concrete refactoring decisions and plans. This framework is based on the following breakthroughs resulting from this grant:  We have created a novel approach to pinpoint modularity problems that have incurred significant maintenance costs. Moreover, our hotspot detection approach can identify the precise architecture flaws and, using this information, an architect can plan refactoring strategies. These techniques make it possible to quantify the scope and amount of maintenance costs incurred, and hence aid in the choice of refactoring strategies and aid in the estimation of refactoring costs.  We have proposed a novel architecture model, called Design Rule Space (DRSpace), that models software architecture as multiple overlapping design spaces. This new model makes it possible to divide and conquer a complex system, and to pinpoint architecture flaws.  We have created a novel modularity metric, called Decoupling Level (DL), that captures the degree to which an architecture is properly modularized and can hence support the parallel efforts of multiple developers. DL can be used to compare projects of different characters and to monitor architecture degradation. Using this metric, the users do not need to wait for modularity debt to accumulate. Instead, management should be able to judge the quality of the project based on comparison with industrial benchmarks.  All of these techniques are supported by our tool chain, called Titan, that provides the integrated analysis of software structure, evolution history, and file bugginess. Titan includes tools to extract evolution coupling from a given period of a project?s revision history, to extract structural relations from the output of Understand (a commercial reverse engineering tool), and a GUI that can visualize and allow a user to manipulate a representation of software architecture and its evolutionary structure.   Using Titan, we have investigated the relationships between file bugginess and software modular structure for more than 150 open-source and industrial projects, through our industrial and academic collaborators. For many of the projects that we have analyzed we have collected sufficient information to be able to identify architecture flaws (hotspots), identify refactoring opportunities, and make return on investment predictions on the proposed refactorings.  Titan has been licensed by several multinational industrial organizations. We have worked with these organizations who have committed to refactorings, to document longitudinal case studies of doing refactorings, so that we can validate the predictions that we made based on our analyses.  Our PhD student, Lu Xiao, won both the first place in ACM Student Research Competition (SRC) hosted in FSE 2014, and the ACM research competition grand finale.   We have published two journal papers, numerous conference papers, a book chapter, and a pending patent.  The journal papers are:  M.      Naedele, H-M Chen, R. Kazman, Y. Cai, L. Xiao, C. Silva, "Manufacturing      Execution Systems: A Vision for Managing Software Development", Journal of Systems and Software, 2015.   M. Naedele, R. Kazman. Y. Cai, "Making the Case for a "Manufacturing Execution System" for Software Development", Communications of the ACM, December 2014, 57:12, 33-36.   Our representative papers published in the premier software engineering and software architecture conferences include the following:  L.      Xiao, Y. Cai, R. Kazman, R. Mo, Q. Feng, "Identifying and Quantifying      Architectural Debts", Proceedings of      the International Conference on Software Engineering (ICSE) 2016,      (Austin, TX), May 2016.  R.      Mo, Y. Cai, R. Kazman, L. Xiao, Q. Feng, "Decoupling Level: A New Metric      for Architectural Maintenance Complexity", Proceedings of the International Conference on Software      Engineering (ICSE) 2016, (Austin, TX), May 2016. R.      Mo, Y. Cai, R. Kazman, L. Xiao, "Hotspot Patterns: The Formal Definition      and Automatic Detection of Architecture Smells", Proceedings of The Working IEEE/IFIP Conference on Software      Architecture (WICSA 2015),      (Montreal, Canada), May 2015. R.      Kazman, Y. Cai, R. Mo, Q. Feng, L. Xiao, S. Haziyev, V. Fedak, A.      Shapochka, "A Case Study in Locating the Architectural Roots of Technical      Debt", Proceedings of the International      Conference on Software Engineering (ICSE) 2015, (Florence,      Italy), May 2015.     L.      Xiao, Y. Cai, R. Kazman, "Titan: A Toolset That Connects Software      Architecture with Quality Analysis", Proceedings of the 22nd      ACM SIGSOFT International Symposium on the Foundations of Software      Engineering (FSE 2014), (Hong Kong), November 2014. L.      Xiao, Y. Cai, R. Kazman, "Design Rule Spaces: A New Form of Architecture      Insights", Proceedings of the      International Conference on Software Engineering (ICSE) 2014, (Hyderabad,      India), May 2014.      Finally, we have published one book chapter on the modularity decision-support system framework for reasoning about architecture/modularity debt:  Y. Cai, R. Kazman, C. A. Silva, L.      Xiao, H-M Chen, "A Decision-Support System Approach to Economics-Driven      Modularity Evaluation", in Economics-Driven Software Architecture,      Elsevier, 2014.              Last Modified: 07/29/2016       Submitted by: Yuanfang Cai]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
