<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>FIA: Collaborative Research: NEBULA: A Future Internet That Supports Trustworthy Cloud Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>577602.00</AwardTotalIntnAmount>
<AwardAmount>664242</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Darleen Fisher</SignBlockName>
<PO_EMAI>dlfisher@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Cloud computing provides economic advantages from shared resources, but security is a major risk for remote operations and a major barrier to the approach, with challenges for both hosts and the network. NEBULA is a potential future Internet architecture providing trustworthy networking for the emerging cloud computing model of always-available network services. NEBULA addresses many network security issues, including data availability with a new core architecture (NCore) based on redundant connections to and between NEBULA core routers, accountability and trust with a new policy-driven data plane (NDP), and extensibility with a new control plane (NVENT) that supports network virtualization, enabling results from other future Internet architectures to be incorporated in NEBULA. NEBULA?s data plane uses cryptographic tokens as demonstrable proofs that a path was both authorized and followed. The NEBULA control plane provides one or more authorized paths to NEBULA edge nodes; multiple paths provide reliability and load-balancing. The NEBULA core uses redundant high-speed paths between data centers and core routers, as well as fault-tolerant router software, for always-on core networking. The NEBULA architecture removes network (in) security as a prohibitive factor that would otherwise prevent the realization of many cloud computing applications, such as electronic health records and data from medical sensors. NEBULA will produce a working system that is deployable on core routers and is viable from both an economic and a regulatory perspective.</AbstractNarration>
<MinAmdLetterDate>08/26/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/25/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1040083</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Walfish</LastName>
<PI_MID_INIT>H</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael H Walfish</PI_FULL_NAME>
<EmailAddress>mwalfish@gmail.com</EmailAddress>
<PI_PHON>6172337067</PI_PHON>
<NSF_ID>000653725</NSF_ID>
<StartDate>08/26/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787595316</ZipCode>
<StreetAddress><![CDATA[3925 W Braker Lane, Ste 3.340]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7363</Code>
<Text>RES IN NETWORKING TECH &amp; SYS</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~385068</FUND_OBLG>
<FUND_OBLG>2012~192534</FUND_OBLG>
<FUND_OBLG>2013~86640</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>INTELLECTUAL PROGRESS</p> <p><br />In the context of the Nebula research effort, this project has produced specific results in the design and implementation of reliable failure detectors.</p> <p><br />The context for this work is that one of the chief difficulties of building a distributed system is the possibility of failures: if node A does not hear from a remote node B, what should it do? If A assumes that B has failed, then the system proceeds on a false premise (for example,if A begins to handle requests that were meant for B, but B is actually working, then a so-called "split brain" scenario could result.) If A assumes that B has not failed, but B has in fact failed, then A will wait around for a long time, and the system will not make progress.</p> <p><br />A _failure detector_ draws an envelope around the difficulty above: it is a software module that provides a report of failures to the host that is using it. But then how should one build a failure detector?</p> <p><br />The PI has worked on several systems that ease the various trade-offs that arise in building failure detectors. &nbsp;_Falcon_ demonstrates the feasibility of a failure detector that is simultaneously timely,&nbsp;accurate, and unobtrusive; it works by gathering "inside information" (from within the layers of the monitored system), which gives Falcon visibility into what is truly going on in the remote host.</p> <p><br />_Albatross_ addresses a limitation of Falcon: when there are network failures, Falcon blocks. By contrast, Albatross is designed to handle network failures. Albatross works by leveraging Software-Defined Networking (SDN).&nbsp;</p> <p><br />Finally, _Pigeon_ presents a new abstraction that gives more information than just up-versus-down; using this abstraction, applications can take an appropriate action for the failure at hand (initiating recovery more quickly, waiting it out, etc.).</p> <p><br />All three systems (Falcon, Pigeon, Albatross) demonstrate the advantage of leveraging local information. Furthermore, these three systems enable new ways of building networks and distributed systems. Falcon and&nbsp;Albatross enable the construction of simpler distributed applications (since these applications are freed from having to handle the case of a mistaken failure report). With Pigeon, applications can use its reports to develop a tailored recovery strategy, which enhances availability.</p> <p><br />IMPACT, DISSEMINATION, AND EDUCATION</p> <p><br />The results of the project have been disseminated in competitive peer-reviewed venues.</p> <p><br />The project has produced education benefits at the graduate and undergraduate levels. The project has provided crucial research training to a number of graduate students at UT Austin; these students have gained experience in all aspects of research. Also, the PI routinely involves undergraduates in research projects; indeed, some of the publications that have come out of this project have undergraduate co-authors.</p><br> <p>            Last Modified: 07/01/2015<br>      Modified by: Michael&nbsp;Walfish</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ INTELLECTUAL PROGRESS   In the context of the Nebula research effort, this project has produced specific results in the design and implementation of reliable failure detectors.   The context for this work is that one of the chief difficulties of building a distributed system is the possibility of failures: if node A does not hear from a remote node B, what should it do? If A assumes that B has failed, then the system proceeds on a false premise (for example,if A begins to handle requests that were meant for B, but B is actually working, then a so-called "split brain" scenario could result.) If A assumes that B has not failed, but B has in fact failed, then A will wait around for a long time, and the system will not make progress.   A _failure detector_ draws an envelope around the difficulty above: it is a software module that provides a report of failures to the host that is using it. But then how should one build a failure detector?   The PI has worked on several systems that ease the various trade-offs that arise in building failure detectors.  _Falcon_ demonstrates the feasibility of a failure detector that is simultaneously timely, accurate, and unobtrusive; it works by gathering "inside information" (from within the layers of the monitored system), which gives Falcon visibility into what is truly going on in the remote host.   _Albatross_ addresses a limitation of Falcon: when there are network failures, Falcon blocks. By contrast, Albatross is designed to handle network failures. Albatross works by leveraging Software-Defined Networking (SDN).    Finally, _Pigeon_ presents a new abstraction that gives more information than just up-versus-down; using this abstraction, applications can take an appropriate action for the failure at hand (initiating recovery more quickly, waiting it out, etc.).   All three systems (Falcon, Pigeon, Albatross) demonstrate the advantage of leveraging local information. Furthermore, these three systems enable new ways of building networks and distributed systems. Falcon and Albatross enable the construction of simpler distributed applications (since these applications are freed from having to handle the case of a mistaken failure report). With Pigeon, applications can use its reports to develop a tailored recovery strategy, which enhances availability.   IMPACT, DISSEMINATION, AND EDUCATION   The results of the project have been disseminated in competitive peer-reviewed venues.   The project has produced education benefits at the graduate and undergraduate levels. The project has provided crucial research training to a number of graduate students at UT Austin; these students have gained experience in all aspects of research. Also, the PI routinely involves undergraduates in research projects; indeed, some of the publications that have come out of this project have undergraduate co-authors.       Last Modified: 07/01/2015       Submitted by: Michael Walfish]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
