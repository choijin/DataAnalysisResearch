<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  Always-On Static and Dynamic Feedback</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>480586.00</AwardTotalIntnAmount>
<AwardAmount>512586</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software developers aim to create reliable software at low cost.  Two types of tools that help in this task are static and dynamic analysis tools.&lt;br/&gt;Static analysis tools reason about the program source code, without ever running the program; a widely-used example is type systems.  Dynamic analysis tools observe the program as it executes; a widely-used example is testing.  Dynamic and static feedback provide complementary benefits, neither one dominates the other, and at any moment only the programmer knows which one would be most useful.  Unfortunately, current programming languages impose too rigid a model of the development process:  they favor either static or dynamic tools, which prevents the programmer from freely using the other variety.  We propose a new approach, in which the developer always has access to immediate execution feedback, and always has access to sound static feedback.  The key broader impact is to permit developers to work the way they find most natural and effective, which will improve reliability and reduce cost.  Developers will create software that is more reliable than that created in an environment that favors dynamic analysis.&lt;br/&gt;Developers will work faster than they can in an environment that favors static analysis.&lt;br/&gt;&lt;br/&gt;It is well-known that dynamically-typed scripting languages and statically-typed programming languages have complementary strengths.  For example, scripting can permit faster and more flexible program development and modification, whereas programming languages can yield more reliable and maintainable applications.  Our goal is to give programmers the benefits of both scripting languages and programming languages, so that a programmer can shift back and forth between the two paradigms depending on the task at hand.  In our approach, a programmer can view and execute a program through the lens of sound static typing, or can view and execute a program through the lens of dynamic typing with no statically-imposed restrictions. Furthermore, the programmer can switch between these two views as often as desired, or can use them both simultaneously, depending on the programmer's current information needs.  In our approach, a programmer may temporarily disable the type system and test the code, even if the code does not type-check.  The code is executed as if no types had been written.  Type errors (inconsistencies between the execution and the declared types) are logged but do not terminate execution.  The logged errors can be examined if the test fails or deferred if the test succeeds.  This mode is appropriate for tasks such as initial prototyping, evolving an interface, representation changes, library replacement, and exploratory refactoring.</AbstractNarration>
<MinAmdLetterDate>08/18/2010</MinAmdLetterDate>
<MaxAmdLetterDate>04/04/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1016701</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Ernst</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael D Ernst</PI_FULL_NAME>
<EmailAddress>mernst@cs.washington.edu</EmailAddress>
<PI_PHON>2062210965</PI_PHON>
<NSF_ID>000310100</NSF_ID>
<StartDate>08/18/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington]]></Name>
<CityName>Seattle</CityName>
<StateCode>WA</StateCode>
<ZipCode>981950001</ZipCode>
<StreetAddress><![CDATA[4333 Brooklyn Ave NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~480586</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project has developed new tools and techniques to help software developers find, fix, and prevent errors. &nbsp;Our focus was on combining two different approaches (static and dynamic analysis) that had previously been considered incompatible.<br />The software developers who write computer programs are fallible: &nbsp;they sometimes make mistakes, called bugs. &nbsp;These bugs can cause loss of time, money, or even life. &nbsp;Software developers use tools to help them find and fix bugs in their programs. &nbsp;These tools fall into two general categories: &nbsp;static analysis and dynamic analysis. &nbsp;A typical static analysis is a compiler. &nbsp;A typical dynamic analysis is testing.<br />A static analysis reasons about all the ways the program can behave, by examining the program source code. &nbsp;However, a static analysis does not run the program. &nbsp;By contrast, a dynamic analysis runs the program and observes what the program does.<br />Each style of analysis has its own advantages and disadvantages. &nbsp;A static analysis virtually explores every possible execution of a program, so no bug escapes undetected. &nbsp;However, a static analysis issues many false alarms about potential problems that can never occur in practice. &nbsp;By contrast, a dynamic analysis observes actual executions of a program: &nbsp;it has all details about those executions and thus is more precise and issues no false alarms. &nbsp;Furthermore, a dynamic analysis can be run even if the program is not already perfect. &nbsp;However, a dynamic analysis gives no guarantee about executions that it does not observe.<br />A software developer prefers to use static analysis for some tasks and dynamic analysis for other tasks. &nbsp;Unfortunately, the software developer usually doesn't have a choice. &nbsp;Most tools perform either static or dynamic analysis, but not both. &nbsp;The choice is dictated by the tool designer, or sometimes by the programming language designer: &nbsp;each programming language's type system is either static or dynamic. &nbsp;As a result, the software developer is forced to use a tool that is ill-suited to the current task.<br />Our ambitious goal was to create hybrid tools that offer the best of both worlds: &nbsp;they offer guarantees like static tools, but they can be easily run and are precise like dynamic tools. &nbsp;We started with type systems, where we produced tools that either guarantee that the program is correct, or else transform it so that it can run anyway, despite the compiler's typical requirement that the program type-checks. &nbsp;We have extended our work to other domains including testing, mutation, and mining.<br />This project is of significant intellectual merit. &nbsp;It has devised a new approach that combines the best of static and dynamic typing, rather than the worst (such as getting no static guarantee of correctness). &nbsp;As opposed to previous techniques, it starts from a sound static type system rather than an unsound dynamic one. &nbsp;We have devised new implementation strategies and optimizations, formalized our results, and done extensive experiments that yielded insight into the practices and needs of programmers. &nbsp;Furthermore, our ideas unexpectedly led to other areas beyond type-checking and yielded similar scientific breakthroughs there.<br />The immediate impact of our project is to improve software development. &nbsp;Developers who use our tools can spend less time and money, and will be less frustrated, while producing higher-quality software that suffers fewer bugs. &nbsp;The broader impacts touch on all of society that uses software -- that is, on all of society! &nbsp;Users can spend less on software and suffer fewer crashes, unavailability, data loss, and error; they can do their jobs more effectively and use scarce time and money more productively. &nbsp;In addition, we have trained numerous un...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project has developed new tools and techniques to help software developers find, fix, and prevent errors.  Our focus was on combining two different approaches (static and dynamic analysis) that had previously been considered incompatible. The software developers who write computer programs are fallible:  they sometimes make mistakes, called bugs.  These bugs can cause loss of time, money, or even life.  Software developers use tools to help them find and fix bugs in their programs.  These tools fall into two general categories:  static analysis and dynamic analysis.  A typical static analysis is a compiler.  A typical dynamic analysis is testing. A static analysis reasons about all the ways the program can behave, by examining the program source code.  However, a static analysis does not run the program.  By contrast, a dynamic analysis runs the program and observes what the program does. Each style of analysis has its own advantages and disadvantages.  A static analysis virtually explores every possible execution of a program, so no bug escapes undetected.  However, a static analysis issues many false alarms about potential problems that can never occur in practice.  By contrast, a dynamic analysis observes actual executions of a program:  it has all details about those executions and thus is more precise and issues no false alarms.  Furthermore, a dynamic analysis can be run even if the program is not already perfect.  However, a dynamic analysis gives no guarantee about executions that it does not observe. A software developer prefers to use static analysis for some tasks and dynamic analysis for other tasks.  Unfortunately, the software developer usually doesn't have a choice.  Most tools perform either static or dynamic analysis, but not both.  The choice is dictated by the tool designer, or sometimes by the programming language designer:  each programming language's type system is either static or dynamic.  As a result, the software developer is forced to use a tool that is ill-suited to the current task. Our ambitious goal was to create hybrid tools that offer the best of both worlds:  they offer guarantees like static tools, but they can be easily run and are precise like dynamic tools.  We started with type systems, where we produced tools that either guarantee that the program is correct, or else transform it so that it can run anyway, despite the compiler's typical requirement that the program type-checks.  We have extended our work to other domains including testing, mutation, and mining. This project is of significant intellectual merit.  It has devised a new approach that combines the best of static and dynamic typing, rather than the worst (such as getting no static guarantee of correctness).  As opposed to previous techniques, it starts from a sound static type system rather than an unsound dynamic one.  We have devised new implementation strategies and optimizations, formalized our results, and done extensive experiments that yielded insight into the practices and needs of programmers.  Furthermore, our ideas unexpectedly led to other areas beyond type-checking and yielded similar scientific breakthroughs there. The immediate impact of our project is to improve software development.  Developers who use our tools can spend less time and money, and will be less frustrated, while producing higher-quality software that suffers fewer bugs.  The broader impacts touch on all of society that uses software -- that is, on all of society!  Users can spend less on software and suffer fewer crashes, unavailability, data loss, and error; they can do their jobs more effectively and use scarce time and money more productively.  In addition, we have trained numerous undergraduate and graduate students and published over a dozen technical papers.             Last Modified: 09/01/2015       Submitted by: Michael D Ernst]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
