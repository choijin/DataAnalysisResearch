<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Data Driven Analysis of Security Attacks in Large Scale Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Deborah Shands</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Despite sophisticated monitoring tools for runtime detection of intruders and techniques designed to protect computing systems from a wide range of attacks, attackers continually penetrate even well-protected systems. Attack data from real, large-scale production environments (National Center for Supercomputing Applications (NCSA) at Illinois, in this work) are used as a basis for characterizing and modeling attacker behavior and for uncovering deficiencies of the monitoring infrastructure. Increased understanding of attacks arising from these analysis and modeling activities significantly contributes to improvements in secure systems analysis and design. The analyses uncover new and realistic attack scenarios that can guide the design of enhancements to improve system protection against malicious activities at every level. Understanding real attack patterns and classes through detailed forensics pinpoints the open holes in a network/system and characterizes attacker behavior. In-depth study of the data allows investigating actions and intentions of the attacker, and creates a foundation for the design of an automated tool to assist in data collection, analysis, and response. The size and variety of the data enable a flexible framework to be developed that can incorporate insights gained from attacks yet unseen.&lt;br/&gt;&lt;br/&gt;This research produces sound methods for automated (semi-automated) analysis of large populations of data on security attacks and develops tools to facilitate the analysis and detection. The goals are to understand the attack patterns, establish comprehensive models to capture attacker behavior, and use the models to enable development of techniques for rapid detection of malicious tampering with the system.</AbstractNarration>
<MinAmdLetterDate>08/07/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/07/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018503</AwardID>
<Investigator>
<FirstName>Ravishankar</FirstName>
<LastName>Iyer</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ravishankar Iyer</PI_FULL_NAME>
<EmailAddress>rkiyer@illinois.edu</EmailAddress>
<PI_PHON>2173339732</PI_PHON>
<NSF_ID>000444242</NSF_ID>
<StartDate>08/07/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Zbigniew</FirstName>
<LastName>Kalbarczyk</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zbigniew Kalbarczyk</PI_FULL_NAME>
<EmailAddress>kalbarcz@illinois.edu</EmailAddress>
<PI_PHON>2172447110</PI_PHON>
<NSF_ID>000296509</NSF_ID>
<StartDate>08/07/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>Champaign</CityName>
<StateCode>IL</StateCode>
<ZipCode>618207406</ZipCode>
<StreetAddress><![CDATA[1901 South First Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>Project Goals</strong></p> <p>This project lays down the foundations for methods to: (i) characterize and model attacker behavior, (ii) uncover deficiencies of the security monitoring infrastructure and (iii) aid in the design of new techniques for security monitoring. The data on security incidents from a real large-scale production environment (at the National Center for Supercomputing Applications, NCSA, at Illinois) are used as a basis for the analysis. The investigations provide new and realistic attack scenarios and patterns for security researchers and the results can be used to guide the design of enhancements to improve system protection against malicious activities at every level of the system. By studying the data more intricately, we can investigate essentially every action and intention of the attacker and create a foundation for the design of an automated tool to assist in data collection, analysis, and response. The size and variety of the data allow us to develop a flexible framework and toolset with an ability to incorporate lessons and insights gained from new attacks that will surely happen.</p> <p><strong>Approach</strong></p> <p>Attackers often use stolen credential to enter a target system while disguised as a legitimate user, effectively bypassing conventional defense measures, e.g., network firewalls. Such masquerade attacks are frequently discovered in the final stage of delivering the attack payload, resulting in a leak of confidential data or interruption of critical system services. Our objective is to detect such masquerade attacks in their early stages, before the attackers execute their attack payloads, and to provide a supporting tool for security engineers to effectively prevent such attacks.</p> <p>In order to solve the challengers of detecting masquerade attacks, we propose AttackTagger, a software framework based on use of <em>Factor Graphs</em> (an abstract probabilistic graphical model) to represent functional relation between the observed evidence (the event sequence) and the hidden system/user states to detect compromised users. Figure 1 shows an example of a real multi-stage security incident and its representation using the factor graph abstraction. Events corresponding to an incident where an attacker penetrates the system using stolen credentials, are shown at the top of Figure 1. A user logs (from a remote host) into the target system using the secure shell (SSH); then, a source file (vm64.c) is downloaded from a server; finally, the SSH daemon (SSHd) is restarted. Post-incident analysis showed that the attacker downloaded, compiled, and executed a privilege escalation exploit on the target node. In order to harvest credentials of users logging to the compromised node, the attacker escalated to the root, and injected credential collecting code to the original SSHd, forcing it to restart. A generic process of labeling the state sequences (from extraction of events from the data logs to attack detection) using factor graph is depicted in Figure 2.</p> <p>In order to detect attackers at run-time, we convert raw logs to discrete events and label each event with a user state which represents user suspiciousness level (<em>benign, suspicious, </em>or <em>malicious</em>). For example, the event <em>login </em>(in Figure 1) is labeled as benign (based on our prior knowledge). A factor function (black squares in Figure 1) is a function that takes as inputs event labels and outputs a discrete value. The factor functions are defined manually based on analysis of data on past security incidents, knowledge of the target system, and experience of security experts.</p> <p>The compromised user is identified when the last label, in the sequence representing the evolution of the user states over time, indicates that the user state is malicious.</p> <p><strong>Evaluation</strong></p> <p>We apply this approach to detect masquerade a...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Project Goals  This project lays down the foundations for methods to: (i) characterize and model attacker behavior, (ii) uncover deficiencies of the security monitoring infrastructure and (iii) aid in the design of new techniques for security monitoring. The data on security incidents from a real large-scale production environment (at the National Center for Supercomputing Applications, NCSA, at Illinois) are used as a basis for the analysis. The investigations provide new and realistic attack scenarios and patterns for security researchers and the results can be used to guide the design of enhancements to improve system protection against malicious activities at every level of the system. By studying the data more intricately, we can investigate essentially every action and intention of the attacker and create a foundation for the design of an automated tool to assist in data collection, analysis, and response. The size and variety of the data allow us to develop a flexible framework and toolset with an ability to incorporate lessons and insights gained from new attacks that will surely happen.  Approach  Attackers often use stolen credential to enter a target system while disguised as a legitimate user, effectively bypassing conventional defense measures, e.g., network firewalls. Such masquerade attacks are frequently discovered in the final stage of delivering the attack payload, resulting in a leak of confidential data or interruption of critical system services. Our objective is to detect such masquerade attacks in their early stages, before the attackers execute their attack payloads, and to provide a supporting tool for security engineers to effectively prevent such attacks.  In order to solve the challengers of detecting masquerade attacks, we propose AttackTagger, a software framework based on use of Factor Graphs (an abstract probabilistic graphical model) to represent functional relation between the observed evidence (the event sequence) and the hidden system/user states to detect compromised users. Figure 1 shows an example of a real multi-stage security incident and its representation using the factor graph abstraction. Events corresponding to an incident where an attacker penetrates the system using stolen credentials, are shown at the top of Figure 1. A user logs (from a remote host) into the target system using the secure shell (SSH); then, a source file (vm64.c) is downloaded from a server; finally, the SSH daemon (SSHd) is restarted. Post-incident analysis showed that the attacker downloaded, compiled, and executed a privilege escalation exploit on the target node. In order to harvest credentials of users logging to the compromised node, the attacker escalated to the root, and injected credential collecting code to the original SSHd, forcing it to restart. A generic process of labeling the state sequences (from extraction of events from the data logs to attack detection) using factor graph is depicted in Figure 2.  In order to detect attackers at run-time, we convert raw logs to discrete events and label each event with a user state which represents user suspiciousness level (benign, suspicious, or malicious). For example, the event login (in Figure 1) is labeled as benign (based on our prior knowledge). A factor function (black squares in Figure 1) is a function that takes as inputs event labels and outputs a discrete value. The factor functions are defined manually based on analysis of data on past security incidents, knowledge of the target system, and experience of security experts.  The compromised user is identified when the last label, in the sequence representing the evolution of the user states over time, indicates that the user state is malicious.  Evaluation  We apply this approach to detect masquerade attacks sufficiently before the system is misused. Using detailed information on security incidents occurred over a six-year period (2008-2013) at NCSA, we identify attack attributes such as: user p...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
