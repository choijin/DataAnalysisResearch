<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Developing Software and Methodologies for eBook/Browsers to Enhance Learning</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2011</AwardEffectiveDate>
<AwardExpirationDate>05/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Paul Tymann</SignBlockName>
<PO_EMAI>ptymann@nsf.gov</PO_EMAI>
<PO_PHON>7032922832</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A new generation of mobile devices is emerging that combines the functionality of an eBook reader, like the Kindle, and a mobile browser, like the iPhone or iPod Touch. These devices are more limited than laptop computers but have larger screens and are more functional than mobile phones. Appalachian State University is developing software tools and educational frameworks to overcome many of the limitations of these devices while taking advantage of their mobility in order to enhance learning experiences in and out of the classroom.  Software to enable tablet and dual screen modes of operation is under development.  Web services, used to overcome limitations in the functionality of the eBook/Browser devices, are also under development. Micro labs (short in-class lab assignments) based on the eBook/Browser devices are being designed to engage students in active learning during lecture. These tools will be tested in both computer science and mathematics courses taught by four instructors at two institutions: Appalachian State University and Wilkes Community College.  &lt;br/&gt;&lt;br/&gt;The effectiveness of these software tools and educational materials will be evaluated with a wide diversity of students. Workshops to train faculty at other institutions on the capabilities of these devices will be held. Software tools and educational materials will be available in an Internet-accessible repository.</AbstractNarration>
<MinAmdLetterDate>05/24/2011</MinAmdLetterDate>
<MaxAmdLetterDate>05/24/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1044572</AwardID>
<Investigator>
<FirstName>Barry</FirstName>
<LastName>Kurtz</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Barry L Kurtz</PI_FULL_NAME>
<EmailAddress>blk@cs.appstate.edu</EmailAddress>
<PI_PHON>8282627008</PI_PHON>
<NSF_ID>000463229</NSF_ID>
<StartDate>05/24/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>James</FirstName>
<LastName>Fenwick, Jr.</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME>Jr.</PI_SUFX_NAME>
<PI_FULL_NAME>James B Fenwick, Jr.</PI_FULL_NAME>
<EmailAddress>fenwickjb@appstate.edu</EmailAddress>
<PI_PHON>8282622708</PI_PHON>
<NSF_ID>000237318</NSF_ID>
<StartDate>05/24/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jere</FirstName>
<LastName>Miles</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jere Miles</PI_FULL_NAME>
<EmailAddress>jere.miles@wilkescc.edu</EmailAddress>
<PI_PHON>3368386138</PI_PHON>
<NSF_ID>000565559</NSF_ID>
<StartDate>05/24/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Darrell</FirstName>
<LastName>Finney</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Darrell Finney</PI_FULL_NAME>
<EmailAddress>darrell.finney@wilkescc.edu</EmailAddress>
<PI_PHON>3368386138</PI_PHON>
<NSF_ID>000565563</NSF_ID>
<StartDate>05/24/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Appalachian State University</Name>
<CityName>Boone</CityName>
<ZipCode>286082174</ZipCode>
<PhoneNumber>8282627459</PhoneNumber>
<StreetAddress>P.O. Box 32174</StreetAddress>
<StreetAddress2><![CDATA[Office of Research]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>781866264</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>APPALACHIAN STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Appalachian State University]]></Name>
<CityName>Boone</CityName>
<StateCode>NC</StateCode>
<ZipCode>286082174</ZipCode>
<StreetAddress><![CDATA[P.O. Box 32174]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>7513</Code>
<Text>TUES-Type 1 Project</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0411</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Computer science students use a wide range of computing devices, including desktops, laptops, tablets, and smartphones.&nbsp; This project investigated the question of what challenging educational activities could be completed on smaller mobile devices where keyboard entry is impractical.&nbsp; These &ldquo;microlabs&rdquo; could be completed in the classroom, in the lab, or outside of the classroom. Image 1 shows students completing microlabs on seven inch tablets in a regular classroom; Image 2 shows students using the same tablets in a much larger lecture-style classroom.</p> <p>There are two types of microlabs: logical microlabs where students solve conceptual problems that do not involve any coding and code magnet microlabs where students construct a method by selecting the correct code magnets and placing them in the proper location.&nbsp; An example of a logical microlab used in a data structures course is to build the original binary search tree when given the postorder traversal.&nbsp; Image 3 shows the given information and the nodes at the left side of the screen.&nbsp; Students move the nodes into a tree structure and add edges between the nodes.&nbsp; A correct solution is shown in Image 4.</p> <p>In a code magnet microlab the student is given a description of the problem and a collection of magnets used to construct a method to solve the problem. Image 5 shows the left side of the screen where there is a collection of code magnets to construct a method that counts the number of digit characters, &lsquo;0&rsquo; through &lsquo;9&rsquo;, in a given string; this task is appropriate of an introductory programming class.&nbsp; The student drags and drops the magnets to the right side of the screen to build the method, as shown in Image 6.&nbsp; Not all magnets may be needed and the student must decide between alternative magnets that are very similar.&nbsp; No keyboard entry is required at any time.&nbsp; Code magnet labs are currently available for Java (shown), Python, C/C++, and Prolog.</p> <p>Both types of microlabs invoke an automated grading system to evaluate correctness.&nbsp; If the solution submitted is not correct, the system provides useful feedback to guide the student towards a correct solution. &nbsp;Students can repeat a lab until solved correctly.&nbsp; Typical completion times for labs are 5 to 10 minutes depending on the topic and type of lab.&nbsp;</p> <p>The Web Automated Grading System (WAGS) allows students and instructors to manage their microlab activities.&nbsp; Students can complete currently visible microlabs, can view performance on earlier labs, and can retake previously completed labs to prepare for exams.&nbsp; Instructors can make labs accessible to students and terminate accessibility.&nbsp; They can also monitor student progress on current labs in real time. They manage student accounts by initially adding students by importing information from a spreadsheet. They can view outcomes organized by lab type for all students or by all labs completed by an individual student.</p> <p>Workshops have been taught to encourage other faculty members to use microlabs. Workshops were taught at Appalachian State University, UNC Greensboro, Stony Brook University, Pace University, Southern Polytechnic State University, and the Special Interest Group in Computer Science Education (SIGCSE) 2015 conference.</p> <p>Microlabs have been used with students at Appalachian State University, Stony Brook University, UNC Greensboro, Guilford Technical Community College, UNC Asheville, Columbus State University, and Park University. The current repository of logical microlabs includes the following topics: sorting (10 labs), binary trees (21), graphs (8), hashing (12), and heaps (12). The current repository of code magnet microlabs (in Java) includes the following topics: if/while/for control statements (12 labs), arrays (8), class operations (5), st...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Computer science students use a wide range of computing devices, including desktops, laptops, tablets, and smartphones.  This project investigated the question of what challenging educational activities could be completed on smaller mobile devices where keyboard entry is impractical.  These "microlabs" could be completed in the classroom, in the lab, or outside of the classroom. Image 1 shows students completing microlabs on seven inch tablets in a regular classroom; Image 2 shows students using the same tablets in a much larger lecture-style classroom.  There are two types of microlabs: logical microlabs where students solve conceptual problems that do not involve any coding and code magnet microlabs where students construct a method by selecting the correct code magnets and placing them in the proper location.  An example of a logical microlab used in a data structures course is to build the original binary search tree when given the postorder traversal.  Image 3 shows the given information and the nodes at the left side of the screen.  Students move the nodes into a tree structure and add edges between the nodes.  A correct solution is shown in Image 4.  In a code magnet microlab the student is given a description of the problem and a collection of magnets used to construct a method to solve the problem. Image 5 shows the left side of the screen where there is a collection of code magnets to construct a method that counts the number of digit characters, æ0Æ through æ9Æ, in a given string; this task is appropriate of an introductory programming class.  The student drags and drops the magnets to the right side of the screen to build the method, as shown in Image 6.  Not all magnets may be needed and the student must decide between alternative magnets that are very similar.  No keyboard entry is required at any time.  Code magnet labs are currently available for Java (shown), Python, C/C++, and Prolog.  Both types of microlabs invoke an automated grading system to evaluate correctness.  If the solution submitted is not correct, the system provides useful feedback to guide the student towards a correct solution.  Students can repeat a lab until solved correctly.  Typical completion times for labs are 5 to 10 minutes depending on the topic and type of lab.   The Web Automated Grading System (WAGS) allows students and instructors to manage their microlab activities.  Students can complete currently visible microlabs, can view performance on earlier labs, and can retake previously completed labs to prepare for exams.  Instructors can make labs accessible to students and terminate accessibility.  They can also monitor student progress on current labs in real time. They manage student accounts by initially adding students by importing information from a spreadsheet. They can view outcomes organized by lab type for all students or by all labs completed by an individual student.  Workshops have been taught to encourage other faculty members to use microlabs. Workshops were taught at Appalachian State University, UNC Greensboro, Stony Brook University, Pace University, Southern Polytechnic State University, and the Special Interest Group in Computer Science Education (SIGCSE) 2015 conference.  Microlabs have been used with students at Appalachian State University, Stony Brook University, UNC Greensboro, Guilford Technical Community College, UNC Asheville, Columbus State University, and Park University. The current repository of logical microlabs includes the following topics: sorting (10 labs), binary trees (21), graphs (8), hashing (12), and heaps (12). The current repository of code magnet microlabs (in Java) includes the following topics: if/while/for control statements (12 labs), arrays (8), class operations (5), strings (6), searching (5), sorting (12), dictionaries (4), stacks/queues/lists (7), and binary trees (9).  There are a dozen or more code magnet labs in each of the following languages: C/C++, Python, and Prolog.  Our ex...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
