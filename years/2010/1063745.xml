<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Non-Invasive Detection of Malicious Javascript at Web Browsers</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>05/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>142050.00</AwardTotalIntnAmount>
<AwardAmount>142050</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Most websites use javascript to provide personalized content to the users.  At the same time, more and more attackers are using the web to deliver their attacks, especially with malicious javascript. Malicious javascript detection needs to be fast enough so that it does not interfere with users' normal activities (non-invasive), and yet effective enough to protect them from the majority of attacks.  Rule-based or signature-based detection mechanisms often fail to detect obfuscated and malicious javascript. Behavior-based detection mechanisms are more robust against obfuscation, and have been effective in identifying variants of known attacks. However, monitoring behavior during execution usually is rather invasive, as it requires too much time and resources to be used in web browsers while users are interacting with websites.  &lt;br/&gt;&lt;br/&gt;This project investigates non-invasive detection of malicious javascript using classifiers (data mining techniques) trained on malicious scripts, including obfuscated scripts.  Preliminary results show that it is possible to detect the vast majority of malicious scripts without full-blown de-obfuscation, while labeling very few benign scripts as malicious. As the detection mechanism correctly identifies most benign scripts, resource-intensive detection mechanisms can use this method to filter most benign scripts and focus on the remainder only. &lt;br/&gt;&lt;br/&gt;Key elements of the envisioned solutions are: (a) automatic collection of malicious javascript; (b) partial de-obfuscator that will extract features for classifiers; (c) classifiers that assess the maliciousness of scripts; (d) redirection graphs that chronicle the connections between websites hosting known malicious scripts; (e) feedback mechanism to assist javascript collection and classifier re-training.</AbstractNarration>
<MinAmdLetterDate>02/08/2011</MinAmdLetterDate>
<MaxAmdLetterDate>01/03/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1063745</AwardID>
<Investigator>
<FirstName>Eunjin</FirstName>
<LastName>Jung</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eunjin Jung</PI_FULL_NAME>
<EmailAddress>ejung2@usfca.edu</EmailAddress>
<PI_PHON>4154225368</PI_PHON>
<NSF_ID>000492801</NSF_ID>
<StartDate>02/08/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Peter</FirstName>
<LastName>Likarish</LastName>
<PI_MID_INIT>F</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Peter F Likarish</PI_FULL_NAME>
<EmailAddress>plikarish@drew.edu</EmailAddress>
<PI_PHON>9734083552</PI_PHON>
<NSF_ID>000604624</NSF_ID>
<StartDate>12/05/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of San Francisco</Name>
<CityName>San Francisco</CityName>
<ZipCode>941171080</ZipCode>
<PhoneNumber>4154225203</PhoneNumber>
<StreetAddress>Contracts and Grants</StreetAddress>
<StreetAddress2><![CDATA[2130 Fulton]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA12</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>078770294</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SAN FRANCISCO INC</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>078770294</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of San Francisco]]></Name>
<CityName>San Francisco</CityName>
<StateCode>CA</StateCode>
<ZipCode>941171080</ZipCode>
<StreetAddress><![CDATA[Contracts and Grants]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~69873</FUND_OBLG>
<FUND_OBLG>2011~72177</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <p><span style="font-size: 10.000000pt; font-family: 'CMR10';">Today, more than ever, there is a critical need for secure web-browsing environment. Internet users rely on the web more and more to find information, to socialize, to conduct business, and in many other aspects of their lives. However, more attackers use the web to deliver their attacks, especially with malicious javascript. Therefore, it is critical to develop malicious javascript detection that is fast enough so that it does not interfere with users&rsquo; normal activities, i.e. </span><span style="font-size: 10.000000pt; font-family: 'CMTI10';">non-invasive</span><span style="font-size: 10.000000pt; font-family: 'CMR10';">, and yet e</span><span style="font-size: 10.000000pt; font-family: 'CMR10';">ff</span><span style="font-size: 10.000000pt; font-family: 'CMR10';">ective enough to protect them from the majority of attacks. </span></p> <p>&nbsp;</p> <div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <p><span style="font-size: 10.000000pt; font-family: 'CMR10';">Malicious javascript often utilizes obfuscation to hide known exploits and prevent rule-based or regular expression (regex)-based anti-malware software from detecting the attack.</span><span style="font-size: 10.000000pt; font-family: 'CMR10';"> The complexity of obfuscation techniques varies from using un- common encoding to modifying control flows. For instance, attacks often include references to legitimate companies to disguise their purpose and include context-sensitive information in their obfuscation algorithm. The complexity increase raises the resources necessary to deobfuscate the attacks, potentially to the point that full de-obfuscation before detection becomes implausible. Behavior-based detection mechanisms are more robust against obfuscation, and have been e</span><span style="font-size: 10.000000pt; font-family: 'CMR10';">ff</span><span style="font-size: 10.000000pt; font-family: 'CMR10';">ective in identifying variants of known attacks. However, mon- itoring behavior during execution usually requires too much time and resources to be used in web browsers while users are interacting with websites. </span></p> <p><span style="font-size: 10.000000pt; font-family: 'CMR10';">We investigated non-invasive detection of malicious javascript using classifiers trained on features present in malicious scripts.</span><span style="font-size: 10.000000pt; font-family: 'CMR10';"> We designed and developed a comprehensive framework to solve the problem of non-invasive malicious javascript detection at web browsers. Key components of our framework are: (a) classifiers that assess the maliciousness of scripts; (b) conversational user-interface that guides users determine when to interact with suspicious javascripts; and (c) user study protocol that showed the effectiveness of the user interface gardless of the computer fluency of the participants. </span></p> <div class="tinyMCEContent"> <p>The impact of this project is three-fold:</p> <p>1) Without using deobfuscation techniques nor modifying JavaScript  engine, the detection rate can be higher than 90% per script. In other  words, this project's outcome can be applied to any web browser on any  platform, as long as there is Java support. Also, users can still  interact with the website without running suspicious scripts - this  improves the usability significantly.</p> <p>2) The user study shows that the conversational user interface is  effective in discouraging users from running suspicious scripts, and  also has educational effect. Study participants reported that they were  more likely to cautious while surfing the web, knowing that malicious  JavaScript is mostly invisible.</p> <p>3) The user study with the unique population, poor and low in  computer fluency, shows that the conver...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    Today, more than ever, there is a critical need for secure web-browsing environment. Internet users rely on the web more and more to find information, to socialize, to conduct business, and in many other aspects of their lives. However, more attackers use the web to deliver their attacks, especially with malicious javascript. Therefore, it is critical to develop malicious javascript detection that is fast enough so that it does not interfere with usersÆ normal activities, i.e. non-invasive, and yet effective enough to protect them from the majority of attacks.         Malicious javascript often utilizes obfuscation to hide known exploits and prevent rule-based or regular expression (regex)-based anti-malware software from detecting the attack. The complexity of obfuscation techniques varies from using un- common encoding to modifying control flows. For instance, attacks often include references to legitimate companies to disguise their purpose and include context-sensitive information in their obfuscation algorithm. The complexity increase raises the resources necessary to deobfuscate the attacks, potentially to the point that full de-obfuscation before detection becomes implausible. Behavior-based detection mechanisms are more robust against obfuscation, and have been effective in identifying variants of known attacks. However, mon- itoring behavior during execution usually requires too much time and resources to be used in web browsers while users are interacting with websites.   We investigated non-invasive detection of malicious javascript using classifiers trained on features present in malicious scripts. We designed and developed a comprehensive framework to solve the problem of non-invasive malicious javascript detection at web browsers. Key components of our framework are: (a) classifiers that assess the maliciousness of scripts; (b) conversational user-interface that guides users determine when to interact with suspicious javascripts; and (c) user study protocol that showed the effectiveness of the user interface gardless of the computer fluency of the participants.    The impact of this project is three-fold:  1) Without using deobfuscation techniques nor modifying JavaScript  engine, the detection rate can be higher than 90% per script. In other  words, this project's outcome can be applied to any web browser on any  platform, as long as there is Java support. Also, users can still  interact with the website without running suspicious scripts - this  improves the usability significantly.  2) The user study shows that the conversational user interface is  effective in discouraging users from running suspicious scripts, and  also has educational effect. Study participants reported that they were  more likely to cautious while surfing the web, knowing that malicious  JavaScript is mostly invisible.  3) The user study with the unique population, poor and low in  computer fluency, shows that the conversational user interface has  similar effects with this population as well.  We have engaged service learning students in the user study and  presented the experience at a service learning conference. In  particular, these students were communications major students so the  user study became interdisciplinary service learning research project,  which is highly unusual. The poster explained how to identify potential  projects for interdisciplinary service learning course and was well  received.              Last Modified: 09/28/2014       Submitted by: Eunjin Jung]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
