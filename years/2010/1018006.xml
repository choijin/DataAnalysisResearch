<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  An Integrated Parallel Constraint Programming Platform for Combinatorial Search Problems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>277065.00</AwardTotalIntnAmount>
<AwardAmount>277065</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Many real-world problems, ranging from scheduling in industrial production lines, planning for intelligent robots, protein structure predication, resource allocation, to various network optimization problems are combinatorial search problems. Constraint Programming (CP) and Answer Set Programming (ASP) are emerging techniques for solving these problems. CP over Finite Domains (FD) has had great successes in many application areas, such as scheduling, where use of global constraints is very effective. ASP has been found amenable to knowledge-intensive search problems such as planning and configuration problems. Recently, there has been great interest in parallelizing CP and ASP solvers to take advantage of the power provided by multi-core processors. &lt;br/&gt;&lt;br/&gt;This research aims to develop an integrated parallel constraint programming platform for combinatorial search problems. It entails three tasks. Firstly, this research will enhance the power of CLP(FD) (Constraint Logic Programming over FD) by enabling constraints over Composite Finite Domains (CFD). The resulting language, CLP(CFD), allows for natural and efficient modeling of problems with multi-attributed objects. Action Rules (AR), a successful language developed by the PI, will be enhanced and used to implement CLP(CFD). Secondly, this research will develop a compiler to translate ASP programs into AR. For an ASP program, the generated program maintains a partial answer set as a pair of disjoint tuple sets and uses labeling and propagation to compute answer sets. Unlike most ASP solvers, the AR-based solver requires no prior grounding of programs. Thirdly, this research will parallelize AR. Since AR is used as a common intermediate language for both CLP(CFD) and ASP, a parallel implementation of AR will directly result in parallel solvers for CLP(CFD) and ASP. This research will advance the implementation techniques for constraint languages and the resulting system will benefit a wide range of real-world applications.</AbstractNarration>
<MinAmdLetterDate>07/28/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/28/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018006</AwardID>
<Investigator>
<FirstName>Neng-Fa</FirstName>
<LastName>Zhou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Neng-Fa Zhou</PI_FULL_NAME>
<EmailAddress>zhou@sci.brooklyn.cuny.edu</EmailAddress>
<PI_PHON>7189515657</PI_PHON>
<NSF_ID>000176358</NSF_ID>
<StartDate>07/28/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>CUNY Brooklyn College</Name>
<CityName>Brooklyn</CityName>
<ZipCode>112102889</ZipCode>
<PhoneNumber>7189515622</PhoneNumber>
<StreetAddress>Office of Research &amp; Sponsored P</StreetAddress>
<StreetAddress2><![CDATA[2900 Bedford Ave]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>620127691</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION OF THE CITY UNIVERSITY OF NEW YORK</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>073268849</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[CUNY Brooklyn College]]></Name>
<CityName>Brooklyn</CityName>
<StateCode>NY</StateCode>
<ZipCode>112102889</ZipCode>
<StreetAddress><![CDATA[Office of Research &amp; Sponsor]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~277065</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>While supported by the grant, the PI, his students, and his collaborators have developed several important algorithms and implementation techniques, including pair-wise arc consistency for constraints over complex domains, an extension of mode-directed tabling for dynamic programming and machine learning applications, an extended hash-consing scheme for sharing ground structured terms in tabled logic programs, tabling for planning, and a SAT compiler. One of PI's students prototyped a parallel system using p-threads for parallelizing propagators for the all_different global constraint.</p> <p>During the past three years, the PI and his student, Jonathan Fruhman, designed Picat (picat-lang.org)---a simple, yet powerful, logic-based programming language for a variety of applications. Picat incorporates many features from logic programming, functional programming, scripting, and modeling languages for better productivity of software development. Picat incorporates many of the algorithms and implementation techniques developed by this research project.</p> <p>Picat provides a set of tools for solving combinatorial search problems. It has an embedded CP solver that uses action rules to encode propagators. Picat also includes a SAT compiler, which compiles high-level constraints into log-encoded CNF (Conjunctive Normal Form) codes. The competition results of MiniZinc Challenge 2015 show that Picat's SAT compiler scored the highest on 5 of the 20 benchmarks, and was second on the benchmarks that do not use global constraints.</p> <p>Picat has become a powerful and flexible modeling and solving language for planning problems. As a solving system, Picat's planner tables states in order to avoid repeating the exploration of the same state; employs the hash-consing technique to share common state data and to speed up the equality testing of states; utilizes tabled states to effectively perform resource-bounded search. Experiments have shown that declarative models that exploit Picat's features by using structural state representations, common-sense domain knowledge, and heuristics can significantly outperform ASP (Answer Set Programming) and PDDL (plan domain description language) encodings run by the best planners, including domain-dependent ones.</p> <p>Picat has started impacting the field. After Picat 1.0 was released in February 2015, Lucy Black, who is not related to the project, wrote an article in April 2015 titled "Is Logic Programming Making A Comeback", which highly appraises the Picat system's versatility for problem solving. Sergii Dymchenko, who is not related to the project either, has published an article titled "Declaratively Solving Google Code Jam Problems with Picat", which summarizes Picat as follows: ``in some cases the use of Picat simplifies the implementation compared to conventional imperative programming languages, while in others it allows to directly convert the problem statement into an efficiently solvable declarative problem specification without inventing an imperative algorithm''. Despite a new language, Picat was used by five contestants, none of whom was a Picat developer, in the 2015 GCJ contest, while only one contestant used Prolog.&nbsp;</p> <p>This&nbsp; Picat project has also discovered new research challenges. First, although Picat is a powerful and flexible modeling and solving language for planning problems, it is a challenge for novice programmers to develop efficient planning models. In order to address this issue, future work needs to be done to devise algorithms for translating simple specifications into efficient Picat models that automatically exploit structural representations, symmetries, domain control knowledge, and heuristics. Second, the Picat-SAT compiler is not strong at dealing with global constraints. There are no established algorithms for decomposing many of the global constraints into SAT. Future work needs to be...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ While supported by the grant, the PI, his students, and his collaborators have developed several important algorithms and implementation techniques, including pair-wise arc consistency for constraints over complex domains, an extension of mode-directed tabling for dynamic programming and machine learning applications, an extended hash-consing scheme for sharing ground structured terms in tabled logic programs, tabling for planning, and a SAT compiler. One of PI's students prototyped a parallel system using p-threads for parallelizing propagators for the all_different global constraint.  During the past three years, the PI and his student, Jonathan Fruhman, designed Picat (picat-lang.org)---a simple, yet powerful, logic-based programming language for a variety of applications. Picat incorporates many features from logic programming, functional programming, scripting, and modeling languages for better productivity of software development. Picat incorporates many of the algorithms and implementation techniques developed by this research project.  Picat provides a set of tools for solving combinatorial search problems. It has an embedded CP solver that uses action rules to encode propagators. Picat also includes a SAT compiler, which compiles high-level constraints into log-encoded CNF (Conjunctive Normal Form) codes. The competition results of MiniZinc Challenge 2015 show that Picat's SAT compiler scored the highest on 5 of the 20 benchmarks, and was second on the benchmarks that do not use global constraints.  Picat has become a powerful and flexible modeling and solving language for planning problems. As a solving system, Picat's planner tables states in order to avoid repeating the exploration of the same state; employs the hash-consing technique to share common state data and to speed up the equality testing of states; utilizes tabled states to effectively perform resource-bounded search. Experiments have shown that declarative models that exploit Picat's features by using structural state representations, common-sense domain knowledge, and heuristics can significantly outperform ASP (Answer Set Programming) and PDDL (plan domain description language) encodings run by the best planners, including domain-dependent ones.  Picat has started impacting the field. After Picat 1.0 was released in February 2015, Lucy Black, who is not related to the project, wrote an article in April 2015 titled "Is Logic Programming Making A Comeback", which highly appraises the Picat system's versatility for problem solving. Sergii Dymchenko, who is not related to the project either, has published an article titled "Declaratively Solving Google Code Jam Problems with Picat", which summarizes Picat as follows: ``in some cases the use of Picat simplifies the implementation compared to conventional imperative programming languages, while in others it allows to directly convert the problem statement into an efficiently solvable declarative problem specification without inventing an imperative algorithm''. Despite a new language, Picat was used by five contestants, none of whom was a Picat developer, in the 2015 GCJ contest, while only one contestant used Prolog.   This  Picat project has also discovered new research challenges. First, although Picat is a powerful and flexible modeling and solving language for planning problems, it is a challenge for novice programmers to develop efficient planning models. In order to address this issue, future work needs to be done to devise algorithms for translating simple specifications into efficient Picat models that automatically exploit structural representations, symmetries, domain control knowledge, and heuristics. Second, the Picat-SAT compiler is not strong at dealing with global constraints. There are no established algorithms for decomposing many of the global constraints into SAT. Future work needs to be done to investigate encoding algorithms for global constraints into SAT and SMT.          Last Modifi...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
