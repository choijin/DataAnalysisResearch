<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Higher-Speed Cryptography</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>436203.00</AwardTotalIntnAmount>
<AwardAmount>436203</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Internet users can now use https://www.google.com instead of http://www.google.com, protecting their text searches against espionage and sabotage by network attackers. However, Google still does not support encryption for high-volume data such as images and maps.&lt;br/&gt;&lt;br/&gt;Other sites encrypt even less. More than 99% of Internet web pages and Internet mail messages remain unencrypted. Furthermore, most encryption used on the Internet is at a surprisingly low security level.  For example, in June 2010, https://paypal.com was still using 1024-bit RSA, a key size easily breakable by the Conficker botnet. Government recommendations to move to at least 2048-bit RSA have triggered widespread objections.&lt;br/&gt;&lt;br/&gt;The underlying problem is that cryptography is too slow. Even when the necessary cryptographic software has been written and installed, users are often forced to disable or limit the software, or compromise security, so that their computers are not overloaded.&lt;br/&gt;&lt;br/&gt;This project directly addresses this problem by making cryptography faster---without compromising security. The research has a broad vertical scope spanning high-speed engineering of high-speed software, CPU-specific optimization, algorithm analysis and design, analysis and design of cryptographic functions, and optimization of cryptographic Internet protocols.</AbstractNarration>
<MinAmdLetterDate>07/27/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/27/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018836</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Bernstein</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel J Bernstein</PI_FULL_NAME>
<EmailAddress>proposal-qlznvbgnroelrkdkzl@box.cr.yp.to</EmailAddress>
<PI_PHON>7739358017</PI_PHON>
<NSF_ID>000147338</NSF_ID>
<StartDate>07/27/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606124305</ZipCode>
<PhoneNumber>3129962862</PhoneNumber>
<StreetAddress>809 S. Marshfield Avenue</StreetAddress>
<StreetAddress2><![CDATA[MB 502, M/C 551]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>098987217</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Chicago]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606124305</ZipCode>
<StreetAddress><![CDATA[809 S. Marshfield Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~436203</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The WhatsApp instant-messaging system was founded in 2009, was purchased by Facebook for $19 billion in 2014, and reached one billion users in February 2016. In April 2016 it announced that its latest update encrypted all messages from end to end by default to protect against "cybercriminals" and "hackers" and "oppressive regimes"; see https://blog.whatsapp.com/10000618/end-to-end-encryption. This encryption relies critically on Curve25519, a cryptographic system developed by the PI; see https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf.<br /><br />This is one of many examples of widespread deployment of high-speed high-security cryptographic systems produced within the PI's NSF-funded research. Today the most popular examples of these cryptographic systems are the PI's Salsa20 and ChaCha20 stream ciphers, the PI's Poly1305 message authenticator, the PI's X25519 public-key encryption system (using the PI's Curve25519 elliptic curve), and the PI's Ed25519 public-key signature system (also using Curve25519), covering the complete spectrum of core cryptographic functionality. It is reasonable to expect that post-quantum public-key systems designed by the PI, such as McBits and SPHINCS, will attract similar attention as the public becomes increasingly aware of the threat posed by future quantum computers.<br /><br />The PI's research includes security analysis of a broad range of cryptographic systems, performance optimization for confidence-inspiring cryptographic systems, selection of systems in light of trends in computer hardware, and integration into real-world Internet applications. The PI's work on this topic began in earnest with NSF grant 9983950 ("CAREER: Computational number theory, cryptography, and computer security"), as a spinoff from his work under various DMS grants ("Algorithmic problems in number theory"); the work continued with 0716498 ("High-speed cryptography") and this grant 1018836 ("Higher-speed cryptography").<br /><br />Further Curve25519/X25519/Ed25519 deployment examples include Apple's iOS (iPhone, iPad, etc.); the Signal (TextSecure) messaging system; the standard OpenSSH remote-login software; the Tor network; and Google's QUIC protocol. Salsa20/ChaCha20/Poly1305 deployment examples include DNSCrypt from OpenDNS, Chrome connections to Google (see https://security.googleblog.com/2014/04/speeding-up-and-strengthening-https.html), and Chrome connections to millions of Cloudflare sites (see https://blog.cloudflare.com/do-the-chacha-better-mobile-performance-with-cryptography). Nicolai Brown maintains lists of many more applications; see https://ianix.com/pub/curve25519-deployment.html, https://ianix.com/pub/ed25519-deployment.html, https://ianix.com/pub/salsa20-deployment.html, and https://ianix.com/pub/chacha-deployment.html.</p><br> <p>            Last Modified: 04/18/2016<br>      Modified by: Daniel&nbsp;J&nbsp;Bernstein</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The WhatsApp instant-messaging system was founded in 2009, was purchased by Facebook for $19 billion in 2014, and reached one billion users in February 2016. In April 2016 it announced that its latest update encrypted all messages from end to end by default to protect against "cybercriminals" and "hackers" and "oppressive regimes"; see https://blog.whatsapp.com/10000618/end-to-end-encryption. This encryption relies critically on Curve25519, a cryptographic system developed by the PI; see https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf.  This is one of many examples of widespread deployment of high-speed high-security cryptographic systems produced within the PI's NSF-funded research. Today the most popular examples of these cryptographic systems are the PI's Salsa20 and ChaCha20 stream ciphers, the PI's Poly1305 message authenticator, the PI's X25519 public-key encryption system (using the PI's Curve25519 elliptic curve), and the PI's Ed25519 public-key signature system (also using Curve25519), covering the complete spectrum of core cryptographic functionality. It is reasonable to expect that post-quantum public-key systems designed by the PI, such as McBits and SPHINCS, will attract similar attention as the public becomes increasingly aware of the threat posed by future quantum computers.  The PI's research includes security analysis of a broad range of cryptographic systems, performance optimization for confidence-inspiring cryptographic systems, selection of systems in light of trends in computer hardware, and integration into real-world Internet applications. The PI's work on this topic began in earnest with NSF grant 9983950 ("CAREER: Computational number theory, cryptography, and computer security"), as a spinoff from his work under various DMS grants ("Algorithmic problems in number theory"); the work continued with 0716498 ("High-speed cryptography") and this grant 1018836 ("Higher-speed cryptography").  Further Curve25519/X25519/Ed25519 deployment examples include Apple's iOS (iPhone, iPad, etc.); the Signal (TextSecure) messaging system; the standard OpenSSH remote-login software; the Tor network; and Google's QUIC protocol. Salsa20/ChaCha20/Poly1305 deployment examples include DNSCrypt from OpenDNS, Chrome connections to Google (see https://security.googleblog.com/2014/04/speeding-up-and-strengthening-https.html), and Chrome connections to millions of Cloudflare sites (see https://blog.cloudflare.com/do-the-chacha-better-mobile-performance-with-cryptography). Nicolai Brown maintains lists of many more applications; see https://ianix.com/pub/curve25519-deployment.html, https://ianix.com/pub/ed25519-deployment.html, https://ianix.com/pub/salsa20-deployment.html, and https://ianix.com/pub/chacha-deployment.html.       Last Modified: 04/18/2016       Submitted by: Daniel J Bernstein]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
