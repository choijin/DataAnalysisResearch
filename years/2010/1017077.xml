<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  Run-Time Program Generation and Empirical Optimization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>486850.00</AwardTotalIntnAmount>
<AwardAmount>486850</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In programming computers, "knowledge is power" -  the more that is known about the data on which a program is to operate, and the machine on which it is to execute, the greater the efficiency that can be obtained.  However, programs are written to process all input data and run on many different machines.  Run-time program generation (RTPG) is a technique in which the programmer writes a program whose purpose is to write another program at run time when the input data (or some part of it) and machine are known.  This idea and its potential to produce dramatic efficiency improvements has been known for many years, but various technical problems have hampered its adoption.  Recent software research and developments in computer hardware enable us to address those problems.  This research develops tools and techniques for RTPG; applies them some important problems; and demonstrates the practicality of the technique.&lt;br/&gt;&lt;br/&gt;This work explores several critical problems in the application of RTPG. Most programs of practical interest operate on large data sets, which pose special challenges for RTPG.  Further, since large data sets exacerbate the well-known problem of program generation cost, the PIs address that issue  in several novel ways.  The PIs design an object language for program generation that allows for compile-time preprocessing of fragments to facilitate run-time optimizations.  The PIs design optimizations expressly for computer-generated programs (which have different characteristics from ordinary, programmer-written codes).  Above all, the PIs employ the technique of auto-tuning, in which relevant characteristics of a target computer are determined at install time, and used to guide the run-time program generation process.</AbstractNarration>
<MinAmdLetterDate>07/22/2010</MinAmdLetterDate>
<MaxAmdLetterDate>06/13/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017077</AwardID>
<Investigator>
<FirstName>Samuel</FirstName>
<LastName>Kamin</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Samuel N Kamin</PI_FULL_NAME>
<EmailAddress>kamin@illinois.edu</EmailAddress>
<PI_PHON>2173338069</PI_PHON>
<NSF_ID>000183498</NSF_ID>
<StartDate>07/22/2010</StartDate>
<EndDate>06/13/2013</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Vikram</FirstName>
<LastName>Adve</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Vikram S Adve</PI_FULL_NAME>
<EmailAddress>vadve@cs.uiuc.edu</EmailAddress>
<PI_PHON>2172442016</PI_PHON>
<NSF_ID>000334755</NSF_ID>
<StartDate>07/22/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Maria</FirstName>
<LastName>Garzaran</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Maria J Garzaran</PI_FULL_NAME>
<EmailAddress>garzaran@cs.uiuc.edu</EmailAddress>
<PI_PHON>2172448878</PI_PHON>
<NSF_ID>000297030</NSF_ID>
<StartDate>06/13/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Maria</FirstName>
<LastName>Garzaran</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Maria J Garzaran</PI_FULL_NAME>
<EmailAddress>garzaran@cs.uiuc.edu</EmailAddress>
<PI_PHON>2172448878</PI_PHON>
<NSF_ID>000297030</NSF_ID>
<StartDate>07/22/2010</StartDate>
<EndDate>06/13/2013</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>Champaign</CityName>
<StateCode>IL</StateCode>
<ZipCode>618207406</ZipCode>
<StreetAddress><![CDATA[1901 South First Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~486850</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Runtime specialization optimizes programs based on partial information available only at runtime. It is applicable when some input data is used repeatedly while other input data varies. This technique has the potential of generating highly efficient codes.</p> <p>In this project, we have explored the potential for obtaining speedups for sparse matrix-dense vector multiplication using runtime specialization, in the case where a single matrix is to be multiplied by many vectors. We experiment with five methods involving runtime specialization, comparing them to state of the art methods that do not, such as INTEL MKL library.</p> <p>Our experiments using matrices from the Matrix Market and Florida collections and running on different architectures show that in most cases the specialized code runs faster than any version without specialization, between 1.46 to 1.78 on the average for 23 matrices and five different platforms. Among the evaluated methods, we have found that one of our methods can produce significant speedups when the number of distinct values is small. This is important, as this can be common in matrices that are derived from graphs.</p> <p>We have also found that the best method depends on the matrix and machine, as no method is the best for all matrices and machines. Thus, we have identified the main input characteristics that impact the performance and used machine learning techniques to predict among all the methods the one that will deliver the highest performance. We can also generate at runtime codes that ran as fast or sometimes even faster than the codes generated using an offline compiler, although in this case the matrix has to run for enough iterations to amortize the cost of runtime code generation.</p> <p>Overall, those matrices where the location of non-zeros is known way ahead of time can directly benefit from our results. For matrices whose shape is only known at runtime, our machine learning techniques together with runtime code generation will be useful if run for enough iterations.&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/04/2014<br>      Modified by: Maria&nbsp;J&nbsp;Garzaran</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Runtime specialization optimizes programs based on partial information available only at runtime. It is applicable when some input data is used repeatedly while other input data varies. This technique has the potential of generating highly efficient codes.  In this project, we have explored the potential for obtaining speedups for sparse matrix-dense vector multiplication using runtime specialization, in the case where a single matrix is to be multiplied by many vectors. We experiment with five methods involving runtime specialization, comparing them to state of the art methods that do not, such as INTEL MKL library.  Our experiments using matrices from the Matrix Market and Florida collections and running on different architectures show that in most cases the specialized code runs faster than any version without specialization, between 1.46 to 1.78 on the average for 23 matrices and five different platforms. Among the evaluated methods, we have found that one of our methods can produce significant speedups when the number of distinct values is small. This is important, as this can be common in matrices that are derived from graphs.  We have also found that the best method depends on the matrix and machine, as no method is the best for all matrices and machines. Thus, we have identified the main input characteristics that impact the performance and used machine learning techniques to predict among all the methods the one that will deliver the highest performance. We can also generate at runtime codes that ran as fast or sometimes even faster than the codes generated using an offline compiler, although in this case the matrix has to run for enough iterations to amortize the cost of runtime code generation.  Overall, those matrices where the location of non-zeros is known way ahead of time can directly benefit from our results. For matrices whose shape is only known at runtime, our machine learning techniques together with runtime code generation will be useful if run for enough iterations.           Last Modified: 11/04/2014       Submitted by: Maria J Garzaran]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
