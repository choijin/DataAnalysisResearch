<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Foundational Principles to Support Evolution in Domain-Specific Modeling</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2010</AwardEffectiveDate>
<AwardExpirationDate>03/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>183466.00</AwardTotalIntnAmount>
<AwardAmount>183466</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Despite advances in programming languages and runtime platforms, most software is developed at a low-level of abstraction relative to the concepts and concerns within the problem space of an application domain. Domain-Specific Modeling (DSM) is a design approach that uses a metamodel to define a modeling language capturing the essential characteristics of a problem space in a manner that is decoupled from the details of a specific solution space. However, the current DSM practice lacks fundamental concepts to support a broad range of tasks needed for model-driven evolution of software. The proposed research will extend the capabilities of DSM by investigating the synergy of model transformation and program transformation as methods to support the necessary evolution of software artifacts as reflected by changes in high-level models. Specific topics of investigation include model-driven program transformation, reverse engineering of legacy source code into domain-specific models, model difference algorithms that support a new class of version control tools focused on visual modeling concerns, and a technique to analyze a user's intention among edit changes within a modeling tool. The proposed research agenda is integrated with educational activities, including undergraduate mentoring and graduate education, with an emphasis on K-12 outreach activities.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/27/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/13/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1052616</AwardID>
<Investigator>
<FirstName>Jeffrey</FirstName>
<LastName>Gray</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jeffrey G Gray</PI_FULL_NAME>
<EmailAddress>gray@cs.ua.edu</EmailAddress>
<PI_PHON>2053482847</PI_PHON>
<NSF_ID>000247328</NSF_ID>
<StartDate>09/27/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Alabama Tuscaloosa</Name>
<CityName>Tuscaloosa</CityName>
<ZipCode>354870001</ZipCode>
<PhoneNumber>2053485152</PhoneNumber>
<StreetAddress>801 University Blvd.</StreetAddress>
<StreetAddress2><![CDATA[152 Rose Admin. / Box 870104]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Alabama</StateName>
<StateCode>AL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>045632635</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ALABAMA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>808245794</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Alabama Tuscaloosa]]></Name>
<CityName>Tuscaloosa</CityName>
<StateCode>AL</StateCode>
<ZipCode>354870001</ZipCode>
<StreetAddress><![CDATA[801 University Blvd.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Alabama</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0407</Code>
<Name>NSF,Education &amp; Human Resource</Name>
<APP_SYMB_ID>490106</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~20354</FUND_OBLG>
<FUND_OBLG>2010~82779</FUND_OBLG>
<FUND_OBLG>2011~80333</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>&nbsp;</p> <p><span style="text-decoration: underline;"><strong>General Overview:&nbsp;</strong></span></p> <p>Domain-specific modeling (DSM) provides a solution to demands for higher productivity by constricting the gap between the essence of a problem and the accidental complexities of its solution space. In the past, productivity gains have been sought from new programming languages. Domain-specific modeling languages provide a viable solution for continuing to raise the level of abstraction beyond coding. In DSM, the models are constructed using concepts that represent things in the application domain, not concepts of a given programming language. The modeling language follows the domain abstractions and semantics, allowing developers (potentially end-users with no programming experience) to perceive themselves as working directly with domain concepts. In a number of cases, the final products can be generated automatically from these high-level specifications with domain-specific code generators. This automation is possible because of domain-specificity: both the modeling language and code generators fit to the requirements of a narrowly defined domain.&nbsp;</p> <p>Like all software, models are also subject to evolve based on external requirements and the need for engineering changes. To express such changes, model transformation languages have been designed to specify and automate modifications across a model that would be too challenging to perform manually (e.g., due to the error prone and tedious nature of making a crosscutting change across a large model space). Much of the focus of this project, as described in the next section, concentrated on support that allows end-users to create their own modeling languages and to specify transformations on their models using a by-demonstration technique. Adopting a by-demonstration approach allows end-users to remain in their comfort level with abstractions they are familiar with, rather than the need to learn complex transformation languages and metamodel formalisms.</p> <p>&nbsp;</p> <p><span style="text-decoration: underline;"><strong>Intellectual Merit:&nbsp;</strong></span></p> <p>The core contributions of this CAREER project include the results of the following investigations:&nbsp;</p> <p>The early years of the project produced specific contributions in the areas of model comparison (i.e., automated analysis to compare the differences between two models, such as for supporting model version control), model inferencing (i.e., infer a metamodel for a modeling language from specific model instances), and an understanding of the manner in which model transformation can assist in the scalability of modeling artifacts.&nbsp;</p> <p>The core contributions of the project were focused on applying a by-demonstration technique (where a user demonstrates their desire using artifacts common to them, similar to by-example approaches, such as Query By Example in databases) to specify modeling languages and model transformations. The idea of Model Transformation by Demonstration (MTBD) allows the user to press a &ldquo;record&rdquo; button in a modeling tool, whereby they could demonstrate the operational changes to a model that were captured in a formal representation as a model transformation. The MTBD idea was applied to several contexts (e.g., aspect-oriented modeling, model refactoring, model scalability, and even model layout algorithms) with support for debugging at the end-user abstraction level. The final years of the project focused on allowing the user to define their own modeling language by demonstrating instances of the language (e.g., allowing the user to sketch out sample instances that were then used to infer the language rules).&nbsp;</p> <p>Software prototypes developed in support of the project include: a tool for model differencing and visualization, model inferencing software to build metamodels from i...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    General Overview:   Domain-specific modeling (DSM) provides a solution to demands for higher productivity by constricting the gap between the essence of a problem and the accidental complexities of its solution space. In the past, productivity gains have been sought from new programming languages. Domain-specific modeling languages provide a viable solution for continuing to raise the level of abstraction beyond coding. In DSM, the models are constructed using concepts that represent things in the application domain, not concepts of a given programming language. The modeling language follows the domain abstractions and semantics, allowing developers (potentially end-users with no programming experience) to perceive themselves as working directly with domain concepts. In a number of cases, the final products can be generated automatically from these high-level specifications with domain-specific code generators. This automation is possible because of domain-specificity: both the modeling language and code generators fit to the requirements of a narrowly defined domain.   Like all software, models are also subject to evolve based on external requirements and the need for engineering changes. To express such changes, model transformation languages have been designed to specify and automate modifications across a model that would be too challenging to perform manually (e.g., due to the error prone and tedious nature of making a crosscutting change across a large model space). Much of the focus of this project, as described in the next section, concentrated on support that allows end-users to create their own modeling languages and to specify transformations on their models using a by-demonstration technique. Adopting a by-demonstration approach allows end-users to remain in their comfort level with abstractions they are familiar with, rather than the need to learn complex transformation languages and metamodel formalisms.     Intellectual Merit:   The core contributions of this CAREER project include the results of the following investigations:   The early years of the project produced specific contributions in the areas of model comparison (i.e., automated analysis to compare the differences between two models, such as for supporting model version control), model inferencing (i.e., infer a metamodel for a modeling language from specific model instances), and an understanding of the manner in which model transformation can assist in the scalability of modeling artifacts.   The core contributions of the project were focused on applying a by-demonstration technique (where a user demonstrates their desire using artifacts common to them, similar to by-example approaches, such as Query By Example in databases) to specify modeling languages and model transformations. The idea of Model Transformation by Demonstration (MTBD) allows the user to press a "record" button in a modeling tool, whereby they could demonstrate the operational changes to a model that were captured in a formal representation as a model transformation. The MTBD idea was applied to several contexts (e.g., aspect-oriented modeling, model refactoring, model scalability, and even model layout algorithms) with support for debugging at the end-user abstraction level. The final years of the project focused on allowing the user to define their own modeling language by demonstrating instances of the language (e.g., allowing the user to sketch out sample instances that were then used to infer the language rules).   Software prototypes developed in support of the project include: a tool for model differencing and visualization, model inferencing software to build metamodels from instances, the MTBD engine and debugger (within the GEMS plugin for Eclipse), and a Visio plug-in that supports demonstration of models that are used to infer a new metamodel.     Broader Impacts:  The broader impacts of this project include deep collaboration with colleagues from throughout the US a...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
