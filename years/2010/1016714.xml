<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Enabling High-Concurrency and Scalability for Many-Core Processors</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Theodore Baker</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Enabling High-Concurrency and Scalability for Many-Core Processors&lt;br/&gt;&lt;br/&gt;We are developing a novel operating system (OS) for many-core processors. For power and other reasons, microprocessor designs now involve increasing numbers of cores, with an expectation of 100s or 1000s of cores per chip in the future. The movement to high concurrency even for mainstream applications implies the need to simplify concurrent programming and the need for an OS &lt;br/&gt;capable of managing and delivering high concurrency.&lt;br/&gt;&lt;br/&gt;The first step is to leverage "private" memory, which the OS and the compiler can use without the need for concurrency control, thus achieving both simplicity and high performance. With OS and compiler support, this simplest form of concurrency management can be used more often and we can detect when the privacy assumption is not valid, thus preventing one class of errors. For &lt;br/&gt;"embarrassingly" parallel applications, this model often suffices.&lt;br/&gt;&lt;br/&gt;For more complex concurrency patterns, we combine compiler analysis with dynamic locking, which allows us to choose adaptively from a variety of synchronization methods based on the amount of contention, and also check for common synchronization errors through a combination of static and dynamic analysis.&lt;br/&gt;&lt;br/&gt;Finally, built-in speculative execution enables latency hiding for long-running tasks, such as asynchronous I/O operations. With a many cores we can now speculatively execute several paths in parallel. Additionally, these mechanisms can be used as a lightweight checkpoint/restart for fault tolerance, especially for transient or non-deterministic bugs, thus simplifying high-availability applications.</AbstractNarration>
<MinAmdLetterDate>08/02/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/02/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1016714</AwardID>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Brewer</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eric A Brewer</PI_FULL_NAME>
<EmailAddress>brewer@berkeley.edu</EmailAddress>
<PI_PHON>4154979046</PI_PHON>
<NSF_ID>000452332</NSF_ID>
<StartDate>08/02/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<StreetAddress2><![CDATA[1608 Fourth Street, Suite 220]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>124726725</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Berkeley]]></Name>
<CityName>BERKELEY</CityName>
<StateCode>CA</StateCode>
<ZipCode>947101749</ZipCode>
<StreetAddress><![CDATA[Sponsored Projects Office]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>We have entered an era in which better performance must be achieved not by faster processors, but rather by adding more and more cores to the processor chip. &nbsp;As we add more cores, our traditional software has trouble making effective use them; this is particularly true for the operating system (OS).&nbsp;</p> <p>The key outcome of this project was the development of a new OS, called Akaros, from scratch that provides better abstractions to deliver the capabilities of many-core processors.</p> <p>Akaros changes the management of cores so that applications can get whole cores for extended periods instead of the traditional model of kernel threads that tend to give up cores to other tasks when those threads block (typically for I/O). &nbsp;In Akaros, all OS system calls are asynchronous, which means that the application immediately gets its core back and can use it however it likes. Applications have more control in this model, but also less overhead. In turn, the OS is simpler as it is not managing threads on behalf of the application.</p> <p>Akaros also distinguishes between provisioning and allocation. Provisioned cores (and memory) are reserved and the owner can use them as needed in the future, which helps to ensure that low-latency services can get the resources they need quickly when their load goes up. &nbsp;Allocated resources are those that are actually in use by the application (typically less than provisioned). &nbsp;Batch processing and big data applications can use non-provisioned resources as way to improve utilization; they fill in the resources that are provisioned but not currently in use. This allows Akaros to effectively mix batch and live services without hindering the performance of the live services.</p> <p>To further enhance performance the cores used by an application are gang scheduled; that is, they run together as a single many-core process. &nbsp;This enables efficient synchronization via spinlocks and in general improves cache performance. &nbsp;Using a single process structure for many cores also makes the OS more efficient as the number of cores grows.</p> <p>Akaros is an open-source project (see http://akaros.cs.berkeley.edu), which enables it to have a larger impact. &nbsp;Several companies are exploring Akaros and considering its ideas for their own future OS work, and other projects have already built on Akaros for their own research. Although Akaros currently supports C, there is ongoing work in the community to port the Go language, whose fine-grain concurrency model is an excellent fit for both many-core chips and Akaros.</p><br> <p>            Last Modified: 10/28/2013<br>      Modified by: Eric&nbsp;A&nbsp;Brewer</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ We have entered an era in which better performance must be achieved not by faster processors, but rather by adding more and more cores to the processor chip.  As we add more cores, our traditional software has trouble making effective use them; this is particularly true for the operating system (OS).   The key outcome of this project was the development of a new OS, called Akaros, from scratch that provides better abstractions to deliver the capabilities of many-core processors.  Akaros changes the management of cores so that applications can get whole cores for extended periods instead of the traditional model of kernel threads that tend to give up cores to other tasks when those threads block (typically for I/O).  In Akaros, all OS system calls are asynchronous, which means that the application immediately gets its core back and can use it however it likes. Applications have more control in this model, but also less overhead. In turn, the OS is simpler as it is not managing threads on behalf of the application.  Akaros also distinguishes between provisioning and allocation. Provisioned cores (and memory) are reserved and the owner can use them as needed in the future, which helps to ensure that low-latency services can get the resources they need quickly when their load goes up.  Allocated resources are those that are actually in use by the application (typically less than provisioned).  Batch processing and big data applications can use non-provisioned resources as way to improve utilization; they fill in the resources that are provisioned but not currently in use. This allows Akaros to effectively mix batch and live services without hindering the performance of the live services.  To further enhance performance the cores used by an application are gang scheduled; that is, they run together as a single many-core process.  This enables efficient synchronization via spinlocks and in general improves cache performance.  Using a single process structure for many cores also makes the OS more efficient as the number of cores grows.  Akaros is an open-source project (see http://akaros.cs.berkeley.edu), which enables it to have a larger impact.  Several companies are exploring Akaros and considering its ideas for their own future OS work, and other projects have already built on Akaros for their own research. Although Akaros currently supports C, there is ongoing work in the community to port the Go language, whose fine-grain concurrency model is an excellent fit for both many-core chips and Akaros.       Last Modified: 10/28/2013       Submitted by: Eric A Brewer]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
