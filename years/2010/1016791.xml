<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Verifying Simulink-Stateflow models</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The vast majority of commercial embedded systems are designed with simulation-based tools such as MathWork's Simulink and Stateflow.  While simulations are computationally efficient, they are not complete---they cannot be naively used to design systems with provable guarantees. This project aims to build tools and techniques to verify such models. To this end, the project overcomes two key technical hurdles.  First, it has been well known that Simulink-Stateflow (SLSF) models do not have any well-defined meaning. The mathematical description of a building block can be different from the simulated behavior that is generated numerically. This problem is addressed by defining semantics of SLSF models in terms of (possibly probabilistic) hybrid automata. Secondly, the class of Simulink models (translated to hybrid automata) that can be verified automatically by currently available techniques is rather restrictive. This second problem is addressed in this project by abstracting SLSF models into hybrid automata with simple dynamics, model checking the abstract models, and then refining the abstractions based on counterexamples generated by the model checker. Such a counterexample guided abstraction refinement framework provides semi-decision procedures to automatically analyze Simulink-Stateflow models. The developed software tools developed in this project translate SLSF models into probabilistic hybrid automata, analyze the formal automata model by abstracting, model checking, and refining, and then translate valid counterexamples back into Simulink to provide the user diagnostic information. Furthermore, the project builds a repository of benchmark SLSF models and their corresponding hybrid automaton models, based on examples from existing hybrid systems literature and drawing on industrial applications. The repository will be publicly disseminated and will be used to evaluate our tool. &lt;br/&gt; &lt;br/&gt;A new course will be developed on the verification of hybrid systems that introduces undergraduate and graduate students in engineering at Illinois to the use of formal methods in embedded system design. Successful completion of the research tasks outlined here is likely to more broadly influence the design and verification of probabilistic hybrid systems that arise in application domains such as autonomous vehicles and  mixed analog-digital circuits.</AbstractNarration>
<MinAmdLetterDate>08/06/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/05/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1016791</AwardID>
<Investigator>
<FirstName>Mahesh</FirstName>
<LastName>Viswanathan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mahesh Viswanathan</PI_FULL_NAME>
<EmailAddress>vmahesh@uiuc.edu</EmailAddress>
<PI_PHON>2172656298</PI_PHON>
<NSF_ID>000210258</NSF_ID>
<StartDate>08/06/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sayan</FirstName>
<LastName>Mitra</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sayan Mitra</PI_FULL_NAME>
<EmailAddress>mitras@illinois.edu</EmailAddress>
<PI_PHON>2173332187</PI_PHON>
<NSF_ID>000526790</NSF_ID>
<StartDate>08/06/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>Champaign</CityName>
<StateCode>IL</StateCode>
<ZipCode>618207406</ZipCode>
<StreetAddress><![CDATA[1901 South First Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~163149</FUND_OBLG>
<FUND_OBLG>2011~336851</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project was to develop foundations, algorithms, and supporting software tools for analysis or <em>verification</em> of computing systems that control physical processes. From autonomous cars, power systems, medical devices, to air-traffic control systems, many modern systems have software-based control systems at their core. Algorithmic analysis or verification of such systems means to either (a) mathematically prove (certify) that all possible behaviors under different conditions of the system meet the requirements or (b) find bugs in the system that violate the requirement. As systems become more complex, with higher levels of autonomy and intelligence, verification is obviously a critically important part of system design.</p> <p>&nbsp;</p> <p>The verification problem for cyber-physical systems has been recognized to be notoriously difficult. Physical laws are described by nonlinear, time-varying differential equations. These may not even have analytical solutions. In addition, verification has to contend with the uncertainties in the system---message delays, disturbances, failures, etc. The traditional approach is to use some simulations and tests of the system. While this can help in bugs finding; not finding bugs can never guarantee or certify absence of bugs.</p> <p>&nbsp;</p> <p>In this project, we approached this problem using what we call <em>simulation-based verification </em>or <em>static-dynamic analysis </em>algorithms. The key idea has two steps: First, using an existing simulation engine we compute an individual behaviors of the system. Second, using these simulations and a new type of <em>static analysis </em>of the model, we compute an over-approximation of all the possible behaviors of the system. The key technical advancement that enabled us to do this static analysis is to characterize how much the behavior of the system chances with changes in the unknown parameters. We call this type of continuity notion a <em>discrepancy function </em>of the system and it essentially bounds, how much two behaviors of the system with different parameters diverge as a function of time. The concept of discrepancy function has attracted independent interest; there has been several major follow-up publications and a patent has been filed.</p> <p>&nbsp;</p> <p>We have shown that given a discrepancy function of a system, it is possible to solve the bounded time verification problem for cyber-physical systems. Our proposed algorithms always give the right answer, that is they are sound. They always terminate as long as the system meets the requirements robustly---meaning small perturbations to the system should not change the outcome of the analysis. &nbsp;</p> <p>&nbsp;</p> <p>We have implemented these algorithms in a prototype software tool called Compute Execute Check Engine (C2E2). This implementation targets a specific class of CPS models created suing the popular Simulink/Stateflow modeling environment. The tool has been made publicly available and several research groups have started using it. We have applied it to successfully solve several challenging verification problems.</p> <p>&nbsp;</p> <p>For example, our colleagues at NASA have developed parallel landing protocol for increasing throughput in future runways. The protocol reduces the spacing between aircraft approaching the landing strop and uses several heuristics to project the motion of approaching aircraft to raise an alarm (called ALAS) so that if there is a violation of separation then the pilot is supposed to get a warning at least 4 seconds in advance. Existing verification approaches failed to verify this protocol because of the the complexities of the and the uncertainty in the dynamics of the aircraft. With C2E2 we were able to verify the protocol under a variety of conditions; we identified conditions where false alarms are possible and we also confirmed that existence of r...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project was to develop foundations, algorithms, and supporting software tools for analysis or verification of computing systems that control physical processes. From autonomous cars, power systems, medical devices, to air-traffic control systems, many modern systems have software-based control systems at their core. Algorithmic analysis or verification of such systems means to either (a) mathematically prove (certify) that all possible behaviors under different conditions of the system meet the requirements or (b) find bugs in the system that violate the requirement. As systems become more complex, with higher levels of autonomy and intelligence, verification is obviously a critically important part of system design.     The verification problem for cyber-physical systems has been recognized to be notoriously difficult. Physical laws are described by nonlinear, time-varying differential equations. These may not even have analytical solutions. In addition, verification has to contend with the uncertainties in the system---message delays, disturbances, failures, etc. The traditional approach is to use some simulations and tests of the system. While this can help in bugs finding; not finding bugs can never guarantee or certify absence of bugs.     In this project, we approached this problem using what we call simulation-based verification or static-dynamic analysis algorithms. The key idea has two steps: First, using an existing simulation engine we compute an individual behaviors of the system. Second, using these simulations and a new type of static analysis of the model, we compute an over-approximation of all the possible behaviors of the system. The key technical advancement that enabled us to do this static analysis is to characterize how much the behavior of the system chances with changes in the unknown parameters. We call this type of continuity notion a discrepancy function of the system and it essentially bounds, how much two behaviors of the system with different parameters diverge as a function of time. The concept of discrepancy function has attracted independent interest; there has been several major follow-up publications and a patent has been filed.     We have shown that given a discrepancy function of a system, it is possible to solve the bounded time verification problem for cyber-physical systems. Our proposed algorithms always give the right answer, that is they are sound. They always terminate as long as the system meets the requirements robustly---meaning small perturbations to the system should not change the outcome of the analysis.       We have implemented these algorithms in a prototype software tool called Compute Execute Check Engine (C2E2). This implementation targets a specific class of CPS models created suing the popular Simulink/Stateflow modeling environment. The tool has been made publicly available and several research groups have started using it. We have applied it to successfully solve several challenging verification problems.     For example, our colleagues at NASA have developed parallel landing protocol for increasing throughput in future runways. The protocol reduces the spacing between aircraft approaching the landing strop and uses several heuristics to project the motion of approaching aircraft to raise an alarm (called ALAS) so that if there is a violation of separation then the pilot is supposed to get a warning at least 4 seconds in advance. Existing verification approaches failed to verify this protocol because of the the complexities of the and the uncertainty in the dynamics of the aircraft. With C2E2 we were able to verify the protocol under a variety of conditions; we identified conditions where false alarms are possible and we also confirmed that existence of runway configurations where the 4 second advance notice is not possible. These verification results appeared in the proceedings of the 2014 international conference on Formal Methods. While a lot of...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
