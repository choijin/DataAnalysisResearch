<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Probabilistic Tabled Logic Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Tabled resolution uses memoization to address the major shortcomings of Prolog-style resolution, namely, weak termination, repeated subcomputations, and weak semantics for negation.  Several complex problems requiring fixed-point computation, including several model checking and program analysis problems, have been cast as query evaluation over logic programs and solved efficiently using tabled resolution.&lt;br/&gt;&lt;br/&gt;This project aims to combine deduction, especially tabled resolution, with probabilistic inference in order to facilitate declarative modeling and reasoning of systems with probabilistic behavior.  The project includes (a) fundamental research on the semantics of probabilistic tabled resolution, (b) implementation of the research results in a robust prototype, and (c) development of applications that combine logical and probabilistic reasoniong such as probabilistic model checking of finite-state and pushdown models and probabilistic program analysis.  The project addresses several problems at the level of semantics, including the treatment of programs with a mixture of continuous and discrete random variables, programs that encode dynamic models over unbounded but discrete time, and the integration of scalable  probabilistic inference techniques (e.g. sampling) with deduction.  At the implementation level, the project develops light-weight methods for incorporating probabilistic inference and parameter learning into a declarative programming framework called Probabilistic Tabled Logic Programming (PTLP).  This framework provides a firm semantic and computational basis for combining logical and probabilistic reasoning.  A computing infrastructure that tightly integrates computational logic, statistics, and constraint processing will have an immediate impact on the areas of system development and verification, planning, logistics, and optimization and control, with broad application in science and engineering.</AbstractNarration>
<MinAmdLetterDate>07/21/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/21/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018459</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Warren</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David S Warren</PI_FULL_NAME>
<EmailAddress>warren@cs.sunysb.edu</EmailAddress>
<PI_PHON>6314446814</PI_PHON>
<NSF_ID>000319791</NSF_ID>
<StartDate>07/21/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Scott</FirstName>
<LastName>Smolka</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Scott A Smolka</PI_FULL_NAME>
<EmailAddress>sas@cs.stonybrook.edu</EmailAddress>
<PI_PHON>6314732931</PI_PHON>
<NSF_ID>000172536</NSF_ID>
<StartDate>07/21/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>I.</FirstName>
<LastName>Ramakrishnan</LastName>
<PI_MID_INIT>V</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>I. V Ramakrishnan</PI_FULL_NAME>
<EmailAddress>ram@cs.stonybrook.edu</EmailAddress>
<PI_PHON>6316328451</PI_PHON>
<NSF_ID>000365929</NSF_ID>
<StartDate>07/21/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Coimbatore</FirstName>
<LastName>Ramakrishnan</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Coimbatore R Ramakrishnan</PI_FULL_NAME>
<EmailAddress>cram@cs.stonybrook.edu</EmailAddress>
<PI_PHON>6316328218</PI_PHON>
<NSF_ID>000326890</NSF_ID>
<StartDate>07/21/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Stony Brook</Name>
<CityName>Stony Brook</CityName>
<ZipCode>117940001</ZipCode>
<PhoneNumber>6316329949</PhoneNumber>
<StreetAddress>WEST 5510 FRK MEL LIB</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804878247</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020657151</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SUNY at Stony Brook]]></Name>
<CityName>Stony Brook</CityName>
<StateCode>NY</StateCode>
<ZipCode>117940001</ZipCode>
<StreetAddress><![CDATA[WEST 5510 FRK MEL LIB]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-c32a2f60-b4fb-7bfb-da55-1f52541d4df9"> </span></p> <p><span id="docs-internal-guid-c32a2f60-b521-6d11-adb4-e36707100b51"> </span></p> <p dir="ltr"><span>Logical models have been used widely in databases and knowledge bases for organizing and reasoning with large and complex data sets. &nbsp;Prolog is a programming language whose operational semantics is based on a proof procedure from logic called resolution. &nbsp;The XSB logic-programming (LP) system, previously developed by the PIs, &nbsp;extends Prolog with tabled resolution, a technique that addresses the major shortcomings of Prolog-style resolution, namely, weak termination, repeated subcomputations, and weak semantics for negation. </span></p> <p dir="ltr"><span>This main goal of this project was to extend tabled resolution with probabilistic inference in order to facilitate declarative modeling and reasoning of systems with probabilistic behavior. &nbsp;The project envisioned the use of the resulting framework, called </span><em>Probabilistic Tabled Logic Programming </em><span>(PTLP), to develop complex applications that combine deduction with probabilistic inference, including probabilistic model checking of &nbsp;finite-state and pushdown models, mixture models for density estimation, and probabilistic temporal models combining continuous and discrete data.</span></p> <p>&nbsp;</p> <p dir="ltr"><strong>Intellectual Merit: &nbsp;</strong><span>This main technical results of the project are as follows:</span></p> <ol> <li dir="ltr"> <p dir="ltr"><em>Continuous Random Variables in Probabilistic Logic Programs: </em><span>&nbsp;At a foundational level, this project has resulted in extending the semantics of probabilistic logic programs to include continuous random variables. &nbsp;A practical aspect of this work is the development of techniques for inference as well as parameter learning for logical models with continuous random variables (e.g. as seen in models such as Kalman filters and finite mixture models).</span></p> </li> <li dir="ltr"> <p dir="ltr"><em>Recursive Specifications:</em><span> This project has also developed a fundamental representation, called Factored Equation Diagrams, to reason about recursive specifications of probabilistic systems, such as those that arise in the verification of probabilistic reactive systems (e.g Markov Models) and in probabilistic program analysis.</span></p> </li> <li dir="ltr"> <p dir="ltr"><em>Approximate Inference:</em><span> Exact probabilistic inference is intractable and hence is impractical for many large models. &nbsp;This project resulted in the development of two sets of approximate inference techniques: (i) Adaptive Markov Chain Monte Carlo for scalable sampling-based inference of conditional queries (where the probability of a query is estimated when some evidence is known), and (ii) a symbolic method &nbsp;that combines two sampling techniques, likelihood weighting and rejection sampling, for inference over large models.</span></p> </li> </ol> <p dir="ltr"><span> </span></p> <p dir="ltr"><strong>Broader Impact: &nbsp;</strong><span>&nbsp;</span><span>This project has laid the foundations for a programming language that combines Computational Logic, Statistics, and Constraint Processing. &nbsp;The project has demonstrated the impact of this integration on system development and verification. &nbsp;From an educational perspective, this project has helped train a number of graduate students to be experts in this area. &nbsp;A graduate-level course on computational logic has been significantly revised with the addition of the foundations of probabilistic logic programming, exposing students in our graduate program to the combination of logical and statistical reasoning.</span></p> <p dir="ltr"><span><br /></span></p> <p>&nbsp;</p><br> <p>            Last Modified: 10/29/2015<br>      Modified by: Coimbatore&nbsp;R&nbsp;Ramak...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[      Logical models have been used widely in databases and knowledge bases for organizing and reasoning with large and complex data sets.  Prolog is a programming language whose operational semantics is based on a proof procedure from logic called resolution.  The XSB logic-programming (LP) system, previously developed by the PIs,  extends Prolog with tabled resolution, a technique that addresses the major shortcomings of Prolog-style resolution, namely, weak termination, repeated subcomputations, and weak semantics for negation.  This main goal of this project was to extend tabled resolution with probabilistic inference in order to facilitate declarative modeling and reasoning of systems with probabilistic behavior.  The project envisioned the use of the resulting framework, called Probabilistic Tabled Logic Programming (PTLP), to develop complex applications that combine deduction with probabilistic inference, including probabilistic model checking of  finite-state and pushdown models, mixture models for density estimation, and probabilistic temporal models combining continuous and discrete data.    Intellectual Merit:  This main technical results of the project are as follows:   Continuous Random Variables in Probabilistic Logic Programs:  At a foundational level, this project has resulted in extending the semantics of probabilistic logic programs to include continuous random variables.  A practical aspect of this work is the development of techniques for inference as well as parameter learning for logical models with continuous random variables (e.g. as seen in models such as Kalman filters and finite mixture models).   Recursive Specifications: This project has also developed a fundamental representation, called Factored Equation Diagrams, to reason about recursive specifications of probabilistic systems, such as those that arise in the verification of probabilistic reactive systems (e.g Markov Models) and in probabilistic program analysis.   Approximate Inference: Exact probabilistic inference is intractable and hence is impractical for many large models.  This project resulted in the development of two sets of approximate inference techniques: (i) Adaptive Markov Chain Monte Carlo for scalable sampling-based inference of conditional queries (where the probability of a query is estimated when some evidence is known), and (ii) a symbolic method  that combines two sampling techniques, likelihood weighting and rejection sampling, for inference over large models.     Broader Impact:   This project has laid the foundations for a programming language that combines Computational Logic, Statistics, and Constraint Processing.  The project has demonstrated the impact of this integration on system development and verification.  From an educational perspective, this project has helped train a number of graduate students to be experts in this area.  A graduate-level course on computational logic has been significantly revised with the addition of the foundations of probabilistic logic programming, exposing students in our graduate program to the combination of logical and statistical reasoning.            Last Modified: 10/29/2015       Submitted by: Coimbatore R Ramakrishnan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
