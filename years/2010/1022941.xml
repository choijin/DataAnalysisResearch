<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: "Hands-On" Collaborative Reasoning across the Curriculm</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>498832.00</AwardTotalIntnAmount>
<AwardAmount>498832</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Stephanie August</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Software is ubiquitous, yet its development remains error-prone.  Software defects are expensive to fix and can result in mission failure, infrastructure damage, and loss of life.  To avoid another generation of software failure, our students must learn the skills necessary to reason rigorously about the software they develop.  This project is developing student exercises to teach principles of mathematical reasoning in multiple courses across the computer science curriculum.  Previous results suggest this approach increases student learning and attitude towards analytical reasoning.&lt;br/&gt;&lt;br/&gt;Expected outcomes include several web-based learning modules called Reasoning Assistants.  These interactive exercises and tutorials allow students to explore software verification, analytical performance, component-based contracts and testing.  The reasoning assistants are complemented by a collection of in-class collaborative exercises.  Materials are being used and assessed at a diverse set of institutions.  Several hundred students and a dozen faculty are expected to participate.</AbstractNarration>
<MinAmdLetterDate>08/09/2010</MinAmdLetterDate>
<MaxAmdLetterDate>11/24/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1022941</AwardID>
<Investigator>
<FirstName>Murali</FirstName>
<LastName>Sitaraman</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Murali Sitaraman</PI_FULL_NAME>
<EmailAddress>murali@clemson.edu</EmailAddress>
<PI_PHON>8646566738</PI_PHON>
<NSF_ID>000269181</NSF_ID>
<StartDate>08/09/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jason</FirstName>
<LastName>Hallstrom</LastName>
<PI_MID_INIT>O</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jason O Hallstrom</PI_FULL_NAME>
<EmailAddress>jhallstrom@fau.edu</EmailAddress>
<PI_PHON>8646504136</PI_PHON>
<NSF_ID>000336178</NSF_ID>
<StartDate>08/09/2010</StartDate>
<EndDate>11/24/2015</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Chong</FirstName>
<LastName>Pak</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Chong Pak</PI_FULL_NAME>
<EmailAddress>richpak@clemson.edu</EmailAddress>
<PI_PHON>8646562424</PI_PHON>
<NSF_ID>000258030</NSF_ID>
<StartDate>08/09/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Clemson University</Name>
<CityName>CLEMSON</CityName>
<ZipCode>296345701</ZipCode>
<PhoneNumber>8646562424</PhoneNumber>
<StreetAddress>230 Kappa Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>South Carolina</StateName>
<StateCode>SC</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>SC03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042629816</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CLEMSON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042629816</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Clemson University]]></Name>
<CityName>CLEMSON</CityName>
<StateCode>SC</StateCode>
<ZipCode>296345701</ZipCode>
<StreetAddress><![CDATA[230 Kappa Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>South Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>SC03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>7492</Code>
<Text>CCLI-Type 2 (Expansion)</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0410</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~498832</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Developing software that functions correctly according to given specifications is a challenging problem. &nbsp;In typical undergraduate computer science education, students use testing to check the workings of their software. By using a trial and error method of choosing inputs and testing their software by running it on those inputs, students achieve a certain understanding of the software and find some causes for when it fails. &nbsp;The present project has been concerned with an alternative approach in which students learn to reason analytically about the correctness of the software they develop on all valid inputs. &nbsp;Analytical reasoning is the bedrock of computer science and it is critical for achieving a thorough understanding and developing high quality software.</p> <p><br />The present project has developed techniques for teaching principles of analytical reasoning using "hands on" collaborative activities, with and without the support of automated reasoning tools. &nbsp;To enable students to practice the principles they learn, a web-integrated reasoning system has been built and made freely available. &nbsp;The principles have been taught and assessed over multiple years. &nbsp;They have been institutionalized in two required courses for Computer Science majors at Clemson and they have been communicated to several educators through nearly 20 workshops and other sessions. &nbsp;The results continue to be disseminated through web sites and web-integrated reasoning tools.</p> <p><br />The significant outcomes of the project are the following. &nbsp;It is possible for undergraduate students to learn the central skills for analytical reasoning about code correctness. &nbsp;Their learning and attitudes can be continuously assessed and improved by observing their performance on an inventory of reasoning principles for ensuring code correctness. &nbsp;All students can be engaged in analytical reasoning with collaborative, "hands on" activities. Automated reasoning tools contribute to engagement and learning both inside and outside the classrooms.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/29/2016<br>      Modified by: Murali&nbsp;Sitaraman</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Developing software that functions correctly according to given specifications is a challenging problem.  In typical undergraduate computer science education, students use testing to check the workings of their software. By using a trial and error method of choosing inputs and testing their software by running it on those inputs, students achieve a certain understanding of the software and find some causes for when it fails.  The present project has been concerned with an alternative approach in which students learn to reason analytically about the correctness of the software they develop on all valid inputs.  Analytical reasoning is the bedrock of computer science and it is critical for achieving a thorough understanding and developing high quality software.   The present project has developed techniques for teaching principles of analytical reasoning using "hands on" collaborative activities, with and without the support of automated reasoning tools.  To enable students to practice the principles they learn, a web-integrated reasoning system has been built and made freely available.  The principles have been taught and assessed over multiple years.  They have been institutionalized in two required courses for Computer Science majors at Clemson and they have been communicated to several educators through nearly 20 workshops and other sessions.  The results continue to be disseminated through web sites and web-integrated reasoning tools.   The significant outcomes of the project are the following.  It is possible for undergraduate students to learn the central skills for analytical reasoning about code correctness.  Their learning and attitudes can be continuously assessed and improved by observing their performance on an inventory of reasoning principles for ensuring code correctness.  All students can be engaged in analytical reasoning with collaborative, "hands on" activities. Automated reasoning tools contribute to engagement and learning both inside and outside the classrooms.                Last Modified: 10/29/2016       Submitted by: Murali Sitaraman]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
