<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small:Collaborative Research: Supporting Continuous Awareness and Exploration of Social and Design Dependencies</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>167907.00</AwardTotalIntnAmount>
<AwardAmount>167907</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern software engineering is a highly social activity, which is in contrast aimed at producing technical artifacts. As a result, complex dependencies between the technical elements of software systems and the social structures of the developers that are tasked with their creation have a direct effect on software quality: in projects that exhibit a high degree of congruence between the design of a software system and the social communication structures of its developers, teams are more productive and systems contain fewer faults. This research project aims to create the necessary tool support so that software engineers can be made keenly aware of these socio-technical dependencies within the familiar context of their everyday development activities. By providing this information in this specific context ? at a time when it is useful and actionable ? the broader impacts of this research have the potential to dramatically transform software engineering habits and practices by bringing into sharper focus the existing and emerging socio-technical trends of a development effort, allowing developers to intervene when they diverge, and ultimately improving the quality of the software systems produced.&lt;br/&gt;&lt;br/&gt;To achieve these objectives, this research project is grounded on the creation of an architecture-centric toolset that supports the analysis of social network patterns, designed to be an addition to the popular Eclipse development environment. This toolset will support continuous awareness of emerging socio-technical dependencies by collecting data and providing a host of displays that allow developers to visualize their project?s software architecture, dependencies between source code units, and the social network formed through analysis of developer communications. Key contributions and advances of this work include the novel integration of social aspects of development with the architecture of software systems, the provision of concrete socio-architectural congruence metrics, and the presentation of this information to developers during ongoing development efforts.</AbstractNarration>
<MinAmdLetterDate>08/05/2010</MinAmdLetterDate>
<MaxAmdLetterDate>06/21/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017408</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Georgas</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John C Georgas</PI_FULL_NAME>
<EmailAddress>john.georgas@nau.edu</EmailAddress>
<PI_PHON>9285239984</PI_PHON>
<NSF_ID>000514746</NSF_ID>
<StartDate>08/05/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northern Arizona University</Name>
<CityName>Flagstaff</CityName>
<ZipCode>860110001</ZipCode>
<PhoneNumber>9285230886</PhoneNumber>
<StreetAddress>ARD Building #56, Suite 240</StreetAddress>
<StreetAddress2><![CDATA[1395 South Knoles Drive]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<StateCode>AZ</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AZ01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>806345542</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHERN ARIZONA UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>806345542</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northern Arizona University]]></Name>
<CityName>Flagstaff</CityName>
<StateCode>AZ</StateCode>
<ZipCode>860110001</ZipCode>
<StreetAddress><![CDATA[ARD Building #56, Suite 240]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AZ01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~88936</FUND_OBLG>
<FUND_OBLG>2011~78971</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-3ef1ed72-dc64-56dc-9cd3-8f21e149f363"> </span></p> <p dir="ltr"><span>Software engineering is a highly social activity with the end goal of producing technical artifacts, such as running software systems and accompanying documentation. As a result, the activity exhibits a complex interplay of technical and social concerns that are closely dependent on one another. One of the most important of these is the interplay between software architecture and the social structures of the developers charged with creating software systems. The focus of this software engineering research grant is an investigation of the methods and research challenges in better integrating insights from the study of socio-architectural dependencies into software engineering practice in a way that is useful during ongoing development efforts.</span></p> <p dir="ltr">The architectural design of a software system captures the system&rsquo;s decomposition into modules and the interface contracts that govern their interactions, which makes it play a key role in determining the communication needs of the developers assigned to the project. This influence, however, is not one-way: architectures are also affected by the existing organizational and communication structure of developers who are assigned to specific work tasks: The divisions between teams, the distribution of technical expertise, the co-location or distribution of developers, and the communication practices of developers are just a few examples of factors that may influence architectural design.</p> <p dir="ltr">Given this interplay between architectural design and organizational structure, a key factor in the software engineering of successful systems is the degree of congruence or match between the design of a system and the communicative behaviors of its developers. The research area of socio-technical analysis (STA) has grown around the study of these dependencies between technical and social artifacts: Interesting results from this research show that a high degree of match between the technical dependencies among artifacts and the actual communication patterns exhibited by the team result in higher quality software and faster development times, which ultimately results in better software systems that are less costly.</p> <p dir="ltr">Applying these insights in an ongoing software development process, however, is very challenging: In modern development settings, architectures evolve rapidly and often drift away from their original form. As a result, it is unlikely that a high degree of congruence between communication patterns and architectural design will be maintained, even if the original design was carefully crafted to exhibit it. Current STA research has also been largely centered on data collected from already complete development efforts that are of little value to the software development process itself. Further exacerbating this is the fact that the analytical focus has been heavily placed at the level of source code files, which does not focus on the cross-boundary design artifacts that are most critical in understanding the communication needs of a development effort and limits how well these analyses scale.</p> <p dir="ltr">This project focused on providing the means with which to leverage insights from socio-technical dependencies in ongoing development efforts. Our Architecture-centric Social Network Awareness Environment (ArSoNAE) toolset (built in the Eclipse development environment) provides software developers with functionality that provides continuous awareness and supports in-depth exploration of a software system&rsquo;s socio-architectural dependencies: the couplings between a system&rsquo;s architectural design and developer communication patterns.</p> <p dir="ltr">This project laid the groundwork for transitioning the research community&rsquo;s increased understanding of the complex...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   Software engineering is a highly social activity with the end goal of producing technical artifacts, such as running software systems and accompanying documentation. As a result, the activity exhibits a complex interplay of technical and social concerns that are closely dependent on one another. One of the most important of these is the interplay between software architecture and the social structures of the developers charged with creating software systems. The focus of this software engineering research grant is an investigation of the methods and research challenges in better integrating insights from the study of socio-architectural dependencies into software engineering practice in a way that is useful during ongoing development efforts. The architectural design of a software system captures the systemÆs decomposition into modules and the interface contracts that govern their interactions, which makes it play a key role in determining the communication needs of the developers assigned to the project. This influence, however, is not one-way: architectures are also affected by the existing organizational and communication structure of developers who are assigned to specific work tasks: The divisions between teams, the distribution of technical expertise, the co-location or distribution of developers, and the communication practices of developers are just a few examples of factors that may influence architectural design. Given this interplay between architectural design and organizational structure, a key factor in the software engineering of successful systems is the degree of congruence or match between the design of a system and the communicative behaviors of its developers. The research area of socio-technical analysis (STA) has grown around the study of these dependencies between technical and social artifacts: Interesting results from this research show that a high degree of match between the technical dependencies among artifacts and the actual communication patterns exhibited by the team result in higher quality software and faster development times, which ultimately results in better software systems that are less costly. Applying these insights in an ongoing software development process, however, is very challenging: In modern development settings, architectures evolve rapidly and often drift away from their original form. As a result, it is unlikely that a high degree of congruence between communication patterns and architectural design will be maintained, even if the original design was carefully crafted to exhibit it. Current STA research has also been largely centered on data collected from already complete development efforts that are of little value to the software development process itself. Further exacerbating this is the fact that the analytical focus has been heavily placed at the level of source code files, which does not focus on the cross-boundary design artifacts that are most critical in understanding the communication needs of a development effort and limits how well these analyses scale. This project focused on providing the means with which to leverage insights from socio-technical dependencies in ongoing development efforts. Our Architecture-centric Social Network Awareness Environment (ArSoNAE) toolset (built in the Eclipse development environment) provides software developers with functionality that provides continuous awareness and supports in-depth exploration of a software systemÆs socio-architectural dependencies: the couplings between a systemÆs architectural design and developer communication patterns. This project laid the groundwork for transitioning the research communityÆs increased understanding of the complex dependencies between the social and technical artifacts of software engineering into the everyday work of software engineers, while also answering research questions concerning the integration of social insights into architectural designs. As our project addressed software ...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
