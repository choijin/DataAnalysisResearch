<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>VEESC: Virtual Execution Environments for Scientific Computing Workshop</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>46800.00</AwardTotalIntnAmount>
<AwardAmount>46800</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Gabrielle D. Allen</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Computer programming languages play a central role in scientific&lt;br/&gt;productivity. They are the interface between domain experts and the&lt;br/&gt;machine. The first generation of scientific languages were statically&lt;br/&gt;compiled computer programming languages such as Fortran, C and C++.&lt;br/&gt;Optimized for efficiency they stayed close to the hardware at the cost of&lt;br/&gt;ease of use.  The languages of choice for scientists are increasingly&lt;br/&gt;dynamic ones like Perl, Python, R, Matlab, Mathematica, Maple, and&lt;br/&gt;JavaScript. Educational material in Bioinformatics, for example, includes&lt;br/&gt;many textbooks for Perl, Python and R and none for C, C++ or Fortran. But&lt;br/&gt;the application of cutting-edge scientific methodology is limited by the&lt;br/&gt;capabilities of the system in which it is implemented.  While dynamic&lt;br/&gt;languages start out as glue for native libraries, with time, more and more&lt;br/&gt;of the actual computations is expressed in those languages.  But quickly&lt;br/&gt;users experience limitations of these languages: performance is not adequate&lt;br/&gt;for compute intensive tasks, space overheads preclude manipulating large&lt;br/&gt;datasets, and information security and reproducibility of results must be&lt;br/&gt;addressed.  &lt;br/&gt;&lt;br/&gt;This workshop explores the need for a Scientific Software &lt;br/&gt;Innovation Institute (S2I2) centered around Virtual Execution Infrastructures &lt;br/&gt;for Next Generation Scientific Programming Languages.  There is a need&lt;br/&gt;to develop expertise and momentum to encourage development of open source &lt;br/&gt;high-performance implementations of productivity-oriented scientific&lt;br/&gt;programming languages.  To this end, the VEESC workshop brings together&lt;br/&gt;experts in virtual machines and compilers, designers and implementors of&lt;br/&gt;high-level dynamic languages and related systems, and key representatives&lt;br/&gt;from end-user communities in the sciences.</AbstractNarration>
<MinAmdLetterDate>08/02/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/02/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1042905</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Padua</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David A Padua</PI_FULL_NAME>
<EmailAddress>padua@uiuc.edu</EmailAddress>
<PI_PHON>2173334233</PI_PHON>
<NSF_ID>000317715</NSF_ID>
<StartDate>08/02/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Antony</FirstName>
<LastName>Hosking</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Antony L Hosking</PI_FULL_NAME>
<EmailAddress>hosking@cs.umass.edu</EmailAddress>
<PI_PHON>7654163068</PI_PHON>
<NSF_ID>000107257</NSF_ID>
<StartDate>08/02/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jan</FirstName>
<LastName>Vitek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jan Vitek</PI_FULL_NAME>
<EmailAddress>j.vitek@neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000290862</NSF_ID>
<StartDate>08/02/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Chandra</FirstName>
<LastName>Krintz</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Chandra Krintz</PI_FULL_NAME>
<EmailAddress>ckrintz@cs.ucsb.edu</EmailAddress>
<PI_PHON>8058934321</PI_PHON>
<NSF_ID>000288955</NSF_ID>
<StartDate>08/02/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[Young Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7556</Code>
<Text>CONFERENCE AND WORKSHOPS</Text>
</ProgramReference>
<ProgramReference>
<Code>7684</Code>
<Text>STRATEGIC TECHNOLOGIES FOR CI</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~46800</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="section"> <div class="layoutArea"> <div class="column"> <p><span>Software systems are part of the support fabric of scientific innovation. The ability to acquire, process, simulate, and analyze experimental data quickly is a crosscutting requirement for scientific advances in </span><span>fields </span><span>as diverse as high-energy physics, computational chemistry, biology and astronomy. While today research scientists can exploit large bodies of software components, written in many different computer programming languages, optimized and refined over the years, new problems often demand the ability to develop new software incrementally, to modify existing methods, or to quickly glue together a pipeline of off-the-shelf components with minor modifications. For such increasingly popular software development practices, scientists are turning to a new breed of dynamic computer programming languages. Some well known examples include Python, R, Perl, Matlab, Maple, and JavaScript. These languages facilitate interactive prototyping, support rapid development, and can be embedded or used to manage complex scientific software pipelines. They are increasingly assuming the role of interface between scientist and computational infrastructure. Unfortunately, dynamic languages in uses in the sciences have serious deficiencies in their performance, scalability and support of modern multicore architectures as well as cloud fabrics. Performance of programs written using these domain-specific languages is several orders of magnitude less than similar ones written in static languages like Fortran or C, scalability to large-scale datasets is also lacking in most dynamic languages, and </span><span>finally, </span><span>while dynamic languages make it easier to produce working systems quickly they do not enhance our ability to reason about the correctness of these systems. </span></p> <p><span>The VEESC workshop assessed the state of dynamic programming languages for scientific computing, the quality of the virtual execution environments that support them, and the degree to which such languages allow scientists to interact with the rest of the software and hardware infrastructure. The workshop also investigated the growing need for a software institute that would support scientific advances by acting as a bridge between advances in computing, languages, compilers, middleware, distributed systems, and the broader scientific community. </span></p> <p><span>The scientific activities on which we focused our discussion can broadly be termed </span><span>Scalable Data Analytics. </span><span>The basic scientific problem is to provide tools for data acquisition, management and analysis for the working scientist which can scale up to massively parallel and cloud fabrics, but, crucially, which can as easily scale down to a single laptop. The workshop participants emphasized the importance of smooth scaling of the scientific activity from the exploratory mode to production settings. While we view the impact of a software institute as applying to many disciplines, it is also important to start with a focused effort and involve stake-holder communities that will actively contribute to its success. As such, we have identified statistics, machine learning, and biocomputing as target domains for the proposed effort. </span></p> <p><span>There is a clear need for a common, open-source, high-performing execution environment for dynamic languages that can only be designed, created, and maintained under the auspices of a Software Institute with funding from the NSF and collaboration with industrial partners and research labs. The Institute should also investigate issues of programmer productivity and correctness linked to dynamic languages. The report defines the key requirements for a software institute and the challenges that have to be overcome. We emphasize the importance of dynamic langua...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    Software systems are part of the support fabric of scientific innovation. The ability to acquire, process, simulate, and analyze experimental data quickly is a crosscutting requirement for scientific advances in fields as diverse as high-energy physics, computational chemistry, biology and astronomy. While today research scientists can exploit large bodies of software components, written in many different computer programming languages, optimized and refined over the years, new problems often demand the ability to develop new software incrementally, to modify existing methods, or to quickly glue together a pipeline of off-the-shelf components with minor modifications. For such increasingly popular software development practices, scientists are turning to a new breed of dynamic computer programming languages. Some well known examples include Python, R, Perl, Matlab, Maple, and JavaScript. These languages facilitate interactive prototyping, support rapid development, and can be embedded or used to manage complex scientific software pipelines. They are increasingly assuming the role of interface between scientist and computational infrastructure. Unfortunately, dynamic languages in uses in the sciences have serious deficiencies in their performance, scalability and support of modern multicore architectures as well as cloud fabrics. Performance of programs written using these domain-specific languages is several orders of magnitude less than similar ones written in static languages like Fortran or C, scalability to large-scale datasets is also lacking in most dynamic languages, and finally, while dynamic languages make it easier to produce working systems quickly they do not enhance our ability to reason about the correctness of these systems.   The VEESC workshop assessed the state of dynamic programming languages for scientific computing, the quality of the virtual execution environments that support them, and the degree to which such languages allow scientists to interact with the rest of the software and hardware infrastructure. The workshop also investigated the growing need for a software institute that would support scientific advances by acting as a bridge between advances in computing, languages, compilers, middleware, distributed systems, and the broader scientific community.   The scientific activities on which we focused our discussion can broadly be termed Scalable Data Analytics. The basic scientific problem is to provide tools for data acquisition, management and analysis for the working scientist which can scale up to massively parallel and cloud fabrics, but, crucially, which can as easily scale down to a single laptop. The workshop participants emphasized the importance of smooth scaling of the scientific activity from the exploratory mode to production settings. While we view the impact of a software institute as applying to many disciplines, it is also important to start with a focused effort and involve stake-holder communities that will actively contribute to its success. As such, we have identified statistics, machine learning, and biocomputing as target domains for the proposed effort.   There is a clear need for a common, open-source, high-performing execution environment for dynamic languages that can only be designed, created, and maintained under the auspices of a Software Institute with funding from the NSF and collaboration with industrial partners and research labs. The Institute should also investigate issues of programmer productivity and correctness linked to dynamic languages. The report defines the key requirements for a software institute and the challenges that have to be overcome. We emphasize the importance of dynamic languages in the scientific process, and the cost and complexity of providing support for these languages. Finally, we address community building and organizational issues for the proposed institute.     The participants strongly agreed that a significant investment is requ...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
