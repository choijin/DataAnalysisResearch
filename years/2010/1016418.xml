<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Modular ACL2</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>299386.00</AwardTotalIntnAmount>
<AwardAmount>299386</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Reliability is extremely important for some software and hardware&lt;br/&gt;applications. One approach is to use a programming language with a&lt;br/&gt;mechanized logic---a so-called theorem-prover---to prove theorems that&lt;br/&gt;establish some critical behavioral characteristics. Among theorem-provers,&lt;br/&gt;ACL2 has found use with several industrial suppliers of high assurance&lt;br/&gt;software and hardware. ACL2 does not support component-oriented software&lt;br/&gt;development, however, making it difficult to use with large and complex&lt;br/&gt;projects.&lt;br/&gt;&lt;br/&gt;This research project has three goals: to add a pragmatic module system to&lt;br/&gt;ACL2; to equip it with a hygienic macro system; and to investigate a type&lt;br/&gt;system that accommodates ACL2's programming idioms.  The project team&lt;br/&gt;employs a cyclic, three-step exploration method. The first step is to&lt;br/&gt;adapt constructs from existing, similar languages to ACL2, especially a&lt;br/&gt;logical meaning consistent with the theorem prover of ACL2. The second&lt;br/&gt;step is to explore the pragmatics of the design with a wide range of&lt;br/&gt;examples. The third step is to add implementations to a pedagogic,&lt;br/&gt;interactive development environment for ACL2 and to evaluate their&lt;br/&gt;usefulness in software engineering courses. The results of this last step&lt;br/&gt;are used to re-start the cycle.&lt;br/&gt;&lt;br/&gt;The work will contribute to the dissemination of theorem provers in&lt;br/&gt;classrooms and industry. The research team expects to expose college&lt;br/&gt;students to the use of theorem proving in the design and development of&lt;br/&gt;complex systems with dozens, and possibly hundreds, of reliable&lt;br/&gt;components. The team also hopes to improve the ability of industrial ACL2&lt;br/&gt;programmers to tackle complex component-oriented systems.</AbstractNarration>
<MinAmdLetterDate>08/05/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/05/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1016418</AwardID>
<Investigator>
<FirstName>Matthias</FirstName>
<LastName>Felleisen</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Matthias Felleisen</PI_FULL_NAME>
<EmailAddress>matthias@ccs.neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000286813</NSF_ID>
<StartDate>08/05/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northeastern University</Name>
<CityName>BOSTON</CityName>
<ZipCode>021155005</ZipCode>
<PhoneNumber>6173733004</PhoneNumber>
<StreetAddress>360 HUNTINGTON AVE</StreetAddress>
<StreetAddress2><![CDATA[177-500]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001423631</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHEASTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001423631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northeastern University]]></Name>
<CityName>BOSTON</CityName>
<StateCode>MA</StateCode>
<ZipCode>021155005</ZipCode>
<StreetAddress><![CDATA[360 HUNTINGTON AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~299386</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><br />Engineers use calculus and analysis to model and understand new productssuch as airplanes, bridges, machines, oil drilling techniques, roads, andskyscrapers. Similarly, software engineering rests on logic, a relativelynew, foundational field of mathematics. Unfortunately, many computerscience departments teach logic in courses that is disjoint from the restof the curriculum. In particular, it does not relate logic to the majoractivities of working software engineers: collecting requirements,articulating specifications, designing programs, and relating programs totheir specifications.</p> <p><br />This projected aimed to address this gap between teaching of logic and thereality of engineering software. While Prof. Rex Page at Oklahoma focusedon the development of teaching materials, the team at Northeasternconstructed an integrated development environment (IDE) for stating logicaltheorems about programs, designing programs, and proving the theorems aboutthe programs. In addition, the team designed and implemented a modularversion of ACL2 so that Page's course on software engineering couldintroduce the idea of modular reasoning about software.&nbsp;</p> <p><br />DrACuLa, the IDE, extends DrRacket and integrates it with the ACL2 theoremprover. The Northeastern team developed the IDE and tested it in asecond-semester freshman course. It held up well for four years of Page'ssoftware engineering course. Over this time, the Northeastern team regularly consulted with Page at Oklahoma to fix flaws in the IDE and to add the desired functionality.&nbsp;</p> <p><br />See the attached screenshot; it shows a small graphical interactive (GUI) program that a freshman student might design. The screen shot shows how the student learn to articulate basic claims about the various GUI event-handling functions in the program.One way to articulate such a claim is to formulate a randomly checked property. Once the random property checker cannot find counter-examples, the student would reformulate the property as a logical theorems and ask DrACuLa to prove the theorem. The IDE performs this task by calling out to the ACL2 theorem prover, which is also used by various hardware companies to verify the workings of computers.&nbsp;</p> <p><br />For the second goal, the Northeastern team designed and implemented threedifferent module systems for ACL2, dubbed Modular ACL2. The team evaluatedeach design with respect to its expressiveness and usefulness, usually onrealistic large, multi-module software systems. Over the course of theinvestigation, it became clear that even though the module systemssupported Page's teaching project, they failed to advance ACL2'scapabilities. The team identified ACL2's old-fashioned macro system as thekey problem. Unfortunately, attempts to add a modern macro system toModular ACL2 into the theorem prover were unsuccessful due to seriousperformance problems. Resources permitting the team will continue tomaintain the software and to continue the search for a performantsolution.&nbsp;</p> <p>In sum, the project showed the feasibility of integrating programming and logic for students as early as the freshman year. Northeastern continues to teach this course (with a different flavor of ACL2) and CMU faculty have stated their desire to catch up with this novel curriculum. Page has demonstrated that software engineering capstone courses can benefit from the integration of logic and program design.&nbsp;</p><br> <p>            Last Modified: 09/30/2014<br>      Modified by: Matthias&nbsp;Felleisen</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNav...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Engineers use calculus and analysis to model and understand new productssuch as airplanes, bridges, machines, oil drilling techniques, roads, andskyscrapers. Similarly, software engineering rests on logic, a relativelynew, foundational field of mathematics. Unfortunately, many computerscience departments teach logic in courses that is disjoint from the restof the curriculum. In particular, it does not relate logic to the majoractivities of working software engineers: collecting requirements,articulating specifications, designing programs, and relating programs totheir specifications.   This projected aimed to address this gap between teaching of logic and thereality of engineering software. While Prof. Rex Page at Oklahoma focusedon the development of teaching materials, the team at Northeasternconstructed an integrated development environment (IDE) for stating logicaltheorems about programs, designing programs, and proving the theorems aboutthe programs. In addition, the team designed and implemented a modularversion of ACL2 so that Page's course on software engineering couldintroduce the idea of modular reasoning about software.    DrACuLa, the IDE, extends DrRacket and integrates it with the ACL2 theoremprover. The Northeastern team developed the IDE and tested it in asecond-semester freshman course. It held up well for four years of Page'ssoftware engineering course. Over this time, the Northeastern team regularly consulted with Page at Oklahoma to fix flaws in the IDE and to add the desired functionality.    See the attached screenshot; it shows a small graphical interactive (GUI) program that a freshman student might design. The screen shot shows how the student learn to articulate basic claims about the various GUI event-handling functions in the program.One way to articulate such a claim is to formulate a randomly checked property. Once the random property checker cannot find counter-examples, the student would reformulate the property as a logical theorems and ask DrACuLa to prove the theorem. The IDE performs this task by calling out to the ACL2 theorem prover, which is also used by various hardware companies to verify the workings of computers.    For the second goal, the Northeastern team designed and implemented threedifferent module systems for ACL2, dubbed Modular ACL2. The team evaluatedeach design with respect to its expressiveness and usefulness, usually onrealistic large, multi-module software systems. Over the course of theinvestigation, it became clear that even though the module systemssupported Page's teaching project, they failed to advance ACL2'scapabilities. The team identified ACL2's old-fashioned macro system as thekey problem. Unfortunately, attempts to add a modern macro system toModular ACL2 into the theorem prover were unsuccessful due to seriousperformance problems. Resources permitting the team will continue tomaintain the software and to continue the search for a performantsolution.   In sum, the project showed the feasibility of integrating programming and logic for students as early as the freshman year. Northeastern continues to teach this course (with a different flavor of ACL2) and CMU faculty have stated their desire to catch up with this novel curriculum. Page has demonstrated that software engineering capstone courses can benefit from the integration of logic and program design.        Last Modified: 09/30/2014       Submitted by: Matthias Felleisen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
