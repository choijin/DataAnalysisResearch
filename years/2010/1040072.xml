<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>FIA: Collaborative Research: Architecting for Innovation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2010</AwardEffectiveDate>
<AwardExpirationDate>09/30/2013</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>200000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A Platform for Internet Innovation&lt;br/&gt;&lt;br/&gt;The architectural stability of the Internet was crucial in fostering the development of new applications and networking technologies by giving the former a stable base upon which to build and giving the latter a fixed set of requirements to support. However, in recent years this architectural stability has become a liability, as there are areas of increasing importance ? most notably inadequate support of security and availability, lack of adequate mechanisms for privacy, mobility, middleboxes, and data-oriented functionality ? where the original Internet architecture falls short.  The persistence of the Internet's architectural deficiencies is not because they are intellectually intractable, but because they are beyond the reach of incrementally deployable changes.  Based on this observation, the research team takes a different approach than recent clean-slate designs, focusing not on a new fixed architecture but instead on providing a platform to enable architectural innovation through incrementally deployable changes, without massive disruption in the infrastructure.&lt;br/&gt;   &lt;br/&gt;In this research project, the research team focuses on the ?hardware-defined functionality? challenge and proposes a ?platform for innovation? that allows the network infrastructure to support new architectures without changes to the underlying hardware. In particular, this approach will enable forwarding hardware to support a wide range of alternative designs.  In addition, so that changes can be introduced alongside the current design, hardware will also be able to support multiple designs simultaneously. &lt;br/&gt; &lt;br/&gt;The proposed platform will use a newly developed paradigm called Software-Defined Networks (SDN), currently embodied in the OpenFlow and NOX projects. OpenFlow is an open hardware forwarding interface. NOX is an open-source software platform that provides global abstractions to network management software and in turn communicates the decisions made by this software to the individual forwarding boxes.  This effort will provide a solid foundation for more general SDN designs that are open, comprehensive and can meet long-term needs. &lt;br/&gt;&lt;br/&gt;The research team will also explore and demonstrate applicability of the SDN approach including abstractions and programming model for different domains of network use. These include enterprise, WAN, home, and wireless. To demonstrate the ability of the proposed platform to support innovation in radically new network mechanisms, the research team will deploy prototype novel architectures on SDN. &lt;br/&gt;&lt;br/&gt;If successful, the proposed approach would allow the use of known approaches and design proposals currently available in the literature to address many of the Internet's current problems, as these solutions would be incrementally deployable, without major disruption to the underlying infrastructure. Furthermore, current commercial efforts to address Internet?s deficiencies are disjointed, proprietary, and tailored for short-term needs. The next generation of SDN technology provides a solid basis for coordinated, long-term efforts to address critical needs in areas of security, mobility and support of content-centric application and services. More importantly, the proposed approach would allow the Internet to meet future requirements as they arise through incrementally deployable modifications, relieving network designers of the burden of predicting what these future requirements might be.</AbstractNarration>
<MinAmdLetterDate>09/22/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/22/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1040072</AwardID>
<Investigator>
<FirstName>Hari</FirstName>
<LastName>Balakrishnan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Hari Balakrishnan</PI_FULL_NAME>
<EmailAddress>hari@csail.mit.edu</EmailAddress>
<PI_PHON>6172538713</PI_PHON>
<NSF_ID>000489957</NSF_ID>
<StartDate>09/22/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394301</ZipCode>
<StreetAddress><![CDATA[77 MASSACHUSETTS AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramReference>
<Code>7363</Code>
<Text>RES IN NETWORKING TECH &amp; SYS</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~200000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project was to investigate and develop ways in which architectural innovation could be accommodated effectively in the Internet. We made three significant contributions:</p> <p>1. TCP ex Machina</p> <p>Is it possible for a computer to "discover" the right rules for congestion control (i.e., how fast and when to send data) in networks? Should computers, rather than humans, be tasked with developing congestion control methods? &nbsp;And just how well can computers perform this task? We investigated these questions and found that computers can design schemes that in some cases surpass the best human-designed methods to date. We probed the limits of these machine-generated protocols, and showed how this style of transport-layer protocol design can give more freedom to network architects.</p> <p>Without the ability to adapt its congestion-control algorithms to new scenarios, TCP's inflexibility constrains architectural evolution. New network technologies are typically evaluated based on how well TCP performs over them. &nbsp;This scorecard can lead to perverse behavior, because TCP's network model is limited. For example, because TCP assumes that packet losses are due to congestion and reduces its transmission rate, some subnetworks work hard to hide losses. This often simply adds intolerably long packet delays. One may argue that such designs are misguided, but the difficulties presented by "too-reliable" link layers have been a perennial challenge for 25 years and show no signs of abating. With the rise of widespread cellular connectivity, these behaviors are common and deeply embedded in deployed infrastructure.</p> <p>We have developed an optimization tool called Remy that takes models of the network and workloads as input, and designs a congestion-control algorithm that tries to maximize the total expected value of a specified objective function. The resulting pre-calculated, optimized algorithm is then run on endpoints.</p> <p>For networks broadly consistent with the assumptions provided to Remy at design time, the machine-generated algorithms dramatically outperform existing methods, including Cubic, Compound, and Vegas. Comparing Remy's algorithms with schemes that require modifications to network gateways, including Cubic-over-sfqCoDel and XCP, Remy generally matched or surpassed these schemes, despite being entirely end-to-end. Please see http://mit.edu/remy.</p> <p>2. Extending software-defined networking (SDN) to the data plane.</p> <p>The Internet's "data plane" is in a continuous state of flux. Every few months, researchers publish the design of a new high-performance queueing or scheduling scheme that runs inside the networkfabric. Many such schemes have been queen for a day, only to besurpassed soon after as methods --- or evaluation metrics --- evolve.&nbsp;The lesson, in our view: there will never be a conclusive victor to govern queue management and scheduling inside network hardware. We provided quantitative evidence by demonstrating bidirectional cyclic preferences among three popular contemporary queueing and scheduling configurations.</p> <p>We posited that the way forward requires carefully extending SDN to control the fast-path scheduling and queueing behavior of a switch.To this end, we propose adding a small FPGA to switches. &nbsp;We have synthesized, placed, and routed hardware implementations of CoDel and RED. These schemes require only a few thousand FPGA "slices" to run at 10 Gbps or more---a minuscule fraction of current low-end FPGAs---demonstrating the feasibility and economy of our approach.</p> <p>3. Mosh, the mobile shell.</p> <p>Remote terminal applications are almost as old as the Internet. The most popular such application today is the SSH, which runs inside a terminal emulator. Unfortunately, SSH has two major weaknesses that make it unsuitable for mobile use. First, because it runs over TCP, SSH does not suppor...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project was to investigate and develop ways in which architectural innovation could be accommodated effectively in the Internet. We made three significant contributions:  1. TCP ex Machina  Is it possible for a computer to "discover" the right rules for congestion control (i.e., how fast and when to send data) in networks? Should computers, rather than humans, be tasked with developing congestion control methods?  And just how well can computers perform this task? We investigated these questions and found that computers can design schemes that in some cases surpass the best human-designed methods to date. We probed the limits of these machine-generated protocols, and showed how this style of transport-layer protocol design can give more freedom to network architects.  Without the ability to adapt its congestion-control algorithms to new scenarios, TCP's inflexibility constrains architectural evolution. New network technologies are typically evaluated based on how well TCP performs over them.  This scorecard can lead to perverse behavior, because TCP's network model is limited. For example, because TCP assumes that packet losses are due to congestion and reduces its transmission rate, some subnetworks work hard to hide losses. This often simply adds intolerably long packet delays. One may argue that such designs are misguided, but the difficulties presented by "too-reliable" link layers have been a perennial challenge for 25 years and show no signs of abating. With the rise of widespread cellular connectivity, these behaviors are common and deeply embedded in deployed infrastructure.  We have developed an optimization tool called Remy that takes models of the network and workloads as input, and designs a congestion-control algorithm that tries to maximize the total expected value of a specified objective function. The resulting pre-calculated, optimized algorithm is then run on endpoints.  For networks broadly consistent with the assumptions provided to Remy at design time, the machine-generated algorithms dramatically outperform existing methods, including Cubic, Compound, and Vegas. Comparing Remy's algorithms with schemes that require modifications to network gateways, including Cubic-over-sfqCoDel and XCP, Remy generally matched or surpassed these schemes, despite being entirely end-to-end. Please see http://mit.edu/remy.  2. Extending software-defined networking (SDN) to the data plane.  The Internet's "data plane" is in a continuous state of flux. Every few months, researchers publish the design of a new high-performance queueing or scheduling scheme that runs inside the networkfabric. Many such schemes have been queen for a day, only to besurpassed soon after as methods --- or evaluation metrics --- evolve. The lesson, in our view: there will never be a conclusive victor to govern queue management and scheduling inside network hardware. We provided quantitative evidence by demonstrating bidirectional cyclic preferences among three popular contemporary queueing and scheduling configurations.  We posited that the way forward requires carefully extending SDN to control the fast-path scheduling and queueing behavior of a switch.To this end, we propose adding a small FPGA to switches.  We have synthesized, placed, and routed hardware implementations of CoDel and RED. These schemes require only a few thousand FPGA "slices" to run at 10 Gbps or more---a minuscule fraction of current low-end FPGAs---demonstrating the feasibility and economy of our approach.  3. Mosh, the mobile shell.  Remote terminal applications are almost as old as the Internet. The most popular such application today is the SSH, which runs inside a terminal emulator. Unfortunately, SSH has two major weaknesses that make it unsuitable for mobile use. First, because it runs over TCP, SSH does not support roaming among IP addresses, orcope with intermittent connectivity while data is pending, and is almost unusable over marginal paths with non...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
