<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Collaborative:  Aster*x:  Load-Balancing Web Traffic Over Wide-Area Networks</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>03/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>75000.00</AwardTotalIntnAmount>
<AwardAmount>75000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Joseph Lyles</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This project proposes a comprehensive load-balancing solution to minimize client response time and reduce system costs for services hosted in wide-area networks. The system, called Aster*x, uses the global state of server load and network congestion, and dynamically routes the requests over appropriate (server and path) pairs, calculated using the load-balancing algorithms developed by project staff. &lt;br/&gt;&lt;br/&gt;The GENI network infrastructure will be used for extensive deployment, evaluation, and demonstration of Aster*x. Aster*x exploits OpenFlow?s logically centralized controller to obtain the global network state and route flows of various granularities. It will use the PlanetLab and ProtoGENI-based computation substrate to host the replicated web service and to generate client requests from multiple locations. The project will provide an opportunity for students across four universities to collaborate and build a relatively large experimental system on GENI.</AbstractNarration>
<MinAmdLetterDate>08/07/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/07/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1050266</AwardID>
<Investigator>
<FirstName>Arvind</FirstName>
<LastName>Krishnamurthy</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Arvind Krishnamurthy</PI_FULL_NAME>
<EmailAddress>arvind@cs.washington.edu</EmailAddress>
<PI_PHON>2066160957</PI_PHON>
<NSF_ID>000488256</NSF_ID>
<StartDate>08/07/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington]]></Name>
<CityName>Seattle</CityName>
<StateCode>WA</StateCode>
<ZipCode>981950001</ZipCode>
<StreetAddress><![CDATA[4333 Brooklyn Ave NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~75000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Over the past decade there has been a change in the way content is hosted and served in the Internet. To meet growing demand, and minimize access time, service is replicated across multiple servers in possibly multiple locations. Content Distribution Networks (CDN), such as those run by Akamai, Limelight, and Amazon serve content from thousands of servers around the world. Some large network operators have built their own CDNs to generate revenues from content customers. Service replication is not limited to just simple web-content. Novel services like Google DNS (designed to accelerate browsing experience) replicate and serve DNS records from many servers. Minimizing client response time by replicating content and load-balancing over the wide-area is, therefore, an important problem, directly affecting revenue worth billions of dollars.</p> <p><br />At the same time, load-balancing over the wide-area is a non-trivial problem. Load-balancing may be oblivious (e.g., spreading the requests equally over all servers, without regard for their load), or stateful (e.g., sending requests to the least-loaded server). In a data-center or a dedicated web-hosting service, the HTTP servers are connected by a regular, over-provisioned network; the load-balancer usually does not consider the network state when load-balancing across servers. However, this simplistic scenario does not hold for unstructured networks, such as enterprise and wide-area networks, that are not custom-built for running server farms. In such unstructured networks, the substantial background traffic and the potential topological biases can significantly affect the performance of network-oblivious load-balancing (our baseline), and inflate the response time (defined as the duration from issuing the HTTP request to the complete receipt of the response).</p> <p><br />In this project, we examined the question: "If we host a service across many HTTP servers spanning multiple campus networks, what is the best way to balance load so as to minimize the client response time?". In particular, we take into account the congestion in the network, the location, and the load on the servers, and, then, manage the load on the network and the servers to try to minimize response time.</p> <p><br />We built a system called Aster*x that uses the global state of server load and network congestion, and dynamically routes the requests over appropriate (server, path) pairs calculated using the load-balancing algorithms we developed. &nbsp;We used GENI for the extensive deployment, evaluation, and demonstration of Aster*x. Aster*x exploits OpenFlow&rsquo;s logically centralized controller to get the global network state and route flows of various granularities. It uses the PlanetLab and Linux-based computation substrate to host the replicated web service and to generate client requests from multiple locations.</p><br> <p>            Last Modified: 07/03/2013<br>      Modified by: Arvind&nbsp;Krishnamurthy</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Over the past decade there has been a change in the way content is hosted and served in the Internet. To meet growing demand, and minimize access time, service is replicated across multiple servers in possibly multiple locations. Content Distribution Networks (CDN), such as those run by Akamai, Limelight, and Amazon serve content from thousands of servers around the world. Some large network operators have built their own CDNs to generate revenues from content customers. Service replication is not limited to just simple web-content. Novel services like Google DNS (designed to accelerate browsing experience) replicate and serve DNS records from many servers. Minimizing client response time by replicating content and load-balancing over the wide-area is, therefore, an important problem, directly affecting revenue worth billions of dollars.   At the same time, load-balancing over the wide-area is a non-trivial problem. Load-balancing may be oblivious (e.g., spreading the requests equally over all servers, without regard for their load), or stateful (e.g., sending requests to the least-loaded server). In a data-center or a dedicated web-hosting service, the HTTP servers are connected by a regular, over-provisioned network; the load-balancer usually does not consider the network state when load-balancing across servers. However, this simplistic scenario does not hold for unstructured networks, such as enterprise and wide-area networks, that are not custom-built for running server farms. In such unstructured networks, the substantial background traffic and the potential topological biases can significantly affect the performance of network-oblivious load-balancing (our baseline), and inflate the response time (defined as the duration from issuing the HTTP request to the complete receipt of the response).   In this project, we examined the question: "If we host a service across many HTTP servers spanning multiple campus networks, what is the best way to balance load so as to minimize the client response time?". In particular, we take into account the congestion in the network, the location, and the load on the servers, and, then, manage the load on the network and the servers to try to minimize response time.   We built a system called Aster*x that uses the global state of server load and network congestion, and dynamically routes the requests over appropriate (server, path) pairs calculated using the load-balancing algorithms we developed.  We used GENI for the extensive deployment, evaluation, and demonstration of Aster*x. Aster*x exploits OpenFlowÃ†s logically centralized controller to get the global network state and route flows of various granularities. It uses the PlanetLab and Linux-based computation substrate to host the replicated web service and to generate client requests from multiple locations.       Last Modified: 07/03/2013       Submitted by: Arvind Krishnamurthy]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
