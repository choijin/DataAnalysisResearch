<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small: Reverse Engineering Obfuscated Executables</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>100000.00</AwardTotalIntnAmount>
<AwardAmount>116000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computer malware codes are usually heavily obfuscated via a variety of techniques that make it difficult to understand the logic of the code.  Existing tools for malware analysis do not provide much support for automatically removing such obfuscations, which therefore requires a great deal of time-consuming manual intervention. This project aims to develop techniques and tools to automate the identification and removal of obfuscation code from malware programs, focusing in particular on a class of obfuscations called "virtualization-based obfuscation".  It uses program analysis techniques to identify instructions that affect the program's observable behavior; these  instructions are extracted and, where appropriate, simplified to obtain the deobfuscated malware code. The main impact of this project will be to make it easier and quicker for security researchers to figure out the internal logic of malware programs.  This, in turn, will make it possible to respond more quickly to new malware and develop countermeasures to them faster and with less manual intervention.  The effect will be to reduce the damage done by malware before they can be neutralized.</AbstractNarration>
<MinAmdLetterDate>08/07/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/03/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1016058</AwardID>
<Investigator>
<FirstName>Saumya</FirstName>
<LastName>Debray</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Saumya K Debray</PI_FULL_NAME>
<EmailAddress>debray@cs.arizona.edu</EmailAddress>
<PI_PHON>5206214527</PI_PHON>
<NSF_ID>000120753</NSF_ID>
<StartDate>08/07/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Arizona</Name>
<CityName>Tucson</CityName>
<ZipCode>857194824</ZipCode>
<PhoneNumber>5206266000</PhoneNumber>
<StreetAddress>888 N Euclid Ave</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<StateCode>AZ</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AZ03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>806345617</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ARIZONA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072459266</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Arizona]]></Name>
<CityName>Tucson</CityName>
<StateCode>AZ</StateCode>
<ZipCode>857194824</ZipCode>
<StreetAddress><![CDATA[888 N Euclid Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AZ03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~100000</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>Goals of the Project</strong><br />The primary goal of this project was to develop tools and techniques that would support security researchers dealing with malware (malicious software), make it quicker and easier for them to figure out the internal<br />workings of the malware, and thereby speed up the process of coming up with effective defenses against new malware.</p> <p>Malware that is encountered today is typically highly &ldquo;obfuscated&rdquo;&mdash;i.e., written in a way that makes it extremely difficult to figure out the internal logic of the malware. The reason for this is twofold: first, to evade detection as long as possible; and second, to slow down the development of countermeasures as much as possible even after it has been detected. Security researchers need tools that will help them analyze such obfuscated malware and figure out their internal workings; this project aimed to develop tools and techniques for carrying out such analysis.</p> <p><strong>Project Outcomes</strong><br />The project considered two kinds of malware: code that executes inside web browsers and PDF files; and code that executes on the actual hardware of the computer. These two kinds of malware use completely different languages and employ different kinds of obfuscations.</p> <ul> <li>For the first kind (&ldquo;browser-based malware&rdquo;), we made progress on two fronts:</li> </ul> <blockquote> <ul> <li>We devised a way to identify and eliminate the obfuscations in the malicious code, leaving just its original logic. A paper describing this work was presented at the<em> Sixth IEEE International Conference on Software Security and Reliability</em> (SERE) in June 2012.</li> <li>We did a thorough study of existing detection systems for malware delivered via the web (e.g., via infected websites) with the aim of figuring out how malicious code might defeat current detectors. The objective was to proactively fix the weaknesses so identified. We identified a number of weaknesses and produced proof-of-concept software capable of defeating state-of- the-art detection technology. A paper describing this work has been submitted for publication.</li> </ul> </blockquote> <ul> <li>For the second kind (&ldquo;native-code malware&rdquo;) we focused our attention on one particular kind of obfuscation, called &ldquo;emulation-based obfuscation&rdquo; that has become common in recent years and is especially difficult to penetrate. In contrast to previous attempts against this kind of obfuscation, we tried to use very general techniques that would make very few assumptions about what the obfuscations looked like and which would, we believe, be more robust against changes in the obfuscation techniques. We made some progress in identifying and eliminating the obfuscations, but at the time of this report were not yet able to get rid of all of the obfuscation. A paper describing our ideas and results was presented at the <em>ACM Conference on Computer and Communications Security</em> in Oct. 2011.</li> </ul> <p>The award supported the research and training of two PhD students and four undergraduates.</p><br> <p>            Last Modified: 09/26/2012<br>      Modified by: Saumya&nbsp;K&nbsp;Debray</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Goals of the Project The primary goal of this project was to develop tools and techniques that would support security researchers dealing with malware (malicious software), make it quicker and easier for them to figure out the internal workings of the malware, and thereby speed up the process of coming up with effective defenses against new malware.  Malware that is encountered today is typically highly "obfuscated"&mdash;i.e., written in a way that makes it extremely difficult to figure out the internal logic of the malware. The reason for this is twofold: first, to evade detection as long as possible; and second, to slow down the development of countermeasures as much as possible even after it has been detected. Security researchers need tools that will help them analyze such obfuscated malware and figure out their internal workings; this project aimed to develop tools and techniques for carrying out such analysis.  Project Outcomes The project considered two kinds of malware: code that executes inside web browsers and PDF files; and code that executes on the actual hardware of the computer. These two kinds of malware use completely different languages and employ different kinds of obfuscations.  For the first kind ("browser-based malware"), we made progress on two fronts:    We devised a way to identify and eliminate the obfuscations in the malicious code, leaving just its original logic. A paper describing this work was presented at the Sixth IEEE International Conference on Software Security and Reliability (SERE) in June 2012. We did a thorough study of existing detection systems for malware delivered via the web (e.g., via infected websites) with the aim of figuring out how malicious code might defeat current detectors. The objective was to proactively fix the weaknesses so identified. We identified a number of weaknesses and produced proof-of-concept software capable of defeating state-of- the-art detection technology. A paper describing this work has been submitted for publication.    For the second kind ("native-code malware") we focused our attention on one particular kind of obfuscation, called "emulation-based obfuscation" that has become common in recent years and is especially difficult to penetrate. In contrast to previous attempts against this kind of obfuscation, we tried to use very general techniques that would make very few assumptions about what the obfuscations looked like and which would, we believe, be more robust against changes in the obfuscation techniques. We made some progress in identifying and eliminating the obfuscations, but at the time of this report were not yet able to get rid of all of the obfuscation. A paper describing our ideas and results was presented at the ACM Conference on Computer and Communications Security in Oct. 2011.   The award supported the research and training of two PhD students and four undergraduates.       Last Modified: 09/26/2012       Submitted by: Saumya K Debray]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
