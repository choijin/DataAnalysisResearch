<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: SMALL: Collaborative Research: Modular ACL2</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>209996</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Reliability is extremely important for some software and hardware &lt;br/&gt;applications. One approach is to use a programming language with a &lt;br/&gt;mechanized logic---a so-called theorem-prover---to prove theorems that &lt;br/&gt;establish some critical behavioral characteristics. Among theorem-provers, &lt;br/&gt;ACL2 has found use with several industrial suppliers of high assurance &lt;br/&gt;software and hardware. ACL2 does not support component-oriented software &lt;br/&gt;development, however, making it difficult to use with large and complex &lt;br/&gt;projects. &lt;br/&gt;&lt;br/&gt;This research project has three goals: to add a pragmatic module system to &lt;br/&gt;ACL2; to equip it with a hygienic macro system; and to investigate a type &lt;br/&gt;system that accommodates ACL2's programming idioms. The project team &lt;br/&gt;employs a cyclic, three-step exploration method. The first step is to &lt;br/&gt;adapt constructs from existing, similar languages to ACL2, especially a &lt;br/&gt;logical meaning consistent with the theorem prover of ACL2. The second &lt;br/&gt;step is to explore the pragmatics of the design with a wide range of &lt;br/&gt;examples. The third step is to add implementations to a pedagogic, &lt;br/&gt;interactive development environment for ACL2 and to evaluate their &lt;br/&gt;usefulness in software engineering courses. The results of this last step &lt;br/&gt;are used to re-start the cycle. &lt;br/&gt;&lt;br/&gt;The work will contribute to the dissemination of theorem provers in &lt;br/&gt;classrooms and industry. The research team expects to expose college &lt;br/&gt;students to the use of theorem proving in the design and development of &lt;br/&gt;complex systems with dozens, and possibly hundreds, of reliable &lt;br/&gt;components. The team also hopes to improve the ability of industrial ACL2 &lt;br/&gt;programmers to tackle complex component-oriented systems.</AbstractNarration>
<MinAmdLetterDate>08/05/2010</MinAmdLetterDate>
<MaxAmdLetterDate>04/10/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1016532</AwardID>
<Investigator>
<FirstName>Rex</FirstName>
<LastName>Page</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rex L Page</PI_FULL_NAME>
<EmailAddress>page@ou.edu</EmailAddress>
<PI_PHON>4053255408</PI_PHON>
<NSF_ID>000409014</NSF_ID>
<StartDate>08/05/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Oklahoma Norman Campus</Name>
<CityName>NORMAN</CityName>
<ZipCode>730199705</ZipCode>
<PhoneNumber>4053254757</PhoneNumber>
<StreetAddress>201 Stephenson Parkway</StreetAddress>
<StreetAddress2><![CDATA[Five Partners Place, Suite 3100]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Oklahoma</StateName>
<StateCode>OK</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OK04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>848348348</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF OKLAHOMA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Oklahoma Norman Campus]]></Name>
<CityName>NORMAN</CityName>
<StateCode>OK</StateCode>
<ZipCode>730199705</ZipCode>
<StreetAddress><![CDATA[201 Stephenson Parkway]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oklahoma</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OK04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~200000</FUND_OBLG>
<FUND_OBLG>2013~9996</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Engineering is the application of science and mathematics to the design of useful things. Employing mechanized logic in the design and development of software to verify crucial relationships between system inputs and results is one way to bring engineering, in this sense, into the software development process. The thesis of this project is that experience with such uses of mechanized logic can play a central role in software engineering education.</p> <p>For the period of the project and beyond, two courses in software engineering required in the Computer Science program at the University of Oklahoma have used the Dracula programming environment for ACL2, which was developed at Northeastern University, to infuse mechanized logic into computing education. In the last half of the project, students have also used a second programming environment, Proof Pad, which was developed at the University of Oklahoma, to provide more streamlined interaction with ACL2, but with a reduced collection of capabilities. Students have generally preferred Dracula for projects of medium to large scale, partly because Dracula permits specialized test-data generators and control of name visibility. They sometimes find Proof Pad preferable for small scale projects.</p> <p>All software engineering students at the University of Oklahoma have successfully made use of mechanized logic in both individual and team projects, as required in their course work. For the last two years of the project period, Dracula and Proof Pad have also been used from some of the projects in a required applied logic course at OU. Through that experience students have had the opportunity to see fully formalized some of the proof methods that underly most of the work in their logic course.</p> <p>These tools and methods of mechanized logic have also played a prominent role in the Halmstad Summer School on Testing, a three-day practicum for 25 to 30 software researchers and practitioners that has taken place for the past three years at Halmstad University, Sweden. The school included instructional offerings from an international faculty that grew from three in 2011 to seven in 2013. Organizers have made plans to continue the school in 2014 and beyond with a format expanded to four days of instruction and practice.</p> <p>A collection of operator definitions and property-based tests, some of which are fully verified through ACL2, is another continuing educational impact of the project. This data base of testing and verification material is accessible online through the High Assurance Teaching Resources in ACL2 Code website (hatrac.org).</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/05/2013<br>      Modified by: Rex&nbsp;L&nbsp;Page</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Engineering is the application of science and mathematics to the design of useful things. Employing mechanized logic in the design and development of software to verify crucial relationships between system inputs and results is one way to bring engineering, in this sense, into the software development process. The thesis of this project is that experience with such uses of mechanized logic can play a central role in software engineering education.  For the period of the project and beyond, two courses in software engineering required in the Computer Science program at the University of Oklahoma have used the Dracula programming environment for ACL2, which was developed at Northeastern University, to infuse mechanized logic into computing education. In the last half of the project, students have also used a second programming environment, Proof Pad, which was developed at the University of Oklahoma, to provide more streamlined interaction with ACL2, but with a reduced collection of capabilities. Students have generally preferred Dracula for projects of medium to large scale, partly because Dracula permits specialized test-data generators and control of name visibility. They sometimes find Proof Pad preferable for small scale projects.  All software engineering students at the University of Oklahoma have successfully made use of mechanized logic in both individual and team projects, as required in their course work. For the last two years of the project period, Dracula and Proof Pad have also been used from some of the projects in a required applied logic course at OU. Through that experience students have had the opportunity to see fully formalized some of the proof methods that underly most of the work in their logic course.  These tools and methods of mechanized logic have also played a prominent role in the Halmstad Summer School on Testing, a three-day practicum for 25 to 30 software researchers and practitioners that has taken place for the past three years at Halmstad University, Sweden. The school included instructional offerings from an international faculty that grew from three in 2011 to seven in 2013. Organizers have made plans to continue the school in 2014 and beyond with a format expanded to four days of instruction and practice.  A collection of operator definitions and property-based tests, some of which are fully verified through ACL2, is another continuing educational impact of the project. This data base of testing and verification material is accessible online through the High Assurance Teaching Resources in ACL2 Code website (hatrac.org).          Last Modified: 09/05/2013       Submitted by: Rex L Page]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
