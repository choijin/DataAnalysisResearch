<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>NeTS: Small: Grammar Aware High-Speed Application Protocol Parsing for Deep Flow Inspection</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>466000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>John Brassil</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Application protocol parsing, the translation of raw packet flows into higher level flows of semantic content, is the foundation  and enabler of a wide variety of current and future networking services such as network security, application-aware load balancing, content-aware networking, and vulnerability based signature checking. A key feature of application protocol parsing is the controlled extraction of specific data within such a high level flow for further processing. &lt;br/&gt;A fundamentally new framework for application protocol parsing and field extraction, FlowSifter is under development. To achieve practical application protocol parsing and efficient field extraction suitable for high speed networking devices that process millions of concurrent flows, FlowSifter performs automated selective stackless approximate parsing. &lt;br/&gt;The new formal language theory models such as counting automata are applied to achieve the research goals. Specifically, FlowSifter allows a user to specify application protocols as well as the desired fields to be extracted using a modified regular grammar. FlowSifter turns the modified regular grammar into a counting automata to perform the approximate, selective, and approximate field extraction with controlled error bounds. &lt;br/&gt;Expected results of this project include the new formal language theory models and the comprehensive FlowSifter framework. Research results are broadly disseminated through publications, open source software releases, freely available course modules, and industry interaction. The development of FlowSifter benefits society by enabling the future deployment of potentially transformative security and networking services such as vulnerability based signature checking for detecting polymorphic worms in network intrusion detection/prevention systems (IDSes/IPSes) and content-aware networking.</AbstractNarration>
<MinAmdLetterDate>07/01/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/07/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017588</AwardID>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Torng</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eric K Torng</PI_FULL_NAME>
<EmailAddress>torng@cse.msu.edu</EmailAddress>
<PI_PHON>5173533543</PI_PHON>
<NSF_ID>000124714</NSF_ID>
<StartDate>07/01/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Alex</FirstName>
<LastName>Liu</LastName>
<PI_MID_INIT>X</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Alex X Liu</PI_FULL_NAME>
<EmailAddress>alexliu@cse.msu.edu</EmailAddress>
<PI_PHON>5178020805</PI_PHON>
<NSF_ID>000482202</NSF_ID>
<StartDate>07/01/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Michigan State University</Name>
<CityName>East Lansing</CityName>
<ZipCode>488242600</ZipCode>
<PhoneNumber>5173555040</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[426 Administration Bldg, Rm2]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI08</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>193247145</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MICHIGAN STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053343976</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Michigan State University]]></Name>
<CityName>East Lansing</CityName>
<StateCode>MI</StateCode>
<ZipCode>488242600</ZipCode>
<StreetAddress><![CDATA[Office of Sponsored Programs]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI08</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~155000</FUND_OBLG>
<FUND_OBLG>2011~311000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Application protocol parsing, the translation of raw packet flows into higher level flows of semantic content, is the foundation and enabler of a wide variety of current and future networking services such as network security, application-aware load balancing, content-aware networking, and vulnerability based signature checking. A key feature of application protocol parsing is the controlled extraction of specific data within such a high level flow for further processing. The principal investigators propose FlowSifter, a fundamentally new framework for application protocol parsing and field extraction. To achieve practical application protocol parsing and efficient field extraction suitable for high speed networking devices that process millions of concurrent flows, FlowSifter performs automated selective stackless approximate parsing.<br />The principal investigators use new formal language theory models such as counting automata to achieve their goals. Specifically, FlowSifter allows a user to specify application protocols as well as the desired fields to be extracted using a modified regular grammar. FlowSifter turns the modified regular grammar into a counting automata to perform the approximate, selective, and approximate field extraction with controlled error bounds.<br /><br />In this project, we have successfully achieved the five main objectives of this project for building high performance application protocol parsing and extraction engines: (1) Extraction Specification: develop languages for specifying what a user wants to extract. (2) Grammar Simplification: develop algorithms for simplifying a protocol grammar based on an extraction specification. (3) Counting Automata Generation: develop algorithms for generating counting automata from a tokenization grammar and an extraction grammar. (4) Parsing Binary Application Protocols: develop algorithms for parsing binary application protocols. (5) Extension to Software-based solutions: develop algorithms for automated, selective, approximate, and software-based protocol parsing. The project results will not only deepen our understanding of application protocol parsing, but also provide a practical set of techniques and tools to support high speed automated selective stackless approximate application protocol parsing.<br /><br />The fundamental concepts developed in this project have led to a much deeper understanding of high-speed application protocol parsing. Performing application protocol parsing on millions of concurrent flows at wire speed is a fundamental, yet extremely challenging, problem. To achieve the ambitious goal of performing high-speed application protocol parsing on millions of concurrent flows, we have developed several new and potentially transformative concepts (such as automated and selective protocol parsing), new formal language models (such as Counting Context-Free Grammars and Counting Regular Grammars), and algorithms (such as the counter-based approximation algorithm). We have open sourced our FlowSifter code and it is available at https://github.com/MSU-SSL/FlowSifter. This project has impacts beyond application protocol parsing. We are the first to bring the theory of counting automata to solve networking problems. Our work helps to bridge several different communities including networking, security, theory, architecture, compilers, programming languages, and foster interaction and communication among them.<br /><br />Our research results have been successfully published in top tier computer science conferences (such as SIGCOMM and INFOCOM), and computer science journals (such as IEEE/ACM Transactions on Networking and IEEE Journal on Selected Areas in Communications). This project has supported a number of Ph.D. students, some of them have successfully graduated with Ph.D. degrees.<br /><br />The results that we developed in this project has been incorporated into the graduate co...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Application protocol parsing, the translation of raw packet flows into higher level flows of semantic content, is the foundation and enabler of a wide variety of current and future networking services such as network security, application-aware load balancing, content-aware networking, and vulnerability based signature checking. A key feature of application protocol parsing is the controlled extraction of specific data within such a high level flow for further processing. The principal investigators propose FlowSifter, a fundamentally new framework for application protocol parsing and field extraction. To achieve practical application protocol parsing and efficient field extraction suitable for high speed networking devices that process millions of concurrent flows, FlowSifter performs automated selective stackless approximate parsing. The principal investigators use new formal language theory models such as counting automata to achieve their goals. Specifically, FlowSifter allows a user to specify application protocols as well as the desired fields to be extracted using a modified regular grammar. FlowSifter turns the modified regular grammar into a counting automata to perform the approximate, selective, and approximate field extraction with controlled error bounds.  In this project, we have successfully achieved the five main objectives of this project for building high performance application protocol parsing and extraction engines: (1) Extraction Specification: develop languages for specifying what a user wants to extract. (2) Grammar Simplification: develop algorithms for simplifying a protocol grammar based on an extraction specification. (3) Counting Automata Generation: develop algorithms for generating counting automata from a tokenization grammar and an extraction grammar. (4) Parsing Binary Application Protocols: develop algorithms for parsing binary application protocols. (5) Extension to Software-based solutions: develop algorithms for automated, selective, approximate, and software-based protocol parsing. The project results will not only deepen our understanding of application protocol parsing, but also provide a practical set of techniques and tools to support high speed automated selective stackless approximate application protocol parsing.  The fundamental concepts developed in this project have led to a much deeper understanding of high-speed application protocol parsing. Performing application protocol parsing on millions of concurrent flows at wire speed is a fundamental, yet extremely challenging, problem. To achieve the ambitious goal of performing high-speed application protocol parsing on millions of concurrent flows, we have developed several new and potentially transformative concepts (such as automated and selective protocol parsing), new formal language models (such as Counting Context-Free Grammars and Counting Regular Grammars), and algorithms (such as the counter-based approximation algorithm). We have open sourced our FlowSifter code and it is available at https://github.com/MSU-SSL/FlowSifter. This project has impacts beyond application protocol parsing. We are the first to bring the theory of counting automata to solve networking problems. Our work helps to bridge several different communities including networking, security, theory, architecture, compilers, programming languages, and foster interaction and communication among them.  Our research results have been successfully published in top tier computer science conferences (such as SIGCOMM and INFOCOM), and computer science journals (such as IEEE/ACM Transactions on Networking and IEEE Journal on Selected Areas in Communications). This project has supported a number of Ph.D. students, some of them have successfully graduated with Ph.D. degrees.  The results that we developed in this project has been incorporated into the graduate courses CSE 825 "Computer and Network Security" and CSE 830 "Design and Theory of Algorithms" at Michigan Sta...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
