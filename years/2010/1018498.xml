<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF:  Small:  Degree-Driven Design of Geometric Algorithms</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>418595.00</AwardTotalIntnAmount>
<AwardAmount>434595</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>James Donlon</SignBlockName>
<PO_EMAI>jdonlon@nsf.gov</PO_EMAI>
<PO_PHON>7032928074</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Algorithms and software for geometric problems are usually designed and implemented in several layers of abstraction:  For example, a map in a GPS navigation unit may be represented as a road network topology (just the interconnections) on top of the road geometry (a collection of line segments), which is represented with coordinates (as a sequence of points in a standard geodesic coordinate system), which are stored as numbers in a computer memory (which have a relatively small number of bits).  At times, assumptions at higher levels of abstraction (e.g., lines are continuous, straight, and infinitely thin) are broken by the realities of the underlying levels (e.g., most points fall off a line when rounded to "machine precision").  Examples can be found in geometric algorithms for motion capture, robot simulation, x-ray crystallography, video tracking, and many other applications.&lt;br/&gt;&lt;br/&gt;Sophisticated implementers of geometric algorithms will identify exactly what properties one level needs from its underlying levels, and carefully implement the underlying levels to provide these.  The increasing amounts of geometric data mean that most implementers do not have sophistication in geometric algorithms, either because they are more focused on the sophisticated knowledge of their own domain, or because they are students who have not yet reached that level of sophistication.&lt;br/&gt;&lt;br/&gt;Computer Scientists are accustomed to designing algorithms to optimize running time and memory space -- two resources that are limited, but whose limits may not be known in advance.  This project adds arithmetic precision to this list of resources.  This resource can be measured, up to constants, by the degree of polynomials in predicates and constructions.  Restricting designers to low degree predicates forces creative new solutions to standard problems that can be guaranteed correct in machine precision.  The result will be a codebook of algorithms that have been developed and tested by graduate and undergraduate students in this project, and can be the basis for robust primitives or further exploration in education and practical settings.</AbstractNarration>
<MinAmdLetterDate>07/22/2010</MinAmdLetterDate>
<MaxAmdLetterDate>01/09/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018498</AwardID>
<Investigator>
<FirstName>Kevin</FirstName>
<LastName>Jeffay</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kevin Jeffay</PI_FULL_NAME>
<EmailAddress>jeffay@cs.unc.edu</EmailAddress>
<PI_PHON>9195906238</PI_PHON>
<NSF_ID>000299866</NSF_ID>
<StartDate>01/09/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jack</FirstName>
<LastName>Snoeyink</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jack S Snoeyink</PI_FULL_NAME>
<EmailAddress>Snoeyink@cs.unc.edu</EmailAddress>
<PI_PHON>9195906069</PI_PHON>
<NSF_ID>000323274</NSF_ID>
<StartDate>07/22/2010</StartDate>
<EndDate>01/09/2015</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of North Carolina at Chapel Hill</Name>
<CityName>CHAPEL HILL</CityName>
<ZipCode>275991350</ZipCode>
<PhoneNumber>9199663411</PhoneNumber>
<StreetAddress>104 AIRPORT DR STE 2200</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>608195277</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of North Carolina at Chapel Hill]]></Name>
<CityName>CHAPEL HILL</CityName>
<StateCode>NC</StateCode>
<ZipCode>275991350</ZipCode>
<StreetAddress><![CDATA[104 AIRPORT DR STE 2200]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramElement>
<Code>7929</Code>
<Text>COMPUTATIONAL GEOMETRY</Text>
</ProgramElement>
<ProgramReference>
<Code>7929</Code>
<Text>COMPUTATIONAL GEOMETRY</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~418595</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-320a7b52-dcbd-1ec2-6b40-f2ca136a658e">&nbsp;</span></p> <p dir="ltr"><span>There are more ways than one to solve any problem. Computer scientists</span><br /><span>often explore possible solutions by limiting resources: time, memory,</span><br /><span>or, in the case of this project, the number of digits you can</span><br /><span>calculate with.&nbsp; A classic example is the "Post Office"</span><br /><span>problem. Suppose that you know mailbox locations as coordinates in the</span><br /><span>plane. If you know your own coordinates, then you can compute all</span><br /><span>distances by the Pythagorean theorem, then compare to find nearest.</span><br /><span>It is enough to compare squared distances, which can be done exactly</span><br /><span>in double precision (and is faster, since it eliminates the</span><br /><span>unnecessary square root computation). It you will do this often, you</span><br /><span>may prefer to store a map colored by closest mailbox locations, so</span><br /><span>your color tells you which mailbox without further measuring -- this</span><br /><span>trades storage space for time, and also requires more precision, since</span><br /><span>previous&nbsp;</span><span class="il">algorithms</span><span>&nbsp;to compute the coloring use four to six times</span><br /><span>input precision.</span><br /><br /><span>This project successfully created new&nbsp;</span><span class="il">algorithms</span><span>&nbsp;and data structures</span><br /><span>for the Post Office problem and other problems with limited</span><br /><span>precision -- including ways to create the colored map with only double</span><br /><span>the input precision, an important advance, since most computers</span><br /><span>support double precision arithmetic in fast hardware.</span><br /><br /><span>Equally importantly, this project has shown that by thinking of</span><br /><span>precision at algorithm&nbsp;</span><span class="il">design</span><span>&nbsp;time, one can create more robust</span><br /><span>solutions for&nbsp;</span><span class="il">geometric</span><span>&nbsp;problems in Geographic Information Systems</span><br /><span>(GIS), Computer-Aided&nbsp;</span><span class="il">Design</span><span>&nbsp;(CAD), and physics simulation.&nbsp; The last</span><br /><span>has been demonstrated through collaboration with Bettis Labs on robust</span><br /><span>neutron tracking in reactors; PhD graduate David Millman became a</span><br /><span>Senior Research Scientist at Bettis.</span><br /><br /><span>From the start, this project has had an educational focus, aiming to</span><br /><span>bring considerations of precision down to general programming classes,</span><br /><span>not just the advanced classes in numerical analysis.&nbsp; In addition to</span><br /><span>Dr. Millman's PhD, three Masters students have written theses, and six</span><br /><span>undergraduates have had research experiences within this project.&nbsp; A</span><br /><span>textbook on "</span><span class="il">Degree</span><span>-</span><span class="il">driven</span><span>&nbsp;</span><span class="il">design</span><span>&nbsp;of&nbsp;</span><span class="il">geometric</span><span>&nbsp;</span><span class="il">algorithms</span><span>" is nearing</span><br /><span>completion.</span></p><br> <p>            Last Modified: 05/25/2016<br>      Modified by: Kevin&nbsp;Jeffay</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   There are more ways than one to solve any problem. Computer scientists often explore possible solutions by limiting resources: time, memory, or, in the case of this project, the number of digits you can calculate with.  A classic example is the "Post Office" problem. Suppose that you know mailbox locations as coordinates in the plane. If you know your own coordinates, then you can compute all distances by the Pythagorean theorem, then compare to find nearest. It is enough to compare squared distances, which can be done exactly in double precision (and is faster, since it eliminates the unnecessary square root computation). It you will do this often, you may prefer to store a map colored by closest mailbox locations, so your color tells you which mailbox without further measuring -- this trades storage space for time, and also requires more precision, since previous algorithms to compute the coloring use four to six times input precision.  This project successfully created new algorithms and data structures for the Post Office problem and other problems with limited precision -- including ways to create the colored map with only double the input precision, an important advance, since most computers support double precision arithmetic in fast hardware.  Equally importantly, this project has shown that by thinking of precision at algorithm design time, one can create more robust solutions for geometric problems in Geographic Information Systems (GIS), Computer-Aided Design (CAD), and physics simulation.  The last has been demonstrated through collaboration with Bettis Labs on robust neutron tracking in reactors; PhD graduate David Millman became a Senior Research Scientist at Bettis.  From the start, this project has had an educational focus, aiming to bring considerations of precision down to general programming classes, not just the advanced classes in numerical analysis.  In addition to Dr. Millman's PhD, three Masters students have written theses, and six undergraduates have had research experiences within this project.  A textbook on "Degree-driven design of geometric algorithms" is nearing completion.       Last Modified: 05/25/2016       Submitted by: Kevin Jeffay]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
