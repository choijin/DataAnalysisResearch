<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Learning-Assisted Parallelization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>499882.00</AwardTotalIntnAmount>
<AwardAmount>515882</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The number of processing cores in everyday computer systems is quickly outpacing programmers' and compilers' ability to create many-threaded applications capable of taking advantage of the cores.  Instead of requiring applications to be rewritten to take advantage of the many-core architectures, this project aims to create automated parallelization approaches that utilize machine learning to improve traditional parallelization methods to create more effective (and often speculative) threads.  These techniques will be applied to the arrangement of the parallel execution of tasks (whether coarse- or fine-grained), yielding a systematic learning approach that will outperform static parallelization attempts.   This approach assists both programmer identified parallelism as well as that exposed by the compiler.  This project is not limited to applications with regular loop-level parallelism, but targets irregular integer applications which have proven difficult to statically parallelize.  &lt;br/&gt;&lt;br/&gt;This project will result in the development of a high performance dynamic parallelization system based on critical information gathered from machine learning and related approaches.  By creating intelligent parallelization approaches, we enable the multicore machines of the future to be used to their full advantage by both scientists and the general public.  Although many of today's applications may not require the full computational power of a many-core machine, the effective utilization of such machines will enable new, more-powerful applications than are currently possible.</AbstractNarration>
<MinAmdLetterDate>07/19/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/09/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018771</AwardID>
<Investigator>
<FirstName>Amy</FirstName>
<LastName>McGovern</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Amy McGovern</PI_FULL_NAME>
<EmailAddress>amcgovern@ou.edu</EmailAddress>
<PI_PHON>4053255427</PI_PHON>
<NSF_ID>000210991</NSF_ID>
<StartDate>07/19/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Ronald</FirstName>
<LastName>Barnes</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME>Jr.</PI_SUFX_NAME>
<PI_FULL_NAME>Ronald D Barnes</PI_FULL_NAME>
<EmailAddress>ron@ou.edu</EmailAddress>
<PI_PHON>4053251879</PI_PHON>
<NSF_ID>000363916</NSF_ID>
<StartDate>07/19/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Oklahoma Norman Campus</Name>
<CityName>NORMAN</CityName>
<ZipCode>730199705</ZipCode>
<PhoneNumber>4053254757</PhoneNumber>
<StreetAddress>201 Stephenson Parkway</StreetAddress>
<StreetAddress2><![CDATA[Five Partners Place, Suite 3100]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Oklahoma</StateName>
<StateCode>OK</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OK04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>848348348</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF OKLAHOMA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>046862181</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Oklahoma Norman Campus]]></Name>
<CityName>NORMAN</CityName>
<StateCode>OK</StateCode>
<ZipCode>730199705</ZipCode>
<StreetAddress><![CDATA[201 Stephenson Parkway]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oklahoma</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OK04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~185539</FUND_OBLG>
<FUND_OBLG>2011~314343</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>This project demonstrated that machine learning could be used to automatically improve the parallel execution of programs. &nbsp; Machine learning methods can be used to improve the speed of the programs as they are running, without requiring the programmers to do work to explicitly parallelize or schedule applications. &nbsp;The primary method used was reinforcement learning, a method that learns quickly from environmental feedback.&nbsp; A reinforcement learning was shown to be able to automatically partition sequential programs into parallel threads that can exploit today&rsquo;s multi-core processors.&nbsp; This approach was built upon previous non-machine-learning techniques and was demonstrated to do a better job partitioning applications than the existing human generated rules.</span></p> <p>One focus of this work was on improving the execution programs running on heterogenous multi-core processors. &nbsp;While, homogeneous multi-core processors have become ubiquitous, heterogeneous multi-core processors have many advantages in performance and efficiency and are likely to become increasingly common.&nbsp; In a PhD dissertation funded by this project, a reinforcement learning-based scheduler was demonstrated to be effective at scheduling programs on a heterogeneous multi-core processor, achieving benefits in both performance and energy efficiency. &nbsp; In particular, the learning approach was shown to outperform heuristic approaches for long running applications or for applications running on systems with a variety of processor core types.</p> <p><span>A related MS thesis funded by the project demonstrated that reinforcement learning could be used to improve the speed of programs in heterogenous multi-core environments in both an offline and an online mode. &nbsp;In the offline mode, the scheduler is trained on a variety of programs and then the trained scheduler makes scheduling decisions while a program is running, but does not change its learning parameters once it is deployed. In the online mode, the scheduler can adjust its learning parameters as the program is running. &nbsp;Both options were able to improve the performance of programs in such environments.&nbsp;</span></p> <p><span>The project also showed that reinforcement learning can improve finer-grained execution decisions.&nbsp; In another MS theses funded by the project, a novel reinforcement learning cache replacement was demonstrated to result in fewer cache misses, performance-detrimental events that occur when a processor needs data that isn&rsquo;t in the fast cache memory, compared to existing replacement algorithms.&nbsp; In particular, the learning approach improved performance for the common case of caches shared between multiple processors cores.&nbsp; When multiple programs are running on a multi-core processor, they contend for space in these caches.&nbsp; The approach demonstrated that a replacement approach can learn which data is best to keep in the cache so that it is not a cache miss when this data is needed by a program.</span></p> <p><span>Two other MS theses focused on simulations tools and environments for modeling and evaluating techniques like those developed in this project.&nbsp; These tools will continue to benefit researchers investigating utilizing machine learning to improve parallel execution.</span></p> <p><span>This project provided funding to 3 students: &nbsp;one PhD student, two MS students, and one REU student.</span></p><br> <p>            Last Modified: 07/09/2016<br>      Modified by: Ronald&nbsp;D&nbsp;Barnes</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project demonstrated that machine learning could be used to automatically improve the parallel execution of programs.   Machine learning methods can be used to improve the speed of the programs as they are running, without requiring the programmers to do work to explicitly parallelize or schedule applications.  The primary method used was reinforcement learning, a method that learns quickly from environmental feedback.  A reinforcement learning was shown to be able to automatically partition sequential programs into parallel threads that can exploit todayÆs multi-core processors.  This approach was built upon previous non-machine-learning techniques and was demonstrated to do a better job partitioning applications than the existing human generated rules.  One focus of this work was on improving the execution programs running on heterogenous multi-core processors.  While, homogeneous multi-core processors have become ubiquitous, heterogeneous multi-core processors have many advantages in performance and efficiency and are likely to become increasingly common.  In a PhD dissertation funded by this project, a reinforcement learning-based scheduler was demonstrated to be effective at scheduling programs on a heterogeneous multi-core processor, achieving benefits in both performance and energy efficiency.   In particular, the learning approach was shown to outperform heuristic approaches for long running applications or for applications running on systems with a variety of processor core types.  A related MS thesis funded by the project demonstrated that reinforcement learning could be used to improve the speed of programs in heterogenous multi-core environments in both an offline and an online mode.  In the offline mode, the scheduler is trained on a variety of programs and then the trained scheduler makes scheduling decisions while a program is running, but does not change its learning parameters once it is deployed. In the online mode, the scheduler can adjust its learning parameters as the program is running.  Both options were able to improve the performance of programs in such environments.   The project also showed that reinforcement learning can improve finer-grained execution decisions.  In another MS theses funded by the project, a novel reinforcement learning cache replacement was demonstrated to result in fewer cache misses, performance-detrimental events that occur when a processor needs data that isnÆt in the fast cache memory, compared to existing replacement algorithms.  In particular, the learning approach improved performance for the common case of caches shared between multiple processors cores.  When multiple programs are running on a multi-core processor, they contend for space in these caches.  The approach demonstrated that a replacement approach can learn which data is best to keep in the cache so that it is not a cache miss when this data is needed by a program.  Two other MS theses focused on simulations tools and environments for modeling and evaluating techniques like those developed in this project.  These tools will continue to benefit researchers investigating utilizing machine learning to improve parallel execution.  This project provided funding to 3 students:  one PhD student, two MS students, and one REU student.       Last Modified: 07/09/2016       Submitted by: Ronald D Barnes]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
