<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>FIA: Collaborative Research: NEBULA: A Future Internet That Supports Trustworthy Cloud Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>427602.00</AwardTotalIntnAmount>
<AwardAmount>427602</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Darleen Fisher</SignBlockName>
<PO_EMAI>dlfisher@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Cloud computing provides economic advantages from shared resources, but security is a major risk for remote operations and a major barrier to the approach, with challenges for both hosts and the network. NEBULA is a potential future Internet architecture providing trustworthy networking for the emerging cloud computing model of always-available network services. NEBULA addresses many network security issues, including data availability with a new core architecture (NCore) based on redundant connections to and between NEBULA core routers, accountability and trust with a new policy-driven data plane (NDP), and extensibility with a new control plane (NVENT) that supports network virtualization, enabling results from other future Internet architectures to be incorporated in NEBULA. NEBULA?s data plane uses cryptographic tokens as demonstrable proofs that a path was both authorized and followed. The NEBULA control plane provides one or more authorized paths to NEBULA edge nodes; multiple paths provide reliability and load-balancing. The NEBULA core uses redundant high-speed paths between data centers and core routers, as well as fault-tolerant router software, for always-on core networking. The NEBULA architecture removes network (in) security as a prohibitive factor that would otherwise prevent the realization of many cloud computing applications, such as electronic health records and data from medical sensors. NEBULA will produce a working system that is deployable on core routers and is viable from both an economic and a regulatory perspective.</AbstractNarration>
<MinAmdLetterDate>08/26/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/19/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1040190</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Mazieres</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David Mazieres</PI_FULL_NAME>
<EmailAddress>dm-list-sup-nsf14@scs.stanford.edu</EmailAddress>
<PI_PHON>4154909451</PI_PHON>
<NSF_ID>000100121</NSF_ID>
<StartDate>08/26/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009214214</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LELAND STANFORD JUNIOR UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009214214</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stanford University]]></Name>
<CityName>Stanford</CityName>
<StateCode>CA</StateCode>
<ZipCode>943052004</ZipCode>
<StreetAddress><![CDATA[450 Jane Stanford Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7363</Code>
<Text>RES IN NETWORKING TECH &amp; SYS</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~260068</FUND_OBLG>
<FUND_OBLG>2013~167534</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The primary result of this work was to demonstrate the feasibility of building a global network in which packets may only be forwarded along a path if all organizations along the path consent to that path.&nbsp; Such an architecture allows end hosts to implement a wide array of network features after the fact, with no further changes to the underlying routing hardware.&nbsp; In particular, with our approach, changes to fundamental services such as inter-domain routing become analogous to changing the domain name system (DNS) today.&nbsp; Certainly DNS is an important part of the Internet, but it can be upgraded by changing software on servers, not upgrading routers.&nbsp; Moreover, nothing prevents multiple host naming systems from coexisting with DNS on the same Internet.<br /><br />The network architecture we developed, in collaboration with the other project NEBULA institutions, was called ICING (Incorporating Consent in the Internet's Next Generation).&nbsp; ICING is a huge departure from today's network architectures--a completely clean-slate redesign of the network architecture.&nbsp; As such, it would require completely new hardware for routers.&nbsp; It is fair to say that the world is not ready for ICING.&nbsp; But what we created is an existence proof.&nbsp; We went from not knowing if such a thing was possible to having a running hardware prototype and being able to put a price tag on it (namely an effective 80% increase in switch logic).&nbsp; By staking out and realizing such a radical design point, ICING has moved people's conceptions of what is possible.&nbsp; (E.g., see our influence on Kim et al. in SIGCOMM 2014, which repeatedly refers to ICING.)</p> <p><br />Another significant result of the project was EyeQ, a hypervisor-based network fairness mechanism for multi-tenant datacenter networks.&nbsp; EyeQ shows that datacenter network fairness is possible and feasible to implement on existing hardware, even in the presence of malicious parties.&nbsp; As such, it is highly deployable, and indeed Microsoft Azure took a strong interest in this work and may well have used the ideas by now.</p> <p><br />Finally, our third major result was "tiny packet programs," or TPP--a highly restricted form of active networking that exports network switch ASIC features to smart packets that can be processed at line rate.&nbsp; TPP promises to enable far greater innovation in cloud datacenter networks, because hardware vendors can implement TPP without predicting which network features will be important in the future.&nbsp; We demonstrated that a single mechanism can facilitate many different kinds of features to be implemented after the fact.&nbsp; Though TPP requires hardware modifications, we carefully took into account real hardware design constraints to facilitate implementation.&nbsp; (For example, in the TPP language, registers may only be accessed in pipeline order as a packet flows through forwarding stages, a form of extreme RISC.)</p><br> <p>            Last Modified: 09/11/2017<br>      Modified by: David&nbsp;Mazieres</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The primary result of this work was to demonstrate the feasibility of building a global network in which packets may only be forwarded along a path if all organizations along the path consent to that path.  Such an architecture allows end hosts to implement a wide array of network features after the fact, with no further changes to the underlying routing hardware.  In particular, with our approach, changes to fundamental services such as inter-domain routing become analogous to changing the domain name system (DNS) today.  Certainly DNS is an important part of the Internet, but it can be upgraded by changing software on servers, not upgrading routers.  Moreover, nothing prevents multiple host naming systems from coexisting with DNS on the same Internet.  The network architecture we developed, in collaboration with the other project NEBULA institutions, was called ICING (Incorporating Consent in the Internet's Next Generation).  ICING is a huge departure from today's network architectures--a completely clean-slate redesign of the network architecture.  As such, it would require completely new hardware for routers.  It is fair to say that the world is not ready for ICING.  But what we created is an existence proof.  We went from not knowing if such a thing was possible to having a running hardware prototype and being able to put a price tag on it (namely an effective 80% increase in switch logic).  By staking out and realizing such a radical design point, ICING has moved people's conceptions of what is possible.  (E.g., see our influence on Kim et al. in SIGCOMM 2014, which repeatedly refers to ICING.)   Another significant result of the project was EyeQ, a hypervisor-based network fairness mechanism for multi-tenant datacenter networks.  EyeQ shows that datacenter network fairness is possible and feasible to implement on existing hardware, even in the presence of malicious parties.  As such, it is highly deployable, and indeed Microsoft Azure took a strong interest in this work and may well have used the ideas by now.   Finally, our third major result was "tiny packet programs," or TPP--a highly restricted form of active networking that exports network switch ASIC features to smart packets that can be processed at line rate.  TPP promises to enable far greater innovation in cloud datacenter networks, because hardware vendors can implement TPP without predicting which network features will be important in the future.  We demonstrated that a single mechanism can facilitate many different kinds of features to be implemented after the fact.  Though TPP requires hardware modifications, we carefully took into account real hardware design constraints to facilitate implementation.  (For example, in the TPP language, registers may only be accessed in pipeline order as a packet flows through forwarding stages, a form of extreme RISC.)       Last Modified: 09/11/2017       Submitted by: David Mazieres]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
