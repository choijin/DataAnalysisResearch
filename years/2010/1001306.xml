<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Computability Theory, Facing Outwards</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2010</AwardEffectiveDate>
<AwardExpirationDate>05/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>107198.00</AwardTotalIntnAmount>
<AwardAmount>107198</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>03040000</Code>
<Directorate>
<Abbreviation>MPS</Abbreviation>
<LongName>Direct For Mathematical &amp; Physical Scien</LongName>
</Directorate>
<Division>
<Abbreviation>DMS</Abbreviation>
<LongName>Division Of Mathematical Sciences</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tomek Bartoszynski</SignBlockName>
<PO_EMAI>tbartosz@nsf.gov</PO_EMAI>
<PO_PHON>7032924885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In this project, the PI Russell Miller will continue his work using computability theory to analyze the difficulty of problems in other areas of mathematics.  These areas include field theory and commutative and differential algebra; manifolds, both topologically and analytically; uncountable structures and the possibility of presenting and studying them effectively; and Blum-Shub-Smale computability and degree theory for the real numbers.  In field theory, Miller has already made substantial progress, both by asking and answering natural computable-model-theoretic questions about fields, and also by noticing general questions about fields which can be answered using computability theory.  He has taken the lead in introducing computability techniques to researchers outside mathematical logic, and has often been able to interest such people in his questions and his methods.  Fields also intersect with his interest in uncountable structures:  indeed, uncountable fields fit very naturally into the framework of local computability, the approach developed by Miller for considering uncountable structures within the Turing model of computation.  In another approach to uncountable objects, Calvert and Miller have developed a definition of real-computable manifold, using the Blum-Shub-Smale model of computation on the real numbers.  They have found that for the study of the fundamental group, the BSS model actually melts away and the Turing model of computation is appropriate.  However, for consideration of distances on manifolds, using geodesics or other ways of defining a metric, they expect that BSS computation or other notions of computation, such as those from computable analysis, will be essential.&lt;br/&gt;&lt;br/&gt;Traditional computability theory examines the capabilities of digital computers and the limits on the problems which can be solved using such computers.  Since the pioneering work of Alan Turing, it has been known that many problems cannot be solved by any digital computer running any program whatsoever.  Even these "noncomputable" problems can be ranked by difficulty, however: problem A is easier (or at least, no more difficult) than problem B if we can show how a hypothetical program solving B would allow us to solve A as well.  Recently, the PI Russell Miller has made contributions to computable model theory, the branch of this field in which one studies noncomputable problems about specific mathematical structures involving the natural numbers and the rational numbers.  Structures involving all real numbers are much larger and therefore trickier to consider, but Miller and many others have introduced various methods for addressing these structures as well.  Some of these methods use digital computers, while others assume exact-precision arithmetic on the real numbers or other structures.  By examining the limits of these different models of computation, we can understand better how much extra power is provided by exact precision, and which mathematical problems require such precision if they are to be solved.</AbstractNarration>
<MinAmdLetterDate>04/15/2010</MinAmdLetterDate>
<MaxAmdLetterDate>04/15/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.049</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1001306</AwardID>
<Investigator>
<FirstName>Russell</FirstName>
<LastName>Miller</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Russell G Miller</PI_FULL_NAME>
<EmailAddress>Russell.Miller@qc.cuny.edu</EmailAddress>
<PI_PHON>7189975853</PI_PHON>
<NSF_ID>000546136</NSF_ID>
<StartDate>04/15/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>CUNY Queens College</Name>
<CityName>Flushing</CityName>
<ZipCode>113671575</ZipCode>
<PhoneNumber>7189975400</PhoneNumber>
<StreetAddress>65 30 Kissena Blvd</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY06</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>619346146</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION OF THE CITY UNIVERSITY OF NEW YORK</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>073268849</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[CUNY Queens College]]></Name>
<CityName>Flushing</CityName>
<StateCode>NY</StateCode>
<ZipCode>113671575</ZipCode>
<StreetAddress><![CDATA[65 30 Kissena Blvd]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY06</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1268</Code>
<Text>FOUNDATIONS</Text>
</ProgramElement>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~107198</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The discipline of computability theory asks what mathematical problems can actually be solved by computer programs. &nbsp;For those which cannot be solved this way, we create a hierarchy of degrees of difficulty of solvability, by asking which problems can be reduced to other problems.</p> <p>The goal of this project is to apply these notions to mathematics in a broad way. &nbsp;Many mathematicians have studied computability as a discipline unto itself, but we try to figure out whether specific problems from algebra and analysis can be solved by programs or not. &nbsp;A specific focus of the project is problems about fields, which are simply number systems in which the four basic operations all can be applied. &nbsp;The rational numbers are the best-known simple example of a field, but many other, more complicated fields can also be considered. &nbsp;Even for the rationals, however, certain problems remain open. &nbsp;For instance, nobody knows whether it is possible to program a computer to decide correctly whether an arbitrary polynomial equation has a solution using rational numbers. &nbsp;Our project has produced certain results about how difficult that problem and intermediate problems are.</p> <p>One can ask the same question more generally, about any field: &nbsp;when is there a program for deciding which polynomial equations have solutions in that field? &nbsp;If we consider only polynomials with a single variable, then such a program, if one exists, is called a splitting algorithm for the field. &nbsp;In our project, we found that the existence of a splitting algorithm was most important when one addresses the problem of computable categoricity, which means asking when it is possible for a program to show that two fields are exactly the same. &nbsp;(To do this, the program must show how to pair up the numbers in one field with the numbers in the other, so that both fields work exactly the same way.) &nbsp;It turns out that this problem is significantly simpler for fields with splitting algorithms than for fields without them, and our work in this project showed why this is true and how hard it is in both cases.</p> <p>We also extended this work to cover differential fields, which are fields with an operation such as differentiation attached to them. &nbsp;(For a simple example of a differential field, consider the field of all rational functions in one variable with rational coefficients, under differentiation.) &nbsp;Here much less is known about what problems can be solved by programs, but we made some real progress on this topic, showing that several results for plain old fields carry over to differential fields in nice ways. &nbsp;This is important because, in differential fields, polynomial equations are actually differential equations, which form an extremely important branch of mathematics, and discovering programs for solving differential equations -- or showing that no program can solve them -- would be a most useful acocmplishment. &nbsp;Our progress involved showing that, if the problem is decidable for a given differential field, then it is also decidable for many larger differential fields, as long as the larger ones are finitely generated over the smaller one.</p> <p>Needless to say, our work in this project covered far more topics than these. &nbsp;Nevertheless, it is clear from these examples that there are fundamental questions in mathematics which remain to be answered, and we hope to continue our work on these questions and eventually to find answers to them. &nbsp;The work funded by the NSF over the past four years has yielded real progress, but we still have plenty of questions about decidability and computability in mathematics.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/07/2014<br>      Modified by: Russell&nbsp;G&nbsp;Miller</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The discipline of computability theory asks what mathematical problems can actually be solved by computer programs.  For those which cannot be solved this way, we create a hierarchy of degrees of difficulty of solvability, by asking which problems can be reduced to other problems.  The goal of this project is to apply these notions to mathematics in a broad way.  Many mathematicians have studied computability as a discipline unto itself, but we try to figure out whether specific problems from algebra and analysis can be solved by programs or not.  A specific focus of the project is problems about fields, which are simply number systems in which the four basic operations all can be applied.  The rational numbers are the best-known simple example of a field, but many other, more complicated fields can also be considered.  Even for the rationals, however, certain problems remain open.  For instance, nobody knows whether it is possible to program a computer to decide correctly whether an arbitrary polynomial equation has a solution using rational numbers.  Our project has produced certain results about how difficult that problem and intermediate problems are.  One can ask the same question more generally, about any field:  when is there a program for deciding which polynomial equations have solutions in that field?  If we consider only polynomials with a single variable, then such a program, if one exists, is called a splitting algorithm for the field.  In our project, we found that the existence of a splitting algorithm was most important when one addresses the problem of computable categoricity, which means asking when it is possible for a program to show that two fields are exactly the same.  (To do this, the program must show how to pair up the numbers in one field with the numbers in the other, so that both fields work exactly the same way.)  It turns out that this problem is significantly simpler for fields with splitting algorithms than for fields without them, and our work in this project showed why this is true and how hard it is in both cases.  We also extended this work to cover differential fields, which are fields with an operation such as differentiation attached to them.  (For a simple example of a differential field, consider the field of all rational functions in one variable with rational coefficients, under differentiation.)  Here much less is known about what problems can be solved by programs, but we made some real progress on this topic, showing that several results for plain old fields carry over to differential fields in nice ways.  This is important because, in differential fields, polynomial equations are actually differential equations, which form an extremely important branch of mathematics, and discovering programs for solving differential equations -- or showing that no program can solve them -- would be a most useful acocmplishment.  Our progress involved showing that, if the problem is decidable for a given differential field, then it is also decidable for many larger differential fields, as long as the larger ones are finitely generated over the smaller one.  Needless to say, our work in this project covered far more topics than these.  Nevertheless, it is clear from these examples that there are fundamental questions in mathematics which remain to be answered, and we hope to continue our work on these questions and eventually to find answers to them.  The work funded by the NSF over the past four years has yielded real progress, but we still have plenty of questions about decidability and computability in mathematics.             Last Modified: 07/07/2014       Submitted by: Russell G Miller]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
