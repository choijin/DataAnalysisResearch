<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Practical, Expressive, Language-based Information Security</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2011</AwardEffectiveDate>
<AwardExpirationDate>01/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>466074.00</AwardTotalIntnAmount>
<AwardAmount>466074</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Language-based security (the use of programming language abstractions and techniques for security) holds the promise of efficient enforcement of strong, formal, fine-grained, application-specific information security guarantees. However, language-based security has not yet reached its potential, and is not in widespread use for providing rich information security guarantees.&lt;br/&gt;&lt;br/&gt;This research makes language-based security techniques more practical, and thus helps improve the information security of new and existing computer systems. It does so through three complementary approaches.&lt;br/&gt;&lt;br/&gt;First, this project develops techniques to make information security guarantees proportional to programmer effort, which both reduces the cost of entry for attaining formal information security guarantees, and allows incremental improvement of a program?Äôs security guarantees, as resources and requirements allow. Second, this project develops new ways to express and reason about rich information-security requirements, such as the required release of information, availability requirements, production of audit logs, and anonymity requirements. Third, information security in concurrent settings is addressed by exploring synergies with newly developed concurrent language mechanisms.&lt;br/&gt;&lt;br/&gt;Techniques and mechanisms resulting from these explorations will be incorporated into a new programming language that helps programmers build computer systems with formal, fine-grained, application-specific information security guarantees.</AbstractNarration>
<MinAmdLetterDate>12/21/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/02/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1054172</AwardID>
<Investigator>
<FirstName>Stephen</FirstName>
<LastName>Chong</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephen Chong</PI_FULL_NAME>
<EmailAddress>chong@seas.harvard.edu</EmailAddress>
<PI_PHON>6174955501</PI_PHON>
<NSF_ID>000535045</NSF_ID>
<StartDate>12/21/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Harvard University</Name>
<CityName>Cambridge</CityName>
<ZipCode>021385369</ZipCode>
<PhoneNumber>6174955501</PhoneNumber>
<StreetAddress>1033 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[5th Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>082359691</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PRESIDENT AND FELLOWS OF HARVARD COLLEGE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001963263</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Harvard University]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021385369</ZipCode>
<StreetAddress><![CDATA[1033 MASSACHUSETTS AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~86139</FUND_OBLG>
<FUND_OBLG>2012~94594</FUND_OBLG>
<FUND_OBLG>2013~93709</FUND_OBLG>
<FUND_OBLG>2014~94052</FUND_OBLG>
<FUND_OBLG>2015~97580</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Language-based security is the use of programming language abstractions and techniques for security. It holds the promise of efficient enforcement of strong, formal, fine-grained, application-specific information security guarantees.&nbsp;</p> <p>This project made language-based security more practical, more expressive, and more accessible to non-security specialist programmers, in order help achieve its potential and provide rich information security in diverse real-world applications.</p> <p>There were three primary directions of research we pursued to achieve these goals.&nbsp;</p> <ol> <li>Providing security guarantees that are proportional to programmer effort.</li> <li>Exploring expressive information security policies that can formally express applications&rsquo; information security requirements. </li> <li>Extending strong information security guarantees to concurrent programs by exploring synergies between information security mechanisms and concurrent language mechanisms.</li> </ol> <p>Within these directions, the project had several significant results, including foundational theoretical contributions, and development of practical tools and techniques. We highlight some of these contributions:</p> <ol> <li><strong>Accrue Object Analysis Framework:</strong> We developed Accrue Object, a framework for interprocedural analysis of Java programs, based on the Polyglot extensible compiler framework. Accrue simplifies the design and implementation of program analyses. </li> <li><strong>Pidgin:</strong> We developed Pidgin, a program understanding tool that allows developers to explore the security guarantees their application satisfies. PIDGIN uses program-dependence graphs (PDGs) to precisely capture information flows within a program, which can then be interactively queried using a custom graph query language. Queries allow developers to discover and describe information flows in their programs, and can encode checkable security policies. </li> <li><strong>SX10:</strong> We extended the X10 concurrent programming language with coarse-grained information-flow control mechanisms, to enforce strong information security guarantees in the presence of modern concurrency abstractions. There is synergy between the concurrency and information-security mechanisms: X10's concurrency mechanisms simplify reasoning about information flow in concurrent programs. </li> <li><strong>Elm and CS Education: </strong>Elm is a programming language that uses functional and reactive programming paradigms to simplify the efficient and correct implementation of GUIs. Initial development of Elm was supported by this grant. This grant also supported the development of a 12-week high-school course using Elm.</li> <li><strong>Dynamically changing security policies.</strong> Policies frequently change during system execution, for example, due to users joining, leaving, or changing roles in a long-running system. In this setting, we discovered a foundational and counter-intuitive result: security against the most powerful possible attacker does not imply security against all attackers. Other foundational security researchers have used this theoretical framework to explore other issues in dynamic security policies.</li> <li><strong>Precise control of termination channels.</strong> The termination behavior of a program can be a high-bandwidth covert channel, particularly in concurrent programs. We investigated the precise control of termination channels, and found that&mdash;contrary to common belief&mdash;it is possible to enforce termination-sensitive security without overly restrictive enforcement mechanisms. </li> <li><strong>Floating-label Systems: </strong>We developed techniques to safely control the use of downgrading in floating-label information-flow models (e.g., HiStar, LIO, Breeze), and extended LIO with cryptographic mechanisms (encryption and signing). We use LIO language features to automatically determine when to use cryptographic mechanisms, shielding the programmer from the potential errors, difficulties, and vulnerabilities of manually managing cryptographic keys and performing cryptographic operations. </li> <li><strong>Information Erasure: </strong>A common technique to ensure secure deletion of data is to store data encrypted, so that deletion of the encryption key ensures secure data deletion. We extend these techniques to enforce <em>information</em> erasure (whereby both sensitive data, and data derived from sensitive data will be reliably deleted from the system when required). This addresses shortcomings in existing data deletion approaches and makes language-level information erasure more practical. </li> <li><strong>High-level guarantees against low-level attackers:</strong> We used secure execution environments (e.g., Intel&rsquo;s SGX technology) to enforce strong information security guarantees (such as information erasure) against powerful low-level attackers.</li> <li><strong>Auditing: </strong>We developed formal semantics and proof techniques for audit logs to ensure that logs of program executions are both recorded and used correctly. We instantiated these ideas for Java, and used them on an open source medical records systems. </li> <li><strong>Information Security in Concurrent Systems: </strong>We combined dynamic and static techniques to enforce of information security in concurrent settings. The enforcement is fine-grained (i.e., individual memory locations) but efficient (enforcement requires no additional synchronization between threads).</li> </ol> <p>This project has supported research that lead to 18 peer-reviewed publications, and over 30 presentations in various forums. This project has given research opportunities to 8 undergraduate students and supported 4 graduate students and postdoctoral fellows. More information is available at <a href="http://people.seas.harvard.edu/~chong/accrue.html">http://people.seas.harvard.edu/~chong/accrue.html</a>.</p> <p>&nbsp;</p><br> <p>            Last Modified: 02/13/2017<br>      Modified by: Stephen&nbsp;Chong</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Language-based security is the use of programming language abstractions and techniques for security. It holds the promise of efficient enforcement of strong, formal, fine-grained, application-specific information security guarantees.   This project made language-based security more practical, more expressive, and more accessible to non-security specialist programmers, in order help achieve its potential and provide rich information security in diverse real-world applications.  There were three primary directions of research we pursued to achieve these goals.   Providing security guarantees that are proportional to programmer effort. Exploring expressive information security policies that can formally express applications? information security requirements.  Extending strong information security guarantees to concurrent programs by exploring synergies between information security mechanisms and concurrent language mechanisms.   Within these directions, the project had several significant results, including foundational theoretical contributions, and development of practical tools and techniques. We highlight some of these contributions:  Accrue Object Analysis Framework: We developed Accrue Object, a framework for interprocedural analysis of Java programs, based on the Polyglot extensible compiler framework. Accrue simplifies the design and implementation of program analyses.  Pidgin: We developed Pidgin, a program understanding tool that allows developers to explore the security guarantees their application satisfies. PIDGIN uses program-dependence graphs (PDGs) to precisely capture information flows within a program, which can then be interactively queried using a custom graph query language. Queries allow developers to discover and describe information flows in their programs, and can encode checkable security policies.  SX10: We extended the X10 concurrent programming language with coarse-grained information-flow control mechanisms, to enforce strong information security guarantees in the presence of modern concurrency abstractions. There is synergy between the concurrency and information-security mechanisms: X10's concurrency mechanisms simplify reasoning about information flow in concurrent programs.  Elm and CS Education: Elm is a programming language that uses functional and reactive programming paradigms to simplify the efficient and correct implementation of GUIs. Initial development of Elm was supported by this grant. This grant also supported the development of a 12-week high-school course using Elm. Dynamically changing security policies. Policies frequently change during system execution, for example, due to users joining, leaving, or changing roles in a long-running system. In this setting, we discovered a foundational and counter-intuitive result: security against the most powerful possible attacker does not imply security against all attackers. Other foundational security researchers have used this theoretical framework to explore other issues in dynamic security policies. Precise control of termination channels. The termination behavior of a program can be a high-bandwidth covert channel, particularly in concurrent programs. We investigated the precise control of termination channels, and found that&mdash;contrary to common belief&mdash;it is possible to enforce termination-sensitive security without overly restrictive enforcement mechanisms.  Floating-label Systems: We developed techniques to safely control the use of downgrading in floating-label information-flow models (e.g., HiStar, LIO, Breeze), and extended LIO with cryptographic mechanisms (encryption and signing). We use LIO language features to automatically determine when to use cryptographic mechanisms, shielding the programmer from the potential errors, difficulties, and vulnerabilities of manually managing cryptographic keys and performing cryptographic operations.  Information Erasure: A common technique to ensure secure deletion of data is to store data encrypted, so that deletion of the encryption key ensures secure data deletion. We extend these techniques to enforce information erasure (whereby both sensitive data, and data derived from sensitive data will be reliably deleted from the system when required). This addresses shortcomings in existing data deletion approaches and makes language-level information erasure more practical.  High-level guarantees against low-level attackers: We used secure execution environments (e.g., Intel?s SGX technology) to enforce strong information security guarantees (such as information erasure) against powerful low-level attackers. Auditing: We developed formal semantics and proof techniques for audit logs to ensure that logs of program executions are both recorded and used correctly. We instantiated these ideas for Java, and used them on an open source medical records systems.  Information Security in Concurrent Systems: We combined dynamic and static techniques to enforce of information security in concurrent settings. The enforcement is fine-grained (i.e., individual memory locations) but efficient (enforcement requires no additional synchronization between threads).   This project has supported research that lead to 18 peer-reviewed publications, and over 30 presentations in various forums. This project has given research opportunities to 8 undergraduate students and supported 4 graduate students and postdoctoral fellows. More information is available at http://people.seas.harvard.edu/~chong/accrue.html.          Last Modified: 02/13/2017       Submitted by: Stephen Chong]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
