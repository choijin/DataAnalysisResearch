<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Adding an Intelligent Tutoring System to Alice</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>348089.00</AwardTotalIntnAmount>
<AwardAmount>348089</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Michael Erlinger</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Alice is a high-impact, high-interest program visualization environment, that is increasingly being used to teach novices object-oriented programming in a range of courses.  Results provide evidence that using Alice can significantly improve achievement, retention and recruitment of high-risk CS majors during their first year.  This project is expanding the capabilities of Alice by integrating an intelligent tutoring system (ITS).  The ITS has three major functions: 1) intelligent delivery of individualized instructional materials, 2) automatic detection of off-task student behavior and 3) the ability to alert instructors that a student may be having difficulties.  Expected project outcomes include the enhanced version of Alice with the ITS and additional curricular materials.  Assessment is designed to determine if student achievement and attitudes improve as a result of using the ITS.  The PIs expect to grow the community of ITS developers for computing education.  The Alice community includes hundreds of college faculty and high school teachers across a diverse collection of settings and has been used by thousands of students.</AbstractNarration>
<MinAmdLetterDate>09/02/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/14/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1021975</AwardID>
<Investigator>
<FirstName>Hubert</FirstName>
<LastName>Dunsmore</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Hubert E Dunsmore</PI_FULL_NAME>
<EmailAddress>dunsmore@cs.purdue.edu</EmailAddress>
<PI_PHON>7654941996</PI_PHON>
<NSF_ID>000346900</NSF_ID>
<StartDate>09/14/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Stephen</FirstName>
<LastName>Cooper</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephen Cooper</PI_FULL_NAME>
<EmailAddress>coopers@acm.org</EmailAddress>
<PI_PHON>4024726000</PI_PHON>
<NSF_ID>000234699</NSF_ID>
<StartDate>09/14/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Stephen</FirstName>
<LastName>Cooper</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephen Cooper</PI_FULL_NAME>
<EmailAddress>coopers@acm.org</EmailAddress>
<PI_PHON>4024726000</PI_PHON>
<NSF_ID>000234699</NSF_ID>
<StartDate>09/02/2010</StartDate>
<EndDate>09/14/2012</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Luo</FirstName>
<LastName>Si</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Luo Si</PI_FULL_NAME>
<EmailAddress>lsi@cs.purdue.edu</EmailAddress>
<PI_PHON>7654944600</PI_PHON>
<NSF_ID>000204200</NSF_ID>
<StartDate>09/02/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[Young Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>7492</Code>
<Text>CCLI-Type 2 (Expansion)</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0410</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~348089</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Effective Intelligent Tutoring Systems<br /><br />Based on our experience with building the tutoring systems and conducting our research, we think that the following should be the important components for an intelligent tutoring system:<br /><br />&bull; The design of the tutoring system should be based on the type of supervision.&nbsp; In a school-like environment, where students&rsquo; performance can be judged by supervisors, it would be better to have a Tutoring system like the Type 1 as it can speedup learning.&nbsp; On the other hand, tutoring systems focusing on self-learning or online learning without external supervisors where the system plays an important role in judging the progress of a student, Type 2 tutoring systems would be preferred.<br /><br />&bull; A clearly designed workflow that allows students to track their progress is crucial.<br /><br />&bull; The tutorial should be short and at the same time should teach generic concepts as opposed to focusing on the student solving a particular task.<br /><br />&bull; Having pop-ups should be based on the audience targeted.&nbsp; For much younger learners (middle or primary school), having them can be beneficial.<br /><br />&bull; The time limit allowed to complete a task should be based on a student&rsquo;s exposure to Alice.&nbsp; We recommend anywhere between 15-30 minutes for a typical Alice Program.<br /><br />&bull; Having multiple contexts for tasks of similar levels prevents the student from losing interest and at the same time helps in grasping the concept.<br /><br />&bull; Feedback at the end of each task is very important.&nbsp; If students are made to switch contexts, they should be aware of the reasons, for example, they took more time than average to solve a program.<br /><br />&bull; Tutorials are not useful after a point.&nbsp; Deciding the number of times a tutorial should be repeated after failing activities at the same level of difficulty should depend on the target audience.&nbsp; For high school students, making them repeat the tutorial more than twice might make them lose interest in the tutoring system and hinder learning.<br /><br />&bull; Having a simple rule-based judger to decide student progress can be effective to ensure that the student actually learns the concepts and avoids external supervision.<br /><br />&bull; In a tutoring system with rule-based judgers, careful attention must be paid to the selection of tutorials and activities as some programs can be solved in multiple ways and hence, the judging system might fail for a different but correct solution.<br /><br />Conclusion<br /><br />In this research, we created three tutorials that we constructed on Alice to closely resemble the design of Intelligent Tutoring systems.&nbsp; We presented the results of the case studies on these tutoring system.&nbsp; We have discussed what we think are the essential components for an intelligent tutorial system.&nbsp; As we conducted the case studies on a fairly small number of students, we suggest that these studies be repeated with larger groups to further reinforce the results of the studies.</p><br> <p>            Last Modified: 11/30/2015<br>      Modified by: Hubert&nbsp;E&nbsp;Dunsmore</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Effective Intelligent Tutoring Systems  Based on our experience with building the tutoring systems and conducting our research, we think that the following should be the important components for an intelligent tutoring system:  &bull; The design of the tutoring system should be based on the type of supervision.  In a school-like environment, where studentsÃ† performance can be judged by supervisors, it would be better to have a Tutoring system like the Type 1 as it can speedup learning.  On the other hand, tutoring systems focusing on self-learning or online learning without external supervisors where the system plays an important role in judging the progress of a student, Type 2 tutoring systems would be preferred.  &bull; A clearly designed workflow that allows students to track their progress is crucial.  &bull; The tutorial should be short and at the same time should teach generic concepts as opposed to focusing on the student solving a particular task.  &bull; Having pop-ups should be based on the audience targeted.  For much younger learners (middle or primary school), having them can be beneficial.  &bull; The time limit allowed to complete a task should be based on a studentÃ†s exposure to Alice.  We recommend anywhere between 15-30 minutes for a typical Alice Program.  &bull; Having multiple contexts for tasks of similar levels prevents the student from losing interest and at the same time helps in grasping the concept.  &bull; Feedback at the end of each task is very important.  If students are made to switch contexts, they should be aware of the reasons, for example, they took more time than average to solve a program.  &bull; Tutorials are not useful after a point.  Deciding the number of times a tutorial should be repeated after failing activities at the same level of difficulty should depend on the target audience.  For high school students, making them repeat the tutorial more than twice might make them lose interest in the tutoring system and hinder learning.  &bull; Having a simple rule-based judger to decide student progress can be effective to ensure that the student actually learns the concepts and avoids external supervision.  &bull; In a tutoring system with rule-based judgers, careful attention must be paid to the selection of tutorials and activities as some programs can be solved in multiple ways and hence, the judging system might fail for a different but correct solution.  Conclusion  In this research, we created three tutorials that we constructed on Alice to closely resemble the design of Intelligent Tutoring systems.  We presented the results of the case studies on these tutoring system.  We have discussed what we think are the essential components for an intelligent tutorial system.  As we conducted the case studies on a fairly small number of students, we suggest that these studies be repeated with larger groups to further reinforce the results of the studies.       Last Modified: 11/30/2015       Submitted by: Hubert E Dunsmore]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
