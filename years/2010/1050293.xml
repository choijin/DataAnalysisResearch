<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: An Exploratory System for Inverse Parametric Optimization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>59996.00</AwardTotalIntnAmount>
<AwardAmount>59996</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Perhaps the most prevalent scenario in science in general is reconstructing a phenomenon that is not directly observable using the data that can be measured.  In biology, for example, this occurs when computing an evolutionary alignment of homologous proteins, predicting the secondary structure of a folded RNA molecule, inferring a phylogeny for a collection of taxa, recovering the regulatory network for a set of genes, or assembling the DNA sequence for a genome. These tasks are almost always modeled as optimization problems, where the optimal solution is intended to correspond to the correct reconstruction. A crucial ingredient in any such model is the objective function, whose role is to select out the correct solution as one that maximizes or minimizes the objective function. This objective function usually comes from a family of parameterized functions, and the correctness of the model can critically depend on the choice of parameter values for the function. In practice, the question of how to determine the right values for a model's parameters is both difficult and ubiquitous: improved models that better reflect the underlying biology have many parameters, but yield worse results unless their parameters are set to correct values, yet painstakingly exploring the high-dimensional parameter space to find a correct setting quickly becomes impossible. The team is looking to implement new finding of an algorithm in the area of inverse parametric optimization that can efficiently learn correct parameter values for any linear problem, such as those biology problems noted. The system readily yields efficient software for inverse shortest paths, inverse spanning trees, maximum flow, maximum matching and maximum branching, all of which have linear objective function can optimized, enabling efficient model learning for a multitude of computer science applications.&lt;br/&gt;&lt;br/&gt;The proposed work on inverse parametric optimization has extremely broad scientific impact in computer science and computational biology, as our techniques efficiently solve inverse optimization for any problem with a linear objective function.  The PI will also create a new combined course that is an integral part of a new interdisciplinary degree program.</AbstractNarration>
<MinAmdLetterDate>08/22/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/22/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1050293</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Kececioglu</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John D Kececioglu</PI_FULL_NAME>
<EmailAddress>kece@cs.arizona.edu</EmailAddress>
<PI_PHON>5206214526</PI_PHON>
<NSF_ID>000422618</NSF_ID>
<StartDate>08/22/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Arizona</Name>
<CityName>Tucson</CityName>
<ZipCode>857194824</ZipCode>
<PhoneNumber>5206266000</PhoneNumber>
<StreetAddress>888 N Euclid Ave</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<StateCode>AZ</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AZ03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>806345617</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ARIZONA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072459266</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Arizona]]></Name>
<CityName>Tucson</CityName>
<StateCode>AZ</StateCode>
<ZipCode>857194824</ZipCode>
<StreetAddress><![CDATA[888 N Euclid Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AZ03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~59996</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This exploratory grant developed a prototype C++ software system for efficient, fully-general <em>inverse parametric optimization</em> of any model that is linear in its parameters. Inverse parametric optimization is the problem of finding values for the parameters of the objective function of an optimization model, given a set of examples of input-output pairs for the model, such that each output in the set is an optimal solution for its corresponding input under the objective function.</p> <p>To contrast this with standard optimization, the <em>forward optimization</em> problem is, given an input to the model and the objective function for the model, find an output for the input that is optimal under the objective function. On the other hand, the <em>inverse optimization</em> problem is, given both an input and an output to the model, find the objective function (in the sense of specifying parameter values for a general parameterized family of objective functions) that makes the output be an optimal solution for its input.</p> <p>In the language of machine learning, this learns values for the parameters of the optimization model from examples of solutions to the model.</p> <p>The C++ system implements the algorithm of Kececioglu and Kim for general inverse parametric optimization, which is guaranteed to efficiently find optimal parameter values for any optimization model whose objective function is linear in its parameters. The algorithm uses a reduction to the optimization problem known as <em>linear programming</em>, and the prototype software system has interfaces to the COIN-OR and CPLEX packages for solving the underlying linear programming instances. The prototype system currently handles so-called complete examples, and extensions are underway to handle partial examples.</p> <p>One graduate research assistant, Lisa Peairs, was supported on the award.</p><br> <p>            Last Modified: 11/30/2012<br>      Modified by: John&nbsp;D&nbsp;Kececioglu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This exploratory grant developed a prototype C++ software system for efficient, fully-general inverse parametric optimization of any model that is linear in its parameters. Inverse parametric optimization is the problem of finding values for the parameters of the objective function of an optimization model, given a set of examples of input-output pairs for the model, such that each output in the set is an optimal solution for its corresponding input under the objective function.  To contrast this with standard optimization, the forward optimization problem is, given an input to the model and the objective function for the model, find an output for the input that is optimal under the objective function. On the other hand, the inverse optimization problem is, given both an input and an output to the model, find the objective function (in the sense of specifying parameter values for a general parameterized family of objective functions) that makes the output be an optimal solution for its input.  In the language of machine learning, this learns values for the parameters of the optimization model from examples of solutions to the model.  The C++ system implements the algorithm of Kececioglu and Kim for general inverse parametric optimization, which is guaranteed to efficiently find optimal parameter values for any optimization model whose objective function is linear in its parameters. The algorithm uses a reduction to the optimization problem known as linear programming, and the prototype software system has interfaces to the COIN-OR and CPLEX packages for solving the underlying linear programming instances. The prototype system currently handles so-called complete examples, and extensions are underway to handle partial examples.  One graduate research assistant, Lisa Peairs, was supported on the award.       Last Modified: 11/30/2012       Submitted by: John D Kececioglu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
