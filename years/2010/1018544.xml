<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>DC: Small: A Programming Model for Distributed Data Fusion</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>380000.00</AwardTotalIntnAmount>
<AwardAmount>380000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Data is being generated everywhere in real-time since the scope of sensors has extended to smartphones that continually capture and/or transmit a varied type of data. A lot of data comes in different semantic forms that needs to be distinguished. For example, tweets and instant messages carry different types of information although both are based on text. Such distributed data carries rich semantics that need to be captured and processed for determining the state of the information in near real time and this poses many challenges. This work proposes a language-based (Java) approach along with a mobile agent based system to capture important properties such as timeliness, currency, incompleteness, consistency, and autonomy of data utilizing the properties of their sources. Moreover, since the data sources are quite autonomous, information flow policies dictate access control of the non-local data. Policies pose constraints on data access and movement and multiple processing possibilities exist in such a scenario. Performing such data fusion in real-time is very challenging and it is envisioned to use Java mobile agents framework. The role of compiler analysis is critical to make the runtime smart to  reduce undue overhead to get distributed real time processing needs under control. It is proposed to test this software infrastructure on several applications from the domains such as the  transportation, and the navigation systems.</AbstractNarration>
<MinAmdLetterDate>09/15/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/15/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018544</AwardID>
<Investigator>
<FirstName>Santosh</FirstName>
<LastName>Pande</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Santosh Pande</PI_FULL_NAME>
<EmailAddress>santosh@cc.gatech.edu</EmailAddress>
<PI_PHON>4043852169</PI_PHON>
<NSF_ID>000253802</NSF_ID>
<StartDate>09/15/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Nate</FirstName>
<LastName>Clark</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nate Clark</PI_FULL_NAME>
<EmailAddress>ntclark@cc.gatech.edu</EmailAddress>
<PI_PHON>4043850866</PI_PHON>
<NSF_ID>000502635</NSF_ID>
<StartDate>09/15/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>097394084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGIA TECH RESEARCH CORPORATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>097394084</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgia Institute of Technology]]></Name>
<CityName>Atlanta</CityName>
<StateCode>GA</StateCode>
<ZipCode>303320002</ZipCode>
<StreetAddress><![CDATA[225 NORTH AVE NW]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7793</Code>
<Text>DATA-INTENSIVE COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7793</Code>
<Text>DATA-INTENSIVE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~380000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The sources and diversity of &nbsp;distributed data are growing by leaps and bounds. The success of data driven analytics and control becomes critically dependent on programmar productivity involved in writing such applications - namely, the ability to reason about the data which is distributed across trust boundaries. The goal of this work is to develop a programming model that allows one to model the properties of trust, sharing, ownership, and timeliness for distributed data in a simple, intuitive manner and to develop the underlying implementation for its efficient fusion.</p> <p>In this project, first, simple extensions are developed to Java to model the above properties through annotations, thus, the underlying programming model used for this purpose is : SPMD (single program multiple data). Under this model, the same Java program executes in a distributed sense and localizes and evaluates to the data owned at respective sources. The model is based on Java Aglets: data sharing is dictated by the annotations. The data can be fetched from remote processing node if the data owner allows so under the sharing annotations. If not, the computation migrates to the node that owns the data and executes an aglet (a modification of remote procedure call) under the trusted execution environment of the data owner. In this work, data sharing annotations are developed that form a superset of real world policies such as used in instagram or snapchat. For example, a data may be shared with a friend but a friend is not allowed to share it further with anyone or is allowed provided the transitive relation satisfies a constraint. Moreover, once the data is consumed (read or operated upon per algebra surrounding ownership policies), it is destroyed or morphed permanently in a non-reversible form. &nbsp; The policies of data ownership are composable and can be modeled through a simple type system. One of the key contributions of this work is the development of data annotations and an underlying &nbsp;simple type system useful for its consistency checking.&nbsp;</p> <p>The next step is the efficient implementation of the programming model. &nbsp;One of the key issues faced is the repeated migrations of the Java Aglets to data sources to enforce the trust constraints. Optimizations are developed to transform the program order to minimize the number of migrations. In an orthogonal manner, data movement and caching optimizations are developed to move the live data from respective data sources to &nbsp;other nodes so that the cost of migrations can be amortized. A major contribution of this work is the development of aglet migration transformations and data caching/movement techniques to reduce the runtime overhead. Apart from overhead reduction, one of the key optimizations focussed on timeliness property. Modeling of the context under which one can live with stale data opens up optimization space above and the project successfully demonstrated an &nbsp;initial exploration of this key idea. &nbsp;</p> <p>The results of the above work are published in several key conferences. The final paper on this work is presented in HICSS 2015, a systems conference which also embraces business applications that &nbsp;involve distributed data processing. The paper was a runner up for best paper award. The framework is demonstrated and successfully evaluated on modeling several distributed data processing scenarios including: mobile friends discovery, snapchat, instagram and complex pictures and video sharing applications built using real world "friends" relations. Currently, the framework is being tested for robustness for open source release.&nbsp;</p><br> <p>            Last Modified: 09/23/2016<br>      Modified by: Santosh&nbsp;Pande</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The sources and diversity of  distributed data are growing by leaps and bounds. The success of data driven analytics and control becomes critically dependent on programmar productivity involved in writing such applications - namely, the ability to reason about the data which is distributed across trust boundaries. The goal of this work is to develop a programming model that allows one to model the properties of trust, sharing, ownership, and timeliness for distributed data in a simple, intuitive manner and to develop the underlying implementation for its efficient fusion.  In this project, first, simple extensions are developed to Java to model the above properties through annotations, thus, the underlying programming model used for this purpose is : SPMD (single program multiple data). Under this model, the same Java program executes in a distributed sense and localizes and evaluates to the data owned at respective sources. The model is based on Java Aglets: data sharing is dictated by the annotations. The data can be fetched from remote processing node if the data owner allows so under the sharing annotations. If not, the computation migrates to the node that owns the data and executes an aglet (a modification of remote procedure call) under the trusted execution environment of the data owner. In this work, data sharing annotations are developed that form a superset of real world policies such as used in instagram or snapchat. For example, a data may be shared with a friend but a friend is not allowed to share it further with anyone or is allowed provided the transitive relation satisfies a constraint. Moreover, once the data is consumed (read or operated upon per algebra surrounding ownership policies), it is destroyed or morphed permanently in a non-reversible form.   The policies of data ownership are composable and can be modeled through a simple type system. One of the key contributions of this work is the development of data annotations and an underlying  simple type system useful for its consistency checking.   The next step is the efficient implementation of the programming model.  One of the key issues faced is the repeated migrations of the Java Aglets to data sources to enforce the trust constraints. Optimizations are developed to transform the program order to minimize the number of migrations. In an orthogonal manner, data movement and caching optimizations are developed to move the live data from respective data sources to  other nodes so that the cost of migrations can be amortized. A major contribution of this work is the development of aglet migration transformations and data caching/movement techniques to reduce the runtime overhead. Apart from overhead reduction, one of the key optimizations focussed on timeliness property. Modeling of the context under which one can live with stale data opens up optimization space above and the project successfully demonstrated an  initial exploration of this key idea.    The results of the above work are published in several key conferences. The final paper on this work is presented in HICSS 2015, a systems conference which also embraces business applications that  involve distributed data processing. The paper was a runner up for best paper award. The framework is demonstrated and successfully evaluated on modeling several distributed data processing scenarios including: mobile friends discovery, snapchat, instagram and complex pictures and video sharing applications built using real world "friends" relations. Currently, the framework is being tested for robustness for open source release.        Last Modified: 09/23/2016       Submitted by: Santosh Pande]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
