<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>NeTS-Small: Collaborative Research: Network-Wide Configuration Testing and Synthesis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Darleen Fisher</SignBlockName>
<PO_EMAI>dlfisher@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The behavior of a communications network depends on the configuration&lt;br/&gt;of hundreds to thousands of switches, routers, firewalls, and other&lt;br/&gt;devices.  For example, a campus network may have as many as 2,000&lt;br/&gt;inter-operating network devices and about one million lines of&lt;br/&gt;configuration; whether the network operates correctly depends for the&lt;br/&gt;most part on the configuration of these devices.  Human configuration&lt;br/&gt;errors are the single biggest contributor to network downtime. This&lt;br/&gt;project seeks to develop techniques to make networks easier to manage&lt;br/&gt;by improving both configuration testing and synthesis. Testing takes&lt;br/&gt;as input an existing network configuration and determines whether the&lt;br/&gt;configuration is operating correctly.  Synthesis generates&lt;br/&gt;configurations automatically.  The project draws on two testing&lt;br/&gt;techniques to make network configurations easier to test: differential&lt;br/&gt;testing and dynamic testing.  Differential testing generates test&lt;br/&gt;cases to characterize the run-time behavior of two different programs;&lt;br/&gt;analyzing differences in network-wide configurations can help testing&lt;br/&gt;by allowing test cases to focus on the smaller subset of&lt;br/&gt;configurations that change more frequently.  Differential analysis may&lt;br/&gt;make testing more tractable by reducing the amount of configuration to&lt;br/&gt;test.  Dynamic testing checks the correctness of a program by&lt;br/&gt;executing it; this execution can be performed in a parallel "shadow"&lt;br/&gt;network, for example.  The expected results from this project include&lt;br/&gt;tools for network operators to test and automatically generate&lt;br/&gt;network-wide configurations for both enterprise and ISP networks.  The&lt;br/&gt;tools will also be useful in graduate-level courses.</AbstractNarration>
<MinAmdLetterDate>07/14/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/05/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018021</AwardID>
<Investigator>
<FirstName>Nicholas</FirstName>
<LastName>Feamster</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nicholas G Feamster</PI_FULL_NAME>
<EmailAddress>feamster@uchicago.edu</EmailAddress>
<PI_PHON>6092582203</PI_PHON>
<NSF_ID>000489704</NSF_ID>
<StartDate>07/14/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>097394084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGIA TECH RESEARCH CORPORATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>097394084</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgia Institute of Technology]]></Name>
<CityName>Atlanta</CityName>
<StateCode>GA</StateCode>
<ZipCode>303320002</ZipCode>
<StreetAddress><![CDATA[225 NORTH AVE NW]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><!--?xml version="1.0" encoding="UTF-8" standalone="no"?--> <p>The behavior of a communications network depends largely on the configuration of hundreds to thousands of switches, routers, firewalls, and other devices. For example, a campus network may have as many as 2,000 inter-operating network devices and about one million lines of configuration; whether the network operates correctly, and according to the network operator&rsquo;s policy, depends for the most part on the configuration of these devices. Operators configure these devices to perform complex tasks ranging from provisioning and access control to rate limiting and load balancing by independently adjusting the network configurations of these devices. The complexity of these tasks and the low level at which operators interact with network devices make network management time-consuming, and easily one of the most significant costs of running a network today. According to many studies, human error accounts for as much as 80% of outages; the high cost of the resulting downtime emphasizes the need to develop better methods for configuring the network. To reduce these errors, this project developed new research to tackle both the synthesis and testing of network configuration.</p> <p>In this project, we focused on the use of Software-Defined Networking (SDN) to assist with automated network configuration synthesis and verification. Namely, we developed Kinetic, the first-ever SDN controller that could dynamically adjust network configuration in response to network events such as traffic shifts, security incidents, and network failures. The controller also has a mechanism for checking the correctness of the SDN control program against a specification of intended dynamic behavior, allowing errors to be detected&nbsp;<em>before</em>&nbsp;the program is ever deployed on a live network.</p> <p>Outcomes from the research included:</p> <ul> <li><!--?xml version="1.0" encoding="UTF-8" standalone="no"?--> <span>The training of more than 100,000 students in hundreds of countries around the world, as part of programming assignments on the Kinetic SDN controller, which are included in a Coursera MOOC on SDN.</span></li> <li><span><!--?xml version="1.0" encoding="UTF-8" standalone="no"?--> <span>Open-source code release of the Kinetic SDN controller software, which has an active community of contributors.</span><br /></span></li> </ul> <p>The research project has had remarkable impact, far beyond the research lab and classroom. In addition to the open-source software release and training of more than 100,000 students around the world on SDN, the controller is the basis for technology that network operators are now installing on next-generation SDN network designs in several campus, wide-area, and enterprise networks.</p><br> <p>            Last Modified: 04/14/2016<br>      Modified by: Nicholas&nbsp;G&nbsp;Feamster</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  The behavior of a communications network depends largely on the configuration of hundreds to thousands of switches, routers, firewalls, and other devices. For example, a campus network may have as many as 2,000 inter-operating network devices and about one million lines of configuration; whether the network operates correctly, and according to the network operatorÃ†s policy, depends for the most part on the configuration of these devices. Operators configure these devices to perform complex tasks ranging from provisioning and access control to rate limiting and load balancing by independently adjusting the network configurations of these devices. The complexity of these tasks and the low level at which operators interact with network devices make network management time-consuming, and easily one of the most significant costs of running a network today. According to many studies, human error accounts for as much as 80% of outages; the high cost of the resulting downtime emphasizes the need to develop better methods for configuring the network. To reduce these errors, this project developed new research to tackle both the synthesis and testing of network configuration.  In this project, we focused on the use of Software-Defined Networking (SDN) to assist with automated network configuration synthesis and verification. Namely, we developed Kinetic, the first-ever SDN controller that could dynamically adjust network configuration in response to network events such as traffic shifts, security incidents, and network failures. The controller also has a mechanism for checking the correctness of the SDN control program against a specification of intended dynamic behavior, allowing errors to be detected before the program is ever deployed on a live network.  Outcomes from the research included:   The training of more than 100,000 students in hundreds of countries around the world, as part of programming assignments on the Kinetic SDN controller, which are included in a Coursera MOOC on SDN.  Open-source code release of the Kinetic SDN controller software, which has an active community of contributors.    The research project has had remarkable impact, far beyond the research lab and classroom. In addition to the open-source software release and training of more than 100,000 students around the world on SDN, the controller is the basis for technology that network operators are now installing on next-generation SDN network designs in several campus, wide-area, and enterprise networks.       Last Modified: 04/14/2016       Submitted by: Nicholas G Feamster]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
