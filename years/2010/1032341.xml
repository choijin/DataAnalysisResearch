<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SDCI Sec New: In-Depth Vulnerability Assessment of Middleware</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2011</AwardEffectiveDate>
<AwardExpirationDate>12/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>775000.00</AwardTotalIntnAmount>
<AwardAmount>775000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Daniel Katz</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This research establishes MIST, the MIddleware Security and Testing facility,&lt;br/&gt;to identify security vulnerabilities in middleware, which include e-commerce&lt;br/&gt;systems, supercomputers, and scientific and commercial networks. The&lt;br/&gt;researchers are identifying limitations in current abilities to identify and&lt;br/&gt;remediate vulnerabilities in the middleware. The limitations include assessment&lt;br/&gt;techniques that provide insufficient focus on critical vulnerabilities and are&lt;br/&gt;subject to high false-positives, tools that provide limited abilities to &lt;br/&gt;find serious vulnerabilities, little or no formal characterization of&lt;br/&gt;vulnerabilities, lack of trained security analysts to perform vulnerability&lt;br/&gt;assessment, scarcity of curricula, both in academia and professional training,&lt;br/&gt;for training security analysts, scarcity of training in software engineering&lt;br/&gt;and design techniques for secure systems, and lack of independent vulnerability&lt;br/&gt;assessment activities in middleware software development.&lt;br/&gt;&lt;br/&gt;The researchers are developing first principles based vulnerability assessment&lt;br/&gt;(FPVA) that starts with architectural and resource analysis of the software,&lt;br/&gt;identifying high-value assets, and then derives threats based on how the&lt;br/&gt;assets are used. This research includes new and extended algorithms and&lt;br/&gt;techniques for tools to help improve the automation of this task, and new&lt;br/&gt;software engineering and coding techniques for developing secure systems.&lt;br/&gt;Results from their FPVA assessment activities are used to develop formal&lt;br/&gt;characterizations of these hard-to-discover vulnerabilities and, from these&lt;br/&gt;characterizations, develop algorithms for detecting these vulnerabilities.&lt;br/&gt;From algorithms, they are developing new automated tools for detection. The&lt;br/&gt;tools take the form of plug-ins to existing tools (to reduce unnecessary&lt;br/&gt;effort and time-to-deployment). &lt;br/&gt;&lt;br/&gt;This project expands the skills software developers by developing training&lt;br/&gt;materials in the form of tutorials, short courses, and a new undergraduate&lt;br/&gt;course in vulnerability assessment and secure coding practices.</AbstractNarration>
<MinAmdLetterDate>08/06/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/06/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1032341</AwardID>
<Investigator>
<FirstName>Barton</FirstName>
<LastName>Miller</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Barton P Miller</PI_FULL_NAME>
<EmailAddress>bart@cs.wisc.edu</EmailAddress>
<PI_PHON>6082633378</PI_PHON>
<NSF_ID>000455518</NSF_ID>
<StartDate>08/06/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>MADISON</CityName>
<StateCode>WI</StateCode>
<ZipCode>537151218</ZipCode>
<StreetAddress><![CDATA[21 North Park Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7683</Code>
<Text>SOFTWARE DEVELOPEMENT FOR CI</Text>
</ProgramElement>
<ProgramReference>
<Code>7683</Code>
<Text>SOFTWARE DEVELOPEMENT FOR CI</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~775000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project has worked to improve the process of doing in-depth vulnerability assessment of software.&nbsp; While many projects address methods for fully automated evaluation of software for weaknesses in the code, these techniques have significant limits on their scope and abilities. For systems that maintain critical private information or control critical infrastructure, more in-depth evaluation is needed. We have worked to develop new techniques to make the analyst-driven, in-depth assessment process more effective and less time consuming. In addition, we have worked to apply these techniques to critical software, as well as offer training to software practitioners in using our techniques.</p> <p><strong>Intellectual merit:</strong></p> <ol> <li>Developed techniques to reduce the time and effort to perform detailed, in depth software vulnerability assessment: We addressed the problem of the security expertise required for risk analysis. We created a model, AutSEC (automated security expert consultant), that automates the risk analysis process. The purpose of AutSEC is to enforce security by design, where threats are mitigated early in the software development process, allowing non-security-aware programmers to develop more secure software. The key is to direct the programmers to the areas in their software that are at the most risk, so need the most attention.</li> <li>Develop techniques to detect if running software has been exploited: We developed a technique for the efficient, robust detection of code reuse attacks. This is an important class of attacks, where the attackers use portions of the programmers own code to perform the exploit behavior. Our work is grounded in a model of conformant program execution (CPE), in which we define what internal behavior of the program is possible during normal execution. We then automatically generate a model automatically by analyzing the program&rsquo;s binary code; thus, no training phase or expert knowledge is required. The CPE enforces <em>expected</em> program behavior instead of defending against anticipated attacks; thus, new exploit variations will not circumvent CPE.</li> </ol> <p><strong>Broader Impacts:</strong></p> <p>Promulgate the assessment techniques to academic, commercial and government practitioners, to increase confidence in the software that they write and manage.</p> <p>This project has produced new techniques to help create more secure software, with the potential to apply these techniques in any area which this increased security is helpful or even critical. In addition, we have provided training, both in the context of the half dozen graduate students funded under this project and to professional practitioners in academic, industry, and government.</p> <p>Specifically:</p> <ol> <li>We advanced the state of the art in the area of in-depth software security analysis. Most researchers are trying to address the full-automated analysis of software, which, while important, currently has intrinsic limits.&nbsp; We worked to improve the effectiveness of the analyst for these in-depth assessments.</li> <li>Since many of the projects that benefit from our software assessment research and activities are in other disciplines, we make these projects more effective and less likely to be hampered by a significant security event.</li> <li>Software assurance is a weak point in almost all computer science curriculums, and even those few programs that have course limit the exposure to a single course. For our graduate research assistants, project staff, and tutorial attendees, we are providing a conceptual foundation and practical skills to take into the workplace with them.</li> <li>We have applied our new software assessment techniques to critical infrastructure components, such as iRODS storage software, Gratia Condor Probes, gLExec privilege de-escalation facility, and Google Chrome/Chromium.</li> </ol><br> <...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project has worked to improve the process of doing in-depth vulnerability assessment of software.  While many projects address methods for fully automated evaluation of software for weaknesses in the code, these techniques have significant limits on their scope and abilities. For systems that maintain critical private information or control critical infrastructure, more in-depth evaluation is needed. We have worked to develop new techniques to make the analyst-driven, in-depth assessment process more effective and less time consuming. In addition, we have worked to apply these techniques to critical software, as well as offer training to software practitioners in using our techniques.  Intellectual merit:  Developed techniques to reduce the time and effort to perform detailed, in depth software vulnerability assessment: We addressed the problem of the security expertise required for risk analysis. We created a model, AutSEC (automated security expert consultant), that automates the risk analysis process. The purpose of AutSEC is to enforce security by design, where threats are mitigated early in the software development process, allowing non-security-aware programmers to develop more secure software. The key is to direct the programmers to the areas in their software that are at the most risk, so need the most attention. Develop techniques to detect if running software has been exploited: We developed a technique for the efficient, robust detection of code reuse attacks. This is an important class of attacks, where the attackers use portions of the programmers own code to perform the exploit behavior. Our work is grounded in a model of conformant program execution (CPE), in which we define what internal behavior of the program is possible during normal execution. We then automatically generate a model automatically by analyzing the programÆs binary code; thus, no training phase or expert knowledge is required. The CPE enforces expected program behavior instead of defending against anticipated attacks; thus, new exploit variations will not circumvent CPE.   Broader Impacts:  Promulgate the assessment techniques to academic, commercial and government practitioners, to increase confidence in the software that they write and manage.  This project has produced new techniques to help create more secure software, with the potential to apply these techniques in any area which this increased security is helpful or even critical. In addition, we have provided training, both in the context of the half dozen graduate students funded under this project and to professional practitioners in academic, industry, and government.  Specifically:  We advanced the state of the art in the area of in-depth software security analysis. Most researchers are trying to address the full-automated analysis of software, which, while important, currently has intrinsic limits.  We worked to improve the effectiveness of the analyst for these in-depth assessments. Since many of the projects that benefit from our software assessment research and activities are in other disciplines, we make these projects more effective and less likely to be hampered by a significant security event. Software assurance is a weak point in almost all computer science curriculums, and even those few programs that have course limit the exposure to a single course. For our graduate research assistants, project staff, and tutorial attendees, we are providing a conceptual foundation and practical skills to take into the workplace with them. We have applied our new software assessment techniques to critical infrastructure components, such as iRODS storage software, Gratia Condor Probes, gLExec privilege de-escalation facility, and Google Chrome/Chromium.        Last Modified: 03/20/2016       Submitted by: Barton P Miller]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
