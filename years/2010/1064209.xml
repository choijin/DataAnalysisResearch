<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>The Scientific Software Network Map</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/15/2011</AwardEffectiveDate>
<AwardExpirationDate>04/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>541984.00</AwardTotalIntnAmount>
<AwardAmount>541984</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>04010000</Code>
<Directorate>
<Abbreviation>SBE</Abbreviation>
<LongName>Direct For Social, Behav &amp; Economic Scie</LongName>
</Directorate>
<Division>
<Abbreviation>SMA</Abbreviation>
<LongName>SBE Off Of Multidisciplinary Activities</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Maryann Feldman</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Increasingly sophisticated science depends on ever more complex software.  Software is increasingly vital across all scientific fields for functions as diverse as analyzing data, simulating phenomena, and controlling instruments.  Software, more than simply a supporting service, can be a source of innovation and can enhance science by increasing its transparency, reproducibility, transferability and scale. Currently, however, there is little scientific understanding of the contribution of software work towards progress in science; it is often not even clear what software was used in advancing science and who ought to receive credit for that software's contribution.  Lacking this citation mechanism, young scientists are implicitly discouraged from the work needed to build broadly useful software.  Collaboration to improve existing software is also unintentionally discouraged.  Releasing a package can create a unfortunate outcome, where a package's success brings support and maintenance burdens that overwhelm its creators, stalling emerging projects and discouraging future sharing. &lt;br/&gt;&lt;br/&gt;Both understanding the role of software work in science and overcoming the obstacles slowing its progress depend critically on knowing what software is actually used, how the use of various packages is orchestrated in scientific projects, and where resources can be most effectively deployed to facilitate software development, evolution, and support.  In order to continuously acquire such knowledge, this project is designing and building the Scientific Software Network Map.  This map will measure the scientific-software ecosystem by collecting data on which software tools have been used in the science leading to publications, the network of dependencies and complementarities from that software to other software packages, and how software use evolves over time.  The project is working with scientists in software-heavy fields to research and design data-collection techniques, gather data, and design appropriate analyses.  This project will also provide an initial foundation for a scientific understanding of the role of software in science and scientific innovation.  &lt;br/&gt;&lt;br/&gt;Broader Impacts: The results of the project will improve the practical conduct of software-supported science as well as informing science policy decision-making related to software's application in science, research, and innovation projects.  The publicly available Map that results will be more broadly useful in three mutually reinforcing ways.  First, it will be a resource for software-contributing scientists to demonstrate the usefulness and impact of their work, providing a foundation for their motivated, sustained contribution and improving the sustainability of scientific software projects. Second, it will function as an information source for other scientists to know what software is being used in their field, generating common knowledge that reduces costly reimplementation and helping communities coalesce towards shared platforms. Third, it will help science funders identify evolving issues and opportunities in the software ecosystem -- such as the challenge of rapid adoption driving heavy but unanticipated support burdens, or early alerts about communities coalescing around nascent cores which, with timely, focused funding support, can be turned into the software platforms that will drive future scientific innovation.</AbstractNarration>
<MinAmdLetterDate>05/19/2011</MinAmdLetterDate>
<MaxAmdLetterDate>02/13/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.075</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1064209</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Herbsleb</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James D Herbsleb</PI_FULL_NAME>
<EmailAddress>jdh@cs.cmu.edu</EmailAddress>
<PI_PHON>4122688933</PI_PHON>
<NSF_ID>000298289</NSF_ID>
<StartDate>05/19/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>James</FirstName>
<LastName>Howison</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James Howison</PI_FULL_NAME>
<EmailAddress>jhowison@cs.cmu.edu</EmailAddress>
<PI_PHON>4122688746</PI_PHON>
<NSF_ID>000531604</NSF_ID>
<StartDate>05/19/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8075</Code>
<Text>SciSIP Infrastructure</Text>
</ProgramElement>
<ProgramReference>
<Code>7626</Code>
<Text>SCIENCE OF SCIENCE POLICY</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~541984</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Science increasingly depends on software to create simulations, analyze data, operate tools, and do many other things. &nbsp;At least one survey* indicates that scientists spend almost a third of their time writing software they need for their scientific work. Very often, the software written by one scientist would be very useful to other scientists, and save them effort of writing it over again. &nbsp;Yet this doesn't happen as much as it could, for several reasons. &nbsp;First, scientsts often don't know what software their colleagues are creating and using. &nbsp;Second, it takes some extra work to write software so others can use it, for example finding out about and using data formats other scientists use, and making sure the software interoperates wth other popular software. &nbsp;Third, although many scientists do share their software, they don't know who is using it, what they are using it for, and what new features and bug fixes their users need. &nbsp;Finally, scientists don't get much credit for the software they write, even if it is widely used, and even if it enables key scientific results that would not have been possible otherwise. &nbsp;That's partly because no one knows, in many cases, that it is used so much or has been so important.</p> <p>In this project, we built the Scientific Software Network Map, which collects data about the use of scientific software and provides several visualizations of that use. It lets scientists see how much their software is used, how it is used, what other software it is used with, and how use is changing over time. Our map is avaliable here:</p> <p><a title="Scientific Software Network Map" href="http://scisoft-net-map.isri.cmu.edu/">http://scisoft-net-map.isri.cmu.edu/</a></p> <p>We currently have data from about 100,000 applications written in the statistical programminn language R. &nbsp;The map provides interactive visualizations that helps scientists understand key facts about how their software is being used. &nbsp;It also, where available, shows lists of publications that relied on the software so the scientist who wrote it gets credit for enabling the scientific work. &nbsp;</p> <p>*Hannay, J. E., MacLeod, C., Singer, J., Langtangen, H. P., Pfahl, D., &amp; Wilson, G. (2009). <em>How do scientists develop and use scientific software?</em> Paper presented at the Proceedings of the 2009 ICSE workshop on Software Engineering for Computational Science and Engineering.</p><br> <p>            Last Modified: 07/30/2015<br>      Modified by: James&nbsp;D&nbsp;Herbsleb</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Science increasingly depends on software to create simulations, analyze data, operate tools, and do many other things.  At least one survey* indicates that scientists spend almost a third of their time writing software they need for their scientific work. Very often, the software written by one scientist would be very useful to other scientists, and save them effort of writing it over again.  Yet this doesn't happen as much as it could, for several reasons.  First, scientsts often don't know what software their colleagues are creating and using.  Second, it takes some extra work to write software so others can use it, for example finding out about and using data formats other scientists use, and making sure the software interoperates wth other popular software.  Third, although many scientists do share their software, they don't know who is using it, what they are using it for, and what new features and bug fixes their users need.  Finally, scientists don't get much credit for the software they write, even if it is widely used, and even if it enables key scientific results that would not have been possible otherwise.  That's partly because no one knows, in many cases, that it is used so much or has been so important.  In this project, we built the Scientific Software Network Map, which collects data about the use of scientific software and provides several visualizations of that use. It lets scientists see how much their software is used, how it is used, what other software it is used with, and how use is changing over time. Our map is avaliable here:  http://scisoft-net-map.isri.cmu.edu/  We currently have data from about 100,000 applications written in the statistical programminn language R.  The map provides interactive visualizations that helps scientists understand key facts about how their software is being used.  It also, where available, shows lists of publications that relied on the software so the scientist who wrote it gets credit for enabling the scientific work.    *Hannay, J. E., MacLeod, C., Singer, J., Langtangen, H. P., Pfahl, D., &amp; Wilson, G. (2009). How do scientists develop and use scientific software? Paper presented at the Proceedings of the 2009 ICSE workshop on Software Engineering for Computational Science and Engineering.       Last Modified: 07/30/2015       Submitted by: James D Herbsleb]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
