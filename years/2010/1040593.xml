<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>FIA: Collaborative Research: Architecting for Innovation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2010</AwardEffectiveDate>
<AwardExpirationDate>09/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>2100000.00</AwardTotalIntnAmount>
<AwardAmount>2100000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A Platform for Internet Innovation&lt;br/&gt;&lt;br/&gt;The architectural stability of the Internet was crucial in fostering the development of new applications and networking technologies by giving the former a stable base upon which to build and giving the latter a fixed set of requirements to support. However, in recent years this architectural stability has become a liability, as there are areas of increasing importance ? most notably inadequate support of security and availability, lack of adequate mechanisms for privacy, mobility, middleboxes, and data-oriented functionality ? where the original Internet architecture falls short.  The persistence of the Internet's architectural deficiencies is not because they are intellectually intractable, but because they are beyond the reach of incrementally deployable changes.  Based on this observation, the research team takes a different approach than recent clean-slate designs, focusing not on a new fixed architecture but instead on providing a platform to enable architectural innovation through incrementally deployable changes, without massive disruption in the infrastructure.&lt;br/&gt;   &lt;br/&gt;In this research project, the research team focuses on the ?hardware-defined functionality? challenge and proposes a ?platform for innovation? that allows the network infrastructure to support new architectures without changes to the underlying hardware. In particular, this approach will enable forwarding hardware to support a wide range of alternative designs.  In addition, so that changes can be introduced alongside the current design, hardware will also be able to support multiple designs simultaneously. &lt;br/&gt; &lt;br/&gt;The proposed platform will use a newly developed paradigm called Software-Defined Networks (SDN), currently embodied in the OpenFlow and NOX projects. OpenFlow is an open hardware forwarding interface. NOX is an open-source software platform that provides global abstractions to network management software and in turn communicates the decisions made by this software to the individual forwarding boxes.  This effort will provide a solid foundation for more general SDN designs that are open, comprehensive and can meet long-term needs. &lt;br/&gt;&lt;br/&gt;The research team will also explore and demonstrate applicability of the SDN approach including abstractions and programming model for different domains of network use. These include enterprise, WAN, home, and wireless. To demonstrate the ability of the proposed platform to support innovation in radically new network mechanisms, the research team will deploy prototype novel architectures on SDN. &lt;br/&gt;&lt;br/&gt;If successful, the proposed approach would allow the use of known approaches and design proposals currently available in the literature to address many of the Internet's current problems, as these solutions would be incrementally deployable, without major disruption to the underlying infrastructure. Furthermore, current commercial efforts to address Internet?s deficiencies are disjointed, proprietary, and tailored for short-term needs. The next generation of SDN technology provides a solid basis for coordinated, long-term efforts to address critical needs in areas of security, mobility and support of content-centric application and services. More importantly, the proposed approach would allow the Internet to meet future requirements as they arise through incrementally deployable modifications, relieving network designers of the burden of predicting what these future requirements might be.</AbstractNarration>
<MinAmdLetterDate>09/22/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/04/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1040593</AwardID>
<Investigator>
<FirstName>Nick</FirstName>
<LastName>McKeown</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nick W McKeown</PI_FULL_NAME>
<EmailAddress>nickm@ee.stanford.edu</EmailAddress>
<PI_PHON>6507253641</PI_PHON>
<NSF_ID>000487607</NSF_ID>
<StartDate>09/22/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009214214</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LELAND STANFORD JUNIOR UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009214214</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stanford University]]></Name>
<CityName>Stanford</CityName>
<StateCode>CA</StateCode>
<ZipCode>943052004</ZipCode>
<StreetAddress><![CDATA[450 Jane Stanford Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7363</Code>
<Text>RES IN NETWORKING TECH &amp; SYS</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~854044</FUND_OBLG>
<FUND_OBLG>2011~745182</FUND_OBLG>
<FUND_OBLG>2012~500774</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><h1>FIA Architecting for Innovation: Outcomes Report</h1> <p>&nbsp;</p> <p>&nbsp;Our project goals were to contribute to Software Defined Networking (SDN) foundations research and to create open source platforms and applications to accelerate SDN adoption by the practitioners. &nbsp;Our work has centered around the following sub-projects.&nbsp;</p> <p><strong>P4: Program protocol-independent packet processors. </strong>In collaboration with Barefoot Networks, Google, Intel, Microsoft, and Princeton University, we proposed P4 as a high-level language for programming protocol-independent packet processors. With P4 we want to accomplish: (1) Reconfigurability in the field: Programmers should be able to change the way switches process packets once they are deployed. (2) Protocol independence: Switches should not be tied to any specific network protocols. (3) Target independence: Programmers should be able to describe packet-processing functionality independently of the specifics of the underlying hardware. With the help of the larger community we have created an open source P4 spec, open source compiler and other tools, and numerous use cases to show the potential of P4 and now this approach is becoming an industry standard.</p> <p class="Default"><strong>Proactive congestion control for high-speed networks. </strong>Over the past decade, link speeds have grown steadily from 1 Gb/s to 10 Gb/s and now 100 Gb/s. Network transfers are completing faster and in fewer RTTs; given this trend, allocating flows their proper rates as quickly as possible becomes a priority. In this work we advocate proactive congestion control mechanisms that explicitly calculate sending rates based on flow demands. Unlike reactive algorithms that adjust rates gradually based on indirect signals like local congestion at each link, proactive algorithms compute optimal rates based on global information about which flows are active at each link and their rate demands. Given the new milieu of programmable networks, we believe that proactive algorithms are both needed and possible to deploy, at least within high-speed datacenters.</p> <p>&nbsp;</p> <p><strong>Network cookies for users to signal their preferences to the network.&nbsp; </strong>Net neutrality is currently a charged debate. The core argument is around which applications receive special treatment from the network, and whether that is in the best interest of users. In our opinion the debate seems backwards. Specifically, if we are concerned that ISPs or content providers won&rsquo;t make decisions that are in the users&rsquo; best interests, why not let the users themselves decide how their traffic is treated? This could potentially benefit everyone: Users get what they want, ISPs provide more value to their customers, and content that is popular regardless of whether the content provider is big or small get their traffic delivered faster or cheaper. Network Cookies provide the means to do this in a simple and generic way. And at the same time they provide the necessary means for authentication, accountability, and user privacy. We prototyped three different services that benefit from using network cookies to demonstrate the benefits of our approach.</p> <p>&nbsp;</p> <p><strong>ONOS as an open source SDN OS designed for service provider networks.&nbsp; </strong>We have been working with Open Networking Lab (ON.Lab) to architect, design, and prototype ONOS, an open source SDN OS designed for service provider and carrier networks. The key design attributes of ONOS include scalability, high availability, security, and high performance in terms of throughput and latency. ONOS provides a northbound abstraction and APIs to enable creation of services for network control, management, and configuration and provides a southbound abstraction and APIs to enable programming of OpenFlow as well as legacy devices. We did the first open source release of O...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[FIA Architecting for Innovation: Outcomes Report      Our project goals were to contribute to Software Defined Networking (SDN) foundations research and to create open source platforms and applications to accelerate SDN adoption by the practitioners.  Our work has centered around the following sub-projects.   P4: Program protocol-independent packet processors. In collaboration with Barefoot Networks, Google, Intel, Microsoft, and Princeton University, we proposed P4 as a high-level language for programming protocol-independent packet processors. With P4 we want to accomplish: (1) Reconfigurability in the field: Programmers should be able to change the way switches process packets once they are deployed. (2) Protocol independence: Switches should not be tied to any specific network protocols. (3) Target independence: Programmers should be able to describe packet-processing functionality independently of the specifics of the underlying hardware. With the help of the larger community we have created an open source P4 spec, open source compiler and other tools, and numerous use cases to show the potential of P4 and now this approach is becoming an industry standard. Proactive congestion control for high-speed networks. Over the past decade, link speeds have grown steadily from 1 Gb/s to 10 Gb/s and now 100 Gb/s. Network transfers are completing faster and in fewer RTTs; given this trend, allocating flows their proper rates as quickly as possible becomes a priority. In this work we advocate proactive congestion control mechanisms that explicitly calculate sending rates based on flow demands. Unlike reactive algorithms that adjust rates gradually based on indirect signals like local congestion at each link, proactive algorithms compute optimal rates based on global information about which flows are active at each link and their rate demands. Given the new milieu of programmable networks, we believe that proactive algorithms are both needed and possible to deploy, at least within high-speed datacenters.     Network cookies for users to signal their preferences to the network.  Net neutrality is currently a charged debate. The core argument is around which applications receive special treatment from the network, and whether that is in the best interest of users. In our opinion the debate seems backwards. Specifically, if we are concerned that ISPs or content providers wonÆt make decisions that are in the usersÆ best interests, why not let the users themselves decide how their traffic is treated? This could potentially benefit everyone: Users get what they want, ISPs provide more value to their customers, and content that is popular regardless of whether the content provider is big or small get their traffic delivered faster or cheaper. Network Cookies provide the means to do this in a simple and generic way. And at the same time they provide the necessary means for authentication, accountability, and user privacy. We prototyped three different services that benefit from using network cookies to demonstrate the benefits of our approach.     ONOS as an open source SDN OS designed for service provider networks.  We have been working with Open Networking Lab (ON.Lab) to architect, design, and prototype ONOS, an open source SDN OS designed for service provider and carrier networks. The key design attributes of ONOS include scalability, high availability, security, and high performance in terms of throughput and latency. ONOS provides a northbound abstraction and APIs to enable creation of services for network control, management, and configuration and provides a southbound abstraction and APIs to enable programming of OpenFlow as well as legacy devices. We did the first open source release of ONOS in December 2014 and since then we have been doing quarterly releases.  ONOS has quickly become one of the open source SDN OS of choice for service providers.  The community is building a variety of use cases and solutions using ONOS &ndash; some...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
