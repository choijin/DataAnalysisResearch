<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: EAGER: Collaborative Research: Parallel Automated Reasoning</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>124799.00</AwardTotalIntnAmount>
<AwardAmount>124799</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Samuel M. Weber</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The security of the national computing infrastructure is critical for consumer confidence, protection of privacy, protection of valuable intellectual property, and even national security.  Logic-based approaches to security have been gaining popularity, in part because they provide a precise way to describe and reason about the kinds of complexity found in real systems.  Perhaps even more importantly, automated reasoning techniques can be used to assist users in navigating this complexity.  Despite the promise of automated reasoning, its use in practical applications is still limited.  One of the primary reasons for this is that for many problems, automated reasoning methods are not fast enough, especially for use in interactive environments (such as browser plug-ins in desktop computing, or mobile applications running on smart phones and PDAs).  This project aims to address the performance weakness of automated reasoning by investigating novel designs and algorithms with the unifying theme of exploiting parallelism.  The project will focus on three main areas of automated deduction: Boolean satisfiability, first-order reasoning, and satisfiability modulo theories.</AbstractNarration>
<MinAmdLetterDate>08/26/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/26/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1049495</AwardID>
<Investigator>
<FirstName>Clark</FirstName>
<LastName>Barrett</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Clark Barrett</PI_FULL_NAME>
<EmailAddress>barrett@cs.stanford.edu</EmailAddress>
<PI_PHON>6507360822</PI_PHON>
<NSF_ID>000423674</NSF_ID>
<StartDate>08/26/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>New York University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100121019</ZipCode>
<PhoneNumber>2129982121</PhoneNumber>
<StreetAddress>70 WASHINGTON SQUARE S</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041968306</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NEW YORK UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041968306</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[New York University]]></Name>
<CityName>NEW YORK</CityName>
<StateCode>NY</StateCode>
<ZipCode>100121019</ZipCode>
<StreetAddress><![CDATA[70 WASHINGTON SQUARE S]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~124799</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Automated reasoning techniques are used as "engines" in many applications. &nbsp;They are capable in some cases of automatically answering questions like "does this program have a specific bug?" or "is it possible to exploit this software maliciously?" &nbsp;In many cases, however, the automated reasoning takes too long to be practical. &nbsp;This project aimed to address this by exploring how best to use parallelism in automated reasoning.</p> <p>There were two main projects. &nbsp;The first focused on parallelizing reasoning about Boolean satisfiability (SAT). &nbsp;SAT engines are used in many applications such as software modeling and circuit design and verification. We explored a technique known as Stalmarck's method which is less well-known than current best-practice techniques and is more amenable to parallelization. &nbsp;We implemented a parallel Stalmarck solver and showed that it was possible to get near-linear speed-up on small examples. &nbsp;While the overall performance was still far behind the best sequential techniques, we believe that our results are promising and suggest that more investiagion is warranted. &nbsp;A Stalmarck solver could at the very least be used in combination with a standard SAT solver and this could lead to significant speed-ups in some cases.</p> <p>The other project was to implement a parallel SMT solver. &nbsp;SMT solvers can reason at a higher level than Boolean solvers. &nbsp;They understand arithmetic and equations for example. &nbsp;SMT solvers are also used in many important applications. &nbsp;We used CVC4, a state-of-the-art SMT research platform being developed at NYU. &nbsp;We used a "portfolio" approach meaning that several instances of the solver are run in parallel with different configurations and the first to solve the problem terminates all of the instances. &nbsp;This is very course-grained parallelism but it seems to be the most effective approach so far. &nbsp;Some sharing of information in the form of "learned lemmas" is possible between the different instances. &nbsp;We found that the sharing of information was typically not helpful for SMT problems, but this could be because our sharing mechanism was fairly primitive. &nbsp;However, the portfolio approach does work well on many problems because SMT (like SAT) is very sensitive to configuration options. &nbsp;So, by running several different configurations in parallel, it is likely that performance gains will be realized. &nbsp;CVC4 (with these parallelization options) is publicly available at http://cvc4.cs.nyu.edu.</p> <p>An open question that we did not explore is whether more fine-grained parallelism (i.e. at the theory level or lower) would significantly improve the performance of typical SMT queries.</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/17/2012<br>      Modified by: Clark&nbsp;Barrett</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Automated reasoning techniques are used as "engines" in many applications.  They are capable in some cases of automatically answering questions like "does this program have a specific bug?" or "is it possible to exploit this software maliciously?"  In many cases, however, the automated reasoning takes too long to be practical.  This project aimed to address this by exploring how best to use parallelism in automated reasoning.  There were two main projects.  The first focused on parallelizing reasoning about Boolean satisfiability (SAT).  SAT engines are used in many applications such as software modeling and circuit design and verification. We explored a technique known as Stalmarck's method which is less well-known than current best-practice techniques and is more amenable to parallelization.  We implemented a parallel Stalmarck solver and showed that it was possible to get near-linear speed-up on small examples.  While the overall performance was still far behind the best sequential techniques, we believe that our results are promising and suggest that more investiagion is warranted.  A Stalmarck solver could at the very least be used in combination with a standard SAT solver and this could lead to significant speed-ups in some cases.  The other project was to implement a parallel SMT solver.  SMT solvers can reason at a higher level than Boolean solvers.  They understand arithmetic and equations for example.  SMT solvers are also used in many important applications.  We used CVC4, a state-of-the-art SMT research platform being developed at NYU.  We used a "portfolio" approach meaning that several instances of the solver are run in parallel with different configurations and the first to solve the problem terminates all of the instances.  This is very course-grained parallelism but it seems to be the most effective approach so far.  Some sharing of information in the form of "learned lemmas" is possible between the different instances.  We found that the sharing of information was typically not helpful for SMT problems, but this could be because our sharing mechanism was fairly primitive.  However, the portfolio approach does work well on many problems because SMT (like SAT) is very sensitive to configuration options.  So, by running several different configurations in parallel, it is likely that performance gains will be realized.  CVC4 (with these parallelization options) is publicly available at http://cvc4.cs.nyu.edu.  An open question that we did not explore is whether more fine-grained parallelism (i.e. at the theory level or lower) would significantly improve the performance of typical SMT queries.          Last Modified: 12/17/2012       Submitted by: Clark Barrett]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
