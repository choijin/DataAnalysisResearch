<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSE: Collaborative: Extensible Languages for Sustainable Development of High Performance Software in Materials Science</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Daryl Hess</SignBlockName>
<PO_EMAI>dhess@nsf.gov</PO_EMAI>
<PO_PHON>7032924942</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This award is part of the Software Infrastructure for Sustained Innovation. The Office of Cyberinfrastructure, the Division of Computer and Network Systems, and the Division of Materials Research contribute funds to this award. &lt;br/&gt;&lt;br/&gt;Developing large computational codes such as those used to perform simulations in quantum  mechanics to calculate properties of materials, or to predict the  aerodynamics forces around airplanes, still typically require several human-years.  However the pace of research and industrial product development demands much more rapid software tool development to make progress and to remain competitive. This award contributes to developing the capability to rapidly create high performance large scale codes. &lt;br/&gt;&lt;br/&gt;The PIs will augment a computer programming language with a very high level language that is interactive in the sense that the developer will enter language commands and get instantaneous interpreted answers, instead of  processing the whole code.  This approach of creating an interactive extensible language framework will provide a way to help speed development of large scale computer software.  Efforts will be specifically targeted at software for materials science applications. This will enable progress in large scale computational research that aims to predict properties of materials starting from a knowledge of the constituent atoms and the way they are arranged in the material. &lt;br/&gt;&lt;br/&gt;This award contributes to the education of knowledgeable specialists capable of developing large and complex computational codes.  The PIs will design new graduate level courses outside of the current curriculum to increase the number of students who receive training in effective development of software for materials research and scientific computing in general. &lt;br/&gt;&lt;br/&gt;This award also supports the research team's efforts to broaden participation of underrepresented groups through the existing Alice in Wonderland Program, which aims to recruit members of underrepresented groups at the high school level, and to attract female high school students to science and engineering by  involving them in research over the summer before they make decisions  about colleges. They will also revive the Summer Undergraduate Interns program to recruit undergraduate students interested in high performance computing for summer internships.</AbstractNarration>
<MinAmdLetterDate>09/07/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/07/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1047961</AwardID>
<Investigator>
<FirstName>Yousef</FirstName>
<LastName>Saad</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yousef Saad</PI_FULL_NAME>
<EmailAddress>saad@umn.edu</EmailAddress>
<PI_PHON>6126247804</PI_PHON>
<NSF_ID>000303745</NSF_ID>
<StartDate>09/07/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Van Wyk</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eric Van Wyk</PI_FULL_NAME>
<EmailAddress>evw@umn.edu</EmailAddress>
<PI_PHON>6126250329</PI_PHON>
<NSF_ID>000389599</NSF_ID>
<StartDate>09/07/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Minnesota-Twin Cities</Name>
<CityName>Minneapolis</CityName>
<ZipCode>554552070</ZipCode>
<PhoneNumber>6126245599</PhoneNumber>
<StreetAddress>200 OAK ST SE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Minnesota</StateName>
<StateCode>MN</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MN05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>555917996</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF MINNESOTA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>117178941</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Minnesota-Twin Cities]]></Name>
<CityName>Minneapolis</CityName>
<StateCode>MN</StateCode>
<ZipCode>554552070</ZipCode>
<StreetAddress><![CDATA[200 OAK ST SE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Minnesota</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MN05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1253</Code>
<Text>OFFICE OF MULTIDISCIPLINARY AC</Text>
</ProgramElement>
<ProgramElement>
<Code>1712</Code>
<Text>DMR SHORT TERM SUPPORT</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>1253</Code>
<Text>OFFICE OF MULTIDISCIPLINARY AC</Text>
</ProgramReference>
<ProgramReference>
<Code>1712</Code>
<Text>DMR SHORT TERM SUPPORT</Text>
</ProgramReference>
<ProgramReference>
<Code>1765</Code>
<Text>CONDENSED MATTER &amp; MAT THEORY</Text>
</ProgramReference>
<ProgramReference>
<Code>7237</Code>
<Text>NANO NON-SOLIC SCI &amp; ENG AWD</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7569</Code>
<Text>CYBERINFRASTRUCTURE/SCIENCE</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~300000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A major obstacle to progress in large scale computational research in many areas of science today is the sluggish pace with which scientific software is developed; developing large codes such as those used to describe the electronic structure of materials or fluid dynamics, typically requires several man-years. Meanwhile, the current wave of multi-disciplinary efforts is creating an acute need to build effective large scale scientific software. This unprecedented demand for new scientific simulations on the one hand and the inadequacy of existing methodologies on the other, is leading to a significant software 'crisis.'<br /><br />These problems can, at least partially, be effectively addressed if developers had interactive development tools that can be extended and customized for their particular problem and application domain. Specifically, we have developed techniques that allow programmers to extend their programming language with new domain-specific language features. These features may add new domain-specific syntax to the language - thus raising the level of abstraction of the language to be closer to that of the problem domain. Other features are the addition of domain-specific semantic analysis to detect errors and enable optimizing program transformations.<br /><br />Our aim was to focus on the electronic structure problem in materials science as a case study owing to our experience of code development in this area, but our aim is to reach a general audience in computational science.<br /><br />Our goals in this project were to develop a proto-type interactive extensible language framework for scientific software development specifically aimed at rapid software development. Specifically, our aims for this project included developing the following two software artifacts:<br /><br />1. ELIDE, Extensible Language Interactive Development and Debugging Environment, this provides interactive and debugging tools for extensible languages, and<br /><br />2. PARSECi, a realization of PARSEC and the related code RSDFT (a MATLAB package implementing the core features of PARSEC) in an extensible language framework in which the domain knowledge represented in the existing PARSEC libraries can be codified as language constructs and features in an extended language.<br /><br />This effort also included the extension of the underlying tools that support the development of extensible programming languages and language extensions.<br /><br />The primary outcomes of this project are described below.<br /><br />1. The development of the modular well-definedness analysis for attribute grammars is an important result in the area of extensible languages. This allows users to build extensible language frameworks with strong guarantees about their correctness. Our aim is to allow a programmer, who need have no knowledge of language implementation techniques, to import rich language extensions into the compiler of the host language, say C. It is critically important that the extensions developed by different parties do not interfere or conflict with one another. The modular well-definedness and termination analyses ensure that this situation does not arise in that the resulting compiler will terminate normally.<br /><br />Language extension developers can run these modular analyses on their extensions to determine if they contain features that may conflict with other, yet to be determined, language extensions. These analyses effectively restrict language extensions to a "safe" subset of what is possible.<br /><br />2. We have created "ableC", an extensible specification of the ISO C11 standard for the C programming language.<br /><br />3. We have created a number of extensions for ableC that target the domain of high-performance computing. We have built extensions that implement some of the main features of Halide, Single Assignment C, and MATLAB. From these we generate quite effic...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A major obstacle to progress in large scale computational research in many areas of science today is the sluggish pace with which scientific software is developed; developing large codes such as those used to describe the electronic structure of materials or fluid dynamics, typically requires several man-years. Meanwhile, the current wave of multi-disciplinary efforts is creating an acute need to build effective large scale scientific software. This unprecedented demand for new scientific simulations on the one hand and the inadequacy of existing methodologies on the other, is leading to a significant software 'crisis.'  These problems can, at least partially, be effectively addressed if developers had interactive development tools that can be extended and customized for their particular problem and application domain. Specifically, we have developed techniques that allow programmers to extend their programming language with new domain-specific language features. These features may add new domain-specific syntax to the language - thus raising the level of abstraction of the language to be closer to that of the problem domain. Other features are the addition of domain-specific semantic analysis to detect errors and enable optimizing program transformations.  Our aim was to focus on the electronic structure problem in materials science as a case study owing to our experience of code development in this area, but our aim is to reach a general audience in computational science.  Our goals in this project were to develop a proto-type interactive extensible language framework for scientific software development specifically aimed at rapid software development. Specifically, our aims for this project included developing the following two software artifacts:  1. ELIDE, Extensible Language Interactive Development and Debugging Environment, this provides interactive and debugging tools for extensible languages, and  2. PARSECi, a realization of PARSEC and the related code RSDFT (a MATLAB package implementing the core features of PARSEC) in an extensible language framework in which the domain knowledge represented in the existing PARSEC libraries can be codified as language constructs and features in an extended language.  This effort also included the extension of the underlying tools that support the development of extensible programming languages and language extensions.  The primary outcomes of this project are described below.  1. The development of the modular well-definedness analysis for attribute grammars is an important result in the area of extensible languages. This allows users to build extensible language frameworks with strong guarantees about their correctness. Our aim is to allow a programmer, who need have no knowledge of language implementation techniques, to import rich language extensions into the compiler of the host language, say C. It is critically important that the extensions developed by different parties do not interfere or conflict with one another. The modular well-definedness and termination analyses ensure that this situation does not arise in that the resulting compiler will terminate normally.  Language extension developers can run these modular analyses on their extensions to determine if they contain features that may conflict with other, yet to be determined, language extensions. These analyses effectively restrict language extensions to a "safe" subset of what is possible.  2. We have created "ableC", an extensible specification of the ISO C11 standard for the C programming language.  3. We have created a number of extensions for ableC that target the domain of high-performance computing. We have built extensions that implement some of the main features of Halide, Single Assignment C, and MATLAB. From these we generate quite efficient C programs. We are also developing an extension that realizes Cilk, an extension to C for task-based parallel programming, as an ableC extension.  4. We have made sign...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
