<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small:Collaborative Research: Languages and Tools for Multilingual Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>299974.00</AwardTotalIntnAmount>
<AwardAmount>299974</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software developers are increasingly building applications in multiple languages both to reuse existing software libraries and to leverage the languages best suited to their problems. In fact, multilingual programs are already prevalent, as essentially all programs written in Java use code written in C as well. But developing multilingual programs poses more challenges and difficulties than developing single language programs. Current programming interfaces between multiple languages tend to be tedious and unsafe; and most programming tools only support a single language. As a consequence, real-world multilingual programs are full of cross-language bugs.&lt;br/&gt;&lt;br/&gt;This research seeks to substantially improve the correctness and development of multilingual programs. The investigators build on their prior multilingual language design (the Jeannie Java/C language), compilers (the xtc Jeannie compiler), and debuggers (the Blink Java/C debugger). Here, the investigators are designing and implementing novel approaches for validating the safety of existing multilingual interfaces and for creating safe multilingual programs. (1) The investigators are developing a framework for concisely capturing safety rules for multilingual interfaces and then automatically synthesizing the corresponding dynamic checker. (2) The investigators are exploring novel program analysis to refactor programs automatically that use unsafe multilingual interfaces into programs that use safe multilingual interfaces. If successful, the research impact will be improved correctness, efficiency, and reliability of multilingual programs.</AbstractNarration>
<MinAmdLetterDate>08/08/2010</MinAmdLetterDate>
<MaxAmdLetterDate>05/15/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017849</AwardID>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Grimm</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert Grimm</PI_FULL_NAME>
<EmailAddress>rgrimm@cs.nyu.edu</EmailAddress>
<PI_PHON>2129983143</PI_PHON>
<NSF_ID>000104807</NSF_ID>
<StartDate>08/08/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>New York University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100121019</ZipCode>
<PhoneNumber>2129982121</PhoneNumber>
<StreetAddress>70 WASHINGTON SQUARE S</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041968306</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NEW YORK UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041968306</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[New York University]]></Name>
<CityName>NEW YORK</CityName>
<StateCode>NY</StateCode>
<ZipCode>100121019</ZipCode>
<StreetAddress><![CDATA[70 WASHINGTON SQUARE S]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~96741</FUND_OBLG>
<FUND_OBLG>2011~203233</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A first significant step when building programming tools (such as bug finders to identify software defects and program refactorings to improve source code) is to parse the source code (i.e., convert from human-readable format into an in-memory representation amenable to computer&nbsp;analysis and modification). This first step is rather complex for C code, which is the language of choice for critical software projects such as the Linux operating system, the Apache web server, and the Sqlite database. The problem is that C source code really mixes two different languages: the C language proper, which has well-structured constructs, and the C preprocessor. The latter&rsquo;s instructions can appear anywhere in source code and enable the combination of files (so-called file includes), the replacement of source code (so-called macros), and the selection of one out of several code fragments (so-called static conditionals). As a direct result, familiar techniques for parsing programming language source files do not apply to C.</p> <div>Under this award, we developed the first complete and performant set of algorithms and corresponding tool that solve this 40 year old problem and thus set the stage for better C tools. Our approach has two stages. First, a configuration-preserving preprocessor resolves includes and macros yet leaves static conditionals intact, thus preserving a program&rsquo;s source code for all configurations. To ensure completeness, we analyzed all interactions between preprocessor features and identified techniques for correctly handling them. Second, a configuration-preserving parser generates an extended in-memory representation that includes static conditionals. The parser starts copies of itself when encountering static conditionals and recombines with the copies after the conditionals. To ensure performance, we developed a simple base algorithm, which utilizes familiar techniques where possible, and then introduced four key optimizations that make it fast. We demonstrated the effectiveness of our algorithms and tool on the x86 Linux kernel. A key finding is that Linux source code makes extensive usage of all preprocessor features and also triggers all their interactions as identified by us bar one. In other words, our work lays the foundation for better C tools and, hopefully, less buggy and better structured applications.</div> <p>&nbsp;</p><br> <p>            Last Modified: 10/19/2014<br>      Modified by: Robert&nbsp;Grimm</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A first significant step when building programming tools (such as bug finders to identify software defects and program refactorings to improve source code) is to parse the source code (i.e., convert from human-readable format into an in-memory representation amenable to computer analysis and modification). This first step is rather complex for C code, which is the language of choice for critical software projects such as the Linux operating system, the Apache web server, and the Sqlite database. The problem is that C source code really mixes two different languages: the C language proper, which has well-structured constructs, and the C preprocessor. The latterÆs instructions can appear anywhere in source code and enable the combination of files (so-called file includes), the replacement of source code (so-called macros), and the selection of one out of several code fragments (so-called static conditionals). As a direct result, familiar techniques for parsing programming language source files do not apply to C. Under this award, we developed the first complete and performant set of algorithms and corresponding tool that solve this 40 year old problem and thus set the stage for better C tools. Our approach has two stages. First, a configuration-preserving preprocessor resolves includes and macros yet leaves static conditionals intact, thus preserving a programÆs source code for all configurations. To ensure completeness, we analyzed all interactions between preprocessor features and identified techniques for correctly handling them. Second, a configuration-preserving parser generates an extended in-memory representation that includes static conditionals. The parser starts copies of itself when encountering static conditionals and recombines with the copies after the conditionals. To ensure performance, we developed a simple base algorithm, which utilizes familiar techniques where possible, and then introduced four key optimizations that make it fast. We demonstrated the effectiveness of our algorithms and tool on the x86 Linux kernel. A key finding is that Linux source code makes extensive usage of all preprocessor features and also triggers all their interactions as identified by us bar one. In other words, our work lays the foundation for better C tools and, hopefully, less buggy and better structured applications.          Last Modified: 10/19/2014       Submitted by: Robert Grimm]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
