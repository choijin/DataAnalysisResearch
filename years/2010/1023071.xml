<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CCLI Type 2: Incorporating Software Testing into Multiple Computer Science and Software Engineering Undergraduate Courses</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>249957.00</AwardTotalIntnAmount>
<AwardAmount>249957</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Michael Erlinger</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Software Engineering (34)&lt;br/&gt;&lt;br/&gt;This project is focusing on the teaching of software testing principles and techniques at appropriate stages of the undergraduate Computer Science and Software Engineering education. Basic skills are introduced in beginner programming courses, and more advanced topics are covered at the high level courses. It not only encourages students to invest more time in testing and consequently produce programs with fewer bugs, but also to establish a correct concept and realize that testing is actually an integral part of the programming process rather than some afterthought, conducted in an ad hoc manner. An important innovation of this project is the development of modularized course material that is not based on specific testing techniques or tools, but rather according to the various aspects of software testing. There is a many-to-many relationship between courses and modules such that educational material can be selectively applied to any appropriate course in a minimum intrusive and non-restrictive way. This allows instructors to use their own discretion to determine which parts of each module are appropriate for their students. This project is providing appropriate training in software testing to students, not only to those who choose software testing as a profession, but also to those who might work in any aspect of software development. It is helping universities produce a well educated and well trained workforce that is critical to the success of the software industry.</AbstractNarration>
<MinAmdLetterDate>09/02/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/02/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1023071</AwardID>
<Investigator>
<FirstName>Gopal</FirstName>
<LastName>Gupta</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gopal Gupta</PI_FULL_NAME>
<EmailAddress>gupta@utdallas.edu</EmailAddress>
<PI_PHON>4698781991</PI_PHON>
<NSF_ID>000249848</NSF_ID>
<StartDate>09/02/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Latifur</FirstName>
<LastName>Khan</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Latifur R Khan</PI_FULL_NAME>
<EmailAddress>lkhan@utdallas.edu</EmailAddress>
<PI_PHON>9728834137</PI_PHON>
<NSF_ID>000489154</NSF_ID>
<StartDate>09/02/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sook</FirstName>
<LastName>Kim</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sook Kim</PI_FULL_NAME>
<EmailAddress>sookkim@utdallas.edu</EmailAddress>
<PI_PHON>9728832993</PI_PHON>
<NSF_ID>000297958</NSF_ID>
<StartDate>09/02/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Weichen</FirstName>
<LastName>Wong</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Weichen E Wong</PI_FULL_NAME>
<EmailAddress>ewong@utdallas.edu</EmailAddress>
<PI_PHON>9728836619</PI_PHON>
<NSF_ID>000328588</NSF_ID>
<StartDate>09/02/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Dallas</Name>
<CityName>Richardson</CityName>
<ZipCode>750803021</ZipCode>
<PhoneNumber>9728832313</PhoneNumber>
<StreetAddress>800 W. Campbell Rd., AD15</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>32</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX32</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>800188161</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT DALLAS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Dallas]]></Name>
<CityName>Richardson</CityName>
<StateCode>TX</StateCode>
<ZipCode>750803021</ZipCode>
<StreetAddress><![CDATA[800 W. Campbell Rd., AD15]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>32</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX32</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>7492</Code>
<Text>CCLI-Type 2 (Expansion)</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0410</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~249957</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software has become fundamental to our everyday lives. Regradless of age, gender, occupation, nationality, etc., each of us depends on software in some way. Yet software is far from defect-free, and very large sums of money are spend each year merely to fix and maintain defective software.According to a study by NIST in 2012, software bugs cost the U.S. economy an estomated $59.5 billion annually (about 0.6% GDP). The same study also found that more than one third of these costs could be eliminated by an improved testing infrastructure. Furthermore, these estimates have not taken into account potential deaths or catastrophic financial loss associated with failure of mission-critical sofware. These figures would be much higher if the study were conducted today.</p> <p>Altough software testing continues to be the primary approach used to ensure development of high quality software, this subject rarely appears in undergraduate curricula.&nbsp; Thus, it becomes the primary motivation to have a TUES project such as this one to emphasize the importance of teaching software testing in multiple computer science and software engineering undergraduate courses, with basic skills introduced in beginning programming courses and more advanced tioics covered in higher-level courses. Offering a single elective course is not a complete solution to the issue of software testing; these techniques require repeated practice before they become second nature. It is critical that testing sould be an integral part of student practices even for beginning programming assignments.</p> <p>Our objectives include the following:</p> <ol> <li>producing undergraduates with increased software testing competence to help them improve software quality at a lower cost,</li> <li>develping appropriate instructional materials that can be used in many courses,</li> <li>introducing testing principles and techniques into multiple undergraduate CS and SE courses,</li> <li>identifying the deficiencies of current testing techniques and tools, and</li> <li>exposing undergraduates to software testing with the intent of promoting further research in their graduate studies.</li> </ol> <p>The most significant outcome of our project is the creation of educational modules (including professionally edited videos and PowerPoint slide shows) for <em>software testing </em>that do not carter to one particular form of testing, a tool or a set of tools, or one particular course. Rather, our modules focus on the various aspects of software testing and can be applied across multitude of courses.</p> <p>We emphasize a <em><strong>many-to-many </strong></em>relationship between modeuls and courses, which means that a single module may be used in many courses, or one course may draw from multiple modules. In short, software testing will be taught in CS/SE courses spanning multiple years and not just in one or two upper-level courses.</p> <p>We also emphasize that not all topics in a module must be covered in every course that the module is employed. Instructors can use their own discretion to determine which of these topics are appropaite for their students. In this way, our modules are<em><strong> minimally intrusive </strong></em>and <em><strong>non-restrictive </strong></em>and are to be used in tandem with the existing course as opposed to detracting from it.</p> <p>Consdering that our budget is reduced by more than 50%, this project, altough listed as Type II, is closer to Type I, in wich the instructional practice across multiple institutions is not required. Nevertheless, we made our best effort to involve instructors from several institutions. In addition to the PI and co-PIs, there are 15 faculty members in computer science from UTD, and five members from four other institutions. These institutions, including a community college, an HBCU (Historically Black Colleges and Unversities), and a university with a small computer...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software has become fundamental to our everyday lives. Regradless of age, gender, occupation, nationality, etc., each of us depends on software in some way. Yet software is far from defect-free, and very large sums of money are spend each year merely to fix and maintain defective software.According to a study by NIST in 2012, software bugs cost the U.S. economy an estomated $59.5 billion annually (about 0.6% GDP). The same study also found that more than one third of these costs could be eliminated by an improved testing infrastructure. Furthermore, these estimates have not taken into account potential deaths or catastrophic financial loss associated with failure of mission-critical sofware. These figures would be much higher if the study were conducted today.  Altough software testing continues to be the primary approach used to ensure development of high quality software, this subject rarely appears in undergraduate curricula.  Thus, it becomes the primary motivation to have a TUES project such as this one to emphasize the importance of teaching software testing in multiple computer science and software engineering undergraduate courses, with basic skills introduced in beginning programming courses and more advanced tioics covered in higher-level courses. Offering a single elective course is not a complete solution to the issue of software testing; these techniques require repeated practice before they become second nature. It is critical that testing sould be an integral part of student practices even for beginning programming assignments.  Our objectives include the following:  producing undergraduates with increased software testing competence to help them improve software quality at a lower cost, develping appropriate instructional materials that can be used in many courses, introducing testing principles and techniques into multiple undergraduate CS and SE courses, identifying the deficiencies of current testing techniques and tools, and exposing undergraduates to software testing with the intent of promoting further research in their graduate studies.   The most significant outcome of our project is the creation of educational modules (including professionally edited videos and PowerPoint slide shows) for software testing that do not carter to one particular form of testing, a tool or a set of tools, or one particular course. Rather, our modules focus on the various aspects of software testing and can be applied across multitude of courses.  We emphasize a many-to-many relationship between modeuls and courses, which means that a single module may be used in many courses, or one course may draw from multiple modules. In short, software testing will be taught in CS/SE courses spanning multiple years and not just in one or two upper-level courses.  We also emphasize that not all topics in a module must be covered in every course that the module is employed. Instructors can use their own discretion to determine which of these topics are appropaite for their students. In this way, our modules are minimally intrusive and non-restrictive and are to be used in tandem with the existing course as opposed to detracting from it.  Consdering that our budget is reduced by more than 50%, this project, altough listed as Type II, is closer to Type I, in wich the instructional practice across multiple institutions is not required. Nevertheless, we made our best effort to involve instructors from several institutions. In addition to the PI and co-PIs, there are 15 faculty members in computer science from UTD, and five members from four other institutions. These institutions, including a community college, an HBCU (Historically Black Colleges and Unversities), and a university with a small computer science department with limited resources, have used our materials to teach software testing in their classes.  Based on quantitative data analyses using exam scores of software testing related questions, qualitative written comments, and resp...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
