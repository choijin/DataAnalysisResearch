<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Small: Collaborative Research: High Performance Exact Linear Algebra Kernels</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>57702.00</AwardTotalIntnAmount>
<AwardAmount>57702</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Balasubramanian Kalyanasundaram</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This project will improve the state of the art of the implementation and optimization of algorithms for exact linear algebra computation.  With exact computation, solving systems of linear equations is advanced from limited accuracy to exact solutions.  This greatly increases the scope of accessible applications and allows matrix invariants such as rank, determinant, characteristic and minimal polynomial, and Smith and Frobenius normal forms to be computed.&lt;br/&gt;&lt;br/&gt;We will combine a newly developed theoretical basis for block blackbox methods in linear algebra with high performance implementation, in hardware and software, of the computational kernels from which these implementations are constructed. The resulting implementations will be made publicly available in the framework of the LinBox software library. A system for automatically tuning the underlying computer algebra kernels will be developed and distributed as part of the LinBox library. The autotuning framework will benefit other computer algebra systems as well. The resulting advances for computation in finite domains, such as modular numbers and finite algebraic field extensions, will benefit many areas including cryptography and coding theory.&lt;br/&gt;&lt;br/&gt;The project has many practical impacts as follows:&lt;br/&gt;&lt;br/&gt;Experimental mathematics will be enhanced. In experimental mathematics, symbolic computation provides for testing of conjectures. And, perhaps more importantly, data from symbolic computations can guide the formulation of  conjectures that are then candidates for formal proof. By permitting larger exact linear algebra computations, this project will increase the usefulness of such computation in mathematics.&lt;br/&gt;&lt;br/&gt;The broadest, and perhaps most significant, outcome of this project is an ability to solve many problems which currently have no solution method at all. This project will make it possible to efficiently solve linear systems where  numerical methods fail due to ill-condition of the problem instance, yet the exact result could it be obtained is valid and meaningful despite the approximate nature of the data.</AbstractNarration>
<MinAmdLetterDate>08/04/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/04/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1019966</AwardID>
<Investigator>
<FirstName>George</FirstName>
<LastName>Yuhasz</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>George Yuhasz</PI_FULL_NAME>
<EmailAddress>gyuhasz@morehouse.edu</EmailAddress>
<PI_PHON>4046812800</PI_PHON>
<NSF_ID>000555377</NSF_ID>
<StartDate>08/04/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Morehouse College</Name>
<CityName>Atlanta</CityName>
<ZipCode>303143773</ZipCode>
<PhoneNumber>4706390633</PhoneNumber>
<StreetAddress>830 Westview Drive S W</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>075861773</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MOREHOUSE COLLEGE (INC.)</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>075861773</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Morehouse College]]></Name>
<CityName>Atlanta</CityName>
<StateCode>GA</StateCode>
<ZipCode>303143773</ZipCode>
<StreetAddress><![CDATA[830 Westview Drive S W]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7933</Code>
<Text>NUM, SYMBOL, &amp; ALGEBRA COMPUT</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~57702</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 7"> <div class="layoutArea"> <div class="column"> <p><!--StartFragment-->The Matrix Berlekamp/Massey algorithm as described by the PI in his thesis and journal publication has been integrated into the LinBox library. The implementation has been tested for accuracy in computation and is available to be used in methods based on the block Wiedemann algorithm. One such method, a non-singular Block Wiedemann solver has been written and is currently being tested for performance and robustness. Application to matrix rank computation is in progress. Preliminary results are encouraging but need to be tested and improved.</p> <p>After the successful testing of the non-singular solver, we can then turn attention on various related linear algebra computations and speed improvements to the algorithms. The first such computation is rank. By using the Matrix Berlekamp/Massey algorithm to compute a matrix generator with random bilinear projections, one can with high probability compute the rank of a matrix. After the generator computation, one needs to compute the degree and trailing degree of the determinant of the generator. As a result of the PI's prior work the degree is known, however the trailing degree is not. Options for computation of the trailing degree include a new method based on LU decomposition or a standard interpolation method.</p> <p>In addition to rank, computations such as smith normal form, determinant, singular solving and characteristic/minimum polynomial are possible using block Wiedemann methods.</p> <p>The Matrix Berlekamp/Massey implementation and non-singular block Wiedemann solver can be improved by tuning. Currently we do not take full advantage of all the  fast arithmetics that are available and possible. One of the main triumphs of the Matrix Berlekamp/Massey algorithm is the encoding of matrix algebra into polynomial algebra. It should be possible and advantageous to apply known methods of fast matrix arithmetic and fast polynomial arithmetic to enhance the algorithms. Over specific fields and blocking dimensions, the field and vector arithmetic can be tuned specifically for the algorithm. Finally, by imposing some restrictions, it should be possible to benefit from sub-quadratic methods based on the half-gcd algorithm.</p> </div> </div> </div><br> <p>            Last Modified: 10/30/2013<br>      Modified by: George&nbsp;Yuhasz</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    The Matrix Berlekamp/Massey algorithm as described by the PI in his thesis and journal publication has been integrated into the LinBox library. The implementation has been tested for accuracy in computation and is available to be used in methods based on the block Wiedemann algorithm. One such method, a non-singular Block Wiedemann solver has been written and is currently being tested for performance and robustness. Application to matrix rank computation is in progress. Preliminary results are encouraging but need to be tested and improved.  After the successful testing of the non-singular solver, we can then turn attention on various related linear algebra computations and speed improvements to the algorithms. The first such computation is rank. By using the Matrix Berlekamp/Massey algorithm to compute a matrix generator with random bilinear projections, one can with high probability compute the rank of a matrix. After the generator computation, one needs to compute the degree and trailing degree of the determinant of the generator. As a result of the PI's prior work the degree is known, however the trailing degree is not. Options for computation of the trailing degree include a new method based on LU decomposition or a standard interpolation method.  In addition to rank, computations such as smith normal form, determinant, singular solving and characteristic/minimum polynomial are possible using block Wiedemann methods.  The Matrix Berlekamp/Massey implementation and non-singular block Wiedemann solver can be improved by tuning. Currently we do not take full advantage of all the  fast arithmetics that are available and possible. One of the main triumphs of the Matrix Berlekamp/Massey algorithm is the encoding of matrix algebra into polynomial algebra. It should be possible and advantageous to apply known methods of fast matrix arithmetic and fast polynomial arithmetic to enhance the algorithms. Over specific fields and blocking dimensions, the field and vector arithmetic can be tuned specifically for the algorithm. Finally, by imposing some restrictions, it should be possible to benefit from sub-quadratic methods based on the half-gcd algorithm.          Last Modified: 10/30/2013       Submitted by: George Yuhasz]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
