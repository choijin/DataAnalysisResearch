<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Balancing Expressiveness and Modular Reasoning for Aspect-oriented Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>257729.00</AwardTotalIntnAmount>
<AwardAmount>273729</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software systems are poised to keep growing in complexity and permeate deeper into the critical infrastructures of society. The complexity of these systems is exceeding the limits of existing modularization mechanisms and reliability requirements are becoming stringent. Development of new separation of concerns (SoC) techniques is thus vital to make software more reliable and maintainable. Implicit invocation (II) and aspect-oriented (AO) programming languages provide related but distinct mechanisms for separation of concerns. The proposed work encompasses fundamental and practical efforts to improve modularization and reasoning mechanisms for II and AO languages, which is a long standing challenge for both kinds of languages. Addressing these challenges has the potential to significantly improve the quality of software by easing the adoption of new separation of concerns techniques.&lt;br/&gt;&lt;br/&gt;The project will proceed using the experimental language, Ptolemy, which blends both II and AO ideas. Ptolemy has explicitly announced events, which are defined in interfaces called "event types". Event types help separate concerns and decouple advice from the code it advises. Event type declarations also offer a place to specify advice. The explicit announcement of events allows the possibility of careful reasoning about correctness of Ptolemy programs, since it is possible to reason about parts of the program where there are no events in a conventional manner. The project aims to investigate reasoning by developing a formal specification language and verification technique. The approach is based on the idea of greybox ("model program'') specifications, as found in JML and the refinement calculus. There are known techniques for reasoning about uses of abstractions that have model program specifications, and the project will apply these to Ptolemy. The intellectual merit is in the treatment of expressions in Ptolemy that announce events and those that cause an advice to proceed. A straightforward adaptation of existing reasoning techniques to these cases appears to require a whole program analysis, which is generally not desirable for modular and scalable verification. The project also aims to investigate the utility and effectiveness of Ptolemy and its specification system. A software evolution analysis will be conducted to study the ability of competing aspect-oriented, implicit invocation, and Ptolemy implementations of open source projects to withstand change. Showing Ptolemy's benefits over II and AO languages will help software designers in deciding on advanced mechanisms for separation of concerns.</AbstractNarration>
<MinAmdLetterDate>08/04/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/29/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017334</AwardID>
<Investigator>
<FirstName>Hridesh</FirstName>
<LastName>Rajan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Hridesh Rajan</PI_FULL_NAME>
<EmailAddress>hridesh@iastate.edu</EmailAddress>
<PI_PHON>5152946168</PI_PHON>
<NSF_ID>000241383</NSF_ID>
<StartDate>08/04/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005309844</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005309844</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Iowa State University]]></Name>
<CityName>AMES</CityName>
<StateCode>IA</StateCode>
<ZipCode>500112207</ZipCode>
<StreetAddress><![CDATA[1138 Pearson]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>2878</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~83515</FUND_OBLG>
<FUND_OBLG>2011~190214</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software systems are essential elements of modern society -- they improve upon many natural&nbsp;and artificial processes that ultimately benefits the society and the individual. The production&nbsp;of software systems has come a long way in the last six decades. With improved tools and&nbsp;techniques increasing useful software systems and software-enabled devices are being&nbsp;constructed and deployed.&nbsp;</p> <p>Software systems of 21st century are very complex because their goals mirror complexity&nbsp;that is inherent to the natural or artificial process that the software is modeling.&nbsp;In software construction, a major technique for managing this complexity is "separation of&nbsp;concerns". Basic idea is to provide software developers the ability to understand variousfacets of the software in isolation. This allows developers to maintain intellectual controlover increasing complexity. During the last five decades invention and refinement of&nbsp;separation of concerns techniques have allowed productivity of software developers to keep&nbsp;pace with increasing complexity.&nbsp;</p> <p>Software systems are poised to keep growing in complexity and permeate deeper into the&nbsp;critical infrastructures of society. &nbsp;The complexity of these systems is once again exceeding&nbsp;the limits of existing modularization mechanisms and reliability requirements are becoming&nbsp;stringent. Development of new separation of concerns techniques is thus vital to make software more reliable and maintainable. Implicit invocation (II) and aspect-oriented (AO)&nbsp;programming languages provide related but distinct mechanisms for separation of concerns.&nbsp;This research encompassed fundamental and practical efforts to improve modularization and&nbsp;reasoning mechanisms for II and AO languages, which was a long standing challenge for both&nbsp;kinds of languages. Addressing these challenges has the potential to significantly improve the&nbsp;quality of software by easing the adoption of new separation of concerns techniques.</p> <p><br />The project proceeded by studying a language, Ptolemy, which blends both II and AO ideas.Ptolemy has explicitly announced events, which are defined in interfaces called "event types". Event types help separate concerns and decouple advice from the code it advises. Event typedeclarations also offer a place to specify advice. The explicit announcement of events allows&nbsp;the possibility of careful reasoning about correctness of Ptolemy programs, since it is possible&nbsp;to reason about parts of the program where there are no events in a conventional manner.The project investigated reasoning by developing a formal specification language and&nbsp;verification technique. The approach is based on the idea of greybox ("model program'')specifications, as found in the JML language and the refinement calculus. There are known&nbsp;techniques for reasoning about uses of abstractions that have model program specifications,and the project applied these to Ptolemy to produce the novel notion of translucid contracts.&nbsp;The intellectual merit was in the treatment of expressions in Ptolemy that announce events and&nbsp;those that cause an advice to proceed. A straightforward adaptation of existing reasoning&nbsp;techniques to these cases required a whole program analysis, which is generally not&nbsp;desirable for modular and scalable verification.</p> <p>&nbsp;</p> <p>The project also investigated the utility and&nbsp;effectiveness of Ptolemy and its specification system. A software evolution analysis was&nbsp;conducted to study the ability of competing aspect-oriented, implicit invocation, and Ptolemy&nbsp;implementations of open source projects to withstand change. Showing Ptolemy's benefits over&nbsp;II and AO languages will help software designers in deciding on advanced mechanisms for&nbsp;separation of concerns.</p> <p>&nbsp;</p><br> <p> ...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software systems are essential elements of modern society -- they improve upon many natural and artificial processes that ultimately benefits the society and the individual. The production of software systems has come a long way in the last six decades. With improved tools and techniques increasing useful software systems and software-enabled devices are being constructed and deployed.   Software systems of 21st century are very complex because their goals mirror complexity that is inherent to the natural or artificial process that the software is modeling. In software construction, a major technique for managing this complexity is "separation of concerns". Basic idea is to provide software developers the ability to understand variousfacets of the software in isolation. This allows developers to maintain intellectual controlover increasing complexity. During the last five decades invention and refinement of separation of concerns techniques have allowed productivity of software developers to keep pace with increasing complexity.   Software systems are poised to keep growing in complexity and permeate deeper into the critical infrastructures of society.  The complexity of these systems is once again exceeding the limits of existing modularization mechanisms and reliability requirements are becoming stringent. Development of new separation of concerns techniques is thus vital to make software more reliable and maintainable. Implicit invocation (II) and aspect-oriented (AO) programming languages provide related but distinct mechanisms for separation of concerns. This research encompassed fundamental and practical efforts to improve modularization and reasoning mechanisms for II and AO languages, which was a long standing challenge for both kinds of languages. Addressing these challenges has the potential to significantly improve the quality of software by easing the adoption of new separation of concerns techniques.   The project proceeded by studying a language, Ptolemy, which blends both II and AO ideas.Ptolemy has explicitly announced events, which are defined in interfaces called "event types". Event types help separate concerns and decouple advice from the code it advises. Event typedeclarations also offer a place to specify advice. The explicit announcement of events allows the possibility of careful reasoning about correctness of Ptolemy programs, since it is possible to reason about parts of the program where there are no events in a conventional manner.The project investigated reasoning by developing a formal specification language and verification technique. The approach is based on the idea of greybox ("model program'')specifications, as found in the JML language and the refinement calculus. There are known techniques for reasoning about uses of abstractions that have model program specifications,and the project applied these to Ptolemy to produce the novel notion of translucid contracts. The intellectual merit was in the treatment of expressions in Ptolemy that announce events and those that cause an advice to proceed. A straightforward adaptation of existing reasoning techniques to these cases required a whole program analysis, which is generally not desirable for modular and scalable verification.     The project also investigated the utility and effectiveness of Ptolemy and its specification system. A software evolution analysis was conducted to study the ability of competing aspect-oriented, implicit invocation, and Ptolemy implementations of open source projects to withstand change. Showing Ptolemy's benefits over II and AO languages will help software designers in deciding on advanced mechanisms for separation of concerns.          Last Modified: 09/19/2013       Submitted by: Hridesh Rajan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
