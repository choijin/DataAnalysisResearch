<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Collaborative Research:  Symbiosis in Byzantine Fault Tolerance and Intrusion Detection</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Two principal components for providing protection in large-scale distributed systems are Byzantine fault-tolerance (BFT) and intrusion detection systems (IDS). BFT is used to implement strictly consistent replication of state in the face of arbitrary failures, including those introduced by malware and Internet pathogens.  Intrusion detection relates to a broad set of services that detect events that could indicate the presence of an ongoing attack. IDSs are far from perfect -- they can both miss attacks or misinterpret events as being malicious.  In addition, IDSs themselves are vulnerable to attack.  These two components approach different parts of system security.  Each, however, has the potential to improve the other, which is the theme of this project.  The integration of these two efforts, at both the fundamental and system levels, has proven elusive. Fault-tolerant distributed algorithms have been designed to use failure detectors for some time, but only as an abstraction. Intrusion detection has been, for the most part, a service that gives some general improvement in system security.  Attempting to marry these two approaches could be a large step towards making BFT a truly practical approach in multisite systems, and gives a novel way to integrate multiple IDSs to improve the security in a multisite system with nonuniform and varying trust. &lt;br/&gt;&lt;br/&gt;Some examples of such benefit are (1) Any evidence gathered by BFT about suspicious behavior can be useful for an IDS, since it could indicate that the system has been compromised. (2) Information from an IDS can be used by BFT to influence its behavior towards the servers of the replicated service. This could, for example, allow BFT to stop using a site even though the service has not (yet) been affected, or to assume a more benign set of failures for a site that appears to be well managed. (3) The way that BFT reacts to suspicious behavior is a complex policy that could, at least in part, be moved to IDS. Doing so would allow the policy to be tuned. (4) A further detection method  is to compare the internal suspicions of BFT with the external suspicions of the IDS. (5) BFT can be used to detect and cope with attacks on an IDS. (6) IDS can confirm that parties in a BFT set are behaving according to the BFT protocol which if so can improve the performance of a BFT system.  This research explores this potential of a merged system by developing a version of BFT for wide-area networks that is designed with several IDSs as part of the architecture.  The IDS will serve as a suspicion detector that allows  BFT to define sets of sites that trust each other, and can thus use a lower latency protocol among them.  The IDSs will use BFT to agree upon  detection states to make more useful detections. Information collected by  BFT  will be used by the IDS to detect malicious behavior. And, BFT and IDS will, where possible, check each other to increase the detection power of the system. A prototype of the system will be implement and a simple synthetic application to measure performance and sensitivity to a set of simulated attacks will be built.</AbstractNarration>
<MinAmdLetterDate>08/18/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/18/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018871</AwardID>
<Investigator>
<FirstName>Karl</FirstName>
<LastName>Levitt</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Karl N Levitt</PI_FULL_NAME>
<EmailAddress>levitt@cs.ucdavis.edu</EmailAddress>
<PI_PHON>5307527004</PI_PHON>
<NSF_ID>000172876</NSF_ID>
<StartDate>08/18/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sean</FirstName>
<LastName>Peisert</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sean P Peisert</PI_FULL_NAME>
<EmailAddress>speisert@ucdavis.edu</EmailAddress>
<PI_PHON>5307468717</PI_PHON>
<NSF_ID>000528949</NSF_ID>
<StartDate>08/18/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Davis</Name>
<CityName>Davis</CityName>
<ZipCode>956186134</ZipCode>
<PhoneNumber>5307547700</PhoneNumber>
<StreetAddress>OR/Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1850 Research Park Dr., Ste 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>047120084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, DAVIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Davis]]></Name>
<CityName>Davis</CityName>
<StateCode>CA</StateCode>
<ZipCode>956186134</ZipCode>
<StreetAddress><![CDATA[OR/Sponsored Programs]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Byzantine fault folerance (BFT) is a technique for replicating services and maintaining communication and consistency between those replicated services in order to mitigate the impact of arbitrary computing and network failures, including malicious failures introduced by malware and Internet pathogens. &nbsp;Historically, BFT has added significant overhead in the need for more processing power and significant computational delay, as a result of the number of replicas required, communication between replicas, and processing overhead (e.g., as a result of cryptographic operations) on each replica.</p> <p>One of our key hypotheses in this project is that intrusion detection can be used to reduce the replication requirements and latency penalties for using BFT by helping to &nbsp;monitor and protect the replicas and the Byzantine agreement protocol itself. &nbsp;Specifically, we hypothesized that both anomaly detection (statistical deviations from normal) as well as specification-based intrusion detection (defining how the protocol _should_ operate and looking for violations) are likely to be of value, whereas misuse detection (defining bad things that can happen) is less likely to be successful.</p> <p>We have created several new protocols demonstrating that intrusion detection and Byzantine fault tolerance can be symbiotic -- intrusion detection and related techniques can indeed help reduce overhead for BFT, making BFT more practical. &nbsp;With regard to our hypothesis, notably, the ByzID protocol that that we developed and published has directly validated this hypothesis. &nbsp;ByzID is a framework for constructing Byzantine failure detectors based on an intrusion detection system (IDS). Based on such a failure detector, we designed and built a practical Byzantine fault-tolerant protocol, which has costs comparable to protocols that tolerate only crashes, like Paxos, rather than fully arbitrary or Byzantine failures. &nbsp;The technique leverages a specification-based intrusion detection system to monitor deviations from the specifications of key BFT protocols and also an anomaly detection system that monitors intra-round latencies in the Byzantine protocol. Our protocol is particularly robust against several key attacks such as flooding attacks, timing attacks, and fairness attacks, that are typically not handled well by existing BFT algorithms.</p> <p>In addition, we developed several other protocols, including hBFT, BChain, P2S, and Mimosa Puduca that further validated the hypothesis through more abstract interpretations of IDS techniques and their applications to BFT protocols. &nbsp;In each case, we proved our results using mathematical proof as well as experimental evaluation on the DETERlab testbed.</p> <p>Research into merging BFT and IDS is truly fundamental research. We sought take a large step towards making BFT a truly practical approach in multisite systems and developing a novel way to integrate multiple IDSs to improve the security in a multisite system with non-uniform and varying trust. Marrying these two approaches has given us significant insight us into fault tolerance algorithm design and intrusion detection design that will make fault tolerance more both more efficient and more robust in the future, and thereby more practical and more likely to be used.&nbsp;</p><br> <p>            Last Modified: 10/26/2015<br>      Modified by: Sean&nbsp;P&nbsp;Peisert</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Byzantine fault folerance (BFT) is a technique for replicating services and maintaining communication and consistency between those replicated services in order to mitigate the impact of arbitrary computing and network failures, including malicious failures introduced by malware and Internet pathogens.  Historically, BFT has added significant overhead in the need for more processing power and significant computational delay, as a result of the number of replicas required, communication between replicas, and processing overhead (e.g., as a result of cryptographic operations) on each replica.  One of our key hypotheses in this project is that intrusion detection can be used to reduce the replication requirements and latency penalties for using BFT by helping to  monitor and protect the replicas and the Byzantine agreement protocol itself.  Specifically, we hypothesized that both anomaly detection (statistical deviations from normal) as well as specification-based intrusion detection (defining how the protocol _should_ operate and looking for violations) are likely to be of value, whereas misuse detection (defining bad things that can happen) is less likely to be successful.  We have created several new protocols demonstrating that intrusion detection and Byzantine fault tolerance can be symbiotic -- intrusion detection and related techniques can indeed help reduce overhead for BFT, making BFT more practical.  With regard to our hypothesis, notably, the ByzID protocol that that we developed and published has directly validated this hypothesis.  ByzID is a framework for constructing Byzantine failure detectors based on an intrusion detection system (IDS). Based on such a failure detector, we designed and built a practical Byzantine fault-tolerant protocol, which has costs comparable to protocols that tolerate only crashes, like Paxos, rather than fully arbitrary or Byzantine failures.  The technique leverages a specification-based intrusion detection system to monitor deviations from the specifications of key BFT protocols and also an anomaly detection system that monitors intra-round latencies in the Byzantine protocol. Our protocol is particularly robust against several key attacks such as flooding attacks, timing attacks, and fairness attacks, that are typically not handled well by existing BFT algorithms.  In addition, we developed several other protocols, including hBFT, BChain, P2S, and Mimosa Puduca that further validated the hypothesis through more abstract interpretations of IDS techniques and their applications to BFT protocols.  In each case, we proved our results using mathematical proof as well as experimental evaluation on the DETERlab testbed.  Research into merging BFT and IDS is truly fundamental research. We sought take a large step towards making BFT a truly practical approach in multisite systems and developing a novel way to integrate multiple IDSs to improve the security in a multisite system with non-uniform and varying trust. Marrying these two approaches has given us significant insight us into fault tolerance algorithm design and intrusion detection design that will make fault tolerance more both more efficient and more robust in the future, and thereby more practical and more likely to be used.        Last Modified: 10/26/2015       Submitted by: Sean P Peisert]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
