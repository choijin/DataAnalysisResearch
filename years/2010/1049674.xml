<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: EAGER: Collaborative Research: Parallel Automated Reasoning</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>125202.00</AwardTotalIntnAmount>
<AwardAmount>125202</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The security of the national computing infrastructure is critical for consumer confidence, protection of privacy, protection of valuable intellectual property, and even national security.  Logic-based approaches to security have been gaining popularity, in part because they provide a precise way to describe and reason about the kinds of complexity found in real systems.  Perhaps even more importantly, automated reasoning techniques can be used to assist users in navigating this complexity.  Despite the promise of automated reasoning, its use in practical applications is still limited.  One of the primary reasons for this is that for many problems, automated reasoning methods are not fast enough, especially for use in interactive environments (such as browser plug-ins in desktop computing, or mobile applications running on smart phones and PDAs).  This project aims to address the performance weakness of automated reasoning by investigating novel designs and algorithms with the unifying theme of exploiting parallelism.  The project will focus on three main areas of automated deduction: Boolean satisfiability, first-order reasoning, and satisfiability modulo theories.</AbstractNarration>
<MinAmdLetterDate>08/26/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/26/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1049674</AwardID>
<Investigator>
<FirstName>Cesare</FirstName>
<LastName>Tinelli</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Cesare Tinelli</PI_FULL_NAME>
<EmailAddress>cesare-tinelli@uiowa.edu</EmailAddress>
<PI_PHON>3193350735</PI_PHON>
<NSF_ID>000304361</NSF_ID>
<StartDate>08/26/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Iowa</Name>
<CityName>IOWA CITY</CityName>
<ZipCode>522421320</ZipCode>
<PhoneNumber>3193352123</PhoneNumber>
<StreetAddress>2 GILMORE HALL</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>062761671</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF IOWA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>062761671</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Iowa]]></Name>
<CityName>IOWA CITY</CityName>
<StateCode>IA</StateCode>
<ZipCode>522421320</ZipCode>
<StreetAddress><![CDATA[2 GILMORE HALL]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~125202</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 9"> <div class="layoutArea"> <div class="column"> <p><span style="font-size: 11.000000pt; font-family: 'CMR10';">The security of our computing infrastructure is critical for consumer confidence, protection of privacy, protection of valuable intellectual property, and even national security. Approaches to security analysis of software based on logical formalizations of security problems have been gaining popularity recently, in part because they provide a precise way to describe and reason about the kinds of complexity found in modern software systems. Perhaps even more importantly, logic-based approached enable the use of automated reasoning tools that can assist security analysts or even end-users in navigating this complexity. </span></p> <p><span style="font-size: 11.000000pt; font-family: 'CMR10';">Despite the promise of automated reasoning, its use in practical applications in software security is still limited. A primary reason is that, for many problems, automated reasoning methods are not fast enough, especially for use in interactive environments (such as browser plug-ins in desktop computing, or mobile applications running on smart phones and similar devices. As a result, current applications typically use weaker, but faster, heuristic approaches whose accuracy is limited and which are much more likely to report false errors. </span></p> <p><span style="font-size: 11.000000pt; font-family: 'CMTI10';">The weak formalisms and high false error rate of today&rsquo;s security solutions limit their power and utility. If there were a way to make formal techniques faster and more scalable, they would be much more appealing for use in real security settings, leading to the development of more secure systems. </span></p> <p><span style="font-size: 11.000000pt; font-family: 'CMBX10';">This project </span><span style="font-size: 11.000000pt; font-family: 'CMR10';">aimed at addressing the performance weakness of automated reasoning tools by investigating novel designs and algorithms that exploit the power of current (multicore) computers, which are able of running several computations at the same time by distributing them to their various cores. This was done by developing techniques for parallelizing reasoning steps or entire computations that do not need to be executed in sequence. One technique involves the parallel generation of multiple consequences of the same set of initial assumptions in a logical problem, which the automated reasoning tool may need to solve the problem. Another technique involves the parallel deployment of several sub-reasoners over the same input problem, where each </span><span style="font-size: 11.000000pt; font-family: 'CMR10';">sub-reasoner</span><span style="font-size: 11.000000pt; font-family: 'CMR10';"> differs enough from the others in the way executes its reasoning steps. Using different subreasoners increases the likelyhood of finding a solution, or determining that the problem is unsolvable, more quickly.</span><span style="font-size: 11.000000pt; font-family: 'CMR10';">&nbsp;</span></p> <p><span style="font-size: 11.000000pt; font-family: 'CMR10';">These techniques were implemented in a novel automated reasoner for a restricted but still quite expressive class of logical problems. Experimental results with this reasoner showed that it is indeed possible to improve</span><span style="font-size: 11.000000pt; font-family: 'CMR10';"> performance substantially by a careful use of these parallel computing techniques when implementing automated reasoning tools for modern multicore computers. Moreover, for hard problems, the performance gains improve proportionally with the number of available cores in the underlying hardware. The latter is a crucial property given the expectation that the speed of future computer processors will remain roughly the same as it is today while the number of cores will grow explosi...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    The security of our computing infrastructure is critical for consumer confidence, protection of privacy, protection of valuable intellectual property, and even national security. Approaches to security analysis of software based on logical formalizations of security problems have been gaining popularity recently, in part because they provide a precise way to describe and reason about the kinds of complexity found in modern software systems. Perhaps even more importantly, logic-based approached enable the use of automated reasoning tools that can assist security analysts or even end-users in navigating this complexity.   Despite the promise of automated reasoning, its use in practical applications in software security is still limited. A primary reason is that, for many problems, automated reasoning methods are not fast enough, especially for use in interactive environments (such as browser plug-ins in desktop computing, or mobile applications running on smart phones and similar devices. As a result, current applications typically use weaker, but faster, heuristic approaches whose accuracy is limited and which are much more likely to report false errors.   The weak formalisms and high false error rate of todayÃ†s security solutions limit their power and utility. If there were a way to make formal techniques faster and more scalable, they would be much more appealing for use in real security settings, leading to the development of more secure systems.   This project aimed at addressing the performance weakness of automated reasoning tools by investigating novel designs and algorithms that exploit the power of current (multicore) computers, which are able of running several computations at the same time by distributing them to their various cores. This was done by developing techniques for parallelizing reasoning steps or entire computations that do not need to be executed in sequence. One technique involves the parallel generation of multiple consequences of the same set of initial assumptions in a logical problem, which the automated reasoning tool may need to solve the problem. Another technique involves the parallel deployment of several sub-reasoners over the same input problem, where each sub-reasoner differs enough from the others in the way executes its reasoning steps. Using different subreasoners increases the likelyhood of finding a solution, or determining that the problem is unsolvable, more quickly.   These techniques were implemented in a novel automated reasoner for a restricted but still quite expressive class of logical problems. Experimental results with this reasoner showed that it is indeed possible to improve performance substantially by a careful use of these parallel computing techniques when implementing automated reasoning tools for modern multicore computers. Moreover, for hard problems, the performance gains improve proportionally with the number of available cores in the underlying hardware. The latter is a crucial property given the expectation that the speed of future computer processors will remain roughly the same as it is today while the number of cores will grow explosively.             Last Modified: 07/01/2013       Submitted by: Cesare Tinelli]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
