<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CCF: Medium: Validating Program Transformations in a Mechanized LLVM</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2011</AwardEffectiveDate>
<AwardExpirationDate>06/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>806961.00</AwardTotalIntnAmount>
<AwardAmount>806961</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Because the safety, reliability, and performance of our computing infrastructure rests on the quality of its software, improving software quality is of prime importance for continuing the technological and social advances made possible by computers. Compilers, the primary tools used in constructing software, are therefore crucial--their correctness is essential if developers are to create new, usable software that is free from flaws that lead to crashes and susceptibility to malware.  This goal of this project is to provide a methodology for verifying the correctness of compiler transformations for modern computing platforms, emphasizing software designed to work on multicore architectures.&lt;br/&gt;&lt;br/&gt;This research investigates techniques for building program transformation validators for the LLVM (Low-Level Virtual Machine) infrastructure, an open-source intermediate language used in industrial compilers. The researchers will define denotational semantics for symbolic evaluation of LLVM programs, and prove (in the interactive theorem prover Coq) that the interpretations of symbolic evaluation results are consistent with operational semantics.  To account for multi-core, shared-memory computer architectures, the project will define a concurrent memory model, parameterized by target architecture configurations, which promises sequential consistency for data race free programs.  This model's semantics will be expressive enough to represent program behaviors, and suitable for mechanized proofs. If successful, this research will decrease the cost of developing and testing compilers, and improve our understanding of the programming language implementations, particularly on multi-core processors, thereby leading to a more reliable, secure, and cost-effective computing ecosystem.</AbstractNarration>
<MinAmdLetterDate>03/25/2011</MinAmdLetterDate>
<MaxAmdLetterDate>03/25/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1065166</AwardID>
<Investigator>
<FirstName>Stephan</FirstName>
<LastName>Zdancewic</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephan A Zdancewic</PI_FULL_NAME>
<EmailAddress>stevez@cis.upenn.edu</EmailAddress>
<PI_PHON>2158982661</PI_PHON>
<NSF_ID>000220116</NSF_ID>
<StartDate>03/25/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<StreetAddress2><![CDATA[3451 Walnut St, 5th Flr Franklin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042250712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042250712</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Pennsylvania]]></Name>
<CityName>Philadelphia</CityName>
<StateCode>PA</StateCode>
<ZipCode>191046205</ZipCode>
<StreetAddress><![CDATA[Research Services]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~806961</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The Low-Level Virtual Machine (LLVM) infrastructure is a critical component that is widely used by&nbsp;software developers, including Microsoft, Google, and, most prominently, Apple. &nbsp;</p> <p>This reseach project developed techniques and methodologies capabable of eliminating certain kinds of bugs and vulnerabilities from the LLVM infrastructure and the tools that use it. &nbsp;The approach was to develop a faithful mathematical model of the LLVM infrastructure and then use that mathematical model to verify that various ways of processing LLVM code are correct. &nbsp;Because the mathematical model and corresponding proofs are large, the researchers employed machine-checked interactive theorem provers (essentially software that helps create mathematical models).</p> <p>The fundamental results of this project yield new techniques for developing reliable software. &nbsp;A primary case study, called SoftBound, conducted as part of this research demonstrated how to implement a formally-verified program transformation that defends legacy C software against buffer-overflow attacks, which are among the most serious kinds of software vulnerabilities in today's Internet. &nbsp;</p> <p>Beyond numerous academic publications, this research has also contributed to the development of two significant software artifacts. &nbsp;The first, SoftBound, is a tool available to LLVM developers as part of the LLVM distribution that they can use to harden C programs against buffer overflow attacks. &nbsp;The second, Vellvm is the interactive theorem proving development that can be used to model and reason about LLVM programs. &nbsp;It is being used by several research groups from around the world.</p><br> <p>            Last Modified: 08/24/2016<br>      Modified by: Stephan&nbsp;A&nbsp;Zdancewic</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The Low-Level Virtual Machine (LLVM) infrastructure is a critical component that is widely used by software developers, including Microsoft, Google, and, most prominently, Apple.    This reseach project developed techniques and methodologies capabable of eliminating certain kinds of bugs and vulnerabilities from the LLVM infrastructure and the tools that use it.  The approach was to develop a faithful mathematical model of the LLVM infrastructure and then use that mathematical model to verify that various ways of processing LLVM code are correct.  Because the mathematical model and corresponding proofs are large, the researchers employed machine-checked interactive theorem provers (essentially software that helps create mathematical models).  The fundamental results of this project yield new techniques for developing reliable software.  A primary case study, called SoftBound, conducted as part of this research demonstrated how to implement a formally-verified program transformation that defends legacy C software against buffer-overflow attacks, which are among the most serious kinds of software vulnerabilities in today's Internet.    Beyond numerous academic publications, this research has also contributed to the development of two significant software artifacts.  The first, SoftBound, is a tool available to LLVM developers as part of the LLVM distribution that they can use to harden C programs against buffer overflow attacks.  The second, Vellvm is the interactive theorem proving development that can be used to model and reason about LLVM programs.  It is being used by several research groups from around the world.       Last Modified: 08/24/2016       Submitted by: Stephan A Zdancewic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
