<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small:Language Support for Ad Hoc Data Processing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In every business, engineering endeavour and scientific discipline, workers are digitizing their knowledge with the hope of using computational methods to categorize, query, filter, search, diagnose, and visualize their data. While this effort is leading to remarkable industrial and scientific advances, it is also generating enormous amounts of ad hoc data (i.e., that data for which standard data processing tools such as query engines, statistical packages, graphing tools, or other software is not readily available). Ad hoc data poses tremendous challenges to its users because it is often highly varied, poorly documented, filled with errors, and continuously evolving --- yet ad hoc data also contains much valuable information.  The goal of this research is to develop general-purpose software tools and techniques capable of managing ad hoc data efficiently.  This research has the potential for a broad impact on society by dramatically improving the productivity of industrial data analysts, computer systems administrators and academics who must deal with ad hoc data on a day-to-day basis.&lt;br/&gt;&lt;br/&gt;The central technical challenge of the research involves designing, implementing and evaluating a new domain-specific programming language that facilitates the management of ad hoc data sets.  This new programming language will allow data analysts to specify the structure of ad hoc data files, how those files are arranged in a file system and what meta-data is associated with them.  Once a specification is complete, it will be possible to use it as documentation for the data set or for generating data-processing tools.  The research will also involve developing new methods for enabling users to generate specifications quickly and accurately, without actually having to write down all of the details by hand.  Finally, the research will develop new algorithms for implementing the generated data-processing tools efficiently.</AbstractNarration>
<MinAmdLetterDate>08/05/2010</MinAmdLetterDate>
<MaxAmdLetterDate>06/27/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1016937</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Walker</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David Walker</PI_FULL_NAME>
<EmailAddress>dpw@cs.princeton.edu</EmailAddress>
<PI_PHON>6092587654</PI_PHON>
<NSF_ID>000167001</NSF_ID>
<StartDate>08/05/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Princeton University</Name>
<CityName>Princeton</CityName>
<ZipCode>085442020</ZipCode>
<PhoneNumber>6092583090</PhoneNumber>
<StreetAddress>Off. of Research &amp; Proj. Admin.</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 36]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NJ12</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002484665</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF PRINCETON UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002484665</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Princeton University]]></Name>
<CityName>Princeton</CityName>
<StateCode>NJ</StateCode>
<ZipCode>085442020</ZipCode>
<StreetAddress><![CDATA[Off. of Research &amp; Proj. Adm]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NJ12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~330382</FUND_OBLG>
<FUND_OBLG>2012~169618</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>We are currently in the midst of the "big data" revolution. &nbsp;In other&nbsp;words, we have, all around us, a growing number of computational&nbsp;processes that are each generating enormous amounts information and&nbsp;storing it away for future analysis. &nbsp;This data can be used to help us&nbsp;investigate the causes of disease, understand the formation of our&nbsp;universe, improve the efficiency of our energy grid, or discover&nbsp;which products are most popular amongst our customers. &nbsp;Of course, to&nbsp;make use of this data, software engineers must write programs to&nbsp;parse, transform, analyze, query and communicate this data from place&nbsp;to place. &nbsp;The purpose of this research project was to investigate new&nbsp;kinds of programming languages and programming tools that will help&nbsp;software engineers manage this data more easily, more efficiently, and&nbsp;more reliably.&nbsp;</p> <p><br />The study of languages, like the ones developed in this project,&nbsp;involves a number of inter-related activities. &nbsp;First, it requires&nbsp;some design: the primitives of the language must be defined so they&nbsp;fit together effectively, and allow software engineers to construct an&nbsp;infinite spectrum of useful programs. &nbsp;Second, each primitive must&nbsp;have a clear semantics &mdash; i.e., a &ldquo;meaning&rdquo; or &ldquo;definition.&rdquo; &nbsp;These&nbsp;meanings are typically expressed in mathematical terms, and doing so&nbsp;allows language designers to prove strong properties of some, or&nbsp;possibly all, of the infinitely many programs that can be written in&nbsp;the language. &nbsp;Indeed, well-designed languages possess many useful&nbsp;safety properties that help programmers avoid errors in program&nbsp;construction. &nbsp;A language semantics is also useful to the engineers&nbsp;who develop the compilers or program analysis tools, and to the&nbsp;everyday programmer who needs to understand what their program does.&nbsp;Third, the study of languages requires implementation and&nbsp;experimentation. &nbsp;We must try the language out on real-world&nbsp;applications to find out how well it solves the problems of interest.&nbsp;Of course, each of these three activities complements the other: The&nbsp;semantic analysis typically tells us what kinds of designs are&nbsp;possible and guides the initial implementation; the implementation and&nbsp;applications tells us what kinds of designs are useful, and may&nbsp;suggest changes to the semantics of individual primitives.&nbsp;</p> <p><br />During the execution of this grant, we engaged in each of the&nbsp;activities described above and developed several new programming&nbsp;languages and tools for data management and communication. &nbsp;More&nbsp;specifically, together with collaborators Kathleen Fisher (Tufts&nbsp;University) and Nate Foster (initially a post doc working at Princeton&nbsp;on this research and now an assistant professor at Cornell&nbsp;University), the PI developed a new language, called Forest, for&nbsp;specifying the structure of multi-directory file systems. &nbsp;From a&nbsp;single, compact specification, the Forest system is able to generate a&nbsp;host of different data-processing tools. &nbsp;For instance, Forest can&nbsp;generate a collection of programmer libraries for parsing, printing,&nbsp;querying, traversing or finding errors in the described data. &nbsp;Forest also has a rigorous semantics, which we have used to prove key properties of&nbsp;system, including various "round-tripping laws" that tell us, for&nbsp;example, that parsing is a proper inverse of printing. &nbsp;Such properties help improve our confidence in the reliability of our infrastructure and the basic soundness of our designs.</p> <p>The Forest design was implemented as a domain-specific language&nbsp;embedded in Haskell, a modern functional programming language. &nbsp;Using&nbs...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ We are currently in the midst of the "big data" revolution.  In other words, we have, all around us, a growing number of computational processes that are each generating enormous amounts information and storing it away for future analysis.  This data can be used to help us investigate the causes of disease, understand the formation of our universe, improve the efficiency of our energy grid, or discover which products are most popular amongst our customers.  Of course, to make use of this data, software engineers must write programs to parse, transform, analyze, query and communicate this data from place to place.  The purpose of this research project was to investigate new kinds of programming languages and programming tools that will help software engineers manage this data more easily, more efficiently, and more reliably.    The study of languages, like the ones developed in this project, involves a number of inter-related activities.  First, it requires some design: the primitives of the language must be defined so they fit together effectively, and allow software engineers to construct an infinite spectrum of useful programs.  Second, each primitive must have a clear semantics &mdash; i.e., a "meaning" or "definition."  These meanings are typically expressed in mathematical terms, and doing so allows language designers to prove strong properties of some, or possibly all, of the infinitely many programs that can be written in the language.  Indeed, well-designed languages possess many useful safety properties that help programmers avoid errors in program construction.  A language semantics is also useful to the engineers who develop the compilers or program analysis tools, and to the everyday programmer who needs to understand what their program does. Third, the study of languages requires implementation and experimentation.  We must try the language out on real-world applications to find out how well it solves the problems of interest. Of course, each of these three activities complements the other: The semantic analysis typically tells us what kinds of designs are possible and guides the initial implementation; the implementation and applications tells us what kinds of designs are useful, and may suggest changes to the semantics of individual primitives.    During the execution of this grant, we engaged in each of the activities described above and developed several new programming languages and tools for data management and communication.  More specifically, together with collaborators Kathleen Fisher (Tufts University) and Nate Foster (initially a post doc working at Princeton on this research and now an assistant professor at Cornell University), the PI developed a new language, called Forest, for specifying the structure of multi-directory file systems.  From a single, compact specification, the Forest system is able to generate a host of different data-processing tools.  For instance, Forest can generate a collection of programmer libraries for parsing, printing, querying, traversing or finding errors in the described data.  Forest also has a rigorous semantics, which we have used to prove key properties of system, including various "round-tripping laws" that tell us, for example, that parsing is a proper inverse of printing.  Such properties help improve our confidence in the reliability of our infrastructure and the basic soundness of our designs.  The Forest design was implemented as a domain-specific language embedded in Haskell, a modern functional programming language.  Using this implementation, we developed a number of specifications and applications, including a specification of the structure of a standard Linux file system.  The Forest system and many of our other products, tools, ideas, code and academic papers can be found on our project website at http://www.padsproj.org/.   In addition to designing and implementing Forest, we, and our collaborators, designed several other domain-specific languages for ...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
