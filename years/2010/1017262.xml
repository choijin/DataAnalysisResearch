<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Balancing Expressiveness and Modular Reasoning for Aspect-Oriented Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>241029.00</AwardTotalIntnAmount>
<AwardAmount>241029</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software systems are poised to keep growing in complexity and permeate deeper into the critical infrastructures of society. The complexity of these systems is exceeding the limits of existing modularization mechanisms and reliability requirements are becoming stringent. Development of new separation of concerns (SoC) techniques is thus vital to make software more reliable and maintainable. Implicit invocation (II) and aspect-oriented (AO) programming languages provide related but distinct mechanisms for separation of concerns. The proposed work encompasses fundamental and practical efforts to improve modularization and reasoning mechanisms for II and AO languages, which is a long standing challenge for both kinds of languages. Addressing these challenges has the potential to significantly improve the quality of software by easing the adoption of new separation of concerns techniques.&lt;br/&gt;&lt;br/&gt;The project will proceed using the experimental language, Ptolemy, which blends both II and AO ideas. Ptolemy has explicitly announced events, which are defined in interfaces called "event types". Event types help separate concerns and decouple advice from the code it advises. Event type declarations also offer a place to specify advice. The explicit announcement of events allows the possibility of careful reasoning about correctness of Ptolemy programs, since it is possible to reason about parts of the program where there are no events in a conventional manner. The project aims to investigate reasoning by developing a formal specification language and verification technique. The approach is based on the idea of greybox ("model program'') specifications, as found in JML and the refinement calculus. There are known techniques for reasoning about uses of abstractions that have model program specifications, and the project will apply these to Ptolemy. The intellectual merit is in the treatment of expressions in Ptolemy that announce events and those that cause an advice to proceed. A straightforward adaptation of existing reasoning techniques to these cases appears to require a whole program analysis, which is generally not desirable for modular and scalable verification. The project also aims to investigate the utility and effectiveness of Ptolemy and its specification system. A software evolution analysis will be conducted to study the ability of competing aspect-oriented, implicit invocation, and Ptolemy implementations of open source projects to withstand change. Showing Ptolemy's benefits over II and AO languages will help software designers in deciding on advanced mechanisms for separation of concerns.</AbstractNarration>
<MinAmdLetterDate>08/04/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/19/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017262</AwardID>
<Investigator>
<FirstName>Gary</FirstName>
<LastName>Leavens</LastName>
<PI_MID_INIT>T</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gary T Leavens</PI_FULL_NAME>
<EmailAddress>leavens@cs.ucf.edu</EmailAddress>
<PI_PHON>4078234758</PI_PHON>
<NSF_ID>000331890</NSF_ID>
<StartDate>08/04/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>The University of Central Florida Board of Trustees</Name>
<CityName>Orlando</CityName>
<ZipCode>328168005</ZipCode>
<PhoneNumber>4078230387</PhoneNumber>
<StreetAddress>4000 CNTRL FLORIDA BLVD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>150805653</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CENTRAL FLORIDA BOARD OF TRUSTEES, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>159621697</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[The University of Central Florida Board of Trustees]]></Name>
<CityName>Orlando</CityName>
<StateCode>FL</StateCode>
<ZipCode>328168005</ZipCode>
<StreetAddress><![CDATA[4000 CNTRL FLORIDA BLVD]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~78831</FUND_OBLG>
<FUND_OBLG>2011~162198</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>Intellectual Merit</strong></p> <p><br />In formal methods, which is a subfield of the Computer Science fields of software engineering and programming languages there is presently an ongoing question as to how to best design and reason about complex software. It is accepted wisdom that software should be designed from modular parts, so that these parts can be independently maintained and improved. This is often difficult when the software must satisfy several different concerns, such as security and usability. It is also important to be able to specify what the software should do and to verify that it works as specified in a modular fashion. Modularity in general is important for scalability: when a system has a modular design, it can be constructed and maintained by a large team working largely independently, given specifications for module interfaces. When one can reason about a system modularly, then verification efforts also scale to larger and larger systems.&nbsp;</p> <p><br />Implicit invocation and aspect-oriented techniques (such as pointcuts and advice as found in AspectJ) help with modular design, by decoupling parts of a large software system. In essence, both allow events to be announced, which allows bits of code to be run in response. These bits of code, called handlers or advice, are not directly referred to by the code that announces events, leading to very modular (loosely-coupled) connections between different parts of a program; this is good for design modularity and thus for evolution and maintenance of programs. However, precisely because they are not immediately and strongly connected to the code announcing an event, it is difficult to modularly reason about handlers and advice, because modular reasoning must be local to a piece of code, although it can use specifications of used code.</p> <p><br />The main achievement of this grant is that we showed that it is possible to do modular verification for Implicit Invocation (II) style languages, like Ptolemy. We demonstrated two such techniques. The first is "translucid contracts", which use abstract programs to specify the control flow behavior of handlers and advised code. The second adds a separate "rely clause" to specify the behavior of the advised code. The implication of this is that II languages have most of the modularity advantages for design and code of AO languages, but now have a sound way to do modular specification and verification. &nbsp;Since II languages are nearly as expressive as AO languages, this goes a long way towards resolving the trade-off between modular design and modular verification: one can have both in an II language.</p> <p><br /><strong>Broader Impacts</strong></p> <p><strong>&nbsp;</strong><br />The world needs more complex and sophisticated software systems, and the more these participate in the world, the more they have cross-cutting demands placed on them. For example, we want our systems to be easy to use, but we also want them to be secure. For modular design, it is very helpful to be able to collect policies that affect each of these concerns in a single module. However, we also want our systems to be reliable. For this purpose we need to know what they are supposed to do and we need a high level of assurance that they do what they are supposed to. &nbsp;Being able to achieve both of these goals at once, as enabled by this project, will allow software engineers to build more complex and more reliable and trustworthy systems. That is the promise of the research results in this project.</p> <p><br />The project also supported two Ph.D. students who graduated from the University of Central Florida (UCF). Rochelle Elva, who graduated in Summer 2013 is now teaching Computer Science at UCF as a visiting lecturer. Jose Sanchez, who graduated in Spring 2015, has returned to Costa Rica where he teaches as a university professor.</p> <p>&nbsp;</p><br> <p>   ...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Intellectual Merit   In formal methods, which is a subfield of the Computer Science fields of software engineering and programming languages there is presently an ongoing question as to how to best design and reason about complex software. It is accepted wisdom that software should be designed from modular parts, so that these parts can be independently maintained and improved. This is often difficult when the software must satisfy several different concerns, such as security and usability. It is also important to be able to specify what the software should do and to verify that it works as specified in a modular fashion. Modularity in general is important for scalability: when a system has a modular design, it can be constructed and maintained by a large team working largely independently, given specifications for module interfaces. When one can reason about a system modularly, then verification efforts also scale to larger and larger systems.    Implicit invocation and aspect-oriented techniques (such as pointcuts and advice as found in AspectJ) help with modular design, by decoupling parts of a large software system. In essence, both allow events to be announced, which allows bits of code to be run in response. These bits of code, called handlers or advice, are not directly referred to by the code that announces events, leading to very modular (loosely-coupled) connections between different parts of a program; this is good for design modularity and thus for evolution and maintenance of programs. However, precisely because they are not immediately and strongly connected to the code announcing an event, it is difficult to modularly reason about handlers and advice, because modular reasoning must be local to a piece of code, although it can use specifications of used code.   The main achievement of this grant is that we showed that it is possible to do modular verification for Implicit Invocation (II) style languages, like Ptolemy. We demonstrated two such techniques. The first is "translucid contracts", which use abstract programs to specify the control flow behavior of handlers and advised code. The second adds a separate "rely clause" to specify the behavior of the advised code. The implication of this is that II languages have most of the modularity advantages for design and code of AO languages, but now have a sound way to do modular specification and verification.  Since II languages are nearly as expressive as AO languages, this goes a long way towards resolving the trade-off between modular design and modular verification: one can have both in an II language.   Broader Impacts    The world needs more complex and sophisticated software systems, and the more these participate in the world, the more they have cross-cutting demands placed on them. For example, we want our systems to be easy to use, but we also want them to be secure. For modular design, it is very helpful to be able to collect policies that affect each of these concerns in a single module. However, we also want our systems to be reliable. For this purpose we need to know what they are supposed to do and we need a high level of assurance that they do what they are supposed to.  Being able to achieve both of these goals at once, as enabled by this project, will allow software engineers to build more complex and more reliable and trustworthy systems. That is the promise of the research results in this project.   The project also supported two Ph.D. students who graduated from the University of Central Florida (UCF). Rochelle Elva, who graduated in Summer 2013 is now teaching Computer Science at UCF as a visiting lecturer. Jose Sanchez, who graduated in Spring 2015, has returned to Costa Rica where he teaches as a university professor.          Last Modified: 10/05/2015       Submitted by: Gary T Leavens]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
