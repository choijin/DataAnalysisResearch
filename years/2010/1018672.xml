<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Redefining IO Abstractions for Non-Volatile, Solid-State Memories: Languages and System Architectures</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>416000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hong Jiang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>As computing systems and society at large becomes more data-centric, the importance of being able to access data quickly and efficiently becomes critical.  In current systems, hard disk performance limits overall system performance for data-intensive tasks and ultimately limits our ability to efficiently process massive amount of data quickly.  A new class of advanced, solid-state non-volatile memories are poised to revolutionize how computer systems store and access persistent data.  These memory technologies are 100s to 1000s times faster than conventional disk drives.  However, they require a complete re-engineering of numerous system components as well as the interfaces between those components.  Without understanding and implementing these changes, we will never realize the full potential of these memories. In this research, the PIs propose to design, implement, and evaluate new system components and abstractions for accessing non-volatile, solid-state memories.  They will construct hardware prototype system, simulation systems, and custom-built software systems to reduce the cost of accessing these memories and make them easier for programmers to use safely and reliably.&lt;br/&gt;&lt;br/&gt;Redefining the interface and abstractions that programs use to access and manipulate persistent state will have significant effects across all aspects of computer system design.  It will require thinking hardware, operating system, programming language, and application-level design decisions and enable new models for data-intensive computation.  The PIs will incorporate the programming models, prototypes, and applications into the curriculum of the CSE department at UCSD.  Finally, the broad and interdisciplinary scope of the rsearch makes it an excellent tool for recruiting groups that are traditionally underrepresented in computing fields.</AbstractNarration>
<MinAmdLetterDate>09/15/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/23/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018672</AwardID>
<Investigator>
<FirstName>Ranjit</FirstName>
<LastName>Jhala</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ranjit Jhala</PI_FULL_NAME>
<EmailAddress>jhala@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585341420</PI_PHON>
<NSF_ID>000486287</NSF_ID>
<StartDate>09/15/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Steven</FirstName>
<LastName>Swanson</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Steven Swanson</PI_FULL_NAME>
<EmailAddress>swanson@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585340246</PI_PHON>
<NSF_ID>000069307</NSF_ID>
<StartDate>09/15/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930934</ZipCode>
<StreetAddress><![CDATA[Office of Contract &amp; Grant A]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~400000</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="p1"><span class="s1">Our project how to integrate new memory technologies into computing systems and how to allow those systems to benefit fully from the performance and features that these new memory technologies can provide. &nbsp;The technologies we studied are "non-volatilie" because they retain data after power has been removed from the system. &nbsp;Conventional memory technologies do not have this property.</span></p> <p class="p2"><span class="s1">&nbsp;</span></p> <p class="p1"><span class="s1">In conventional systems, programs running on the computer operate on data structures that reside in volatile memory and, when the system wants to preserve the data, the system converts the data into another format and writes it out to hard disk or other storage device. &nbsp;This conversion between the volatile and non-volatile versions of the data is inefficient. &nbsp;Our work allowed programmers to use a single format for both operating on and for preserving the data, leading to programs that are more efficient and more responsive to users.</span></p> <p class="p2"><span class="s1">&nbsp;</span></p> <p class="p1"><span class="s1">This transitions raises a host of challenges. &nbsp;For instance, if a program is modifying a piece of data and power fails in the midst of the modification, the data may be preserved in corrupted state. &nbsp;To avoid this kind of problem, we created software tools that allowed programmers to manipulate data without the possibility of it being preserved in a corrupted state. &nbsp;This will make it much easier for programmers to successfully use these new memories in future computing systems and should lead to better, more efficient, and more responsive software as well as increased programmer productivity.</span></p> <p>&nbsp;</p><br> <p>            Last Modified: 02/04/2015<br>      Modified by: Steven&nbsp;Swanson</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Our project how to integrate new memory technologies into computing systems and how to allow those systems to benefit fully from the performance and features that these new memory technologies can provide.  The technologies we studied are "non-volatilie" because they retain data after power has been removed from the system.  Conventional memory technologies do not have this property.   In conventional systems, programs running on the computer operate on data structures that reside in volatile memory and, when the system wants to preserve the data, the system converts the data into another format and writes it out to hard disk or other storage device.  This conversion between the volatile and non-volatile versions of the data is inefficient.  Our work allowed programmers to use a single format for both operating on and for preserving the data, leading to programs that are more efficient and more responsive to users.   This transitions raises a host of challenges.  For instance, if a program is modifying a piece of data and power fails in the midst of the modification, the data may be preserved in corrupted state.  To avoid this kind of problem, we created software tools that allowed programmers to manipulate data without the possibility of it being preserved in a corrupted state.  This will make it much easier for programmers to successfully use these new memories in future computing systems and should lead to better, more efficient, and more responsive software as well as increased programmer productivity.          Last Modified: 02/04/2015       Submitted by: Steven Swanson]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
