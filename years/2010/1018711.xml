<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  Scenario-Based Validation of Design Models</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>499862.00</AwardTotalIntnAmount>
<AwardAmount>516044</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Developing complex software systems that play critical roles in organizations and societies is currently labour intensive and costly. There is a need for research on the means to significantly reduce the cost and effort of developing complex software systems. Model driven engineering (MDE) research is primarily concerned with reducing software development costs through the use of technologies that support rigorous analysis of software models and automated transformation of verified models to dependable implementations. Complexity is tackled through (1) the use of models that describe complex systems at multiple levels of abstraction and from a variety of perspectives, and (2) automated support for transforming and analyzing models. Software developers use multi-modeling notations such as the Unified Modeling Language (UML) to manage design complexity. A challenge in using multi-models is ensuring that structural and behavioral properties are consistently described across the different models. The highly iterative nature of software design makes manual consistency checking of multi-models tedious and error prone. Furthermore, iterative, incremental development of models requires support for analyzing incomplete models. While heavyweight formal analysis techniques are useful for analyzing detailed, complete design models of highly-critical systems, lightweight analysis techniques that allow developers to do ``just enough'' analysis with available information are needed to support iterative, incremental software development. The primary aim of this project is to develop a lightweight consistency analysis method that supports iterative, incremental development of software design multi-models.&lt;br/&gt;&lt;br/&gt;The research aims to produce an analysis method that provides modelers with meaningful feedback on the consistency of UML design multi-models as they evolve in an iterative and incremental process. The scenario-based UML design analysis method that will be developed extends the applicability of existing UML static analysis tools such as USE and OCLE to the analysis of behavior. The approach will allow developers to automatically check a design multi-model against a set of scenarios describing desirable and undesirable behaviors. What will make this analysis method different from other rigorous analysis methods is its tolerance for incompleteness. Specifically, the research aims to produce a method that will provide useful feedback on consistency when only partial descriptions of behavior are provided in multi-models. In addition to the above, the static analysis method will be integrated with a dynamic analysis tool called UMLAnT that allows developers to animate scenarios captured by UML class models. The support for both static and dynamic model analysis and the ability to analyze incomplete models can significantly reduce the cost and effort currently associated with producing dependable implementations from models in iterative, incremental design processes.</AbstractNarration>
<MinAmdLetterDate>07/23/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/09/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018711</AwardID>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>France</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert B France</PI_FULL_NAME>
<EmailAddress>france@cs.colostate.edu</EmailAddress>
<PI_PHON>9704916356</PI_PHON>
<NSF_ID>000476127</NSF_ID>
<StartDate>07/23/2010</StartDate>
<EndDate>03/09/2015</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Indrakshi</FirstName>
<LastName>Ray</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Indrakshi Ray</PI_FULL_NAME>
<EmailAddress>iray@cs.colostate.edu</EmailAddress>
<PI_PHON>9704917986</PI_PHON>
<NSF_ID>000484109</NSF_ID>
<StartDate>03/09/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Colorado State University</Name>
<CityName>Fort Collins</CityName>
<ZipCode>805232002</ZipCode>
<PhoneNumber>9704916355</PhoneNumber>
<StreetAddress>601 S Howes St</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>785979618</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>COLORADO STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>948905492</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Colorado State University]]></Name>
<CityName>Fort Collins</CityName>
<StateCode>CO</StateCode>
<ZipCode>805232002</ZipCode>
<StreetAddress><![CDATA[601 S Howes St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>2878</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~166776</FUND_OBLG>
<FUND_OBLG>2011~341086</FUND_OBLG>
<FUND_OBLG>2012~8182</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Errors in software may have very disastrous consequences. Finding and fixing errors when the software has been deployed is often very expensive. Thus, it is important to uncover errors during the early stages of the software development lifecycle. We propose an approach thar uncovers errors at the design phase.</p> <p>The Unified Modeling Language (UML) is the de facto specification language used in the software industry. The software requirements and design are therefore often specified using UML. Class models, sequence charts, and activity diagrams are often used in software design. The class model shows the structural relationships between the various modules of a software. The operations of each class are specified using preconditions and postconditions expressed in the Object Constraint Language (OCL). USE and OCLE tools are often used for analyzing structural properties. However, analyzing behavioral properties using USE and OCLE tools has proven to be quite difficult.</p> <p>The project proposes an approach where the behavior can be represented as a Snapshot Transition Model (STM) where each snapshot captures a system state, and a snapshot transition demonstrates how the snapshot is transformed by an operation invocation. The project demonstrates how an STM modeling a scenario and consisting of a set of snapshot transitions can be automatically verified using structural analysis tools such as USE and OCLE.&nbsp;</p> <p>In order to check whether a design model is correct, a set of valid and invalid scenarios are presented. If the valid scenarios conform to the design model and the invalid ones violate it, then the designer gets some assurance that the design model behaves as intended. The project further discusses how the scenario generation &nbsp;can be automated with help from the verifier. It also extends and discusses how some temporal properties can be verified using this approach.</p> <p>Verifying real-world models is challenging. The size of the model may exhaust system resources. Towards this end, the project investigates how model slicing can be used to reduce the size of the input that must be verified. The model slice verified gives assurance about the correctness of the original model.</p> <p>The various techniques proposed in this project were applied and tested on security policies. Some unknown security flaws were discovered using these techniques - this validates the proposed approaches. Our future work involves adapting the proposed approaches to more complex domains, such as, cyber physical systems that involve real-time properties as well.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/26/2015<br>      Modified by: Indrakshi&nbsp;Ray</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Errors in software may have very disastrous consequences. Finding and fixing errors when the software has been deployed is often very expensive. Thus, it is important to uncover errors during the early stages of the software development lifecycle. We propose an approach thar uncovers errors at the design phase.  The Unified Modeling Language (UML) is the de facto specification language used in the software industry. The software requirements and design are therefore often specified using UML. Class models, sequence charts, and activity diagrams are often used in software design. The class model shows the structural relationships between the various modules of a software. The operations of each class are specified using preconditions and postconditions expressed in the Object Constraint Language (OCL). USE and OCLE tools are often used for analyzing structural properties. However, analyzing behavioral properties using USE and OCLE tools has proven to be quite difficult.  The project proposes an approach where the behavior can be represented as a Snapshot Transition Model (STM) where each snapshot captures a system state, and a snapshot transition demonstrates how the snapshot is transformed by an operation invocation. The project demonstrates how an STM modeling a scenario and consisting of a set of snapshot transitions can be automatically verified using structural analysis tools such as USE and OCLE.   In order to check whether a design model is correct, a set of valid and invalid scenarios are presented. If the valid scenarios conform to the design model and the invalid ones violate it, then the designer gets some assurance that the design model behaves as intended. The project further discusses how the scenario generation  can be automated with help from the verifier. It also extends and discusses how some temporal properties can be verified using this approach.  Verifying real-world models is challenging. The size of the model may exhaust system resources. Towards this end, the project investigates how model slicing can be used to reduce the size of the input that must be verified. The model slice verified gives assurance about the correctness of the original model.  The various techniques proposed in this project were applied and tested on security policies. Some unknown security flaws were discovered using these techniques - this validates the proposed approaches. Our future work involves adapting the proposed approaches to more complex domains, such as, cyber physical systems that involve real-time properties as well.             Last Modified: 11/26/2015       Submitted by: Indrakshi Ray]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
