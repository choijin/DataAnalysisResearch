<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Advances in Distributed Spatial-Parallel Event-Driven HDL Simulation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>448054.00</AwardTotalIntnAmount>
<AwardAmount>448054</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project proposes an efficient solution to parallel event-driven simulation of digital designs described in a hardware description language (HDL). It is based on a novel concept of spatial parallelism using accurate prediction of input and output signals of individual modules, derived from a model at a higher abstraction level. Using the predicted rather than actual signal values makes it possible to eliminate the need for communication and synchronization between the simulators. The simulation process consists of two phases: 1) Each local simulation is executed using the predicted input, so that no communication and synchronization cost is incurred for exchanging data with other local simulations. Each local simulation stores the results at periodic checkpoints and compares the computed output with the predicted output, to make the correction later, if necessary. 2) If the comparison fails, each local simulation rolls back to the nearest checkpoint to be executed with the actual inputs coming from other modules. This requires exchanging data with other simulations and introduces undesired communication and synchronization overhead. Each local simulation compares the actual input with the predicted input, and if the number of matches exceeds the predetermined threshold, the simulation is switched back to the prediction phase 1. The proposed method is applicable to massively parallel computing platforms and can work with any commercial event-driven HDL simulator.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Successful implementation of the proposed method for parallel event-driven HDL simulation will have profound effect on the way dynamic, simulation-based verification is carried out in academia and in industry. It will benefit researchers and all sectors of industry that deal with the design of systems on chip (SoC). It will significantly increase designer productivity in developing and testing complex SoCs, shorten the time to market, lower design development cost and consumer prices. It will fuel the development of other areas of technology, such as multi-core platforms, parallel processors, etc. It will also affect EDA industry developing verification tools ? with new innovative verification tool, automated verification flow and methodology.</AbstractNarration>
<MinAmdLetterDate>09/02/2010</MinAmdLetterDate>
<MaxAmdLetterDate>09/02/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1017530</AwardID>
<Investigator>
<FirstName>Maciej</FirstName>
<LastName>Ciesielski</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Maciej Ciesielski</PI_FULL_NAME>
<EmailAddress>ciesiel@ecs.umass.edu</EmailAddress>
<PI_PHON>4135450401</PI_PHON>
<NSF_ID>000209810</NSF_ID>
<StartDate>09/02/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Massachusetts Amherst</Name>
<CityName>Hadley</CityName>
<ZipCode>010359450</ZipCode>
<PhoneNumber>4135450698</PhoneNumber>
<StreetAddress>Research Administration Building</StreetAddress>
<StreetAddress2><![CDATA[100 Venture Way, Suite 201]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>153926712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MASSACHUSETTS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Massachusetts Amherst]]></Name>
<CityName>Hadley</CityName>
<StateCode>MA</StateCode>
<ZipCode>010359450</ZipCode>
<StreetAddress><![CDATA[Research Administration Building]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramElement>
<ProgramReference>
<Code>6863</Code>
<Text>SEBML-MOORE'S LAW</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~448054</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The most widely used technique for verification of digital hardware is simulation, and because of its many advantages it will remain so for a foreseeable future. However, simulation suffers from very low runtime performance, dictated by its inherently sequential nature: applying adequate input stimulus, propagating the internal signals through the circuit in response to the stimulus, and observing the signals computed at the circuit outputs. Particularly slow is event-driven simulation, where each change in signal value of the internal signals creates a new event that needs to be propagated through the circuit.<br /><br />Distributed parallel simulation can potentially increase the simulation performance by dividing circuit into smaller modules and simulating each module separately (but in synchrony with others) on a separate processor or a processor core. Unfortunately, the event-based inter-module communication introduces a significant synchronization and communication overhead, which diminishes the potential benefit of parallel simulation. The goal of this project was to develop an efficient solution to parallel event-driven simulation of digital designs described in hardware description language (HDL) by minimizing or completely eliminating the synchronization and communication overhead. <br /><br />In this project a new approach to parallel event-driven simulation of circuits, described in hardware description language (HDL), was developed and successfully implemented. The novelty of this method is to eliminate the communication and synchronization overhead between the interacting modules by accurately predicting input stimulus to each module and apply it&nbsp; instead of the actual inpput, thus eliminating the direct interaction between the modules. The prediction relies on using models at a higher abstraction level and on simulation results from earlier simulation runs. By using the predicted, rather than actual signal values, it is possible to eliminate the communication and synchronization activity between the simulators, hence greatly improving simulation performance. Several models for automated fast prediction-based techniques have been developed in this work. Specifically, the gate-level timing simulation uses as predictor the result of functional, zero-delay gate level simulation. Another version of gate-level<br />timing simulation combines static timing analysis at the block level with dynamic timing simulation at the input-output interfaces. Similarly, simulation of register-transfer level (RTL) and functional or zero-delay gate level circuits uses high level simulation of designs described in computer language C. <br /><br />The simulation approach developed in this work is compatible with the established hardware design methodology which uses progressive refinement of the design from a higher level model to a low level model. The approach is immune to suboptimal partitioning as it exploits the inherent hierarchy present in the design.&nbsp; The improved simulation performance, confirmed by the experiments for gate-level timing simulation, is almost linear in the number of processors. The method is automated and software developed as part of this project is applicable to massively parallel computing platforms and can work with any commercial event-driven HDL simulators.<br /><br /></p><br> <p>            Last Modified: 09/22/2014<br>      Modified by: Maciej&nbsp;Ciesielski</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The most widely used technique for verification of digital hardware is simulation, and because of its many advantages it will remain so for a foreseeable future. However, simulation suffers from very low runtime performance, dictated by its inherently sequential nature: applying adequate input stimulus, propagating the internal signals through the circuit in response to the stimulus, and observing the signals computed at the circuit outputs. Particularly slow is event-driven simulation, where each change in signal value of the internal signals creates a new event that needs to be propagated through the circuit.  Distributed parallel simulation can potentially increase the simulation performance by dividing circuit into smaller modules and simulating each module separately (but in synchrony with others) on a separate processor or a processor core. Unfortunately, the event-based inter-module communication introduces a significant synchronization and communication overhead, which diminishes the potential benefit of parallel simulation. The goal of this project was to develop an efficient solution to parallel event-driven simulation of digital designs described in hardware description language (HDL) by minimizing or completely eliminating the synchronization and communication overhead.   In this project a new approach to parallel event-driven simulation of circuits, described in hardware description language (HDL), was developed and successfully implemented. The novelty of this method is to eliminate the communication and synchronization overhead between the interacting modules by accurately predicting input stimulus to each module and apply it  instead of the actual inpput, thus eliminating the direct interaction between the modules. The prediction relies on using models at a higher abstraction level and on simulation results from earlier simulation runs. By using the predicted, rather than actual signal values, it is possible to eliminate the communication and synchronization activity between the simulators, hence greatly improving simulation performance. Several models for automated fast prediction-based techniques have been developed in this work. Specifically, the gate-level timing simulation uses as predictor the result of functional, zero-delay gate level simulation. Another version of gate-level timing simulation combines static timing analysis at the block level with dynamic timing simulation at the input-output interfaces. Similarly, simulation of register-transfer level (RTL) and functional or zero-delay gate level circuits uses high level simulation of designs described in computer language C.   The simulation approach developed in this work is compatible with the established hardware design methodology which uses progressive refinement of the design from a higher level model to a low level model. The approach is immune to suboptimal partitioning as it exploits the inherent hierarchy present in the design.  The improved simulation performance, confirmed by the experiments for gate-level timing simulation, is almost linear in the number of processors. The method is automated and software developed as part of this project is applicable to massively parallel computing platforms and can work with any commercial event-driven HDL simulators.         Last Modified: 09/22/2014       Submitted by: Maciej Ciesielski]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
