<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Find and Fix Similar Software Bugs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>483261.00</AwardTotalIntnAmount>
<AwardAmount>483261</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Finding and fixing bugs are crucial in the process of developing reliable and high-quality software. Software developers could base on their own experience with their programs, or effectively find bugs by consulting the similar bugs and fixes from others in the past for the same or different systems. However, the body of knowledge in software engineering is still very limited on the nature, the causes and effects, and the characteristics of such recurring bugs. The learning process from prior known bugs is still ad-hoc, manually, and un-systematically. In this project, a comprehensive approach is introduced to capture the knowledge of prior bugs and corresponding fixes, and to leverage such knowledge to build automated tools to detect potential recurring buggy code at other locations in the same or different systems. Such tools will help to detect bugs early in the development process, leading to higher-quality software and the improvement in productivity of software developers in the bug fixing&lt;br/&gt;practice.&lt;br/&gt;&lt;br/&gt;In this project, an empirical study will be conducted to collect, analyze, and understand the nature and characteristics of recurring and similar bugs within one and across multiple systems. This project is expected to advance software engineering knowledge on the theoretical foundation, concepts, practical techniques, and automated tools to (1) capture the characteristics and measure the similarity of code units involved in prior known fixed bugs, (2) identify the locations of potential buggy units and derive the guidelines to fix them by matching them to the relevant peer code units of the known bugs, and (3) support the similar bug detection and fixing process. The teaching modules and validation efforts in this project will involve students and professionals, promoting teaching and training software quality assurance.</AbstractNarration>
<MinAmdLetterDate>08/17/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/17/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1018600</AwardID>
<Investigator>
<FirstName>Tien</FirstName>
<LastName>Nguyen</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tien N Nguyen</PI_FULL_NAME>
<EmailAddress>nguyen.n.tien@gmail.com</EmailAddress>
<PI_PHON>9728833893</PI_PHON>
<NSF_ID>000340493</NSF_ID>
<StartDate>08/17/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005309844</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005309844</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Iowa State University]]></Name>
<CityName>AMES</CityName>
<StateCode>IA</StateCode>
<ZipCode>500112207</ZipCode>
<StreetAddress><![CDATA[1138 Pearson]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~483261</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software has become a vital part of our modern society. Finding and fixing software defects are crucial in the process of developing reliable and high-quality software. Failing to fix a defect early could result in severe consequences. Once failures are reported, developers need to fix them by locating buggy locations in the code. Like other problem-solving tasks, developers could generally base on their own expertise and experience, or consult with others who have experienced with similar defects before. However, while the similar defects/bugs have been recurring in software systems due to the practice of software reuse, the existing supports for such learning and consultation are still ad-hoc, manually, and un-systematically. Thus, it is desired to have automated tool supports that capture the knowledge on defects and fixes, and leverage it to find and fix the recurring and similar defects.</p> <p>In this project, we have conducted research activities with two key objectives: (1) understanding the nature and characteristics of recurring and similar defects in software systems; and (2) leveraging such knowledge to develop scientific foundation and tool supports to detect and recommend fixes for future software defects. Toward these goals, we performed empirical studies on a large number open-source software projects with a very large number of bug fixes. Our key findings fundamentally advance the body of knowledge and understanding of the nature and characteristics of recurring bugs/fixes and its relation to software reuse. First, there are about 17-45% of total fixing changes that are considered as recurring. While many recurring fixes occur on multiple files at the same revisions (i.e. in space), fewer fixes recur on different revisions (i.e. in time). Some of them recur in both time and space. Second, the recurring fixes have high repetitiveness with smaller sizes and with certain syntactic types (e.g., method calls, infix expressions, condition and loop statements). The recurring fixes tend to recur across projects with even a higher level of repetitiveness than the within-project fixes. Third, we are able to collect empirical evidences to confirm that software reuse practice in programming creates similar modules in source code; and similar modules tends to have similar bugs, thus might require fixes in the similar manners. Specifically, in a software project, there exist multiple objects that play similar roles, provide similar functions, or perform similar interactions with the other objects in the system that need to be built. Those functions/interactions are realized in similar code and/or in similar object usage scenarios. Then, when the functions/interactions need to be changed (e.g. due to bug fixing), the corresponding code/usages are changed in the similar manners, resulting in recurring fixes. We call them code peers. When such a program unit is buggy and needs to be fixed, the peer code units need to be considered for fixing as well.</p> <p>Leveraging such findings, we developed a novel methodology to characterize and to identify the similar code fragments in a software system (via code clones and code peers) that could be fixed in the similar manners. We then developed a method to propagate the fixing changes in a code fragment to other fragments. More specifically, we developed new concepts, techniques, algorithms, and automated tools to characterize and measure the similarity of code units involved in prior known fixed defects, and to identify the code locations of potential buggy code units. Our tool derives the fixing recommendations by matching them to the peered and cloned code units of the prior known defects. Our empirical evaluation showed that our method is reliable and has high accuracy. We also developed the methods to analyze recurring defects through detecting duplicate defect reports and to better recover the links between the defec...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software has become a vital part of our modern society. Finding and fixing software defects are crucial in the process of developing reliable and high-quality software. Failing to fix a defect early could result in severe consequences. Once failures are reported, developers need to fix them by locating buggy locations in the code. Like other problem-solving tasks, developers could generally base on their own expertise and experience, or consult with others who have experienced with similar defects before. However, while the similar defects/bugs have been recurring in software systems due to the practice of software reuse, the existing supports for such learning and consultation are still ad-hoc, manually, and un-systematically. Thus, it is desired to have automated tool supports that capture the knowledge on defects and fixes, and leverage it to find and fix the recurring and similar defects.  In this project, we have conducted research activities with two key objectives: (1) understanding the nature and characteristics of recurring and similar defects in software systems; and (2) leveraging such knowledge to develop scientific foundation and tool supports to detect and recommend fixes for future software defects. Toward these goals, we performed empirical studies on a large number open-source software projects with a very large number of bug fixes. Our key findings fundamentally advance the body of knowledge and understanding of the nature and characteristics of recurring bugs/fixes and its relation to software reuse. First, there are about 17-45% of total fixing changes that are considered as recurring. While many recurring fixes occur on multiple files at the same revisions (i.e. in space), fewer fixes recur on different revisions (i.e. in time). Some of them recur in both time and space. Second, the recurring fixes have high repetitiveness with smaller sizes and with certain syntactic types (e.g., method calls, infix expressions, condition and loop statements). The recurring fixes tend to recur across projects with even a higher level of repetitiveness than the within-project fixes. Third, we are able to collect empirical evidences to confirm that software reuse practice in programming creates similar modules in source code; and similar modules tends to have similar bugs, thus might require fixes in the similar manners. Specifically, in a software project, there exist multiple objects that play similar roles, provide similar functions, or perform similar interactions with the other objects in the system that need to be built. Those functions/interactions are realized in similar code and/or in similar object usage scenarios. Then, when the functions/interactions need to be changed (e.g. due to bug fixing), the corresponding code/usages are changed in the similar manners, resulting in recurring fixes. We call them code peers. When such a program unit is buggy and needs to be fixed, the peer code units need to be considered for fixing as well.  Leveraging such findings, we developed a novel methodology to characterize and to identify the similar code fragments in a software system (via code clones and code peers) that could be fixed in the similar manners. We then developed a method to propagate the fixing changes in a code fragment to other fragments. More specifically, we developed new concepts, techniques, algorithms, and automated tools to characterize and measure the similarity of code units involved in prior known fixed defects, and to identify the code locations of potential buggy code units. Our tool derives the fixing recommendations by matching them to the peered and cloned code units of the prior known defects. Our empirical evaluation showed that our method is reliable and has high accuracy. We also developed the methods to analyze recurring defects through detecting duplicate defect reports and to better recover the links between the defect reports and their corresponding fixes. Our work was awarded an ACM SIGSO...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
