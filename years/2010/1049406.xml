<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Human-Centered Software Synthesis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>90000.00</AwardTotalIntnAmount>
<AwardAmount>90000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project is developing a new programming model that simplifies the development of complex low-level system's code. In the new model, the programmer starts by providing simple diagrams and animations showing some of the high-level insight behind an implementation. After interacting with the user to clarify any potential omissions or inconsistencies, the system automatically derives a correct implementation.  The interactions are designed to expose gaps in the programmer's reasoning, and to capture new insights in the form of diagrams, invariants, or simple unit tests. As a result, the tool helps the programmer achieve an improved understanding of the problem in addition to delivering an implementation.&lt;br/&gt;&lt;br/&gt;The new programming model is supported by a new breed of software synthesis algorithms that work by framing the synthesis problem as a constraint satisfaction problem. In this approach, the different forms of input provided by the programmer are independently translated into constraints. At the high-level, the approach is fairly simple; the challenge lies in finding efficient representations for both the program and the constraints.  The graphical formalisms in particular pose some interesting problems due to their many omissions, but a combination of abstract interpretation and demand-driven constraint generation make this problem tractable.&lt;br/&gt;&lt;br/&gt;The new programming model embodies a human-centered approach to synthesis that could transform the way complex pieces of systems code are developed, and could show the way for a new generation of programming tools that combine formal methods with HCI to make programming easier and more reliable.</AbstractNarration>
<MinAmdLetterDate>08/07/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/07/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1049406</AwardID>
<Investigator>
<FirstName>Armando</FirstName>
<LastName>Solar-Lezama</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Armando Solar-Lezama</PI_FULL_NAME>
<EmailAddress>asolar@csail.mit.edu</EmailAddress>
<PI_PHON>6172589727</PI_PHON>
<NSF_ID>000541631</NSF_ID>
<StartDate>08/07/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394301</ZipCode>
<StreetAddress><![CDATA[77 MASSACHUSETTS AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~90000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project explored new directions in software synthesis---the use of computing power to help programmers write software. In order for the computer to help programmers write software, the machine needs to be told about the programmer's intent, and this is one of the big challenges in this field: describing the programmer's intent clearly and unambiguously in terms that a machine can understand can be just as hard as writing a program. The goal for this project was to explore new forms of interaction between the programmer and the software synthesizer that allowed programmers to easily offload some of the effort of programming to a synthesis tool.</p> <p><br />Intellectual Merit: <br />The main contribution of this work was to demonstrate a new technique that allows programmers to communicate their intent in ways that mimic the formalisms they use to communicate with each other. Specifically, we showed that we could automatically synthesize non-trivial pieces of code from textual descriptions of diagrams like the ones programmers use to describe a complicated algorithm on a whiteboard. These diagrams usually describe the behavior of the algorithm on some sample input; making sense of these diagrams, therefore, requires piecing together insights from different examples and generalizing from them. This work was published in the 2011 ACM Symposium on the Foundations of Software Engineering.</p> <p><br />Our work also explored a different way for programmers to interact with a synthesis engine in the context of a large existing piece of software. We found that when working with big software frameworks, programmers sometimes know that they need two components to interact with each other, but they don't know how to get these two components to work together. We found that given the names of the two components in question, it is possible to automatically find how to get them to interact by automatically analyzing how they are used in other places within the framework. The MIT news office produced a nice piece about this work which can be found here: <a href="http://web.mit.edu/newsoffice/2011/object-oriented-oracle-1007.html">http://web.mit.edu/newsoffice/2011/object-oriented-oracle-1007.html</a><br />The results were also published in the 2011 ACM sponsored OOPSLA-SPLASH conference.</p> <p>&nbsp;Broader Impact:</p> <p>The main impact of our tool work will be in improving programmer productivity. For example, in a controlled user study, we found that one of the prototypes we developed for this project could increase programmer productivity by close to 50%.</p><br> <p>            Last Modified: 01/09/2012<br>      Modified by: Armando&nbsp;Solar-Lezama</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project explored new directions in software synthesis---the use of computing power to help programmers write software. In order for the computer to help programmers write software, the machine needs to be told about the programmer's intent, and this is one of the big challenges in this field: describing the programmer's intent clearly and unambiguously in terms that a machine can understand can be just as hard as writing a program. The goal for this project was to explore new forms of interaction between the programmer and the software synthesizer that allowed programmers to easily offload some of the effort of programming to a synthesis tool.   Intellectual Merit:  The main contribution of this work was to demonstrate a new technique that allows programmers to communicate their intent in ways that mimic the formalisms they use to communicate with each other. Specifically, we showed that we could automatically synthesize non-trivial pieces of code from textual descriptions of diagrams like the ones programmers use to describe a complicated algorithm on a whiteboard. These diagrams usually describe the behavior of the algorithm on some sample input; making sense of these diagrams, therefore, requires piecing together insights from different examples and generalizing from them. This work was published in the 2011 ACM Symposium on the Foundations of Software Engineering.   Our work also explored a different way for programmers to interact with a synthesis engine in the context of a large existing piece of software. We found that when working with big software frameworks, programmers sometimes know that they need two components to interact with each other, but they don't know how to get these two components to work together. We found that given the names of the two components in question, it is possible to automatically find how to get them to interact by automatically analyzing how they are used in other places within the framework. The MIT news office produced a nice piece about this work which can be found here: http://web.mit.edu/newsoffice/2011/object-oriented-oracle-1007.html The results were also published in the 2011 ACM sponsored OOPSLA-SPLASH conference.   Broader Impact:  The main impact of our tool work will be in improving programmer productivity. For example, in a controlled user study, we found that one of the prototypes we developed for this project could increase programmer productivity by close to 50%.       Last Modified: 01/09/2012       Submitted by: Armando Solar-Lezama]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
