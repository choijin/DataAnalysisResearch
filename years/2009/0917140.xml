<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small:Reasoning about Specifications of Computations</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2009</AwardEffectiveDate>
<AwardExpirationDate>09/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>548843.00</AwardTotalIntnAmount>
<AwardAmount>568093</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The research will develop the foundations for a framework for reasoning about the formal properties of programming languages, compilers, software specifications, concurrent systems and other related computational systems. The framework will be based on two separate but interacting logics. One logic will be geared towards specifying and prototyping varied software systems. The second logic, referred to as the meta-logic, will provide flexible and powerful mechanisms for reasoning about specifications written in the first logic. The objects to be specified and reasoned about typically have complex syntactic structures, often involving some form of binding. Use will be made of a higher-order approach to representing syntactic structure in both logics to facilitate a natural treatment of such objects. Useful new logical capabilities will be exposed and embedded in actual computer systems that can be used in prototyping and reasoning tasks in the intended domains. The insights and the tools produced will be used pedagogically to expose high-school students and beginning undergraduates to important ideas in logic and computation. A close collaboration with a group of French researchers will provide an international dimension to the research, co-funded in part by the NSF Office of International Science and Engineering. In the long run, mechanized formal specification of (and reasoning about) programming languages has clear application to the improvement of software infrastructure in the real world: its correctness, reliability, maintainability, and security.</AbstractNarration>
<MinAmdLetterDate>07/30/2009</MinAmdLetterDate>
<MaxAmdLetterDate>05/17/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0917140</AwardID>
<Investigator>
<FirstName>Gopalan</FirstName>
<LastName>Nadathur</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gopalan Nadathur</PI_FULL_NAME>
<EmailAddress>ngopalan@umn.edu</EmailAddress>
<PI_PHON>6126261354</PI_PHON>
<NSF_ID>000220975</NSF_ID>
<StartDate>07/30/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Minnesota-Twin Cities</Name>
<CityName>Minneapolis</CityName>
<ZipCode>554552070</ZipCode>
<PhoneNumber>6126245599</PhoneNumber>
<StreetAddress>200 OAK ST SE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Minnesota</StateName>
<StateCode>MN</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MN05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>555917996</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF MINNESOTA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>117178941</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Minnesota-Twin Cities]]></Name>
<CityName>Minneapolis</CityName>
<StateCode>MN</StateCode>
<ZipCode>554552070</ZipCode>
<StreetAddress><![CDATA[200 OAK ST SE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Minnesota</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MN05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7298</Code>
<Text>International Research Collab</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>5918</Code>
<Text>FRANCE</Text>
</ProgramReference>
<ProgramReference>
<Code>5979</Code>
<Text>Europe and Eurasia</Text>
</ProgramReference>
<ProgramReference>
<Code>7218</Code>
<Text>RET SUPP-Res Exp for Tchr Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9217</Code>
<Text>NATNL RESERCH &amp; EDUCAT NETWORK</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~548843</FUND_OBLG>
<FUND_OBLG>2010~19250</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Formal specifications have a significant role to play in the development of reliable hardware and software systems. Such specifications can be used in multiple ways in this context: they can provide the means for articulating the structure of these systems, they can later function as the yardsticks for their implementation, and they can eventually be used as the basis for establishing that the implementations have desirable properties. Given the overall importance of safe and secure computational systems to modern society, there is an obvious need to enable the effective use of formal specifications in these various forms.<br /><br />The objective of this project was to develop the foundations of a framework that can provide automated support for the use of formal specifications in the manner described above. There were two key desiderata for the framework. First, it needed to embody methodologies and tools for articulating and animating specifications so that they can be used in analyzing and prototyping the systems they describe. Second, the framework needed to support techniques for formally reasoning about specifications and, through this process, about the computational systems that implement them. While formal specifications can take a number of different forms, the focus in this project was on ones that are presented in a syntax-directed and rule-based manner; this style of specification is very flexible has therefore gained widespread use in practical settings.<br /><br />The central innovation in the project was that of constructing the described framework around two different but interacting logics. One of these logics, called the specification logic, is intended to provide a precise, formal basis for presenting rule-based specifications. By carefully calibrating this logic, we can provide it a computational interpretation; this would yield a means for executing specifications written in the logic and thereby for prototyping the systems they define. The second logic, called the reasoning logic, is intended to embed the specification logic and to reason about it using powerful techniques such as induction and case analysis: the ability to reason richly about specifications would then flow from the corresponding ability to reason about the logic in which they are encoded. <br /><br />The research conducted under the project has successfully elaborated on this vision. The work began with a specification logic that had been designed in past, NSF-funded work and that possessed several of the desired properties. The initial focus was on developing a reasoning logic that is both sound and sufficiently expressive. Once a candidate logic had been articulated, it was analyzed to ensure that it possessed the important theoretical properties. The next step was to develop a framework around this logic. This work culminated in the implementation of the framework in a system called Abella. Abella was experimented with in a variety of reasoning tasks aimed at understanding and demonstrating its effectiveness. One of the applications considered was that of compiler verification. The results have shown significant promise for the framework in this area. Project research also explored variants to the specification and reasoning logics. An especially intriguing possibility that has been considered is that of using a popular dependently typed lambda calculus specification language called LF within the framework.<br /><br />The project has provided varied opportunities for developing human and educational resources related to the science of building robust and reliable software. A postdoctoral fellow who has since joined the faculty of ENS Cachan, a top-ranked French university, and a doctoral student who is now a Senior Industrial Logician at Rockwell Collins were mentored under the grant. The project has provided the context for two ongoing doctoral theses and one completed ...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Formal specifications have a significant role to play in the development of reliable hardware and software systems. Such specifications can be used in multiple ways in this context: they can provide the means for articulating the structure of these systems, they can later function as the yardsticks for their implementation, and they can eventually be used as the basis for establishing that the implementations have desirable properties. Given the overall importance of safe and secure computational systems to modern society, there is an obvious need to enable the effective use of formal specifications in these various forms.  The objective of this project was to develop the foundations of a framework that can provide automated support for the use of formal specifications in the manner described above. There were two key desiderata for the framework. First, it needed to embody methodologies and tools for articulating and animating specifications so that they can be used in analyzing and prototyping the systems they describe. Second, the framework needed to support techniques for formally reasoning about specifications and, through this process, about the computational systems that implement them. While formal specifications can take a number of different forms, the focus in this project was on ones that are presented in a syntax-directed and rule-based manner; this style of specification is very flexible has therefore gained widespread use in practical settings.  The central innovation in the project was that of constructing the described framework around two different but interacting logics. One of these logics, called the specification logic, is intended to provide a precise, formal basis for presenting rule-based specifications. By carefully calibrating this logic, we can provide it a computational interpretation; this would yield a means for executing specifications written in the logic and thereby for prototyping the systems they define. The second logic, called the reasoning logic, is intended to embed the specification logic and to reason about it using powerful techniques such as induction and case analysis: the ability to reason richly about specifications would then flow from the corresponding ability to reason about the logic in which they are encoded.   The research conducted under the project has successfully elaborated on this vision. The work began with a specification logic that had been designed in past, NSF-funded work and that possessed several of the desired properties. The initial focus was on developing a reasoning logic that is both sound and sufficiently expressive. Once a candidate logic had been articulated, it was analyzed to ensure that it possessed the important theoretical properties. The next step was to develop a framework around this logic. This work culminated in the implementation of the framework in a system called Abella. Abella was experimented with in a variety of reasoning tasks aimed at understanding and demonstrating its effectiveness. One of the applications considered was that of compiler verification. The results have shown significant promise for the framework in this area. Project research also explored variants to the specification and reasoning logics. An especially intriguing possibility that has been considered is that of using a popular dependently typed lambda calculus specification language called LF within the framework.  The project has provided varied opportunities for developing human and educational resources related to the science of building robust and reliable software. A postdoctoral fellow who has since joined the faculty of ENS Cachan, a top-ranked French university, and a doctoral student who is now a Senior Industrial Logician at Rockwell Collins were mentored under the grant. The project has provided the context for two ongoing doctoral theses and one completed Masters thesis. Five undergraduates have been involved in the work through supplemental funds provided...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
