<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Transforming Attitudes via Best Practices CS1</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/15/2009</AwardEffectiveDate>
<AwardExpirationDate>03/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>299953</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Harriet Taylor</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>EAGER: Transforming Attitudes via Best Practices CS1&lt;br/&gt;Beth Simon, Computer Science and Engineering&lt;br/&gt;UC San Diego&lt;br/&gt;&lt;br/&gt;For several years, the computing community has been concerned about dropping enrollments in computing majors and courses while the national need for well trained students in computing is increasing. To understand this crisis, many factors have been examined including the image of computing and the pedagogy and materials used in introductory classes. Over time, many instructors have experimented with classes that teach fundamental computing constructs and skills through more attractive applications and environments. There is some anecdotal evidence that this approach is effective and some studies that have been carried out with non-majors. This project presents a unique and timely opportunity to test this approach; in the past, finding viable and significantly large comparison groups to support the hypothesis has been a challenge.&lt;br/&gt;&lt;br/&gt;Intellectual merit: This EAGER project takes advantage of two existing comparison groups in introductory classes that are being taught the same two semesters at the University of California San Diego, one traditional and one using media computing. Students are surveyed to support the hypothesis that teaching computing through a more attractive domain such as media computing will result in better attitudes toward computing among both majors and students who take computing courses to complement their majors. The existence of two viable and significantly large comparison groups is fortunate and provides results of interest to the computer science education research community. This first round of data, expected to support the hypothesis that motivating context will improve attitudes toward engagement in computing classes and immediate intent of students to continue in computing classes and major, enables future projects that examine effects on more enduring retention.&lt;br/&gt;&lt;br/&gt;Broader impacts: This lays out a comparative study showing key data that will assist other computing departments in making decisions about curricular change to improve recruitment and retention. Specifically, the attitudes of students taking CS1 with media computation is analyzed and compared to students who are taking a traditional CS1 class absent the hypothesized motivating context. These results are informative to departments that seek an increased number of students applying to their departments, greater numbers of students succeeding in their programs, and overall a student body that is more engaged and positively inclined towards the value of computing in their career and in society. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>04/14/2009</MinAmdLetterDate>
<MaxAmdLetterDate>12/12/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0933635</AwardID>
<Investigator>
<FirstName>Elizabeth</FirstName>
<LastName>Simon</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Elizabeth A Simon</PI_FULL_NAME>
<EmailAddress>esimon@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585393247</PI_PHON>
<NSF_ID>000293099</NSF_ID>
<StartDate>04/14/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930934</ZipCode>
<StreetAddress><![CDATA[Office of Contract &amp; Grant A]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7382</Code>
<Text>Computing Ed for 21st Century</Text>
</ProgramElement>
<ProgramElement>
<Code>7494</Code>
<Text>CCLI-Type 1 (Exploratory)</Text>
</ProgramElement>
<ProgramReference>
<Code>7382</Code>
<Text>CISE MINORITY INS INFRASTUCTURE PROGRAM</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0409</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~250000</FUND_OBLG>
<FUND_OBLG>2011~49953</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>By transforming the introductory computer science programming course at the University of California, San Diego to adopt 3 curricular practices previously shown to positively impact student performance, we were able to increase student success:</p> <ul> <li>14% more students passed the course (compared to a 10-year historical average)</li> <li>31% more students stayed in the computer science major one year later (an increase from 51% to 82%)</li> </ul> <p>The three "best practices" adopted were:</p> <ul> <li>A "contextualized" approach, where the examples used to introduce programming concepts are more meaningful to students. &nbsp;In this case, we use a multimedia context, where students modify pixels in an image, using Java, to create and modify pictures of their own choosing. &nbsp;This helps students see programming as something relevant to their lives and emphasizes that programming supports creative processes.</li> <li>A lecture-hall environment where students don't just listen and take notes (known to be very ineffective in supporting learning). &nbsp;Instead, students do reading before class, and during class are posed questions designed to highlight common misunderstandings. &nbsp;Using the "Peer Instruction" process, students individual try a question (and vote using a "clicker"), then immediately discuss the question with 2 other students in the class for a few minutes. &nbsp;During this process they can clarify their thinking and practice analyzing program code. &nbsp;Finally, the entire class votes again, after which the instructor asks for students to volunteer to explain how they thought about the question to the entire class. &nbsp;The instructor can finally wrap up by sharing their thinking processes. &nbsp;This helps students learn not only how to write code, but to develop more expert-like skills in thinking about and analyzing code.</li> <li>Homework "programming assignments" done in teams of 2. &nbsp;Using the "pair programming" methodology, students completed all homework assignments as part of a pair, where the pair works on their assignment sitting in front of the same computer, taking turns typing -- but both engaged in thinking about the problem. &nbsp;Modelled after a process used in industry, pair programming seeks to support students in making sense of the program writing process and provides more of a team atmosphere that increases student success and seeks to combat the image of the lone programmer sitting by themselves and not needing to interact with others. &nbsp;Modern software is developed in large teams, and pair programming seeks to give students experience in working in a team early on.</li> </ul> <p>Additionally, little is known about the experiences students have doing programming assignments in their first computing course, but anecdotally, it is a challenging experience for them. &nbsp;This project also supported a series of interviews with students about their experiences doing programming assignments. &nbsp;Using a "grounded theory" methodology, we developed a preliminary theory describing how much students emotionally experience both positive and negative episodes of working on their programs, and how it impacts their beliefs about whether they are "good" at programming. &nbsp;These self-efficacy assessments likely impact students' decisions as to whether they should stay in the computer science major or not. &nbsp;We make suggestions to educators about how to help students manage and be reasonable about their assessments of whether they are "good" at computing -- letting them know that it's OK to make mistakes when programming.</p><br> <p>            Last Modified: 07/03/2014<br>      Modified by: Elizabeth&nbsp;A&nbsp;Simon</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ By transforming the introductory computer science programming course at the University of California, San Diego to adopt 3 curricular practices previously shown to positively impact student performance, we were able to increase student success:  14% more students passed the course (compared to a 10-year historical average) 31% more students stayed in the computer science major one year later (an increase from 51% to 82%)   The three "best practices" adopted were:  A "contextualized" approach, where the examples used to introduce programming concepts are more meaningful to students.  In this case, we use a multimedia context, where students modify pixels in an image, using Java, to create and modify pictures of their own choosing.  This helps students see programming as something relevant to their lives and emphasizes that programming supports creative processes. A lecture-hall environment where students don't just listen and take notes (known to be very ineffective in supporting learning).  Instead, students do reading before class, and during class are posed questions designed to highlight common misunderstandings.  Using the "Peer Instruction" process, students individual try a question (and vote using a "clicker"), then immediately discuss the question with 2 other students in the class for a few minutes.  During this process they can clarify their thinking and practice analyzing program code.  Finally, the entire class votes again, after which the instructor asks for students to volunteer to explain how they thought about the question to the entire class.  The instructor can finally wrap up by sharing their thinking processes.  This helps students learn not only how to write code, but to develop more expert-like skills in thinking about and analyzing code. Homework "programming assignments" done in teams of 2.  Using the "pair programming" methodology, students completed all homework assignments as part of a pair, where the pair works on their assignment sitting in front of the same computer, taking turns typing -- but both engaged in thinking about the problem.  Modelled after a process used in industry, pair programming seeks to support students in making sense of the program writing process and provides more of a team atmosphere that increases student success and seeks to combat the image of the lone programmer sitting by themselves and not needing to interact with others.  Modern software is developed in large teams, and pair programming seeks to give students experience in working in a team early on.   Additionally, little is known about the experiences students have doing programming assignments in their first computing course, but anecdotally, it is a challenging experience for them.  This project also supported a series of interviews with students about their experiences doing programming assignments.  Using a "grounded theory" methodology, we developed a preliminary theory describing how much students emotionally experience both positive and negative episodes of working on their programs, and how it impacts their beliefs about whether they are "good" at programming.  These self-efficacy assessments likely impact students' decisions as to whether they should stay in the computer science major or not.  We make suggestions to educators about how to help students manage and be reasonable about their assessments of whether they are "good" at computing -- letting them know that it's OK to make mistakes when programming.       Last Modified: 07/03/2014       Submitted by: Elizabeth A Simon]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
