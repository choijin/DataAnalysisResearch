<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Early Reliability Modeling and Prediction of Embedded Software Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>210000.00</AwardTotalIntnAmount>
<AwardAmount>210000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>To build high quality software, it is increasingly important for engineers to reason quantitatively about critical system properties, such as performance and reliability, as early as possible in the design process. Ideally, these properties are assessed before significant time and cost are expended on implementation. However, making useful predictions in early design stages is difficult at best due to the interplay among many relevant factors, such as complex properties of software components, effects of the firmware, and conflicts between desired system attributes. In this project, we focus on design-time evaluation of architectures with respect to one key attribute: reliability.  The approach we pursue will enable an engineer to build a multi-faceted, hierarchical model of a system and assess its reliability in an incremental, scalable fashion.  Moreover, we particularly focus on the area of embedded systems.  Embedded systems present a rich target of opportunity for this work as (1) they demand close interplay of software and execution substrate; (2) they are often unencumbered with legacy concerns, allowing easier introduction and exploration of new techniques such as the one we propose; (3) they often have stringent and complex requirements, yet are seldom approached from a software architectural perspective.  An extensive evaluation of our research focuses on two measures of interest: tractability (intended to address scalability issues existing in real, complex systems) and sensitivity (intended to address issues of confidence in our predictions under numerous design-time uncertainties).</AbstractNarration>
<MinAmdLetterDate>03/05/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/05/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0905665</AwardID>
<Investigator>
<FirstName>Leana</FirstName>
<LastName>Golubchik</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Leana Golubchik</PI_FULL_NAME>
<EmailAddress>leana@cs.usc.edu</EmailAddress>
<PI_PHON>2137404524</PI_PHON>
<NSF_ID>000445297</NSF_ID>
<StartDate>03/05/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Gaurav</FirstName>
<LastName>Sukhatme</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gaurav Sukhatme</PI_FULL_NAME>
<EmailAddress>gaurav@cs.usc.edu</EmailAddress>
<PI_PHON>2137400218</PI_PHON>
<NSF_ID>000489305</NSF_ID>
<StartDate>03/05/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Nenad</FirstName>
<LastName>Medvidovic</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nenad Medvidovic</PI_FULL_NAME>
<EmailAddress>neno@usc.edu</EmailAddress>
<PI_PHON>2137405579</PI_PHON>
<NSF_ID>000485161</NSF_ID>
<StartDate>03/05/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900890001</ZipCode>
<StreetAddress><![CDATA[University Park]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA37</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~210000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><!--StartFragment--><span style="font-size: x-small;"><span style="font-family: Consolas, 'Courier New', Courier;"><span>To build high quality software, it is increasingly important for engineers to reason quantitatively about critical system properties, such as performance and reliability, as early as possible in the design process. Ideally, these properties are assessed before significant time and cost are expended on system implementation. However, making useful predictions in early design stages is difficult at best due to the interplay among many relevant factors, such as complex properties of the components comprising the software system, effects of the underlying computing infrastructure (which has its own software and hardware components), and conflicts between desired system attributes. </span></span></span></p> <p><span style="font-family: Consolas, 'Courier New', Courier; font-size: x-small;">In this project, we have focused on design-time evaluation of software systems' architectures with respect to one key attribute: reliability. &nbsp;The approach we pursued enables an engineer to build a multi-faceted, hierarchical model of a system very early in its development, and to assess the system's reliability in an incremental, scalable fashion. &nbsp;The particular focus of this project has been on the area of concurrent embedded systems (such as systems involving fleets of mobile robots). Embedded systems have presented a rich target of opportunity for this project as (1) they demand close interplay of software and its execution substrate; (2) they are often unencumbered with legacy concerns, allowing easier introduction and exploration of new techniques such as the one we developed; (3) they often have stringent and complex requirements, yet are seldom approached from a software architectural perspective. &nbsp;An extensive evaluation of our research has focused on two measures of interest: tractability and sensitivity. Tractabiliity is intended to address scalability issues inherent in real, complex systems. &nbsp;On the other hand, sensitivity is&nbsp;intended to address issues of confidence in our predictions under numerous design-time uncertainties. </span></p> <p><span style="font-family: Consolas, 'Courier New', Courier; font-size: x-small;">In particular, we have evaluated the tractability and sensitivity of our predictions with respect to "ground-truth" models that were obtained using existing techniques. These existing techniques rely on software system implementations (i.e., on system information our models do not require, and in fact assume is not available). Furthermore, the existing techniques result in much larger (and thus less tractable) models than those produced by our technique. &nbsp;At the same time, our results show that our technique's predictive power is within a few percent of the ground truth. &nbsp;As an example, the attached figure shows the comparison of our technique (denoted as "SHARP") to the ground truth (denoted as "Flat Model") in the context of a large building-security system.</span></p> <p><span style="font-family: Consolas, 'Courier New', Courier; font-size: x-small;">The broader impact of this work includes improving multi-disciplinary education of future systems engineers as well as the foundation for creating a new multi-disciplinary community that is significantly better equipped to deal with enormous difficulties of highly-complex, large-scale system design, analysis, and implementation as compared to existing (more traditional) communities.</span></p><br> <p>            Last Modified: 10/10/2012<br>      Modified by: Nenad&nbsp;Medvidovic</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ To build high quality software, it is increasingly important for engineers to reason quantitatively about critical system properties, such as performance and reliability, as early as possible in the design process. Ideally, these properties are assessed before significant time and cost are expended on system implementation. However, making useful predictions in early design stages is difficult at best due to the interplay among many relevant factors, such as complex properties of the components comprising the software system, effects of the underlying computing infrastructure (which has its own software and hardware components), and conflicts between desired system attributes.   In this project, we have focused on design-time evaluation of software systems' architectures with respect to one key attribute: reliability.  The approach we pursued enables an engineer to build a multi-faceted, hierarchical model of a system very early in its development, and to assess the system's reliability in an incremental, scalable fashion.  The particular focus of this project has been on the area of concurrent embedded systems (such as systems involving fleets of mobile robots). Embedded systems have presented a rich target of opportunity for this project as (1) they demand close interplay of software and its execution substrate; (2) they are often unencumbered with legacy concerns, allowing easier introduction and exploration of new techniques such as the one we developed; (3) they often have stringent and complex requirements, yet are seldom approached from a software architectural perspective.  An extensive evaluation of our research has focused on two measures of interest: tractability and sensitivity. Tractabiliity is intended to address scalability issues inherent in real, complex systems.  On the other hand, sensitivity is intended to address issues of confidence in our predictions under numerous design-time uncertainties.   In particular, we have evaluated the tractability and sensitivity of our predictions with respect to "ground-truth" models that were obtained using existing techniques. These existing techniques rely on software system implementations (i.e., on system information our models do not require, and in fact assume is not available). Furthermore, the existing techniques result in much larger (and thus less tractable) models than those produced by our technique.  At the same time, our results show that our technique's predictive power is within a few percent of the ground truth.  As an example, the attached figure shows the comparison of our technique (denoted as "SHARP") to the ground truth (denoted as "Flat Model") in the context of a large building-security system.  The broader impact of this work includes improving multi-disciplinary education of future systems engineers as well as the foundation for creating a new multi-disciplinary community that is significantly better equipped to deal with enormous difficulties of highly-complex, large-scale system design, analysis, and implementation as compared to existing (more traditional) communities.       Last Modified: 10/10/2012       Submitted by: Nenad Medvidovic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
