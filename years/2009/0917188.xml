<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Collaborative Research: Trustworthy Hardware from Certified Behavioral Synthesis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>249995.00</AwardTotalIntnAmount>
<AwardAmount>299995</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
<PO_EMAI>jepstein@nsf.gov</PO_EMAI>
<PO_PHON>7032928338</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Electronic System Level  ( ESL ) designs , specified behaviorally using&lt;br/&gt;high-level languages such as SystemC , raise the level of hardware&lt;br/&gt;design abstraction . This approach crucially depends on behavioral&lt;br/&gt;synthesis , which compiles ESL designs to Register Transfer Level  ( RTL )&lt;br/&gt;designs . However , optimizations performed by synthesis tools make&lt;br/&gt;their implementation error-prone , undermining the trustworthiness of&lt;br/&gt;synthesized hardware . &lt;br/&gt;&lt;br/&gt;This research develops a mechanized infrastructure for certifying&lt;br/&gt;hardware designs generated by behavioral synthesis . It entails&lt;br/&gt;developing a certified  " reference flow " of synthesis transformations . &lt;br/&gt;The reference flow is disentangled from the workings of a production&lt;br/&gt;synthesis tool through new formal structure called  " clocked control&lt;br/&gt;data flow graph " ( CCDFG ) formalizing internal design representation . &lt;br/&gt;Given an ESL design and its synthesized RTL , certification entails the&lt;br/&gt;following automatic steps : ( 1 ) extracting initial CCDFG ; ( 2 ) applying&lt;br/&gt;certified  " primitive transformations " from the reference flow ,&lt;br/&gt;following the application sequence by the synthesis tool , and  ( 3 )&lt;br/&gt;checking equivalence between the transformed CCDFG and RTL . Theorem&lt;br/&gt;proving is used to certify primitive transformations off-line ;&lt;br/&gt;equivalence checking accounts for low-level transformations and&lt;br/&gt;manual tweaks . The correspondence between the transformed CCDFG and&lt;br/&gt;the synthesized hardware makes equivalence checking efficient . &lt;br/&gt;&lt;br/&gt;The project facilitates development of scalable and trustworthy&lt;br/&gt;hardware : adoption of ESL approach expedites design cycle while formal&lt;br/&gt;analysis guarantees trust in the synthesized hardware . The reference&lt;br/&gt;flow makes explicit key design invariants implicitly assumed by&lt;br/&gt;synthesis tools , facilitating development of more aggressive synthesis&lt;br/&gt;tools . Finally , the tight integration of two complementary techniques&lt;br/&gt;--- model checking and theorem proving  --- in the certification is&lt;br/&gt;applicable to other domains .</AbstractNarration>
<MinAmdLetterDate>09/18/2009</MinAmdLetterDate>
<MaxAmdLetterDate>05/09/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0917188</AwardID>
<Investigator>
<FirstName>Fei</FirstName>
<LastName>Xie</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Fei Xie</PI_FULL_NAME>
<EmailAddress>xie@cs.pdx.edu</EmailAddress>
<PI_PHON>5037252403</PI_PHON>
<NSF_ID>000492528</NSF_ID>
<StartDate>09/18/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Portland State University</Name>
<CityName>Portland</CityName>
<ZipCode>972070751</ZipCode>
<PhoneNumber>5037259900</PhoneNumber>
<StreetAddress>1600 SW 4th Ave</StreetAddress>
<StreetAddress2><![CDATA[Attn: Sponsored Projects Admin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052226800</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PORTLAND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052226800</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Portland State University]]></Name>
<CityName>Portland</CityName>
<StateCode>OR</StateCode>
<ZipCode>972070751</ZipCode>
<StreetAddress><![CDATA[1600 SW 4th Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7744</Code>
<Text>RAHSS</Text>
</ProgramReference>
<ProgramReference>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~80086</FUND_OBLG>
<FUND_OBLG>2010~169909</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<FUND_OBLG>2013~18000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This research develops a mechanized infrastructure for certifying hardware designs generated by behavioral synthesis. The work entails developing a certified 'reference flow' of synthesis transformations. The reference flow is disentangled from the workings of a production synthesis tool through new formal structure called 'clocked control data flow graph' (CCDFG) formalizing the semantics of the internal representation of a hardware design during the synthesis process. Given an Electronic System Level (ESL) design and its synthesized Register Transfer Level (RTL) implementation, certification of a behavioral synthesis flow entails the following automatic steps: (1) extracting the initial CCDFG from the high-level description; (2) applying certified sequence of 'primitive transformations' from the reference flow (which follow the application sequence by the synthesis tool), and (3) checking sequential equivalence between the transformed CCDFG and RTL. Theorem proving is used to certify primitive transformations off-line; equivalence checking accounts for low-level transformations and manual tweaks. The correspondence between the transformed CCDFG and the synthesized hardware makes equivalence checking efficient.</p> <p>By ensuring correct-by-construction hardware from behavioral synthesis, our framework obviates expensive case-by-case analysis of an RTL or netlist design. This permits the designer to focus on high-level behavioral properties. Our framework is independent of the internal workings of a specific synthesis tool, and can thus be applied to certify hardware designs synthesized by different tools from a broad class of ESL descriptions. This makes our approach particularly suitable for certifying security-critical hardware designs (which are often synthesized from domain-specific high-level languages). Our approach produces a certified reference flow, which identifies and makes explicit generic invariants that must be preserved by different behavioral synthesis transformations. This reference flow thereby provides a careful, formal specification for reliable, aggressive synthesis tools.</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/03/2014<br>      Modified by: Fei&nbsp;Xie</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This research develops a mechanized infrastructure for certifying hardware designs generated by behavioral synthesis. The work entails developing a certified 'reference flow' of synthesis transformations. The reference flow is disentangled from the workings of a production synthesis tool through new formal structure called 'clocked control data flow graph' (CCDFG) formalizing the semantics of the internal representation of a hardware design during the synthesis process. Given an Electronic System Level (ESL) design and its synthesized Register Transfer Level (RTL) implementation, certification of a behavioral synthesis flow entails the following automatic steps: (1) extracting the initial CCDFG from the high-level description; (2) applying certified sequence of 'primitive transformations' from the reference flow (which follow the application sequence by the synthesis tool), and (3) checking sequential equivalence between the transformed CCDFG and RTL. Theorem proving is used to certify primitive transformations off-line; equivalence checking accounts for low-level transformations and manual tweaks. The correspondence between the transformed CCDFG and the synthesized hardware makes equivalence checking efficient.  By ensuring correct-by-construction hardware from behavioral synthesis, our framework obviates expensive case-by-case analysis of an RTL or netlist design. This permits the designer to focus on high-level behavioral properties. Our framework is independent of the internal workings of a specific synthesis tool, and can thus be applied to certify hardware designs synthesized by different tools from a broad class of ESL descriptions. This makes our approach particularly suitable for certifying security-critical hardware designs (which are often synthesized from domain-specific high-level languages). Our approach produces a certified reference flow, which identifies and makes explicit generic invariants that must be preserved by different behavioral synthesis transformations. This reference flow thereby provides a careful, formal specification for reliable, aggressive synthesis tools.          Last Modified: 10/03/2014       Submitted by: Fei Xie]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
