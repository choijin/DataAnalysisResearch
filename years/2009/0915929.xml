<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Small: Collaborative Research: The Polynomial Method for Learning</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2009</AwardEffectiveDate>
<AwardExpirationDate>07/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>249999.00</AwardTotalIntnAmount>
<AwardAmount>299452</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Dmitri Maslov</SignBlockName>
<PO_EMAI>dmaslov@nsf.gov</PO_EMAI>
<PO_PHON>7032928910</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The broad goal of this line of research is to give a principled answer to the question, "What sort of data is efficiently learnable, and by what algorithms?" The current state-of-the-art in machine learning is that there is an overwhelming number of possible algorithms that can be tried on a new machine learning problem, with no clear understanding of which techniques can be expected to work on which problems.  &lt;br/&gt;&lt;br/&gt;Further, it is often the case that machine learning algorithms that work well "in theory" do not perform as well "in practice," and vice versa. The PIs have outlined a plan for resolving these difficulties, finding a unification of disparate methods via the Polynomial Method, and investigating how efficient this method can be. On a more immediate level the PIs will aim for broad impact through advising and guiding graduate students and widely disseminating research results.&lt;br/&gt;&lt;br/&gt;Specifically, the PIs will investigate the effectiveness of the "Polynomial Method" in machine learning theory. The PIs observe that nearly all learning algorithms, in theory and in practice, can be viewed as fitting a low-degree polynomial to data. The PIs plan to systematically develop this Polynomial Method of learning by working on the following three strands of research:&lt;br/&gt;&lt;br/&gt;1. Understand the extent to which low-degree polynomials can fit different natural types of target functions, under various data distributions and noise rates. This research involves novel methods from approximation theory and analysis.&lt;br/&gt;&lt;br/&gt;2. Develop new algorithmic methods for finding well-fitting polynomials when they exist.  Here the PIs will work to adapt results in geometry and probability for the purposes of identifying and eliminating irrelevant data.&lt;br/&gt;&lt;br/&gt;3. Delimit the effectiveness of the Polynomial Method. The PIs will show new results on the computational intractability of learning intersections of linear separators, and on learning linear separators with noise.</AbstractNarration>
<MinAmdLetterDate>07/27/2009</MinAmdLetterDate>
<MaxAmdLetterDate>07/13/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915929</AwardID>
<Investigator>
<FirstName>Rocco</FirstName>
<LastName>Servedio</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rocco A Servedio</PI_FULL_NAME>
<EmailAddress>rocco@cs.columbia.edu</EmailAddress>
<PI_PHON>2129397065</PI_PHON>
<NSF_ID>000232661</NSF_ID>
<StartDate>07/27/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049179401</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049179401</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName>NEW YORK</CityName>
<StateCode>NY</StateCode>
<ZipCode>100276902</ZipCode>
<StreetAddress><![CDATA[2960 Broadway]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7927</Code>
<Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~249999</FUND_OBLG>
<FUND_OBLG>2010~49453</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our project was motivated by the observation that across the wide range of different learning algorithms that are used in machine learning today, a common thread is that nearly all contemporary supervised learning algorithms (where a binary-valued function or prediction ruleis being learned from a sample of data points that have been labeled according to the prediction rule) employ a "Polynomial Threshold Function" as their hypothesis. &nbsp;A Polynomial Threshold Function, or PTF, is simply a prediction rule in which an example point x is labeled positive or negative according to whether a particular real polynomial p(x) takes a positive or negative value on input x. &nbsp;With this motivation, our project aimed to study polynomial threshold functions from several different points of view as they relate to learning, with the twin goals both of developing new effective learning algorithms using polynomial threshold functions, and of understanding the inherent limitations of learning using polynomial threshold functions. &nbsp;Below we describe two of the main results we achieved and their relation to learning.</p> <p><br />One of our results was a new bound on the "average sensitivity" of any degree-d polynomial threshold function (when the polynomial p(x_1,...,x_n) mentioned above has degree d). &nbsp;The average sensitivity of a binary-valued function measures the probability that the value of the function flips if a randomly chosen input bit x_i of a randomly chosen input bit-string x=(x_1,...,x_n) is flipped. &nbsp;We gave the first nontrivial upper bound on this probability, making progress on a conjecture from 1994. &nbsp;While this could be viewed as a pure probability or geometry result (the connection with geometry is that our result can equivalently be stated as bounding the size of a certain intersection between a degree-d polynomial surface and the Boolean hypercube), we also showed that our upper bound directly yields the first efficient algorithm for learning binary prediction rules that can be expressed as degree-d polynomial threshold functions when the labels of examples given to the learner have been corrupted with a challenging type of adversarial noise, as long as the examples themselves (the inputs x) are uniformly drawn from the Boolean hypercube.</p> <p><br />A second major result from our project was a "bad-news" result showing that it can be computationally hard to find a low-degree polynomial threshold function that correctly labels noisy data points. &nbsp;The positive result described in the previous paragraph shows that for a collection of data points that are uniformly chosen at random from the n-dimensional Boolean hypercube, there is a polynomial-time algorithm that can find a degree-d polynomial threshold functions whose accuracy in classifying those data points is nearly as good as that of the *best*possible degree-d polynomial threshold function classifier. &nbsp;In strong contrast to this, our second result shows that if the collection of labeled data points is chosen by an adversary, then even small amounts of noise in the labels of the points can make it computationally intractable to find a decent polynomial threshold function hypothesis.Under a widely accepted computational hardness conjecture (the "Unique Games" conjecture, a strengthening of the famous "P not equal to NP" conjecture), we show that even if there is a degree-d PTF that agrees with 99% of the examples in a data set of labeled examples, there is no polynomial-time algorithm that can in general find even a degree-d PTF that agrees with 51% of the data set.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/10/2012<br>      Modified by: Rocco&nbsp;A&nbsp;Servedio</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Our project was motivated by the observation that across the wide range of different learning algorithms that are used in machine learning today, a common thread is that nearly all contemporary supervised learning algorithms (where a binary-valued function or prediction ruleis being learned from a sample of data points that have been labeled according to the prediction rule) employ a "Polynomial Threshold Function" as their hypothesis.  A Polynomial Threshold Function, or PTF, is simply a prediction rule in which an example point x is labeled positive or negative according to whether a particular real polynomial p(x) takes a positive or negative value on input x.  With this motivation, our project aimed to study polynomial threshold functions from several different points of view as they relate to learning, with the twin goals both of developing new effective learning algorithms using polynomial threshold functions, and of understanding the inherent limitations of learning using polynomial threshold functions.  Below we describe two of the main results we achieved and their relation to learning.   One of our results was a new bound on the "average sensitivity" of any degree-d polynomial threshold function (when the polynomial p(x_1,...,x_n) mentioned above has degree d).  The average sensitivity of a binary-valued function measures the probability that the value of the function flips if a randomly chosen input bit x_i of a randomly chosen input bit-string x=(x_1,...,x_n) is flipped.  We gave the first nontrivial upper bound on this probability, making progress on a conjecture from 1994.  While this could be viewed as a pure probability or geometry result (the connection with geometry is that our result can equivalently be stated as bounding the size of a certain intersection between a degree-d polynomial surface and the Boolean hypercube), we also showed that our upper bound directly yields the first efficient algorithm for learning binary prediction rules that can be expressed as degree-d polynomial threshold functions when the labels of examples given to the learner have been corrupted with a challenging type of adversarial noise, as long as the examples themselves (the inputs x) are uniformly drawn from the Boolean hypercube.   A second major result from our project was a "bad-news" result showing that it can be computationally hard to find a low-degree polynomial threshold function that correctly labels noisy data points.  The positive result described in the previous paragraph shows that for a collection of data points that are uniformly chosen at random from the n-dimensional Boolean hypercube, there is a polynomial-time algorithm that can find a degree-d polynomial threshold functions whose accuracy in classifying those data points is nearly as good as that of the *best*possible degree-d polynomial threshold function classifier.  In strong contrast to this, our second result shows that if the collection of labeled data points is chosen by an adversary, then even small amounts of noise in the labels of the points can make it computationally intractable to find a decent polynomial threshold function hypothesis.Under a widely accepted computational hardness conjecture (the "Unique Games" conjecture, a strengthening of the famous "P not equal to NP" conjecture), we show that even if there is a degree-d PTF that agrees with 99% of the examples in a data set of labeled examples, there is no polynomial-time algorithm that can in general find even a degree-d PTF that agrees with 51% of the data set.             Last Modified: 09/10/2012       Submitted by: Rocco A Servedio]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
