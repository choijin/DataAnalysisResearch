<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Implementing a New Parallelization Model for Virtual Machines</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2010</AwardEffectiveDate>
<AwardExpirationDate>02/28/2017</AwardExpirationDate>
<AwardTotalIntnAmount>420749.00</AwardTotalIntnAmount>
<AwardAmount>468573</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Recent trends are rapidly shifting developer and user expectations of programming languages and application programs. Firstly, growing program complexity is increasing the demand for higher-level programming languages. Secondly, growing availability and accessibility of the Internet is driving the demand for a portable distribution format for software, along with a safe and secure runtime environment. High-level managed languages along with their associated runtimes are ideally suited to deliver the features required for future software systems. Managed language runtimes provide their features by performing a number of auxiliary tasks during program execution. However, these tasks often also interfere with normal program execution, create stalls, and ultimately result in degrading program performance. As future applications necessitate even more expensive features to improve speed and protect against more sophisticated software attacks, the overhead of performing such inline auxiliary tasks is likely to become prohibitive.&lt;br/&gt;&lt;br/&gt;This research develops a new virtual machine framework to exploit the opportunities provided by multiprocessor systems to effectively parallelize inline auxiliary tasks, and enable unhindered execution of the main program thread at runtime. The framework implements a novel parallelization model for virtual machines to allow each auxiliary task to execute in its own thread, and on a separate processing core. Each auxiliary thread is generated using program slicing to only calculate the state necessary for its correct execution. Thus, auxiliary threads execute independently, concurrently, and communicate their results to the main thread before they are due. Relieved of the stalls caused by the auxiliary tasks, the framework can allow accelerated program completion, and support even more beneficial and expensive tasks for future programs.</AbstractNarration>
<MinAmdLetterDate>03/03/2010</MinAmdLetterDate>
<MaxAmdLetterDate>05/30/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0953268</AwardID>
<Investigator>
<FirstName>Prasad</FirstName>
<LastName>Kulkarni</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Prasad A Kulkarni</PI_FULL_NAME>
<EmailAddress>prasadk@ku.edu</EmailAddress>
<PI_PHON>7858648819</PI_PHON>
<NSF_ID>000495187</NSF_ID>
<StartDate>03/03/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Kansas Center for Research Inc</Name>
<CityName>Lawrence</CityName>
<ZipCode>660457552</ZipCode>
<PhoneNumber>7858643441</PhoneNumber>
<StreetAddress>2385 IRVING HILL RD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Kansas</StateName>
<StateCode>KS</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>KS02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>076248616</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF KANSAS CENTER FOR RESEARCH, INC.</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007180078</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Kansas Center for Research Inc]]></Name>
<CityName>Lawrence</CityName>
<StateCode>KS</StateCode>
<ZipCode>660457552</ZipCode>
<StreetAddress><![CDATA[2385 IRVING HILL RD]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Kansas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>KS02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~420749</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<FUND_OBLG>2012~15824</FUND_OBLG>
<FUND_OBLG>2013~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The broad project goal was to employ free hardware cores on modern multi-core<br />processors to parallelize the execution of various &lsquo;auxiliary&rsquo; tasks in a<br />Java virtual machine (JVM) to improve overall program performance.<br /><br />Intellectual Merit:<br />The project researched and resolved several important issues and challenges,<br />produced new software and many novel insights and observations.<br /><br />1. We extended the slicer in IBM's WALA static analysis framework. Our static<br />slicer reliably generates slices for small to medium sized Java programs, but<br />faces memory resource constraints for larger programs. Tool details, results,<br />limitations, and future directions are documented in a Masters thesis.<br /><br />2. Program profiling is one of the most critical auxiliary tasks performed by<br />a VM. Profiling monitors past program execution and collects information<br />regarding execution behavior, which can then be employed by many<br />profile-guided optimizations (PGO). Current state of the art in VM-based<br />profilers is the 'reactive' approach where knowledge of the past program<br />behavior is used to guide optimizations for the remaining program execution.<br />Current reactive profiling mechanisms are slow, thereby delaying associated<br />transformations, and estimate future behavior based on the program&rsquo;s<br />immediate past, leading to potential misspeculation that limits the benefits<br />of compilation. To overcome the limitations of current approaches, we<br />proposed and studied a new online profiling strategy that uses early<br />determination of loop iteration bounds to predict future method hotness.<br />Results of this study are published in ACM VEE-2010.<br /><br />3. We conducted research to explore the most effective JIT compilation<br />strategies on multi-core and many-core machines with VM support for multiple<br />concurrent compiler threads. We studied the effects on performance of<br />increasing compiler aggressiveness for VMs with multiple compiler threads on<br />single/multi/many-core machines. Our results indicate that although more<br />aggressive JIT compilation policies show no benefits on single-core machines,<br />these can often improve program performance for multi/many-core machines.<br />However, accurately prioritizing JIT method compilations is crucial to<br />realize such benefits. Different aspects of this study are published at<br />INTERACT-2011, ACM OOPSLA-2011, and ACM TACO-2013.<br /><br />4. We further explored and quantified the implications of the fundamental<br />limitations of 'offline' and 'reactive' profiling techniques for three<br />important PGOs. The insights from this study are many and are reported in a<br />ACM TACO-2016 paper.<br /><br />5. Greater hardware resources can allow the VM to perform effective<br />optimization selection during just-in-time (JIT) compilation. Phase selection<br />is the process of customizing the applied set of compiler optimization phases<br />for individual functions or programs to improve performance of generated<br />code. We performed research to quantify the potential speedup that can be<br />gained by phase selection in online JIT environments. We also find that<br />existing state-of-the-art heuristic solutions are unable to realize these<br />performance gains, discuss possible causes, and show that exploiting<br />knowledge of optimization phase behavior can help improve such heuristic<br />solutions. This work is published in ACM VEE-2013.<br /><br />6. We studied the use of profile knowledge during different existing and<br />novel algorithms to improve code cache management in VMs. These results are<br />published in ACM LCTES-2016.<br /><br />7. We explored the impact of profiling data to customize the generated native<br />code during JIT compilation to different program inputs and improve<br />performance in the benchmark HotSpot Java VM. We studied how the amount and<br />precision of profile data affects generated code quality. These results will<br />be published in ACM LCTES-2017.<br /><br />Broader Impacts:<br />This award has produced many broader impact outcomes.<br /><br />1. This research enabled us to extend popular open-source platforms with new<br />features and advanced frameworks, including IBM's WALA, and Oracle's HotSpot<br />JVM.<br /><br />2. This project supported several undergraduate and graduate students,<br />including women, and has directly led to one Ph.D. and two student M.S.<br />The REU supplements with this award provided training and research<br />opportunities to seven undergraduate students at KU.<br /><br />3. This award enabled the PI to construct two graduate class, "Virtual<br />Machines" and "Security and Performance". The virtual machines class is now a<br />core graduate class in the computer systems area at KU. Research generated<br />from this project has been incorporated in these classes, as well as the PI's<br />"Compiler Construction" class.<br /><br />4. This award enabled the PI's participation in outreach activities,<br />including KU's Weekend of Engineering, and Summer training for two<br />high-school students.<br /><br />The PI is sincerely grateful to CISE and NSF's CAREER program from initiating<br />his faculty research program.</p><br> <p>            Last Modified: 05/30/2017<br>      Modified by: Prasad&nbsp;A&nbsp;Kulkarni</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The broad project goal was to employ free hardware cores on modern multi-core processors to parallelize the execution of various ?auxiliary? tasks in a Java virtual machine (JVM) to improve overall program performance.  Intellectual Merit: The project researched and resolved several important issues and challenges, produced new software and many novel insights and observations.  1. We extended the slicer in IBM's WALA static analysis framework. Our static slicer reliably generates slices for small to medium sized Java programs, but faces memory resource constraints for larger programs. Tool details, results, limitations, and future directions are documented in a Masters thesis.  2. Program profiling is one of the most critical auxiliary tasks performed by a VM. Profiling monitors past program execution and collects information regarding execution behavior, which can then be employed by many profile-guided optimizations (PGO). Current state of the art in VM-based profilers is the 'reactive' approach where knowledge of the past program behavior is used to guide optimizations for the remaining program execution. Current reactive profiling mechanisms are slow, thereby delaying associated transformations, and estimate future behavior based on the program?s immediate past, leading to potential misspeculation that limits the benefits of compilation. To overcome the limitations of current approaches, we proposed and studied a new online profiling strategy that uses early determination of loop iteration bounds to predict future method hotness. Results of this study are published in ACM VEE-2010.  3. We conducted research to explore the most effective JIT compilation strategies on multi-core and many-core machines with VM support for multiple concurrent compiler threads. We studied the effects on performance of increasing compiler aggressiveness for VMs with multiple compiler threads on single/multi/many-core machines. Our results indicate that although more aggressive JIT compilation policies show no benefits on single-core machines, these can often improve program performance for multi/many-core machines. However, accurately prioritizing JIT method compilations is crucial to realize such benefits. Different aspects of this study are published at INTERACT-2011, ACM OOPSLA-2011, and ACM TACO-2013.  4. We further explored and quantified the implications of the fundamental limitations of 'offline' and 'reactive' profiling techniques for three important PGOs. The insights from this study are many and are reported in a ACM TACO-2016 paper.  5. Greater hardware resources can allow the VM to perform effective optimization selection during just-in-time (JIT) compilation. Phase selection is the process of customizing the applied set of compiler optimization phases for individual functions or programs to improve performance of generated code. We performed research to quantify the potential speedup that can be gained by phase selection in online JIT environments. We also find that existing state-of-the-art heuristic solutions are unable to realize these performance gains, discuss possible causes, and show that exploiting knowledge of optimization phase behavior can help improve such heuristic solutions. This work is published in ACM VEE-2013.  6. We studied the use of profile knowledge during different existing and novel algorithms to improve code cache management in VMs. These results are published in ACM LCTES-2016.  7. We explored the impact of profiling data to customize the generated native code during JIT compilation to different program inputs and improve performance in the benchmark HotSpot Java VM. We studied how the amount and precision of profile data affects generated code quality. These results will be published in ACM LCTES-2017.  Broader Impacts: This award has produced many broader impact outcomes.  1. This research enabled us to extend popular open-source platforms with new features and advanced frameworks, including IBM's WALA, and Oracle's HotSpot JVM.  2. This project supported several undergraduate and graduate students, including women, and has directly led to one Ph.D. and two student M.S. The REU supplements with this award provided training and research opportunities to seven undergraduate students at KU.  3. This award enabled the PI to construct two graduate class, "Virtual Machines" and "Security and Performance". The virtual machines class is now a core graduate class in the computer systems area at KU. Research generated from this project has been incorporated in these classes, as well as the PI's "Compiler Construction" class.  4. This award enabled the PI's participation in outreach activities, including KU's Weekend of Engineering, and Summer training for two high-school students.  The PI is sincerely grateful to CISE and NSF's CAREER program from initiating his faculty research program.       Last Modified: 05/30/2017       Submitted by: Prasad A Kulkarni]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
