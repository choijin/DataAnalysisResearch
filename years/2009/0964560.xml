<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Medium:Simplifying Database Management with Automated Experimentation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>752602.00</AwardTotalIntnAmount>
<AwardAmount>783002</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Despite a number of recent efforts, current solutions for database administration tasks like tuning, troubleshooting, benchmarking, and capacity-planning remain far from satisfactory.  Database systems have many configuration parameters to control memory distribution, I/O optimization, costing of query plans, and other behavior.  Regular users and even expert database administrators struggle to tune these parameters for good performance. The inherent complexity makes it hard for these systems to gracefully handle uncertain and dynamically-changing workloads and diverse query mixes.  The .eX project addresses these challenges through a novel methodology called automated experiment-driven management which encapsulates key building blocks to automatically generate knowledge of system behavior for simplified administration and self-tuning.  These building blocks include techniques to:  (i)  characterize good system performance models, (ii)  plan experiments that generate data to learn and maintain these models efficiently under system and workload changes, and (iii)  make robust decisions using these models given the inherent uncertainty in how accurately the models capture the true underlying system behavior.  Apart from system administration, .eX's automated experiment-driven management can benefit applications like MapReduce computations, large-scale computational simulations, and keyword auctions in online advertising.  Two new courses for graduate and undergraduate students at Duke cover principles of automated experiment-driven management.  A fully-functional prototype of .eX is being developed and deployed in multiple settings to simplify database administration.  The source code of .eX will be released publicly and the technology will be migrated potentially to industrial-strength system administration products. Results from .eX will be disseminated via the project Web site (http://www.cs.duke.edu/~shivnath/dotex.html).</AbstractNarration>
<MinAmdLetterDate>03/31/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/10/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964560</AwardID>
<Investigator>
<FirstName>Kameshwar</FirstName>
<LastName>Munagala</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kameshwar Munagala</PI_FULL_NAME>
<EmailAddress>kamesh@cs.duke.edu</EmailAddress>
<PI_PHON>9196843030</PI_PHON>
<NSF_ID>000487108</NSF_ID>
<StartDate>03/31/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Shivnath</FirstName>
<LastName>Babu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Shivnath Babu</PI_FULL_NAME>
<EmailAddress>shivnath@cs.duke.edu</EmailAddress>
<PI_PHON>9196606579</PI_PHON>
<NSF_ID>000488390</NSF_ID>
<StartDate>03/31/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Duke University</Name>
<CityName>Durham</CityName>
<ZipCode>277054010</ZipCode>
<PhoneNumber>9196843030</PhoneNumber>
<StreetAddress>2200 W. Main St, Suite 710</StreetAddress>
<StreetAddress2><![CDATA[Erwin Square]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>044387793</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DUKE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>044387793</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Duke University]]></Name>
<CityName>Durham</CityName>
<StateCode>NC</StateCode>
<ZipCode>277054010</ZipCode>
<StreetAddress><![CDATA[2200 W. Main St, Suite 710]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~156764</FUND_OBLG>
<FUND_OBLG>2011~162220</FUND_OBLG>
<FUND_OBLG>2012~229935</FUND_OBLG>
<FUND_OBLG>2013~234083</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project involved developing the principles of experiment-driven system &nbsp;management and applying them to critical system-management problems. As part of this activity, several novel theoretical principles were developed and applied. The key problems addressed &nbsp;included tuning of configuration parameters in MapReduce systems, resource allocation in database systems, and &nbsp;scheduling. As part of this project, a software platform that implements these principles was developed, and testing and validation of the principles were performed using this platform. The general-purpose software platform was called Flex and the specific instantiation of Flex in the context of MapReduce was called Starfish. These platforms were used to test and validate the principles &nbsp;that we developed for tuning of configuration parameters in MapReduce &nbsp;systems, resource allocation in database systems, and &nbsp;scheduling.</p> <p><span>As part of this project, several algorithms were developed to plan experiments for several &nbsp;</span><span>long-standing problems that are difficult &nbsp;</span><span>to solve without using a platform like Flex: (i) identifying&nbsp;</span><span>high-impact configuration parameters and their interactions&nbsp;</span><span>in database tuning; (ii) correcting poor decisions made&nbsp;</span><span>by database query optimizers; (iii) modeling &nbsp;</span><span>interactions among concurrent queries for high-throughput&nbsp;</span><span>scheduling;&nbsp;</span><span>(iv) generating approximate response surface maps efficiently during system&nbsp;</span><span>benchmarking;&nbsp;</span><span>(v) learning performance models for new scientific applications;&nbsp;</span><span>and (vi) detecting corruption in stored data. &nbsp;</span><span>Other researchers have since used this principle in&nbsp;</span><span>capacity planning for datacenters and in resource &nbsp;</span><span>provisioning for cloud applications.</span></p> <p><span>Database and MapReduce </span><span>systems have a large number of configuration</span><br /><span>parameters that control memory distribution, I/O optimization, costing&nbsp;</span><span>of query plans, parallelism, aspects of logging, recovery, and&nbsp;</span><span>other behavior. Even expert database administrators&nbsp;</span><span>struggle to tune these parameters for good performance. </span><span>&nbsp;Flex has been used to&nbsp;</span><span>automate the task of identifying a good configuration &nbsp;</span><span>for these parameters by planning and conducting a &nbsp;</span><span>small number of experiments iteratively. An experiment&nbsp;</span><span>runs the database workload with a chosen configuration,&nbsp;</span><span>and monitors the resulting performance which can be hard &nbsp;</span><span>to predict beforehand. This work uses a &nbsp;</span><span>statistical model called Gaussian processes to estimate the utility&nbsp;</span><span>of potential experiments based on information from past experiments.</span></p> <p>The Flex platform has been made available to practitioners and other researchers. &nbsp;Starfish, for example, was released as open-source software, and has &nbsp;generated considerable interest among companies and researchers who are &nbsp;either using Starfish (AMD, Univ. of Waterloo, Yahoo) or have &nbsp;indicated possible usage in the near future (Hitachi, HP).</p><br> <p>            Last Modified: 02/09/2016<br>      Modified by: Kameshwar&nbsp;Munagala</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project involved developing the principles of experiment-driven system  management and applying them to critical system-management problems. As part of this activity, several novel theoretical principles were developed and applied. The key problems addressed  included tuning of configuration parameters in MapReduce systems, resource allocation in database systems, and  scheduling. As part of this project, a software platform that implements these principles was developed, and testing and validation of the principles were performed using this platform. The general-purpose software platform was called Flex and the specific instantiation of Flex in the context of MapReduce was called Starfish. These platforms were used to test and validate the principles  that we developed for tuning of configuration parameters in MapReduce  systems, resource allocation in database systems, and  scheduling.  As part of this project, several algorithms were developed to plan experiments for several  long-standing problems that are difficult  to solve without using a platform like Flex: (i) identifying high-impact configuration parameters and their interactions in database tuning; (ii) correcting poor decisions made by database query optimizers; (iii) modeling  interactions among concurrent queries for high-throughput scheduling; (iv) generating approximate response surface maps efficiently during system benchmarking; (v) learning performance models for new scientific applications; and (vi) detecting corruption in stored data.  Other researchers have since used this principle in capacity planning for datacenters and in resource  provisioning for cloud applications.  Database and MapReduce systems have a large number of configuration parameters that control memory distribution, I/O optimization, costing of query plans, parallelism, aspects of logging, recovery, and other behavior. Even expert database administrators struggle to tune these parameters for good performance.  Flex has been used to automate the task of identifying a good configuration  for these parameters by planning and conducting a  small number of experiments iteratively. An experiment runs the database workload with a chosen configuration, and monitors the resulting performance which can be hard  to predict beforehand. This work uses a  statistical model called Gaussian processes to estimate the utility of potential experiments based on information from past experiments.  The Flex platform has been made available to practitioners and other researchers.  Starfish, for example, was released as open-source software, and has  generated considerable interest among companies and researchers who are  either using Starfish (AMD, Univ. of Waterloo, Yahoo) or have  indicated possible usage in the near future (Hitachi, HP).       Last Modified: 02/09/2016       Submitted by: Kameshwar Munagala]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
