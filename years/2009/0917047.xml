<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Enabling Practical Cross-domain Logic-based Access Control</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>435628.00</AwardTotalIntnAmount>
<AwardAmount>443628</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Access control is one of the key aspects of information security.  In&lt;br/&gt;the past decade and a half, significant progress has been made in&lt;br/&gt;increasing the assurance and expressiveness offered by access-control&lt;br/&gt;systems, in large part through the use of formal logics to model or&lt;br/&gt;implement these systems.&lt;br/&gt;&lt;br/&gt;A particular challenge in building access-control systems is to allow&lt;br/&gt;delegation between domains that use different authorization logics.&lt;br/&gt;This project focuses on developing a framework for interfacing&lt;br/&gt;different, mutually incompatible authorization logics.  The framework&lt;br/&gt;provides an interface for communication between logics via a very&lt;br/&gt;small set of primitives that imposes no fundamental constraints on the&lt;br/&gt;design of the logics that use it.  Part of this framework will be an&lt;br/&gt;architecture to facilitate the automated construction of proofs of&lt;br/&gt;access.&lt;br/&gt;&lt;br/&gt;Another barrier to implementing logic-based access-control systems is&lt;br/&gt;that substantial effort is typically required to retrofit existing&lt;br/&gt;systems to support the use of theorem provers, proof checkers, and&lt;br/&gt;associated infrastructure.  This project will investigate several&lt;br/&gt;approaches to solving this problem, including automated program&lt;br/&gt;rewriting and automated construction of lightweight theorem provers&lt;br/&gt;and proof checkers.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/11/2009</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0917047</AwardID>
<Investigator>
<FirstName>Ljudevit</FirstName>
<LastName>Bauer</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ljudevit Bauer</PI_FULL_NAME>
<EmailAddress>lbauer@cmu.edu</EmailAddress>
<PI_PHON>4122688746</PI_PHON>
<NSF_ID>000241094</NSF_ID>
<StartDate>09/11/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~435628</FUND_OBLG>
<FUND_OBLG>2010~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Access control is one of the key aspects of information security. &nbsp;In the past decade and a half, significant progress has been made in increasing the assurance and expressiveness offered by access-control systems, in large part through the use of formal logics. &nbsp;When used to model a system, such logics can confirm that the system exhibits various desirable correctness properties, e.g., that its decision procedure will never erroneously permit an access if such an access is not consistent with access-control policy. &nbsp;These guarantees can be even stronger when the gap between model and system is bridged by making the logical infrastructure part of the system, e.g., when reference monitors require proofs that access requests are consistent with policy.</p> <p><br />Much of the work on logic-based access control has been in developing expressive and flexible access-control logics. &nbsp;Each of these logics has advantages and disadvantages and is well suited to describe some set of access-control scenarios. &nbsp;Because of this, and for administrative reasons, organizations with different needs will adopt different, possibly incompatible, access-control logics. &nbsp;A particular challenge in building access-control systems is how to allow delegation between domains that use different authorization logics.</p> <p>Instead of trying to develop the authorization logic that all domains should use, this project focused on developing a framework for interfacing different, mutually incompatible authorization logics. &nbsp;The framework we developed provides an interface for communication between logics via a very small set of primitives that imposes no fundamental constraints on the design or nature of the logics that use it. &nbsp;We showed that our framework had desirable theoretical properties -- e.g., that it doesn't interfere with the consistency of the logics that use it -- and developed a modular, efficient proof checker.</p> <p>Beyond broadening the reach of logic-based access control to more realistic, cross-domain settings, the work carried out as part of this project has had several other forms of impact. &nbsp;The prototype proof checker developed for this project showed itself to be a useful infrastructure component for several efforts to build modern access-control infrastructure, including in the context of a distributed, peer-to-peer file system and for (cyber-)physical access to office space via smartphones. Efforts to better understand security policy enforcement in distributed settings led to advances in formal modeling of and reasoning about run-time enforcement in distributed systems. &nbsp;Research carried out as part of this project also led to establishment of several international collaborations, and hence broad dissemination of results, both within and beyond academia.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/01/2013<br>      Modified by: Ljudevit&nbsp;Bauer</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Access control is one of the key aspects of information security.  In the past decade and a half, significant progress has been made in increasing the assurance and expressiveness offered by access-control systems, in large part through the use of formal logics.  When used to model a system, such logics can confirm that the system exhibits various desirable correctness properties, e.g., that its decision procedure will never erroneously permit an access if such an access is not consistent with access-control policy.  These guarantees can be even stronger when the gap between model and system is bridged by making the logical infrastructure part of the system, e.g., when reference monitors require proofs that access requests are consistent with policy.   Much of the work on logic-based access control has been in developing expressive and flexible access-control logics.  Each of these logics has advantages and disadvantages and is well suited to describe some set of access-control scenarios.  Because of this, and for administrative reasons, organizations with different needs will adopt different, possibly incompatible, access-control logics.  A particular challenge in building access-control systems is how to allow delegation between domains that use different authorization logics.  Instead of trying to develop the authorization logic that all domains should use, this project focused on developing a framework for interfacing different, mutually incompatible authorization logics.  The framework we developed provides an interface for communication between logics via a very small set of primitives that imposes no fundamental constraints on the design or nature of the logics that use it.  We showed that our framework had desirable theoretical properties -- e.g., that it doesn't interfere with the consistency of the logics that use it -- and developed a modular, efficient proof checker.  Beyond broadening the reach of logic-based access control to more realistic, cross-domain settings, the work carried out as part of this project has had several other forms of impact.  The prototype proof checker developed for this project showed itself to be a useful infrastructure component for several efforts to build modern access-control infrastructure, including in the context of a distributed, peer-to-peer file system and for (cyber-)physical access to office space via smartphones. Efforts to better understand security policy enforcement in distributed settings led to advances in formal modeling of and reasoning about run-time enforcement in distributed systems.  Research carried out as part of this project also led to establishment of several international collaborations, and hence broad dissemination of results, both within and beyond academia.                Last Modified: 12/01/2013       Submitted by: Ljudevit Bauer]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
