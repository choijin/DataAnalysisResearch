<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Medium: Collaborative Research: Frankencamera - an open-source Camera for Research and Teaching in Computational Photography</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/01/2010</AwardEffectiveDate>
<AwardExpirationDate>03/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>437820.00</AwardTotalIntnAmount>
<AwardAmount>437820</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Ephraim Glinert</SignBlockName>
<PO_EMAI>eglinert@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computational photography refers broadly to sensing strategies and algorithmic techniques that enhance or extend the capabilities of digital photography.  Representative techniques include high dynamic range (HDR) imaging, flash-noflash imaging, panoramic stitching, and refocusable photography.  Although interest in computational photography has steadily increased among graphics and vision researchers, progress has been hampered by the lack of a portable, programmable camera platform with enough image quality and computing power to be used outside the laboratory, i.e. for everyday photography. Similarly, courses in computational photography are offered in dozens of universities nationwide.  However, none of these courses provide students with a camera on which they can implement the algorithms currently being published in the literature.&lt;br/&gt;&lt;br/&gt;To address these two problems, we are building an open-source camera platform (called Frankencamera) that is portable, self-powered, connected to the Internet, and accommodates SLR-quality lenses and sensors.  We also describe a software architecture based on Linux, and an API with bindings for C++, that permits control and synchronization of camera functions at the microsecond time scale.  Our API includes pre-capture functions like metering and focusing, an image post-processing pipeline, a user interface toolkit for the viewfinder, and support for current and future I/O devices.  Our plan is to distribute this platform at minimal cost to researchers and university instructors nationwide, using the computational photography courses they already teach as a natural distribution vehicle.  Instructors will apply to us to be part of this outreach program, and a standing committee will evaluate these applications.  Our long-term goal is to spur creation of a community of photographer-programmers who write plug-ins and apps for cameras.</AbstractNarration>
<MinAmdLetterDate>03/31/2010</MinAmdLetterDate>
<MaxAmdLetterDate>02/24/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964218</AwardID>
<Investigator>
<FirstName>Marc</FirstName>
<LastName>Levoy</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Marc S Levoy</PI_FULL_NAME>
<EmailAddress>levoy@cs.stanford.edu</EmailAddress>
<PI_PHON>6507254089</PI_PHON>
<NSF_ID>000150439</NSF_ID>
<StartDate>03/31/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Mark</FirstName>
<LastName>Horowitz</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mark A Horowitz</PI_FULL_NAME>
<EmailAddress>horowitz@stanford.edu</EmailAddress>
<PI_PHON>6507253707</PI_PHON>
<NSF_ID>000235625</NSF_ID>
<StartDate>03/31/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009214214</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LELAND STANFORD JUNIOR UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009214214</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stanford University]]></Name>
<CityName>Stanford</CityName>
<StateCode>CA</StateCode>
<ZipCode>943052004</ZipCode>
<StreetAddress><![CDATA[450 Jane Stanford Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7453</Code>
<Text>GRAPHICS &amp; VISUALIZATION</Text>
</ProgramElement>
<ProgramReference>
<Code>7453</Code>
<Text>GRAPHICS &amp; VISUALIZATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~142590</FUND_OBLG>
<FUND_OBLG>2011~145562</FUND_OBLG>
<FUND_OBLG>2012~149668</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Photography has under gone an enormous change over the past two decades, as we have shifted from using film to using silicon as our image sensing media.&nbsp; Original &ldquo;digital&rdquo; cameras were replica of &ldquo;analog&rdquo; film camera &ndash; the only change was in the material used in light sensing.&nbsp; Yet, the fact that the image was now essentially a collection of digital values opened up the ability to compute on these values before presenting them to the user, enabling one to &ldquo;compute&rdquo; the final image.&nbsp; This greatly increased the capabilities of the photographer, and led to the creation of a new research area called computation photography.</p> <p>&nbsp;Our grant was to further research in this area by creating new computational photography algorithms, and programmable camera platforms that would allow researchers to try these ideas out in the &ldquo;field.&rdquo;&nbsp; This research has led to a number of user programmable cameras which we called Frankencameras, and software systems that work with them.&nbsp; The need to let the user have tighter control of the image led to the development of Fcam, a new camera application interface.&nbsp; This interface has been adopted by Google (Gcam) and is in their current release of Android.&nbsp; We also created Halide, a new language which made it much easier for users to create high-performance imaging applications.&nbsp; The key insight behind Halide is to separate the description of the algorithm from the scheduling optimizations (loop unrolling, exchange, fusions, vectorization, etc.) that are needed to achieve good performance.&nbsp; Halide has also been picked up and is being used in industry.</p> <p>&nbsp;With the ability for application designers to create interesting new applications, in the fourth version of the Frankencamera, the F4, we merged a high-performance image sensor, micro 4/3 lens, Zynq FPGA, and Android system to create an Android camera where an application programmer can program the image signal processor as well as the code running on the application processors.&nbsp; This allows a designer to create a new computational photography application, and try it out on his &ldquo;camera&rdquo; in the same day.</p><br> <p>            Last Modified: 08/11/2014<br>      Modified by: Marc&nbsp;S&nbsp;Levoy</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Photography has under gone an enormous change over the past two decades, as we have shifted from using film to using silicon as our image sensing media.  Original "digital" cameras were replica of "analog" film camera &ndash; the only change was in the material used in light sensing.  Yet, the fact that the image was now essentially a collection of digital values opened up the ability to compute on these values before presenting them to the user, enabling one to "compute" the final image.  This greatly increased the capabilities of the photographer, and led to the creation of a new research area called computation photography.   Our grant was to further research in this area by creating new computational photography algorithms, and programmable camera platforms that would allow researchers to try these ideas out in the "field."  This research has led to a number of user programmable cameras which we called Frankencameras, and software systems that work with them.  The need to let the user have tighter control of the image led to the development of Fcam, a new camera application interface.  This interface has been adopted by Google (Gcam) and is in their current release of Android.  We also created Halide, a new language which made it much easier for users to create high-performance imaging applications.  The key insight behind Halide is to separate the description of the algorithm from the scheduling optimizations (loop unrolling, exchange, fusions, vectorization, etc.) that are needed to achieve good performance.  Halide has also been picked up and is being used in industry.   With the ability for application designers to create interesting new applications, in the fourth version of the Frankencamera, the F4, we merged a high-performance image sensor, micro 4/3 lens, Zynq FPGA, and Android system to create an Android camera where an application programmer can program the image signal processor as well as the code running on the application processors.  This allows a designer to create a new computational photography application, and try it out on his "camera" in the same day.       Last Modified: 08/11/2014       Submitted by: Marc S Levoy]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
