<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC:  Medium:  Higher-Level Abstractions for Trustworthy Federated Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>1125000.00</AwardTotalIntnAmount>
<AwardAmount>1125000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project studies higher-level abstractions for constructing distributed&lt;br/&gt;systems that integrate information and computation across administrative and&lt;br/&gt;trust domains. Current practice does not offer general, principled techniques&lt;br/&gt;for implementing these systems securely. To develop these techniques,&lt;br/&gt;fundamental problems of security, consistency, performance, and system&lt;br/&gt;evolution are being explored. Problems studied include automatic, adaptive,&lt;br/&gt;secure partitioning of programs and data across the nodes of a distributed&lt;br/&gt;system; new authorization logics for efficiently managing trust&lt;br/&gt;relationships in a distributed system; new methods for increasing&lt;br/&gt;performance of distributed systems while guaranteeing strong data&lt;br/&gt;consistency; and new ways to securely and consistently evolve the structure&lt;br/&gt;of persistent information.&lt;br/&gt;&lt;br/&gt;These topics are being studied in the context of Fabric, a new platform for&lt;br/&gt;secure distributed computation. Fabric is intended to support secure&lt;br/&gt;integration of information systems, a valuable capability for many application&lt;br/&gt;domains, including in medicine, finance, education, government, and the&lt;br/&gt;military.  For example, good methods for integrating distributed information&lt;br/&gt;systems would support secure sharing of medical records between institutions.</AbstractNarration>
<MinAmdLetterDate>07/27/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/16/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964409</AwardID>
<Investigator>
<FirstName>Fred</FirstName>
<LastName>Schneider</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Fred B Schneider</PI_FULL_NAME>
<EmailAddress>fbs@cs.cornell.edu</EmailAddress>
<PI_PHON>6072559221</PI_PHON>
<NSF_ID>000153585</NSF_ID>
<StartDate>07/27/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Myers</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrew C Myers</PI_FULL_NAME>
<EmailAddress>andru@cs.cornell.edu</EmailAddress>
<PI_PHON>6072558597</PI_PHON>
<NSF_ID>000385587</NSF_ID>
<StartDate>07/27/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cornell University</Name>
<CityName>Ithaca</CityName>
<ZipCode>148502820</ZipCode>
<PhoneNumber>6072555014</PhoneNumber>
<StreetAddress>373 Pine Tree Road</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY23</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>872612445</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CORNELL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002254837</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Cornell University]]></Name>
<CityName>Ithaca</CityName>
<StateCode>NY</StateCode>
<ZipCode>148502820</ZipCode>
<StreetAddress><![CDATA[373 Pine Tree Road]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY23</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~266886</FUND_OBLG>
<FUND_OBLG>2011~276200</FUND_OBLG>
<FUND_OBLG>2012~285911</FUND_OBLG>
<FUND_OBLG>2013~296003</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Almost everything we do depends on networked computing systems that store and share information, much of which is sensitive. However, the incremental evolution of today's commercial software platforms is not leading toward making the systems we depend on secure. The people who design and build software and hardware systems have no principled way to know if the systems they are building will keep information confidential or prevent it from being damaged by attackers. As a result, an immense amount of time and energy goes into monitoring and patching holes in insecure systems.<br /><br />This project explored a fundamentally different approach in which distributed systems are built to be secure by construction. The Fabric system developed with support from this grant is the realization of this approach. Fabric gives programmers a simpler way to build distributed systems because data and computation anywhere on the network can be programmed as if they were objects in a fairly standard object-oriented language like Java.&nbsp; The biggest difference from Java is that programmers also specify security policies as they program, and the Fabric system automatically checks these programs to make sure they handle information securely.&nbsp; Software developers receive guidance about whether the software they are writing is secure even before the program runs. Many modern systems combine software, services, and data from multiple sources; Fabric offers a principled way to ship data, computation, and code around in the system while still offering end-to-end security assurance through a combination of design-time and run-time security enforcement mechanisms.<br /><br />Some of the specific technical contributions of this project were the following: 1) a demonstration that it is possible to use program analysis and optimization methods to automatically partition high-level object-oriented code onto a distributed system to minimize communication and avoid communication delays. 2) New methods for controlling information leakage via timing channels, in which adversaries learn information by timing how long a system takes to respond; these methods have been shown to work and to be needed at both the software and hardware levels of the system 3) More expressive policies for capturing and enforcing the security requirements of distributed systems, including policies regarding the persistence of information and policies for authorization 4) new methods for secure computation in systems that replicate computation and data to improve reliability, as modern distributed systems frequently do 5) new methods for automatically and accurately locating the mistakes in programs that lead to potential security vulnerabilities.<br /><br />This project has also resulted in the creation of a significant amount of software, which has been made available to the public at the Fabric web site (http://www.cs.cornell.edu/projects/fabric), the SHErrLoc web site (http://www.cs.cornell.edu/projects/sherrloc), the Polyglot web site (http://www.cs.cornell.edu/projects/polyglot), and the SecVerilog web site (http://www.cs.cornell.edu/projects/secverilog). This software is available for use by the public and by other researchers.</p><br> <p>            Last Modified: 12/01/2015<br>      Modified by: Andrew&nbsp;C&nbsp;Myers</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Almost everything we do depends on networked computing systems that store and share information, much of which is sensitive. However, the incremental evolution of today's commercial software platforms is not leading toward making the systems we depend on secure. The people who design and build software and hardware systems have no principled way to know if the systems they are building will keep information confidential or prevent it from being damaged by attackers. As a result, an immense amount of time and energy goes into monitoring and patching holes in insecure systems.  This project explored a fundamentally different approach in which distributed systems are built to be secure by construction. The Fabric system developed with support from this grant is the realization of this approach. Fabric gives programmers a simpler way to build distributed systems because data and computation anywhere on the network can be programmed as if they were objects in a fairly standard object-oriented language like Java.  The biggest difference from Java is that programmers also specify security policies as they program, and the Fabric system automatically checks these programs to make sure they handle information securely.  Software developers receive guidance about whether the software they are writing is secure even before the program runs. Many modern systems combine software, services, and data from multiple sources; Fabric offers a principled way to ship data, computation, and code around in the system while still offering end-to-end security assurance through a combination of design-time and run-time security enforcement mechanisms.  Some of the specific technical contributions of this project were the following: 1) a demonstration that it is possible to use program analysis and optimization methods to automatically partition high-level object-oriented code onto a distributed system to minimize communication and avoid communication delays. 2) New methods for controlling information leakage via timing channels, in which adversaries learn information by timing how long a system takes to respond; these methods have been shown to work and to be needed at both the software and hardware levels of the system 3) More expressive policies for capturing and enforcing the security requirements of distributed systems, including policies regarding the persistence of information and policies for authorization 4) new methods for secure computation in systems that replicate computation and data to improve reliability, as modern distributed systems frequently do 5) new methods for automatically and accurately locating the mistakes in programs that lead to potential security vulnerabilities.  This project has also resulted in the creation of a significant amount of software, which has been made available to the public at the Fabric web site (http://www.cs.cornell.edu/projects/fabric), the SHErrLoc web site (http://www.cs.cornell.edu/projects/sherrloc), the Polyglot web site (http://www.cs.cornell.edu/projects/polyglot), and the SecVerilog web site (http://www.cs.cornell.edu/projects/secverilog). This software is available for use by the public and by other researchers.       Last Modified: 12/01/2015       Submitted by: Andrew C Myers]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
