<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Collaborative Research: Privacy-Constrained Searching</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>267816.00</AwardTotalIntnAmount>
<AwardAmount>267816</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The goal of this project is to make possible database searching in a privacy-constrained manner:  A private database provider allows only properly authorized searches by clients, in a manner that does not reveal the search criteria yet enforces the requirement that the client learns only what is authorized by the search. The initial focus will be on techniques for the case of exact matches, later extended to the much more difficult case of approximate matching. If multiple matches are found, either all of them are returned, or a subset of the "best" of them, under appropriately defined notions of quality, is returned; in approximate matching there is a natural notion of quality, namely, having smaller distance to the target of the search as specified by the query. The technical challenges include verification of the validity of a search request, and then carrying out the search, in manner that enforces the search's authorized criteria without revealing them.  The project holds the promise of leading to substantial improvements in the highly unsatisfactory current "state of the practice" for searches carried out on private and sensitive databases, that unnecessarily reveal too much information and prevent useful collaborations from taking place due to concerns over the leakage of sensitive information. The minimal-disclosure feature of the protocols will also make possible a de facto "defense in depth", in that a compromised server will no longer automatically imply the compromise of all the clients' interactions with that server.</AbstractNarration>
<MinAmdLetterDate>08/15/2009</MinAmdLetterDate>
<MaxAmdLetterDate>06/17/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915436</AwardID>
<Investigator>
<FirstName>Mikhail</FirstName>
<LastName>Atallah</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mikhail J Atallah</PI_FULL_NAME>
<EmailAddress>mja@cs.purdue.edu</EmailAddress>
<PI_PHON>7654946010</PI_PHON>
<NSF_ID>000234959</NSF_ID>
<StartDate>08/15/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[Young Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~89312</FUND_OBLG>
<FUND_OBLG>2010~87553</FUND_OBLG>
<FUND_OBLG>2011~90951</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>One of the major impediments to larger-scale use of cloud services is concern over confidentiality of the data, and of the queries and computations carried out on it by the cloud servers. &nbsp;In this project we developed techniques, insights, and proof of concept implementations for achieving confidentiality when using untrusted commercial cloud services, whereby the cloud servers store and manipulate the data on behalf of its owners without learning anything about either the data or the queries and computations done on it. &nbsp;Within such a secure and private outsourcing framework, we obtained results for comparisons of DNA sequences, querying of DNA databases, matrix computations, image processing computations, and many other variants of information storage and retrieval (including range queries). &nbsp;The protocols we designed place the bulk of the computational burden on the cloud servers, so that the client can carry out its share of the computations even when it is computationally weak (e.g., slow, or battery-limited, or having limited local storage &mdash; as in portable devices like cell phones and tablets). &nbsp;In all cases, the cloud servers do not learn the data &mdash; they store it and carry out computations on it &ldquo;without seeing it&rdquo;. &nbsp;Only the client learns the answers to the queries and computations. &nbsp;For performance reasons, we avoided or minimized the use of expensive cryptographic primitives like exponentiation, and as much as possible limited their use to the cloud servers rather than at the client side. &nbsp;In all of our protocols, cheating by an untrusted server is detected by the client with high probability. &nbsp;In some protocols the server needs to produce, in addition to the answer, a proof of its integrity and completeness (e.g., for database queries). &nbsp;We highlight below two of our results, selected both because of their technical depth and because they involve DNA data, for which privacy and confidentiality are particularly important.</p> <p>Our work on secure and private outsourcing of DNA sequence comparisons significantly improves the state of the art: (i) The client does linear work and communication, whereas the previous best was quadratic; (ii) the protocol works in 1 round whereas the previous took a quadratic number of rounds; (iii) the server space usage is linear whereas the previous best was quadratic; and (iv) the protocol uses only lightweight cryptography whereas the previous used expensive homomorphic encryption and required oblivious transfer.</p> <p>Our result on the querying of encrypted DNA databases improves the state of the art in many significant ways. &nbsp;Our scheme is deterministic, with zero probability of a wrong answer (as opposed to a low probability for the previous best). &nbsp;Moreover, our encoding of the data makes it possible for us to handle a richer set of queries than exact matching between the query and each sequence of the database, including: (i) counting the number of matches between the query symbols and a sequence; (ii) logical OR matches where a query symbol is allowed to match a subset of the alphabet thereby making it possible to handle (as a special case) a &ldquo;not equal to&rdquo; requirement for a query symbol (e.g., &ldquo;not a G&rdquo;); (iii) queries that specify the number of occurrences of each kind of symbol in the specified sequence positions (e.g., two &lsquo;A&rsquo; and four &lsquo;C&rsquo; and one &lsquo;G&rsquo; and three &lsquo;T&rsquo;, occurring in any order in the query-specified sequence positions); (iv) a threshold query whose answer is &lsquo;yes&rsquo; if the number of matches exceeds a query-specified threshold (e.g., &ldquo;7 or more matches out of the 15 query-specified positions&rdquo;). &nbsp;For all query types we can hide the answers from the decrypting server, so that only the client learns the answer. In all cases, the...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ One of the major impediments to larger-scale use of cloud services is concern over confidentiality of the data, and of the queries and computations carried out on it by the cloud servers.  In this project we developed techniques, insights, and proof of concept implementations for achieving confidentiality when using untrusted commercial cloud services, whereby the cloud servers store and manipulate the data on behalf of its owners without learning anything about either the data or the queries and computations done on it.  Within such a secure and private outsourcing framework, we obtained results for comparisons of DNA sequences, querying of DNA databases, matrix computations, image processing computations, and many other variants of information storage and retrieval (including range queries).  The protocols we designed place the bulk of the computational burden on the cloud servers, so that the client can carry out its share of the computations even when it is computationally weak (e.g., slow, or battery-limited, or having limited local storage &mdash; as in portable devices like cell phones and tablets).  In all cases, the cloud servers do not learn the data &mdash; they store it and carry out computations on it "without seeing it".  Only the client learns the answers to the queries and computations.  For performance reasons, we avoided or minimized the use of expensive cryptographic primitives like exponentiation, and as much as possible limited their use to the cloud servers rather than at the client side.  In all of our protocols, cheating by an untrusted server is detected by the client with high probability.  In some protocols the server needs to produce, in addition to the answer, a proof of its integrity and completeness (e.g., for database queries).  We highlight below two of our results, selected both because of their technical depth and because they involve DNA data, for which privacy and confidentiality are particularly important.  Our work on secure and private outsourcing of DNA sequence comparisons significantly improves the state of the art: (i) The client does linear work and communication, whereas the previous best was quadratic; (ii) the protocol works in 1 round whereas the previous took a quadratic number of rounds; (iii) the server space usage is linear whereas the previous best was quadratic; and (iv) the protocol uses only lightweight cryptography whereas the previous used expensive homomorphic encryption and required oblivious transfer.  Our result on the querying of encrypted DNA databases improves the state of the art in many significant ways.  Our scheme is deterministic, with zero probability of a wrong answer (as opposed to a low probability for the previous best).  Moreover, our encoding of the data makes it possible for us to handle a richer set of queries than exact matching between the query and each sequence of the database, including: (i) counting the number of matches between the query symbols and a sequence; (ii) logical OR matches where a query symbol is allowed to match a subset of the alphabet thereby making it possible to handle (as a special case) a "not equal to" requirement for a query symbol (e.g., "not a G"); (iii) queries that specify the number of occurrences of each kind of symbol in the specified sequence positions (e.g., two æAÆ and four æCÆ and one æGÆ and three æTÆ, occurring in any order in the query-specified sequence positions); (iv) a threshold query whose answer is æyesÆ if the number of matches exceeds a query-specified threshold (e.g., "7 or more matches out of the 15 query-specified positions").  For all query types we can hide the answers from the decrypting server, so that only the client learns the answer. In all cases, the client deterministically learns only the query's answer, except for query type (iv) where we quantify the (very small) statistical leakage to the client of the actual count.          Last Modified: 11/26/2014       Submitted by: Mikhail J At...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
