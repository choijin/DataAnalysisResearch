<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Career: An Adaptive Compiler for Multi-core Environments</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2010</AwardEffectiveDate>
<AwardExpirationDate>02/28/2015</AwardExpirationDate>
<AwardTotalIntnAmount>416709.00</AwardTotalIntnAmount>
<AwardAmount>484909</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Compilers are a critical component between the software developer and the computer. They translate application written by software developers into machine code that is processed by the computer. An important task of a compiler is to optimize applications so that they run efficiently.  Traditional methods to develop optimizing compilers are ad-hoc, labor-intensive, and ineffective.  As a consequence, optimizing compilers for a new processor often produces code that achieves only a fraction of the machine?s available performance. This is especially true for today's multi-core architectures, which are parallel processors on a single chip.  This research will involve investigating techniques from the artificial intelligence community that will allow a compiler to automatically adapt and tune to new architectures.  In effect, this research will replace hand-tuning with self-tuning compilers that adapt software automatically to match the performance characteristics of each target architecture.&lt;br/&gt;&lt;br/&gt;In this project, the PI proposes to explore the viability of developing adaptive compilers for multi-core environments (ACME) to allow application portability while still achieving high performance.  The PI will create a statistical auto-tuning framework to support the probabilistic representation of the following features: the benefit analysis of optimizations, the identification and prediction of the appropriate runtime environment for different optimizations, and the generation of executables that efficiently combine several optimized code versions. He will invent components to measure accurately the characteristics of applications and targeted computing systems. The PI hopes to discover techniques to replace ?traditional? optimization benefit analysis with powerful machine learning models. These models will address the broad spectrum of parallel applications and multi-core environments, and they will be able to analyze and predict benefit under different dynamic contexts.</AbstractNarration>
<MinAmdLetterDate>03/05/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/16/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0953667</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Cavazos</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME>Dr</PI_SUFX_NAME>
<PI_FULL_NAME>John Cavazos</PI_FULL_NAME>
<EmailAddress>cavazos@cis.udel.edu</EmailAddress>
<PI_PHON>3028312136</PI_PHON>
<NSF_ID>000500366</NSF_ID>
<StartDate>03/05/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Delaware</Name>
<CityName>Newark</CityName>
<ZipCode>197160099</ZipCode>
<PhoneNumber>3028312136</PhoneNumber>
<StreetAddress>210 Hullihen Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<StateCode>DE</StateCode>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>DE00</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>059007500</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF DELAWARE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>059007500</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Delaware]]></Name>
<CityName>Newark</CityName>
<StateCode>DE</StateCode>
<ZipCode>197160099</ZipCode>
<StreetAddress><![CDATA[210 Hullihen Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>DE00</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7298</Code>
<Text>International Research Collab</Text>
</ProgramElement>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>5918</Code>
<Text>FRANCE</Text>
</ProgramReference>
<ProgramReference>
<Code>5980</Code>
<Text>WESTERN EUROPE PROGRAM</Text>
</ProgramReference>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9151</Code>
<Text>EPSCOR OUTREACH</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~262871</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<FUND_OBLG>2012~38700</FUND_OBLG>
<FUND_OBLG>2013~75659</FUND_OBLG>
<FUND_OBLG>2014~91679</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The research done for this grant involved the application of machine learning to hard compiler problems. &nbsp;</p> <p>PART 1: The first part of this project involved using machine learning to drive the "right" set of optimization given the characteristics of the code being optimized, and we looked at the following three problems in this area.</p> <p dir="ltr"><strong>1. Phase Ordering</strong></p> <p dir="ltr"><span>Phase ordering is the process of experimenting with different orders of compiler optimizations. This is a long-standing compiler problem that has been difficult to solve because compiler optimizations can impact one another. &nbsp;To solve this problem, we used neural networks to predict the best optimization to apply next to code being optimized based on the current state of the optimized code. This solution gave us an elegant way to predict the best optimization sequence for any piece of code being optimized. &nbsp;We achieved significant improvements over a well-tuned compiler by using source code characteristics and the neural networks to perform compiler phase ordering. &nbsp;We included a figure depicting our solution titled "Phase Ordering".</span></p> <p dir="ltr"><strong>2. Optimization Selection</strong></p> <p dir="ltr"><span>In this compiler problem, the machine learning algorithm predicts the set of compiler optimizations that should be applied to a particular code being compiled. &nbsp; In this problem, we have a fixed ordering of optimizations, and we simply want to choose the optimizations that should be turned on and off. &nbsp;We experimented with several problems including several real-world applications from a large financial institution. &nbsp;We used genetic algorithms (GAs) to prune out optimizations that would not improve the performance of code being compiled. &nbsp;Using GAs allowed us to quickly find the right set of optimizations for each program being compiled. &nbsp;We were able to achieve an improvement over already optimized applications. &nbsp;See the image titled "Optimization Selection" &nbsp;for more details. </span></p> <p><strong>3. Method Inlining</strong></p> <p dir="ltr"><span>We also applied machine learning the problem of tuning the inliner in a compiler. &nbsp;An inliner is used to suggest which callee functions should be copied into the caller functions instead of calling these functions. &nbsp;Copying the body of a callee function can decrease the overhead of function calling, but too much inlining can significantly increase the size of application. &nbsp;We used features of the code being compiled to measure the suitability of the code to be inlined in each specific instance. &nbsp;We were able to achieve significant speedups over a well-tuned method inliner. The details of the training phase is shown in the figure attached titled "Method Inlining"</span></p> <p dir="ltr">PART 2: The second part of this grant involved experimenting with a new prediction model and two different ways of characterizating code. &nbsp;Solving these problems are very important in the application of machine learning to compilers.</p> <p dir="ltr"><strong>1.&nbsp;Tournament predictor&nbsp;</strong></p> <p dir="ltr">First, we invented a new modeling technique, we called the tournament predictor. In our tournament predictor, we trained a model to predict which combination of optimizations from a pair of combinations of optimizations would perform best. We compared this new modeling technique to two previous state-of-the-art techniques, a sequence predictor and a speedup predictor. &nbsp;Our tournament prediction modeling technique outperformed both these previously state-of-the-art predictors in our evaluation by achieving 70% of the best possible achievable speedup in our selected optimization space. The details of the model is presented in the image titled "Tournament Predictor".</p> <p dir="ltr"><strong>2. Graph-based Program Cha...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The research done for this grant involved the application of machine learning to hard compiler problems.    PART 1: The first part of this project involved using machine learning to drive the "right" set of optimization given the characteristics of the code being optimized, and we looked at the following three problems in this area. 1. Phase Ordering Phase ordering is the process of experimenting with different orders of compiler optimizations. This is a long-standing compiler problem that has been difficult to solve because compiler optimizations can impact one another.  To solve this problem, we used neural networks to predict the best optimization to apply next to code being optimized based on the current state of the optimized code. This solution gave us an elegant way to predict the best optimization sequence for any piece of code being optimized.  We achieved significant improvements over a well-tuned compiler by using source code characteristics and the neural networks to perform compiler phase ordering.  We included a figure depicting our solution titled "Phase Ordering". 2. Optimization Selection In this compiler problem, the machine learning algorithm predicts the set of compiler optimizations that should be applied to a particular code being compiled.   In this problem, we have a fixed ordering of optimizations, and we simply want to choose the optimizations that should be turned on and off.  We experimented with several problems including several real-world applications from a large financial institution.  We used genetic algorithms (GAs) to prune out optimizations that would not improve the performance of code being compiled.  Using GAs allowed us to quickly find the right set of optimizations for each program being compiled.  We were able to achieve an improvement over already optimized applications.  See the image titled "Optimization Selection"  for more details.   3. Method Inlining We also applied machine learning the problem of tuning the inliner in a compiler.  An inliner is used to suggest which callee functions should be copied into the caller functions instead of calling these functions.  Copying the body of a callee function can decrease the overhead of function calling, but too much inlining can significantly increase the size of application.  We used features of the code being compiled to measure the suitability of the code to be inlined in each specific instance.  We were able to achieve significant speedups over a well-tuned method inliner. The details of the training phase is shown in the figure attached titled "Method Inlining" PART 2: The second part of this grant involved experimenting with a new prediction model and two different ways of characterizating code.  Solving these problems are very important in the application of machine learning to compilers. 1. Tournament predictor  First, we invented a new modeling technique, we called the tournament predictor. In our tournament predictor, we trained a model to predict which combination of optimizations from a pair of combinations of optimizations would perform best. We compared this new modeling technique to two previous state-of-the-art techniques, a sequence predictor and a speedup predictor.  Our tournament prediction modeling technique outperformed both these previously state-of-the-art predictors in our evaluation by achieving 70% of the best possible achievable speedup in our selected optimization space. The details of the model is presented in the image titled "Tournament Predictor". 2. Graph-based Program Characterization Technique     We introduced a novel static program characterization technique, we called graph-based characterization, that improves the predictive power of machine learning models while retaining practical applicability.  We used control flow graphs (CFG) to characterize programs and then fed as input these graph characterizations into algorithms called graph kernels.  Graph kernels are machine learning algorithms that...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
