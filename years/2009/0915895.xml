<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small: Scalable Synchronization for Distributed Embedded Real-Time Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>331000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The project seeks to develop scalable synchronization mechanisms based on software transactional memory (or STM) for handling concurrency control in distributed, embedded, multiprocessor real-time systems. The project explores several competing abstractions for supporting STM (in such systems), investigate the relative merits of these approaches, and design and develop the protocols and algorithms necessary to support them. The project also seeks to identify the tradeoffs between semantic simplicity and efficient implementations of different STM systems, with particular emphasis on augmenting obstruction-free STM implementations with real-time contention managers. Among the algorithms that are being designed include real-time distributed commit protocols, distributed real-time cache coherence protocols, scheduling algorithms that can provide timeliness assurances given the retry behavior of STM, and efficient STM implementations. &lt;br/&gt;The project?s algorithms and protocols are being implemented and made publicly available in an open source form suitable for a real-time operating system or a real-time virtual machine. The project?s algorithms, protocols, analysis techniques, and implementations will allow distributed embedded real-time system programmers to use STM to simplify (distributed) concurrency control.&lt;br/&gt;Broader impacts of the project are sought through efforts to transition the project's results by collaboration with The MITRE Corporation and US Naval Surface Warfare Center, and increasing cultural interaction between students and faculty in the US and students and faculty in the Middle East and North Africa region, through graduate advising and teaching in the VT-MENA (Virginia Tech ? Middle East and North Africa) program.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/06/2009</MinAmdLetterDate>
<MaxAmdLetterDate>04/17/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915895</AwardID>
<Investigator>
<FirstName>Binoy</FirstName>
<LastName>Ravindran</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Binoy Ravindran</PI_FULL_NAME>
<EmailAddress>binoy@vt.edu</EmailAddress>
<PI_PHON>5402313777</PI_PHON>
<NSF_ID>000201874</NSF_ID>
<StartDate>08/06/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Virginia Polytechnic Institute and State University</Name>
<CityName>BLACKSBURG</CityName>
<ZipCode>240610001</ZipCode>
<PhoneNumber>5402315281</PhoneNumber>
<StreetAddress>Sponsored Programs 0170</StreetAddress>
<StreetAddress2><![CDATA[300 Turner Street NW, Suite 4200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003137015</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>VIRGINIA POLYTECHNIC INSTITUTE AND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003137015</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Virginia Polytechnic Institute and State University]]></Name>
<CityName>BLACKSBURG</CityName>
<StateCode>VA</StateCode>
<ZipCode>240610001</ZipCode>
<StreetAddress><![CDATA[Sponsored Programs 0170]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9217</Code>
<Text>NATNL RESERCH &amp; EDUCAT NETWORK</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~200000</FUND_OBLG>
<FUND_OBLG>2011~115000</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Embedded systems are fundamentally concurrent: they sense concurrent physical processes and control their behavior by processing multiple streams of sensor input and control multiple actuators. They use concurrency control: computations process sensor data and control actuators by concurrently reading and writing shared memory data objects, while satisfying object consistency properties. They are real-time: sensor-to-actuator computations must satisfy application time constraints.</p> <p>Classical lock-based concurrency control has programmability, scalability, and composability challenges. These challenges are significant in emerging multicore architectures on which improved software performance must be achieved by exposing greater concurrency. Additionally, they are exacerbated in distributed systems due to the complexities of multi-node concurrency. Transactional memory (TM) is an alternative synchronization model that promises to alleviate these dif?culties with an optimistic concurrency control approach and a simple programming interface. TM is increasingly gaining traction with the growing availability of production hardware TM (e.g., Intel Haswell chip) and software TM (e.g., GCC compiler).</p> <p>At its core, the project&rsquo;s research reveals that TM-based concurrency control is possible in embedded real-time software, and infact, has superior real-time schedulability advantages, in both multicore and distributed systems. The project&rsquo;s real-time contention managers and distributed real-time concurrency control protocols enable real-time TM concurrency control in multicore and distributed systems, respectively. Their schedulability analyses have established upper bounds on transactional retries and (end-to-end) task response times. Analyses have also identified the conditions when the techniques achieve superior real-time schedulability than competitors in multicore systems (e.g., lock-free synchronization) and distributed systems (e.g., two-phase locking with priority inheritance). With TM, programmers also (naturally) enjoy TM&rsquo;s better programmability and composability properties, especially in distributed systems, where lock-based concurrency control has poor programmability and composability.</p> <p>The project&rsquo;s techniques have been implemented and rolled out as an experimental, open-source software system: the HyFlow distributed TM system, which is available at hyflow.org, and supports JVM languages (Java and Scala) and C++. Experimental studies using the HyFlow implementation have confirmed the analytical results, and have revealed real-time TM&rsquo;s superiority in task response times over competitor techniques.</p> <p>The HyFlow TM system was transitioned to US Naval Surface Warfare Center Dahlgren Division&rsquo;s Aegis Combat System software.</p> <p>Results from the research have been thoroughly disseminated to the relevant researcher and practitioner communities in different ways: rigorously peer-reviewed, relevant conference and journal publications; public release of the open-source, HyFlow TM software system; and additional documentation in non peer-reviewed technical reports. All are available at the project website (hyflow.org).</p> <p>The project also contributed to the development of the ECE/CS 5510 Multiprocessor Programming graduate course at Virginia Tech (cross-listed between ECE and CS departments), which is now routinely taught, and graduate education of several PhD and MS students. Additionally, the project has fostered greater research collaboration with VT-MENA/Egypt, through teaching of ECE/CS 5510 at Alexandria, Egypt, graduate education of VT-MENA PhD students, and transitioning of project alumni into faculty members and researchers in Egypt.&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/26/2013<br>      Modified by: Binoy&nbsp;Ravindran</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Embedded systems are fundamentally concurrent: they sense concurrent physical processes and control their behavior by processing multiple streams of sensor input and control multiple actuators. They use concurrency control: computations process sensor data and control actuators by concurrently reading and writing shared memory data objects, while satisfying object consistency properties. They are real-time: sensor-to-actuator computations must satisfy application time constraints.  Classical lock-based concurrency control has programmability, scalability, and composability challenges. These challenges are significant in emerging multicore architectures on which improved software performance must be achieved by exposing greater concurrency. Additionally, they are exacerbated in distributed systems due to the complexities of multi-node concurrency. Transactional memory (TM) is an alternative synchronization model that promises to alleviate these dif?culties with an optimistic concurrency control approach and a simple programming interface. TM is increasingly gaining traction with the growing availability of production hardware TM (e.g., Intel Haswell chip) and software TM (e.g., GCC compiler).  At its core, the projectÆs research reveals that TM-based concurrency control is possible in embedded real-time software, and infact, has superior real-time schedulability advantages, in both multicore and distributed systems. The projectÆs real-time contention managers and distributed real-time concurrency control protocols enable real-time TM concurrency control in multicore and distributed systems, respectively. Their schedulability analyses have established upper bounds on transactional retries and (end-to-end) task response times. Analyses have also identified the conditions when the techniques achieve superior real-time schedulability than competitors in multicore systems (e.g., lock-free synchronization) and distributed systems (e.g., two-phase locking with priority inheritance). With TM, programmers also (naturally) enjoy TMÆs better programmability and composability properties, especially in distributed systems, where lock-based concurrency control has poor programmability and composability.  The projectÆs techniques have been implemented and rolled out as an experimental, open-source software system: the HyFlow distributed TM system, which is available at hyflow.org, and supports JVM languages (Java and Scala) and C++. Experimental studies using the HyFlow implementation have confirmed the analytical results, and have revealed real-time TMÆs superiority in task response times over competitor techniques.  The HyFlow TM system was transitioned to US Naval Surface Warfare Center Dahlgren DivisionÆs Aegis Combat System software.  Results from the research have been thoroughly disseminated to the relevant researcher and practitioner communities in different ways: rigorously peer-reviewed, relevant conference and journal publications; public release of the open-source, HyFlow TM software system; and additional documentation in non peer-reviewed technical reports. All are available at the project website (hyflow.org).  The project also contributed to the development of the ECE/CS 5510 Multiprocessor Programming graduate course at Virginia Tech (cross-listed between ECE and CS departments), which is now routinely taught, and graduate education of several PhD and MS students. Additionally, the project has fostered greater research collaboration with VT-MENA/Egypt, through teaching of ECE/CS 5510 at Alexandria, Egypt, graduate education of VT-MENA PhD students, and transitioning of project alumni into faculty members and researchers in Egypt.           Last Modified: 07/26/2013       Submitted by: Binoy Ravindran]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
