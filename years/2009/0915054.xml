<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Small: BeliefDB - Adding Belief Annotations to Databases</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>508000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Frank Olken</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>In many scientific disciplines today, a community of users is working&lt;br/&gt;together to assemble, revise, and curate a shared data repository.  As&lt;br/&gt;the community accumulates knowledge and the database content evolves&lt;br/&gt;over time, it may contain conflicting information and members can&lt;br/&gt;disagree on the information it should store.  Relational database&lt;br/&gt;management systems (RDBMS) today can help these communities manage&lt;br/&gt;their shared data, but provide limited support for managing&lt;br/&gt;conflicting facts and conflicting opinions about the correctness of&lt;br/&gt;the stored data.&lt;br/&gt;&lt;br/&gt;This project develops a Belief Database System (BeliefDB) that allows&lt;br/&gt;users to express belief annotations. These annotations can be positive&lt;br/&gt;(agreement) or negative (disagreement), and can be of higher order&lt;br/&gt;(belief annotations about other belief annotations).  The approach&lt;br/&gt;allows users to have a structured discussion about the database&lt;br/&gt;content and annotations.  A BeliefDB gives annotations a clearly&lt;br/&gt;defined semantics that lets a relational database understand and&lt;br/&gt;manage them efficiently.&lt;br/&gt;&lt;br/&gt;Intellectual merits: (i) Definition of a Belief Database Model: The&lt;br/&gt;project develops a formalism that extends a relational database with&lt;br/&gt;belief annotations on data and on previously inserted annotations.&lt;br/&gt;&lt;br/&gt;(ii) Design of a Belief Query Language: The project complements the&lt;br/&gt;data model with a new query language that extends SQL.  (iii)&lt;br/&gt;Development of a canonical Belief Database Representation: The&lt;br/&gt;projects develops approaches to store and manipulate belief databases&lt;br/&gt;on top of a conventional RDBMS.&lt;br/&gt;&lt;br/&gt;Broader impact: Curated databases and shared data repositories are&lt;br/&gt;becoming widespread in the scientific communities.  A BeliefDB&lt;br/&gt;provides a new data management system that addresses the need of these&lt;br/&gt;communities to manage conflicting data. If successful, the project&lt;br/&gt;will be one of the pieces that will help data management technology&lt;br/&gt;undergo a new paradigm shift, from managing data as content, to&lt;br/&gt;supporting a community of users in collaboratively creating partly&lt;br/&gt;conflicting database contents.&lt;br/&gt;&lt;br/&gt;For further information on the project see the project web page::&lt;br/&gt;http://db.cs.washington.edu/beliefDB/&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/29/2009</MinAmdLetterDate>
<MaxAmdLetterDate>07/07/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915054</AwardID>
<Investigator>
<FirstName>Dan</FirstName>
<LastName>Suciu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Dan Suciu</PI_FULL_NAME>
<EmailAddress>suciu@cs.washington.edu</EmailAddress>
<PI_PHON>2066851934</PI_PHON>
<NSF_ID>000218785</NSF_ID>
<StartDate>08/29/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Magdalena</FirstName>
<LastName>Balazinska</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Magdalena Balazinska</PI_FULL_NAME>
<EmailAddress>magda@cs.washington.edu</EmailAddress>
<PI_PHON>2065434043</PI_PHON>
<NSF_ID>000094498</NSF_ID>
<StartDate>08/29/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Wolfgang</FirstName>
<LastName>Gatterbauer</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Wolfgang Gatterbauer</PI_FULL_NAME>
<EmailAddress>wolfgang@ccis.neu.edu</EmailAddress>
<PI_PHON>2069138820</PI_PHON>
<NSF_ID>000081951</NSF_ID>
<StartDate>08/29/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington]]></Name>
<CityName>Seattle</CityName>
<StateCode>WA</StateCode>
<ZipCode>981950001</ZipCode>
<StreetAddress><![CDATA[4333 Brooklyn Ave NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~500000</FUND_OBLG>
<FUND_OBLG>2011~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Today's data management systems can no longer simply focus on managing clean data. They must also handle inaccurate, conflicting, and evolving data with extended user discussions and documentation. Large-scale shared data repositories are increasingly common in many sciences including astronomy, coastal and environmental sciences, earth sciences, coastal and environmental scientists, and many more. They can be also seen in non-scientific collaborative communities such as social networks, knowledge generating communities, even in web forums on role-playing games. The BeliefDB project developed fundamental techniques to enable users to understand, manage, and represent different possible belief worlds of what should be in the database and to have a structured argumentation over the database content and each other's annotations.</p> <p>The project had several outcomes, which can be classified in six categories:</p> <ol> <li><strong>Representing and reconciling conflicting data.</strong> &nbsp;A framework called BeliefDB was developed under which every fact in a relational database can be annotated with a statement saying which agent believed that fact. &nbsp;An extension of a relational query language (e.g. SQL) can than specify which agents' beliefs are to be retrieved. &nbsp;Queries in this extended language can be entirely rewritten into traditional relational queries. &nbsp;A separate question is how to reconcile conflicting facts given a Web of trust mappings between users; it was shown that the complexity of reconciliation can range from polynomial time to NP-complete, depending on the type of conflicts that one wants to represent.</li> <li><strong>Querying inconsistent data.</strong> &nbsp;A breakthrough theoretical result was obtained on the complexity of computing certain answers to queries over databases with key violations: it was shown that for every conjunctive query without self-joins where every relation has a unique key consisting of a single attribute, the complexity of computing all certain answers is either in polynomial time, or is co-NP-complete in the size of the database. &nbsp;Moreover, one can decide between these two cases by performing a static analysis on the query expressions.</li> <li><strong>Explaining query outputs.</strong> &nbsp;A novel framework was developed for explaining observed answers to queries. &nbsp;In one application this technique was deployed to help users understand the performance behaviors of large, distributed systems. &nbsp;In a more general setting, the framework finds explanations to outputs to complex queries.</li> <li><strong>Lower bounds on grounded probabilistic inference.</strong> &nbsp;New lower bounds were proven on the limitations of DPLL-based inference algorithm for computing queries over probabilistic databases. &nbsp;All modern model counting algorithm are based on variations of the DPLL backtracking procedure. &nbsp;It was shown that there exists First Order formulas (queries) whose grounded Boolean formulas causes any DPLL-based algorithm to run in exponential time, although lifted inference compute the probability of the query in polynomial time. This is the first formal proof of the additional power of lifted inference.</li> <li><strong>Upper and lower Bounds for Boolean functions.</strong>&nbsp; New upper and lower bounds for the probability of positive Boolean functions were derived by treating multiple occurrences of variables as independent and assigning them new individual probabilities.&nbsp; This method can be used to approximate weighted model counting problems. As example application, it was shown how existing relational databases can be used to give upper and lower bounds to hard probabilistic queries.</li> <li><strong>Query Interpretation.</strong>&nbsp; A novel visualization tool was developed that reduces the time needed to read and understand existing SQL queries.&nbsp; It thus enables...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Today's data management systems can no longer simply focus on managing clean data. They must also handle inaccurate, conflicting, and evolving data with extended user discussions and documentation. Large-scale shared data repositories are increasingly common in many sciences including astronomy, coastal and environmental sciences, earth sciences, coastal and environmental scientists, and many more. They can be also seen in non-scientific collaborative communities such as social networks, knowledge generating communities, even in web forums on role-playing games. The BeliefDB project developed fundamental techniques to enable users to understand, manage, and represent different possible belief worlds of what should be in the database and to have a structured argumentation over the database content and each other's annotations.  The project had several outcomes, which can be classified in six categories:  Representing and reconciling conflicting data.  A framework called BeliefDB was developed under which every fact in a relational database can be annotated with a statement saying which agent believed that fact.  An extension of a relational query language (e.g. SQL) can than specify which agents' beliefs are to be retrieved.  Queries in this extended language can be entirely rewritten into traditional relational queries.  A separate question is how to reconcile conflicting facts given a Web of trust mappings between users; it was shown that the complexity of reconciliation can range from polynomial time to NP-complete, depending on the type of conflicts that one wants to represent. Querying inconsistent data.  A breakthrough theoretical result was obtained on the complexity of computing certain answers to queries over databases with key violations: it was shown that for every conjunctive query without self-joins where every relation has a unique key consisting of a single attribute, the complexity of computing all certain answers is either in polynomial time, or is co-NP-complete in the size of the database.  Moreover, one can decide between these two cases by performing a static analysis on the query expressions. Explaining query outputs.  A novel framework was developed for explaining observed answers to queries.  In one application this technique was deployed to help users understand the performance behaviors of large, distributed systems.  In a more general setting, the framework finds explanations to outputs to complex queries. Lower bounds on grounded probabilistic inference.  New lower bounds were proven on the limitations of DPLL-based inference algorithm for computing queries over probabilistic databases.  All modern model counting algorithm are based on variations of the DPLL backtracking procedure.  It was shown that there exists First Order formulas (queries) whose grounded Boolean formulas causes any DPLL-based algorithm to run in exponential time, although lifted inference compute the probability of the query in polynomial time. This is the first formal proof of the additional power of lifted inference. Upper and lower Bounds for Boolean functions.  New upper and lower bounds for the probability of positive Boolean functions were derived by treating multiple occurrences of variables as independent and assigning them new individual probabilities.  This method can be used to approximate weighted model counting problems. As example application, it was shown how existing relational databases can be used to give upper and lower bounds to hard probabilistic queries. Query Interpretation.  A novel visualization tool was developed that reduces the time needed to read and understand existing SQL queries.  It thus enables effective query-reuse, a principal component in the vision of a  Collaborative Query Management System where users start from existing query templates when composing new queries.        Last Modified: 12/29/2013       Submitted by: Wolfgang Gatterbauer]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
