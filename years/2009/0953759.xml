<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Building Immunity to Memory Management Bugs during Production Runs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/15/2010</AwardEffectiveDate>
<AwardExpirationDate>02/29/2016</AwardExpirationDate>
<AwardTotalIntnAmount>420000.00</AwardTotalIntnAmount>
<AwardAmount>420000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The widespread use of software in our society has created unprecedented demand on software availability. Unfortunately, memory management bugs, a major category of common software defects, severely affect system availability. Previous studies have shown that memory management bugs account for 43% of the reported software failures. According to the Vulnerability Notes Database maintained by the U.S. Computer Emergency Readiness Team, memory bugs are dominant in recent vulnerability reports. Memory bugs remain prevalent and challenging to handle during production runs mainly because of three reasons. First, memory bugs are deterministic, failing traditional fault tolerance methods. Second, memory bugs manifested during production runs are hard to reproduce off-site, making them difficult for diagnosis. Third, modern computing trends such as cloud computing and multi-core enable larger and more complicated software, causing memory bugs to slip into the field more easily.&lt;br/&gt;&lt;br/&gt;This project addresses the above challenges. The investigator employs a systematic approach for providing immunity to memory bugs during production runs. The main idea is to perform online diagnosis once a memory bug or failure is detected, then generate and apply runtime immune patches to the running program for surviving and preventing memory bug occurrences or failures caused by memory bugs. The research hinges on the following synergistic thrusts: (1) runtime support of diversified program execution environments for safely and efficiently surviving and preventing memory bug occurrences or failures, which addresses the determinism issue of memory bugs; (2) new algorithms for low-overhead bug diagnosis, which are applied on-site for easy reproduction of memory bugs and best exploitation of on-site bug/failure information; (3) operating system support for lightweight checkpointing and re-execution mechanisms for multi-threaded programs&lt;br/&gt;on modern multi-core systems.</AbstractNarration>
<MinAmdLetterDate>03/17/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/12/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0953759</AwardID>
<Investigator>
<FirstName>Feng</FirstName>
<LastName>Qin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Feng Qin</PI_FULL_NAME>
<EmailAddress>qin@cse.ohio-state.edu</EmailAddress>
<PI_PHON>6142474533</PI_PHON>
<NSF_ID>000307336</NSF_ID>
<StartDate>03/17/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University Research Foundation -DO NOT USE</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888734</PhoneNumber>
<StreetAddress>1960 KENNY RD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>071650709</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY RESEARCH FOUNDATION, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName>Columbus</CityName>
<StateCode>OH</StateCode>
<ZipCode>432101016</ZipCode>
<StreetAddress><![CDATA[Office of Sponsored Programs]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1045</Code>
<Text>CAREER: FACULTY EARLY CAR DEV</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~80000</FUND_OBLG>
<FUND_OBLG>2011~79002</FUND_OBLG>
<FUND_OBLG>2012~83667</FUND_OBLG>
<FUND_OBLG>2013~177331</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The widespread use of software in our society has created unprecedented demand on software availability, reliability, and efficiency. Unfortunately, memory management defects, a major category of common software defects, severely affect the availability, reliability, and efficiency of various types of computer systems, including general-purposed computers, cloud systems, high-performance computer systems, as well as general-purpose graphics processing unit (GPGPU) based computer systems. Previous studies have shown that memory management defects account for 43% of the reported system failures. Memory defects remain prevalent and challenging to handle during production runs mainly because of three reasons. First, memory defects are deterministic, failing traditional fault tolerance methods. Second, memory defects manifested during production runs are hard to reproduce off-site, making them difficult for diagnosis. Third, modern computing trends such as cloud computing and multi-core enable larger and more complicated software, causing memory defects to slip into the field more easily.&nbsp;</p> <p><br />The PI and his research teams have proposed and prototyped various innovative techniques along multiple dimensions for effectively tackling the above challenges imposed by memory management defects. In particular, they have developed novel techniques to address the dependability and performance problems caused by memory defects in various types of computer systems such as cloud systems, high-performance computer systems, storage systems, and GPGPU-based computer systems. Furthermore, they have proposed new mechanisms to handle various possible symptoms that can be manifested by memory management defects. Examples of such symptoms include resource leakage, concurrency issues, synchronization errors, performance inefficiency, and system crashes. Additionally, the PI and his team have invented various techniques for different phases in the software development cycle, including the design phase, the testing phase, and the production run phase. Above all, the proposed techniques hinges on tackling all the aspects of memory management defects on different computer systems. Through this project, the PI has graduated three Ph.D. students, and one of them joined an academic institution in US as a tenure-track Assistant Professor. Additionally, the PI has also mentored female graduate and undergraduate students.</p><br> <p>            Last Modified: 05/11/2016<br>      Modified by: Feng&nbsp;Qin</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The widespread use of software in our society has created unprecedented demand on software availability, reliability, and efficiency. Unfortunately, memory management defects, a major category of common software defects, severely affect the availability, reliability, and efficiency of various types of computer systems, including general-purposed computers, cloud systems, high-performance computer systems, as well as general-purpose graphics processing unit (GPGPU) based computer systems. Previous studies have shown that memory management defects account for 43% of the reported system failures. Memory defects remain prevalent and challenging to handle during production runs mainly because of three reasons. First, memory defects are deterministic, failing traditional fault tolerance methods. Second, memory defects manifested during production runs are hard to reproduce off-site, making them difficult for diagnosis. Third, modern computing trends such as cloud computing and multi-core enable larger and more complicated software, causing memory defects to slip into the field more easily.    The PI and his research teams have proposed and prototyped various innovative techniques along multiple dimensions for effectively tackling the above challenges imposed by memory management defects. In particular, they have developed novel techniques to address the dependability and performance problems caused by memory defects in various types of computer systems such as cloud systems, high-performance computer systems, storage systems, and GPGPU-based computer systems. Furthermore, they have proposed new mechanisms to handle various possible symptoms that can be manifested by memory management defects. Examples of such symptoms include resource leakage, concurrency issues, synchronization errors, performance inefficiency, and system crashes. Additionally, the PI and his team have invented various techniques for different phases in the software development cycle, including the design phase, the testing phase, and the production run phase. Above all, the proposed techniques hinges on tackling all the aspects of memory management defects on different computer systems. Through this project, the PI has graduated three Ph.D. students, and one of them joined an academic institution in US as a tenure-track Assistant Professor. Additionally, the PI has also mentored female graduate and undergraduate students.       Last Modified: 05/11/2016       Submitted by: Feng Qin]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
