<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Medium:  Collaborative Research: Throughput-Driven Multi-Core Architecture and a Compilation System</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>350000.00</AwardTotalIntnAmount>
<AwardAmount>350000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computing substrates such as multi-core processors or Field Programmable Gate Arrays (FPGAs) share the characteristic of having two-dimensional arrays of processing elements interconnected by a routing fabric. At one end of the spectrum, FPGAs have single-output programmable logic functions, and at the other end, multi-core chips have complex 32/64-bit processing cores. For different applications, different programmable substrates produce the best area-power-performance tradeoffs. This project is developing a large-scale multi-core substrate that has hundreds or thousands of simple processing cores along with a compilation system that maps computations onto this fabric. This many-core architecture, named Diastolic Array, is coarser-grained than FPGAs but &amp;#64257;ner-grained than conventional multi-cores. To efficiently exploit such a large number of processing cores, the architecture needs spatially mapping a computation to processing cores and communication to the point-to-point interconnect network. To be practically viable, this mapping process must be automated and effective. The project addresses this challenge by simultaneously developing hardware architecture and a compilation system. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;A diastolic array chip is expected to outperform FPGAs or general-purpose processors on an interesting class of applications, enabling more efficient prototyping and low-volume production. The outcomes of this project such as statically-con&amp;#64257;gured interconnection architecture with associated algorithms for routing and resource allocation will also be applicable to other multi-core designs. Finally, the project is developing a new parallel processing module for an undergraduate computer architecture class to give sophomores early exposure to parallel hardware, experience with writing parallel programs and using compilers that exploit parallelism.</AbstractNarration>
<MinAmdLetterDate>09/12/2009</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0905208</AwardID>
<Investigator>
<FirstName>Gookwon</FirstName>
<LastName>Suh</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gookwon E Suh</PI_FULL_NAME>
<EmailAddress>gs272@cornell.edu</EmailAddress>
<PI_PHON>6072556856</PI_PHON>
<NSF_ID>000104889</NSF_ID>
<StartDate>09/12/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cornell University</Name>
<CityName>Ithaca</CityName>
<ZipCode>148502820</ZipCode>
<PhoneNumber>6072555014</PhoneNumber>
<StreetAddress>373 Pine Tree Road</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY23</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>872612445</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CORNELL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002254837</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Cornell University]]></Name>
<CityName>Ithaca</CityName>
<StateCode>NY</StateCode>
<ZipCode>148502820</ZipCode>
<StreetAddress><![CDATA[373 Pine Tree Road]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY23</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~230528</FUND_OBLG>
<FUND_OBLG>2011~119472</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p> <div>Today&rsquo;s computing systems typically use processors with a few processing cores. For example, typically smartphone uses a dual-core or quad-core processor. Future computing systems are expected to rely on even more processing cores, not only traditional processing cores but also more specialized cores such as graphics processing units, multimedia processing engines, etc., in order to provide higher performance with low energy consumption.&nbsp;As we increase the number of processing elements on a single processor, however, it will become increasingly challenging to have many processing elements efficiently communicate with each other and also correctly program them to perform computations in parallel.&nbsp;At the same time, a large number of processing cores that share hardware resources such as on-chip interconnect and off-chip memory controllers also introduce a new security challenge in protecting secrets. For example, recent studies on cloud computing such as Amazon EC2 have demonstrated that information can leak through timing variations that come from resource contention.</div> <div></div> <div>The goal of this project was to develop a many-core architecture&nbsp;along with a compilation system that can achieve high-performance, low-power, and trustworthy operations. To achieve this goal, the project investigated multiple aspects of the future many-core processors. To improve efficiency, we developed a new on-chip interconnect network that uses static optimization algorithms to compute efficient network resource allocation such as task placement, scheduling, and traffic routing. This approach provided efficiency without complex hardware required in run-time adaptation techniques. For programmability, we investigated new ways to detect common bugs in parallel programs.&nbsp;For example, the research identified&nbsp;a new heuristic to detect common non-race bugs in multi-threaded programs, and showed that the new scheme can detect a broad range of non-race bugs with low false positives. The project also designed hardware to enable high-coverage detection of data races with almost no run-time overhead. For security, the project has developed protection techniques that can eliminate timing interference in on-chip networks and off-chip memory controllers, and showed that the overhead can be reasonable. The simulation infrastructure, named HORNET, that is developed partly through this project is&nbsp; available for public download.&nbsp;</div> <div></div> <div>In addition to the technical developments, the project trained a number of graduate and undergraduate students through its research activities. Because the project involved collaborations with researchers in traditional networking (the Internet), the students were trained to work across traditional discipline boundaries. The outcome from the project is also integrated with a graduate course in advanced computer architecture.</div> </p><br> <p>            Last Modified: 11/30/2014<br>      Modified by: Gookwon&nbsp;E&nbsp;Suh</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  TodayÃ†s computing systems typically use processors with a few processing cores. For example, typically smartphone uses a dual-core or quad-core processor. Future computing systems are expected to rely on even more processing cores, not only traditional processing cores but also more specialized cores such as graphics processing units, multimedia processing engines, etc., in order to provide higher performance with low energy consumption. As we increase the number of processing elements on a single processor, however, it will become increasingly challenging to have many processing elements efficiently communicate with each other and also correctly program them to perform computations in parallel. At the same time, a large number of processing cores that share hardware resources such as on-chip interconnect and off-chip memory controllers also introduce a new security challenge in protecting secrets. For example, recent studies on cloud computing such as Amazon EC2 have demonstrated that information can leak through timing variations that come from resource contention.  The goal of this project was to develop a many-core architecture along with a compilation system that can achieve high-performance, low-power, and trustworthy operations. To achieve this goal, the project investigated multiple aspects of the future many-core processors. To improve efficiency, we developed a new on-chip interconnect network that uses static optimization algorithms to compute efficient network resource allocation such as task placement, scheduling, and traffic routing. This approach provided efficiency without complex hardware required in run-time adaptation techniques. For programmability, we investigated new ways to detect common bugs in parallel programs. For example, the research identified a new heuristic to detect common non-race bugs in multi-threaded programs, and showed that the new scheme can detect a broad range of non-race bugs with low false positives. The project also designed hardware to enable high-coverage detection of data races with almost no run-time overhead. For security, the project has developed protection techniques that can eliminate timing interference in on-chip networks and off-chip memory controllers, and showed that the overhead can be reasonable. The simulation infrastructure, named HORNET, that is developed partly through this project is  available for public download.   In addition to the technical developments, the project trained a number of graduate and undergraduate students through its research activities. Because the project involved collaborations with researchers in traditional networking (the Internet), the students were trained to work across traditional discipline boundaries. The outcome from the project is also integrated with a graduate course in advanced computer architecture.        Last Modified: 11/30/2014       Submitted by: Gookwon E Suh]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
