<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Small: Do-It-Yourself forms-driven workflow web applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2009</AwardEffectiveDate>
<AwardExpirationDate>09/30/2013</AwardExpirationDate>
<AwardTotalIntnAmount>499444.00</AwardTotalIntnAmount>
<AwardAmount>531444</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>nan zhang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Emerging Do-It-Yourself database-driven web application&lt;br/&gt;projoect aims to (1) enable non-programmers to rapidly build custom&lt;br/&gt;data management and workflow applications and (2) to promote&lt;br/&gt;a novel pattern of interaction between application owners and&lt;br/&gt;programmers. Their beneficiaries are organizations, in need of long tail&lt;br/&gt;web applications, that cannot afford the time and money needed to&lt;br/&gt;engage into the conventional code development process.&lt;br/&gt;&lt;br/&gt;Do-It-Yourself platforms must maximize two metrics that present&lt;br/&gt;an inherent trade-off: the simplicity of specification and the&lt;br/&gt;application scope, which characterizes the class of applications&lt;br/&gt;that can be built using the platform?s specification mechanism.&lt;br/&gt;The proposal introduces two scopes with interesting trade-off&lt;br/&gt;features. Namely, in the "All-SQL" scope and the (more limited)&lt;br/&gt;"forms-driven workflows" scope each application page consists&lt;br/&gt;of a report (modeled by a nested query) and forms and actions in the&lt;br/&gt;report's context, leading to updates. The limitations have practically&lt;br/&gt;minor effects on the scope but they enable simple specification and&lt;br/&gt;automatic optimizations, studied in the proposal, such as:&lt;br/&gt;1. automatic creation of reports by choosing between the candidates&lt;br/&gt;using information theoretic criteria relying on constraints captured in&lt;br/&gt;the limited models.&lt;br/&gt;2. summarization of applications as workflow specifications by&lt;br/&gt;analyzing the dependencies between updates and queries. Vice versa,&lt;br/&gt;the proposal shows how simple workflow primitives translate to queries&lt;br/&gt;(reports) and updates (forms and actions).&lt;br/&gt;The proposal also provides an unlimited model of web applications,&lt;br/&gt;where programmers introduce code components and interface them&lt;br/&gt;with the "limited" part via queries and updates.&lt;br/&gt;&lt;br/&gt;The proposed models of database-driven web applications will impact&lt;br/&gt;the education of both Computer Science (CS) and non-CS students&lt;br/&gt;that need to comprehend web applications at a high conceptual level.&lt;br/&gt;For further information see the project web page at&lt;br/&gt;http://www.db.ucsd.edu/forward</AbstractNarration>
<MinAmdLetterDate>09/12/2009</MinAmdLetterDate>
<MaxAmdLetterDate>03/02/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0917379</AwardID>
<Investigator>
<FirstName>Yannis</FirstName>
<LastName>Papakonstantinou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yannis Papakonstantinou</PI_FULL_NAME>
<EmailAddress>yannis@cs.ucsd.edu</EmailAddress>
<PI_PHON>8588221612</PI_PHON>
<NSF_ID>000229823</NSF_ID>
<StartDate>09/12/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Alin</FirstName>
<LastName>Deutsch</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Alin B Deutsch</PI_FULL_NAME>
<EmailAddress>deutsch@cs.ucsd.edu</EmailAddress>
<PI_PHON>8588222276</PI_PHON>
<NSF_ID>000217310</NSF_ID>
<StartDate>09/12/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930934</ZipCode>
<StreetAddress><![CDATA[Office of Contract &amp; Grant A]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0116000</Code>
<Name>Human Subjects</Name>
</FoaInformation>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~499444</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Creating even a conceptually simple web application for data analysis and basic process coordination takes an inordinate amount of time and money. The goal of this project was to enable the inexpensive and rapid development of data-driven applications. In the case of the simpler applications, development should become so easy that their development should be &nbsp;"Do-It-Yourself (DIY)", i.e., their developer may be just a "dabbler" in Information Technology, who likely lacks formal Computer Science training. Rather programming can reduce to pluging together data and visualization components.</p> <p>The project's first task was to investigate why the development of (even simple) applications requires many lines of code and high expertise. The project observed that web application developers integrate many sub-systems in&nbsp;order to deliver even simple data-driven applications. They employ libraries of visual components (e.g. maps,&nbsp;calendars, tabbed windows) to achieve the user friendliness and aesthetics of modern web applications, relational databases to read/write persistent data consistently and concurrently, etc.</p> <p>Consequently, developers write large amounts of &ldquo;plumbing&rdquo; code to copy data to and from these disparate&nbsp;sub-systems. Investigating deeper in the question, the project classified the categories of plumbing code and found that typically code is spent on mundane, low-level integration problems that&nbsp;result from:<br />&bull;&nbsp;<strong>Language heterogeneities</strong>&nbsp;between the browser&rsquo;s HTML / JavaScript, the application&nbsp;server&rsquo;s (Java or other programming language) and the database server&rsquo;s SQL, coupled with the distribution of the three computation&nbsp;points (browser, app server and database server). The distribution and heterogeneities require code&nbsp;that translates the SQL data into Java objects, then into JavaScript objects, and then vice versa.<br />&bull;&nbsp;<strong>Coordinating data dependencies with imperative code.</strong>&nbsp;For each user action in an&nbsp;application the developer has to implement code that manually updates the current page according&nbsp;to the dependencies between the page's data and the effected user action.&nbsp;</p> <p>&bull;&nbsp;<strong>Deployment.&nbsp;</strong>A mundane, yet very real problem, is that the developer has to set up and operate multiple systems (app server, database server, network connection) in order to deploy his application. He has to download even more systems in order to develop his application.&nbsp;</p> <p><span>As a solution to the above problems the project created the FORWARD cloud-based platform for the rapid development of data-driven applications. FORWARD adopted the declarative programming language SQL as the underlying programming language, since declarative languages lead to much simpler programs and SQL has a track record of success in data management. &nbsp;The project's research acted on creating the&nbsp;</span>appropriate system architecture, programming language design (extended SQL to SQL++) and algorithms that automate system integration and data coordination tasks that would need to be manually performed otherwise. The technical achievements included:</p> <p>1. Simple applications can be developed on FORWARD without using any Java or JavaScript code, therefore resolving the "Language Heterogeneity" problem.<br />2. The user interface is specified by page configurations, which visualize dynamic data generated by&nbsp;SQL++ simply by annotating with what kind of visualization they should be created. (See image where the result of an SQL query is annotated to be presented as a map. An alternate visualization into a barchart would simply need a different visualization annotation.) The FORWARD developer need not worry about&nbsp;coordinating data from the server to the visualization, which resolves the "Dat...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Creating even a conceptually simple web application for data analysis and basic process coordination takes an inordinate amount of time and money. The goal of this project was to enable the inexpensive and rapid development of data-driven applications. In the case of the simpler applications, development should become so easy that their development should be  "Do-It-Yourself (DIY)", i.e., their developer may be just a "dabbler" in Information Technology, who likely lacks formal Computer Science training. Rather programming can reduce to pluging together data and visualization components.  The project's first task was to investigate why the development of (even simple) applications requires many lines of code and high expertise. The project observed that web application developers integrate many sub-systems in order to deliver even simple data-driven applications. They employ libraries of visual components (e.g. maps, calendars, tabbed windows) to achieve the user friendliness and aesthetics of modern web applications, relational databases to read/write persistent data consistently and concurrently, etc.  Consequently, developers write large amounts of "plumbing" code to copy data to and from these disparate sub-systems. Investigating deeper in the question, the project classified the categories of plumbing code and found that typically code is spent on mundane, low-level integration problems that result from: &bull; Language heterogeneities between the browserÆs HTML / JavaScript, the application serverÆs (Java or other programming language) and the database serverÆs SQL, coupled with the distribution of the three computation points (browser, app server and database server). The distribution and heterogeneities require code that translates the SQL data into Java objects, then into JavaScript objects, and then vice versa. &bull; Coordinating data dependencies with imperative code. For each user action in an application the developer has to implement code that manually updates the current page according to the dependencies between the page's data and the effected user action.   &bull; Deployment. A mundane, yet very real problem, is that the developer has to set up and operate multiple systems (app server, database server, network connection) in order to deploy his application. He has to download even more systems in order to develop his application.   As a solution to the above problems the project created the FORWARD cloud-based platform for the rapid development of data-driven applications. FORWARD adopted the declarative programming language SQL as the underlying programming language, since declarative languages lead to much simpler programs and SQL has a track record of success in data management.  The project's research acted on creating the appropriate system architecture, programming language design (extended SQL to SQL++) and algorithms that automate system integration and data coordination tasks that would need to be manually performed otherwise. The technical achievements included:  1. Simple applications can be developed on FORWARD without using any Java or JavaScript code, therefore resolving the "Language Heterogeneity" problem. 2. The user interface is specified by page configurations, which visualize dynamic data generated by SQL++ simply by annotating with what kind of visualization they should be created. (See image where the result of an SQL query is annotated to be presented as a map. An alternate visualization into a barchart would simply need a different visualization annotation.) The FORWARD developer need not worry about coordinating data from the server to the visualization, which resolves the "Data Coordination" problem. 3. JavaScript need to be written only if one needs to create a custom visual unit (i.e., if the repertoire of third party maps, barcharts etc is not enough for his application).  4. Java need to be written only for computations not easily expressible in SQL.   Points (3) and (4) enable...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
