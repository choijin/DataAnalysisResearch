<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Distributed Error Detection and Diagnosis in Wireless Embedded Systems with Customized Hardware Support</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>415491.00</AwardTotalIntnAmount>
<AwardAmount>317233</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>07010000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>ECCS</Abbreviation>
<LongName>Div Of Electrical, Commun &amp; Cyber Sys</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Zhi Tian</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>&lt;br/&gt;The objective of this research is to improve the reliability and robustness of networked wireless embedded systems, thereby enabling their widespread adoption in a range of mission-critical applications.  The approach is to synergistically combine fine-grained node-level error detection mechanisms with a distributed network-level monitoring service to efficiently detect and diagnose various hardware and software errors at runtime.&lt;br/&gt;&lt;br/&gt;With respect to intellectual merit, the research has three major thrusts.  The first thrust investigates the design of embedded hardware platforms augmented with a dedicated reliability co-processor.  Such a co-processor based approach provides a logically and physically separate foundation to monitor the behavior of hardware and software at an intra-node level.  The second thrust involves the design of a distributed, network-level monitoring service that uses observed event streams from individual nodes to perform error detection and root-cause diagnosis at runtime.  By correlating observations collected from different nodes, the monitoring service can detect anomalies at the network-level that node-level monitoring mechanisms cannot.  The final thrust deals with the creation of customized, resource-efficient communication primitives for the reliability co-processor to interact with the network-level monitoring service to enable accurate error detection and diagnosis in a cooperative manner.&lt;br/&gt;&lt;br/&gt;With respect to broader impacts, the research has the potential to positively impact the adoption of networked embedded systems in a variety of consumer and mission-critical applications.  Research results are incorporated into graduate and undergraduate courses.  The systems developed will also directly impact the broader community through programs at Purdue University including the Engineering Projects In Community Service and the Vertically Integrated Projects.</AbstractNarration>
<MinAmdLetterDate>08/12/2009</MinAmdLetterDate>
<MaxAmdLetterDate>09/24/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0925851</AwardID>
<Investigator>
<FirstName>Saurabh</FirstName>
<LastName>Bagchi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Saurabh Bagchi</PI_FULL_NAME>
<EmailAddress>sbagchi@purdue.edu</EmailAddress>
<PI_PHON>7654941741</PI_PHON>
<NSF_ID>000309372</NSF_ID>
<StartDate>08/12/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Vijay</FirstName>
<LastName>Raghunathan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Vijay Raghunathan</PI_FULL_NAME>
<EmailAddress>vr@purdue.edu</EmailAddress>
<PI_PHON>7654947392</PI_PHON>
<NSF_ID>000203148</NSF_ID>
<StartDate>08/12/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[Young Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0510403</Code>
<Name>Engineering &amp; Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7564</Code>
<Text>CCSS-Comms Circuits &amp; Sens Sys</Text>
</ProgramElement>
<ProgramReference>
<Code>0000</Code>
<Text>UNASSIGNED</Text>
</ProgramReference>
<ProgramReference>
<Code>7423</Code>
<Text>Energy collection &amp; storage</Text>
</ProgramReference>
<ProgramReference>
<Code>OTHR</Code>
<Text>OTHER RESEARCH OR EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~117660</FUND_OBLG>
<FUND_OBLG>2011~98258</FUND_OBLG>
<FUND_OBLG>2012~101315</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Wireless sensor networks (WSNs) are plagued by the possibility of bugs manifesting only at deployment. However, debugging deployed WSNs is challenging for several reasons - the remote location of deployed sensor nodes, the non-determinism of execution that can make it difficult to replicate a buggy run, and the limited hardware resources available on a node. This project proposed a suite of hardware and software innovations that address the challenge of post-deployment error diagnosis and debugging of WSNs. Specifically, this project has resulted in three novel hardware-software systems that address various aspects of this post-deployment debugging problem:</p> <p>(a)&nbsp;We have designed and prototyped Aveksha [Sensys-2011], a hardware-software approach for tracing applications running in an embedded wireless node in a non-intrusive manner. Our approach is based on the key insight that most embedded processors have an on-chip debug module (which has traditionally been used for interactive debugging) that provides significant visibility into the internal state of the processor. We designed a debug board (shown in figure) that interfaces with the on-chip debug module of an embedded node&rsquo;s processor through the JTAG port and provides three modes of event logging and tracing of varying granularities. Using expressive triggers that the on-chip debug module supports, Aveksha can watch for, and record, a variety of programmable events of interest, such as, a read from a peripheral I/O device. A key feature of Aveksha is that the target processor does not have to be stopped during event logging (in two of the three modes), subject to a limit on the rate at which logged events occur. Aveksha also performs power monitoring of the embedded wireless node and, importantly, enables power consumption data to be correlated to events of interest.&nbsp;</p> <p>(b) Keeping with the project's main premise that a joint hardware-software approach (when possible) is ideal to address the problem of post-deployment node monitoring and control, we advocate a rethinking of the hardware architecture of sensor nodes to include an additional (low-cost and low-power) component that we call the reliability co-processor, which is responsible for monitoring the operation of the sensor node. As we demonstrate in this project, logically and physically separating the monitoring functionality from both the application software and the main processor in this manner allows the monitoring to be conducted in a decoupled, non-intrusive, and transparent manner, enhancing reliability. As an embodiment of this design principle, we proposed SPI-Snooper [CODES-ISSS-2012], a co-processor augmented hardware platform specifically designed for post-deployment network monitoring in WSNs.&nbsp;</p> <p>SPI-Snooper is completely cross-compatible with the Telos wireless sensor nodes from an operational standpoint and is based on a novel hardware architecture that enables transparent snooping of the communication bus between the main processor and the radio of the wireless sensor node. The accompanying software architecture provides a powerful tool for monitoring, logging, and even controlling all the communication that takes place between the main processor and the radio. We conducted a rigorous evaluation of our prototype and demonstrated its utility using a variety of usage scenarios.&nbsp;</p> <p>(c)&nbsp;Finally, we have developed Tardis [IPSN-2015], a software-only approach for deterministic record and replay of WSN nodes. Record and replay can potentially make the process of cyclic debugging less tedious. With record and replay debugging, program execution is recorded on-line and then reproduced offline. Record and replay cuts down on the cyclic process of debugging by capturing a program's execution such that it can be deterministically reproduced and carefully examined offline, perhaps in a hunt for elusi...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Wireless sensor networks (WSNs) are plagued by the possibility of bugs manifesting only at deployment. However, debugging deployed WSNs is challenging for several reasons - the remote location of deployed sensor nodes, the non-determinism of execution that can make it difficult to replicate a buggy run, and the limited hardware resources available on a node. This project proposed a suite of hardware and software innovations that address the challenge of post-deployment error diagnosis and debugging of WSNs. Specifically, this project has resulted in three novel hardware-software systems that address various aspects of this post-deployment debugging problem:  (a) We have designed and prototyped Aveksha [Sensys-2011], a hardware-software approach for tracing applications running in an embedded wireless node in a non-intrusive manner. Our approach is based on the key insight that most embedded processors have an on-chip debug module (which has traditionally been used for interactive debugging) that provides significant visibility into the internal state of the processor. We designed a debug board (shown in figure) that interfaces with the on-chip debug module of an embedded nodeÆs processor through the JTAG port and provides three modes of event logging and tracing of varying granularities. Using expressive triggers that the on-chip debug module supports, Aveksha can watch for, and record, a variety of programmable events of interest, such as, a read from a peripheral I/O device. A key feature of Aveksha is that the target processor does not have to be stopped during event logging (in two of the three modes), subject to a limit on the rate at which logged events occur. Aveksha also performs power monitoring of the embedded wireless node and, importantly, enables power consumption data to be correlated to events of interest.   (b) Keeping with the project's main premise that a joint hardware-software approach (when possible) is ideal to address the problem of post-deployment node monitoring and control, we advocate a rethinking of the hardware architecture of sensor nodes to include an additional (low-cost and low-power) component that we call the reliability co-processor, which is responsible for monitoring the operation of the sensor node. As we demonstrate in this project, logically and physically separating the monitoring functionality from both the application software and the main processor in this manner allows the monitoring to be conducted in a decoupled, non-intrusive, and transparent manner, enhancing reliability. As an embodiment of this design principle, we proposed SPI-Snooper [CODES-ISSS-2012], a co-processor augmented hardware platform specifically designed for post-deployment network monitoring in WSNs.   SPI-Snooper is completely cross-compatible with the Telos wireless sensor nodes from an operational standpoint and is based on a novel hardware architecture that enables transparent snooping of the communication bus between the main processor and the radio of the wireless sensor node. The accompanying software architecture provides a powerful tool for monitoring, logging, and even controlling all the communication that takes place between the main processor and the radio. We conducted a rigorous evaluation of our prototype and demonstrated its utility using a variety of usage scenarios.   (c) Finally, we have developed Tardis [IPSN-2015], a software-only approach for deterministic record and replay of WSN nodes. Record and replay can potentially make the process of cyclic debugging less tedious. With record and replay debugging, program execution is recorded on-line and then reproduced offline. Record and replay cuts down on the cyclic process of debugging by capturing a program's execution such that it can be deterministically reproduced and carefully examined offline, perhaps in a hunt for elusive bugs. In addition, in WSNs, the recording can happen on the nodes and the replay and debugging can happen on the r...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
