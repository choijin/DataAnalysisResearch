<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Large:Collaborative Research: TRELLYS:  Community-Based Design and Implementation of a Dependently Typed Programming Language</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>691207.00</AwardTotalIntnAmount>
<AwardAmount>706907</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The cost-effective construction of functionally correct software systems remains an unmet challenge for Computer Science. Although industrial best practices for software construction (such as testing, code reviews, automatic bug finding) have low cost, they cannot provide strong guarantees about correctness. Classical verification methods, on the other hand, are not cost-effective. Recently, the research community has been exploring the idea of dependent types, which extend the expressive power of programming languages to support verification. These rich types allow the programmer to express non-trivial invariant properties of her data and code as a part of her program. That way, verification is incremental, localized and at source-language level.&lt;br/&gt;&lt;br/&gt;This multi-institution collaborative project is for the design and implementation of a programming language with dependent types, called Trellys. Technically, Trellys is call-by-value functional programming language with full-spectrum dependency. Overall, the project combines numerous fragmented research results into a coherent language design, by building a robust open-source implementation. The design draws on diverse solutions to the technical problems that arise from extending traditional programming languages accommodate dependent types: type and effect inference, language interoperability, compilation, and concurrency.</AbstractNarration>
<MinAmdLetterDate>08/24/2009</MinAmdLetterDate>
<MaxAmdLetterDate>03/22/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0910510</AwardID>
<Investigator>
<FirstName>Aaron</FirstName>
<LastName>Stump</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Aaron D Stump</PI_FULL_NAME>
<EmailAddress>aaron-stump@uiowa.edu</EmailAddress>
<PI_PHON>3193840093</PI_PHON>
<NSF_ID>000241804</NSF_ID>
<StartDate>08/24/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Iowa</Name>
<CityName>IOWA CITY</CityName>
<ZipCode>522421320</ZipCode>
<PhoneNumber>3193352123</PhoneNumber>
<StreetAddress>2 GILMORE HALL</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>062761671</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF IOWA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>062761671</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Iowa]]></Name>
<CityName>IOWA CITY</CityName>
<StateCode>IA</StateCode>
<ZipCode>522421320</ZipCode>
<StreetAddress><![CDATA[2 GILMORE HALL]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9217</Code>
<Text>NATNL RESERCH &amp; EDUCAT NETWORK</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~691207</FUND_OBLG>
<FUND_OBLG>2011~15700</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The remarkable growth of computing through all areas of our society depends critically on programming languages.&nbsp; These languages allow<br />computer programmers to direct the actions of computers in areas like flight-control, medicine, finance, energy infrastructure, and many<br />others.&nbsp; Errors in programs designed for such purposes could be very costly, even life-threatening.&nbsp; Unfortunately, traditional programming languages do not provide a way for programmers to guarantee that their programs have no mistakes.<br /><br />The Trellys project is one attempt to solve this problem by providing tools that assure program correctness through proof. Currently, the best way to ensure correctness of software is to test it in example situations.&nbsp; But at best, testing can only cover a tiny fraction of the vast number of different scenarios that could arise when software is used in practice.&nbsp; In contrast, with mathematical proofs, correctness can be ensured for all possible scenarios.&nbsp; The consequences of this design are potentially momentous for programming practice.<br /><br />This collaboration among researchers Tim Sheard (Portland State), Aaron Stump (The University of Iowa), and Stephanie Weirich (The University of Pennsylvania) developed new programming languages that combine the usual features needed for programming, with new language features for proving properties about programs. Just as in mathematics, a proof provides incontrovertible evidence of the truth of some theorem.&nbsp; In the domain of programming, example theorems could be simple statements like "If you reverse the order of elements in a list, and then reverse the result, you get back the original list".&nbsp; They could also be much more complex statements about the behavior of large pieces of software.&nbsp; By providing programmers with a proof language to complement their usual programming language, this project seeks to give programmers the tools they need to guarantee their software works as intended.<br /><br />Creating languages that combine proofs and programs in a seamless whole is a challenging technical endeavor.&nbsp; One of the central issues is ensuring that the proof language is logically sound: it should not be possible to write down a proof in the language for some statement that is not, in fact, true.&nbsp; Proving soundness is a deep subject in mathematical logic, and the researchers working on Trellys have adapted ideas from logic to show the soundness of logics that reason about and are combined with programs.<br /><br />Trellys explored a number of different language designs, based on different trade-offs between the tightness of the connection between proofs and programs, and the technical difficulty of establishing properties like logical soundness.&nbsp; These different designs are formally described in the associated publications, and many have also been implemented, to enable further experimentation with writing programs and proofs in these advanced new languages.&nbsp; While much progress was made in understanding how proofs and programs can be intertwined, more research and more engineering work is needed to create new, industrial-strength languages incorporating proofs and programs, while providing strong guarantees of properties like logical soundness.</p><br> <p>            Last Modified: 11/25/2014<br>      Modified by: Aaron&nbsp;D&nbsp;Stump</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The remarkable growth of computing through all areas of our society depends critically on programming languages.  These languages allow computer programmers to direct the actions of computers in areas like flight-control, medicine, finance, energy infrastructure, and many others.  Errors in programs designed for such purposes could be very costly, even life-threatening.  Unfortunately, traditional programming languages do not provide a way for programmers to guarantee that their programs have no mistakes.  The Trellys project is one attempt to solve this problem by providing tools that assure program correctness through proof. Currently, the best way to ensure correctness of software is to test it in example situations.  But at best, testing can only cover a tiny fraction of the vast number of different scenarios that could arise when software is used in practice.  In contrast, with mathematical proofs, correctness can be ensured for all possible scenarios.  The consequences of this design are potentially momentous for programming practice.  This collaboration among researchers Tim Sheard (Portland State), Aaron Stump (The University of Iowa), and Stephanie Weirich (The University of Pennsylvania) developed new programming languages that combine the usual features needed for programming, with new language features for proving properties about programs. Just as in mathematics, a proof provides incontrovertible evidence of the truth of some theorem.  In the domain of programming, example theorems could be simple statements like "If you reverse the order of elements in a list, and then reverse the result, you get back the original list".  They could also be much more complex statements about the behavior of large pieces of software.  By providing programmers with a proof language to complement their usual programming language, this project seeks to give programmers the tools they need to guarantee their software works as intended.  Creating languages that combine proofs and programs in a seamless whole is a challenging technical endeavor.  One of the central issues is ensuring that the proof language is logically sound: it should not be possible to write down a proof in the language for some statement that is not, in fact, true.  Proving soundness is a deep subject in mathematical logic, and the researchers working on Trellys have adapted ideas from logic to show the soundness of logics that reason about and are combined with programs.  Trellys explored a number of different language designs, based on different trade-offs between the tightness of the connection between proofs and programs, and the technical difficulty of establishing properties like logical soundness.  These different designs are formally described in the associated publications, and many have also been implemented, to enable further experimentation with writing programs and proofs in these advanced new languages.  While much progress was made in understanding how proofs and programs can be intertwined, more research and more engineering work is needed to create new, industrial-strength languages incorporating proofs and programs, while providing strong guarantees of properties like logical soundness.       Last Modified: 11/25/2014       Submitted by: Aaron D Stump]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
