<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Medium: A Component Architecture for Web Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2010</AwardEffectiveDate>
<AwardExpirationDate>05/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>923222.00</AwardTotalIntnAmount>
<AwardAmount>923222</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Although the World-Wide-Web was initially conceived as a vehicle for delivering documents, it is now being used more and more for delivering sophisticated interactive applications.  However, creating powerful Web applications is a difficult task and current development tools exacerbate the problems with a low-level approach that discourages modularity and code reuse.  This project is exploring a new architecture for Web application development, where applications are created by assembling high-level reusable components rather than building from scratch.  A component architecture can dramatically simplify the development of interactive Web applications by encouraging reusability and by hiding inside the components many of the complexities that bedevil Web developers today.  This project is exploring three aspects of component architectures: new abstractions for higher-level Web components, including layout management; abstractions for layering data management components to simplify transformations, business rules, and aggregation; and the application of component architectures to mobile devices in order to manage differences in device form factors. We are exploring design choices, creating production-quality  implementations for both framework elements and specific components, and evaluating the implementations.  In addition, we are releasing the framework in open-source form for others to use.  Overall, this project will increase our understanding of component-based architectures and Web application development.</AbstractNarration>
<MinAmdLetterDate>06/02/2010</MinAmdLetterDate>
<MaxAmdLetterDate>10/19/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0963859</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Ousterhout</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John K Ousterhout</PI_FULL_NAME>
<EmailAddress>ouster@cs.stanford.edu</EmailAddress>
<PI_PHON>6507216325</PI_PHON>
<NSF_ID>000515140</NSF_ID>
<StartDate>06/02/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009214214</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LELAND STANFORD JUNIOR UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009214214</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stanford University]]></Name>
<CityName>Stanford</CityName>
<StateCode>CA</StateCode>
<ZipCode>943052004</ZipCode>
<StreetAddress><![CDATA[450 Jane Stanford Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~606170</FUND_OBLG>
<FUND_OBLG>2011~317052</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project carried out research under two broad themes: Web development frameworks, and large-scale storage systems.<br /><br />For its first two years, the project focused on Web development frameworks. The goal of this research was to encourage the creation of reusable components, so that sophisticated interactive Web applications can be created quickly by assembling components rather than building from scratch. The research produced the following outcomes:</p> <ul> <li>We demonstrated how components can significantly simplify the creation of Web forms, the use of AJAX and long-polling, and the implementation of undo mechanisms.</li> <li>We developed and demonstrated a scalable mechanism for notification among the servers of a large-scale Web application.</li> <li>We showed how long-polling can be integrated cleanly into existing Web frameworks; this allows Web pages to update automatically in response to event occurring on Web servers.</li> </ul> <p>The Web frameworks research reached a natural conclusion after two years, at which point we changed the scope of the remaining work to focus on the RAMCloud storage system. RAMCloud is a high-performance key-value store intended to enable a new class of large-scale, data-intensive applications running in datacenters. RAMCloud has the unusual property that it keeps all data in DRAM at all times; this allows client applications anywhere in a datacenter to access RAMCloud storage with extremely low latency (5-10 microseconds for small objects). In order to support large capacities, RAMCloud aggregates the memories of thousands of servers into a single coherent storage system. The RAMCloud goals of low latency and large scale require virtually every aspect of storage system design to be revisited. The NSF-supported research produced the following outcomes:</p> <ul> <li>We developed a crash recovery mechanism that provides a high level of durability and availability for data stored in volatile DRAM, without slowing down accesses. The crash recovery mechanism keeps backup data on secondary storage and uses hundreds or thousands of servers running in parallel to recover from a server crash in 1-2 seconds.</li> <li>We developed a new approach for storage management that structures information both in DRAM and secondary storage as a log. This doubles effective memory utilization, in comparison to previous techniques, while providing high performance.</li> <li>We developed a new rules-based approach for building fault-tolerant modules in large-scale systems such as RAMCloud.</li> <li>We developed a new consensus protocol called Raft that is more understandable than Paxos (the previous benchmark) and also provides a better architecture for practical implementations.</li> <li>We produced a production-quality implementation of RAMCloud and released it freely as an open-source package.</li> </ul><br> <p>            Last Modified: 06/25/2014<br>      Modified by: John&nbsp;K&nbsp;Ousterhout</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project carried out research under two broad themes: Web development frameworks, and large-scale storage systems.  For its first two years, the project focused on Web development frameworks. The goal of this research was to encourage the creation of reusable components, so that sophisticated interactive Web applications can be created quickly by assembling components rather than building from scratch. The research produced the following outcomes:  We demonstrated how components can significantly simplify the creation of Web forms, the use of AJAX and long-polling, and the implementation of undo mechanisms. We developed and demonstrated a scalable mechanism for notification among the servers of a large-scale Web application. We showed how long-polling can be integrated cleanly into existing Web frameworks; this allows Web pages to update automatically in response to event occurring on Web servers.   The Web frameworks research reached a natural conclusion after two years, at which point we changed the scope of the remaining work to focus on the RAMCloud storage system. RAMCloud is a high-performance key-value store intended to enable a new class of large-scale, data-intensive applications running in datacenters. RAMCloud has the unusual property that it keeps all data in DRAM at all times; this allows client applications anywhere in a datacenter to access RAMCloud storage with extremely low latency (5-10 microseconds for small objects). In order to support large capacities, RAMCloud aggregates the memories of thousands of servers into a single coherent storage system. The RAMCloud goals of low latency and large scale require virtually every aspect of storage system design to be revisited. The NSF-supported research produced the following outcomes:  We developed a crash recovery mechanism that provides a high level of durability and availability for data stored in volatile DRAM, without slowing down accesses. The crash recovery mechanism keeps backup data on secondary storage and uses hundreds or thousands of servers running in parallel to recover from a server crash in 1-2 seconds. We developed a new approach for storage management that structures information both in DRAM and secondary storage as a log. This doubles effective memory utilization, in comparison to previous techniques, while providing high performance. We developed a new rules-based approach for building fault-tolerant modules in large-scale systems such as RAMCloud. We developed a new consensus protocol called Raft that is more understandable than Paxos (the previous benchmark) and also provides a better architecture for practical implementations. We produced a production-quality implementation of RAMCloud and released it freely as an open-source package.        Last Modified: 06/25/2014       Submitted by: John K Ousterhout]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
