<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR:Medium:Improving Software Reliability and Security Through Multicore Technology</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>1200000.00</AwardTotalIntnAmount>
<AwardAmount>1200000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Society depends heavily on computers functioning correctly and securely.  Unfortunately, software continues to be plagued by bugs and security vulnerabilities, and these problems are likely to get worse as multicore processors become ubiquitous and more programs become multithreaded.  Yet multicore technology also provides the opportunity to use parallelism on commodity computers to improve software robustness.&lt;br/&gt;This research seeks to improve the reliability and security of software by using multicore processors to enable new types of powerful, run-time checks.  The project will make it possible to run checks in parallel on multicore systems, while preserving the same strong safety guarantees and simple programming model of running checks sequentially.  The project will also study how to enable online data race detection and deterministic replay for multithreaded programs running on multiprocessors by offloading the work of data race detection onto other cores.  Finally, the project will study powerful, new classes of run-time checks that are enabled by speculative parallel checks, multicore processors, and deterministic replay.&lt;br/&gt;This research will benefit society by developing techniques to make software systems more reliable and secure and by producing open-source software artifacts that can be used by other groups.  The project will also contribute material for courses that teach how to program multicore computers.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/01/2009</MinAmdLetterDate>
<MaxAmdLetterDate>09/09/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0905149</AwardID>
<Investigator>
<FirstName>Peter</FirstName>
<LastName>Chen</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Peter M Chen</PI_FULL_NAME>
<EmailAddress>pmchen@umich.edu</EmailAddress>
<PI_PHON>7347634472</PI_PHON>
<NSF_ID>000119730</NSF_ID>
<StartDate>08/01/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jason</FirstName>
<LastName>Flinn</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jason N Flinn</PI_FULL_NAME>
<EmailAddress>jflinn@umich.edu</EmailAddress>
<PI_PHON>7349365983</PI_PHON>
<NSF_ID>000096770</NSF_ID>
<StartDate>08/01/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Satish</FirstName>
<LastName>Narayanasamy</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Satish Narayanasamy</PI_FULL_NAME>
<EmailAddress>nsatish@eecs.umich.edu</EmailAddress>
<PI_PHON>8584010455</PI_PHON>
<NSF_ID>000083847</NSF_ID>
<StartDate>08/01/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Regents of the University of Michigan - Ann Arbor</Name>
<CityName>Ann Arbor</CityName>
<ZipCode>481091274</ZipCode>
<PhoneNumber>7347636438</PhoneNumber>
<StreetAddress>3003 South State St. Room 1062</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI12</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>073133571</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF MICHIGAN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>073133571</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Regents of the University of Michigan - Ann Arbor]]></Name>
<CityName>Ann Arbor</CityName>
<StateCode>MI</StateCode>
<ZipCode>481091274</ZipCode>
<StreetAddress><![CDATA[3003 South State St. Room 1062]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~600000</FUND_OBLG>
<FUND_OBLG>2010~300000</FUND_OBLG>
<FUND_OBLG>2011~300000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Making software reliable and secure is one of the most important challenges facing computer science. &nbsp;Society continues to depend more heavily on computers functioning correctly and securely. Yet software continues to be plagued by bugs and security vulnerabilities, and these problems are likely to get worse as multicore processors become ubiquitous and more programs become multithreaded.</p> <p>The goal of this research project was to leverage multicore processors to enable new types of powerful, run-time checks. &nbsp;To make it practical to check the behavior of parallel programs, we first invented a new way to run parallel programs, which we called uniparallelism. &nbsp;Uniparallelism makes it dramatically faster and easier to check running programs by dividing the program into epochs and running each epoch on a single processor. &nbsp;Uniparallelism uses a second, non-checked execution of the program to enable multiple epochs to run simultaneously and thereby regain the original parallelism of the program.</p> <p>We leveraged uniparallelism to create extremely efficient run-time support systems for parallel software. &nbsp;The first system, DoublePlay, was the first software system that could replay an execution of a parallel program efficiently. &nbsp;This capability is known as deterministic replay and is a powerful tool for analyzing intrusions in computer systems and debugging programs. &nbsp;The second system, Frost, demonstrated a new way to detect an important class of bugs, known as race conditions, which have been responsible for numerous important security breaches. &nbsp;We also showed how uniparallelism accelerated two traditional race detectors.</p> <p>We also created practical tools to support parallel software. &nbsp;We developed the first causality model for Android event-driven programs, and we show that this causality model is effective at detecting races in popular Android applications. &nbsp;We also developed a deterministic replay system for desktop applications and integrated it with information flow analysis tools.</p> <p>The project has trained 6 computer science graduate students in important research skills. These students have participated in all phases of research: idea creation, design, implementation, evaluation, and presentation of results through written and oral communication.</p><br> <p>            Last Modified: 09/09/2015<br>      Modified by: Peter&nbsp;M&nbsp;Chen</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Making software reliable and secure is one of the most important challenges facing computer science.  Society continues to depend more heavily on computers functioning correctly and securely. Yet software continues to be plagued by bugs and security vulnerabilities, and these problems are likely to get worse as multicore processors become ubiquitous and more programs become multithreaded.  The goal of this research project was to leverage multicore processors to enable new types of powerful, run-time checks.  To make it practical to check the behavior of parallel programs, we first invented a new way to run parallel programs, which we called uniparallelism.  Uniparallelism makes it dramatically faster and easier to check running programs by dividing the program into epochs and running each epoch on a single processor.  Uniparallelism uses a second, non-checked execution of the program to enable multiple epochs to run simultaneously and thereby regain the original parallelism of the program.  We leveraged uniparallelism to create extremely efficient run-time support systems for parallel software.  The first system, DoublePlay, was the first software system that could replay an execution of a parallel program efficiently.  This capability is known as deterministic replay and is a powerful tool for analyzing intrusions in computer systems and debugging programs.  The second system, Frost, demonstrated a new way to detect an important class of bugs, known as race conditions, which have been responsible for numerous important security breaches.  We also showed how uniparallelism accelerated two traditional race detectors.  We also created practical tools to support parallel software.  We developed the first causality model for Android event-driven programs, and we show that this causality model is effective at detecting races in popular Android applications.  We also developed a deterministic replay system for desktop applications and integrated it with information flow analysis tools.  The project has trained 6 computer science graduate students in important research skills. These students have participated in all phases of research: idea creation, design, implementation, evaluation, and presentation of results through written and oral communication.       Last Modified: 09/09/2015       Submitted by: Peter M Chen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
