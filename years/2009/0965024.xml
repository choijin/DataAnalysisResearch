<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Vitamin C: A Deductive Framework for Generating Analyzers for C Programs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2009</AwardEffectiveDate>
<AwardExpirationDate>07/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>259198.00</AwardTotalIntnAmount>
<AwardAmount>266698</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>0702600&lt;br/&gt;&lt;br/&gt;Vitamin C: A Framework for Generating Analyzers for C Programs&lt;br/&gt;&lt;br/&gt;Jerry James&lt;br/&gt;&lt;br/&gt;This project intends to increase the level of confidence in software systems deployed in mission-critical environments by providing a comprehensive platform for analyzing various aspects of software correctness.  More precisely, it focuses on developing a deductive program transformation framework for automatically generating specialized analyzers for C programs in an aspect-oriented way.  In contrast with code analyzers that take arbitrary programs as input, this research will show how to synthesize a code analyzer that is specialized to the program under analysis and the correctness aspect under consideration.  Such specialization will open up new vistas for making code analyzers more efficient than is currently possible, as well as providing a platform for experimenting with different program analysis algorithms.  The project will lead to the development of a deductive framework for a new class of modal logics.  In addition, it will lead to a study of the application of partial evaluation and program transformation techniques for generating efficient program analyzers suited to particular analysis problems.  The results of this project will be used to aid open source developers in analyzing their software projects, and to introduce students to mathematically rigorous techniques for reasoning about the correctness of software.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>10/27/2009</MinAmdLetterDate>
<MaxAmdLetterDate>01/27/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0965024</AwardID>
<Investigator>
<FirstName>Supratik</FirstName>
<LastName>Mukhopadhyay</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Supratik Mukhopadhyay</PI_FULL_NAME>
<EmailAddress>supratik@csc.lsu.edu</EmailAddress>
<PI_PHON>2255781496</PI_PHON>
<NSF_ID>000209895</NSF_ID>
<StartDate>10/27/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Louisiana State University</Name>
<CityName>Baton Rouge</CityName>
<ZipCode>708032701</ZipCode>
<PhoneNumber>2255782760</PhoneNumber>
<StreetAddress>202 Himes Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Louisiana</StateName>
<StateCode>LA</StateCode>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>LA06</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>075050765</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LOUISIANA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>940050792</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Louisiana State University]]></Name>
<CityName>Baton Rouge</CityName>
<StateCode>LA</StateCode>
<ZipCode>708032701</ZipCode>
<StreetAddress><![CDATA[202 Himes Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Louisiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>LA06</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~45403</FUND_OBLG>
<FUND_OBLG>2008~213795</FUND_OBLG>
<FUND_OBLG>2010~7500</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>We have been able to accomplish the following tasks in this project</p> <p>&nbsp;</p> <p>1. Development of a deductive abstraction framework that provides safe approximations of program semantics</p> <p>2. Implementation of a program transformation framework for weaving in analysis aspects written in FCTL</p> <p>3. Development of the syntax and semantics of a modal logic VCL (Verification of C Logic) for specifying properties of C programs</p> <p>4. Implementation of a resolution procedure with constraints</p> <p>5. Extension and implementation of the program transformation framework for dealing with pointers and arrays and incorporating VCL formulas as analysis aspects</p> <p>6. An abstraction framework for deriving an abstract resolution procedure and predicting its accuracy and termination</p> <p>7. Introduction of a logic with a sound and complete proof system for reasoning about C and Java &nbsp;programs with library function calls (model-based static analysis)</p> <p>8. Preliminary definition of a soft analysis approach for generating unit tests from results of static analysis</p> <p>9. Development of a language-based abstraction framework</p> <p>10. Integration of deductive verification in higher order logic with static analysis and a case study of verifying an open source Netgear router using deductive static analysis</p> <p>&nbsp;</p> <p>Our project introduces a new paradigm in analysis of software: on-demand intelligent program analysis. It draws ideas from hitherto unexplored areas of constructive logic and type theory to develop techniques for automatically synthesizing "static program monitors" on-demand from specifications of analysis aspects. These "monitors" accept the "collecting semantics" of the source code as input and decide whether it conforms to the given analysis aspect. In addition, our project helps shift the focus of program analysis from "hunting for shallow application-independent errors" to deeper application-dependent errors".</p> <p>&nbsp;</p> <p>The major discoveries&nbsp; can be summarized in the following bullets</p> <p>1. Development of a language-based abstraction framework</p> <p>2. A case study of verifying an open source Netgear router using deductive static analysis. Christopher Steinmuller, an undergraduate student, together with graduate student Zheng Lu, formally verified the conformance of the firmware of Netgear's WNR 3500 L wireless router with RFC 2131 based on which it is designed. This resulted in the world's first router with formally verified router. Formally verified OCAML code for the router firmware was generated automatically. Based on this work, Christopher Steinmuller won an honorable mention in CRA Undergraduate Research award competition, 2011.</p> <p>3.&nbsp; Analysis of termination and other liveness properties of an imperative program can be reduced to termination proof synthesis for simple loops, <em>i.e.</em>, loops with only variable updates in the loop body. Among simple loops, the subset of <em>Linear Simple Loops </em>(LSLs) is particular interesting because it is common in practice and expressive in theory. Existing techniques can successfully synthesize a linear ranking function for an LSL if there exists one. However, when a terminating LSL does not have a linear ranking function, these techniques fail. &nbsp;We describe an automatic method that generates proofs of universal termination for LSLs based on the synthesis of disjunctive ranking relations. The method repeatedly finds linear ranking functions on parts of the state space and checks whether the transitive closure of the transition relation is included in the union of the ranking relations. Our method extends the work of Podelski and Rybalchenko. We have implemented a prototype of the method and have shown experimental evidence of the effectiveness of our method.</p> <p>4. We combined static analysis techniques with model-based deductiv...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ We have been able to accomplish the following tasks in this project     1. Development of a deductive abstraction framework that provides safe approximations of program semantics  2. Implementation of a program transformation framework for weaving in analysis aspects written in FCTL  3. Development of the syntax and semantics of a modal logic VCL (Verification of C Logic) for specifying properties of C programs  4. Implementation of a resolution procedure with constraints  5. Extension and implementation of the program transformation framework for dealing with pointers and arrays and incorporating VCL formulas as analysis aspects  6. An abstraction framework for deriving an abstract resolution procedure and predicting its accuracy and termination  7. Introduction of a logic with a sound and complete proof system for reasoning about C and Java  programs with library function calls (model-based static analysis)  8. Preliminary definition of a soft analysis approach for generating unit tests from results of static analysis  9. Development of a language-based abstraction framework  10. Integration of deductive verification in higher order logic with static analysis and a case study of verifying an open source Netgear router using deductive static analysis     Our project introduces a new paradigm in analysis of software: on-demand intelligent program analysis. It draws ideas from hitherto unexplored areas of constructive logic and type theory to develop techniques for automatically synthesizing "static program monitors" on-demand from specifications of analysis aspects. These "monitors" accept the "collecting semantics" of the source code as input and decide whether it conforms to the given analysis aspect. In addition, our project helps shift the focus of program analysis from "hunting for shallow application-independent errors" to deeper application-dependent errors".     The major discoveries  can be summarized in the following bullets  1. Development of a language-based abstraction framework  2. A case study of verifying an open source Netgear router using deductive static analysis. Christopher Steinmuller, an undergraduate student, together with graduate student Zheng Lu, formally verified the conformance of the firmware of Netgear's WNR 3500 L wireless router with RFC 2131 based on which it is designed. This resulted in the world's first router with formally verified router. Formally verified OCAML code for the router firmware was generated automatically. Based on this work, Christopher Steinmuller won an honorable mention in CRA Undergraduate Research award competition, 2011.  3.  Analysis of termination and other liveness properties of an imperative program can be reduced to termination proof synthesis for simple loops, i.e., loops with only variable updates in the loop body. Among simple loops, the subset of Linear Simple Loops (LSLs) is particular interesting because it is common in practice and expressive in theory. Existing techniques can successfully synthesize a linear ranking function for an LSL if there exists one. However, when a terminating LSL does not have a linear ranking function, these techniques fail.  We describe an automatic method that generates proofs of universal termination for LSLs based on the synthesis of disjunctive ranking relations. The method repeatedly finds linear ranking functions on parts of the state space and checks whether the transitive closure of the transition relation is included in the union of the ranking relations. Our method extends the work of Podelski and Rybalchenko. We have implemented a prototype of the method and have shown experimental evidence of the effectiveness of our method.  4. We combined static analysis techniques with model-based deductive verification using SMT solvers to provide a framework that, given an analysis aspect of the source code, automatically generates an analyzer capable of inferring information about that aspect. The analyzer is generated by trans...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
