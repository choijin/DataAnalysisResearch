<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Architectural Support for Automated Software Debugging</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/17/2009</AwardEffectiveDate>
<AwardExpirationDate>06/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>388229.00</AwardTotalIntnAmount>
<AwardAmount>388229</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Given their ever increasing complexity, modern software systems are plagued with software defects, commonly known as bugs. It usually takes significant amount of efforts for software developers to locate the defects after a program failure is observed. Due to the limited on-chip resource at the time, traditional architectural support for debugging was limited to a basic set of primitive functions like breakpoints and watchpoints. With the advances in semiconductor technology, the resource constraint is less of a concern and much more powerful architectural support becomes possible to be implemented to ease software debugging. In this research, novel software-hardware integrated approaches are developed to automatically pinpoint software defects and the aim is to develop a computer that can automatically pinpoint the faulty code in either sequential or parallel programs and potentially generate a fix to the defect.&lt;br/&gt;&lt;br/&gt;Previous work on architectural support for debugging mainly focused on one aspect of debugging activities including faithfully reproducing program failures or detecting potential bugs. In comparison, this research introduces novel architectural support for: bug detection to report potential bugs, bug isolation to find the relevant bugs based on cause-effect relationship between the potential bugs and the program failure, and bug validation to generate quick fixes to the isolated bugs, thereby forming a complete process of automated debugging. Bugs in both sequential and parallel programs are the target in this research. For parallel programs, the research investigates thread interaction under the transactional memory programming model and develops novel automated debugging schemes for concurrency bugs. The research also includes the prototype of the novel architectural supports to evaluate their effectiveness with real-world applications.</AbstractNarration>
<MinAmdLetterDate>12/23/2009</MinAmdLetterDate>
<MaxAmdLetterDate>02/01/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0968667</AwardID>
<Investigator>
<FirstName>Huiyang</FirstName>
<LastName>Zhou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Huiyang Zhou</PI_FULL_NAME>
<EmailAddress>hzhou@ncsu.edu</EmailAddress>
<PI_PHON>9195137386</PI_PHON>
<NSF_ID>000250126</NSF_ID>
<StartDate>12/23/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2><![CDATA[Admin. III, STE 240]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[North Carolina State University]]></Name>
<CityName>Raleigh</CityName>
<StateCode>NC</StateCode>
<ZipCode>276957514</ZipCode>
<StreetAddress><![CDATA[2601 Wolf Village Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~147007</FUND_OBLG>
<FUND_OBLG>2010~82990</FUND_OBLG>
<FUND_OBLG>2011~78732</FUND_OBLG>
<FUND_OBLG>2012~79500</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project focused on integrated hardware and software support for automated software debugging. The scope of the research covers software bugs in both sequential and parallel programs. Besides bugs affecting the correctness of program execution, performance bugs and security bugs have also been studied. A number of approaches have been designed and evaluated. Some software developed in the project has been released as open source code, including an automated debugging tool for sequential bugs, a tool to analyze concurrency bugs, and a compiler for optimizing GPGPU (general purpose computation on graphics processor units) programs. A total of 11 graduate students participated in the project and 6 of them finished their Ph.D. degrees and 2 completed their M.S. theses. Numerous papers have been published in premium venues of the computer architecture and compiler research. Two new courses have been developed based on the researching findings of the project.</p> <p>On correctness bugs in sequential software programs, an anomaly-based automated debugging framework is developed. The run-time anomalies are monitored and used as predictions of potential bugs. Then, predicted bugs are isolated based on their cause-effect relationship to the final incorrect execution result or events leading to computer hung or crashes. The isolated bug predictions are further validated by altering the anomalous results and then re-examining&nbsp;the program outputs. On concurrency bugs, non-determinism makes them hard to reason. An architectural support is designed to report time-ordered event traces to programmers. In essence, it serves the role of a black box that records the time-ordered function call traces right before program failures. The study in this project on concurrency bugs in large commercial software confirms the effectiveness of this time-order event trace.</p> <p>On security bugs, this project focuses on mitigating architectural side-channel attacks, cache-based attacks in particular. The root causes of cache-based attacks are analyzed and identified. Three software-hardware integrated designs are developed and evaluated to show the effectiveness in security enhancements and the associated&nbsp;performance impacts.&nbsp;</p> <p>On performance bugs, an empirical&nbsp;study is performed on a wide range of open-source&nbsp;GPGPU&nbsp;programs to identify six&nbsp;common program patterns that may lead to suboptimal performance. For each pattern, the prognosis&nbsp;and&nbsp;fix are developed and evaluated. To reduce the effort from programmers,various&nbsp;automating compiler techniques and architectural enhancements are a key result from&nbsp;this project. Such techniques span&nbsp;from&nbsp;multi-core&nbsp;processors, many-core GPU&nbsp;processors, and heterogeneous computing platforms.&nbsp;</p> <p>These research findings from this project are published in conference papers, journal papers, and theses/dissertations. Open source code is also distributed to help reproduce the experimental results and reveal the implementation details.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/07/2014<br>      Modified by: Huiyang&nbsp;Zhou</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project focused on integrated hardware and software support for automated software debugging. The scope of the research covers software bugs in both sequential and parallel programs. Besides bugs affecting the correctness of program execution, performance bugs and security bugs have also been studied. A number of approaches have been designed and evaluated. Some software developed in the project has been released as open source code, including an automated debugging tool for sequential bugs, a tool to analyze concurrency bugs, and a compiler for optimizing GPGPU (general purpose computation on graphics processor units) programs. A total of 11 graduate students participated in the project and 6 of them finished their Ph.D. degrees and 2 completed their M.S. theses. Numerous papers have been published in premium venues of the computer architecture and compiler research. Two new courses have been developed based on the researching findings of the project.  On correctness bugs in sequential software programs, an anomaly-based automated debugging framework is developed. The run-time anomalies are monitored and used as predictions of potential bugs. Then, predicted bugs are isolated based on their cause-effect relationship to the final incorrect execution result or events leading to computer hung or crashes. The isolated bug predictions are further validated by altering the anomalous results and then re-examining the program outputs. On concurrency bugs, non-determinism makes them hard to reason. An architectural support is designed to report time-ordered event traces to programmers. In essence, it serves the role of a black box that records the time-ordered function call traces right before program failures. The study in this project on concurrency bugs in large commercial software confirms the effectiveness of this time-order event trace.  On security bugs, this project focuses on mitigating architectural side-channel attacks, cache-based attacks in particular. The root causes of cache-based attacks are analyzed and identified. Three software-hardware integrated designs are developed and evaluated to show the effectiveness in security enhancements and the associated performance impacts.   On performance bugs, an empirical study is performed on a wide range of open-source GPGPU programs to identify six common program patterns that may lead to suboptimal performance. For each pattern, the prognosis and fix are developed and evaluated. To reduce the effort from programmers,various automating compiler techniques and architectural enhancements are a key result from this project. Such techniques span from multi-core processors, many-core GPU processors, and heterogeneous computing platforms.   These research findings from this project are published in conference papers, journal papers, and theses/dissertations. Open source code is also distributed to help reproduce the experimental results and reveal the implementation details.             Last Modified: 10/07/2014       Submitted by: Huiyang Zhou]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
