<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium:  Intelligent and Efficient Data Movement for Multicore Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2010</AwardEffectiveDate>
<AwardExpirationDate>05/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>1080000.00</AwardTotalIntnAmount>
<AwardAmount>1080000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hong Jiang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Multicore chips with hundreds of cores will likely be available soon. Current trends suggest that cores will be relatively simple, that on-chip memory will be partitioned into per-core caches, and that each cache will be relatively small. Furthermore, chips will continue to be pin-limited and therefore DRAM bandwidth won't scale with the number of cores.&lt;br/&gt;&lt;br/&gt;Parallel software that is data intensive has the potential to run well on multicore processors due to the large total amount of on-chip cache, but requires effective use of the distributed on-chip caches. The dangers are that data used by many cores will be duplicated in many cores' caches, decreasing the total amount of distinct data that can be cached; and that some cores may incur DRAM loads trying to access more data than fits in their caches, while other cores have spare cache space.&lt;br/&gt;&lt;br/&gt;As the number of cores per DRAM interface and the latencies between caches on a chip increase, it is important for software to manage the distributed caches well.  A collaborative approach that involves architects and systems researchers to extend the memory interface to provide control over data placement and enable on-chip efficient data movement provides a holistic solution.  Specifically, this work proposes data-movement control (DMC) interface, which includes support for cache-to-cache transfers, batching of several cache lines, sending a message to a core that is close to a cache that holds a particular data item, and data monitoring.  The proposal also includes techniques to route data over the  interconnect that will provide high performance for the DMC interface.&lt;br/&gt;&lt;br/&gt;If successful, DMC will help data-intensive applications avoid memory bottlenecks and allow them to run well on future multicore processors.  A full-system simulator will allow other researchers to explore intelligent and efficient data management and enable research projects in MIT's graduate computer architecture class, educating students about the challenges of multicore computing.</AbstractNarration>
<MinAmdLetterDate>06/06/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/11/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964106</AwardID>
<Investigator>
<FirstName>Srini</FirstName>
<LastName>Devadas</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Srini Devadas</PI_FULL_NAME>
<EmailAddress>devadas@mit.edu</EmailAddress>
<PI_PHON>6172530454</PI_PHON>
<NSF_ID>000451511</NSF_ID>
<StartDate>06/06/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>M. Frans</FirstName>
<LastName>Kaashoek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>M. Frans Kaashoek</PI_FULL_NAME>
<EmailAddress>kaashoek@lcs.mit.edu</EmailAddress>
<PI_PHON>6172537149</PI_PHON>
<NSF_ID>000098539</NSF_ID>
<StartDate>06/06/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Morris</LastName>
<PI_MID_INIT>T</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert T Morris</PI_FULL_NAME>
<EmailAddress>rtm@csail.mit.edu</EmailAddress>
<PI_PHON>6172535983</PI_PHON>
<NSF_ID>000471357</NSF_ID>
<StartDate>06/06/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Nickolai</FirstName>
<LastName>Zeldovich</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nickolai Zeldovich</PI_FULL_NAME>
<EmailAddress>nickolai@csail.mit.edu</EmailAddress>
<PI_PHON>6172536005</PI_PHON>
<NSF_ID>000520788</NSF_ID>
<StartDate>06/06/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394301</ZipCode>
<StreetAddress><![CDATA[77 MASSACHUSETTS AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramElement>
<ProgramElement>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~360000</FUND_OBLG>
<FUND_OBLG>2011~360000</FUND_OBLG>
<FUND_OBLG>2012~360000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Modern computers have many processors, called cores, that run in parallel. In order to fully utilize these processors, software has to be parallel, i.e., comprise of many tasks that can be run in parallel. &nbsp;Each core has associated fast memory called a cache that supplies data to the task running on that core. However, since cores are geographically distributed across the chip, so are the caches. &nbsp;Sometimes a task running on a core wishes to access data that is stored not on the cache right next to it, but in a remote cache. This access takes much longer than an access to the local cache. &nbsp;If too many of these remote cache accesses are required, the software will run slowly even though there are many procesors in the system. &nbsp;This project addresses the problem of ensuring that software is scalable, that is, it can exploit parallelism in the computer by managing the caches well.<br />One way to ensure that remote cache accesses are minimized, is to enable the task to move from one core to another, through a process of task migration. The migration of a task means that the instructions comprising the task are moved from one core to another. If there are relatively few instructions that define a task, but the task needs to access a vast quantity of data, task migration can be substantially more efficient than conventional data migration, which is what remote cache accesses require. &nbsp;First, energy consumption is lower because fewer bits of information are transferred inside the chip. Second, once the task is migrated, all the data that was initially remote now becomes local.<br />During the course of this project, we produced a detailed design and implementation of hardware-level instruction-granularity task migration in a 110-core chip multiprocessor called the Execution Migration Machine. Implemented in 45nm fabrication technology, the chip occupies 100 square millimeters, and comprises a 10 by 11 grid of processing cores. &nbsp;Our implementation provides end-to-end migration latency of 4 cycles between neighboring cores for a task, and 33 cycles between the farthest cores. &nbsp;Through detailed simulation of the implementation and testing of the prototype chip, we have demonstrated that task migration can reduce on-chip data movement by up to 14 times at a relatively small area cost of 23%.<br />For software to scale well on multicore processors it must be conflict free: that is, one core shouldn't read a cache line read by another core, because the core reading will be stalled until it receives the cache line. &nbsp;Such an access can be come scalability bottleneck if many cores are contending for the cache line. &nbsp;This project contributed a new tool, mtrace, to find scalability problems due to conflicting accesses. &nbsp;We used mtrace to find scalability problems in Linux, to design new operating subsystems that scale better, and to articulate the scalable commutativity rule, which makes it possible for developers to make software scalable by design.</p><br> <p>            Last Modified: 07/02/2015<br>      Modified by: M. Frans&nbsp;Kaashoek</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Modern computers have many processors, called cores, that run in parallel. In order to fully utilize these processors, software has to be parallel, i.e., comprise of many tasks that can be run in parallel.  Each core has associated fast memory called a cache that supplies data to the task running on that core. However, since cores are geographically distributed across the chip, so are the caches.  Sometimes a task running on a core wishes to access data that is stored not on the cache right next to it, but in a remote cache. This access takes much longer than an access to the local cache.  If too many of these remote cache accesses are required, the software will run slowly even though there are many procesors in the system.  This project addresses the problem of ensuring that software is scalable, that is, it can exploit parallelism in the computer by managing the caches well. One way to ensure that remote cache accesses are minimized, is to enable the task to move from one core to another, through a process of task migration. The migration of a task means that the instructions comprising the task are moved from one core to another. If there are relatively few instructions that define a task, but the task needs to access a vast quantity of data, task migration can be substantially more efficient than conventional data migration, which is what remote cache accesses require.  First, energy consumption is lower because fewer bits of information are transferred inside the chip. Second, once the task is migrated, all the data that was initially remote now becomes local. During the course of this project, we produced a detailed design and implementation of hardware-level instruction-granularity task migration in a 110-core chip multiprocessor called the Execution Migration Machine. Implemented in 45nm fabrication technology, the chip occupies 100 square millimeters, and comprises a 10 by 11 grid of processing cores.  Our implementation provides end-to-end migration latency of 4 cycles between neighboring cores for a task, and 33 cycles between the farthest cores.  Through detailed simulation of the implementation and testing of the prototype chip, we have demonstrated that task migration can reduce on-chip data movement by up to 14 times at a relatively small area cost of 23%. For software to scale well on multicore processors it must be conflict free: that is, one core shouldn't read a cache line read by another core, because the core reading will be stalled until it receives the cache line.  Such an access can be come scalability bottleneck if many cores are contending for the cache line.  This project contributed a new tool, mtrace, to find scalability problems due to conflicting accesses.  We used mtrace to find scalability problems in Linux, to design new operating subsystems that scale better, and to articulate the scalable commutativity rule, which makes it possible for developers to make software scalable by design.       Last Modified: 07/02/2015       Submitted by: M. Frans Kaashoek]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
