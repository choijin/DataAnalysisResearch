<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF:  Medium:  Collaborative Research:  Solutions to Planar Optimization Problems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>06/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>624988.00</AwardTotalIntnAmount>
<AwardAmount>636988</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jack S. Snoeyink</SignBlockName>
<PO_EMAI>jsnoeyin@nsf.gov</PO_EMAI>
<PO_PHON>7032920000</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The aim of this research is to develop new algorithms and algorithmic&lt;br/&gt;techniques for solving fundamental optimization problems on planar&lt;br/&gt;networks.  Many optimization problems in networks are considered&lt;br/&gt;computationally difficult; some are even difficult to solve&lt;br/&gt;approximately.  However, problems often become easier when the input&lt;br/&gt;network is restricted to be planar, i.e. when it can be drawn on the&lt;br/&gt;plane so that no edges cross each other.  Such planar instances of&lt;br/&gt;optimization problems arise in several application areas, including&lt;br/&gt;logistics and route planning in road maps, image processing and&lt;br/&gt;computer vision, and VLSI chip design.  &lt;br/&gt;&lt;br/&gt;The investigators plan to develop algorithms that achieve faster&lt;br/&gt;running times or better approximations by exploiting the planarity of&lt;br/&gt;the input networks.  In addition, in order to address the use of&lt;br/&gt;optimization in the discovery of some ground truth, the investigators&lt;br/&gt;will develop algorithms not just for the traditional worst-case input&lt;br/&gt;model but also for models in which there is an unusually good planted&lt;br/&gt;solution; for a model of this kind, the investigators expect to find&lt;br/&gt;algorithms that produce even more accurate answers.&lt;br/&gt;&lt;br/&gt;The research will likely uncover new computational techniques whose&lt;br/&gt;applicability goes beyond planar networks.  In the recent past, once a&lt;br/&gt;technique has been developed and understood in the context of planar&lt;br/&gt;networks, it has been generalized to apply to broader families of&lt;br/&gt;networks.&lt;br/&gt;&lt;br/&gt;In addition, new algorithms and techniques resulting from this&lt;br/&gt;research might enable people to quickly compute better solutions to&lt;br/&gt;problems arising in diverse application areas.  For example, research&lt;br/&gt;in this area has already had an impact in the computer vision&lt;br/&gt;community.  Further research has the potential to be useful, for&lt;br/&gt;example, in the design of networks, the planning of routes in road&lt;br/&gt;maps, the processing of images.</AbstractNarration>
<MinAmdLetterDate>07/26/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/06/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964037</AwardID>
<Investigator>
<FirstName>Philip</FirstName>
<LastName>Klein</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Philip N Klein</PI_FULL_NAME>
<EmailAddress>klein@brown.edu</EmailAddress>
<PI_PHON>4018637680</PI_PHON>
<NSF_ID>000471803</NSF_ID>
<StartDate>07/26/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Claire</FirstName>
<LastName>Kenyon-Mathieu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Claire Kenyon-Mathieu</PI_FULL_NAME>
<EmailAddress>claire@cs.brown.edu</EmailAddress>
<PI_PHON>4018632777</PI_PHON>
<NSF_ID>000199337</NSF_ID>
<StartDate>07/26/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brown University</Name>
<CityName>Providence</CityName>
<ZipCode>029129002</ZipCode>
<PhoneNumber>4018632777</PhoneNumber>
<StreetAddress>BOX 1929</StreetAddress>
<StreetAddress2><![CDATA[350 Eddy Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<StateCode>RI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>RI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001785542</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BROWN UNIVERSITY IN PROVIDENCE IN THE STATE OF RHODE ISLAND AND PROVIDENCE PLANTATIONS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001785542</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Brown University]]></Name>
<CityName>Providence</CityName>
<StateCode>RI</StateCode>
<ZipCode>029129002</ZipCode>
<StreetAddress><![CDATA[BOX 1929]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>RI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramElement>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~624988</FUND_OBLG>
<FUND_OBLG>2011~7000</FUND_OBLG>
<FUND_OBLG>2013~5000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="p1">The aim of this research project is to develop algorithms for solving optimization problems on planar graphs.&nbsp; An algorithm is a computational method, and we evaluate algorithms in two ways, <em>correctness</em> and <em>efficiency</em>.&nbsp; We say an algorithm is correct if it gives the correct answer for every legal input.&nbsp; The efficiency of an algorithm is most often measured in terms of <em>time</em>&mdash;how long does the algorithm take to find the answer?&nbsp; It depends on the input; the time required by an algorithm is plotted against the <em>size</em> of the input.&nbsp; The shape of the graph captures the efficiency.&nbsp; If the shape is a straight diagonal line, for example, the algorithm is said to be a <em>linear-time algorithm</em> (<em>y=a x</em>) .&nbsp; This is often the best one can hope for.&nbsp; Sometimes the shape is a parabola&nbsp;(<em>y= a x&sup2;</em>).&nbsp; &nbsp; That kind of algorithm is not as good as a linear-time algorithm but is still very useful.&nbsp; There are other reasonable running times, (e.g.&nbsp;<em>y = ax&sup3;</em>), etc.&nbsp; However, the shape might be an exponential, which is generally not good news since it means that the algorithm is useful only for pretty small inputs.</p> <p class="p2">&nbsp;</p> <p class="p1"><em>Graph</em>&nbsp;means&nbsp;<em>network</em>.&nbsp; A graph has <em>nodes</em>, usually represented in diagrams by dots, and <em>links</em>, usually represented by lines.&nbsp; Nodes and links are also called <em>vertices</em> and <em>edges.</em>&nbsp; Each link connects a pair of nodes, the <em>endpoints</em> of the link.&nbsp; The nodes and links might be labeled with numbers interpreted as costs. An example is the <em>traveling salesman problem (TSP)</em>.&nbsp; A <em>tour</em> of a graph is a route through the graph that visits every node and returns to its starting point.&nbsp; Every time the tour travels through a link, it incurs the cost of that link.&nbsp; The goal of TSP&nbsp;is to find the cheapest tour in any given graph.&nbsp; This optimization problem and many others are believed computationally intractable: there is no algorithm that always finds the best solution within a reasonable amount of time.</p> <p class="p2">&nbsp;</p> <p class="p1">One strategy for coping with such intractability is to aim instead for an algorithm guaranteed to return an approximately best solution, one whose cost is no more than a certain percentage more than the best solution.&nbsp; However, for problems such as the traveling salesman problem, there are limits to this approach as well.</p> <p class="p2">&nbsp;</p> <p class="p1">To finesse these limits, restrict the inputs. &nbsp; A <em>planar</em> graph is one that can be drawn on a piece of paper so that no pair of links cross. Planar graphs, for example, arise in modeling geographic features such as rivers and roads, and in modeling images. &nbsp;Requiring the input graph be planar gives an advantage to an algorithm; for many optimization problems, including TSP, there are faster and more accurate algorithms when the input graph is required to be planar.&nbsp; The goal of this research project: to discover new planarity-exploiting algorithms, thereby broadening the class of problems that can be addressed by efficient algorithms.</p> <p class="p2">&nbsp;</p> <p class="p1">The project has resulted in new efficient algorithms for optimization problems in planar graphs.&nbsp; Some of these problems involve selecting low-cost sets of linksx whose removal breaks the graph into simpler pieces.&nbsp; Such problems sometimes arise in image-processing applications.&nbsp; Some addressed problems:</p> <ul class="ul1"> <li class="li1">Given a graph with some special nodes called <em>terminals</em>, remove a minimum-cost set of links so as to eliminate any way of traveling in the graph from one terminal to another.</li> <li class="li1">Given a grap...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[The aim of this research project is to develop algorithms for solving optimization problems on planar graphs.  An algorithm is a computational method, and we evaluate algorithms in two ways, correctness and efficiency.  We say an algorithm is correct if it gives the correct answer for every legal input.  The efficiency of an algorithm is most often measured in terms of time&mdash;how long does the algorithm take to find the answer?  It depends on the input; the time required by an algorithm is plotted against the size of the input.  The shape of the graph captures the efficiency.  If the shape is a straight diagonal line, for example, the algorithm is said to be a linear-time algorithm (y=a x) .  This is often the best one can hope for.  Sometimes the shape is a parabola (y= a x&sup2;).    That kind of algorithm is not as good as a linear-time algorithm but is still very useful.  There are other reasonable running times, (e.g. y = ax&sup3;), etc.  However, the shape might be an exponential, which is generally not good news since it means that the algorithm is useful only for pretty small inputs.   Graph means network.  A graph has nodes, usually represented in diagrams by dots, and links, usually represented by lines.  Nodes and links are also called vertices and edges.  Each link connects a pair of nodes, the endpoints of the link.  The nodes and links might be labeled with numbers interpreted as costs. An example is the traveling salesman problem (TSP).  A tour of a graph is a route through the graph that visits every node and returns to its starting point.  Every time the tour travels through a link, it incurs the cost of that link.  The goal of TSP is to find the cheapest tour in any given graph.  This optimization problem and many others are believed computationally intractable: there is no algorithm that always finds the best solution within a reasonable amount of time.   One strategy for coping with such intractability is to aim instead for an algorithm guaranteed to return an approximately best solution, one whose cost is no more than a certain percentage more than the best solution.  However, for problems such as the traveling salesman problem, there are limits to this approach as well.   To finesse these limits, restrict the inputs.   A planar graph is one that can be drawn on a piece of paper so that no pair of links cross. Planar graphs, for example, arise in modeling geographic features such as rivers and roads, and in modeling images.  Requiring the input graph be planar gives an advantage to an algorithm; for many optimization problems, including TSP, there are faster and more accurate algorithms when the input graph is required to be planar.  The goal of this research project: to discover new planarity-exploiting algorithms, thereby broadening the class of problems that can be addressed by efficient algorithms.   The project has resulted in new efficient algorithms for optimization problems in planar graphs.  Some of these problems involve selecting low-cost sets of linksx whose removal breaks the graph into simpler pieces.  Such problems sometimes arise in image-processing applications.  Some addressed problems:  Given a graph with some special nodes called terminals, remove a minimum-cost set of links so as to eliminate any way of traveling in the graph from one terminal to another. Given a graph with some source terminals and some sink terminals, remove a minimum-cost set of links so as to eliminate any way of traveling from a source to a sink. Remove a minimum-cost set of links so that the resulting graph can be divided into two parts of roughly equal size such that there is no way of traveling from one part to another. Given a graph with some links designated attractive and some designated repulsive, find a minimum-cost set of links whose removal results in a graph consisting of clusters such that every attractive linkÆs endpoints are in the same cluster, and every repulsive linkÆs endpoints are in differe...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
