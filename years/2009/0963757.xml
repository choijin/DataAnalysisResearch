<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Combining Speculation with Continuous Validation for Software Developers</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>750000.00</AwardTotalIntnAmount>
<AwardAmount>766000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Unprecedented computational power is available from multi-core processors and cloud computing.  To date, this power has been used primarily to make programs run faster.  However, in many cases the bottleneck to solving users' problems is in the challenge of creating the software, not in the time to run it.  This project will apply computational power to the real bottleneck, providing developers with new types of feedback.  As a key broader impact, the research will enable developers to create software more quickly, more cheaply, and with higher quality.&lt;br/&gt;&lt;br/&gt;The key technical idea is to inform developers, in advance, of the consequences of their likely actions.  The development environment speculates about developer actions, evaluates the effect of each action (on compilation, tests, version control conflicts, etc.), and unobtrusively makes this information available to the developer.  By knowing which choices are good and which are bad, developers can avoid bad choices that cost time or reduce quality.  The project's intellectual merits include algorithms to quickly create and evaluate many possible developer actions, UI design for developer awareness, and evaluation of how increased awareness of contingent information, about possible actions, affects developers.  This also leads toward an answer to the question: If developers had infinite processing power, what fundamental software engineering research problems would remain?</AbstractNarration>
<MinAmdLetterDate>09/09/2010</MinAmdLetterDate>
<MaxAmdLetterDate>03/29/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0963757</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Notkin</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David S Notkin</PI_FULL_NAME>
<EmailAddress>notkin@cs.washington.edu</EmailAddress>
<PI_PHON>2066853798</PI_PHON>
<NSF_ID>000187575</NSF_ID>
<StartDate>09/09/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Ernst</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael D Ernst</PI_FULL_NAME>
<EmailAddress>mernst@cs.washington.edu</EmailAddress>
<PI_PHON>2062210965</PI_PHON>
<NSF_ID>000310100</NSF_ID>
<StartDate>09/09/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington]]></Name>
<CityName>Seattle</CityName>
<StateCode>WA</StateCode>
<ZipCode>981950001</ZipCode>
<StreetAddress><![CDATA[4333 Brooklyn Ave NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~750000</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Suppose you are building a treehouse. &nbsp;It is helpful to get quick feedback about what you are doing well and poorly. &nbsp;That enables you to have more confidence in your work, to avoid repeating mistakes, and to avoid redoing work. &nbsp;For example, if you construct one wall poorly, you would prefer to learn about that right away so that you can avoid making the same mistake on the other walls. &nbsp;Even more importantly, if you construct the floor poorly, you want to learn about that before you have built the walls, lest you have to tear down and rebuild not just the floor but also the walls.</p> <p>The same facts apply to writing software programs. &nbsp;A software developer prefers to receive rapid feedback about mistakes. &nbsp;The longer the feedback is delayed, the harder it is to go back and make corrections, the more times the mistake might be repeated, and the more work is built upon a faulty foundation.</p> <p>Quick feedback is a well-known principle of user interface design, and many IDEs (integrated development environments, the tools that software developers use while programming) provide continuous feedback about certain aspects of the development process. &nbsp;However, this feedback tends to be relatively shallow. &nbsp;Our goal is to provide deeper and more rapid feedback to developers than has been previously possible.</p> <p>The general approach is to guess what the developer might do next, and then inform the developer about the consequences of that guess before the developer actually makes the change. &nbsp;Thus, the developer knows the consequences of an action, before actually performing the action. &nbsp;This can help the developer to make better choices and to avoid rework.</p> <p>We have implemented and evaluated this idea in multiple contexts. &nbsp;One example is editing source code within an IDE. &nbsp;We extended Eclipse's "Quick Fix" mechanism so that, in addition to suggesting multiple quick fixes, it also indicates the consequences of those fixes, such as how many compilation errors they introduce or eliminate. &nbsp;Another example is merging work performed by different developers. &nbsp;Our system proactively informs the developers whether their work independent interferes with one another, so that the developers can take appropriate action. &nbsp;This is better than waiting a long time to learn of the conflict. &nbsp;In the course of this &nbsp;work, we built infrastructure that turned out to be useful in helping developers better understand the history of a software project -- the different changes made over time.</p> <p>The intellectual merits of this project include a new approach to providing feedback more quickly to developers, new implementation strategies that enable it, and evaluation of how software developers react to the information. &nbsp;These ideas can be applied more broadly, to other aspects of software development and other activities, such as text editing.</p> <p>The immediate impact of our project is to improve software development. &nbsp;Developers who use our tools can spend less time and money, and will be less frustrated. &nbsp;In particular, they avoid the twin traps of ignorance (not remembering to check the effects of their actions) and distraction (continually interrupting themselves to check the effects of their actions). &nbsp;The broader impacts touch on all of society that uses software -- that is, on all of society! &nbsp;Users can spend less on software and suffer fewer crashes, unavailability, data loss, and error; they can do their jobs more effectively and use scarce time and money more productively. &nbsp;In addition, we have trained numerous undergraduate and graduate students and published technical papers.</p><br> <p>            Last Modified: 09/01/2015<br>      Modified by: Michael&nbsp;D&nbsp;Ernst</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Suppose you are building a treehouse.  It is helpful to get quick feedback about what you are doing well and poorly.  That enables you to have more confidence in your work, to avoid repeating mistakes, and to avoid redoing work.  For example, if you construct one wall poorly, you would prefer to learn about that right away so that you can avoid making the same mistake on the other walls.  Even more importantly, if you construct the floor poorly, you want to learn about that before you have built the walls, lest you have to tear down and rebuild not just the floor but also the walls.  The same facts apply to writing software programs.  A software developer prefers to receive rapid feedback about mistakes.  The longer the feedback is delayed, the harder it is to go back and make corrections, the more times the mistake might be repeated, and the more work is built upon a faulty foundation.  Quick feedback is a well-known principle of user interface design, and many IDEs (integrated development environments, the tools that software developers use while programming) provide continuous feedback about certain aspects of the development process.  However, this feedback tends to be relatively shallow.  Our goal is to provide deeper and more rapid feedback to developers than has been previously possible.  The general approach is to guess what the developer might do next, and then inform the developer about the consequences of that guess before the developer actually makes the change.  Thus, the developer knows the consequences of an action, before actually performing the action.  This can help the developer to make better choices and to avoid rework.  We have implemented and evaluated this idea in multiple contexts.  One example is editing source code within an IDE.  We extended Eclipse's "Quick Fix" mechanism so that, in addition to suggesting multiple quick fixes, it also indicates the consequences of those fixes, such as how many compilation errors they introduce or eliminate.  Another example is merging work performed by different developers.  Our system proactively informs the developers whether their work independent interferes with one another, so that the developers can take appropriate action.  This is better than waiting a long time to learn of the conflict.  In the course of this  work, we built infrastructure that turned out to be useful in helping developers better understand the history of a software project -- the different changes made over time.  The intellectual merits of this project include a new approach to providing feedback more quickly to developers, new implementation strategies that enable it, and evaluation of how software developers react to the information.  These ideas can be applied more broadly, to other aspects of software development and other activities, such as text editing.  The immediate impact of our project is to improve software development.  Developers who use our tools can spend less time and money, and will be less frustrated.  In particular, they avoid the twin traps of ignorance (not remembering to check the effects of their actions) and distraction (continually interrupting themselves to check the effects of their actions).  The broader impacts touch on all of society that uses software -- that is, on all of society!  Users can spend less on software and suffer fewer crashes, unavailability, data loss, and error; they can do their jobs more effectively and use scarce time and money more productively.  In addition, we have trained numerous undergraduate and graduate students and published technical papers.       Last Modified: 09/01/2015       Submitted by: Michael D Ernst]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
