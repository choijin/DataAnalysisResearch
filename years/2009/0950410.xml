<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Describing the Operating System for Accurate User-mode Simulation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>216000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Krishna Kant</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This is an EAGER project that addresses a highly exploratory investigation into key elements needed to specify the characteristics of an operating system (OS) in a way that  permits an architectural model to be created that interacts fully with a suite of simulation tools.&lt;br/&gt;&lt;br/&gt;The suite of tools, CoGenT (CoGeneration of Tools), include specification languages to allow researchers to express novel instruction sets and micro-architectures and the infrastructure for automatic generation of corresponding functional and timing co-simulators, compilers, linkers, loaders, debuggers, assemblers, disassemblers, and a fully integrated instrumentation facility to enable meaningful experimentation within this new design space. CoGenT?s ability to automatically generate a functional simulator from a specification, and other related elements, will be released this year.&lt;br/&gt;&lt;br/&gt;This EAGER addresses the problem that, in simulating complex architectures, it is important to be able to specify OS support, not just as a set of external calls, but as a specific model that integrates with the rest of the architecture. Current architectures rely on the services and policies of the operating system, and the operating system itself needs to evolve with the radical shifts in architecture and applications that are anticipated in the next decade.&lt;br/&gt;&lt;br/&gt;With this project, this team develops an approach that enables simultaneous research into novel hardware and software paradigms, with great flexibility, and without the heretofore prohibitive cost of manually building a complete hardware and software simulation infrastructure with a tailored OS implementation. Traditional system simulation approaches either ignored OS impact on performance or resorted to costly and inflexible full system simulation where an actual OS implementation is executed directly. The former provides unrealistic results, and the latter does not admit the kind of exploration needed for transformative paradigm shifts.&lt;br/&gt;&lt;br/&gt;The goal of this project is to extend the relatively recent approach of functional and timing co-simulation for hardware architectures into "pseudo-full system simulation", where the OS becomes a first-class element in the simulation modeling and instrumentation framework. Simulating an OS model derived from a specification will also enable sensitivity and significance analyses, often neglected in current simulation-based research even though they are essential to understanding the real impact of new approaches.</AbstractNarration>
<MinAmdLetterDate>09/21/2009</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0950410</AwardID>
<Investigator>
<FirstName>Charles</FirstName>
<LastName>Weems</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Charles C Weems</PI_FULL_NAME>
<EmailAddress>weems@cs.umass.edu</EmailAddress>
<PI_PHON>4135453163</PI_PHON>
<NSF_ID>000434762</NSF_ID>
<StartDate>09/21/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>J. Eliot</FirstName>
<LastName>Moss</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>J. Eliot B Moss</PI_FULL_NAME>
<EmailAddress>moss@cs.umass.edu</EmailAddress>
<PI_PHON>4135454206</PI_PHON>
<NSF_ID>000261930</NSF_ID>
<StartDate>09/21/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Massachusetts Amherst</Name>
<CityName>Hadley</CityName>
<ZipCode>010359450</ZipCode>
<PhoneNumber>4135450698</PhoneNumber>
<StreetAddress>Research Administration Building</StreetAddress>
<StreetAddress2><![CDATA[100 Venture Way, Suite 201]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>153926712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MASSACHUSETTS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Massachusetts Amherst]]></Name>
<CityName>Hadley</CityName>
<StateCode>MA</StateCode>
<ZipCode>010359450</ZipCode>
<StreetAddress><![CDATA[Research Administration Building]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~200000</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>As computer systems evolve and increase in complexity, understanding how their perfomance varies becomes both more complex and more important. Small differences in behavior can cascade into significant variations in performance. One aspect of system behavior that has not been studied in a modern context is the interaction between the operating system and internal state that a computer maintains for enhanced performance. For example, the computer keeps recently accessed data in a faster memory called a cache, and the behavior of decision points in program code is recorded to enable prediction of future decisions so instructions can be fetched from memory before they are needed, etc. Most of this stored information is meant to accelerate user programs, but when a program calls upon the services of the operating system, some of the information is inadvertently displaced. As a result, when the operating system returns control to the user program, it slows down for a subsequent period until the information is restored. The goal of our research was to characterize the cost of this side effect.</p> <p>We began with the expectation that the internal perfomance analysis hardware (performance counters) provided by microprocessors would enable us to gather this information. But after months of trying to access them in different ways, we found that the access process itself disturbed the measurements so much that they were meaningless, and there was no way to work around the effect. We thus turned to using a software simulation of a microprocessor called MARSSx86.</p> <p>MARSSx86 simulates the Intel instruction set, and the internal state for a particular AMD processor. Its timing has been verified against real hardware to within a few percent. At first we found initial results that seemed reasonable, but further experiments showed inexplicable behavior. The ensuing year and a half was spent working with the MARSSx86 developers to fix numerous bugs and problems in the simulator that they were unaware of, that were causing it to produce inconsistent results. We developed a suite of tests that enabled us to both isolate the problems and to validate our own results once the simulator had been fixed.&nbsp;</p> <p>We modified MARSSx86 to save the internal state before each system call. We could then compare that state with the state after the call, and restore the original state to compare actual performance with performance for no distubance. We analyzed a set of benchmark applications to identify the most frequently used system calls, and then measured their impact both in isolation and in the context of applications. We also tested multiple versions of operating systems.&nbsp;</p> <p>Our analysis found that the primary instruction cache could suffer up to a 38% performance penalty due to disruption, and a portion of the branch prediction unit could suffer up to 32%. On average, both of these units showed an 8% variation in performance from being disturbed. Other units were impacted less. Switching from the Ubuntu Linux version 9 operating system to version 12, we found average variations on the order of 25% across all state, and as much as a 500% difference in the branch predictor state.</p> <p>We have shown that operating system calls have a significant effect on the internal state of user code in a processor. While the average impact is modest, it cannot be neglected because these variations are actually comparable to perfomance improvements that are often cited in computer systems research. Thus, it is possible that some of those reports are biased by this underyling variation.&nbsp;</p> <p>Intellectual Merit: We are the first to develop a thorough analysis of the performance side effects of operating system calls because of disruption of internal processor state. Doing so was far more challenging than we anticipated, which may be why it has not been done before. We show that...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ As computer systems evolve and increase in complexity, understanding how their perfomance varies becomes both more complex and more important. Small differences in behavior can cascade into significant variations in performance. One aspect of system behavior that has not been studied in a modern context is the interaction between the operating system and internal state that a computer maintains for enhanced performance. For example, the computer keeps recently accessed data in a faster memory called a cache, and the behavior of decision points in program code is recorded to enable prediction of future decisions so instructions can be fetched from memory before they are needed, etc. Most of this stored information is meant to accelerate user programs, but when a program calls upon the services of the operating system, some of the information is inadvertently displaced. As a result, when the operating system returns control to the user program, it slows down for a subsequent period until the information is restored. The goal of our research was to characterize the cost of this side effect.  We began with the expectation that the internal perfomance analysis hardware (performance counters) provided by microprocessors would enable us to gather this information. But after months of trying to access them in different ways, we found that the access process itself disturbed the measurements so much that they were meaningless, and there was no way to work around the effect. We thus turned to using a software simulation of a microprocessor called MARSSx86.  MARSSx86 simulates the Intel instruction set, and the internal state for a particular AMD processor. Its timing has been verified against real hardware to within a few percent. At first we found initial results that seemed reasonable, but further experiments showed inexplicable behavior. The ensuing year and a half was spent working with the MARSSx86 developers to fix numerous bugs and problems in the simulator that they were unaware of, that were causing it to produce inconsistent results. We developed a suite of tests that enabled us to both isolate the problems and to validate our own results once the simulator had been fixed.   We modified MARSSx86 to save the internal state before each system call. We could then compare that state with the state after the call, and restore the original state to compare actual performance with performance for no distubance. We analyzed a set of benchmark applications to identify the most frequently used system calls, and then measured their impact both in isolation and in the context of applications. We also tested multiple versions of operating systems.   Our analysis found that the primary instruction cache could suffer up to a 38% performance penalty due to disruption, and a portion of the branch prediction unit could suffer up to 32%. On average, both of these units showed an 8% variation in performance from being disturbed. Other units were impacted less. Switching from the Ubuntu Linux version 9 operating system to version 12, we found average variations on the order of 25% across all state, and as much as a 500% difference in the branch predictor state.  We have shown that operating system calls have a significant effect on the internal state of user code in a processor. While the average impact is modest, it cannot be neglected because these variations are actually comparable to perfomance improvements that are often cited in computer systems research. Thus, it is possible that some of those reports are biased by this underyling variation.   Intellectual Merit: We are the first to develop a thorough analysis of the performance side effects of operating system calls because of disruption of internal processor state. Doing so was far more challenging than we anticipated, which may be why it has not been done before. We show that the effect is significant, and that it varies greatly with the operating system. We also found that the effect w...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
