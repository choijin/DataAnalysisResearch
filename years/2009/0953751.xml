<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Towards Identifying and Eliminating Exploitable Software Bugs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2010</AwardEffectiveDate>
<AwardExpirationDate>02/29/2016</AwardExpirationDate>
<AwardTotalIntnAmount>521494.00</AwardTotalIntnAmount>
<AwardAmount>579659</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Attackers only need to find a single exploitable bug in order to&lt;br/&gt;install malware, bots, and viruses on a vulnerable user's computer.&lt;br/&gt;Unfortunately, bugs are plentiful.  For example, the Ubuntu Linux&lt;br/&gt;distribution bug management database currently lists over 58,000 open&lt;br/&gt;bugs.  Thus, the question is not whether an attacker can find a bug,&lt;br/&gt;but which bugs an attacker can exploit.&lt;br/&gt;&lt;br/&gt;This research investigates novel techniques, approaches, and&lt;br/&gt;algorithms for finding exploitable bugs.  The ability to deterimine&lt;br/&gt;whether a bug is exploitable or not will allow developers to&lt;br/&gt;prioritize bug reports so that the most security-critical bugs are&lt;br/&gt;fixed first.  The techniques investigated will also help developers&lt;br/&gt;distribute patches safely.</AbstractNarration>
<MinAmdLetterDate>02/17/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/29/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0953751</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Brumley</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David Brumley</PI_FULL_NAME>
<EmailAddress>dbrumley@cmu.edu</EmailAddress>
<PI_PHON>4122683851</PI_PHON>
<NSF_ID>000528461</NSF_ID>
<StartDate>02/17/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramElement>
<Code>N178</Code>
<Text/>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7556</Code>
<Text>CONFERENCE AND WORKSHOPS</Text>
</ProgramReference>
<ProgramReference>
<Code>8237</Code>
<Text>CISE Interagency Agreements</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~97249</FUND_OBLG>
<FUND_OBLG>2011~116653</FUND_OBLG>
<FUND_OBLG>2012~104175</FUND_OBLG>
<FUND_OBLG>2013~107822</FUND_OBLG>
<FUND_OBLG>2014~153760</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The funded research resulted in several advances for performing security analysis on common off-the-shelf software a user may get from a manufacturer like Microsoft or Apple. &nbsp;At a high level, we developed new ways to find bugs and security vulnerabilities in such applications, as well as general research for how suchvulnerabilities may be fixed.</p> <p>In particular, this research proposed three tasks. &nbsp;The first task was to automatically find and prioritize bugs based upon their exploitability. &nbsp;We developed techniques for automatic exploit generation, which finds bugs and proves they are exploitable in binary code. &nbsp;</p> <p><br />The second task was safe patch distribution and application. &nbsp;We developed techniques that would automatically identify where patchesshould be applied, but did not create full patches. As part of this research, we discovered that creating full patches often required human specification and insight, such as deciding whether to return anerror message or not. &nbsp;We found no acceptable algorithm for a computer to make such a judgement call, and leave it as future work. Our main advance was to identify the set of hard problems remaining.</p> <p>The third task was to develop binary analysis techniques. &nbsp;One material manifistation of this research is an open source toolcalled BAP for performing analysis. BAP is extensible, plugins into existing frameworks used by professionals, and is free to the public.</p> <p><br />As a broader impact, we know of several teams (at least two that we know of) in the cyber grand challenge which use techniques developed as partof this research. &nbsp;A spinoff named ForAllSecure was created as a consequence of this research, and this spinoff currently leads the Cyber Grand Challenge contest in fully autonomous vulnerability discovery and repair. &nbsp;<br /><br />On the educational impact side, one significant outcome was the development of the CMU undergraduate security research team,which since 2009 has been the #1 US team in computer security competitions, and 3 times world champions. The undergraduate team also pioneered high school hacking contests, and this work led to the inception of picoctf, the largest hacking contest in the world by number of participants.</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/29/2016<br>      Modified by: David&nbsp;Brumley</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The funded research resulted in several advances for performing security analysis on common off-the-shelf software a user may get from a manufacturer like Microsoft or Apple.  At a high level, we developed new ways to find bugs and security vulnerabilities in such applications, as well as general research for how suchvulnerabilities may be fixed.  In particular, this research proposed three tasks.  The first task was to automatically find and prioritize bugs based upon their exploitability.  We developed techniques for automatic exploit generation, which finds bugs and proves they are exploitable in binary code.     The second task was safe patch distribution and application.  We developed techniques that would automatically identify where patchesshould be applied, but did not create full patches. As part of this research, we discovered that creating full patches often required human specification and insight, such as deciding whether to return anerror message or not.  We found no acceptable algorithm for a computer to make such a judgement call, and leave it as future work. Our main advance was to identify the set of hard problems remaining.  The third task was to develop binary analysis techniques.  One material manifistation of this research is an open source toolcalled BAP for performing analysis. BAP is extensible, plugins into existing frameworks used by professionals, and is free to the public.   As a broader impact, we know of several teams (at least two that we know of) in the cyber grand challenge which use techniques developed as partof this research.  A spinoff named ForAllSecure was created as a consequence of this research, and this spinoff currently leads the Cyber Grand Challenge contest in fully autonomous vulnerability discovery and repair.    On the educational impact side, one significant outcome was the development of the CMU undergraduate security research team,which since 2009 has been the #1 US team in computer security competitions, and 3 times world champions. The undergraduate team also pioneered high school hacking contests, and this work led to the inception of picoctf, the largest hacking contest in the world by number of participants.          Last Modified: 05/29/2016       Submitted by: David Brumley]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
