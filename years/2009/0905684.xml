<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Medium:  Collaborative Research:Next-Generation Infrastructure for Trustworthy Web Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>324000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
<PO_EMAI>jepstein@nsf.gov</PO_EMAI>
<PO_PHON>7032928338</PO_PHON>
</ProgramOfficer>
<AbstractNarration>&lt;br/&gt;Collaborative Proposal 0905684 (UCI ? Franz) / 0905650 (UCSC ? Flanagan)&lt;br/&gt;&lt;br/&gt;Next-Generation Infrastructure for Trustworthy Web Applications&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Abstract&lt;br/&gt;&lt;br/&gt;Many services traditionally performed by stand-alone programs running on desktop computers are being migrated to ?Web 2.0? applications, remote services that reside ?in the cloud? and are that accessed through a browser.  This migration process offers a unique opportunity to re-engineer the way that software is constructed, adding some extra capabilities that reduce the vulnerability of the global information infrastructure to problems such as viruses, cyber-attacks, loss of privacy, and integrity violations. &lt;br/&gt;&lt;br/&gt;With this goal in mind, this project designs and implements a next-generation infrastructure for trustworthy web applications.  It evolves the existing Web 2.0 technologies into a more trustworthy ?Web 2.Sec? version by introducing information-labeling and strong information-flow controls pervasively at the service provider, at the user?s end, and on all paths in between.&lt;br/&gt;&lt;br/&gt;A key feature of the new Web 2.Sec architecture is that all application programs are executed on top of a virtual machine (VM) rather than directly on physical hardware.  Hence the VM retains full control over the data at all times, allowing it to enforce information-&amp;#64258;ow policies that guarantee con&amp;#64257;dentiality and integrity.  Even a malicious or faulty program running on top of the Web 2.Sec VM cannot cause any action that would violate these policies.&lt;br/&gt;&lt;br/&gt;A strong educational component involving both graduate and undergraduate students rounds off the project.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/11/2009</MinAmdLetterDate>
<MaxAmdLetterDate>05/16/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0905684</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Franz</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael Franz</PI_FULL_NAME>
<EmailAddress>franz@uci.edu</EmailAddress>
<PI_PHON>9498386816</PI_PHON>
<NSF_ID>000162759</NSF_ID>
<StartDate>09/11/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926977600</ZipCode>
<StreetAddress><![CDATA[160 Aldrich Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~300000</FUND_OBLG>
<FUND_OBLG>2010~8000</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>There are few remaining differences between between traditional application programs that need to be installed on a computer's hard drive before they can be used, and "Web Applications" that are accessed inside of a browser window and work across the Internet. For example, the capabilities of web-based email programs such as Gmail are now practically on par with those of off-line email programs such as Outlook. The key to the expanded functionality inside of web browsers that enables them to emulate the functionality of traditional programs is a programming language called JavaScript. Behind every Web Application such as Gmail is a JavaScript program that is sent from the server to the browser and then executed inside of the browser, giving the browser the desired functionality.</p> <p><br />Unfortunately, with added functionality also come new ways of causing malice, and it hasn't taken long until cyber criminals have found ways of misusing JavaScript for their own purposes. For example, they have figured out how to "inject" their own JavaScript into legitimate Web Applications, changing the behavior of those Web Applications - in the worst case disclosing secrets such as Social Security Numbers, or performing undesired actions such as unauthorized electronic banking transactions.</p> <p><br />We have been researching techniques that stop some of these attacks altogether, and make others more difficult. Our approach is based on tracking where each piece of JavaScript comes from, and making sure that the JavaScript from one origin doesn't unduly influence the JavaScript from another origin. Unfortunately, this is not as simple as it sounds at first, because on one hand, some of these interactions are desired and perfectly legal, and on the other hand tracking can result in unacceptable slowdowns.</p> <p><br />Our research has resulted in new scientific insights on the topic of tracking the flow of information in JavaScript programs, and it has also resulted in a practical technique that has been transitioned into widespread practice. As a result of our collaborative research with Mozilla, the Firefox browser now keeps track of the web-site-origin of each JavaScript object, keeps objects from different origins separate from each other, and explicitly manages references between JavaScript objects that have different origins. Remarkably, we were able to institute this change without any slowdown at all.&nbsp;</p><br> <p>            Last Modified: 11/30/2012<br>      Modified by: Michael&nbsp;Franz</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ There are few remaining differences between between traditional application programs that need to be installed on a computer's hard drive before they can be used, and "Web Applications" that are accessed inside of a browser window and work across the Internet. For example, the capabilities of web-based email programs such as Gmail are now practically on par with those of off-line email programs such as Outlook. The key to the expanded functionality inside of web browsers that enables them to emulate the functionality of traditional programs is a programming language called JavaScript. Behind every Web Application such as Gmail is a JavaScript program that is sent from the server to the browser and then executed inside of the browser, giving the browser the desired functionality.   Unfortunately, with added functionality also come new ways of causing malice, and it hasn't taken long until cyber criminals have found ways of misusing JavaScript for their own purposes. For example, they have figured out how to "inject" their own JavaScript into legitimate Web Applications, changing the behavior of those Web Applications - in the worst case disclosing secrets such as Social Security Numbers, or performing undesired actions such as unauthorized electronic banking transactions.   We have been researching techniques that stop some of these attacks altogether, and make others more difficult. Our approach is based on tracking where each piece of JavaScript comes from, and making sure that the JavaScript from one origin doesn't unduly influence the JavaScript from another origin. Unfortunately, this is not as simple as it sounds at first, because on one hand, some of these interactions are desired and perfectly legal, and on the other hand tracking can result in unacceptable slowdowns.   Our research has resulted in new scientific insights on the topic of tracking the flow of information in JavaScript programs, and it has also resulted in a practical technique that has been transitioned into widespread practice. As a result of our collaborative research with Mozilla, the Firefox browser now keeps track of the web-site-origin of each JavaScript object, keeps objects from different origins separate from each other, and explicitly manages references between JavaScript objects that have different origins. Remarkably, we were able to institute this change without any slowdown at all.        Last Modified: 11/30/2012       Submitted by: Michael Franz]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
