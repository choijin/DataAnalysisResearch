<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III:Small:Integrated Problem Diagnosis and Repair in Databases and Storage Area Networks</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>407865.00</AwardTotalIntnAmount>
<AwardAmount>423865</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Frank Olken</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>&lt;br/&gt;Databases are typically used as a subsystem in a larger system that&lt;br/&gt;contains Web servers, application servers, and network-attached&lt;br/&gt;storage servers. Such complex systems experience some form of change&lt;br/&gt;all the time, e.g., an update to a Java module in the application&lt;br/&gt;server, a statistics update in the database, or a RAID rebuild in a&lt;br/&gt;storage volume. Such changes in different subsystems can cause an&lt;br/&gt;overall performance degradation whose cause is hard to diagnose. The&lt;br/&gt;diagnosis task is all the more daunting because enterprise&lt;br/&gt;environments have isolated administration teams and tools for each&lt;br/&gt;subsystem.&lt;br/&gt;&lt;br/&gt;This project is developing an integrated tool called DIADS that&lt;br/&gt;automates complex administrative tasks like problem diagnosis, what-if&lt;br/&gt;analysis, orchestrating disaster recovery, and online tuning when a&lt;br/&gt;database is used as a subsystem in a larger system. DIADS contains two&lt;br/&gt;technical innovations. Problem diagnosis involves reconstructing&lt;br/&gt;system behavior at various points of time using historic and current&lt;br/&gt;monitoring data collected from the system. However, the amount and&lt;br/&gt;quality of monitoring data available from production systems is&lt;br/&gt;constrained by the need to keep monitoring overhead low. DIADS uses an&lt;br/&gt;abstraction called Annotated Plan Graph to represent and reason about&lt;br/&gt;database behavior in the context of a larger system. Annotated Plan&lt;br/&gt;Graphs are generated from light-weight monitoring data.&lt;br/&gt;&lt;br/&gt;The other innovation in DIADS is a suite of workflows for&lt;br/&gt;administrative tasks that combine machine-learning techniques with&lt;br/&gt;domain knowledge from system experts. For example, for problem&lt;br/&gt;diagnosis, the machine-learning part of the workflow provides core&lt;br/&gt;techniques to handle large and noisy streams of monitoring data, while&lt;br/&gt;the domain-knowledge part acts as checks-and-balances to guide the&lt;br/&gt;diagnosis in the right direction. This unique design enables DIADS to&lt;br/&gt;function effectively even in the presence of multiple concurrent&lt;br/&gt;problems as well as noisy monitoring data prevalent in production&lt;br/&gt;environments. DIADS is being prototyped for research and educational&lt;br/&gt;purposes in a datacenter setting with PostgreSQL databases and an&lt;br/&gt;enterprise-level storage area network. &lt;br/&gt;&lt;br/&gt;For further information see the project web page at &lt;br/&gt;http://www.cs.duke.edu/~shivnath/diads.html&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/28/2009</MinAmdLetterDate>
<MaxAmdLetterDate>08/05/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0917062</AwardID>
<Investigator>
<FirstName>Shivnath</FirstName>
<LastName>Babu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Shivnath Babu</PI_FULL_NAME>
<EmailAddress>shivnath@cs.duke.edu</EmailAddress>
<PI_PHON>9196606579</PI_PHON>
<NSF_ID>000488390</NSF_ID>
<StartDate>08/28/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Duke University</Name>
<CityName>Durham</CityName>
<ZipCode>277054010</ZipCode>
<PhoneNumber>9196843030</PhoneNumber>
<StreetAddress>2200 W. Main St, Suite 710</StreetAddress>
<StreetAddress2><![CDATA[Erwin Square]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>044387793</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DUKE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>044387793</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Duke University]]></Name>
<CityName>Durham</CityName>
<StateCode>NC</StateCode>
<ZipCode>277054010</ZipCode>
<StreetAddress><![CDATA[2200 W. Main St, Suite 710]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~117697</FUND_OBLG>
<FUND_OBLG>2010~306168</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><br />A large number of database systems no longer run on storage that is&nbsp;tightly controlled by the database system. Examples of such systems&nbsp;include: (a) databases running on storage area networks (SANs), (b) databases&nbsp;running on cloud storage such as Amazon Elastic Block Storage (EBS), and&nbsp;(c) databases running on distributed file systems such as the Hadoop distributed file-system (HDFS). A number of database manageability&nbsp;problems---broadly falling into the space&nbsp;of testing and tuning database systems---become very hard to&nbsp;address in this context. The reason is that it becomes nontrivial to pinpoint whether the cause of the problem is in the database system, the storage system, or in some interactions happening between the database and storage systems.&nbsp;</p> <p>This project aimed to help users and administrators&nbsp;deal with problems like these easily. The problems addressed by&nbsp;the project include: (i) diagnosing the cause of a database query running much slower than desired, (ii) diagnosing the&nbsp;cause of slowdown of a repeatedly-run query that used to run&nbsp;fast at some point of time, (iii) what causes a database system to&nbsp;produce incorrect query results and how to avoid such incorrect results, and&nbsp;(iv) predicting the performance impact of an upgrade to the database or the storage system. A prototype system, called DIADS, was designed&nbsp;where such problems and their possible solutions can be studied and&nbsp;evaluated.&nbsp;</p> <p><br />DIADS can diagnose the cause of query slowdowns in databases storing persistent data on a storage area network (SAN). Diagnosing performance slowdowns involves reconstructing system behavior at various points of time using historic and current monitoring data collected from the system.The other contribution of DIADS is a diagnosis workflow that can drill-down progressively from the level of the query to&nbsp;execution plans and to operators in the plan; and further to the level of&nbsp;performance metrics in the underlying database and SAN components. Finally,&nbsp;a roll-up step ties potential root causes back to their impact on the&nbsp;performance slowdown.</p> <p>Apart from performance diagnosis, DIADS also addresses the problem&nbsp;of verifying the correctness of stored data proactively and continuously. Occasional corruption of stored data is an unfortunate byproduct of the complexity of modern database systems. Hardware errors, software bugs, and mistakes by human administrators can corrupt important sources of data. &nbsp;DIADS is the first system that: (i) gives database administrators a declarative language to specify their objectives regarding the detection and repair of data corruption; (ii) contains optimization and execution algorithms to ensure that the administrator's objectives are met robustly and with least cost, e.g., using pay-as-you cloud resources; and (iii) provides timely notification when corruption is detected, allowing proactive repair of corruption before it impacts users and applications.</p><br> <p>            Last Modified: 02/03/2014<br>      Modified by: Shivnath&nbsp;Babu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  A large number of database systems no longer run on storage that is tightly controlled by the database system. Examples of such systems include: (a) databases running on storage area networks (SANs), (b) databases running on cloud storage such as Amazon Elastic Block Storage (EBS), and (c) databases running on distributed file systems such as the Hadoop distributed file-system (HDFS). A number of database manageability problems---broadly falling into the space of testing and tuning database systems---become very hard to address in this context. The reason is that it becomes nontrivial to pinpoint whether the cause of the problem is in the database system, the storage system, or in some interactions happening between the database and storage systems.   This project aimed to help users and administrators deal with problems like these easily. The problems addressed by the project include: (i) diagnosing the cause of a database query running much slower than desired, (ii) diagnosing the cause of slowdown of a repeatedly-run query that used to run fast at some point of time, (iii) what causes a database system to produce incorrect query results and how to avoid such incorrect results, and (iv) predicting the performance impact of an upgrade to the database or the storage system. A prototype system, called DIADS, was designed where such problems and their possible solutions can be studied and evaluated.    DIADS can diagnose the cause of query slowdowns in databases storing persistent data on a storage area network (SAN). Diagnosing performance slowdowns involves reconstructing system behavior at various points of time using historic and current monitoring data collected from the system.The other contribution of DIADS is a diagnosis workflow that can drill-down progressively from the level of the query to execution plans and to operators in the plan; and further to the level of performance metrics in the underlying database and SAN components. Finally, a roll-up step ties potential root causes back to their impact on the performance slowdown.  Apart from performance diagnosis, DIADS also addresses the problem of verifying the correctness of stored data proactively and continuously. Occasional corruption of stored data is an unfortunate byproduct of the complexity of modern database systems. Hardware errors, software bugs, and mistakes by human administrators can corrupt important sources of data.  DIADS is the first system that: (i) gives database administrators a declarative language to specify their objectives regarding the detection and repair of data corruption; (ii) contains optimization and execution algorithms to ensure that the administrator's objectives are met robustly and with least cost, e.g., using pay-as-you cloud resources; and (iii) provides timely notification when corruption is detected, allowing proactive repair of corruption before it impacts users and applications.       Last Modified: 02/03/2014       Submitted by: Shivnath Babu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
