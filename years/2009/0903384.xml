<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: Energy-Aware Memory Synchronization for Embedded Multicore Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2009</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>244262.00</AwardTotalIntnAmount>
<AwardAmount>268892</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hong Jiang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>High-end embedded systems such as smart phones, game consoles, GPS-enabled automotive systems, home entertainment centers, and other ?ambient intelligence? systems are becoming increasingly important in everyday life. Making such systems energy-efficient presents new challenges with broad implications for the economy and the environment.  Such high-end embedded systems are multicore architectures, which require management of resources such as memory connectivity and scheduling. This proposal investigates the energy implications of system-level concurrency issues in high-end embedded systems that are not limited by real-time constraints. In particular, it aims to develop energy-efficient techniques of synchronizing memory accesses, and tries to understand the optimal division of tasks between hardware and software. &lt;br/&gt;&lt;br/&gt;Embedded systems are an integral component of modern life, and is a continually growing market. As the computational needs of the products in this market becomes more sophisticated, there will be more challenges in meeting the tight constraints imposed by these systems. Improvements in the performance and in particular the energy efficiency of such devices would have a substantial impact in terms of improved functionality, device longevity, and resource conservation.  This proposal involves collaboration between two disciplines, computer engineering and computer science, and two institutions.  Broader impacts of the proposal include development of workshops focused on multicore and parallel computing with special emphasis on encouraging women and under-represented minorities to participate. In addition, the findings of this project will be integrated into existing courses, specifically aiming to introduce cross-cutting issues between the computer science and engineering courses.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/30/2009</MinAmdLetterDate>
<MaxAmdLetterDate>06/23/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0903384</AwardID>
<Investigator>
<FirstName>Maurice</FirstName>
<LastName>Herlihy</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Maurice P Herlihy</PI_FULL_NAME>
<EmailAddress>herlihy@cs.brown.edu</EmailAddress>
<PI_PHON>4018637646</PI_PHON>
<NSF_ID>000333742</NSF_ID>
<StartDate>07/30/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Ruth</FirstName>
<LastName>Bahar</LastName>
<PI_MID_INIT>I</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ruth I Bahar</PI_FULL_NAME>
<EmailAddress>iris_bahar@brown.edu</EmailAddress>
<PI_PHON>4018631430</PI_PHON>
<NSF_ID>000405249</NSF_ID>
<StartDate>07/30/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brown University</Name>
<CityName>Providence</CityName>
<ZipCode>029129002</ZipCode>
<PhoneNumber>4018632777</PhoneNumber>
<StreetAddress>BOX 1929</StreetAddress>
<StreetAddress2><![CDATA[350 Eddy Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<StateCode>RI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>RI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001785542</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BROWN UNIVERSITY IN PROVIDENCE IN THE STATE OF RHODE ISLAND AND PROVIDENCE PLANTATIONS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001785542</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Brown University]]></Name>
<CityName>Providence</CityName>
<StateCode>RI</StateCode>
<ZipCode>029129002</ZipCode>
<StreetAddress><![CDATA[BOX 1929]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>RI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7564</Code>
<Text>CCSS-Comms Circuits &amp; Sens Sys</Text>
</ProgramElement>
<ProgramElement>
<Code>7786</Code>
<Text>MCDA</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>7786</Code>
<Text>MCDA</Text>
</ProgramReference>
<ProgramReference>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~244262</FUND_OBLG>
<FUND_OBLG>2010~14630</FUND_OBLG>
<FUND_OBLG>2011~10000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>High-end embedded systems such as smart phones, game consoles, GPS-enabled automotive systems, and other "ambient intelligence" systems are becoming increasingly important in everyday life.&nbsp; Making such systems energy-efficient presents new challenges with broad implications for the economy and the environment. Such high-end embedded systems are multicore architectures, which require management of resources such as memory connectivity and scheduling. This project investigates the energy implications of system-level concurrency issues in high-end embedded multicore systems. In particular, it aims to develop energy-efficient techniques of synchronizing memory accesses, and tries to understand the optimal division of tasks between hardware and software.</p> <p>Energy consumption and complexity are considered to be driving concerns in the design of embedded systems and therefore we focused on adapting simple hardware transactional memory (HTM) schemes in the our architectural designs. Several different cache structures and contention management schemes to support HTM were proposed and evaluated in terms of energy,<br />performance, and complexity.</p> <p>Many proposals involving hardware transactional memory require modifications to the underlying cache coherency protocol, which can have some undesirable side effects.&nbsp; In this project, we proposed a specialized hardware module, known as the Bloom Filter Module, that decouples the conflict detection from the cache coherency.&nbsp; Because of its separation from the cache coherence protocol of the processor cores, the Bloom Filter Module configuration requires much less complexity in its logic.&nbsp; An additional benefit of the centralized nature of the Bloom Filter Module is that it can use any algorithm to decide which cores to abort in case of a data conflict.</p> <p>Ease of use and transparency of the internal functionality are first-class design<br />constraints of the embedded transactional memory system.&nbsp; As such, we&nbsp; considered an integrated hardware/software solution for transactional programming on embedded multiprocessor systems. This involved developing a low-level transactional application programming interface, implemented as an<br />extension to OpenMP that allows us to support speculative task and data-level<br />parallelism.</p> <p>Finally, in the last year of the project we explored how speculative synchronization could be deployed for applications that were written using conventional non-speculative constructs (e.g., locks). &nbsp; This approach, known a "speculative lock elision", is appealing because it promises to increase concurrency without the need to retrofit code, so programmers can take full advantage of the underlying speculative hardware support even when running code written using traditional locks.&nbsp; While other researchers have previously<br />proposed the idea of speculative lock elision (and transactional lock removal), our work differs on two key aspects. First, it explores a lightweight hardware solution that is evaluated not just in terms of improved throughput, but also<br />in terms of energy efficiency, which is particularly important for embedded platforms.&nbsp; In addition, we explore flexible contention management alternatives that go beyond these other proposals.</p> <p>Outcomes:</p> <p>For our initial simulation results, we found that even simple transactional memory designs outperform locking with respect to both energy and performance.&nbsp; The level of improvement is workload-dependent; however, overall our experimental findings show that ignoring energy considerations can  lead to poor design choices, particularly for resource-constrained  embedded platforms.&nbsp;</p> <p>When evaluating our Bloom Module, we found that for benchmarks that spend any significant amount of time executing transactions, our transactional memory scheme achieved signif...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ High-end embedded systems such as smart phones, game consoles, GPS-enabled automotive systems, and other "ambient intelligence" systems are becoming increasingly important in everyday life.  Making such systems energy-efficient presents new challenges with broad implications for the economy and the environment. Such high-end embedded systems are multicore architectures, which require management of resources such as memory connectivity and scheduling. This project investigates the energy implications of system-level concurrency issues in high-end embedded multicore systems. In particular, it aims to develop energy-efficient techniques of synchronizing memory accesses, and tries to understand the optimal division of tasks between hardware and software.  Energy consumption and complexity are considered to be driving concerns in the design of embedded systems and therefore we focused on adapting simple hardware transactional memory (HTM) schemes in the our architectural designs. Several different cache structures and contention management schemes to support HTM were proposed and evaluated in terms of energy, performance, and complexity.  Many proposals involving hardware transactional memory require modifications to the underlying cache coherency protocol, which can have some undesirable side effects.  In this project, we proposed a specialized hardware module, known as the Bloom Filter Module, that decouples the conflict detection from the cache coherency.  Because of its separation from the cache coherence protocol of the processor cores, the Bloom Filter Module configuration requires much less complexity in its logic.  An additional benefit of the centralized nature of the Bloom Filter Module is that it can use any algorithm to decide which cores to abort in case of a data conflict.  Ease of use and transparency of the internal functionality are first-class design constraints of the embedded transactional memory system.  As such, we  considered an integrated hardware/software solution for transactional programming on embedded multiprocessor systems. This involved developing a low-level transactional application programming interface, implemented as an extension to OpenMP that allows us to support speculative task and data-level parallelism.  Finally, in the last year of the project we explored how speculative synchronization could be deployed for applications that were written using conventional non-speculative constructs (e.g., locks).   This approach, known a "speculative lock elision", is appealing because it promises to increase concurrency without the need to retrofit code, so programmers can take full advantage of the underlying speculative hardware support even when running code written using traditional locks.  While other researchers have previously proposed the idea of speculative lock elision (and transactional lock removal), our work differs on two key aspects. First, it explores a lightweight hardware solution that is evaluated not just in terms of improved throughput, but also in terms of energy efficiency, which is particularly important for embedded platforms.  In addition, we explore flexible contention management alternatives that go beyond these other proposals.  Outcomes:  For our initial simulation results, we found that even simple transactional memory designs outperform locking with respect to both energy and performance.  The level of improvement is workload-dependent; however, overall our experimental findings show that ignoring energy considerations can  lead to poor design choices, particularly for resource-constrained  embedded platforms.   When evaluating our Bloom Module, we found that for benchmarks that spend any significant amount of time executing transactions, our transactional memory scheme achieved significantly better performance and energy results than locking. However, as the number of cores increases, we found that the contribution of the Bloom Module to the total energy consumption als...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
