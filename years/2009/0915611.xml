<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Specification Language Foundations for Modular Reasoning Methodologies</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2009</AwardEffectiveDate>
<AwardExpirationDate>07/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>249949.00</AwardTotalIntnAmount>
<AwardAmount>257949</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project extends the semantical foundations of object-oriented (OO) &lt;br/&gt;languages to cover methodologies for modular reasoning. Modular reasoning &lt;br/&gt;means verifying software components assuming the specification of each &lt;br/&gt;used component. Modularity is important for productivity and scalability, &lt;br/&gt;but is difficult to achieve for OO software. To support modular reasoning, &lt;br/&gt;researchers have proposed several methodologies that restrict programs and &lt;br/&gt;their specifications. The goal of this project is to provide a theoretical &lt;br/&gt;basis that supports practical techniques for justifying and using &lt;br/&gt;methodologies.&lt;br/&gt;&lt;br/&gt;This project provides guidance for the designers of programming and &lt;br/&gt;specification languages, verification logics, and associated tools. The &lt;br/&gt;results will improve the utility and extensibility of verification tools &lt;br/&gt;--- a key goal of the Verified Software grand challenge.  Software &lt;br/&gt;developers may benefit from the integration and harmonious interoperation &lt;br/&gt;of best-practice methodologies. This project is potentially &lt;br/&gt;transformative: it aims to enable combinations and customizations of &lt;br/&gt;methodologies by tool users, scalable to real applications.&lt;br/&gt;&lt;br/&gt;Improved OO programming methodologies may greatly improve programming &lt;br/&gt;practice, especially in applications needing high assurance, reliability, &lt;br/&gt;and security.  This will benefit society, which increasingly depends on &lt;br/&gt;computing systems built using OO components. Unification of methodologies &lt;br/&gt;and streamlining of tools also facilitates the education of software &lt;br/&gt;developers.</AbstractNarration>
<MinAmdLetterDate>08/07/2009</MinAmdLetterDate>
<MaxAmdLetterDate>04/18/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915611</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Naumann</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David A Naumann</PI_FULL_NAME>
<EmailAddress>naumann@cs.stevens.edu</EmailAddress>
<PI_PHON>2012165608</PI_PHON>
<NSF_ID>000331140</NSF_ID>
<StartDate>08/07/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stevens Institute of Technology</Name>
<CityName>HOBOKEN</CityName>
<ZipCode>070305991</ZipCode>
<PhoneNumber>2012168762</PhoneNumber>
<StreetAddress>CASTLE POINT ON HUDSON</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NJ08</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>064271570</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>STEVENS INSTITUTE OF TECHNOLOGY (INC)</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>064271570</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stevens Institute of Technology]]></Name>
<CityName>HOBOKEN</CityName>
<StateCode>NJ</StateCode>
<ZipCode>070305991</ZipCode>
<StreetAddress><![CDATA[CASTLE POINT ON HUDSON]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NJ08</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9217</Code>
<Text>NATNL RESERCH &amp; EDUCAT NETWORK</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~249949</FUND_OBLG>
<FUND_OBLG>2011~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In this project, researchers extended the semantic theory of object-oriented (OO) languages to cover methodologies for modular reasoning about OO programs and to cover ways that these methodologies can be justified and integrated into specification languages and verification tools. &nbsp;Verification means accurate analysis of software behavior in general, using precise mathematical models, by contrast with testing which means experiments that execute the software in selected scenarios. &nbsp;Modular reasoning means verification of software components under the assumption that each component used satisfies its specification. Modularity is important for productivity and scalability when composing large systems.</p> <p>Although widely used, even in critical systems, OO techniques make modular reasoning difficult, due to non-localized features such as subtyping, inheritance and dynamic dispatch, pointers, callbacks, and globally accessible fields and methods. To tame such features, researchers have proposed several methodologies. Each has a discipline that imposes restrictions on programs, specifications, and annotations. Such a programming discipline enforces a global invariant which enables the associated modular verification technique. &nbsp;Existing methodologies are difficult to compare, combine, and build into tools, because they lack an adequate theoretical basis. Most methodologies have been studied and deployed in isolation, with specialized notations and assumptions tied to particular tools.</p> <p>This project has made it easier to develop methodologies, prove them sound, and compose and combine them. &nbsp;A novel programming logic has been developed, which fits with a standard architecture for software verification tools. So-called ghost state is used to encode disciplines and to specify global properties. From a practical perspective, the key innovations are the notions of 'dynamic frame' and 'dynamic encapsulation boundary' which augment conventional interface specifications by making explicit which memory locations may be affected by each software component. &nbsp;</p> <p>To evaluate the ideas, the logic has been formalized and proved sound, as documented in research papers. &nbsp;In addition, the innovations are being incorporated into the Java Modeling Language. &nbsp;The ideas have also been implemented in the VERL prototype program verifier developed by the PI with a PhD student; this has been made freely available as open source software.&nbsp;</p> <p>In the course of the project, opportunities have been explored for reasoning about equivalence and other relations between programs. &nbsp;These explorations address fundamental challenges in secure information flow and in refactoring of software. &nbsp;In particular, the programming logic is basis for specification of information flow properties that involve conditional reclassification of sensitive data. A PhD student working on this project developed models of telephony security protocols, for direct analysis and to support specification of software implementations. &nbsp;Another PhD student developed a theory and prototype implementation for runtime monitoring of information flow properties in OO programs. &nbsp;Subsequent to this project, these results and the tools mentioned earlier are being used for security analysis of mobile applications.</p> <p>Results from this project will improve the utility and extensibility of verification tools and runtime assertion checkers; this is a key goal of the Verified Software grand challenge. &nbsp;Software developers will benefit from the integration and harmonious interoperation of best-practice methodologies. This project will enable combinations of methodologies and foster a shift from ad hoc disciplines hard-coded in tools to explicitly defined disciplines customizable by tool users and thereby scalable to real applications.&nbsp;<br /><br /></p><br> <...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In this project, researchers extended the semantic theory of object-oriented (OO) languages to cover methodologies for modular reasoning about OO programs and to cover ways that these methodologies can be justified and integrated into specification languages and verification tools.  Verification means accurate analysis of software behavior in general, using precise mathematical models, by contrast with testing which means experiments that execute the software in selected scenarios.  Modular reasoning means verification of software components under the assumption that each component used satisfies its specification. Modularity is important for productivity and scalability when composing large systems.  Although widely used, even in critical systems, OO techniques make modular reasoning difficult, due to non-localized features such as subtyping, inheritance and dynamic dispatch, pointers, callbacks, and globally accessible fields and methods. To tame such features, researchers have proposed several methodologies. Each has a discipline that imposes restrictions on programs, specifications, and annotations. Such a programming discipline enforces a global invariant which enables the associated modular verification technique.  Existing methodologies are difficult to compare, combine, and build into tools, because they lack an adequate theoretical basis. Most methodologies have been studied and deployed in isolation, with specialized notations and assumptions tied to particular tools.  This project has made it easier to develop methodologies, prove them sound, and compose and combine them.  A novel programming logic has been developed, which fits with a standard architecture for software verification tools. So-called ghost state is used to encode disciplines and to specify global properties. From a practical perspective, the key innovations are the notions of 'dynamic frame' and 'dynamic encapsulation boundary' which augment conventional interface specifications by making explicit which memory locations may be affected by each software component.    To evaluate the ideas, the logic has been formalized and proved sound, as documented in research papers.  In addition, the innovations are being incorporated into the Java Modeling Language.  The ideas have also been implemented in the VERL prototype program verifier developed by the PI with a PhD student; this has been made freely available as open source software.   In the course of the project, opportunities have been explored for reasoning about equivalence and other relations between programs.  These explorations address fundamental challenges in secure information flow and in refactoring of software.  In particular, the programming logic is basis for specification of information flow properties that involve conditional reclassification of sensitive data. A PhD student working on this project developed models of telephony security protocols, for direct analysis and to support specification of software implementations.  Another PhD student developed a theory and prototype implementation for runtime monitoring of information flow properties in OO programs.  Subsequent to this project, these results and the tools mentioned earlier are being used for security analysis of mobile applications.  Results from this project will improve the utility and extensibility of verification tools and runtime assertion checkers; this is a key goal of the Verified Software grand challenge.  Software developers will benefit from the integration and harmonious interoperation of best-practice methodologies. This project will enable combinations of methodologies and foster a shift from ad hoc disciplines hard-coded in tools to explicitly defined disciplines customizable by tool users and thereby scalable to real applications.          Last Modified: 12/03/2012       Submitted by: David A Naumann]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
