<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR:Small:Efficient and Predictable Memory Hierarchies for High-Performance Embedded Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>449722.00</AwardTotalIntnAmount>
<AwardAmount>685727</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>0915503&lt;br/&gt;CSR:Small:Efficient and Predictable Memory Hierarchies for High-Performance Embedded Systems&lt;br/&gt;&lt;br/&gt;Abstract&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;High-end embedded systems are increasingly used for complex computation, such as advanced image processing and speech processing. Such complex tasks often involve irregular data structures such as linked data structures, or exhibit irregular access patterns even with regular data structures. Managing scratchpad memory for such tasks becomes increasingly challenging due to the difficulty of determining addresses that will be accessed in the future.  For such complex applications, hardware-managed storage (caches) can perform relatively well without much programming effort. However,caches do not offer predictability required to derive a tight worst case execution time (WCET) bound in real-time systems, due to their dynamic behavior that is difficult to predict at compile time. &lt;br/&gt;&lt;br/&gt;The goal of the project is to explore a new intelligent real-time cache, which offers ease of storage management as well as allows programs to control caching behavior with low overheads, providing predictability that supports real time analysis. The work consists of: (1) Instruction and architecture support that provides primitives to control cache behavior with low overheads, (2)Development compile-time analysis and run-time support to support the new cache, and (3)Proof-of-concept of the proposed system. &lt;br/&gt;&lt;br/&gt;Improved memory performance and predictability will be to make computer systems more efficient, enable more challenging problems to be solved, and improve energy-efficiency of existing applications. This project will also extend outreach to undergraduate and high-school students about the value of engineering to society and attract more students into the field. It will also benefit the public by disseminating research results through publications and tool releases.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/06/2009</MinAmdLetterDate>
<MaxAmdLetterDate>09/14/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915503</AwardID>
<Investigator>
<FirstName>Alexander</FirstName>
<LastName>Dean</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Alexander G Dean</PI_FULL_NAME>
<EmailAddress>alex_dean@ncsu.edu</EmailAddress>
<PI_PHON>9195134021</PI_PHON>
<NSF_ID>000340374</NSF_ID>
<StartDate>08/06/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Yan</FirstName>
<LastName>Solihin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yan Solihin</PI_FULL_NAME>
<EmailAddress>yan.solihin@ucf.edu</EmailAddress>
<PI_PHON>4078234191</PI_PHON>
<NSF_ID>000299551</NSF_ID>
<StartDate>08/06/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2><![CDATA[Admin. III, STE 240]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[North Carolina State University]]></Name>
<CityName>Raleigh</CityName>
<StateCode>NC</StateCode>
<ZipCode>276957514</ZipCode>
<StreetAddress><![CDATA[2601 Wolf Village Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>J138</Code>
<Text/>
</ProgramElement>
<ProgramElement>
<Code>K555</Code>
<Text/>
</ProgramElement>
<ProgramReference>
<Code>170E</Code>
<Text>Interagency Agreements</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~449722</FUND_OBLG>
<FUND_OBLG>2010~142575</FUND_OBLG>
<FUND_OBLG>2011~93430</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our work developed methods which improve the timing predictability of memory systems for time-critical, multi-threaded computing systems (e.g. embedded systems such as antilock brake controllers in cars). General purpose computers use cache memories to make the slow main memory seem much faster by selecting and holding data which is likely to be used again based on simple rules. However, if the processor needs data which is not in the cache (called a cache miss), it will need to access the main memory. The processor needs to wait for the main memory to return the desired value, leading to the processor sittling idle when it could instead be executing tens or hundreds of program instructions. Caches are especially vulnerable to multi-threaded systems, in which the processor shares its time across multiple programs, leading to pollution of cache memory contents. An alternative to the cache is a small, fast memory (scratchpad memory, or SPM) whose contents are explicitly selected by the programmer or programming tools.</p> <p>In our main project we studied how scratchpad memory reduces data cache  contention for preemptive real-time embedded systems which use both fast  memory systems together. Our methods divide data cache misses into two types: intrinsic misses and  interference misses. This new cache miss analysis reveals typical  interactions between data of real-time tasks in the data cache. We developed allocation methods to build on analysis to identify  data sets which disrupt the data cache states frequently during the  real-time scheduling. Our experiments show significantly reduced  inter-task cache pollution as well as eliminated intrinsic cache misses  of the data sets themselves after allocating those data sets into SPM, demonstrating the benefits of our approach.</p> <p>In the supplement to our project we worked with the Chesapeake Bay  Environmental Center (CBEC, Grasonville, MD) to develop a system for monitoring oyster feeding activity and associated water characteristics (temperature, pressure/depth, salinity, optical clarity) and presenting the information to the public at large through the internet. The system consists of a microcontroller-based underwater sensor and logger subsystem and an above-water Linux-powered Beagleboard computer for control. The system is solar-powered. We developed the system with extensive testing in North Carolina, at the Smithsonian Environmental Research Center (SERC, near  Edgewater, MD) and at CBEC. We then deployed the sensor system at CBEC in  August of 2012 and operated until it was disabled by Hurricane Sandy in  late October 2012.</p><br> <p>            Last Modified: 02/20/2015<br>      Modified by: Alexander&nbsp;G&nbsp;Dean</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Our work developed methods which improve the timing predictability of memory systems for time-critical, multi-threaded computing systems (e.g. embedded systems such as antilock brake controllers in cars). General purpose computers use cache memories to make the slow main memory seem much faster by selecting and holding data which is likely to be used again based on simple rules. However, if the processor needs data which is not in the cache (called a cache miss), it will need to access the main memory. The processor needs to wait for the main memory to return the desired value, leading to the processor sittling idle when it could instead be executing tens or hundreds of program instructions. Caches are especially vulnerable to multi-threaded systems, in which the processor shares its time across multiple programs, leading to pollution of cache memory contents. An alternative to the cache is a small, fast memory (scratchpad memory, or SPM) whose contents are explicitly selected by the programmer or programming tools.  In our main project we studied how scratchpad memory reduces data cache  contention for preemptive real-time embedded systems which use both fast  memory systems together. Our methods divide data cache misses into two types: intrinsic misses and  interference misses. This new cache miss analysis reveals typical  interactions between data of real-time tasks in the data cache. We developed allocation methods to build on analysis to identify  data sets which disrupt the data cache states frequently during the  real-time scheduling. Our experiments show significantly reduced  inter-task cache pollution as well as eliminated intrinsic cache misses  of the data sets themselves after allocating those data sets into SPM, demonstrating the benefits of our approach.  In the supplement to our project we worked with the Chesapeake Bay  Environmental Center (CBEC, Grasonville, MD) to develop a system for monitoring oyster feeding activity and associated water characteristics (temperature, pressure/depth, salinity, optical clarity) and presenting the information to the public at large through the internet. The system consists of a microcontroller-based underwater sensor and logger subsystem and an above-water Linux-powered Beagleboard computer for control. The system is solar-powered. We developed the system with extensive testing in North Carolina, at the Smithsonian Environmental Research Center (SERC, near  Edgewater, MD) and at CBEC. We then deployed the sensor system at CBEC in  August of 2012 and operated until it was disabled by Hurricane Sandy in  late October 2012.       Last Modified: 02/20/2015       Submitted by: Alexander G Dean]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
