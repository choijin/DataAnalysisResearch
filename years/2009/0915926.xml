<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Reducing Virus Propagation in Mobile Devices</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>499981.00</AwardTotalIntnAmount>
<AwardAmount>515981</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
<PO_EMAI>jepstein@nsf.gov</PO_EMAI>
<PO_PHON>7032928338</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Mobile computer systems and software are increasingly subject to a host of security threats and malicious software (malware) attacks due to vulnerabilities in their coding. The difficulty in achieving secure systems is further compounded by prevalence of unsophisticated users and the increasing reliance on third party software integration by enabling software module plugins for such user applications as web browsers and search engines. Traditional approaches have sought to provide an absolute defense to specific malware attacks by patching software vulnerabilities or detecting and blocking malware. One difficulty with these approaches for small mobile platforms is that the design constraints on these devices often favor low power to maximize battery life over enhancements to support security protocols. The current situation also represents a programmatic arms race between patching existing vulnerabilities and exploiting vulnerabilities in new application code. This research develops a new secure mobile computing environment based on current mobile technology widely available as consumer end products that seeks to use program differentiation to reduce the propagation rate of malware when a software vulnerability exists. This results not in the direct elimination of security vulnerabilities, but in the dramatic reduction in scope of any security exploit to infect large numbers of systems. By constraining the outbreak to only a few systems, counter measures can be employed before significant economic damage can result. By modifying aspects of the execution of the application, application executables can be permuted into unique versions for each distributed instance. Differentiation is achieved using hardware and/or systems software modifications. Areas of differentiation include function call/return and system call semantics, as well as a proposal for hardware-supported Instruction Register File access and intrusion detection monitoring. Differentiation of executables hinders analysis for vulnerabilities as well as prevents the exploitation of a vulnerability in a single distributed version from propagating to other instances of that application. By focusing on prevention of malware propagation in addition to traditional absolute defenses, we target the economics of malware in order to make attacks prohibitively expensive and infeasible.&lt;br/&gt;This approach can be more feasible than some conventional security approaches since it can be readily applied to the restricted performance capabilities of mobile systems and the legal constraints on the export of encryption technology. Further information and software distribution related to this project can be accessed at: http://www.cs.fsu.edu/~tyson/differentiation.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/16/2009</MinAmdLetterDate>
<MaxAmdLetterDate>07/09/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915926</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Whalley</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David B Whalley</PI_FULL_NAME>
<EmailAddress>whalley@cs.fsu.edu</EmailAddress>
<PI_PHON>8506443506</PI_PHON>
<NSF_ID>000346269</NSF_ID>
<StartDate>09/16/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Gary</FirstName>
<LastName>Tyson</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gary S Tyson</PI_FULL_NAME>
<EmailAddress>tyson@cs.fsu.edu</EmailAddress>
<PI_PHON>8506443088</PI_PHON>
<NSF_ID>000182419</NSF_ID>
<StartDate>09/16/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Florida State University</Name>
<CityName>TALLAHASSEE</CityName>
<ZipCode>323064166</ZipCode>
<PhoneNumber>8506445260</PhoneNumber>
<StreetAddress>874 Traditions Way, 3rd Floor</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>790877419</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>FLORIDA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>159621697</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Florida State University]]></Name>
<CityName>TALLAHASSEE</CityName>
<StateCode>FL</StateCode>
<ZipCode>323064166</ZipCode>
<StreetAddress><![CDATA[874 Traditions Way, 3rd Floor]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~130476</FUND_OBLG>
<FUND_OBLG>2010~169496</FUND_OBLG>
<FUND_OBLG>2011~216009</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>We used the time in the extension year of the grant to study the efficacy of using the permutation techniques to obfuscate application code for Android devices. Three techniques to limit the impact of malware on mobile systems were studied: (1) a simple encryption scheme in which the distribution code is transmitted in an encrypted form and dynamic compilation performs decryption; (2) manipulating control flow locations within the application using indirection and permutation to obfuscate execution behavior; (3) augmenting application code to include analysis code which determines whether the application code has been modified by some advisory.</p> <p>&nbsp;</p> <p>Each of these approaches seeks to prevent application code from being manipulated by malicious developers.&nbsp; Each has weaknesses and all three approaches can be used together to improve the ability of an application developer to protect code from unauthorized modification. Encryption by itself is only marginally successful in preventing third party modification of application code. The best of these systems distributes application code using public key encryption, enabling users to decrypt execution code within the &ldquo;just-in-time&rdquo; compiler. Unfortunately, this does not prevent reverse engineering the code since the entire runtime system is available as open source, enabling anyone to see the decrypted version of the application code. It does prevent an adversary from modifying, then repackaging the code using the same encryption key; however, many mobile application downloads are performed by users unconcerned about whether an application is repackaged and distributed using another key or in an un-encrypted form. While encryption cannot prevent repackaging of modified application by a third party, it does eliminate the ability of that third party to encrypt the repackage application using the original encryption key, thereby preventing users from unknowingly downloading a compromised application.</p> <p>&nbsp;</p> <p>The primary method developed in this research was to examine the application of indirection in specifying control flow and the permutation of the jump tables used to perform that indirection. These techniques were used to obfuscate individual instances of an application. Initial evaluation was performed on the executable image.&nbsp; However, this approach must be modified in mobile applications since the distribution image of an application is a higher-level virtual machine code. &nbsp;Instead of permuting the return address stack, we instead permute the links into the virtual machine and API libraries resident within the virtual machine (as opposed to any libraries distributed with the application. While this does not remove the ability to repackage applications, it does provide control over how system resources can be accessed on each machine.</p> <p>&nbsp;</p> <p>The third technique is one we developed specifically to prevent reverse engineering and repackaging of modified mobile software. The basic idea is to incorporate additional computation into the application to identify when the program has been modified.&nbsp; This could be as simple as incorporating a checksum or CRC in the Dalvik executable file.&nbsp; To discourage reverse engineering, it is necessary obfuscate the check placed in the application code. This is achieved by interleaving the additional computation in with the application code.&nbsp; Function call graph analysis and dataflow analysis techniques enable automated code insertion by the compiler to protect a wide portion of the application code. The application developer also has a variety of options on how to respond to code deemed to have been altered, from aborting the execution to changing the application behavior. We have implemented this technique on an application we have developed to determine required overhead in software development and impact...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ We used the time in the extension year of the grant to study the efficacy of using the permutation techniques to obfuscate application code for Android devices. Three techniques to limit the impact of malware on mobile systems were studied: (1) a simple encryption scheme in which the distribution code is transmitted in an encrypted form and dynamic compilation performs decryption; (2) manipulating control flow locations within the application using indirection and permutation to obfuscate execution behavior; (3) augmenting application code to include analysis code which determines whether the application code has been modified by some advisory.     Each of these approaches seeks to prevent application code from being manipulated by malicious developers.  Each has weaknesses and all three approaches can be used together to improve the ability of an application developer to protect code from unauthorized modification. Encryption by itself is only marginally successful in preventing third party modification of application code. The best of these systems distributes application code using public key encryption, enabling users to decrypt execution code within the "just-in-time" compiler. Unfortunately, this does not prevent reverse engineering the code since the entire runtime system is available as open source, enabling anyone to see the decrypted version of the application code. It does prevent an adversary from modifying, then repackaging the code using the same encryption key; however, many mobile application downloads are performed by users unconcerned about whether an application is repackaged and distributed using another key or in an un-encrypted form. While encryption cannot prevent repackaging of modified application by a third party, it does eliminate the ability of that third party to encrypt the repackage application using the original encryption key, thereby preventing users from unknowingly downloading a compromised application.     The primary method developed in this research was to examine the application of indirection in specifying control flow and the permutation of the jump tables used to perform that indirection. These techniques were used to obfuscate individual instances of an application. Initial evaluation was performed on the executable image.  However, this approach must be modified in mobile applications since the distribution image of an application is a higher-level virtual machine code.  Instead of permuting the return address stack, we instead permute the links into the virtual machine and API libraries resident within the virtual machine (as opposed to any libraries distributed with the application. While this does not remove the ability to repackage applications, it does provide control over how system resources can be accessed on each machine.     The third technique is one we developed specifically to prevent reverse engineering and repackaging of modified mobile software. The basic idea is to incorporate additional computation into the application to identify when the program has been modified.  This could be as simple as incorporating a checksum or CRC in the Dalvik executable file.  To discourage reverse engineering, it is necessary obfuscate the check placed in the application code. This is achieved by interleaving the additional computation in with the application code.  Function call graph analysis and dataflow analysis techniques enable automated code insertion by the compiler to protect a wide portion of the application code. The application developer also has a variety of options on how to respond to code deemed to have been altered, from aborting the execution to changing the application behavior. We have implemented this technique on an application we have developed to determine required overhead in software development and impact on execution, and we believe that this approach is viable to discourage repackaging of popular applications.          Last Modified: 01/21/2014       Subm...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
