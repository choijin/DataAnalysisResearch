<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Real-Time Platform Virtualization in Multiprocessor Systems: Temporal Isolation and Allocation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2010</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>416800</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The standard platform architecture for real-time embedded systems has increasingly shifted away from single processor platforms to multiprocessor platforms.  The recent shift towards multiprocessor platform architectures has resulted in increased consolidation and integration of multiple subsystems upon shared processing platforms, aided in part by virtualization execution environment (VEE) technologies.  The potential impact of the subsystem-integration approach is a significant reduction in the size, weight, and power (SWaP) requirements of integrated systems over non-integrated systems.  However, the tighter physical integration of subsystems upon a shared processing platform introduces fundamental questions on how the processor's computational resources should be effectively allocated among the contingent subsystems and how temporal isolation between real-time subsystems should be achieved. &lt;br/&gt; &lt;br/&gt;The overall objective of this NSF CAREER project is to obtain solutions to the above questions via development of effective real-time scheduling algorithms, formal analysis, and tools for supporting tunable temporal isolation of subsystems upon a multicore VEE platform. The specific research objectives of the project are: effective system and subsystem real-time scheduling algorithms for VEE frameworks, protocols for resource sharing between subsystems, schedulability analysis, and implementation of a VEE for controlling a real-time robotic system.  The educational goal of the project is to increase overall awareness and understanding of the importance of building and verifying temporally correct systems by:  recruiting graduate and undergraduate students from underrepresented populations into embedded systems research; developing embedded systems curriculum and outreach training program; introducing K-12 students to general embedded systems concepts; and developing online real-time systems repository for students, researchers, and faculty.</AbstractNarration>
<MinAmdLetterDate>07/29/2010</MinAmdLetterDate>
<MaxAmdLetterDate>08/22/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0953585</AwardID>
<Investigator>
<FirstName>Nathan</FirstName>
<LastName>Fisher</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nathan W Fisher</PI_FULL_NAME>
<EmailAddress>fishern@wayne.edu</EmailAddress>
<PI_PHON>3135775421</PI_PHON>
<NSF_ID>000500321</NSF_ID>
<StartDate>07/29/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Wayne State University</Name>
<CityName>Detroit</CityName>
<ZipCode>482023622</ZipCode>
<PhoneNumber>3135772424</PhoneNumber>
<StreetAddress>5057 Woodward</StreetAddress>
<StreetAddress2><![CDATA[6th Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001962224</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>WAYNE STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001962224</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Wayne State University]]></Name>
<CityName>Detroit</CityName>
<StateCode>MI</StateCode>
<ZipCode>482023622</ZipCode>
<StreetAddress><![CDATA[5057 Woodward]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~80000</FUND_OBLG>
<FUND_OBLG>2011~96800</FUND_OBLG>
<FUND_OBLG>2012~160000</FUND_OBLG>
<FUND_OBLG>2013~80000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Real-time embedded system designers face constant market pressure to decrease size, weight, and power (<span>SWaP</span>) requirements of embedded devices while simultaneously ensuring that system real-time constraints (e.g., computation deadlines) are met.&nbsp; For example, consider a state-of-the-art <span>smartphone</span> with individual subsystems dedicated for processing communication, audio, video, text, and image processing; each of the aforementioned subsystems must process data in a timely manner.&nbsp; Older <span>smartphone</span> architectures provisioned each subsystem with a dedicated processing core (e.g., one processing core dedicated to audio signal processing and another to video).&nbsp; However, the one core per subsystem approach cannot scale well with the recent sharp increase in the number of subsystems (driven by consumer demand for more functionality from their devices). Thus, embedded system designers have addressed the contradictory goals of decreasing <span>SWaP</span> requirements and increasing device functionality by integrating a device's subsystems upon a smaller number of processing cores.&nbsp; However, integration of subsystems upon a shared computation platform carries a substantial risk that two subsystems that meet timing constraints when executed in isolation do necessarily not meet timing constraints when co-executed.&nbsp;</span></p> <p><strong>Intellectual Merit:&nbsp; </strong>This project developed of new techniques for facilitating the integration of multiple software applications with timing demands upon a shared processing platform.&nbsp;&nbsp; A fundamental question/challenge not addressed prior to this project was: <em>how does the system designer know that performing this integration of multiple applications on a shared platform will preserve the correctness of the system?&nbsp; </em><span>In other words, if a system works correctly when executed by itself upon the processing platform, will it also work correctly when it multiple applications are sharing the same processor?&nbsp; This is incredibly challenging question to answer when the timing of the application is crucial to the correct functioning of an application. &nbsp;&nbsp;In the <span>smartphone</span> example, consider that the user is running a music-streaming application while simultaneously taking a video.&nbsp; Since both applications are time-sensitive (i.e., if processing was delayed the user would experience a reduced quality experience) and share the same platform, a correct design that ensures the correct execution of both applications must carefully consider the demands of both applications.</span></p> <p>This project has addressed the above fundamental question by developing the following major innovations:</p> <p style="padding-left: 30px;">1) A novel approach to scheduling the real-time applications that ensure temporal isolation (i.e., the timing performance of one application will not affect another application running on the same platform) and allocating sufficient &ldquo;bandwidth&rdquo; to these time-sensitive applications.</p> <p style="padding-left: 30px;">2) A processor temperature controller that recognizes when the system needs to slow down or go into a low-power state due to increased system temperature.&nbsp; Our controller is able to adapt to changing temperature and guarantee a predefined level of timing guarantees at specific temperature ranges.&nbsp; Therefore, the user of the system knows what &ldquo;level of performance&rdquo; to expect at any temperature that the device is operating and can determine how much performance they want to allocate to each of the applications on their device.</p> <p style="padding-left: 30px;">3) New code analysis and scheduling approaches that permit a reduction in the estimation of how long a real-time program will take to execute on the processing platform.&nbsp; This more accurate estimation of execution time could permit a system designer to add more applications/features to a device since less time would need to be reserved for the existing applications.</p> <ol> </ol> <p><strong>Broader Impacts</strong><span>:&nbsp; The principle investigator and his students for this project have presented their research at numerous universities and research institutions, conferences, workshops, and provided demonstrations to visitors to the principle <span>investigator's</span> laboratory.&nbsp; Three Ph.D. dissertations have resulted from this project and an additional three current Ph.D. students have been supported by this project.&nbsp; Furthermore, the graduate students participating in this project have received accolades for their work; one female Ph.D. student received a best student paper award at <span>RTSS</span>, the top conference in the real-time systems field.&nbsp; Two other Ph.D. students received best paper nominations for their work.&nbsp; This project has also supported undergraduate research of students from underrepresented populations.</span></p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/29/2016<br>      Modified by: Nathan&nbsp;W&nbsp;Fisher</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Real-time embedded system designers face constant market pressure to decrease size, weight, and power (SWaP) requirements of embedded devices while simultaneously ensuring that system real-time constraints (e.g., computation deadlines) are met.  For example, consider a state-of-the-art smartphone with individual subsystems dedicated for processing communication, audio, video, text, and image processing; each of the aforementioned subsystems must process data in a timely manner.  Older smartphone architectures provisioned each subsystem with a dedicated processing core (e.g., one processing core dedicated to audio signal processing and another to video).  However, the one core per subsystem approach cannot scale well with the recent sharp increase in the number of subsystems (driven by consumer demand for more functionality from their devices). Thus, embedded system designers have addressed the contradictory goals of decreasing SWaP requirements and increasing device functionality by integrating a device's subsystems upon a smaller number of processing cores.  However, integration of subsystems upon a shared computation platform carries a substantial risk that two subsystems that meet timing constraints when executed in isolation do necessarily not meet timing constraints when co-executed.   Intellectual Merit:  This project developed of new techniques for facilitating the integration of multiple software applications with timing demands upon a shared processing platform.   A fundamental question/challenge not addressed prior to this project was: how does the system designer know that performing this integration of multiple applications on a shared platform will preserve the correctness of the system?  In other words, if a system works correctly when executed by itself upon the processing platform, will it also work correctly when it multiple applications are sharing the same processor?  This is incredibly challenging question to answer when the timing of the application is crucial to the correct functioning of an application.   In the smartphone example, consider that the user is running a music-streaming application while simultaneously taking a video.  Since both applications are time-sensitive (i.e., if processing was delayed the user would experience a reduced quality experience) and share the same platform, a correct design that ensures the correct execution of both applications must carefully consider the demands of both applications.  This project has addressed the above fundamental question by developing the following major innovations: 1) A novel approach to scheduling the real-time applications that ensure temporal isolation (i.e., the timing performance of one application will not affect another application running on the same platform) and allocating sufficient "bandwidth" to these time-sensitive applications. 2) A processor temperature controller that recognizes when the system needs to slow down or go into a low-power state due to increased system temperature.  Our controller is able to adapt to changing temperature and guarantee a predefined level of timing guarantees at specific temperature ranges.  Therefore, the user of the system knows what "level of performance" to expect at any temperature that the device is operating and can determine how much performance they want to allocate to each of the applications on their device. 3) New code analysis and scheduling approaches that permit a reduction in the estimation of how long a real-time program will take to execute on the processing platform.  This more accurate estimation of execution time could permit a system designer to add more applications/features to a device since less time would need to be reserved for the existing applications.    Broader Impacts:  The principle investigator and his students for this project have presented their research at numerous universities and research institutions, conferences, workshops, and provided demonstrations to visitors to the principle investigator's laboratory.  Three Ph.D. dissertations have resulted from this project and an additional three current Ph.D. students have been supported by this project.  Furthermore, the graduate students participating in this project have received accolades for their work; one female Ph.D. student received a best student paper award at RTSS, the top conference in the real-time systems field.  Two other Ph.D. students received best paper nominations for their work.  This project has also supported undergraduate research of students from underrepresented populations.             Last Modified: 10/29/2016       Submitted by: Nathan W Fisher]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
