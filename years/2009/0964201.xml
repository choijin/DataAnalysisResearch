<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Medium: Multicore Virtual Machines for High-Speed Networking</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/01/2010</AwardEffectiveDate>
<AwardExpirationDate>03/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>848979.00</AwardTotalIntnAmount>
<AwardAmount>878979</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A mismatch exists in modern computer systems between the computational resources provided by emerging multicore chip-multiprocessors (CMPs) and the ability of virtual machines (VMs), such as the Java VM or Microsoft Common Language Runtime, to exploit those resources. CMP architectures will dominate the next several processor generations; meanwhile, for reasons of security and portability, software will target VMs rather than native processors. However, since modern VMs are ill-equipped to directly exploit the coarse-grained parallelism provided by CMPs, they will not experience significant performance increases with future generations of processors.&lt;br/&gt;&lt;br/&gt;This work aims to pioneer an approach for accelerating the execution of VMs on CMPs by creating pipelined VMs which are implemented as a series of balanced programs, or pipeline stages, each executing on a distinct processor core. A pipelined VM with N balanced stages can provide an N-fold increase in performance relative to an unpipelined VM. Pipelined VMs allow programmers to benefit from multicore parallelism while writing sequential single-threaded programs.&lt;br/&gt;&lt;br/&gt;This research agenda closely integrates theoretical work on the benefits and limits of VM pipelining, with both 1) the design and implementation of pipelines on real systems, and 2) the exploration of novel computer architectures and mechanisms. For concreteness, the research plan focuses on pipelined VMs that target high-speed networking, an area in which aggressive CMPs are already deployed in commercial and academic platforms and where publically-accessible testbeds will allow others to develop and deploy pipelined VMs of their own design.</AbstractNarration>
<MinAmdLetterDate>03/23/2010</MinAmdLetterDate>
<MaxAmdLetterDate>06/03/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964201</AwardID>
<Investigator>
<FirstName>Patrick</FirstName>
<LastName>Crowley</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Patrick Crowley</PI_FULL_NAME>
<EmailAddress>pcrowley@wustl.edu</EmailAddress>
<PI_PHON>3149359186</PI_PHON>
<NSF_ID>000395067</NSF_ID>
<StartDate>03/23/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Washington University</Name>
<CityName>Saint Louis</CityName>
<ZipCode>631304862</ZipCode>
<PhoneNumber>3147474134</PhoneNumber>
<StreetAddress>CAMPUS BOX 1054</StreetAddress>
<StreetAddress2><![CDATA[1 Brookings Drive]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Missouri</StateName>
<StateCode>MO</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MO01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>068552207</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>WASHINGTON UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>068552207</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Washington University]]></Name>
<CityName>Saint Louis</CityName>
<StateCode>MO</StateCode>
<ZipCode>631304862</ZipCode>
<StreetAddress><![CDATA[CAMPUS BOX 1054]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Missouri</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MO01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~417167</FUND_OBLG>
<FUND_OBLG>2011~289739</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<FUND_OBLG>2013~156073</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This 5-year research effort has developed architectures and methods for pipelining the implementation of virtual machines. The motivation for these methods are clear: as processor clock performance has plateaued, continued, substantial performance gains must be achieved by software changes rather than hardware advances. By pipelining the implementation of a virtual machine-- in which the virtual machine itself is divided into N balanced stages and operated in pipeline-parallel fashion--any program executing on the pipelined virtual machine directly inherits the nearly N-fold speedup achieved by pipelining. Popular programming languages, such as Python and Java, execute atop virtual machines, and this work has shown that pipelined virtual machines can automatically and implicitly improve the performance of unmodified virtual machine-hosted programs.&nbsp;Pipelined virtual machines allow programmers to benefit from multicore parallelism, while writing sequential single-threaded programs.</p> <p>While we believe that multicore virtual machines (VMs) can and will be effective in general-purpose scenarios, we discovered an even greater opportunity in the design of VMs whose operations and references (such as to memory locations) are higher level than those typically found in single-machine run time environments. While our initial thinking focused on VM pipelines with &ldquo;traditional granularity&rdquo; in which VM operations are scoped by registers and memory locations, these insights led us to a far more substantial opportunity at the level of &ldquo;systems granularity&rdquo; in which VM operations are scoped over user-visible names and blocks of system memory organized as flat tables or hash tables. This is particularly true in network systems, where the core data types include sockets, file descriptors, packets, packet buffers, counters, and lookup tables are all well-defined.&nbsp;With this change in perspective, we can design VM pipelines that span multiple machines (in addition to multiple cores), and enable programmers to write programs that take advantage of the combined resources of multiple machines.</p> <p>Our experimentally-driven research agenda focused on the high-impact area of networking and network security. In addition to the many publications that have appeared in traditional conferences, this project has created both a stand-alone, Apache 2.0 licensed open source project for the Passive Network Appliance software, and provided the initial motivation for a successful, well-funded startup company in the area of network security.</p> <p>In addition to these contributions in computer systems and networking, this research activity has directly supported training and R&amp;D experiences for a group of graduate and undergraduate students, preparing them to enter the workforce and make even greater contributions throughout their careers in the computing industry.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 06/29/2015<br>      Modified by: Patrick&nbsp;Crowley</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This 5-year research effort has developed architectures and methods for pipelining the implementation of virtual machines. The motivation for these methods are clear: as processor clock performance has plateaued, continued, substantial performance gains must be achieved by software changes rather than hardware advances. By pipelining the implementation of a virtual machine-- in which the virtual machine itself is divided into N balanced stages and operated in pipeline-parallel fashion--any program executing on the pipelined virtual machine directly inherits the nearly N-fold speedup achieved by pipelining. Popular programming languages, such as Python and Java, execute atop virtual machines, and this work has shown that pipelined virtual machines can automatically and implicitly improve the performance of unmodified virtual machine-hosted programs. Pipelined virtual machines allow programmers to benefit from multicore parallelism, while writing sequential single-threaded programs.  While we believe that multicore virtual machines (VMs) can and will be effective in general-purpose scenarios, we discovered an even greater opportunity in the design of VMs whose operations and references (such as to memory locations) are higher level than those typically found in single-machine run time environments. While our initial thinking focused on VM pipelines with "traditional granularity" in which VM operations are scoped by registers and memory locations, these insights led us to a far more substantial opportunity at the level of "systems granularity" in which VM operations are scoped over user-visible names and blocks of system memory organized as flat tables or hash tables. This is particularly true in network systems, where the core data types include sockets, file descriptors, packets, packet buffers, counters, and lookup tables are all well-defined. With this change in perspective, we can design VM pipelines that span multiple machines (in addition to multiple cores), and enable programmers to write programs that take advantage of the combined resources of multiple machines.  Our experimentally-driven research agenda focused on the high-impact area of networking and network security. In addition to the many publications that have appeared in traditional conferences, this project has created both a stand-alone, Apache 2.0 licensed open source project for the Passive Network Appliance software, and provided the initial motivation for a successful, well-funded startup company in the area of network security.  In addition to these contributions in computer systems and networking, this research activity has directly supported training and R&amp;D experiences for a group of graduate and undergraduate students, preparing them to enter the workforce and make even greater contributions throughout their careers in the computing industry.             Last Modified: 06/29/2015       Submitted by: Patrick Crowley]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
