<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Specification, Verification, and Semantics of Higher-Order and Concurrent Software</AwardTitle>
<AwardEffectiveDate>07/01/2009</AwardEffectiveDate>
<AwardExpirationDate>06/30/2013</AwardExpirationDate>
<AwardTotalIntnAmount>487108.00</AwardTotalIntnAmount>
<AwardAmount>487108</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
</ProgramOfficer>
<AbstractNarration>This award is funded under the American Recovery and Reinvestment Act of 2009 (Public Law 111-5).&lt;br/&gt;&lt;br/&gt;To extend the scale and generality of separation logic and grainless semantics&lt;br/&gt;to become applicable to the specification and verification of more complex and&lt;br/&gt;varied software systems, the following research initiatives are being pursued: &lt;br/&gt;&lt;br/&gt;   Higher-Order Design Patterns - Using higher-order separation logic to&lt;br/&gt;   specify design patterns in object-oriented programing, and to verify their&lt;br/&gt;   implementation.&lt;br/&gt;&lt;br/&gt;   Extension to a Higher-Order Programming Language - extending separation&lt;br/&gt;   logic to an Algol-like language with a heap, including procedures that&lt;br/&gt;   permit global information hiding.&lt;br/&gt;&lt;br/&gt;   Grainless Semantics - devising a new form of grainless semantics that gives&lt;br/&gt;   a more abstract and concise description of shared-variable concurrency by&lt;br/&gt;   avoiding any commitment to a default level of atomicity.&lt;br/&gt;&lt;br/&gt;   Implementation of Logics and Semantics - Using the Isabelle/HOL system to&lt;br/&gt;   implement the machine-aided construction of proofs in separation logic in a&lt;br/&gt;   way that ensures both the validity of the proofs and the soundness of the&lt;br/&gt;   logic and its extensions.&lt;br/&gt;&lt;br/&gt;The overall goal is to substantially increase the variety of programs that can&lt;br/&gt;be verified by separation logic, and to facilitate soundness arguments for this&lt;br/&gt;and other logics for shared-variable concurrency.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/22/2009</MinAmdLetterDate>
<MaxAmdLetterDate>06/22/2009</MaxAmdLetterDate>
<ARRAAmount>487108</ARRAAmount>
<AwardID>0916808</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Reynolds</LastName>
<EmailAddress>john.reynolds@cs.cmu.edu</EmailAddress>
<StartDate>06/22/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>6890</Code>
<Text>RECOVERY ACT ACTION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
