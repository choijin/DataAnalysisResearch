<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Interleaving Constrained Parallel Runtime System for Tolerating Concurrency Bugs</AwardTitle>
<AwardEffectiveDate>08/01/2009</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>499946.00</AwardTotalIntnAmount>
<AwardAmount>499946</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Future processor chips are expected to have hundreds or even thousands of processor cores. To take advantage of this massive computing power, programmers need to parallelize their applications. Parallel programming, however, is notoriously difficult. Almost all the production concurrent software systems used today contain bugs costing billions of dollars. To address this challenge, this research is developing parallel runtime mechanisms that could make it possible for even buggy software to run correctly in a production system.&lt;br/&gt;&lt;br/&gt;The fundamental problem with the current parallel programming models is that they expose an unbounded number of thread interleavings to the parallel runtime system, and a majority of the interleavings in a production system remain untested.  This research is exploring two directions to avoid incorrect interleavings from manifesting in a production run. The first approach uses a sampling-based low overhead data race detector for detecting incorrect interleavings, which are then avoided. The second approach constrains production run thread interleavings to a set of tested interleavings, which could provide comprehensive immunity against most types of concurrency bugs. Software tools developed as part of this research will help software developers and researchers. Students will also use these productivity tools in their course projects.</AbstractNarration>
<MinAmdLetterDate>08/06/2009</MinAmdLetterDate>
<MaxAmdLetterDate>08/06/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0916770</AwardID>
<Investigator>
<FirstName>Satish</FirstName>
<LastName>Narayanasamy</LastName>
<EmailAddress>nsatish@eecs.umich.edu</EmailAddress>
<StartDate>08/06/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Regents of the University of Michigan - Ann Arbor</Name>
<CityName>Ann Arbor</CityName>
<ZipCode>481091274</ZipCode>
<PhoneNumber>7347636438</PhoneNumber>
<StreetAddress>3003 South State St. Room 1062</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9217</Code>
<Text>NATNL RESERCH &amp; EDUCAT NETWORK</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
