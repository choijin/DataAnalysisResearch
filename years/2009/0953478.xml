<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Advanced Methods for Post-Deployment Debugging</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/15/2010</AwardEffectiveDate>
<AwardExpirationDate>02/29/2016</AwardExpirationDate>
<AwardTotalIntnAmount>499990.00</AwardTotalIntnAmount>
<AwardAmount>499990</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computer technology is rapidly permeating all spheres of society.  A computer system that affects the lives of thousands or millions of people creates a massive community of users who have an interest in the correct behavior of that system.  Widespread interconnectivity means that we now have the ability to tap this potential.&lt;br/&gt;&lt;br/&gt;This work confronts the challenge of diagnosing and mitigating concurrency bugs.  A suite of novel instrumentation schemes will be developed for monitoring thread interleaving patterns.  Coupled with statistical debugging models developed previously, this lets developers identify bad thread interleavings which constitute root causes of program failure.  A new approach to coordinated cross-thread random sampling keeps overheads low while still providing ample data for diagnosis.  Static analysis will play a role to further reduce instrumentation load.  Prior statistical debugging work was content with diagnosis only, but this project will develop a speculative locking strategy, guided by the statistical models, to avoid and thereby mitigate the effects of a variety of concurrency bugs.</AbstractNarration>
<MinAmdLetterDate>03/08/2010</MinAmdLetterDate>
<MaxAmdLetterDate>07/22/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0953478</AwardID>
<Investigator>
<FirstName>Benjamin</FirstName>
<LastName>Liblit</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Benjamin R Liblit</PI_FULL_NAME>
<EmailAddress>liblit@cs.wisc.edu</EmailAddress>
<PI_PHON>6082626617</PI_PHON>
<NSF_ID>000203014</NSF_ID>
<StartDate>03/08/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>MADISON</CityName>
<StateCode>WI</StateCode>
<ZipCode>537151218</ZipCode>
<StreetAddress><![CDATA[21 North Park Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~75301</FUND_OBLG>
<FUND_OBLG>2011~106347</FUND_OBLG>
<FUND_OBLG>2012~112690</FUND_OBLG>
<FUND_OBLG>2013~205652</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Computer technology is rapidly permeating all spheres of society. &nbsp;A computer system that affects the lives of thousands or millions of people creates a massive community of users who have an interest in the correct behavior of that system. &nbsp;Widespread network connectivity means that we now have the ability to tap this potential. The work supported by this grant explored how to harness the power of large user communities to diagnose a particularly pernicious class of computer defects: software concurrency bugs. These elusive bugs that arise when a computer system is performing multiple tasks simultaneously, and some of those tasks interfere with each other in destructive, unpredictable ways.</p> <p>To address these problems, we developed Cooperative Crug Isolation (CCI), a low-overhead instrumentation framework to diagnose production-run failures caused by concurrency bugs (crugs). CCI tracks specific thread interleavings at run-time, and uses statistical models to identify strong failure predictors among these. We offer a varied suite of predicates that represent different trade-offs between complexity and fault isolation capability. We also developed variant random sampling strategies that suit different types of predicates and help keep the run-time overhead low. Experiments show that these schemes span a wide spectrum of performance and diagnosis capabilities, each suitable for different usage scenarios.</p> <p>However, recognizing that a bug exists is only half of the battle. Someone still needs to fix the problem&rsquo;s root cause. This debugging task is difficult in general; it is especially slow and error-prone for concurrency bugs. With NSF&rsquo;s generous support, we created CFix, a system that automates the repair of concurrency bugs. CFix works with a wide variety of concurrency-bug detectors, including (but definitely not limited to) our own CCI system. For each failure-inducing interleaving reported by a bug detector, CFix first determines a combination of mutual-exclusion and order relationships that, once enforced, can prevent the buggy interleaving. CFix then uses static analysis and testing to determine where to insert what synchronization operations to force the desired mutual-exclusion and order relationships, with a best effort to avoid deadlocks and excessive performance losses. CFix also simplifies its own patches by merging fixes for related bugs. Evaluation using four different types of bug detectors and thirteen real-world concurrency-bug cases shows that CFix can successfully patch these cases without causing deadlocks or excessive performance degradation. Patches automatically generated by CFix are of similar quality to those manually written by developers. An award nomination for part of this work cited it as &ldquo;one of the first papers to attack the problem of automated bug fixing&rdquo; of any kind. Thus, this represents a major step forward not only for concurrent software but also for reliable computing in general.</p> <p>Concurrency is the future: of this there is no doubt. Our ability to maintain software quality in that concurrent future is, however, very much in doubt. The work sponsored by this research grant represents several major steps forward toward safeguarding that future.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/26/2016<br>      Modified by: Benjamin&nbsp;R&nbsp;Liblit</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Computer technology is rapidly permeating all spheres of society.  A computer system that affects the lives of thousands or millions of people creates a massive community of users who have an interest in the correct behavior of that system.  Widespread network connectivity means that we now have the ability to tap this potential. The work supported by this grant explored how to harness the power of large user communities to diagnose a particularly pernicious class of computer defects: software concurrency bugs. These elusive bugs that arise when a computer system is performing multiple tasks simultaneously, and some of those tasks interfere with each other in destructive, unpredictable ways.  To address these problems, we developed Cooperative Crug Isolation (CCI), a low-overhead instrumentation framework to diagnose production-run failures caused by concurrency bugs (crugs). CCI tracks specific thread interleavings at run-time, and uses statistical models to identify strong failure predictors among these. We offer a varied suite of predicates that represent different trade-offs between complexity and fault isolation capability. We also developed variant random sampling strategies that suit different types of predicates and help keep the run-time overhead low. Experiments show that these schemes span a wide spectrum of performance and diagnosis capabilities, each suitable for different usage scenarios.  However, recognizing that a bug exists is only half of the battle. Someone still needs to fix the problemÆs root cause. This debugging task is difficult in general; it is especially slow and error-prone for concurrency bugs. With NSFÆs generous support, we created CFix, a system that automates the repair of concurrency bugs. CFix works with a wide variety of concurrency-bug detectors, including (but definitely not limited to) our own CCI system. For each failure-inducing interleaving reported by a bug detector, CFix first determines a combination of mutual-exclusion and order relationships that, once enforced, can prevent the buggy interleaving. CFix then uses static analysis and testing to determine where to insert what synchronization operations to force the desired mutual-exclusion and order relationships, with a best effort to avoid deadlocks and excessive performance losses. CFix also simplifies its own patches by merging fixes for related bugs. Evaluation using four different types of bug detectors and thirteen real-world concurrency-bug cases shows that CFix can successfully patch these cases without causing deadlocks or excessive performance degradation. Patches automatically generated by CFix are of similar quality to those manually written by developers. An award nomination for part of this work cited it as "one of the first papers to attack the problem of automated bug fixing" of any kind. Thus, this represents a major step forward not only for concurrent software but also for reliable computing in general.  Concurrency is the future: of this there is no doubt. Our ability to maintain software quality in that concurrent future is, however, very much in doubt. The work sponsored by this research grant represents several major steps forward toward safeguarding that future.                   Last Modified: 05/26/2016       Submitted by: Benjamin R Liblit]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
