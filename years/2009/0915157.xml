<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Collaborative Research: Securing Multilingual Software Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>265048.00</AwardTotalIntnAmount>
<AwardAmount>281048</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Most real software systems consist of modules developed in&lt;br/&gt;multiple programming languages. Different languages differ in their&lt;br/&gt;security assumptions and guarantees. Consequently, even if single&lt;br/&gt;modules are secure in some language model and with respect to some&lt;br/&gt;security policy, there is usually no uniform security guarantee on a&lt;br/&gt;whole multilingual system.  This project focuses on low-overhead&lt;br/&gt;techniques for providing security guarantees to software systems in&lt;br/&gt;which type-safe languages such as Java interoperate with native code.&lt;br/&gt;Native code is developed in low-level languages including C, C++, and&lt;br/&gt;assembly languages.  Although often used in software projects, native&lt;br/&gt;code is notoriously insecure and is a rich source of security&lt;br/&gt;vulnerabilities.  The PIs are developing a two-layered approach to&lt;br/&gt;alleviating security threats posed by native code to type-safe&lt;br/&gt;languages: (1) Binary rewriting tools and their verifiers are being&lt;br/&gt;incorporated into the Java Virtual Machine (JVM) for rewriting and&lt;br/&gt;verifying native modules at the machine-instruction level to enforce&lt;br/&gt;security policies; (2) A safe dialect of C for interoperation with&lt;br/&gt;Java is being designed; with the help of programmer annotations, the&lt;br/&gt;safety of programs in this dialect can be statically verified.  The&lt;br/&gt;outcome of this project will enable popular platforms such as the JVM&lt;br/&gt;and .NET and other major programming languages (e.g., Python, OCaml,&lt;br/&gt;etc.) to incorporate native modules safely.  The developed principles&lt;br/&gt;will also be applicable to web browsers and operating systems in which&lt;br/&gt;there is a need of extending them with untrusted low-level modules&lt;br/&gt;without comprising host security.</AbstractNarration>
<MinAmdLetterDate>09/04/2009</MinAmdLetterDate>
<MaxAmdLetterDate>07/07/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915157</AwardID>
<Investigator>
<FirstName>Gang</FirstName>
<LastName>Tan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gang Tan</PI_FULL_NAME>
<EmailAddress>gtan@psu.edu</EmailAddress>
<PI_PHON>6172720380</PI_PHON>
<NSF_ID>000193259</NSF_ID>
<StartDate>09/04/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Lehigh University</Name>
<CityName>Bethlehem</CityName>
<ZipCode>180153005</ZipCode>
<PhoneNumber>6107583021</PhoneNumber>
<StreetAddress>Alumni Building 27</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>808264444</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LEHIGH UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>068570936</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Lehigh University]]></Name>
<CityName>Bethlehem</CityName>
<StateCode>PA</StateCode>
<ZipCode>180153005</ZipCode>
<StreetAddress><![CDATA[Alumni Building 27]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~265048</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>From online shopping to electronic voting, software systems havebecome an intrinsic part of the modern society over the past fewdecades. However, software systems are not secure. &nbsp;The media is fullof reports of the catastrophic impact of software failures.</p> <p>One reason for the frequent failures is that modern software systemsare complex by all measures. One important aspect that contributes tothe complexity is that a software system is often multilingual; thatis, they are developed in multiple programming languages. Languagesdiffer in their security assumptions and guarantees. Consequently,even if single components are secure in some language model and withrespect to some security policy, there is usually no uniform securityguarantee on a whole multilingual software system.</p> <p>The goal of the project is to design and implement low-overheadtechniques that provide verifiable security when safe languages suchas Java interoperate with native code through the use of ForeignFunction Interfaces (FFIs). &nbsp;Native code is developed in low-levellanguages such as C, C++, or even assembly languages and isnotoriously unsafe.</p> <p>The two core research questions of the projects are: (1) How toimprove safety and security of native libraries when they are used bysafe languages (e.g., Java), while not sacrificing too muchperformance? (2) How to prove formally that the end system satisfiesdesired security properties?</p> <p>For the first question, we have designed a complete framework thatisolates faults of native libraries and provides safety and securityin the context of Java, one of the most popular programming languages.Leveraging a technique called software-based fault isolation, theframework puts native code in a separate code sandbox and allows theinteraction between native and Java code only through a carefullydesigned pathway. &nbsp;Two different implementations have been built todemonstrate the approach's efficiency and portability. &nbsp;In oneimplementation, the security framework is integrated into a JavaVirtual Machine (JVM). In the second implementation, the framework isbuilt outside of the JVM and takes advantage of JVM-independentinterfaces. The second implementation provides JVM portability, at theexpense of some performance degradation. Evaluation of our frameworkdemonstrates that it incurs modest runtime overhead whilesignificantly enhancing the security of Java applications.</p> <p>For the second question, we have applied formal methods to verifyingthe security of our techniques. For that, we have built formal modelsof native code (in particular, we have built a model of Intel's x86code) and a formal model of the Java Native Interface, the standardinterface between Java and native code. Based on those models, we havebuilt a formally verified checker, called RockSalt, that examinesnative code to check whether it obeys the sandboxing policy ofsoftware-based fault isolation, which is used in Google's NativeClient to ensure Chrome extensions developed in native code will notdamage the browser's integrity. The RockSalt checker is smaller,faster, and stronger than Google's original checker. The RockSaltchecker comes with a fully mechanized correctness proof encoded in aninteractive theorem prover.</p> <p>Through the completion of the project, much progress has been made toimprove the safety and security of multilingual software. We believemany of our techniques are applicable to the settings of many otherwidely used programming languages such as Python.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/20/2013<br>      Modified by: Gang&nbsp;Tan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ From online shopping to electronic voting, software systems havebecome an intrinsic part of the modern society over the past fewdecades. However, software systems are not secure.  The media is fullof reports of the catastrophic impact of software failures.  One reason for the frequent failures is that modern software systemsare complex by all measures. One important aspect that contributes tothe complexity is that a software system is often multilingual; thatis, they are developed in multiple programming languages. Languagesdiffer in their security assumptions and guarantees. Consequently,even if single components are secure in some language model and withrespect to some security policy, there is usually no uniform securityguarantee on a whole multilingual software system.  The goal of the project is to design and implement low-overheadtechniques that provide verifiable security when safe languages suchas Java interoperate with native code through the use of ForeignFunction Interfaces (FFIs).  Native code is developed in low-levellanguages such as C, C++, or even assembly languages and isnotoriously unsafe.  The two core research questions of the projects are: (1) How toimprove safety and security of native libraries when they are used bysafe languages (e.g., Java), while not sacrificing too muchperformance? (2) How to prove formally that the end system satisfiesdesired security properties?  For the first question, we have designed a complete framework thatisolates faults of native libraries and provides safety and securityin the context of Java, one of the most popular programming languages.Leveraging a technique called software-based fault isolation, theframework puts native code in a separate code sandbox and allows theinteraction between native and Java code only through a carefullydesigned pathway.  Two different implementations have been built todemonstrate the approach's efficiency and portability.  In oneimplementation, the security framework is integrated into a JavaVirtual Machine (JVM). In the second implementation, the framework isbuilt outside of the JVM and takes advantage of JVM-independentinterfaces. The second implementation provides JVM portability, at theexpense of some performance degradation. Evaluation of our frameworkdemonstrates that it incurs modest runtime overhead whilesignificantly enhancing the security of Java applications.  For the second question, we have applied formal methods to verifyingthe security of our techniques. For that, we have built formal modelsof native code (in particular, we have built a model of Intel's x86code) and a formal model of the Java Native Interface, the standardinterface between Java and native code. Based on those models, we havebuilt a formally verified checker, called RockSalt, that examinesnative code to check whether it obeys the sandboxing policy ofsoftware-based fault isolation, which is used in Google's NativeClient to ensure Chrome extensions developed in native code will notdamage the browser's integrity. The RockSalt checker is smaller,faster, and stronger than Google's original checker. The RockSaltchecker comes with a fully mechanized correctness proof encoded in aninteractive theorem prover.  Through the completion of the project, much progress has been made toimprove the safety and security of multilingual software. We believemany of our techniques are applicable to the settings of many otherwidely used programming languages such as Python.             Last Modified: 10/20/2013       Submitted by: Gang Tan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
