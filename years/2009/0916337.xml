<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Monitoring for Error Detection in Today's High Throughput Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>259000.00</AwardTotalIntnAmount>
<AwardAmount>275000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>CSR: Small: Monitoring for Error Detection in Today?s High Throughput Applications&lt;br/&gt;&lt;br/&gt;Abstract: Much of our critical infrastructure is formed by distributed systems with real-time requirements. Downtime of a system providing critical services in power systems, air traffic control, banking, and railways signaling could be catastrophic. The errors may come from individual software components, interactions between multiple components, or misconfiguration of these components. It is therefore imperative to build low latency detection systems that can subsequently trigger the diagnosis and recovery phases leading to systems that are robust to failures. A powerful approach for error detection is the stateful approach, in which the error detection system builds up state related to the application by aggregating multiple messages. The rules are then based on the state, thus on aggregated information rather than on instantaneous information. Though the merits of stateful detection seem to be well accepted, it is difficult to scale stateful detection with an increasing number of application components or increasing data rate. This is due to the increased processing load of tracking application state and rule matching based on the state. In this project, we address this issue through designing a runtime monitoring system focused on high throughput distributed applications. Our solution is based on intelligent sampling, probabilistic reasoning on the application state, and opportunistic monitoring of the heavy-duty rules. A successful solution will allow reliable operation of high bandwidth distributed applications and those with a large number of consumers. We will also achieve broader impact through an innovative service learning program at Purdue called EPICS and a new course. &lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/10/2009</MinAmdLetterDate>
<MaxAmdLetterDate>05/12/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0916337</AwardID>
<Investigator>
<FirstName>Saurabh</FirstName>
<LastName>Bagchi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Saurabh Bagchi</PI_FULL_NAME>
<EmailAddress>sbagchi@purdue.edu</EmailAddress>
<PI_PHON>7654941741</PI_PHON>
<NSF_ID>000309372</NSF_ID>
<StartDate>08/10/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[Young Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~259000</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our society increasingly depends on large-scale distributed applications for critical operations. They range from the air traffic control system, online financial processing applications, prediction of impending natural disasters, to running our educational computer labs with little to no downtime. To reduce the downtime of this gamut of applications, it is desirable to automatically pinpoint what the root cause of a failure is, and, whenever possible, to predict impending failures based on observed symptoms in the system. The first objective will let either an automated system or a human being quickly diagnose the problem and initiate a mitigation action. The second objective will prevent the end user (i.e., us) from ever being affected by the fault. The faults can be diverse in their origin &ndash; hardware problems (e.g., a network fiber being disconnected), software problems (e.g., an inability of the software to handle a large number of concurrent users), or configuration problems (e.g., the software is configured for only high speed links, while in practice it also experiences slow links). &nbsp;Therefore, the problem localization and prediction must take into account such diversity. The granularity with which the localization can be done depends &ndash; it may be to a single compute node (in a large-scale parallel application), to an executing process, or to a region of code.</p> <p>In this project, we designed mechanisms to perform problem localization and failure prediction by monitoring and analyzing a wide variety of metrics from all layers of the system stack. Examples of metrics are CPU utilization (from the system layer), frequency of garbage collection (from the middleware layer), and number of active threads (from the application layer). The intuition is that when the system is performing normally, the metrics will exhibit some pattern, either individually or in groups. An example of the former is that the rate of I/O will stay between certain thresholds; an example of the second kind is that the rate of I/O is correlated with the rate of user requests. Our project&rsquo;s novel contribution was to develop techniques to automatically &ldquo;learn&rdquo; legitimate patterns among groups of metrics (the second kind). Then it would monitor the patterns during the execution of the system and flag any significant deviation from the learned patterns. Typically there would be multiple learned patterns because a system can behave in one of several different manners depending on the kind of workload executed on the system. From the deviation, our system would identify, in a probabilistic manner, what was the root cause of the problem. Our system, called Orion, uses the above steps to find the abnormal window of time, abnormal metrics and abnormal code regions where a fault is manifested.</p> <p>We evaluated Orion on two classes of distributed applications:</p> <ol> <li><strong>Commercial applications</strong>: (i) client-server multi-tier applications in which the presentation, the application processing, and the data management are logically separate processes. Example of these architectures are the Java Enterprise Edition (Java EE) standard; (ii) MapReduce programming model for processing large data sets. MapReduce is typically used to do distributed computing on clusters of computers.</li> <li><strong>High Performance Computing (HPC) applications</strong>: scientific and engineering applications that run in large clusters of machines with parallel tasks that communicate with the message passing interface (MPI).</li> </ol> <p><strong>Intellectual Merit</strong></p> <p>Intellectual merit in the project derived from the machine learning-based algorithms used to correlate multiple metrics to determine normal and anomalous patterns, designing the algorithms to be scalable to a large number of machines and to large data sets, and making the algorithms operate i...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Our society increasingly depends on large-scale distributed applications for critical operations. They range from the air traffic control system, online financial processing applications, prediction of impending natural disasters, to running our educational computer labs with little to no downtime. To reduce the downtime of this gamut of applications, it is desirable to automatically pinpoint what the root cause of a failure is, and, whenever possible, to predict impending failures based on observed symptoms in the system. The first objective will let either an automated system or a human being quickly diagnose the problem and initiate a mitigation action. The second objective will prevent the end user (i.e., us) from ever being affected by the fault. The faults can be diverse in their origin &ndash; hardware problems (e.g., a network fiber being disconnected), software problems (e.g., an inability of the software to handle a large number of concurrent users), or configuration problems (e.g., the software is configured for only high speed links, while in practice it also experiences slow links).  Therefore, the problem localization and prediction must take into account such diversity. The granularity with which the localization can be done depends &ndash; it may be to a single compute node (in a large-scale parallel application), to an executing process, or to a region of code.  In this project, we designed mechanisms to perform problem localization and failure prediction by monitoring and analyzing a wide variety of metrics from all layers of the system stack. Examples of metrics are CPU utilization (from the system layer), frequency of garbage collection (from the middleware layer), and number of active threads (from the application layer). The intuition is that when the system is performing normally, the metrics will exhibit some pattern, either individually or in groups. An example of the former is that the rate of I/O will stay between certain thresholds; an example of the second kind is that the rate of I/O is correlated with the rate of user requests. Our projectÆs novel contribution was to develop techniques to automatically "learn" legitimate patterns among groups of metrics (the second kind). Then it would monitor the patterns during the execution of the system and flag any significant deviation from the learned patterns. Typically there would be multiple learned patterns because a system can behave in one of several different manners depending on the kind of workload executed on the system. From the deviation, our system would identify, in a probabilistic manner, what was the root cause of the problem. Our system, called Orion, uses the above steps to find the abnormal window of time, abnormal metrics and abnormal code regions where a fault is manifested.  We evaluated Orion on two classes of distributed applications:  Commercial applications: (i) client-server multi-tier applications in which the presentation, the application processing, and the data management are logically separate processes. Example of these architectures are the Java Enterprise Edition (Java EE) standard; (ii) MapReduce programming model for processing large data sets. MapReduce is typically used to do distributed computing on clusters of computers. High Performance Computing (HPC) applications: scientific and engineering applications that run in large clusters of machines with parallel tasks that communicate with the message passing interface (MPI).   Intellectual Merit  Intellectual merit in the project derived from the machine learning-based algorithms used to correlate multiple metrics to determine normal and anomalous patterns, designing the algorithms to be scalable to a large number of machines and to large data sets, and making the algorithms operate in near real-time so that end-user visible failures can be completely avoided, or their duration reduced.  For the parallel computing domain, we introduced a way of modeling process behavi...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
