<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Materialized Views over Heterogeneous Structured Data Sources in a Distributed Event Stream Processing Environment</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>367952.00</AwardTotalIntnAmount>
<AwardAmount>390086</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title:  CSR: Small: Materialized Views over Heterogeneous Structured Data Sources in a Distributed Event Stream Processing Environment&lt;br/&gt;Investigator:  Suzanne W. Dietrich&lt;br/&gt;Institution:  Arizona State University&lt;br/&gt;Proposal #: 0915325&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Project Abstract: Software systems are becoming increasingly complex, requiring the coordination of heterogeneous structured data sources in a loosely-coupled distributed environment with support for handling events and streaming data. Some sample systems include homeland security, criminal justice, supply chain management, health care, and consumer monitoring. Such software systems involve numerous query expressions for detecting events, monitoring conditions, handling streams, and querying data. This research analyzes the dependencies among these query expressions over structured data sources defined in different language components over relational or data-centric XML to detect common subexpressions as candidates for materialized views. When views are materialized, the results of the computed view are stored so that subsequent references efficiently access the materialized view, avoiding the cost of recomputation. This performance improvement is even more critical with distributed data sources. However, the materialized view must be updated if any data source that it depends on has changed. To avoid costly recomputation, an incremental view maintenance algorithm uses the change to incrementally compute updates to the materialized view. A unique aspect of this research is the efficient maintenance of the materialized views while respecting the native format of the underlying loosely-coupled, heterogeneous data sources. Using state-of-the-art commercial and open-source components, a prototype environment that supports a distributed event stream processing framework provides a research and evaluation platform for the exploration of the identification, specification, and incremental evaluation of materialized views over heterogeneous, distributed structured data. This environment also provides a shared infrastructure for undergraduate research and curriculum enhancement.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/01/2009</MinAmdLetterDate>
<MaxAmdLetterDate>08/30/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0915325</AwardID>
<Investigator>
<FirstName>Suzanne</FirstName>
<LastName>Dietrich</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Suzanne W Dietrich</PI_FULL_NAME>
<EmailAddress>dietrich@asu.edu</EmailAddress>
<PI_PHON>6025435628</PI_PHON>
<NSF_ID>000138692</NSF_ID>
<StartDate>08/01/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Arizona State University</Name>
<CityName>TEMPE</CityName>
<ZipCode>852816011</ZipCode>
<PhoneNumber>4809655479</PhoneNumber>
<StreetAddress>ORSPA</StreetAddress>
<StreetAddress2><![CDATA[660 South Mill Avenue, Suite 310]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<StateCode>AZ</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AZ09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>943360412</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>ARIZONA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>806345658</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Arizona State University West Campus]]></Name>
<CityName>Phoenix</CityName>
<StateCode>AZ</StateCode>
<ZipCode>850691251</ZipCode>
<StreetAddress><![CDATA[4701 W. Thunderbird Road]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AZ09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~367952</FUND_OBLG>
<FUND_OBLG>2011~22134</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software systems are large-scale and complex, requiring data from various resources over a distributed network. Some sample systems that exhibit this behavior include criminal justice and health care. The data across the various resources are stored in different databases and may be in&nbsp;heterogeneous&nbsp;formats. Some data are in relational databases or in structured XML documents. Other data may be events or streams from sources, such as traffic cameras or sensors. The overall goal of this project was to examine how to improve the efficiency of such a system by storing the results of some computations so that subsequent references can access the stored results instead of recomputing them, which can be expensive in a distributed environment. The stored results are called materialized views.<span> </span></p> <p>There are several challenges in the identification of which computations to materialize, especially when the data are heterogeneous and loosely-coupled. One way to think about loose coupling is that the data sources do not directly depend on each other and are owned by different agencies that are sharing the data. Thus, the system is integrating these resources, and for this research, the goal was to keep these loosely-coupled, heterogeneous data sources in their original format. To meet these challenges, this research developed several software components and algorithms. First, a repository of the metadata about the heterogeneous data sources and questions asked over these sources was created. Then an algorithm was developed to detect common subexpressions across these questions that may involve different types of data. These common subexpressions are candidates for materialized views, which could improve the performance of the distributed system by reusing stored results. &nbsp;However, these materialized results must be updated if any data source on which it depends has changed. Therefore, a view maintenance algorithm was developed to update the view incrementally based on changes from the potentially hybrid data sources defining the view.<span> </span></p> <p><span>&nbsp;</span>Other contributions of the research included the development of complex examples used to evaluate the research. A Criminal Justice enterprise was developed with various scenarios illustrating the use of the prototype distributed event stream processing environment. In addition, the data sources of a well-known database performance benchmark, TPC-H, were modified to have both relational and XML data sources. The queries were redesigned in the LINQ language, which was used to define materialized views, and measurements were taken to evaluate the performance of the system.<span> </span></p> <p>Another key outcome of this research is its impact on computer science education. The technology employed in the research was integrated into classes at the PI&rsquo;s university and several papers were published and presented at national and regional computer science education conferences. In particular, one paper addressed how to integrate database performance benchmarks into the curriculum using TPC-H as an example for assignments and for learning from its complicated suite of 22 SQL queries.&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/26/2014<br>      Modified by: Suzanne&nbsp;W&nbsp;Dietrich</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software systems are large-scale and complex, requiring data from various resources over a distributed network. Some sample systems that exhibit this behavior include criminal justice and health care. The data across the various resources are stored in different databases and may be in heterogeneous formats. Some data are in relational databases or in structured XML documents. Other data may be events or streams from sources, such as traffic cameras or sensors. The overall goal of this project was to examine how to improve the efficiency of such a system by storing the results of some computations so that subsequent references can access the stored results instead of recomputing them, which can be expensive in a distributed environment. The stored results are called materialized views.   There are several challenges in the identification of which computations to materialize, especially when the data are heterogeneous and loosely-coupled. One way to think about loose coupling is that the data sources do not directly depend on each other and are owned by different agencies that are sharing the data. Thus, the system is integrating these resources, and for this research, the goal was to keep these loosely-coupled, heterogeneous data sources in their original format. To meet these challenges, this research developed several software components and algorithms. First, a repository of the metadata about the heterogeneous data sources and questions asked over these sources was created. Then an algorithm was developed to detect common subexpressions across these questions that may involve different types of data. These common subexpressions are candidates for materialized views, which could improve the performance of the distributed system by reusing stored results.  However, these materialized results must be updated if any data source on which it depends has changed. Therefore, a view maintenance algorithm was developed to update the view incrementally based on changes from the potentially hybrid data sources defining the view.    Other contributions of the research included the development of complex examples used to evaluate the research. A Criminal Justice enterprise was developed with various scenarios illustrating the use of the prototype distributed event stream processing environment. In addition, the data sources of a well-known database performance benchmark, TPC-H, were modified to have both relational and XML data sources. The queries were redesigned in the LINQ language, which was used to define materialized views, and measurements were taken to evaluate the performance of the system.   Another key outcome of this research is its impact on computer science education. The technology employed in the research was integrated into classes at the PIÆs university and several papers were published and presented at national and regional computer science education conferences. In particular, one paper addressed how to integrate database performance benchmarks into the curriculum using TPC-H as an example for assignments and for learning from its complicated suite of 22 SQL queries.           Last Modified: 11/26/2014       Submitted by: Suzanne W Dietrich]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
