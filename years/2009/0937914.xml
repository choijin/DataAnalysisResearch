<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: Scalable Data Management Using Metadata and Provenance</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2009</AwardEffectiveDate>
<AwardExpirationDate>09/30/2012</AwardExpirationDate>
<AwardTotalIntnAmount>351643.00</AwardTotalIntnAmount>
<AwardAmount>351643</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Abstract &lt;br/&gt;This project is developing new techniques for identifying and managing files, replacing tree-structured file names with content- and metadata- based search access. By leveraging existing work in search and recognizing the explosion in the volume of data stored, this project enables users to find and access their data in natural and intuitive ways, based on the files' contents, tags the user has assigned, system metadata, and provenance (information about the file's origins). This research targets high-end computing (HEC) users, who manage billions of files generated by measurement devices, experimentation, or scientific workflows. The techniques and system developed are also applicable to general-purpose computing. &lt;br/&gt;&lt;br/&gt;Realizing this goal requires advances in several areas. First, the project is designing and developing fast, scalable mechanisms to gather, maintain and index the large volume of metadata and provenance that HEC applications and users generate. This project is also exploring search algorithms that operate on graph structures, enabling users to find files "near" their current workspace. To enable users to access this functionality, the project is developing a new "language" that facilitates the kind of searches that users need. &lt;br/&gt; &lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/16/2009</MinAmdLetterDate>
<MaxAmdLetterDate>08/26/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0937914</AwardID>
<Investigator>
<FirstName>Margo</FirstName>
<LastName>Seltzer</LastName>
<PI_MID_INIT>I</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Margo I Seltzer</PI_FULL_NAME>
<EmailAddress>margo@eecs.harvard.edu</EmailAddress>
<PI_PHON>6174965663</PI_PHON>
<NSF_ID>000146422</NSF_ID>
<StartDate>09/16/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Harvard University</Name>
<CityName>Cambridge</CityName>
<ZipCode>021385369</ZipCode>
<PhoneNumber>6174955501</PhoneNumber>
<StreetAddress>1033 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[5th Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>082359691</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PRESIDENT AND FELLOWS OF HARVARD COLLEGE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001963263</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Harvard University]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021385369</ZipCode>
<StreetAddress><![CDATA[1033 MASSACHUSETTS AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7952</Code>
<Text>HECURA</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~116337</FUND_OBLG>
<FUND_OBLG>2010~235306</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project addressed the problem of managing data collections containing billions of files and petabytes of data. Analysis of scientific workloads revealed that in such collections, the names of files frequently contain important <em>meta-data,&nbsp;</em>data describing how the file was produced. When users access such objects, they frequently search through large collections, selecting objects with particular values for these meta-data. By developing computational systems that automatically generate and maintain <em>provenance</em>, the description of how data are derived, it is possible to provide better search and navigational tools to users.</p> <p>Workload analysis also revealed that data in scientific data sets exhibit two distinct phases: <em>creation</em>, during which reading is unnecessary, and <em>use</em>, during which udpates are unnecessary. The implications of this are that conventional file system interfaces and implementations designed around concurrent reading and writing are not well matched to this domain. Instead, a prototype implementation exhibits an API that separates these two phases, allowing for improved storage and retrieval efficiency.</p> <p>The project team developed several other prototype systems, each of which transparently collects provenance. For example, the provenance aware storage system (PASS) collects provenance in file systems, the electronic lab notebook (Burrito) collects provenance from the graphical user interface as well, and any program can capture provenance by integrating the Core Provenance Library with the application. In each case, the system maintains a simple representation of the provenance and allows for the creation of references between the systems, so a user could, for example, trace an object's history from arrival of a data file in the user's email box, through the execution of a program that used that data file, through graphing software that produced an image of a computed result. By indexing this provenance data, systems then allow users to find files by issuing queries. For example, "Find me the email message that had the data I usedto generate this image," or "Where is the output I created based on the data in this message?"</p> <p><br />Provenance not only documents the history of an object, providing new ways to access data, but also exposes valuable information about the object itself. The project team developed techniques for mining provenance to extract attributes of a file, such as whether the file contains program source code or shared data definitions.</p> <p>Provenance data is inherently graph-structured; each object has a set of objects on which it depends and potentially another set of objects that depend upon it. These dependencies, which form the edges between vertices in a graph, may represent different relationships-- for example, in a scientific environment, one edge might indicate that a file provided data as input to a program while another edge might indicate that one object is a copy of another object. In social networking, some edges indicate friendship; others indicate membership in a group. &nbsp;Managing graph-structured data efficiently and securely are two key challenages also undertaken in this work. &nbsp;The SybilSafety approach, developed to protect information in graphs, accepts a security policy expressed as a set of constraints on what information can be made public and what information should be hidden and then uses those constraints to produce a collection of graphs, all of which reveal public information from the graph, but the set of which provide sufficient ambiguity to hide the data that should not be revealed. This approach allows for audits by a third party, confirming that the released data satisfy the security constraints. This is the first general and practical solution to provable guaranteed privacy enforcement on graph-structured data.</p> <p><br />Gra...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project addressed the problem of managing data collections containing billions of files and petabytes of data. Analysis of scientific workloads revealed that in such collections, the names of files frequently contain important meta-data, data describing how the file was produced. When users access such objects, they frequently search through large collections, selecting objects with particular values for these meta-data. By developing computational systems that automatically generate and maintain provenance, the description of how data are derived, it is possible to provide better search and navigational tools to users.  Workload analysis also revealed that data in scientific data sets exhibit two distinct phases: creation, during which reading is unnecessary, and use, during which udpates are unnecessary. The implications of this are that conventional file system interfaces and implementations designed around concurrent reading and writing are not well matched to this domain. Instead, a prototype implementation exhibits an API that separates these two phases, allowing for improved storage and retrieval efficiency.  The project team developed several other prototype systems, each of which transparently collects provenance. For example, the provenance aware storage system (PASS) collects provenance in file systems, the electronic lab notebook (Burrito) collects provenance from the graphical user interface as well, and any program can capture provenance by integrating the Core Provenance Library with the application. In each case, the system maintains a simple representation of the provenance and allows for the creation of references between the systems, so a user could, for example, trace an object's history from arrival of a data file in the user's email box, through the execution of a program that used that data file, through graphing software that produced an image of a computed result. By indexing this provenance data, systems then allow users to find files by issuing queries. For example, "Find me the email message that had the data I usedto generate this image," or "Where is the output I created based on the data in this message?"   Provenance not only documents the history of an object, providing new ways to access data, but also exposes valuable information about the object itself. The project team developed techniques for mining provenance to extract attributes of a file, such as whether the file contains program source code or shared data definitions.  Provenance data is inherently graph-structured; each object has a set of objects on which it depends and potentially another set of objects that depend upon it. These dependencies, which form the edges between vertices in a graph, may represent different relationships-- for example, in a scientific environment, one edge might indicate that a file provided data as input to a program while another edge might indicate that one object is a copy of another object. In social networking, some edges indicate friendship; others indicate membership in a group.  Managing graph-structured data efficiently and securely are two key challenages also undertaken in this work.  The SybilSafety approach, developed to protect information in graphs, accepts a security policy expressed as a set of constraints on what information can be made public and what information should be hidden and then uses those constraints to produce a collection of graphs, all of which reveal public information from the graph, but the set of which provide sufficient ambiguity to hide the data that should not be revealed. This approach allows for audits by a third party, confirming that the released data satisfy the security constraints. This is the first general and practical solution to provable guaranteed privacy enforcement on graph-structured data.   Graph-structured data  is not well-served by conventional datamanagement approaches, such as relational databases.  Although first generation graph database...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
