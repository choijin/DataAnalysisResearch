<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA-SEL: Blended Static/Dynamic Analyses for Performance Understanding and Improved Security of Framework-intensive Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/10/2009</AwardEffectiveDate>
<AwardExpirationDate>06/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>184715.00</AwardTotalIntnAmount>
<AwardAmount>202715</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>CCF-0811518&lt;br/&gt;Blended Static/Dynamic Analysis for Performance Understanding and &lt;br/&gt;Improved Security of Framework-intensive Applications&lt;br/&gt;Barbara G. Ryder&lt;br/&gt;&lt;br/&gt;Web applications built on numerous layers of frameworks are in wide usage by the commercial and research communities, and present a challenge to existing analysis techniques.  Purely static analyses suffer problems of insufficient scalability and/or insufficient precision for answering behavioral questions.  Purely dynamic analyses introduce too much overhead in production systems, or are too limited in the information gathered.  Further, while existing dynamic performance analyses focus on control flow, the main purpose of these web applications is to manipulate data.  This proposal addresses these weaknesses by blending static and dynamic analyses in new ways that avoid these problems and support tools for framework-intensive applications.  The intellectual challenge is to advance the state-of-the-art in program analysis by developing analyses of practical cost and of sufficient precision to scale up to industrial-strength framework-intensive software.&lt;br/&gt;&lt;br/&gt;The research will address two specific sub goals: (i) the design of and experimentation with blended analyses that identify performance problems in framework-based applications, (e.g., excessive use of temporary data structures), and (ii) the development of a blended analysis to refine current access control analyses for framework-intensive software.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>10/21/2009</MinAmdLetterDate>
<MaxAmdLetterDate>08/14/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964870</AwardID>
<Investigator>
<FirstName>Barbara</FirstName>
<LastName>Ryder</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Barbara G Ryder</PI_FULL_NAME>
<EmailAddress>ryder@cs.vt.edu</EmailAddress>
<PI_PHON>5402318452</PI_PHON>
<NSF_ID>000192229</NSF_ID>
<StartDate>10/21/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Virginia Polytechnic Institute and State University</Name>
<CityName>BLACKSBURG</CityName>
<ZipCode>240610001</ZipCode>
<PhoneNumber>5402315281</PhoneNumber>
<StreetAddress>Sponsored Programs 0170</StreetAddress>
<StreetAddress2><![CDATA[300 Turner Street NW, Suite 4200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003137015</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>VIRGINIA POLYTECHNIC INSTITUTE AND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003137015</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Virginia Polytechnic Institute and State University]]></Name>
<CityName>BLACKSBURG</CityName>
<StateCode>VA</StateCode>
<ZipCode>240610001</ZipCode>
<StreetAddress><![CDATA[Sponsored Programs 0170]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~184715</FUND_OBLG>
<FUND_OBLG>2009~15500</FUND_OBLG>
<FUND_OBLG>2013~2500</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Program anallysis allows a computer scientist to look at code or data from a program execution and deduce facts about program behavior. Often the motivation is to explain bad program performance or to validate that the computation is secure from tampering by malicious software. &nbsp;Sometimes, software developers use program analysis to help them understand codes that they have to enhance but they did not write.</p> <p>This research produced new analysis approaches to diagnose performance problems in enterprise commercial software -- in our collaboations with IBM, and led to new analyses to better support tools for program understanding and exploration by software developers. &nbsp;The programs handled were written within the popular and useful object-oriented and scripting language paradigms. &nbsp;Ideas presented were tested with real-world code from websites and standard benchmark suites.</p> <p>The key challenges in this work were the scalability and precision of these analyses, necessary for use in tools to help software developers. &nbsp;Although only research prototypes were built during the funded period (not industrial-strength tools), &nbsp;the new analyses were tested against realistic programs and shown to be promising. In addition to the PI, this research involved 1 graduate student who is finishing his Ph.D. at Virginia Tech in Computer Science in fall 2015, and 2 undergraduate students, one of whom will attend Carneige Mellon for her Ph.D. studies. &nbsp;There was 1 poster presented &nbsp;(SPLASH 2014), 3 highly competitive conference papers (ISSTA 2013, ECOOP 2014, ECOOP 2015) and a journal paper in SPE (2015) &nbsp;-- all the result of the research supported by the totality of this NSF grant. &nbsp;</p><br> <p>            Last Modified: 06/21/2015<br>      Modified by: Barbara&nbsp;G&nbsp;Ryder</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Program anallysis allows a computer scientist to look at code or data from a program execution and deduce facts about program behavior. Often the motivation is to explain bad program performance or to validate that the computation is secure from tampering by malicious software.  Sometimes, software developers use program analysis to help them understand codes that they have to enhance but they did not write.  This research produced new analysis approaches to diagnose performance problems in enterprise commercial software -- in our collaboations with IBM, and led to new analyses to better support tools for program understanding and exploration by software developers.  The programs handled were written within the popular and useful object-oriented and scripting language paradigms.  Ideas presented were tested with real-world code from websites and standard benchmark suites.  The key challenges in this work were the scalability and precision of these analyses, necessary for use in tools to help software developers.  Although only research prototypes were built during the funded period (not industrial-strength tools),  the new analyses were tested against realistic programs and shown to be promising. In addition to the PI, this research involved 1 graduate student who is finishing his Ph.D. at Virginia Tech in Computer Science in fall 2015, and 2 undergraduate students, one of whom will attend Carneige Mellon for her Ph.D. studies.  There was 1 poster presented  (SPLASH 2014), 3 highly competitive conference papers (ISSTA 2013, ECOOP 2014, ECOOP 2015) and a journal paper in SPE (2015)  -- all the result of the research supported by the totality of this NSF grant.         Last Modified: 06/21/2015       Submitted by: Barbara G Ryder]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
