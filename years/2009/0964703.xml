<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium:  How Do Static Analysis Tools Affect End-User Quality</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2010</AwardEffectiveDate>
<AwardExpirationDate>05/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>700118.00</AwardTotalIntnAmount>
<AwardAmount>722118</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The perceived quality of a software product depends strongly on field failures viz., defects experienced by users after the software is released to the field. Software managers work to constantly improve quality control processes, seeking to reduce the number of field failures. Static analysis is a powerful and elegant technique that finds defects without running code, by reasoning about what the program does when executed. It has been incubating in academia and is now emerging in industry. This research asks this question: How can the performance and practical use of static analysis tools be improved ? The goal of the research is to find ways to improve the performance of static analysis tools, as well as the quality-control processes that use them. This will help commercial and open-source organizations make more effective use static analysis tools, and substantially reduce field failures.&lt;br/&gt;&lt;br/&gt;Using historical  data from several  open-source and commercial exemplars, the research will retrospectively evaluate the association of field failures with static analysis warnings. The research will evaluate the impact of factors such as experience of the developer, the complexity of the code, and the type of static analysis warning on failure properties such criticality, and defect latency (time until a defect becomes a failure). A wide variety of projects will be studied, including both commercial and open-source. The resulting data will be analyzed using statistical modeling to determine the factors that influence the success of static analysis tools in preventing field failures. Some field failures may have no associated static analysis warnings. This research will identify and characterize these failures, paving the way for new static analysis research. An integrated educational  initiative in  this proposal  is the  training of undergraduates  by  using bug  fixes  as pedagogical  material; undergraduates will also help annotate the corpus of field failures with information relevant to our analysis. An important byproduct of this research, is a large, diverse, annotated corpus of field failures of use to other educators and researchers in empirical software engineering, testing, and static analysis.</AbstractNarration>
<MinAmdLetterDate>05/28/2010</MinAmdLetterDate>
<MaxAmdLetterDate>05/10/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964703</AwardID>
<Investigator>
<FirstName>Premkumar</FirstName>
<LastName>Devanbu</LastName>
<PI_MID_INIT>T</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Premkumar T Devanbu</PI_FULL_NAME>
<EmailAddress>devanbu@cs.ucdavis.edu</EmailAddress>
<PI_PHON>5307527324</PI_PHON>
<NSF_ID>000195677</NSF_ID>
<StartDate>05/28/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Zhendong</FirstName>
<LastName>Su</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zhendong Su</PI_FULL_NAME>
<EmailAddress>su@cs.ucdavis.edu</EmailAddress>
<PI_PHON>5307545376</PI_PHON>
<NSF_ID>000336300</NSF_ID>
<StartDate>05/28/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Vladimir</FirstName>
<LastName>Filkov</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Vladimir Filkov</PI_FULL_NAME>
<EmailAddress>filkov@cs.ucdavis.edu</EmailAddress>
<PI_PHON>5307528393</PI_PHON>
<NSF_ID>000217276</NSF_ID>
<StartDate>05/28/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Earl</FirstName>
<LastName>Barr</LastName>
<PI_MID_INIT>T</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Earl T Barr</PI_FULL_NAME>
<EmailAddress>e.barr@ucl.ac.uk</EmailAddress>
<PI_PHON>5307547000</PI_PHON>
<NSF_ID>000541910</NSF_ID>
<StartDate>05/28/2010</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Davis</Name>
<CityName>Davis</CityName>
<ZipCode>956186134</ZipCode>
<PhoneNumber>5307547700</PhoneNumber>
<StreetAddress>OR/Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1850 Research Park Dr., Ste 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>047120084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, DAVIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Davis]]></Name>
<CityName>Davis</CityName>
<StateCode>CA</StateCode>
<ZipCode>956186134</ZipCode>
<StreetAddress><![CDATA[OR/Sponsored Programs]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~700118</FUND_OBLG>
<FUND_OBLG>2011~12000</FUND_OBLG>
<FUND_OBLG>2013~10000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software underlies much of modern life; software is created by software engineers, who make mistakes from time to time, like anyone else. These errors (bugs) must be found and fixed. In our research, we studied two popular ways to find defects: 1) find defects using programs ("bug finders") that are actually designed to find bugs in other programs. Bug finders are not perfect: they produce warnings of suspcious regions of code. &nbsp;2) since defects often follow patterns, we use statistical machine learning methods to try and learn these patterns, and thus predict where they may occur again. Both these approaches require human effort to inspect the code that is indicated as risky or suspicious. In this research, we systematically evaluated both these methods using historical data about where defects occurred, and were repaired: Could these methods find these historical defects, had they been used? <br /><br />We found that a) Both methods are effective b) statistical methods complement the automatic bug finders, but not the other way around and c) we have created a large dataset that we released for other scientists who wish to study this area.&nbsp;<br /><br />Our work as a whole, helps software engineers and software companies make best use of quality-control methods. Some of our work on defect prediction has been cited by engineers as Google in their own efforts. &nbsp;</p><br> <p>            Last Modified: 09/05/2015<br>      Modified by: Premkumar&nbsp;T&nbsp;Devanbu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software underlies much of modern life; software is created by software engineers, who make mistakes from time to time, like anyone else. These errors (bugs) must be found and fixed. In our research, we studied two popular ways to find defects: 1) find defects using programs ("bug finders") that are actually designed to find bugs in other programs. Bug finders are not perfect: they produce warnings of suspcious regions of code.  2) since defects often follow patterns, we use statistical machine learning methods to try and learn these patterns, and thus predict where they may occur again. Both these approaches require human effort to inspect the code that is indicated as risky or suspicious. In this research, we systematically evaluated both these methods using historical data about where defects occurred, and were repaired: Could these methods find these historical defects, had they been used?   We found that a) Both methods are effective b) statistical methods complement the automatic bug finders, but not the other way around and c) we have created a large dataset that we released for other scientists who wish to study this area.   Our work as a whole, helps software engineers and software companies make best use of quality-control methods. Some of our work on defect prediction has been cited by engineers as Google in their own efforts.         Last Modified: 09/05/2015       Submitted by: Premkumar T Devanbu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
