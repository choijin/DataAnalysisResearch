<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Medium:  Algorithms Based on Algebraic and Combinatorial Methods</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/01/2010</AwardEffectiveDate>
<AwardExpirationDate>04/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Balasubramanian Kalyanasundaram</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Many advanced combinatorial problems have algebraic aspects. Even though the problem formulation can be entirely discrete, significant insight and efficient algorithms might be obtained by applying sophisticated algebraic methods. It is not uncommon that combinatorial problems have simple and elegant formulations, yet they are computationally hard, meaning that the obvious algorithms are useless for their solutions except for very small instances. It can also happen that even though traditional algorithmic approaches are successful, algebraic methods are still more efficient and provide additional insights into a combinatorial problem.&lt;br/&gt;&lt;br/&gt;The graph isomorphism problem exemplifies a combinatorial problem where algebraic methods seem to be required for efficient solutions. Interesting for algebraic and combinatorial approaches is also the monomer dimer problem, the counting of matchings in grid graphs, which is of much importance in statistical physics. This proposal studies algorithms based on the scaling method. A particular goal is doing matrix scaling efficiently in parallel, as a tool for approximating the permanent. &lt;br/&gt;&lt;br/&gt;This project will look at the computation of all coefficients of graph polynomials for trees and graphs of bounded tree-width. The goal is to compute all coefficients together almost as fast as a single coefficient.&lt;br/&gt;&lt;br/&gt;The other main focus of this project is the exploration of variations of the recent faster integer multiplication algorithm and the study of its application to polynomial multiplications and Fourier transforms. One goal is to develop a new algorithm, based on a more discrete method, improving the asymptotic complexity as well as leading to a more practical algorithm for computing products of very long integers.&lt;br/&gt;&lt;br/&gt;Integer multiplication is such a fundamental arithmetic task that understanding and improving it is an obvious basic intellectual challenge. Such theoretical goals are foremost in this project. But there could be an impact on the search for Mersenne primes as well as on general purpose computations with high degree polynomials. Other aspects of this research involve topics with applications in Physics and Chemistry.</AbstractNarration>
<MinAmdLetterDate>05/04/2010</MinAmdLetterDate>
<MaxAmdLetterDate>05/04/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0964655</AwardID>
<Investigator>
<FirstName>Martin</FirstName>
<LastName>Furer</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Martin P Furer</PI_FULL_NAME>
<EmailAddress>furer@cse.psu.edu</EmailAddress>
<PI_PHON>8148631857</PI_PHON>
<NSF_ID>000428276</NSF_ID>
<StartDate>05/04/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Pennsylvania State Univ University Park</Name>
<CityName>University Park</CityName>
<ZipCode>168021503</ZipCode>
<PhoneNumber>8148651372</PhoneNumber>
<StreetAddress>201 Old Main</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003403953</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PENNSYLVANIA STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003403953</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Pennsylvania State Univ University Park]]></Name>
<CityName>University Park</CityName>
<StateCode>PA</StateCode>
<ZipCode>168021503</ZipCode>
<StreetAddress><![CDATA[201 Old Main]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>For many discrete optimization and decision problems, the most natural and obvious algorithms are not good enough. They require too much time, and therefore are only useful for small problem instances. The development of efficient algorithms often requires an in depth study of the mathematical structure of a given problem. For discrete problems, dealing with integers or finite structures like graphs, combinatorics is the main source of tools for such an analysis. But quite often, less obvious algebraic methods provide a path to efficient solutions. Sometimes, no combinatorial method is known to achieve the same efficiency, sometimes the algebraic method is crucial for the discovery process, but can later be replaced by a combinatorial solution.</p> <p>A prototypical problem with efficient algebraic solutions is integer multiplication. School multiplication uses quadratic time. Thus it is very slow for large integers. Fourier transforms allow fast solutions, currently not obtained in any other way. The main and currently unobtainable goal in this area is to design a fastest algorithm and prove that no faster one exist. It turns out that for such efficient algorithms with close to linear running time, the model of computation used to measure the efficiency plays an important role. The supported research has shown, that for a more realistic machine model, the ranking among the best known algorithms changes compared to the usual Turing machine or circuit size model.&nbsp;</p> <p>&nbsp;Another algebraic tool used by this project is the zeta transform with its M&ouml;bius inverse. This tool has been used in this project in a new dynamic way to count perfect matchings in a grid, based on a tree decomposition of the grid graph. The algorithm allows to save storage space in exchange for a moderate increase in time. For such hard problems, it is well known, that in practice, storage space is the more serious bottleneck than time. The number of matchings is an important quantity in statistical physics. It can be viewed as the number of embeddings of a pattern graph consisting of a collection of loose edges into a target graph. The project has also designed a polynomial time approximation scheme for the number of embeddings of a large class of different pattern graphs into a random target graph.</p> <p>&nbsp;Graph polynomials are another important class of algebraic tools. The project has studied them in the context of graphs of bounded tree-width.</p> <p>&nbsp;The project has investigated various packing and covering problems, which have applications in many different areas. There is a classical approximation algorithm for k-set packing, that has not been improved for more than twenty years. Shortly, after finding a better approximation algorithm, the PI with a student learned that an algorithm with the same ratio had already been submitted to a conference. Our result is still worthwhile, as its polynomial running time explodes much more moderately, when approaching the optimal approximation ratio.&nbsp;</p> <p>&nbsp;The results of this project have been published in journals and conference proceedings, as well as presented in talks and made available on ArXiv. The research of two PhD students has been supported by this grant.</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/05/2014<br>      Modified by: Martin&nbsp;P&nbsp;Furer</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ For many discrete optimization and decision problems, the most natural and obvious algorithms are not good enough. They require too much time, and therefore are only useful for small problem instances. The development of efficient algorithms often requires an in depth study of the mathematical structure of a given problem. For discrete problems, dealing with integers or finite structures like graphs, combinatorics is the main source of tools for such an analysis. But quite often, less obvious algebraic methods provide a path to efficient solutions. Sometimes, no combinatorial method is known to achieve the same efficiency, sometimes the algebraic method is crucial for the discovery process, but can later be replaced by a combinatorial solution.  A prototypical problem with efficient algebraic solutions is integer multiplication. School multiplication uses quadratic time. Thus it is very slow for large integers. Fourier transforms allow fast solutions, currently not obtained in any other way. The main and currently unobtainable goal in this area is to design a fastest algorithm and prove that no faster one exist. It turns out that for such efficient algorithms with close to linear running time, the model of computation used to measure the efficiency plays an important role. The supported research has shown, that for a more realistic machine model, the ranking among the best known algorithms changes compared to the usual Turing machine or circuit size model.    Another algebraic tool used by this project is the zeta transform with its M&ouml;bius inverse. This tool has been used in this project in a new dynamic way to count perfect matchings in a grid, based on a tree decomposition of the grid graph. The algorithm allows to save storage space in exchange for a moderate increase in time. For such hard problems, it is well known, that in practice, storage space is the more serious bottleneck than time. The number of matchings is an important quantity in statistical physics. It can be viewed as the number of embeddings of a pattern graph consisting of a collection of loose edges into a target graph. The project has also designed a polynomial time approximation scheme for the number of embeddings of a large class of different pattern graphs into a random target graph.   Graph polynomials are another important class of algebraic tools. The project has studied them in the context of graphs of bounded tree-width.   The project has investigated various packing and covering problems, which have applications in many different areas. There is a classical approximation algorithm for k-set packing, that has not been improved for more than twenty years. Shortly, after finding a better approximation algorithm, the PI with a student learned that an algorithm with the same ratio had already been submitted to a conference. Our result is still worthwhile, as its polynomial running time explodes much more moderately, when approaching the optimal approximation ratio.    The results of this project have been published in journals and conference proceedings, as well as presented in talks and made available on ArXiv. The research of two PhD students has been supported by this grant.          Last Modified: 08/05/2014       Submitted by: Martin P Furer]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
