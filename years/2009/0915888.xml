<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC:Small: Formal Reasoning about Concurrent Programs for Multicore and Multiprocessor Machines</AwardTitle>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Formal reasoning about concurrent programs is usually done at a&lt;br/&gt;high-level with strong assumptions such as built-in thread primitives&lt;br/&gt;(e.g., locks) and simplified memory models (e.g., sequential&lt;br/&gt;consistency). Existing formal techniques (including Hoare logic and&lt;br/&gt;type system) have consistently ignored important issues such as&lt;br/&gt;relaxed memory models, hardware interrupts, implementation of&lt;br/&gt;synchronization primitives, and support for software transactional&lt;br/&gt;memory and privatization. This severely limits their applicability.&lt;br/&gt;&lt;br/&gt;This research focuses on extending and adapting existing formal&lt;br/&gt;techniques so that they can also support realistic low-level&lt;br/&gt;concurrent programs running on modern multicore and multiprocessor&lt;br/&gt;machines. The PI is developing a new operational approach for&lt;br/&gt;reasoning about programs running under relaxed memory models;&lt;br/&gt;designing new program logics for certifying both weak and strong&lt;br/&gt;memory operations (including the memory-fence and compare-and-swap&lt;br/&gt;instructions); and showing how to scale his approach to real-world&lt;br/&gt;thread implementation and to machines with relaxed memory models.  If&lt;br/&gt;successful, this research will help improve the reliability of&lt;br/&gt;concurrent software components, which form the backbone of many&lt;br/&gt;critical systems in the world. It will also facilitate the&lt;br/&gt;community-wide effort for finding new programming models for safe and&lt;br/&gt;scalable multicore computing.</AbstractNarration>
<MinAmdLetterDate>08/29/2009</MinAmdLetterDate>
<MaxAmdLetterDate>08/29/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0915888</AwardID>
<Investigator>
<FirstName>Zhong</FirstName>
<LastName>Shao</LastName>
<EmailAddress>zhong.shao@yale.edu</EmailAddress>
<StartDate>08/29/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Yale University</Name>
<CityName>New Haven</CityName>
<ZipCode>065208327</ZipCode>
<PhoneNumber>2037854689</PhoneNumber>
<StreetAddress>Office of Sponsored Projects</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
</Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
