<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>II-New: A Computational Infrastructure for Scalable Transactional Memory  Abstractions in Managed Languages</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2010</AwardEffectiveDate>
<AwardExpirationDate>05/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>556300.00</AwardTotalIntnAmount>
<AwardAmount>556300</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This proposal supports the acquisition of an Azul Vega 3 compute appliance&lt;br/&gt;for research on developing an open-source general-purpose transactional&lt;br/&gt;infrastructure for high-level managed languages.  This appliance is equipped&lt;br/&gt;with hundreds of processor cores, substantial memory, and bandwidth&lt;br/&gt;availability.  The cores compute in a flat SMP configuration, simplifying&lt;br/&gt;programmability and management.  The appliance has a number of novel&lt;br/&gt;features including hardware support for concurrent garbage collection, and&lt;br/&gt;optimistic lock elision that provide critical building blocks for efficient&lt;br/&gt;transactional memory (TM) support.  The project's research agenda is to&lt;br/&gt;explore new approaches to scalable parallel program construction that&lt;br/&gt;exploits underlying hardware primitives that mask or mitigate critical&lt;br/&gt;bottlenecks that have thus far hampered effective scalable software&lt;br/&gt;transactional memory systems.&lt;br/&gt;&lt;br/&gt;The project will use the novel features of the Azul appliance to (i) explore&lt;br/&gt;new language abstractions with special focus on scalability of transactional&lt;br/&gt;applications; (ii) understand how primitive support for garbage collection&lt;br/&gt;and transactions influence algorithm and application development built using&lt;br/&gt;these abstractions;  (iii) examine the impact of these mechanisms on&lt;br/&gt;compiler and runtime design; and (iv) develop a large number of benchmarks&lt;br/&gt;and workloads to better understand TM performance characteristics.&lt;br/&gt;&lt;br/&gt;This project is part of a larger NSF-funded effort to catalyze TM research,&lt;br/&gt;which in turn is a key technique to improving software development for&lt;br/&gt;general-purpose parallel computers.  Widespread adoption of new scalable&lt;br/&gt;concurrency abstractions such as transactional memory is an essential&lt;br/&gt;component in the technology roadmap of major industry players, and the focus&lt;br/&gt;of much attention in academia.</AbstractNarration>
<MinAmdLetterDate>06/01/2010</MinAmdLetterDate>
<MaxAmdLetterDate>12/16/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0958465</AwardID>
<Investigator>
<FirstName>Jan</FirstName>
<LastName>Vitek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jan Vitek</PI_FULL_NAME>
<EmailAddress>j.vitek@neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000290862</NSF_ID>
<StartDate>12/16/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jan</FirstName>
<LastName>Vitek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jan Vitek</PI_FULL_NAME>
<EmailAddress>j.vitek@neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000290862</NSF_ID>
<StartDate>06/01/2010</StartDate>
<EndDate>12/16/2013</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Suresh</FirstName>
<LastName>Jagannathan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Suresh Jagannathan</PI_FULL_NAME>
<EmailAddress>suresh@cs.purdue.edu</EmailAddress>
<PI_PHON>7654940971</PI_PHON>
<NSF_ID>000181308</NSF_ID>
<StartDate>06/01/2010</StartDate>
<EndDate>12/16/2013</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[Young Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7359</Code>
<Text>CCRI-CISE Cmnty Rsrch Infrstrc</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~556300</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Transactional memory holds promise to improve the practice of concurrent programming, but achieving acceptable performance remains an issue for large-scale adoption of the technology. Implementations of software transactional memory (STM) increase the cost of many frequently executed operations and have subtle interactions with the run-time system of the host language. This project demonstrated that implementations significantly increase the load placed on the host's memory subsystem by increasing the allocation rate and altering the lifetime of allocated data. In managed languages this translates to added pressure on the garbage collector which must efficiently reclaim the objects used by the STM to implement transactions. This project performed a detailed implementation study of the impact of STM representation and implementation decisions on scalability using the infrastructure as a testbed.&nbsp;<br />Experimental data on several STM libraries running on top of Java was obtained, and it showed that memory pressure significantly impacts performance. Similar results were ellicited for a C# STM tightly integrated with its host virtual machine. Performance results that demonstrate that adding support for transactions in the memory subsystem leads to significantly better throughput we presented.&nbsp;<br />The applicability of transactional memory to the implementation of different non-blocking data structures in the context of the Real-time Specification for Java was studied. In particular, the project demonstrated that hardware support for micro-transaction allows developers to implement efficiently data structures that are often difficult to realize with the atomic operations provided by stock hardware. The main implementation platform is the Java Optimized Processor system. These results confirm that transactional memory is an interesting alternative to traditional concurrency control mechanisms.&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 06/19/2014<br>      Modified by: Jan&nbsp;Vitek</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Transactional memory holds promise to improve the practice of concurrent programming, but achieving acceptable performance remains an issue for large-scale adoption of the technology. Implementations of software transactional memory (STM) increase the cost of many frequently executed operations and have subtle interactions with the run-time system of the host language. This project demonstrated that implementations significantly increase the load placed on the host's memory subsystem by increasing the allocation rate and altering the lifetime of allocated data. In managed languages this translates to added pressure on the garbage collector which must efficiently reclaim the objects used by the STM to implement transactions. This project performed a detailed implementation study of the impact of STM representation and implementation decisions on scalability using the infrastructure as a testbed.  Experimental data on several STM libraries running on top of Java was obtained, and it showed that memory pressure significantly impacts performance. Similar results were ellicited for a C# STM tightly integrated with its host virtual machine. Performance results that demonstrate that adding support for transactions in the memory subsystem leads to significantly better throughput we presented.  The applicability of transactional memory to the implementation of different non-blocking data structures in the context of the Real-time Specification for Java was studied. In particular, the project demonstrated that hardware support for micro-transaction allows developers to implement efficiently data structures that are often difficult to realize with the atomic operations provided by stock hardware. The main implementation platform is the Java Optimized Processor system. These results confirm that transactional memory is an interesting alternative to traditional concurrency control mechanisms.           Last Modified: 06/19/2014       Submitted by: Jan Vitek]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
