<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Automated Software Failure Causal Path Computation</AwardTitle>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>493298.00</AwardTotalIntnAmount>
<AwardAmount>493298</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Automating debugging has been a long standing grand challenge.&lt;br/&gt;Central to automated debugging is the capability of identifying failure causal paths, which are paths leading from the root cause to the failure with each step causally connected. It is key to understanding and fixing a software fault. The project develops a novel scalable debugging technique. Given a failure and the desired output, the technique produces the failure causal path.&lt;br/&gt;&lt;br/&gt;The following enabling techniques are devised. Given a failure and the desired output, the first technique is to search for a dynamic patch to the failure such that the patched execution generates the desired output. Sample patches include negating the branch outcome of a predicate execution. The second technique is to align the failing and the patched executions to facilitate later comparison. It consists of control flow alignment and memory alignment. Two runs may differ in control flow so that correspondence between execution points need to be established. A data structure may be allocated to different memory locations so that memories also need to be aligned. The third technique is to efficiently compare the program states of the two runs at the aligned places to generate the causal path. The ramifications include reducing resource consumption of debugging and improving software productivity and dependability.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/31/2009</MinAmdLetterDate>
<MaxAmdLetterDate>08/31/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0917007</AwardID>
<Investigator>
<FirstName>Xiangyu</FirstName>
<LastName>Zhang</LastName>
<EmailAddress>xyzhang@cs.purdue.edu</EmailAddress>
<StartDate>08/31/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
