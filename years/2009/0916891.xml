<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small:Exploring the Synergy between Software Design and Organizational Structure</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>496579.00</AwardTotalIntnAmount>
<AwardAmount>520579</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Many successful large-scale software systems share a fundamental characteristic: their modular structures enable system-wide advances though distributed and parallelized improvement of modules. However, merely breaking software into modules, without assessing the interplay between a design and the organization that must instantiate it, does not always ensure that parallelized, module-wise evolution is effective. In particular, mismatches between design and organizational structures can result in expensive inter-team communication costs, exacerbated by barriers such as differing time zones, languages and cultures.  This research aims to formally express and quantitatively assess the key characteristics of software structures that allow for system-wide evolution through distributed module-wise contributions, and to account for the relationship between design structure and organizational structure, as it impacts software quality, productivity, and survival.  The work will explore a computable socio-technical model, associated metrics and automated analysis techniques to improve the conduct of software development. The approach will allow designers to assess and manipulate software designs at early development stages so that modules can be defined and implemented by independent teams, shortening development time, facilitating changes, and minimizing coordination costs. The results will be demonstrated on large software systems, working with industrial partners who wish to understand the impact of these techniques.</AbstractNarration>
<MinAmdLetterDate>07/17/2009</MinAmdLetterDate>
<MaxAmdLetterDate>06/16/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0916891</AwardID>
<Investigator>
<FirstName>Yuanfang</FirstName>
<LastName>Cai</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yuanfang Cai</PI_FULL_NAME>
<EmailAddress>yfcai@cs.drexel.edu</EmailAddress>
<PI_PHON>2158952000</PI_PHON>
<NSF_ID>000244198</NSF_ID>
<StartDate>07/17/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Giuseppe</FirstName>
<LastName>Valetto</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Giuseppe Valetto</PI_FULL_NAME>
<EmailAddress>valetto@cs.drexel.edu</EmailAddress>
<PI_PHON>2158952000</PI_PHON>
<NSF_ID>000182644</NSF_ID>
<StartDate>07/17/2009</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Drexel University</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191021119</ZipCode>
<PhoneNumber>2158956342</PhoneNumber>
<StreetAddress>1505 Race St, 10th Floor</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002604817</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DREXEL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002604817</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Drexel University]]></Name>
<CityName>Philadelphia</CityName>
<StateCode>PA</StateCode>
<ZipCode>191021119</ZipCode>
<StreetAddress><![CDATA[1505 Race St, 10th Floor]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~496579</FUND_OBLG>
<FUND_OBLG>2010~8000</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The major outcomes of this project include the following key concepts that are already having impact on both software engineering practice and education:&nbsp;</p> <p><br />(1) Design Rule Hierarchy (DRH)--a new architecture model. The PI and her team proposed to describe a software architecture using design rules and the modules created, framed, and separated by these design rules. This concept contributed to novel and more effective approaches to predict coordination requirements from architecture models, to visualize the modular structure of design patterns, to recover software architecture from source code, to quantitatively explain why some systems are more evolvable and maintenable than others, and to detect architecture violations. The DRH model has been used to analyze multiple industrial projects and to analyze student programming assignments from Drexel, Cal Poly, and CMU. The PI has a pending patent related to the DRH work.&nbsp;</p> <p>(2) Modularity Violation--a novel structure-plus-history architecture evaluation method. Based on the assumption that a well-modularized system should allow modules to evolve independently, we analyze software evolution history to find out where history belies architecture, as described using DRH. Concretely, our modularity violation detection technique identifies when and why files belong to architecturally separated modules frequently changed together. By combining structure and history measures, together with modularity violation detection, we were able to identify serious hidden architecture problems in real industrial projects. This process also allowed us to reveal not only where the problems were, but also why these problems were causing bugs and maintenance difficulties. Based on this information, detailed refactoring suggestions were proposed, accepted, and implemented. Currently this approach is being used to evaluate the architecture of multiple industrial projects.&nbsp;</p> <p>(3) A Proximity metric--a metric used to identify and rank coordination requirements in a software team based on the working sets of tasks, and the interactions of developers with their working sets. Using Proximity, an associated tool called ProxiScientia was developed to identify and measure the strength of the need to coordinate among developers during the work. The ProxiScientia tool has been used in a case study of global software development involving dozens of students in Canada and Finland. Recent study shows that DRH can be used with Proximity to distinguish between critical and trivial coordination needs.&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/02/2013<br>      Modified by: Yuanfang&nbsp;Cai</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The major outcomes of this project include the following key concepts that are already having impact on both software engineering practice and education:    (1) Design Rule Hierarchy (DRH)--a new architecture model. The PI and her team proposed to describe a software architecture using design rules and the modules created, framed, and separated by these design rules. This concept contributed to novel and more effective approaches to predict coordination requirements from architecture models, to visualize the modular structure of design patterns, to recover software architecture from source code, to quantitatively explain why some systems are more evolvable and maintenable than others, and to detect architecture violations. The DRH model has been used to analyze multiple industrial projects and to analyze student programming assignments from Drexel, Cal Poly, and CMU. The PI has a pending patent related to the DRH work.   (2) Modularity Violation--a novel structure-plus-history architecture evaluation method. Based on the assumption that a well-modularized system should allow modules to evolve independently, we analyze software evolution history to find out where history belies architecture, as described using DRH. Concretely, our modularity violation detection technique identifies when and why files belong to architecturally separated modules frequently changed together. By combining structure and history measures, together with modularity violation detection, we were able to identify serious hidden architecture problems in real industrial projects. This process also allowed us to reveal not only where the problems were, but also why these problems were causing bugs and maintenance difficulties. Based on this information, detailed refactoring suggestions were proposed, accepted, and implemented. Currently this approach is being used to evaluate the architecture of multiple industrial projects.   (3) A Proximity metric--a metric used to identify and rank coordination requirements in a software team based on the working sets of tasks, and the interactions of developers with their working sets. Using Proximity, an associated tool called ProxiScientia was developed to identify and measure the strength of the need to coordinate among developers during the work. The ProxiScientia tool has been used in a case study of global software development involving dozens of students in Canada and Finland. Recent study shows that DRH can be used with Proximity to distinguish between critical and trivial coordination needs.                 Last Modified: 12/02/2013       Submitted by: Yuanfang Cai]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
