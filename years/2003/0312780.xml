<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR:      Architectural Support for Programming-in-the-Small-and-Many</AwardTitle>
<AwardEffectiveDate>09/15/2003</AwardEffectiveDate>
<AwardExpirationDate>08/31/2009</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>448000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;0312780&lt;br/&gt;Nenad Medvidovic&lt;br/&gt;&lt;br/&gt;Over the past several decades software researchers and practitioners have proposed various approaches, techniques, and tools for developing ever larger, more complex systems targeted at the traditional workstation environment. The results of these efforts have shared a number of traits: system size and complexity, possible distribution across desktop platforms, focus on modeling and analysis before implementation, accompanying development environments, explicit software architectures, and so forth. The resulting software development paradigm has been referred to as programming-in-the-large (PitL). A new set of challenges has arisen with the proliferation of small, inexpensive, heterogeneous, resource-constrained, possibly embedded, highly-distributed, and highly-mobile computing platforms. While a number of the individual challenges may bear similarity to those addressed by PitL, their combination and overall novelty can be described more appropriately as programming-in-the-small-and-many (Prism).&lt;br/&gt;The proposed project intends to address the challenges of Prism. The project's focus is at the level of&lt;br/&gt;software application engineering. That is, the project will utilize advances in lower level software technologies (operating systems, optimized compilation, (wireless) networking, and data compression) as it&lt;br/&gt;addresses the goal of developing understandings, principles, frameworks, methods, mechanisms, and tools&lt;br/&gt;that will support efficient, scalable, reliable, robust, and, above all, highly adaptable software applications in the Prism setting. The project will focus on four key objectives:&lt;br/&gt;1. develop an effective design methodology, accompanying software models, and flexible, incremental software&lt;br/&gt;analysis techniques;&lt;br/&gt;2. develop technology to carry the design approach forward to implementation in a heterogeneous, highly&lt;br/&gt;distributed, mobile, and resource constrained setting;&lt;br/&gt;3. develop execution-time solutions in support of (continuous) dynamic system evolution, (re)deployment,&lt;br/&gt;mobility, and graceful degradation;&lt;br/&gt;4. validate the approach through series of experiments to quantify its key aspects, as well as through applications in three specific problem domains.&lt;br/&gt;The project will build upon the emerging body of research on software architectures in providing a comprehensive methodology for software development in-the-small-and-many.  In particular, it will investigate the potential role and impact of software architectural styles (recurring structural, behavioral, and interaction patterns across systems) in providing a basis for the design methodology and incremental architectural analysis. Component-based frameworks and software connectors (explicit architectural abstractions embodying component interactions) will form the likely basis of the architecture implementation and execution solutions.  Since it is unrealistic to assume that all applications in the Prism setting will have the same modeling and implementation needs, the project will provide configurable architectural style and implementation frameworks, with guidelines for instantiating these frameworks into specific styles and style-based implementation/execution platforms.</AbstractNarration>
<MinAmdLetterDate>09/10/2003</MinAmdLetterDate>
<MaxAmdLetterDate>05/16/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0312780</AwardID>
<Investigator>
<FirstName>Nenad</FirstName>
<LastName>Medvidovic</LastName>
<EmailAddress>neno@usc.edu</EmailAddress>
<StartDate>09/10/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<ProgramElement>
<Code>1686</Code>
<Text>ITR SMALL GRANTS</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
