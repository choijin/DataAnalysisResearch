<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>First-Class Genericity for Java</AwardTitle>
<AwardEffectiveDate>06/15/2003</AwardEffectiveDate>
<AwardExpirationDate>05/31/2009</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>270000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010500</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCR-0306494&lt;br/&gt;Robert Cartwright&lt;br/&gt;William Marsh Rice University&lt;br/&gt;&lt;br/&gt;The Java platform has won acceptance as a superior vehicle for building software applications, but it is still in the early stages of evolution.  Its most serious deficiency is a crude type system which does not support generic types, separates primitive types from object types, and includes the null pointer in every object type.  As a result, programmers cannot express many important program invariants in the type system.  An improved Java type system could simplify the structure of many Java programs and enable programmers to catch more bugs at compile time.&lt;br/&gt;&lt;br/&gt;The next major release (1.5) of the Java platform will support a restricted formulation of generic types.  While this extension represents a major step forward, restrictions on the use of generic types will prevent them from being used in many important object-oriented coding patterns.&lt;br/&gt;&lt;br/&gt;In this project, we propose to design and implement a compatible extension of Java 1.5 with a more advanced type system in which generic types can be used anywhere that conventional types can.  The extended Java language will enable programmers to express important new data abtractions, to eliminate most type casts, and to catch more bugs at compile time--without compromising program performance.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/11/2003</MinAmdLetterDate>
<MaxAmdLetterDate>04/02/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0306494</AwardID>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Cartwright</LastName>
<EmailAddress>cork@rice.edu</EmailAddress>
<StartDate>06/11/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>William Marsh Rice University</Name>
<CityName>Houston</CityName>
<ZipCode>770051827</ZipCode>
<PhoneNumber>7133484820</PhoneNumber>
<StreetAddress>6100 MAIN ST</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
</Institution>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code/>
<Text/>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
