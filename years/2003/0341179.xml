<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Checking Atomicity for Improved Multithreaded Software Reliability</AwardTitle>
<AwardEffectiveDate>09/15/2003</AwardEffectiveDate>
<AwardExpirationDate>08/31/2008</AwardExpirationDate>
<AwardTotalIntnAmount>257773.00</AwardTotalIntnAmount>
<AwardAmount>257773</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>The construction and validation of highly dependable software&lt;br/&gt;currently requires extraordinary effort, especially when using&lt;br/&gt;multiple threads of control, due to the need to consider all possible&lt;br/&gt;thread interleavings. This research focuses on the strong,&lt;br/&gt;widely-applicable non-interference property of atomicity.  A routine&lt;br/&gt;is atomic if its execution is not affected by concurrently-executing&lt;br/&gt;threads.  This non-interference guarantee reduces the challenging&lt;br/&gt;problem of reasoning about the routine's behavior in a multithreaded&lt;br/&gt;context to the substantially simpler problem of reasoning about the&lt;br/&gt;routine's sequential behavior.&lt;br/&gt;&lt;br/&gt;This work develops both dynamic and static (type-based) techniques for&lt;br/&gt;formally specifying and verifying atomicity properties of&lt;br/&gt;multithreaded programs in a cost-effective manner.  It is expected&lt;br/&gt;that atomicity checkers developed will 1) detect atomicity violations&lt;br/&gt;that are resistant to both traditional testing techniques and existing&lt;br/&gt;tools focused on race conditions; 2) facilitate code inspection and&lt;br/&gt;debugging; and 3) encourage a modular design methodology that avoids&lt;br/&gt;unnecessary interference between threads.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/12/2003</MinAmdLetterDate>
<MaxAmdLetterDate>09/23/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0341179</AwardID>
<Investigator>
<FirstName>Cormac</FirstName>
<LastName>Flanagan</LastName>
<EmailAddress>cormac@ucsc.edu</EmailAddress>
<StartDate>09/12/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Martin</FirstName>
<LastName>Abadi</LastName>
<EmailAddress>abadi@cs.ucsc.edu</EmailAddress>
<StartDate>09/12/2003</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Cruz</Name>
<CityName>Santa Cruz</CityName>
<ZipCode>950641077</ZipCode>
<PhoneNumber>8314595278</PhoneNumber>
<StreetAddress>1156 High Street</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<ProgramElement>
<Code>7214</Code>
<Text>HIGHLY DEPENDABLE COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
