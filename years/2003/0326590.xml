<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR Collaborative Research:  A Reusable, Extensible, Optimizing Back End</AwardTitle>
<AwardEffectiveDate>10/15/2003</AwardEffectiveDate>
<AwardExpirationDate>09/30/2007</AwardExpirationDate>
<AwardTotalIntnAmount>401962.00</AwardTotalIntnAmount>
<AwardAmount>401962</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>A computer program is written in a high-level *programming* *language*,&lt;br/&gt;but to be run, it must be translated into a *machine* *language*.&lt;br/&gt;A translator is difficult and expensive to build, and using today's&lt;br/&gt;techniques, each programming language needs its own translator.  For&lt;br/&gt;example, it is nearly impossible to use the same translator for both Java&lt;br/&gt;and C++.  The project is developing techniques by which a ``back end,''&lt;br/&gt;which understands machine language, can serve many different ``front&lt;br/&gt;ends,'' each of which understands a different programming language.&lt;br/&gt;Combining such front and back ends can produce a translator much more&lt;br/&gt;cheaply than is possible at present.  The major new idea is to use&lt;br/&gt;*three* interfaces.  The C-- language is an interface that enables&lt;br/&gt;the front end to tell the back end what a program should do.  The C--&lt;br/&gt;run-time interface reveals decisions made by the back end so that the&lt;br/&gt;front end can support such services as garbage collection and threads.&lt;br/&gt;The Cobalt language is an interface that enables the front end to tell the&lt;br/&gt;back end what special translation techniques are needed for efficiency in&lt;br/&gt;a particular language.  These interfaces are supported by new, automatic&lt;br/&gt;techniques for eliminating potential errors in translation.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>10/06/2003</MinAmdLetterDate>
<MaxAmdLetterDate>10/31/2006</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0326590</AwardID>
<Investigator>
<FirstName>Craig</FirstName>
<LastName>Chambers</LastName>
<EmailAddress>chambers@cs.washington.edu</EmailAddress>
<StartDate>10/06/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
</Institution>
<ProgramElement>
<Code>1687</Code>
<Text>ITR MEDIUM (GROUP) GRANTS</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
