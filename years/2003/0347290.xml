<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:  Take Your Vitamins:  Robust Parallel Software Through Supplement Oriented Programming</AwardTitle>
<AwardEffectiveDate>02/15/2004</AwardEffectiveDate>
<AwardExpirationDate>03/31/2008</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>241677</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Lewis, Christopher&lt;br/&gt;University of Pennsylvia&lt;br/&gt;CCF-0347290&lt;br/&gt;&lt;br/&gt;Parallel programs are notoriously difficult to write and growing&lt;br/&gt;application requirements (e.g, ease of development, reliability,&lt;br/&gt;security, etc.) are only exacerbating the problem.  Ad hoc dynamic&lt;br/&gt;techniques that observe, limit, or otherwise control running&lt;br/&gt;applications (e.g., array bounds checks, assertions, bug isolation) have&lt;br/&gt;helped satisfy some of these requirements in sequential programs, but&lt;br/&gt;performance overhead and implementation challenges have limited their&lt;br/&gt;general utility.  This research develops and evaluates&lt;br/&gt;supplement-oriented programming as a programming paradigm for&lt;br/&gt;conveniently and efficiently enhancing parallel systems with dynamic&lt;br/&gt;checks and monitors.  Supplement-oriented programming is a style of&lt;br/&gt;programming in which abstract computations (called supplements)&lt;br/&gt;implement supplemental behaviors that are added to a running application&lt;br/&gt;in order to dynamically observe, limit, or control it without changing&lt;br/&gt;its core functional behavior.  Supplement-oriented programming&lt;br/&gt;transforms the use of supplemental behaviors from an awkward, ad hoc art&lt;br/&gt;to a well-supported programming paradigm.  The logical separation of&lt;br/&gt;functional and supplemental behaviors allows for simpler&lt;br/&gt;supplement-enabled programs, plug-and-play supplement libraries,&lt;br/&gt;language and tool-based support, and (ultimately) higher quality, easier&lt;br/&gt;to build parallel programs.  This work also explores novel&lt;br/&gt;implementation techniques, such as backfill processing, that efficiently&lt;br/&gt;implement supplements using the often underutilized parallel resources&lt;br/&gt;of typical systems.&lt;br/&gt;&lt;br/&gt;Supplement-oriented programming is an enabling technology.  It will not&lt;br/&gt;only improve the robustness of parallel software, it will allow people&lt;br/&gt;with broader abilities, interests, and backgrounds to use parallel&lt;br/&gt;systems, magnifying their creative power so that they may find new and&lt;br/&gt;important uses for these machines.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/06/2004</MinAmdLetterDate>
<MaxAmdLetterDate>03/11/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0347290</AwardID>
<Investigator>
<FirstName>E. Christopher</FirstName>
<LastName>Lewis</LastName>
<EmailAddress>eclewis@cis.upenn.edu</EmailAddress>
<StartDate>02/06/2004</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<FoaInformation>
<Code>0000099</Code>
<Name>Other Applications NEC</Name>
</FoaInformation>
<ProgramElement>
<Code>4080</Code>
<Text>ADVANCED COMP RESEARCH PROGRAM</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
