<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Dynamic Security Policies</AwardTitle>
<AwardEffectiveDate>08/01/2003</AwardEffectiveDate>
<AwardExpirationDate>07/31/2006</AwardExpirationDate>
<AwardTotalIntnAmount>299999.00</AwardTotalIntnAmount>
<AwardAmount>299999</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Karl Levitt</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCR-0311204&lt;br/&gt;Dynamic Security Policies&lt;br/&gt;Stephan A. Zdancewic&lt;br/&gt;&lt;br/&gt;This research concentrates on the theoretical foundations and implementation of dynamic security policies--security policies that describe how confidential or high integrity data should be handled by computer systems in an environment that is unknown when the system is built.  The key idea is to extend well understood static type systems that express information-flow security policies with dynamic mechanisms that capture security policy information available only at run time.  Such policies are important to the design of secure systems that can cope with change in the environment and that can evolve over time.&lt;br/&gt;&lt;br/&gt;The main objectives are: (1) To design a type system and an accompanying soundness proof for a security-typed language that includes first-class principals, authentication, first-class confidentiality labels, and mechanisms to construct and inspect these policy components at run time.  Part of this work is to extend previous research on downgrading. (2) To implement these ideas in the Jif compiler, a security-typed language based on Java. (3) To validate the approach by developing a suite of programs that stress-test the implementation.  Most of these programs will be small benchmarks that test corner cases, but the intent is to have students develop larger applications.</AbstractNarration>
<MinAmdLetterDate>08/19/2003</MinAmdLetterDate>
<MaxAmdLetterDate>05/30/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0311204</AwardID>
<Investigator>
<FirstName>Stephan</FirstName>
<LastName>Zdancewic</LastName>
<EmailAddress>stevez@cis.upenn.edu</EmailAddress>
<StartDate>08/19/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<ProgramElement>
<Code>2802</Code>
<Text>TRUSTED COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7254</Code>
<Text>CYBER SECURITY ACT PROPOSALS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
