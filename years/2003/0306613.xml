<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Transforming Requirement Specifications into Architectural Prescriptions</AwardTitle>
<AwardEffectiveDate>08/15/2003</AwardEffectiveDate>
<AwardExpirationDate>07/31/2008</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>318000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010500</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;0306613&lt;br/&gt;Perry, Dewayne&lt;br/&gt;U of Texas&lt;br/&gt;&lt;br/&gt;The transformation of a system's software requirements into an appropriate architecture is an extremely difficult task. The architecture represents the creation of a system structure that provides the context of how a software system will implement what the system is supposed to do. The difficulty of this transformation task is exacerbated by the fact that requirements are often ambiguous, incomplete and unstable. Factoring in the need to accommodate as yet unknown uses of the system and requirements that will change during the evolutionary life of that system only makes the task more difficult.&lt;br/&gt;Our proposal is a continuation of our initial research (the Preskiptor Process [2, 3, 4]) on bridging the gap between a requirements specification for a software system and the architectural specification of that system. This initial is an approach that begins with formal requirements specifications (in van Lamsweerde's KAOS [6, 11, 12]) that are transformed by means of a systematic process into an architectural prescription [11, 12] where the formal logical language for specifying the architectural prescriptions is the same language as that used for specifying the requirement goals. The advantage of this approach is that the abstractions (i.e., the domain specific concepts, the concepts in the problem domain) used in both specifications are easily understood in both contexts and represent the problem domain. Our initial approach solves the basic problem: creating an architectural structure that satisfies the functional requirements specification.</AbstractNarration>
<MinAmdLetterDate>08/14/2003</MinAmdLetterDate>
<MaxAmdLetterDate>07/27/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0306613</AwardID>
<Investigator>
<FirstName>Dewayne</FirstName>
<LastName>Perry</LastName>
<EmailAddress>perry@mail.utexas.edu</EmailAddress>
<StartDate>08/14/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code/>
<Text/>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
