<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:     Cooperative System Support for Robust High Performance</AwardTitle>
<AwardEffectiveDate>06/01/2004</AwardEffectiveDate>
<AwardExpirationDate>05/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>471145.00</AwardTotalIntnAmount>
<AwardAmount>471145</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Darleen Fisher</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Modern software systems are brittle.  Today's systems fall over a performance cliff once load crosses a certain threshold due to the ever-steeper memory hierarchy.  After this point, if there is any service, it is provided in a haphazard manner that is both unpredictable and uncontrollable.  The latency between processors and memory - the memory wall - is large and growing, but even greater latency now exists between main memory and disk - the disk wall.  As load increases, the combined working sets of processes can exceed main memory capacity.  The resulting paging activity can render a system unresponsive.  When paging occurs, the virtual memory manager becomes the de facto scheduler, thwarting load management.  Technology trends are conspiring to make this problem more severe in the future.  High-quality, high-performance RAM is increasingly expensive.  Disk latency is millions of CPU cycles and growing, requiring larger filesystem caches.  Garbage-collected languages lika Java and C# lead to larger working sets and worse locality.  Finally, data-hungry applications such as multimedia and data mining are placing growing demands on memory.&lt;br/&gt;&lt;br/&gt;An integrated attack on this problem is proposed by developing cooperative system support that intelligently manages the memory hierarchy. Enabling high performance and providing robustness under load.  This approach involves novel adaptive algorithms and cooperation between the compiler, operating system, and run-time systems.  The work will develop two synergistic new research areas:&lt;br/&gt;1. Cooperative memory management between the operating system and run-time systems, including coarse-grained and fine-grained garbage collectors, to reduce or eliminate paging.&lt;br/&gt;2. Scheduler-aware virtual memory management to provide predictable scheduling under load.&lt;br/&gt;&lt;br/&gt;The coarse-grained collector will react to memory load information by reducing application footprint.  Models will be developed (using VM information) to allow garbage collectors to perform cost-benefit analyses to choose the best possible heap size.  The fine-grained collector will cooperate closely with the virtual memory, selecting appropriate victim pages for eviction by relocating objects to create empty pages, and preventing paging during garbage collection.  Compiler programs will be adapted and developed.  The analyses will be used to group objects with similar lifetimes onto the same pages.  The scheduler-aware virtual memory manager will maintain detailed reference behavior tracking the utility of possible main memory allocations to each process.  The scheduler will communicate its intended schedule to the virtual memory manager, which will weigh the utility of each allocation by the proportion of CPU time that the scheduler requests.  A utility metric system will enable memory to be provided to each process so that it can run for its CPU proportion and then inform the scheduler when processes cannot be scheduled, so that the scheduler can decide which ones should be deactivated.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>03/25/2004</MinAmdLetterDate>
<MaxAmdLetterDate>05/01/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0347339</AwardID>
<Investigator>
<FirstName>Emery</FirstName>
<LastName>Berger</LastName>
<EmailAddress>emery@cs.umass.edu</EmailAddress>
<StartDate>03/25/2004</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Massachusetts Amherst</Name>
<CityName>Hadley</CityName>
<ZipCode>010359450</ZipCode>
<PhoneNumber>4135450698</PhoneNumber>
<StreetAddress>Research Administration Building</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>2876</Code>
<Text>DISTRIBUTED SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
