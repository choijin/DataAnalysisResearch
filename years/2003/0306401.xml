<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Foundations of ILP-based Static Analysis</AwardTitle>
<AwardEffectiveDate>09/01/2003</AwardEffectiveDate>
<AwardExpirationDate>11/30/2003</AwardExpirationDate>
<AwardTotalIntnAmount>270000.00</AwardTotalIntnAmount>
<AwardAmount>270000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010500</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCR-0306401&lt;br/&gt;Foundations of ILP-based Static Analysis&lt;br/&gt;Jens Palsberg&lt;br/&gt;&lt;br/&gt;Compilers are an important part of today's computational infrastructure as software is ever-increasingly written in high-level programming languages.   Compiler correctness is generally desirable but absolutely essential for embedded systems like sensor networks, medical implants, and fly-by-wire/drive-by-wire systems.  Many commonly used compiler techniques lack proven foundations despite substantial advances in the field of proving compiler correctness.  This project will focus on the  foundations of static analysis based on integer linear programming (ILP), a technique commonly used by compilers for embedded systems.&lt;br/&gt;This project will investigate key correctness properties of ILP-based analyses, including (1) soundness: is the analysis sound with respect to a formal semantics? (2) preservation: is the analysis preserved after program transformations? and (3) composition:  can analyses be combined in ways that preserve basic properties of the program?  Foundational results about the correctness of ILP-based analyses will lead to increased confidence in generated code, principles for developing new analyses, increased understanding of how to combine analyses, and ILP-based code certification, in the spirit of proof-carrying code, typed assembly language, and Java bytecode verification. &lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/24/2003</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0306401</AwardID>
<Investigator>
<FirstName>Jens</FirstName>
<LastName>Palsberg</LastName>
<EmailAddress>palsberg@ucla.edu</EmailAddress>
<StartDate>06/24/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
</Institution>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code/>
<Text/>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
