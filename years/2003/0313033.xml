<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR - Compiler analysis for portability across memory and consistency models</AwardTitle>
<AwardEffectiveDate>08/01/2003</AwardEffectiveDate>
<AwardExpirationDate>07/31/2007</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>The Java programming language made writing multi-threaded programs a mainstream activity.  Subtle issues arise in how to compile these multi-threaded programs so that common compiler optimizations are allowed while simultaneously ensuring that actions in one thread are viewed by other threads as occurring in a legal order, i.e. one that follows the programming language consistency model.  Because previous languages either did not define a memory model or were not widely used, and because multi-threaded programming was done by a small number of experts, the trade-offs between memory model ease-of-use and the ease of compilation were not extensively investigated.  In this project, we are building a compiler that will accept as input a programming language memory model definition, a hardware consistency model definition, and an application program.  The compiler will then optimize the application program while abiding by the constraints of both the memory and consistency model, allowing the trade-offs between ease of use and compilation to be studied.  It will also allow new memory models to be investigated, which will lead to the design of easier to use languages that can be effectively compiled, and used to produce more robust, safer software.</AbstractNarration>
<MinAmdLetterDate>07/24/2003</MinAmdLetterDate>
<MaxAmdLetterDate>07/24/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0313033</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Padua</LastName>
<EmailAddress>padua@uiuc.edu</EmailAddress>
<StartDate>07/24/2003</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Samuel</FirstName>
<LastName>Midkiff</LastName>
<EmailAddress>smidkiff@purdue.edu</EmailAddress>
<StartDate>07/24/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
</Institution>
<ProgramElement>
<Code>1686</Code>
<Text>ITR SMALL GRANTS</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
