<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>NGS:  A Computing Environment Based on Hardware Transactional Memory</AwardTitle>
<AwardEffectiveDate>08/01/2004</AwardEffectiveDate>
<AwardExpirationDate>07/31/2006</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Frederica Darema</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Abstract:&lt;br/&gt;&lt;br/&gt;Charles Leiserson, CNS-0305606&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Parallelism introduces more opportunities for unwanted nondeterminism in programs, making them hard to debug and impossible to write reliable regression tests for.  Consequently, parallel computing has emerged as a niche technology suited only for software developers who are willing to cope with the complexities of concurrency, because performance is everything for them.&lt;br/&gt;&lt;br/&gt;In 1993, Herlihy and Moss{58} proposed transactional memory as an alternative mechanism for enforcing atomicity, since it allows the user to avoid many of the complications of locking.  With transactional memory, a program can read and modify multiple, disparate memory locations as a single atomic operation, much as occurs within a database transaction.  The trend has been towards software transactional memory(STM) {98,57,56}, the overhead of which discourages the use of transactions.  &lt;br/&gt;&lt;br/&gt;The project contends that the "transactions everywhere" approach can simplify parallel programming dramatically and that hardware support can make overheads negligible.  To test the project hypothesis, they plan to develop a hardware specification of "scalable" HTM with a software simulator, a linguistic framework for C-like languages, complier support "implicit" transactions, debuggers and other software-engineering tools, theoretical foundations for semantics and performance, and multithreaded applications that demonstrate the advantages of an HTM computing environment.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/27/2004</MinAmdLetterDate>
<MaxAmdLetterDate>07/26/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0305606</AwardID>
<Investigator>
<FirstName>Charles</FirstName>
<LastName>Leiserson</LastName>
<EmailAddress>cel@csail.mit.edu</EmailAddress>
<StartDate>07/27/2004</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Bradley</FirstName>
<LastName>Kuszmaul</LastName>
<EmailAddress>bradley@mit.edu</EmailAddress>
<StartDate>07/27/2004</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2884</Code>
<Text>NEXT GENERATION SOFTWARE PROGR</Text>
</ProgramElement>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
