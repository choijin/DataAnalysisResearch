<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative: Exploiting Component Contracts for Static Analysis and Testing</AwardTitle>
<AwardEffectiveDate>07/01/2003</AwardEffectiveDate>
<AwardExpirationDate>06/30/2005</AwardExpirationDate>
<AwardTotalIntnAmount>159989.00</AwardTotalIntnAmount>
<AwardAmount>159989</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010500</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>0306270/0306286&lt;br/&gt;Collaborative: Exploiting Component Contracts &lt;br/&gt;Robert Bruce Findler/Matthew Flatt&lt;br/&gt;&lt;br/&gt;Despite the central role of testing in the development process, current programming languages and environments provide scarcely any support for testing. Most testing research has focused on generating&lt;br/&gt;test inputs and test oracles from program specifications, but program specifications are difficult to produce and maintain. Consequently, language and environment designers remain unmotivated to support specifications, and opportunities to support testing are lost.&lt;br/&gt;&lt;br/&gt;Contracts offer a route around the specification problem. Contracts are a form of lightweight specification that work with the base programming language, i.e., there is no need for the programmer to learn a special logic for writing specifications. Contracts are monitored as the program executes, which means that the programmer is forced to maintain contracts with the code. Since contracts are essentially a generalization of assert statements, experience suggests that programmers will use them.&lt;br/&gt;&lt;br/&gt;The investigators focus on contracts as a specification language for automatic test suite generation. To validate their investigations, they will extend the DrScheme programming environment to support unit&lt;br/&gt;testing at component boundaries. In addition, they will use the new testing infrastructure to test DrScheme itself.  &lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/28/2003</MinAmdLetterDate>
<MaxAmdLetterDate>05/28/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0306286</AwardID>
<Investigator>
<FirstName>Matthew</FirstName>
<LastName>Flatt</LastName>
<EmailAddress>mflatt@cs.utah.edu</EmailAddress>
<StartDate>05/28/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Utah</Name>
<CityName>SALT LAKE CITY</CityName>
<ZipCode>841128930</ZipCode>
<PhoneNumber>8015816903</PhoneNumber>
<StreetAddress>75 S 2000 E</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<StateCode>UT</StateCode>
</Institution>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code/>
<Text/>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
