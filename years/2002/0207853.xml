<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Real-Time Virtual Resources</AwardTitle>
<AwardEffectiveDate>07/01/2002</AwardEffectiveDate>
<AwardExpirationDate>06/30/2005</AwardExpirationDate>
<AwardTotalIntnAmount>470000.00</AwardTotalIntnAmount>
<AwardAmount>282000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Aloysius K. Mok&lt;br/&gt;CCR-0207853                    &lt;br/&gt;"REAL-TIME VIRTUAL RESOURCES"&lt;br/&gt;&lt;br/&gt;As embedded systems become more complex, a typical embedded system&lt;br/&gt;will probably involve a mix of soft and hard real-time applications&lt;br/&gt;that share the same embedded run-time platform. In general, an&lt;br/&gt;application may consist of one or more tasks. For example, on a&lt;br/&gt;hand-held sensor-computer, a user may want to fix his own location&lt;br/&gt;with respect to a target landmark and also be warned of the power&lt;br/&gt;consumption status of the sensor-computer. While the power consumption&lt;br/&gt;warning task may have very loose timing constraints, the location&lt;br/&gt;fixing task has fairly stringent timing and other QOS (quality of&lt;br/&gt;service) requirements. Ideally, an application developer should be&lt;br/&gt;able to write his application program as if it were running on a&lt;br/&gt;dedicated computer and not have to worry about interference from&lt;br/&gt;other applications. This illusion can be maintained if global&lt;br/&gt;knowledge of the QOS requirements of all the applications is&lt;br/&gt;accessible to the operating system scheduler, so that a global&lt;br/&gt;schedulability analysis can be performed to ensure that every task&lt;br/&gt;meets its QOS requirements. However, this is not possible in the&lt;br/&gt;environment of "open systems" where the operating system may not&lt;br/&gt;know about the timing requirements of all the application tasks,&lt;br/&gt;as is the case with most commercial embedded and real-time kernels.&lt;br/&gt;&lt;br/&gt;A simplistic solution is to assign a higher priority to timing-&lt;br/&gt;critical applications and let the non-real-time applications run&lt;br/&gt;only when the timing-critical ones are finished. This approach is&lt;br/&gt;viable only for the simplest embedded systems where there is only&lt;br/&gt;one real-time task and there is no interaction among the real-time&lt;br/&gt;and the non-real-time tasks. If all the applications are to various&lt;br/&gt;degrees timing-critical (hard or soft), then the distinction between&lt;br/&gt;real-time and non-real-time applications becomes blurry. In the&lt;br/&gt;sensor-computer example, if the power consumption warning task is&lt;br/&gt;assigned a low priority because of its laxer timing constraint, then&lt;br/&gt;it is possible that power may run out while the high-priority location&lt;br/&gt;fixing task is monopolizing the CPU. This may in turn cause a sensor&lt;br/&gt;reset that may affect the validity of the location fixing result.&lt;br/&gt;&lt;br/&gt;The goal of this project is to enable the design of robust embedded&lt;br/&gt;real-time systems that must function in an open systems environment.&lt;br/&gt;The innovation we are investigating is an elegant software abstraction&lt;br/&gt;called RTVR (real-time virtual resource). This abstraction allows&lt;br/&gt;application programmers to design embedded real-time systems as if&lt;br/&gt;each application had exclusive access to a set of dedicated physical&lt;br/&gt;resources which provide service at a roughly constant rate. The key&lt;br/&gt;to the RTVR concept is that of a "delay bound" parameter on the rate&lt;br/&gt;of service provision. The delay bound specification enables a&lt;br/&gt;programmer to specify the jitter allowance of his/her application.&lt;br/&gt;As a result, we can simplify the verification of the timing correctness&lt;br/&gt;of individual applications as if there is no timing interference&lt;br/&gt;among application tasks. The RTVT concept also simplifies the issue&lt;br/&gt;of guaranteeing the timing/QOS requirements of a mixture of hard&lt;br/&gt;and soft real-time applications. To realize this abstraction, we&lt;br/&gt;must make major advances in both theory and engineering in operating&lt;br/&gt;system design and real-time scheduling theory. Of particular interest&lt;br/&gt;to this project are the issues of partition composition and the&lt;br/&gt;hierarchical decomposition of multiple real-time virtual resources.</AbstractNarration>
<MinAmdLetterDate>07/05/2002</MinAmdLetterDate>
<MaxAmdLetterDate>07/27/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0207853</AwardID>
<Investigator>
<FirstName>Aloysius</FirstName>
<LastName>Mok</LastName>
<EmailAddress>mok@cs.utexas.edu</EmailAddress>
<StartDate>07/05/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
</Institution>
<ProgramElement>
<Code>2801</Code>
<Text>EMBEDDED &amp; HYBRID SYSTEMS(EHS)</Text>
</ProgramElement>
<ProgramReference>
<Code/>
<Text/>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
