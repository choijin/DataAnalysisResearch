<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>High-Performance Synchronization for User-Level Applications</AwardTitle>
<AwardEffectiveDate>06/01/2002</AwardEffectiveDate>
<AwardExpirationDate>05/31/2006</AwardExpirationDate>
<AwardTotalIntnAmount>252638.00</AwardTotalIntnAmount>
<AwardAmount>252638</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Brett D. Fleisch</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Multiprocessor systems use synchronization primitives to coordinate the&lt;br/&gt;activities of multiple threads of control.  Spin locks in particular are&lt;br/&gt;widely used in multiprocessor operating systems and in scientific&lt;br/&gt;appliactions.  With the proliferation of multiprocessor servers, these&lt;br/&gt;locks have come to be widely used in commercial applications as well.&lt;br/&gt;The multiprogrammed nature of server workloads, however, requires that&lt;br/&gt;threads be able to "time out" and abandon an attempt to acquire a lock.&lt;br/&gt;Timeout is easy on small machines, which can use traditional&lt;br/&gt;"test-and-set" spin locks, but these locks do not scale to large&lt;br/&gt;machines.  The principal alternative--scheduler-based locks such as&lt;br/&gt;those provided by Java--has also proven to be prohibitively expensive.&lt;br/&gt;&lt;br/&gt;The proposed research aims to address the cost of user-level&lt;br/&gt;synchronization in multiprocessor servers by means of two principal&lt;br/&gt;techniques: (1) the incorporation of timeout in scalable queue-based&lt;br/&gt;locks, and (2) the development of practical mechanisms for the&lt;br/&gt;construction of lock-free data structures.  These techniques will be&lt;br/&gt;evaluated with respect to each other and to existing techniques, and&lt;br/&gt;will be incorporated into threaded run-time systems such as the Java&lt;br/&gt;Virtual Machine.</AbstractNarration>
<MinAmdLetterDate>04/08/2002</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0204344</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Scott</LastName>
<EmailAddress>scott@cs.rochester.edu</EmailAddress>
<StartDate>04/08/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Rochester</Name>
<CityName>Rochester</CityName>
<ZipCode>146270140</ZipCode>
<PhoneNumber>5852754031</PhoneNumber>
<StreetAddress>518 HYLAN, RC BOX 270140</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
</Institution>
<ProgramElement>
<Code>2876</Code>
<Text>DISTRIBUTED SYSTEMS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
