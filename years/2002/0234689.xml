<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Verifying Properties of Systems Software</AwardTitle>
<AwardEffectiveDate>10/01/2002</AwardEffectiveDate>
<AwardExpirationDate>09/30/2007</AwardExpirationDate>
<AwardTotalIntnAmount>399933.00</AwardTotalIntnAmount>
<AwardAmount>399933</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;Proposal Number 0234689&lt;br/&gt;TITLE           Verifying Properties of Systems Software&lt;br/&gt;PI              Alex Aiken&lt;br/&gt;&lt;br/&gt;This research focuses on enforcing critical properties in software such as device drivers, high-performance servers, network protocols, and embedded systems.  The plan is to design, build and experiment with an analysis tool for C and C++ programs that will achieve two goals:&lt;br/&gt;&lt;br/&gt;(1) It will check the full range of critical properties of systems software, from low-level checks, such as preventing buffer overruns and null pointer dereferences, to high-level, program-specific&lt;br/&gt;checks, such as verifying the steps of a protocol are executed in the correct order.&lt;br/&gt;&lt;br/&gt;(2) The tool will be used for investigating the trade-offs between static (at compile-time) and dynamic (at run-time) enforcement of properties.&lt;br/&gt;&lt;br/&gt;The impacts of this work should include: first, a better understanding of when it is sufficient to use the weaker but less expensive (in programmer effort) checking at runtime instead of static checking at compile-time; a coherent model of how to integrate very low-level and high-level program checking in a single system; and a prototype tool that others without specialized knowledge of program analysis can use to improve the quality of complex systems written in C and C++.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/23/2002</MinAmdLetterDate>
<MaxAmdLetterDate>06/14/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0234689</AwardID>
<Investigator>
<FirstName>Alexander</FirstName>
<LastName>Aiken</LastName>
<EmailAddress>aiken@cs.stanford.edu</EmailAddress>
<StartDate>09/23/2002</StartDate>
<EndDate>06/15/2004</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>George</FirstName>
<LastName>Necula</LastName>
<EmailAddress>necula@cs.berkeley.edu</EmailAddress>
<StartDate>09/23/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<ProgramElement>
<Code>7214</Code>
<Text>HIGHLY DEPENDABLE COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
