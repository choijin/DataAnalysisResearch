<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>RUI:     Class Overriding for Anomaly-Free Component Adaptation</AwardTitle>
<AwardEffectiveDate>05/01/2003</AwardEffectiveDate>
<AwardExpirationDate>04/30/2007</AwardExpirationDate>
<AwardTotalIntnAmount>106341.00</AwardTotalIntnAmount>
<AwardAmount>110396</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010500</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>0243284&lt;br/&gt;Atanas Radenski&lt;br/&gt;Chapman University&lt;br/&gt;&lt;br/&gt;This project will make contributions to the area of component and object oriented languages and programming. The goal is to design, implement, and evaluate class overriding - a new code adaptation language mechanism that is intended to overcome the subclassing anomaly in evolving software components. An in-depth analysis of the subclassing anomaly will reveal and systematize its linguistic roots as found in compiled object-oriented languages. Class overriding will be designed to serve as a generic, language-independent method for anomaly-free component adaptation. Translation patterns for class overriding will define an implementation model with low run-time overhead.&lt;br/&gt;&lt;br/&gt;This project is expected to have impact on the language design community and on the software architecture community. For the language design community, class overriding will be a linguistic mechanism that can be adapted to either new component-oriented languages, or to existing object-oriented languages, in order to enhance software component adaptability. The software architecture community will be able to employ the analysis of the subclassing anomaly to foresee and avoid possible adaptation anomalies in evolving object-oriented software components.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>03/17/2003</MinAmdLetterDate>
<MaxAmdLetterDate>06/02/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0243284</AwardID>
<Investigator>
<FirstName>Atanas</FirstName>
<LastName>Radenski</LastName>
<EmailAddress>radenski@chapman.edu</EmailAddress>
<StartDate>03/17/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Chapman University</Name>
<CityName>Orange</CityName>
<ZipCode>928661099</ZipCode>
<PhoneNumber>7146287383</PhoneNumber>
<StreetAddress>One University Drive</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code/>
<Text/>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
