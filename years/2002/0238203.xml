<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:     Correctness-Performance Partitioned (CPP) Architectures</AwardTitle>
<AwardEffectiveDate>02/01/2003</AwardEffectiveDate>
<AwardExpirationDate>01/31/2009</AwardExpirationDate>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Chitaranjan Das</SignBlockName>
</ProgramOfficer>
<AbstractNarration>The performance, cost, and power requirements of future applications will strain the incumbent sequential processing models.  Simultaneously, implementation trends point towards partitioned (rather than monolithic) designs.  Correctness-performance partitioning (CPP) is a promising approach that exploits partitioning while accommodating existing sequential software. CPP divides execution responsibilities among multiple processing partitions. The correctness (C) partition produces the sequential instruction stream expected by the programmer and inter-operating applications. One or more optional performance (P) partitions accelerate the C-partition by warming up its caches and supplying it with pre-computed values.  With minimal performance responsibilities, C-partitions can be simple, compatible, and reusable.  With&lt;br/&gt;no correctness requirements, P-partitions can be simple, powerful, and efficient.  C and P partitions can be composed to form efficient designs for different processing niches.  A single C-partition can be used in isolation (or with a simple P-partition) as a power-conscious embedded processor. Multiple C and P partitions can be combined to create a high-performance server processor.  The CPP approach simplifies both software and hardware development.&lt;br/&gt;&lt;br/&gt;Two instances of CPP have been previously studied. We have developed a new value-communication mechanism that enables others.  We will explore the theoretical aspects of CPP and the practical implications of promising schemes.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/04/2003</MinAmdLetterDate>
<MaxAmdLetterDate>02/28/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0238203</AwardID>
<Investigator>
<FirstName>Amir</FirstName>
<LastName>Roth</LastName>
<EmailAddress>amir@cis.upenn.edu</EmailAddress>
<StartDate>02/04/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<ProgramElement>
<Code>4715</Code>
<Text>COMPUTER SYSTEMS ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
