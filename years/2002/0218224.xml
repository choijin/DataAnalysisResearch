<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR: Implementation of Functional Logic Languages</AwardTitle>
<AwardEffectiveDate>09/01/2002</AwardEffectiveDate>
<AwardExpirationDate>08/31/2006</AwardExpirationDate>
<AwardTotalIntnAmount>399380.00</AwardTotalIntnAmount>
<AwardAmount>415005</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Functional logic (FL) programming languages provide several&lt;br/&gt;advantages over declarative languages based on either functions or&lt;br/&gt;predicates only.  A narrowing engine is an essential component of&lt;br/&gt;FL languages.  Narrowing engines available to date are all&lt;br/&gt;prototypical and almost universally incomplete.  The goal of this&lt;br/&gt;research is the design and development of a general, efficient and&lt;br/&gt;complete narrowing engine for FL languages.&lt;br/&gt;&lt;br/&gt;This research will define both internal and external&lt;br/&gt;representations of executable FL programs---the latter in XML.&lt;br/&gt;This approach will decouple the frontends of different compilers&lt;br/&gt;and interpreters of FL languages from the narrowing engine.  This&lt;br/&gt;separation will enable frontends for different languages to use&lt;br/&gt;the same backend.  By contrast to other contemporary research&lt;br/&gt;efforts, the proposed narrowing engine will map narrowing&lt;br/&gt;computations to computations in an imperative language.  The&lt;br/&gt;internal representation of the executable code will be a&lt;br/&gt;thin-layer bytecode over the mapping of narrowing computations to&lt;br/&gt;computations in an imperative language.  This approach promises a&lt;br/&gt;good efficiency without sacrificing tasks, such as tracing,&lt;br/&gt;debugging and profiling, that are more easily implemented in an&lt;br/&gt;interpreter.  An integral part of the implementation will be a&lt;br/&gt;run-time environment for using the narrowing engine in the backend&lt;br/&gt;of a compiler/interpreter of FL languages.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/22/2002</MinAmdLetterDate>
<MaxAmdLetterDate>04/12/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0218224</AwardID>
<Investigator>
<FirstName>Sergio</FirstName>
<LastName>Antoy</LastName>
<EmailAddress>antoy@cs.pdx.edu</EmailAddress>
<StartDate>08/22/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Portland State University</Name>
<CityName>Portland</CityName>
<ZipCode>972070751</ZipCode>
<PhoneNumber>5037259900</PhoneNumber>
<StreetAddress>1600 SW 4th Ave</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>1686</Code>
<Text>ITR SMALL GRANTS</Text>
</ProgramElement>
<ProgramReference>
<Code/>
<Text/>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
