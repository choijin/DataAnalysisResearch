<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>High-Bandwidth Memory Pipeline for Wide-Issue Processors</AwardTitle>
<AwardEffectiveDate>01/01/2002</AwardEffectiveDate>
<AwardExpirationDate>06/30/2004</AwardExpirationDate>
<AwardTotalIntnAmount>120513.00</AwardTotalIntnAmount>
<AwardAmount>120513</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010300</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Yavuz A. Oruc</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;Proposal: 0073259&lt;br/&gt;PI: Gyungho Lee&lt;br/&gt;Title: High-Bandwidth Memory Pipeline for Wide-Issue Processors &lt;br/&gt; &lt;br/&gt;Technological and architectural innovations have enabled development of powerful microprocessors that can issue several instructions concurrently at a very high clock rate. In future processors with aggressive speculation techniques, an even larger number of instruction issues per cycle are expected. Efficient handling of memory references for data access is one of the keys to achieving high performance in future processors. This research addresses methods to provide sufficient bandwidth at fast latency for data access in wide-issue processors issuing tens of instructions per cycle. The methods are based on the concept of "data decoupling". Data decoupling divides the memory reference instructions into multiple independent streams before the actual addresses of the data they access are known. Partitioned memory reference instructions are then fed into a separate memory pipeline. This research investigates the issues in effective and efficient hardware and software support for multiple memory pipelines based on data decoupling. The data decoupling approach of providing multiple memory pipelines can provide two crucial advantages over a conventional design. First, the cost and the complexity of building a large cache with many ports are reduced. Second, partitioning memory references can facilitate more specialized handling of each partitioned stream. &lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/26/2002</MinAmdLetterDate>
<MaxAmdLetterDate>09/26/2002</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0225561</AwardID>
<Investigator>
<FirstName>Gyungho</FirstName>
<LastName>Lee</LastName>
<EmailAddress>ghlee@ece.uic.edu</EmailAddress>
<StartDate>09/26/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606124305</ZipCode>
<PhoneNumber>3129962862</PhoneNumber>
<StreetAddress>809 S. Marshfield Avenue</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
</Institution>
<ProgramElement>
<Code>4715</Code>
<Text>COMPUTER SYSTEMS ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
