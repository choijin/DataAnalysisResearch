<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Structure and Algorithms, Between Logic and Algebra</AwardTitle>
<AwardEffectiveDate>06/01/2003</AwardEffectiveDate>
<AwardExpirationDate>08/31/2007</AwardExpirationDate>
<AwardAmount>100004</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>03040200</Code>
<Directorate>
<LongName>Direct For Mathematical &amp; Physical Scien</LongName>
</Directorate>
<Division>
<LongName>Division Of Mathematical Sciences</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tomek Bartoszynski</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Principal Investigator: Ralph McKenzie&lt;br/&gt;Proposal Number: 0245622&lt;br/&gt;Institution: Vanderbilt University&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Abstract: Structure and algorithms, between logic and algebra&lt;br/&gt;&lt;br/&gt;McKenzie will investigate, on the one hand, algorithmic questions which involve properties of finite algebras determined by the varieties and quasi-varieties they generate, and, on the other hand, structural questions which involve the necessary algebraic properties that must be true throughout a locally finite variety or quasi-variety as a consequence of that class possessing some natural property defined through logical or set-theoretic means.  The outstanding algorithmic questions: Is there an algorithm to determine whether the quasi-equations valid in a finite algebra F are finitely based?  Is there an algorithm to determine if the quasi-variety generated by F possesses a natural duality?  Is the class of finite algebras possessing a finite equational basis recursively enumerable?  Is the class of finite algebras generating a residually large variety recursively enumerable?  Among the important structural questions: What collection of algebraic properties is necessary and sufficient for a finitely generated variety to be finitely decidable, or to have few models?  &lt;br/&gt;&lt;br/&gt;Purely theoretical research in this branch of general algebra is driven today not by the likelihood of supplying any pressing practical needs, but rather by the sheer difficulty of the intellectual challenge and the tremendous sense of satisfaction that accompanies success.  However, this work, like all of algebra, spawns a constant stream of algorithms, many of which, though feasible, are extremely difficult to implement efficiently on a computer, providing a severe test of the state-of-the-art in hardware and software and programming skills.  The current theorem-proving programs for equational logic are a good example of this phenomenon.  There appears to be a growing realization in the theoretical computer science community that general algebra is the mathematical language in which they most need to be fluent.  The principal investigator believes that research into the interplay between, on the one hand, the existence or nonexistence of algorithms to recognize fundamental properties of finite algebras, and on the other hand, the levels of structural complexity manifested in the algebras---what this project is all about---has the potential not only to expand our understanding of the structural possibilities in finite algebraic systems (which it has already done), but to produce, some day, superior codes and ciphers for secure information transfer.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>04/08/2003</MinAmdLetterDate>
<MaxAmdLetterDate>03/27/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0245622</AwardID>
<Investigator>
<FirstName>Ralph</FirstName>
<LastName>McKenzie</LastName>
<EmailAddress>rn.mckenzie@vanderbilt.edu</EmailAddress>
<StartDate>04/08/2003</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Vanderbilt University</Name>
<CityName>Nashville</CityName>
<ZipCode>372350002</ZipCode>
<PhoneNumber>6153222631</PhoneNumber>
<StreetAddress>Sponsored Programs Administratio</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Tennessee</StateName>
<StateCode>TN</StateCode>
</Institution>
<FoaInformation>
<Code>0000099</Code>
<Name>Other Applications NEC</Name>
</FoaInformation>
<ProgramElement>
<Code>1264</Code>
<Text>ALGEBRA,NUMBER THEORY,AND COM</Text>
</ProgramElement>
<ProgramElement>
<Code>1268</Code>
<Text>FOUNDATIONS</Text>
</ProgramElement>
<ProgramReference>
<Code>0000</Code>
<Text>UNASSIGNED</Text>
</ProgramReference>
<ProgramReference>
<Code>OTHR</Code>
<Text>OTHER RESEARCH OR EDUCATION</Text>
</ProgramReference>
</Award>
</rootTag>
