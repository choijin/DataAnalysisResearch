<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>GRIDLOCK: A New Scalable Approach to Unifying Computer and Communications Security</AwardTitle>
<AwardEffectiveDate>07/15/2002</AwardEffectiveDate>
<AwardExpirationDate>06/30/2006</AwardExpirationDate>
<AwardTotalIntnAmount>600000.00</AwardTotalIntnAmount>
<AwardAmount>600000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Karl Levitt</SignBlockName>
</ProgramOfficer>
<AbstractNarration>The GRIDLOCK hypothesis is that use of a globally specified and locally interpreted policy language for specification of access-control policy can provide a new, unified approach to securing network applications. In particular, this approach can be used to specify network access-control policies and host access-control policies in combination to provide "virtual private services." GRIDLOCK simultaneously provides more security to applications, greater scalability, and unification of network access control and host access control. Policies are specified in a new policy-expression language, modeled on the KeyNote trust-management language.  This design supports compliance checking, with which credentials provided by a client can be validated to provide access to a resource.  The applicability of this layer-crossing approach to multiple virtual private services is investigated.&lt;br/&gt;&lt;br/&gt;The research focuses on the development of formal semantics for the unified access-control policy, as well as a rigorous experimental investigation, using multiple example applications. The expected results include both the new policy-expression language and the demonstration that a scalable access-control model for networked applications is practical.</AbstractNarration>
<MinAmdLetterDate>07/29/2002</MinAmdLetterDate>
<MaxAmdLetterDate>07/29/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0208972</AwardID>
<Investigator>
<FirstName>Jonathan</FirstName>
<LastName>Smith</LastName>
<EmailAddress>jms@central.cis.upenn.edu</EmailAddress>
<StartDate>07/29/2002</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Joan</FirstName>
<LastName>Feigenbaum</LastName>
<EmailAddress>joan.feigenbaum@yale.edu</EmailAddress>
<StartDate>07/29/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Angelos</FirstName>
<LastName>Keromytis</LastName>
<EmailAddress>angelos@cs.columbia.edu</EmailAddress>
<StartDate>07/29/2002</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Yale University</Name>
<CityName>New Haven</CityName>
<ZipCode>065208327</ZipCode>
<PhoneNumber>2037854689</PhoneNumber>
<StreetAddress>Office of Sponsored Projects</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
</Institution>
<ProgramElement>
<Code>2802</Code>
<Text>TRUSTED COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>1667</Code>
<Text>HIGH CONFIDENCE SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
