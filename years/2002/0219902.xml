<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR:   Guarding Quasi-Invariants:   Generalizing Specialization for System Software Security &amp; Reliability</AwardTitle>
<AwardEffectiveDate>09/01/2002</AwardEffectiveDate>
<AwardExpirationDate>08/31/2005</AwardExpirationDate>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Karl Levitt</SignBlockName>
</ProgramOfficer>
<AbstractNarration>This project will develop concepts and techniques to improve the security and reliability of system software by detecting and managing invisible links in the code.  Invisible links are dependencies among program components that are difficult to find by looking at the code alone.  A common source of invisible links is the optimization process that removes "unnecessary" code due to some system invariants.  Software reuse and evolution may invalidate these invariants, break invisible links, and cause crashes such as the Ariane 501 rocket.  Further, malicious attacks such as TOCTTOU (time-of-check to time-of-use) often exploit invisible links.  &lt;br/&gt;&lt;br/&gt;Our approach combines three techniques that have not been brought together previously.  First is a software abstraction with support for flexible correctness criteria definitions, called Transactional Activity Model, which will demark code boundaries that contain invisible links.  Second is the use of wrappers to implement the enforcement of correctness criteria on top of production software, for example, concurrency control around the Unix file system for TOCTTOU.  Third, program specialization techniques, in particular, the guarding of quasi-invariants, can make invisible links visible and generate the code to maintain the integrity of these links (e.g., making sure the file has not been replaced by the attacker).  This combination offers the promise to reveal invisible links and therefore manage those dependencies explicitly.</AbstractNarration>
<MinAmdLetterDate>08/07/2002</MinAmdLetterDate>
<MaxAmdLetterDate>07/29/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0219902</AwardID>
<Investigator>
<FirstName>Calton</FirstName>
<LastName>Pu</LastName>
<EmailAddress>calton@cc.gatech.edu</EmailAddress>
<StartDate>08/07/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
</Institution>
<ProgramElement>
<Code>1640</Code>
<Text>INFORMATION TECHNOLOGY RESEARC</Text>
</ProgramElement>
<ProgramElement>
<Code>1686</Code>
<Text>ITR SMALL GRANTS</Text>
</ProgramElement>
<ProgramReference>
<Code>1667</Code>
<Text>HIGH CONFIDENCE SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>1686</Code>
<Text>ITR SMALL GRANTS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
