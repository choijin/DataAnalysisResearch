<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Operating System and Architectural Implications of Programmable Network Interfaces</AwardTitle>
<AwardEffectiveDate>08/01/2002</AwardEffectiveDate>
<AwardExpirationDate>07/31/2006</AwardExpirationDate>
<AwardAmount>303400</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Networking server performance has improved substantially in recent years, due mostly to rapid developments in application and operating system level software and, to a lesser extent, improved hardware in the network interface. These developments have greatly reduced the CPU load of network&lt;br/&gt;servers, the amount of main memory used for networking, and the bandwidth requirements of data transfers between the CPU and its main memory. However, when the server prepares to send its data out onto the network, the network interface must still use DMA to fetch each piece of data to be transmitted&lt;br/&gt;from the main memory of the host processor, and this overhead increases work for both the local interconnect (for example, the PCI bus) and the main memory system. As network capacities increase, the bandwidth of these resources will become a performance bottleneck.&lt;br/&gt;&lt;br/&gt;While many network interfaces continue to use special-purpose hardware, several programmable network interfaces exist. These programmable network interfaces are currently used to offload computations such as TCP/IP checksum calculation from the CPU. Such optimizations provide substantial benefits, but they underutilize the flexibility of programmable network processors by using them only for fixed functionality that is already implemented efficiently in special-purpose hardware.  A key deficiency is&lt;br/&gt;that current network interfaces use storage primarily as buffer space for incoming and outgoing transmissions, thus retaining the logical semantics of a simple wire. In reality, however, a programmable network interface is a node in a heterogeneous multiprocessor system, where the CPU and main memory&lt;br/&gt;form one node and the network processor and its local memory form another.&lt;br/&gt;&lt;br/&gt;We propose to exploit the heterogeneous multiprocessing capability of a server with a programmable network interface through better utilization of both storage and computation.  First, we intend to use some of the local memory on the network interface as a cache of frequently-served content.&lt;br/&gt;This will substantially reduce the load on the local interconnect, the system memory, and the CPU for setting up DMA transfers.  Second, we intend to explore ways to utilize the flexible computation provided by network processors in the network interface.  This will further improve server performance by offloading demanding networking tasks from the CPU and also enable additional services beyond those offered today by our richer use of storage on the interface.&lt;br/&gt;&lt;br/&gt;Finally, we will consider the impact of these proposals on network processor architectures.  Network processors today have been designed primarily for routers and low-level packet processing.  However, our proposals lead to substantially different workloads for programmable network interfaces in&lt;br/&gt;servers, requiring systems with flexibility akin to modern high-performance microprocessors along with the packet processing efficiency of network processors.  We plan to investigate various hybrid designs, as well as tighter coupling between the CPU and network processor.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/21/2002</MinAmdLetterDate>
<MaxAmdLetterDate>08/06/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0209174</AwardID>
<Investigator>
<FirstName>Vijay</FirstName>
<LastName>Pai</LastName>
<EmailAddress>vpai@purdue.edu</EmailAddress>
<StartDate>06/21/2002</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Scott</FirstName>
<LastName>Rixner</LastName>
<EmailAddress>rixner@rice.edu</EmailAddress>
<StartDate>06/21/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>William Marsh Rice University</Name>
<CityName>Houston</CityName>
<ZipCode>770051827</ZipCode>
<PhoneNumber>7133484820</PhoneNumber>
<StreetAddress>6100 MAIN ST</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
</Institution>
<ProgramElement>
<Code>4715</Code>
<Text>COMPUTER SYSTEMS ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
