<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Trust Emanates from Within: A Micro-architectural and Compiler Support Framework for Trust</AwardTitle>
<AwardEffectiveDate>08/15/2002</AwardEffectiveDate>
<AwardExpirationDate>07/31/2005</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>200000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Karl Levitt</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Traditional computer security assumes a paranoid model of the world resulting in a necessity for each transaction to be secured through encryption or similar techniques. However, a typical human transaction is not paranoid, specifically between trusted parties. A similar notion of trust exists for system level transactions such as an e-commerce application. Trust obviates the need for computationally expensive security techniques.&lt;br/&gt;&lt;br/&gt;Trust has traditionally been defined at system and/or transaction level. The proposed research develops a much lower level definition of trust --specifically a program's self-assessment of its own trustworthiness. This definition of trust captures any deviations from the expected norm for the program flow behavior. Each point in program can be reached through a set of control paths, one of which is instantiated by a specific set of input. In a compromised program, however, an entirely new control path leads to the exploited program point. Such departures from the norm lower the program's trust value. An affirmation of a norm control path can raise the program's trust. When the trust value falls below a certain transaction defined threshold, the program can raise an exception to invoke a system level intrusion detection utility. The compiler is responsible to construct a set of valid, expected paths for each program point. The processor microarchitecture is responsible for interpreting and verifying the compiler generated set of valid control paths against the instantiated control paths. This research will develop compiler technology for the analysis and specification of valid control paths. The required microarchitecture support for this activity will also be explored. The expected impact of this research will be to provide a robust trust value from the program components of a transaction, which in turn makes the system level trust reflect the system state more accurately. This should allow for an easier integration of trust paradigm with the traditional security techniques.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/16/2002</MinAmdLetterDate>
<MaxAmdLetterDate>08/13/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0209078</AwardID>
<Investigator>
<FirstName>Akhilesh</FirstName>
<LastName>Tyagi</LastName>
<EmailAddress>tyagi@iastate.edu</EmailAddress>
<StartDate>08/16/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
</Institution>
<ProgramElement>
<Code>2802</Code>
<Text>TRUSTED COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>1667</Code>
<Text>HIGH CONFIDENCE SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
