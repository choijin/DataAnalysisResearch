<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR: Advanced Programming Languages for Embedded Systems</AwardTitle>
<AwardEffectiveDate>09/01/2002</AwardEffectiveDate>
<AwardExpirationDate>08/31/2005</AwardExpirationDate>
<AwardTotalIntnAmount>239996.00</AwardTotalIntnAmount>
<AwardAmount>239996</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Mark P. Jones and Richard B. Kieburtz&lt;br/&gt;CCR-0205737&lt;br/&gt;"Advanced Programming Languages for Embedded Systems"&lt;br/&gt;&lt;br/&gt;Over the last few decades we have witnessed remarkable changes in the way that computers are both used and programmed.  For example, many of the computers in use today are hidden in embedded systems.  From everyday appliances---such as washing machines and televisions---to safety and security critical systems---such as vehicle navigation and control, defense applications, or medical devices---the use of embedded computers allows manufacturers to build systems with much greater flexibility,&lt;br/&gt;functionality, and sophistication than has ever been possible before.&lt;br/&gt;&lt;br/&gt;During the same time, new programming languages have been developed with features that increase developer productivity and allow the construction of produce more reliable and flexible systems.  For example, module systems help to manage the complexity of large projects, type systems can be used to detect bugs at compile-time, and automatic storage management techniques eliminate a common source of errors.&lt;br/&gt;&lt;br/&gt;In industry, however, much of the embedded software that is being developed today is still written using older languages, or lower-level assembly languages, without the benefits that modern languages can provide.  The problem is that the results and focus of recent programming language research have not been a good match for the challenges and context of embedded systems development.  As a result, where some might have expected embedded systems developers to embrace modern programming languages, it might seem instead that many have chosen to ignore them!&lt;br/&gt;&lt;br/&gt;One source of problems arises from difficulties in capturing so-called non-functional aspects of behavior---such as execution time, power consumption, and adaptivity---that are critical requirements for many embedded systems.  Unfortunately, these are exactly the kinds of things that language designers have abstracted away from in the hope of increasing productivity and portability.  Other difficulties occur as the result of complicated treatments of features such as concurrency and event handling, which again play a central role in many embedded applications.  Significant bugs can occur if programmers do not adhere to a carefully worked out discipline of coding when they use such features, but there is very little that the underlying type system or semantics can do to help in detecting these problems.&lt;br/&gt;&lt;br/&gt;This project is working to bridge the gap between these two important fields, and to demonstrate how embedded systems development can benefit from and inform programming language research.  In particular, the project is focusing on the ongoing development and use of a high-level language called Timber that supports an implicit notion of concurrency, asynchronous communication, and non-blocking, reactive programming. All of these features are directly relevant in the context of embedded systems design.  In addition, the project is developing new analysis and compilation techniques that enable non-functional aspects of behavior to be specified using high-level constraints and policies for graceful degradation.  Because they are specified at a high level, these constraints can continue to serve as meaningful descriptions of required&lt;br/&gt;behavior, even as programs evolve to accommodate new functionality or to support new platforms.  The key to success is a declarative approach in which programmers focus on what is required, while compilers determine how it should be accomplished, using the results of analysis to guide the selection of an appropriate, low-level implementation strategy.&lt;br/&gt;&lt;br/&gt;With the transition from research to industry in mind, the project is focusing on tools for PC/104 systems, which is an industry standard and an important sector in today's embedded systems market.  In the longer term, the project is contributing to shifts in attitude and beneficial changes in the role that programming language technology can plays in the delivery of more widespread, more flexible, more reliable, and more secure embedded systems.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/05/2002</MinAmdLetterDate>
<MaxAmdLetterDate>10/14/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0205737</AwardID>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>Kieburtz</LastName>
<EmailAddress>dick@cse.ogi.edu</EmailAddress>
<StartDate>07/05/2002</StartDate>
<EndDate>10/14/2003</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Mark</FirstName>
<LastName>Jones</LastName>
<EmailAddress>mpj@cs.pdx.edu</EmailAddress>
<StartDate>07/05/2002</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Oregon Health &amp; Science University</Name>
<CityName>Portland</CityName>
<ZipCode>972393098</ZipCode>
<PhoneNumber>5034947784</PhoneNumber>
<StreetAddress>3181 S W Sam Jackson Park Rd</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
</Institution>
<ProgramElement>
<Code>2801</Code>
<Text>EMBEDDED &amp; HYBRID SYSTEMS(EHS)</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
