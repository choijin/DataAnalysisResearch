<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Uncovering and Exploiting Memory Parellelism in Pointer-Chasing Applications</AwardTitle>
<AwardEffectiveDate>07/01/2000</AwardEffectiveDate>
<AwardExpirationDate>06/30/2003</AwardExpirationDate>
<AwardTotalIntnAmount>319999.00</AwardTotalIntnAmount>
<AwardAmount>319999</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010300</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Pratibha Varma-Nelson</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;Proposal: C-CR 0000988&lt;br/&gt;PI: Donald Yeung, University of Maryland&lt;br/&gt;&lt;br/&gt;Conventional memory latency tolerance techniques are limited on pointer-intensive applications because pointer-chasing memory references must perform sequentially and prevent the overlap of multiple cache misses.  Pointer-chasing computations, however, traverse several independent pointer chains.  Such independent traversals provide a source of memory parallelism that has remained untapped by the existing latency tolerance techniques.&lt;br/&gt;&lt;br/&gt;This research develops novel pointer prefetching techniques to exploit "inter-chain" memory parallelism.  Compared to existing techniques, the new techniques address more effectively the memory bottleneck for pointer-chasing computations commonly found in non-numeric applications.  The research consists of three major thrusts.  First, techniques are developed to schedule prefetches across multiple independent pointer-chain traversals simultaneously; thus overlapping cache misses from separate pointer-chasing loops or recursive function calls.  Both compile-time and run-time scheduling techniques are investigated.  Second, architectural support is developed to issue prefetch requests according to the required prefetch schedules.  Initially, a prefetch engine capable of traversing pointer-based data structures is studied. The research also investigates into lightweight microthreads to perform prefetching inside a multithreaded CPU.  Finally, compiler support is developed to automatically extract program information for computing the prefetch schedules and for generating the prefetch requests at runtime.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/10/2000</MinAmdLetterDate>
<MaxAmdLetterDate>05/14/2002</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0000988</AwardID>
<Investigator>
<FirstName>Donald</FirstName>
<LastName>Yeung</LastName>
<EmailAddress>yeung@umd.edu</EmailAddress>
<StartDate>07/10/2000</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Chau-Wen</FirstName>
<LastName>Tseng</LastName>
<EmailAddress>tseng@cs.umd.edu</EmailAddress>
<StartDate>07/10/2000</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Maryland, College Park</Name>
<CityName>College Park</CityName>
<ZipCode>207425141</ZipCode>
<PhoneNumber>3014056269</PhoneNumber>
<StreetAddress>3112 LEE BLDG 7809 Regents Drive</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<StateCode>MD</StateCode>
</Institution>
<ProgramElement>
<Code>4715</Code>
<Text>COMPUTER SYSTEMS ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0100</Code>
</Appropriation>
<Appropriation>
<Code>0101</Code>
</Appropriation>
<Appropriation>
<Code>0102</Code>
</Appropriation>
</Award>
</rootTag>
