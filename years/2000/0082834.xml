<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>ITR: Dynamic Code Enhancement and Scheduling Techniques for Complex Simulations</AwardTitle>
    <AwardEffectiveDate>09/01/2000</AwardEffectiveDate>
    <AwardExpirationDate>02/28/2005</AwardExpirationDate>
    <AwardAmount>294994</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Xiaodong Zhang</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>One of the most important classes of programs today is large-scale adaptive and time-dependent simulations. These are increasingly important for solving important scientific problems such as particle dynamics and boundary element problems. An equally important environment for running any code is a cluster of workstations. Such a system may include single-processor and SMP nodes supporting a hybrid message passing/shared address space programming paradigm. This project will provide automated and semi-automated tools for optimizing serial performance, parallel performance, and overall resource utilization when those complex codes are run in such complex environments.&lt;br/&gt;&lt;br/&gt;Technically, the goal of the project is to develop a comprehensive dynamic code enhancement, resource management, scheduling, and performance monitoring framework. This is accomplished by relegating a number of code optimization and scheduling decisions to run-time, where they can rely on performance traces. The framework generalizes the process-thread model to a schedulable entity model in which processes and threads are treated as free and bound entities respectively. Either the programmer or the compiler can create these entities. In addition, the dynamic code enhancer performs optimizations at run-time granularity control for threads, and transformations between free and bound entities to improve performance. The overhead of dynamic code enhancement is amortized over several computation steps. An aggregate scheduler/resource manager maps the specified entities to hosts, using performance data to optimize its decisions for CPU, memory system, network, and parallel code performance. The dynamic code enhancer/scheduler framework is triggered by online performance monitoring that is automatically instrumented into the code.</AbstractNarration>
    <MinAmdLetterDate>09/05/2000</MinAmdLetterDate>
    <MaxAmdLetterDate>05/14/2002</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0082834</AwardID>
    <Investigator>
      <FirstName>Zhiyuan</FirstName>
      <LastName>Li</LastName>
      <EmailAddress>li@cs.purdue.edu</EmailAddress>
      <StartDate>09/05/2000</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Ananth</FirstName>
      <LastName>Grama</LastName>
      <EmailAddress>ayg@cs.purdue.edu</EmailAddress>
      <StartDate>09/05/2000</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Purdue Research Foundation</Name>
      <CityName>West Lafayette</CityName>
      <ZipCode>47907</ZipCode>
      <PhoneNumber>3174946200</PhoneNumber>
      <StreetAddress/>
      <CountryName>United States</CountryName>
      <StateName>Indiana</StateName>
      <StateCode>IN</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000099</Code>
      <Name>Other Applications NEC</Name>
    </FoaInformation>
  </Award>
</rootTag>
