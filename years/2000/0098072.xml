<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Automatic Verification of Concurrent Hardware and Software Systems</AwardTitle>
<AwardEffectiveDate>10/01/2001</AwardEffectiveDate>
<AwardExpirationDate>09/30/2005</AwardExpirationDate>
<AwardTotalIntnAmount>374999.00</AwardTotalIntnAmount>
<AwardAmount>374999</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010500</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCR-0098072&lt;br/&gt;Edmund Clarke&lt;br/&gt;CMU&lt;br/&gt;&lt;br/&gt;ABSTRACT:&lt;br/&gt;&lt;br/&gt;Model checking is an automatic verification technique for concurrent systems such as sequential circuit design and communication protocols in which temporal logic specifications are checked by an exhaustive search of the state space of the concurrent system. Considerable progress has been made in the last two decades, and many major companies are now using model checking. To extend the potential of the method, this project pursues several avenues of research that will enable larger hardware systems and certain software systems to be verified.&lt;br/&gt;&lt;br/&gt;Model Checking and theorem proving:  Theorem proving avoids the state explosion problem, but relies heavily on human guidance and tends to get unmanageable for large designs.  The project attempts to find and implement a practical methodology that will combine the benefits of theorem proving and model checking and apply it to verification of processors and security protocols.&lt;br/&gt;&lt;br/&gt;SAT-based Model Checking: Developed recently as a complementary approach to traditional model checking based on Binary Decision Diagrams (BDDs), SAT solvers tend to suffer less from the state explosion problem than BDDs.  This project investigates how SAT solvers and BDD techniques can be further integrated to enable verification of larger systems.&lt;br/&gt;&lt;br/&gt;Software Model Checking:  Although the major successes of model checking have been in hardware, the procedure was originally developed for software.  The first paper by Clarke and Emerson in 1981 proposed extracting the synchronization skeleton of a concurrent program and model checking it.  Advances in model checking have generated renewed interest in this approach.  This project will explore how to achieve this goal.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/22/2001</MinAmdLetterDate>
<MaxAmdLetterDate>06/26/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0098072</AwardID>
<Investigator>
<FirstName>Edmund</FirstName>
<LastName>Clarke</LastName>
<EmailAddress>emc@cs.cmu.edu</EmailAddress>
<StartDate>08/22/2001</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>4710</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYS</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
