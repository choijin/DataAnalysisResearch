<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Compiler Support for Morton-order Matrices</AwardTitle>
<AwardEffectiveDate>09/01/2000</AwardEffectiveDate>
<AwardExpirationDate>08/31/2004</AwardExpirationDate>
<AwardTotalIntnAmount>209939.00</AwardTotalIntnAmount>
<AwardAmount>225259</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Xiaodong Zhang</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Two problems that constrain big computations&lt;br/&gt;appear to relax in the face of a different&lt;br/&gt;representation for matrices and their constituent blocks.&lt;br/&gt;Morton (or Z) order represents the elements&lt;br/&gt;of a matrix in computer memory consecutively&lt;br/&gt;by larger and larger blocks.  This locality contrasts&lt;br/&gt;with row-major (or column-major) order,&lt;br/&gt;which stores only elements in the same row&lt;br/&gt;(column) close to one another.&lt;br/&gt;&lt;br/&gt;This project explores compilers for Morton order as&lt;br/&gt;the default representation for arrays in higher-level programming&lt;br/&gt;languages.&lt;br/&gt;It develops techniques to recompile existing programs&lt;br/&gt;to code that uses Morton-order internally&lt;br/&gt;and respects modern memory hierarchies and superscalar processors.&lt;br/&gt;These will interface cleanly to future programs that&lt;br/&gt;use Ahnentafel indices, a generalization of Morton order,&lt;br/&gt;to control divide-and-conquer algorithms to descend&lt;br/&gt;blocks of a matrix recursively.&lt;br/&gt;So, it also supports the design of parallel algorithms&lt;br/&gt;that decompose a computation into disjoint, memory-local processes.&lt;br/&gt;&lt;br/&gt;Morton order, and block algorithms that use it,&lt;br/&gt;implicitly improve access patterns&lt;br/&gt;into hierarchical memory:&lt;br/&gt;from registers, through caches, to RAM, to swapping disk.&lt;br/&gt;That is, Morton order enhances locality of reference&lt;br/&gt;of one process,&lt;br/&gt;while it helps to schedule multiple processes&lt;br/&gt;that don't interfere with each other.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/01/2000</MinAmdLetterDate>
<MaxAmdLetterDate>06/25/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0073491</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Wise</LastName>
<EmailAddress>dswise@cs.indiana.edu</EmailAddress>
<StartDate>09/01/2000</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Indiana University</Name>
<CityName>Bloomington</CityName>
<ZipCode>474013654</ZipCode>
<PhoneNumber>3172783473</PhoneNumber>
<StreetAddress>509 E 3RD ST</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
</Institution>
<ProgramElement>
<Code>2876</Code>
<Text>DISTRIBUTED SYSTEMS</Text>
</ProgramElement>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
