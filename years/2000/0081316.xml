<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR: Imperative Programming with Dependent Types</AwardTitle>
<AwardEffectiveDate>09/01/2000</AwardEffectiveDate>
<AwardExpirationDate>11/30/2001</AwardExpirationDate>
<AwardTotalIntnAmount>334917.00</AwardTotalIntnAmount>
<AwardAmount>218646</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Proposal Number: ITR-0081316&lt;br/&gt;PI: Xi, Hongwei&lt;br/&gt;Institution: West Campus, University of Cincinnati&lt;br/&gt;TITLE: Imperative Programming with Dependent Types&lt;br/&gt;&lt;br/&gt;Programming is notoriously error-prone. As a consequence, a great&lt;br/&gt;number of approaches have been developed to facilitate program error&lt;br/&gt;detection.  The proposed research intends to enrich practical imperative&lt;br/&gt;programming with a type discipline that allows for specification and&lt;br/&gt;inference of significantly more precise information on programs than&lt;br/&gt;those enforced in languages such as Java and Standard ML.  The primary&lt;br/&gt;motivation for developing such a type discipline is to enable the&lt;br/&gt;programmer to capture with types more program properties such as&lt;br/&gt;memory safety and then enforce these captured properties through&lt;br/&gt;type-checking.  This practice allows for detecting more program errors&lt;br/&gt;in less time. Another motivation is to use the type discipline to&lt;br/&gt;generate memory safety proofs for low-level code and thus effectively&lt;br/&gt;produce proof-carrying code that asserts its own memory safety.  In&lt;br/&gt;short, the research studies a type discipline for practical imperative&lt;br/&gt;programming at both high and low levels, aiming for producing software&lt;br/&gt;that is not only more robust to run but also less costly to maintain.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/11/2000</MinAmdLetterDate>
<MaxAmdLetterDate>05/30/2002</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0081316</AwardID>
<Investigator>
<FirstName>Hongwei</FirstName>
<LastName>Xi</LastName>
<EmailAddress>hwxi@cs.bu.edu</EmailAddress>
<StartDate>09/11/2000</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Cincinnati Main Campus</Name>
<CityName>Cincinnati</CityName>
<ZipCode>452210222</ZipCode>
<PhoneNumber>5135564358</PhoneNumber>
<StreetAddress>University Hall, Suite 530</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
</Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramReference>
<Code>1640</Code>
<Text>INFORMATION TECHNOLOGY RESEARC</Text>
</ProgramReference>
<ProgramReference>
<Code>1658</Code>
<Text>SOFTWARE</Text>
</ProgramReference>
<ProgramReference>
<Code>1660</Code>
<Text>ITR COMPETITION FOR UNDER $500K</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
