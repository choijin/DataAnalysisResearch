<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Representation Specification and Optimization of Object-Oriented Languages</AwardTitle>
<AwardEffectiveDate>09/01/2000</AwardEffectiveDate>
<AwardExpirationDate>08/31/2003</AwardExpirationDate>
<AwardTotalIntnAmount>249782.00</AwardTotalIntnAmount>
<AwardAmount>249782</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Xiaodong Zhang</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Craig Chambers&lt;br/&gt;&lt;br/&gt;Higher-level programming languages, such as Smalltalk, ML, and Java, can make&lt;br/&gt;programming easier, more reliable, and more flexible than lower-level&lt;br/&gt;programming languages, such as C and C++.  Unfortunately, these software&lt;br/&gt;engineering benefits often come at significant cost to run-time efficiency.&lt;br/&gt; One&lt;br/&gt;important obstacle to achieving good performance for higher-level languages is&lt;br/&gt;the relatively inefficient approach to the representation and layout of data&lt;br/&gt;structures, where data structures are represented uniformly as heap-allocated&lt;br/&gt;structures referenced indirectly via pointers.&lt;br/&gt;&lt;br/&gt;This research aims to reduce the performance costs of this high-level data&lt;br/&gt;model&lt;br/&gt;while retaining its software engineering benefits for programmers.&lt;br/&gt;Declarative&lt;br/&gt;techniques will be developed for specifying the layout of data structures and&lt;br/&gt;for specifying optimizations to data structure layouts.  Techniques will be&lt;br/&gt;developed for deciding which layout optimizations to apply, based on a mix of&lt;br/&gt;programmer suggestions, automatic static analyses, and dynamic profile&lt;br/&gt;feedback.  A flexible, language-independent compiler intermediate&lt;br/&gt;representation&lt;br/&gt;will be designed that explicitly maintains, checks, and optimizes&lt;br/&gt;representations.  The techniques will be implemented in an optimizing&lt;br/&gt;compiler,&lt;br/&gt;and their effectiveness measured on a range of large benchmark programs in a&lt;br/&gt;variety of object-oriented programming languages.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/29/2000</MinAmdLetterDate>
<MaxAmdLetterDate>05/30/2002</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0073379</AwardID>
<Investigator>
<FirstName>Craig</FirstName>
<LastName>Chambers</LastName>
<EmailAddress>chambers@cs.washington.edu</EmailAddress>
<StartDate>08/29/2000</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
</Institution>
<ProgramElement>
<Code>2876</Code>
<Text>DISTRIBUTED SYSTEMS</Text>
</ProgramElement>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
