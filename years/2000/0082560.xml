<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR:  Static Checking in an Extended Type System</AwardTitle>
<AwardEffectiveDate>09/01/2000</AwardEffectiveDate>
<AwardExpirationDate>08/31/2002</AwardExpirationDate>
<AwardTotalIntnAmount>248879.00</AwardTotalIntnAmount>
<AwardAmount>248879</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCR-0082560&lt;br/&gt;Static Checking in an Extended Type System&lt;br/&gt;&lt;br/&gt;PIs: Natarajan Shankar and Sam Owre&lt;br/&gt;&lt;br/&gt;Abstract: &lt;br/&gt;A safe programming language is one whose type system can, at compile time,&lt;br/&gt;detect potential runtime errors such as null dereferences, out-of-bounds&lt;br/&gt;array indices, division by zero, and inapplicable method invocations.  Few&lt;br/&gt;widely used programming languages are safe in this sense.  Specification&lt;br/&gt;languages like PVS, however, contain safety features such as predicate&lt;br/&gt;subtypes and dependent types that can be used to ensure the absence of&lt;br/&gt;runtime errors. The design of safe programming languages requires an &lt;br/&gt;integration of specification and programming languages through the use &lt;br/&gt;of enriched type systems.  These types increase the expressiveness&lt;br/&gt;and naturalness of both executable descriptions (programs) and&lt;br/&gt;non-executable descriptions (mathematical specifications).&lt;br/&gt;&lt;br/&gt;We extend the type systems for widely used languages, such as Java, with&lt;br/&gt;PVS-like specification constructs.  We develop an effective static&lt;br/&gt;typechecker for this type system that detects many common programming&lt;br/&gt;errors.  The research builds on advances in programming languages, type&lt;br/&gt;theories, program optimization techniques, decision procedures, and&lt;br/&gt;program analysis methods, and tools such as LCLint, ESC, and BANE.  An&lt;br/&gt;extended type system for programming languages can be a foundation for the&lt;br/&gt;design and development of well-specified, efficient, and safe programs.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/11/2000</MinAmdLetterDate>
<MaxAmdLetterDate>09/11/2000</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0082560</AwardID>
<Investigator>
<FirstName>Natarajan</FirstName>
<LastName>Shankar</LastName>
<EmailAddress>shankar@csl.sri.com</EmailAddress>
<StartDate>09/11/2000</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sam</FirstName>
<LastName>Owre</LastName>
<EmailAddress>owre@csl.sri.com</EmailAddress>
<StartDate>09/11/2000</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SRI International</Name>
<CityName>Menlo Park</CityName>
<ZipCode>940253493</ZipCode>
<PhoneNumber>7032478529</PhoneNumber>
<StreetAddress>333 RAVENSWOOD AVE</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramReference>
<Code>1660</Code>
<Text>ITR COMPETITION FOR UNDER $500K</Text>
</ProgramReference>
<ProgramReference>
<Code>1667</Code>
<Text>HIGH CONFIDENCE SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
