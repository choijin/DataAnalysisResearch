<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Model Checking and Beyond</AwardTitle>
<AwardEffectiveDate>06/01/2001</AwardEffectiveDate>
<AwardExpirationDate>05/31/2005</AwardExpirationDate>
<AwardTotalIntnAmount>315000.00</AwardTotalIntnAmount>
<AwardAmount>315000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010500</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>There is a chronic need for more effective methods of designing correct and robust computer software as well as hardware.  A method called "Model Checking" has been developed, providing an algorithmic means for establishing correctness of nominally finite state programs. Computer manufacturers&lt;br/&gt;such as IBM, Intel, and Motorola are finding model checking useful for verifying computer hardware circuits of moderate size.  However, further research is required before model checking can be applied successfully to large hardware designs and to software.  Software is more difficult to construct and verify than hardware  due to its less uniform organization and sheer scale.  Techniques to cope with irregular organization based on partial order and asymmetry reduction facilitating application of model checking to large software systems will be investigated.&lt;br/&gt;Other central topics of investigation include: new and improved basic techniques, including abstractions, algorithms, and data structures, for more efficient model checking; integration of model checking with other program design methods; &lt;br/&gt;automatic program synthesis via model checking; and the feasibility of extending the dichotomous (correct/incorrect) framework of conventional model checking using richer program robustness notions.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/14/2001</MinAmdLetterDate>
<MaxAmdLetterDate>03/07/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0098141</AwardID>
<Investigator>
<FirstName>E. Allen</FirstName>
<LastName>Emerson</LastName>
<EmailAddress>emerson@cs.utexas.edu</EmailAddress>
<StartDate>05/14/2001</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
</Institution>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
