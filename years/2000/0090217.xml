<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Synthesis of Block-recursive Codes for Deep Memory Hierarchies</AwardTitle>
<AwardEffectiveDate>06/01/2001</AwardEffectiveDate>
<AwardExpirationDate>05/31/2004</AwardExpirationDate>
<AwardTotalIntnAmount>548314.00</AwardTotalIntnAmount>
<AwardAmount>548314</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Xiaodong Zhang</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Modern computers have multi-level memory hierarchies in which the cost of data access may increase by an order of magnitude or more from one level to the next. On these machines, a program that touches a large amount of data runs well only if it exhibits locality - that is, if most of its references are satisfied by the highest level of the memory hierarchy. Unfortunately, many programs do not exhibit locality.&lt;br/&gt;&lt;br/&gt;For 2-level memory hierarchies, the numerical linear algebra community has addressed the problem by implementing libraries of blocked codes such as LAPACK. For multi-level memory hierarchies, they are developing libraries of block-recursive algorithms. &lt;br/&gt;&lt;br/&gt;The problem with any library is that it is not general-purpose - for example, the BLAS and LAPACK libraries cannot be used for obtaining good performance on finite-difference codes. This research will develop a general-purpose restructuring compiler for synthesizing block-recursive codes from standard iterative ones. The compiler is general-purpose in the sense that in principle, it can restructure any program in which dense arrays are accessed by affine array references. The technology proposed  has already been used successfully to restructure iterative codes into LAPACK-style blocked codes.&lt;br/&gt;&lt;br/&gt;The approach to be taken consists of:&lt;br/&gt;&lt;br/&gt;--- converting the problem of generating code that touches data in a block-recursive order into the problem of generating code that walks over a certain iteration space called the product space in a block-recursive or space-filling order. This enables standard techniques from dependence analysis to be used to synthesize the appropriate restructuring transformations.&lt;br/&gt;&lt;br/&gt;- switching to an iterative code once the problem size becomes small enough. The threshold problem size at which this transition should happen may be difficult to determine analytically. In our system, the compiler will estimate this size using a simple abstraction of the underlying machine architecture. For frequently used codes however, the system will use a new approach called empirical optimization - whenever there are free cycles on the machine, our system will experiment with different threshold values, remember the best threshold value for each input size, and use that value when that code is run again.&lt;br/&gt;&lt;br/&gt;- developing a symbolic analysis technique called fractal symbolic analysis for verifying the legality of transformations on codes like LU with pivoting (since it is well-known that dependence analysis is inadequate for restructuring codes such as LU factorization with pivoting). However, it is not yet known how to synthesize the right locality-enhancing transformations from information provided by fractal symbolic analysis. Such techniques will be developed and integrated with dependence-based techniques. &lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/05/2001</MinAmdLetterDate>
<MaxAmdLetterDate>04/14/2003</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0090217</AwardID>
<Investigator>
<FirstName>Keshav</FirstName>
<LastName>Pingali</LastName>
<EmailAddress>pingali@cs.utexas.edu</EmailAddress>
<StartDate>06/05/2001</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Paul</FirstName>
<LastName>Stodghill</LastName>
<EmailAddress>stodghil@cs.cornell.edu</EmailAddress>
<StartDate>06/05/2001</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cornell University</Name>
<CityName>Ithaca</CityName>
<ZipCode>148502820</ZipCode>
<PhoneNumber>6072555014</PhoneNumber>
<StreetAddress>373 Pine Tree Road</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
</Institution>
<FoaInformation>
<Code>0000099</Code>
<Name>Other Applications NEC</Name>
</FoaInformation>
<ProgramElement>
<Code>4080</Code>
<Text>ADVANCED COMP RESEARCH PROGRAM</Text>
</ProgramElement>
<ProgramReference>
<Code>4080</Code>
<Text>ADVANCED COMP RESEARCH PROGRAM</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
