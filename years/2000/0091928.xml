<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Non-Relational Implementation of a Class of Decision-Support Relational Queries: the For-loop Approach</AwardTitle>
<AwardEffectiveDate>02/15/2001</AwardEffectiveDate>
<AwardExpirationDate>01/31/2005</AwardExpirationDate>
<AwardTotalIntnAmount>176335.00</AwardTotalIntnAmount>
<AwardAmount>176335</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Maria Zemankova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Advanced database applications like Decision-Support Systems (DSS) and data mining use existing database technology (relational databases and their query language, SQL) to extract high-level information from large amounts of data. Since SQL is a declarative language (it allows the user to specify what is needed, not how to obtain it), and most SQL queries can be implemented in different ways, a process of optimization is carried out which chooses the most efficient implementation known to the system for each query. However, as both the amount of data to be processed and the complexity of the queries used grow, optimization is becoming more difficult and more important. This project explores a novel approach to the optimization of complex SQL queries, called the For-loop approach, which goes beyond the relational framework to try to find more efficient implementations. The results of this project will provide insight into the strengths and limitations of optimizations for SQL. The new approach has the potential to provide significant performance improvements over current techniques for a restricted (but important) class of queries, including queries with subqueries where the FROM and WHERE clause of query and subquery exhibit significant overlap (these queries are not uncommon in DSS environments). The results of this research will be actively disseminated by the PI in order to attract collaboration with industry and with other researchers.</AbstractNarration>
<MinAmdLetterDate>02/12/2001</MinAmdLetterDate>
<MaxAmdLetterDate>03/04/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0091928</AwardID>
<Investigator>
<FirstName>Antonio</FirstName>
<LastName>Badia</LastName>
<EmailAddress>abadia@louisville.edu</EmailAddress>
<StartDate>02/12/2001</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Louisville Research Foundation Inc</Name>
<CityName>Louisville</CityName>
<ZipCode>402021959</ZipCode>
<PhoneNumber>5028523788</PhoneNumber>
<StreetAddress>Atria Support Center</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Kentucky</StateName>
<StateCode>KY</StateCode>
</Institution>
<FoaInformation>
<Code>0104000</Code>
<Name>Information Systems</Name>
</FoaInformation>
<ProgramElement>
<Code>6855</Code>
<Text>INFORMATION &amp; KNOWLEDGE MANAGE</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
