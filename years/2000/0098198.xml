<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Computation and Complexity at Higher-Types</AwardTitle>
<AwardEffectiveDate>06/15/2001</AwardEffectiveDate>
<AwardExpirationDate>05/31/2005</AwardExpirationDate>
<AwardTotalIntnAmount>186781.00</AwardTotalIntnAmount>
<AwardAmount>186781</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010100</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Kathleen M. O'Hara</SignBlockName>
</ProgramOfficer>
<AbstractNarration>A higher-type function is a function that takes as arguments, or&lt;br/&gt;produces as results, other functions.  Higher-type functions have&lt;br/&gt;proven to be valuable tools in both theoretical and practical work&lt;br/&gt;in programming.  Indeed, higher-type constructs (e.g., classes,&lt;br/&gt;components, modules, etc.)  pervade contemporary computing.  There&lt;br/&gt;is a great deal of useful theoretical work in support of reasoning&lt;br/&gt;about the correctness of programs that make use of higher-order&lt;br/&gt;features.  In contrast, there has been relatively little theoretical&lt;br/&gt;work in support of reasoning about the performance (e.g., time and&lt;br/&gt;space usage) of such programs.  It is clearly a great folly to&lt;br/&gt;ignore correctness in program development, but it is nearly as great&lt;br/&gt;a folly to ignore performance.  Thus there is a serious gap in the&lt;br/&gt;scientific underpinnings of programs that use higher-type&lt;br/&gt;features---even benchmarking a higher-type procedure is problematic&lt;br/&gt;in the absence of a theory to help interpret what the results mean.&lt;br/&gt;&lt;br/&gt;Higher-type complexity theory extends the general program of&lt;br/&gt;computational complexity to a higher-type setting.  This project&lt;br/&gt;proposes the investigation of several topics in higher-type&lt;br/&gt;complexity theory, particularly its relation to the recent results&lt;br/&gt;on realizer models of higher-type computation.  These topics&lt;br/&gt;include:&lt;br/&gt;&lt;br/&gt;1. Continuity and feasible computation.  The (Scott) continuous&lt;br/&gt;functionals of finite type are a key object of study in programming&lt;br/&gt;language theory. There are examples of continuous functionals of&lt;br/&gt;finite type that are arguably feasibly computable, but do not fit&lt;br/&gt;within prior notions of higher-type feasibility.  This project&lt;br/&gt;proposes use an appropriate polynomial-time version of Kleene's&lt;br/&gt;associate/realizer framework to develop and investigate notions of&lt;br/&gt;feasible computation in the context of the continuous functionals.&lt;br/&gt;&lt;br/&gt;2. Prompt fixed points.  Various sorts of fixed points are another&lt;br/&gt;key tool in the theory of programming languages, especially in&lt;br/&gt;explaining forms of recursion.  The project proposes to explore&lt;br/&gt;certain form of feasible, or prompt, fixed points so as to provide a&lt;br/&gt;general context for recent work on feasible higher-type recursions.&lt;br/&gt;&lt;br/&gt;3. Efficient programming systems for SR. The sequentially realizable&lt;br/&gt;functionals (SR) is another class of functionals that have been the&lt;br/&gt;focus of some important in programming languages theory.  A key&lt;br/&gt;question about SR is whether there is a complexity-theoretically&lt;br/&gt;reasonable programming language for the class.  The PI has a partial&lt;br/&gt;negative result related to this.  The project proposes to extend&lt;br/&gt;this work. &lt;br/&gt;&lt;br/&gt;4. Maximal notions of higher-type computation.  The project proposes&lt;br/&gt;to show that the (effective) continuous and the (effective) SR&lt;br/&gt;functionals both satisfy a structural maximality property amongst&lt;br/&gt;higher-type notions of computations.</AbstractNarration>
<MinAmdLetterDate>06/20/2001</MinAmdLetterDate>
<MaxAmdLetterDate>07/22/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0098198</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Royer</LastName>
<EmailAddress>jsroyer@syr.edu</EmailAddress>
<StartDate>06/20/2001</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Syracuse University</Name>
<CityName>SYRACUSE</CityName>
<ZipCode>132441200</ZipCode>
<PhoneNumber>3154432807</PhoneNumber>
<StreetAddress>OFFICE OF SPONSORED PROGRAMS</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
</Institution>
<ProgramElement>
<Code>2860</Code>
<Text>THEORY OF COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
