<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>A Decoupled I/O Architecture for Data-Intensive Cluster Computing</AwardTitle>
<AwardEffectiveDate>08/15/2001</AwardEffectiveDate>
<AwardExpirationDate>07/31/2004</AwardExpirationDate>
<AwardTotalIntnAmount>128001.00</AwardTotalIntnAmount>
<AwardAmount>128001</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Xiaodong Zhang</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Cluster computing exploits the exponential growth in processing power, memory/disk capacity, and network link speed of commodity hardware developed in the PC industry to achieve excellent price-performance, and is becoming a major platform for scientific computation, Web page and file servicing, as well as large-scale information analysis applications such as data mining and knowledge discovery. A distinct characteristic&lt;br/&gt;shared by many emerging workloads on PC clusters is the requirement for intensive disk data accesses during program computation. The fundamental technique to address the performance problems associated with disk I/O is to overlap disk access with program computation so that the I/O delays are completely masked. Disk prefetching is one incarnation of this technique. In this project, we propose an automatic application-&lt;br/&gt;specific file prefetching scheme that exploits specific applications' access patterns to the fullest extent and achieves close to perfect prefetching. The key idea is to apply the concept of decoupled architecture, which was originally proposed to bridge the gap between CPU and memory, to overlap computation with disk I/O. Given an application program, the compiler automatically translates it into two threads, one corresponding&lt;br/&gt;to the original program (computation thread) and the other including all statements in the original program that are related to disk I/O (prefetch thread). At run time, the prefetch thread is scheduled to be suficiently ahead of the computation thread so that all the file access requests of the computation thread are satisfied in the file system cache, which is populated by the prefetch thread anticipatively. To validate the decoupled I/O architecture, we will design, implement, and evaluate an active parallel disk I/O subsystem called Platypus that embodies the application-specific file prefetching scheme and that is designed to be a modular building block for scalable PC cluster systems that aim at data-intensive computing. Platypus consists of a source-to-source translator to generate computation and prefetch threads from a SPMD parallel program&lt;br/&gt;automatically, a run-time thread scheduler that coordinates the execution of prefetch threads on the I/O nodes, and a cache manager that maximizes main memory utilization efficiency by optimally balancing the benefits of file caching and prefetching.</AbstractNarration>
<MinAmdLetterDate>08/13/2001</MinAmdLetterDate>
<MaxAmdLetterDate>08/13/2001</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0083497</AwardID>
<Investigator>
<FirstName>Tzi-Cker</FirstName>
<LastName>Chiueh</LastName>
<EmailAddress>chiueh@cs.sunysb.edu</EmailAddress>
<StartDate>08/13/2001</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Stony Brook</Name>
<CityName>Stony Brook</CityName>
<ZipCode>117940001</ZipCode>
<PhoneNumber>6316329949</PhoneNumber>
<StreetAddress>WEST 5510 FRK MEL LIB</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
</Institution>
<FoaInformation>
<Code>0000099</Code>
<Name>Other Applications NEC</Name>
</FoaInformation>
<ProgramElement>
<Code>4080</Code>
<Text>ADVANCED COMP RESEARCH PROGRAM</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
