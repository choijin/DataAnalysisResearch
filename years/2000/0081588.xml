<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ITR:  Translation Validation for Advanced Compiler Optimizations</AwardTitle>
<AwardEffectiveDate>09/01/2000</AwardEffectiveDate>
<AwardExpirationDate>08/31/2005</AwardExpirationDate>
<AwardTotalIntnAmount>499554.00</AwardTotalIntnAmount>
<AwardAmount>499554</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Timothy M. Pinkston</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Compilers are an essential component in the software engineering process. They bridge the abstraction gap between high-level programming languages, where the design and reasoning about software takes place, and intermediate or machine level, at which distribution or execution takes place.  This project explores strategies for increasing the reliability of compilers by constructing a compiler companion, called a translation validator, that watches the compilation as it unfolds and checks that each transformation preserves the operational meaning of the program being compiled. This promises to be a feasible alternative to compiler verification since it is, in general, easier to verify that a transformation has been performed correctly than to verify the program that performs it.   Two major benefits are expected from translation validation. One is a significant increase in the effectiveness of testing during development and maintenance of compilers. The other is a methodology for translating along with the source code the formal arguments obtained by source-level static analyses into corresponding formal arguments at the level of the executable that is being distributed and executed. This would allow a code receiver to check quickly that the code has certain properties of interest, such as secure behavior, without having access to source code.</AbstractNarration>
<MinAmdLetterDate>09/08/2000</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2002</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0081588</AwardID>
<Investigator>
<FirstName>George</FirstName>
<LastName>Necula</LastName>
<EmailAddress>necula@cs.berkeley.edu</EmailAddress>
<StartDate>09/08/2000</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<ProgramElement>
<Code>1640</Code>
<Text>INFORMATION TECHNOLOGY RESEARC</Text>
</ProgramElement>
<ProgramReference>
<Code>1658</Code>
<Text>SOFTWARE</Text>
</ProgramReference>
<ProgramReference>
<Code>1660</Code>
<Text>ITR COMPETITION FOR UNDER $500K</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
