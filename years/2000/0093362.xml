<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:  A Formally Verified Environment for the Production of Secure Software</AwardTitle>
<AwardEffectiveDate>02/15/2001</AwardEffectiveDate>
<AwardExpirationDate>07/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>345507</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>This project studies new architectures for verifiably safe execution of software.  The first area of research is the production of a new generation of&lt;br/&gt;compilers, called verifying compilers, that can only compile safe code according to pre-determined safety policies, such as protection of private information and resource-bounded computation. The second area is the production of code accompanied by formal proofs guaranteeing that code's compliance with&lt;br/&gt;pre-determined safety policies, in the style of Proof-Carrying Code (PCC).&lt;br/&gt;&lt;br/&gt;   Typed languages guaranteeing different notions of safety criteria, including assembly languages and machine code, will be defined, studied, and modeled.  These languages will be relevant to both the design of verifying compilers and the PCC project.  One approach will be using dependent type systems to define powerful intermediate and assembly languages.  Furthermore, a prototype verifying compiler will be built by extending an existing compiler with a verifying module, using a type-theory based approach to program safety.  Representative safety policies will be implemented, and examples developed to show that malicious code cannot be certified. The research component will be adapted for inclusion in the graduate curriculum.  Furthermore, a student will be supervised towards a PhD in state-of-the-art compiler technology.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/14/2001</MinAmdLetterDate>
<MaxAmdLetterDate>01/28/2010</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0093362</AwardID>
<Investigator>
<FirstName>Adriana</FirstName>
<LastName>Compagnoni</LastName>
<EmailAddress>acompagn@stevens.edu</EmailAddress>
<StartDate>02/14/2001</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stevens Institute of Technology</Name>
<CityName>HOBOKEN</CityName>
<ZipCode>070305991</ZipCode>
<PhoneNumber>2012168762</PhoneNumber>
<StreetAddress>CASTLE POINT ON HUDSON</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
