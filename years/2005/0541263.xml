<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: Finite-State Verification for High-Performance Computing</AwardTitle>
<AwardEffectiveDate>04/15/2006</AwardEffectiveDate>
<AwardExpirationDate>03/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;&lt;br/&gt;0541035/0540948/0541263&lt;br/&gt;PI (lead/UMass): Stephen F. Siegel&lt;br/&gt;co-PI (UMass): George Avrunin&lt;br/&gt;PI (UNL): Matthew Dwyer&lt;br/&gt;PI (UChicago): Andrew Siegel&lt;br/&gt;&lt;br/&gt;Collaborative Research: Finite-State Verification for High-Performance Computing&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;High performance computation (HPC) has revolutionized a wide range of scientific and engineering endeavors, including climate modeling, computational fluid dynamics, molecular engineering, and the design of&lt;br/&gt;buildings, airplanes, and cars.  Parallel computers, some of which contain over one hundred thousand processors, make this computation possible.  Unfortunately, programming these machines is notoriously&lt;br/&gt;difficult: parallel programs are extremely complex, difficult to debug, and can behave in unpredictable ways.  As scientific applications increase in scale and complexity, the effort required to develop them is growing at an alarming rate, and there is an emerging consensus that new development methods are required.&lt;br/&gt;&lt;br/&gt;The goal of this project is to develop a body of finite-state verification (FSV) techniques that will allow HPC developers to root out bugs and confirm that their programs meet specified requirements.  FSV techniques involve the application of algorithmic methods to a formal model of the program being analyzed.  While these techniques have been used successfully in some other programming domains, a number of challenges must be overcome before they can be successfully applied to HPC software.  The ultimate result will be an increase in productivity of HPC developers and an increased confidence in the correctness of their programs.</AbstractNarration>
<MinAmdLetterDate>04/12/2006</MinAmdLetterDate>
<MaxAmdLetterDate>02/05/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0541263</AwardID>
<Investigator>
<FirstName>Matthew</FirstName>
<LastName>Dwyer</LastName>
<EmailAddress>md3cn@virginia.edu</EmailAddress>
<StartDate>04/12/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Nebraska-Lincoln</Name>
<CityName>Lincoln</CityName>
<ZipCode>685031435</ZipCode>
<PhoneNumber>4024723171</PhoneNumber>
<StreetAddress>151 Prem S. Paul Research Center</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Nebraska</StateName>
<StateCode>NE</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
