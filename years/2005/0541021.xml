<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Reasoning about Data Structures, Concurrency, and Resources</AwardTitle>
<AwardEffectiveDate>04/15/2006</AwardEffectiveDate>
<AwardExpirationDate>03/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>375636</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Abstract&lt;br/&gt;0541021&lt;br/&gt;John C. Reynolds&lt;br/&gt;Carnegie Mellon University&lt;br/&gt;&lt;br/&gt;Reasoning about Shared Structure and Concurrency&lt;br/&gt;&lt;br/&gt;The specification and verification of computer programs is investigated, along with the semantics needed to insure the soundness of verification.  Of specific interest are:&lt;br/&gt;&lt;br/&gt;Separation Logic, which treats programs employing shared mutable data structures or shared-variable concurrency.  The goal is to extend the logic to high-level languages using safe type systems and automatic&lt;br/&gt;storage reclamation, and also to machine-level languages permitting pointers to code to be embedded within data structures.&lt;br/&gt;&lt;br/&gt;Grainless Semantics, which treats shared-variable concurrency without imposing any default level of atomic operations, by regarding race conditions (i.e., simultaneous access to the same storage by concurrent&lt;br/&gt;processes) as catastrophic events.  The goal is to simplify the understanding of programs by avoiding useless distinctions between programs with unacceptable behavior.&lt;br/&gt;&lt;br/&gt;The intellectual merit of this research is that it will substantially increase the domain of discourse of separation logic, and facilitate soundness arguments for this and other logics for shared-variable&lt;br/&gt;concurrency.&lt;br/&gt;&lt;br/&gt;The broader impact is that it will become easier to avoid errors in an important class of useful but difficult computer programs.  Eventually, it should be possible to automate proof-checking in the logic so that&lt;br/&gt;programs in this class can be accompanied by    machine-checkable proofs of their correctness.  &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>04/07/2006</MinAmdLetterDate>
<MaxAmdLetterDate>05/22/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0541021</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Reynolds</LastName>
<EmailAddress>john.reynolds@cs.cmu.edu</EmailAddress>
<StartDate>04/07/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
