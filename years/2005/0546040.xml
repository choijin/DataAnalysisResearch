<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Dataflow Analysis for Modern Software Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2006</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>407000.00</AwardTotalIntnAmount>
<AwardAmount>407000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>John Reppy</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Proposal Number: 0546040&lt;br/&gt;&lt;br/&gt;Proposal Title: CAREER: Dataflow Analysis for Modern Software Systems&lt;br/&gt;&lt;br/&gt;PI: Atanas Rountev, Ohio State University&lt;br/&gt;&lt;br/&gt;Interprocedural dataflow analysis plays a central role in tools for&lt;br/&gt;software maintenance, testing, verification, and optimization.  Modern&lt;br/&gt;software has characteristics that cannot be handled by traditional&lt;br/&gt;approaches: it typically uses multiple distributed components, and it&lt;br/&gt;often employs dynamic mechanisms that are hard to analyze statically.&lt;br/&gt;Existing analyses fail in the presence of such features, making it&lt;br/&gt;hard to provide sophisticated tool support for real-world software&lt;br/&gt;systems. In turn, this reduces programmer productivity and leads to&lt;br/&gt;lower software quality. This project focuses on three challenges posed&lt;br/&gt;by modern software: reusable components, such as standard libraries;&lt;br/&gt;distributed software; and run-time adaptation through dynamic class&lt;br/&gt;loading and reflection. This effort is a significant step towards&lt;br/&gt;building powerful software tools that are truly usable and useful in&lt;br/&gt;the software industry.&lt;br/&gt;&lt;br/&gt;The theoretical foundations of dataflow analysis are generalized to&lt;br/&gt;achieve precision and scalability in the presence of reusable&lt;br/&gt;components. Widely used analyses (e.g., points-to analysis, MOD/REF&lt;br/&gt;analysis, constant propagation, and object naming) are adapted to&lt;br/&gt;distributed component-based systems. The analyses are systematically&lt;br/&gt;generalized to handle dynamic language features. Dissemination is&lt;br/&gt;achieved through open-source analysis implementations and two program&lt;br/&gt;understanding tools. The broader impacts of the project include (1)&lt;br/&gt;research infrastructure which provides scalable off-the-shelf&lt;br/&gt;implementations of several fundamental static analyses, (2) tools that&lt;br/&gt;supply high-quality support for program understanding, which will&lt;br/&gt;improve productivity and software quality, and (3) integration of the&lt;br/&gt;research with education, which will increase the students' proficiency&lt;br/&gt;in current methods and tools for software development, and will&lt;br/&gt;accelerate their career progress.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/15/2006</MinAmdLetterDate>
<MaxAmdLetterDate>07/21/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0546040</AwardID>
<Investigator>
<FirstName>Atanas</FirstName>
<LastName>Rountev</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Atanas Rountev</PI_FULL_NAME>
<EmailAddress>rountev@cse.ohio-state.edu</EmailAddress>
<PI_PHON>6142927203</PI_PHON>
<NSF_ID>000191396</NSF_ID>
<StartDate>09/15/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University Research Foundation -DO NOT USE</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888734</PhoneNumber>
<StreetAddress>1960 KENNY RD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>071650709</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY RESEARCH FOUNDATION, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName>Columbus</CityName>
<StateCode>OH</StateCode>
<ZipCode>432101016</ZipCode>
<StreetAddress><![CDATA[Office of Sponsored Programs]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0106</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2006~87000</FUND_OBLG>
<FUND_OBLG>2007~80000</FUND_OBLG>
<FUND_OBLG>2008~87579</FUND_OBLG>
<FUND_OBLG>2009~81042</FUND_OBLG>
<FUND_OBLG>2010~71379</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project produced new theoretical techniques and analysis<br />algorithms for improving the correctness and performance of software<br />systems. In modern object-oriented software, it is difficult to<br />perform automated software analysis because of the scale of the<br />systems and the challenging features of programming languages. Our<br />work addresses this problem by considering a compositional approach in<br />which software components are analyzed separately, and the results are<br />combined to determine properties of the entire system. We have<br />developed theoretical approaches to design such analyses, and<br />demonstrated them through a large number of new analysis algorithms.<br />The conclusion from this work is that the generality, scalability, and<br />precision of software analysis can be improved significantly with the<br />help of the proposed approach.<br /><br />Our work showed experimentally that the proposed techniques can lead<br />to dramatic cost reduction for many commonly-used analyses. Based on<br />these techniques, we developed novel analyses for potential execution<br />inefficiencies. This work showed, for the first time, that effective<br />detection of performance problems in object-oriented software is<br />possible in advance, without running the software. We also presented a<br />new and more effective way to handle dynamic features of programming<br />languages; this work extended significantly the scope of what is<br />currently possible to achieve with software analysis algorithms in the<br />presence of such dynamic features.<br /><br />Our techniques can serve as basis for future software analyses<br />developed by other researchers, which would contribute to the research<br />expertise in this field. These analyses are often part of the<br />infrastructure of analysis frameworks and software tools, and reducing<br />their cost can benefit significantly other researchers as well as tool<br />users - for example, software developers and software testers.<br />Overall, the work makes it feasible to analyze real-world software<br />systems with increased precision and reduced cost, which adds to the<br />toolset of software developers/testers. This ultimately leads to more<br />robust software infrastructure for the enterprise and consumer<br />markets, with higher quality and lower development costs for many<br />software products.</p><br> <p>            Last Modified: 11/12/2012<br>      Modified by: Atanas&nbsp;Rountev</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project produced new theoretical techniques and analysis algorithms for improving the correctness and performance of software systems. In modern object-oriented software, it is difficult to perform automated software analysis because of the scale of the systems and the challenging features of programming languages. Our work addresses this problem by considering a compositional approach in which software components are analyzed separately, and the results are combined to determine properties of the entire system. We have developed theoretical approaches to design such analyses, and demonstrated them through a large number of new analysis algorithms. The conclusion from this work is that the generality, scalability, and precision of software analysis can be improved significantly with the help of the proposed approach.  Our work showed experimentally that the proposed techniques can lead to dramatic cost reduction for many commonly-used analyses. Based on these techniques, we developed novel analyses for potential execution inefficiencies. This work showed, for the first time, that effective detection of performance problems in object-oriented software is possible in advance, without running the software. We also presented a new and more effective way to handle dynamic features of programming languages; this work extended significantly the scope of what is currently possible to achieve with software analysis algorithms in the presence of such dynamic features.  Our techniques can serve as basis for future software analyses developed by other researchers, which would contribute to the research expertise in this field. These analyses are often part of the infrastructure of analysis frameworks and software tools, and reducing their cost can benefit significantly other researchers as well as tool users - for example, software developers and software testers. Overall, the work makes it feasible to analyze real-world software systems with increased precision and reduced cost, which adds to the toolset of software developers/testers. This ultimately leads to more robust software infrastructure for the enterprise and consumer markets, with higher quality and lower development costs for many software products.       Last Modified: 11/12/2012       Submitted by: Atanas Rountev]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
