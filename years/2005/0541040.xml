<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Unifying Events and Threads: Language Support for Network Services</AwardTitle>
<AwardEffectiveDate>08/01/2006</AwardEffectiveDate>
<AwardExpirationDate>07/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>350000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;0541040&lt;br/&gt;Zdancewic, Stephan A.&lt;br/&gt;U of Pennsylvania&lt;br/&gt;&lt;br/&gt;Unifying Events and Threads: Language Support for Network Services&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;This research investigates language-based techniques that provide better abstractions for reasoning about and implementing massively concurrent network services such as web servers, games, chat rooms, and peer-to-peer applications.  The core idea is to unify the multithreaded and event-driven models of concurrency, providing the benefits of both styles of programming.  This unified concurrency model internally structures code in continuation-passing style and uses the type theoretic approach of monads to mediate between the thread and event views of the system.&lt;br/&gt;&lt;br/&gt;The approach will be tested first by building a high-performance web server using the Haskell programming language.  Driven by the experience gained in that phase of the work, the remainder of the research will concentrate on scaling up the methodology in two ways.  First, a layered approach to designing large network service stacks will be investigated.  Second, ways of adapting the abstractions to work for multiprocessor architectures will be explored.  Both of these phases of the research will draw on expressive static type&lt;br/&gt;systems to eliminate overheads introduced by abstraction boundaries and allow programmers to exploit parallelism.&lt;br/&gt;  &lt;br/&gt;The expected outcome of this research is improved programming language support and design methodologies for building robust, highly concurrent software.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/21/2006</MinAmdLetterDate>
<MaxAmdLetterDate>08/14/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0541040</AwardID>
<Investigator>
<FirstName>Stephan</FirstName>
<LastName>Zdancewic</LastName>
<EmailAddress>stevez@cis.upenn.edu</EmailAddress>
<StartDate>07/21/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramReference>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
