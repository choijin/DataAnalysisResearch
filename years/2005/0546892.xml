<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Fine-Grained Operating System Components for Storage</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2006</AwardEffectiveDate>
<AwardExpirationDate>01/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Mohamed G. Gouda</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>A modern computer operating system comprises millions of lines of performance-critical code, much of it tightly coupled to the hardware, where most any error can be expanded into a security vulnerability, and whose behavior fundamentally impacts every application it hosts.  Thus,   perating systems are both inherently hard to program and critically important to get right, which has slowed the pace of operating systems research and development.  New programming methodologies can help break this impasse, leading to systems that are easier to teach, understand,  program, and get right.  This research program develops a new component-based design for file systems and disk storage.  Its particular focus is file system consistency, the process that ensures that disks contain correct information in the correct format.  All file system components communicate using change descriptor data structures, a generalization of soft updates that allows independent file systems and disk structures to express dependencies.  Change descriptors are exported to applications, allowing them to implement previously-inexpressible consistency policies.  The resulting design will make file systems easier to develop by factoring out common code, improve storage system robustness through first-class consistency support, and lead to new application designs that are far more resilient to system crashes.  The project will produce a file system component support library and an array of components, as well as several sample applications, including some designed for classroom use.  All of the code will be freely and widely distributed.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>01/20/2006</MinAmdLetterDate>
<MaxAmdLetterDate>03/09/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0546892</AwardID>
<Investigator>
<FirstName>Edward</FirstName>
<LastName>Kohler</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Edward Kohler</PI_FULL_NAME>
<EmailAddress>kohler@seas.harvard.edu</EmailAddress>
<PI_PHON>6174962630</PI_PHON>
<NSF_ID>000099226</NSF_ID>
<StartDate>01/20/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Los Angeles</Name>
<CityName>LOS ANGELES</CityName>
<ZipCode>900951406</ZipCode>
<PhoneNumber>3107940102</PhoneNumber>
<StreetAddress>10889 Wilshire Boulevard</StreetAddress>
<StreetAddress2><![CDATA[Suite 700]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA33</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>092530369</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, LOS ANGELES</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Los Angeles]]></Name>
<CityName>LOS ANGELES</CityName>
<StateCode>CA</StateCode>
<ZipCode>900951406</ZipCode>
<StreetAddress><![CDATA[10889 Wilshire Boulevard]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA33</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>2876</Code>
<Text>DISTRIBUTED SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0106</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2006~58883</FUND_OBLG>
<FUND_OBLG>2007~59640</FUND_OBLG>
<FUND_OBLG>2008~90422</FUND_OBLG>
<FUND_OBLG>2009~91923</FUND_OBLG>
<FUND_OBLG>2010~99132</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A file system is the part of a computer operating system responsible for storing data permanently. When power goes out in your home, or your cell phone battery dies, or a software bug causes a cloud server to reboot, the file system ensures that precious data can be recovered once the system comes back online. This makes file system correctness and consistency critically important. A broken file system can cause massive data loss, though data loss is exactly what file systems are supposed to prevent!</p> <p><br />That's not all: file system performance is important too. Most times your computer slows down, a program is waiting for file system data to load from slow disk or flash memory. Even massive cloud computing systems rely on good file system performance.</p> <p><br />These factors together cause a major tension for file system developers. File systems must change to efficiently support new workloads and different storage technologies, such as flash memory. But rapid development can easily break correctness.</p> <p><br />Our project, a fundamentally new way to build file systems, reconciled these tensions. The Featherstitch file system toolkit lets users construct file systems from small, reusable components. Unlike in previous component file systems, our system's components understand and explicitly manipulate the ordering constraints required to maintain file system correctness. As a result, Featherstitch applications can make better use of the disk's full bandwidth by specifying exactly the consistency they need. The architecture also makes it easier to understand existing file systems.</p> <p><br />Featherstitch file systems make it simple to achieve consistency and correctness. Individual components explicitly say how changes to the file system must relate. These local relationships, which Featherstitch components express as a graph, are pretty easy to reason about and to make correct. But this simplicity comes with a cost. As you can see in the figure, Featherstitch file systems can generate enormous graphs. The intellectual challenge in Featherstitch's design was to handle these graphs efficiently. We solved this problem with careful system design and new graph algorithms, leading to a system that often runs as fast as, or faster than, ad-hoc file systems, despite Featherstitch's simplicity.</p> <p><br />Our investigation led to other, similar improvements in file systems and databases, all driven by the desire for simultaneous simplicity and performance. The Anvil system applies a similar component-driven approach to databases, rather than file systems; it can significantly outperform conventional databases. The libprefetch system allows applications to use existing file systems far more efficiently; carefully designed system changes make real applications run more than 20x faster on large workloads.</p> <p><br />Our work has had impact in the real world. In addition to our open-source software releases, the Featherstitch and libprefetch work have gained attention from the Linux community. Several of our group members are now (as of 2012) applying lessons they learned to Google's next-generation storage system.</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/26/2012<br>      Modified by: Edward&nbsp;Kohler</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2012/0546892/0546892_10021655_1343342136004_por--rgov-214x142.jpg" original="/por/images/Reports/POR/2012/0546892/0546892_10021655_1343342136004_por--rgov-800width.jpg...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A file system is the part of a computer operating system responsible for storing data permanently. When power goes out in your home, or your cell phone battery dies, or a software bug causes a cloud server to reboot, the file system ensures that precious data can be recovered once the system comes back online. This makes file system correctness and consistency critically important. A broken file system can cause massive data loss, though data loss is exactly what file systems are supposed to prevent!   That's not all: file system performance is important too. Most times your computer slows down, a program is waiting for file system data to load from slow disk or flash memory. Even massive cloud computing systems rely on good file system performance.   These factors together cause a major tension for file system developers. File systems must change to efficiently support new workloads and different storage technologies, such as flash memory. But rapid development can easily break correctness.   Our project, a fundamentally new way to build file systems, reconciled these tensions. The Featherstitch file system toolkit lets users construct file systems from small, reusable components. Unlike in previous component file systems, our system's components understand and explicitly manipulate the ordering constraints required to maintain file system correctness. As a result, Featherstitch applications can make better use of the disk's full bandwidth by specifying exactly the consistency they need. The architecture also makes it easier to understand existing file systems.   Featherstitch file systems make it simple to achieve consistency and correctness. Individual components explicitly say how changes to the file system must relate. These local relationships, which Featherstitch components express as a graph, are pretty easy to reason about and to make correct. But this simplicity comes with a cost. As you can see in the figure, Featherstitch file systems can generate enormous graphs. The intellectual challenge in Featherstitch's design was to handle these graphs efficiently. We solved this problem with careful system design and new graph algorithms, leading to a system that often runs as fast as, or faster than, ad-hoc file systems, despite Featherstitch's simplicity.   Our investigation led to other, similar improvements in file systems and databases, all driven by the desire for simultaneous simplicity and performance. The Anvil system applies a similar component-driven approach to databases, rather than file systems; it can significantly outperform conventional databases. The libprefetch system allows applications to use existing file systems far more efficiently; carefully designed system changes make real applications run more than 20x faster on large workloads.   Our work has had impact in the real world. In addition to our open-source software releases, the Featherstitch and libprefetch work have gained attention from the Linux community. Several of our group members are now (as of 2012) applying lessons they learned to Google's next-generation storage system.          Last Modified: 07/26/2012       Submitted by: Edward Kohler]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
