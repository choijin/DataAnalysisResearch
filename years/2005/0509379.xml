<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR-SMA: Toward Reliable and Efficient Message Passing Software Through Formal Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2005</AwardEffectiveDate>
<AwardExpirationDate>06/30/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>449996</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Krishna Kant</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The quest for high performance drives parallel scientific computing software design. Well over 60% of the high-performance computing (HPC) community writes programs using the MPI library; to gain performance, they are known to perform many manual optimizations. Even groups that generate MPI from high level descriptions ultimately seem to generate MPI code, due to its eminent portability. However, since performance does not port, manual tweaks are inevitable. This, together with the vastness and evolving nature of the MPI standard, and the innate complexity of concurrent programming introduces costly bugs.&lt;br/&gt;&lt;br/&gt;Formal methods are enjoying an explosive growth precisely to help eliminate these kinds of bugs. Already they  find applications in diverse areas ranging from formally verifying optimizing compiler transformations, formally debugging device driver codes, and solidifying industrial standards.   The project will investigate and  employ a number of complementary formal approaches to HPC software design: erect formal standards for MPI so that designers are properly educated, take advantage of the standards and write comprehensive MPI platform tests, extract finite-state models from MPI programs and analyze them automatically for deadlocks and race conditions, and  will instrument the MPI-based program with correctness assertions that can be checked at run-time.&lt;br/&gt;&lt;br/&gt;The project will advance the state of the art in formal methods by developing algorithms that take advantage of semantic properties of communication libraries. It will help advance the state of the art in parallel scientific programming by encouraging the use of formal assertions, and encouraging the use of formal analysis in lieu of brute-force execution.</AbstractNarration>
<MinAmdLetterDate>06/17/2005</MinAmdLetterDate>
<MaxAmdLetterDate>07/07/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0509379</AwardID>
<Investigator>
<FirstName>Ganesh</FirstName>
<LastName>Gopalakrishnan</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ganesh L Gopalakrishnan</PI_FULL_NAME>
<EmailAddress>ganesh@cs.utah.edu</EmailAddress>
<PI_PHON>8015813568</PI_PHON>
<NSF_ID>000160895</NSF_ID>
<StartDate>06/17/2005</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Kirby</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME>II</PI_SUFX_NAME>
<PI_FULL_NAME>Robert M Kirby</PI_FULL_NAME>
<EmailAddress>kirby@cs.utah.edu</EmailAddress>
<PI_PHON>8015853421</PI_PHON>
<NSF_ID>000484303</NSF_ID>
<StartDate>06/17/2005</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Utah</Name>
<CityName>SALT LAKE CITY</CityName>
<ZipCode>841128930</ZipCode>
<PhoneNumber>8015816903</PhoneNumber>
<StreetAddress>75 S 2000 E</StreetAddress>
<StreetAddress2><![CDATA[Second Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<StateCode>UT</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>UT02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009095365</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF UTAH, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009095365</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Utah]]></Name>
<CityName>SALT LAKE CITY</CityName>
<StateCode>UT</StateCode>
<ZipCode>841128930</ZipCode>
<StreetAddress><![CDATA[75 S 2000 E]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>UT02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>2884</Code>
<Text>NEXT GENERATION SOFTWARE PROGR</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0105</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0106</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2005~199998</FUND_OBLG>
<FUND_OBLG>2006~6000</FUND_OBLG>
<FUND_OBLG>2007~99999</FUND_OBLG>
<FUND_OBLG>2008~111999</FUND_OBLG>
<FUND_OBLG>2009~16000</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>High performance computing is of strategic importance for every nation,providing the basic ability to conduct scientific research. While nations keep leapfrogging each other in terms of the highest achieved computational speeds, they must also ensure that in the more practical realms of&nbsp;performance, they have approaches to sustain predictable compute performance,&nbsp;cost-effective methodologies to develop robust HPC software, and&nbsp;adequate resources to train future HPC programmers. One of the most widely used software libraries in this regard is the Message Passing Interface (MPI).</p> <p>This project was proposed directly in response to the fact that MPI programmers are known to struggle to debug their programs. A perfectly working MPI program suddenly and inexplicably stops working when ported to a new platform. The root-cause was identified to be a lack of understanding of the formal principles ('programming laws') governing the semantics of MPI programs. &nbsp;It was identified that unless one develops a machine-independent semantics for MPI programs, these debugging challenges would persist, causing a severe productivity loss in our ability to conduct science and engineering.</p> <p>&nbsp;</p> <p>To give the public a perspective of how scientific research using MPI is done, consider the problem of determining the reason(s) for antibiotic resistance in bacteria. Work by the Sanbonmatsu team at Los Alamos National Laboratory shows that by simulating the atoms within an mRNA (messenger RNA) according to Newton's Laws, one can recreate, within a computer, the behavior of these mRNA - one of life's fundamental building blocks. One can further probe into the functioning of Riboswitches (http://en.wikipedia.org/wiki/Riboswitch) which then reveals drug resistance properties. These simulations are written using molecular dynamics packages based such as NAMD, and expressed in MPI derivatives such as Charm++. &nbsp;The supercomputing machines on which these simulations are written cost a few billion dollars to build and deploy, consume several million dollars of electricity a year to operate, and are obsolete in about six years. In this setting, one truly can appreciate the extent of damage that a nasty software defect that takes weeks (typical) to debug. Our work is geared to very quickly unearth these bugs, and not let them crash a supercomputing simulation after a month of its running.</p> <p>&nbsp;</p> <p>We now present the scientific outcomes of this work under the Intellectual Merit and Broader Impact categories. These results were obtained over a time period from 2007 to date. One can go to our website (http://www.cs.utah.edu/fv) and obtain a chronologically accurate view of our contributions each year.</p> <p>&nbsp;</p> <p>INTELLECTUAL MERIT: This research has lead to the discovery of the fundamental programming laws governing the behavior of MPI commands. By understanding these laws, we can accurately compute the possible execution outcomes of a given MPI program even on supercomputers that have not been built or one does not have access to. This enables a division of labor fundamental to all science and engineering; namely that one can develop MPI-based programs in isolation fully confident of the fact that when future supercomputers are delivered, one can run these programs and encounter no nasty MPI-related programming errors ("bugs").</p> <p>&nbsp;</p> <p>BROADER IMPACT: This research has helped with the training of five doctoral students who have graduated: Drs. Robert Palmer, Yu Yang, Xiaofang Chen, Sarvani Vakkalanka, and Anh Vo. It has also helped with the training of several undergraduate and Masters Degree level students. It has lead to the release of a highly capable MPI program analysis tool called In Situ Partial order analysis (ISP). It has fed into the National Tool Infrastructure through integration into the Eclipse Parallel Tools Plat...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ High performance computing is of strategic importance for every nation,providing the basic ability to conduct scientific research. While nations keep leapfrogging each other in terms of the highest achieved computational speeds, they must also ensure that in the more practical realms of performance, they have approaches to sustain predictable compute performance, cost-effective methodologies to develop robust HPC software, and adequate resources to train future HPC programmers. One of the most widely used software libraries in this regard is the Message Passing Interface (MPI).  This project was proposed directly in response to the fact that MPI programmers are known to struggle to debug their programs. A perfectly working MPI program suddenly and inexplicably stops working when ported to a new platform. The root-cause was identified to be a lack of understanding of the formal principles ('programming laws') governing the semantics of MPI programs.  It was identified that unless one develops a machine-independent semantics for MPI programs, these debugging challenges would persist, causing a severe productivity loss in our ability to conduct science and engineering.     To give the public a perspective of how scientific research using MPI is done, consider the problem of determining the reason(s) for antibiotic resistance in bacteria. Work by the Sanbonmatsu team at Los Alamos National Laboratory shows that by simulating the atoms within an mRNA (messenger RNA) according to Newton's Laws, one can recreate, within a computer, the behavior of these mRNA - one of life's fundamental building blocks. One can further probe into the functioning of Riboswitches (http://en.wikipedia.org/wiki/Riboswitch) which then reveals drug resistance properties. These simulations are written using molecular dynamics packages based such as NAMD, and expressed in MPI derivatives such as Charm++.  The supercomputing machines on which these simulations are written cost a few billion dollars to build and deploy, consume several million dollars of electricity a year to operate, and are obsolete in about six years. In this setting, one truly can appreciate the extent of damage that a nasty software defect that takes weeks (typical) to debug. Our work is geared to very quickly unearth these bugs, and not let them crash a supercomputing simulation after a month of its running.     We now present the scientific outcomes of this work under the Intellectual Merit and Broader Impact categories. These results were obtained over a time period from 2007 to date. One can go to our website (http://www.cs.utah.edu/fv) and obtain a chronologically accurate view of our contributions each year.     INTELLECTUAL MERIT: This research has lead to the discovery of the fundamental programming laws governing the behavior of MPI commands. By understanding these laws, we can accurately compute the possible execution outcomes of a given MPI program even on supercomputers that have not been built or one does not have access to. This enables a division of labor fundamental to all science and engineering; namely that one can develop MPI-based programs in isolation fully confident of the fact that when future supercomputers are delivered, one can run these programs and encounter no nasty MPI-related programming errors ("bugs").     BROADER IMPACT: This research has helped with the training of five doctoral students who have graduated: Drs. Robert Palmer, Yu Yang, Xiaofang Chen, Sarvani Vakkalanka, and Anh Vo. It has also helped with the training of several undergraduate and Masters Degree level students. It has lead to the release of a highly capable MPI program analysis tool called In Situ Partial order analysis (ISP). It has fed into the National Tool Infrastructure through integration into the Eclipse Parallel Tools Platform (PTP). Our students enjoyed valuable mentorship and training from scientists involved in developing PTP and currently working for IBM Research.  Over 25 pap...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
