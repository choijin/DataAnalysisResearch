<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CT-ISG: Modular Development of Certified Concurrent Code</AwardTitle>
<AwardEffectiveDate>08/15/2005</AwardEffectiveDate>
<AwardExpirationDate>07/31/2008</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;0524545&lt;br/&gt;Zhong Shao&lt;br/&gt;Yale University&lt;br/&gt;&lt;br/&gt;CT-ISG: Modular Verification of Concurrent Assembly Code&lt;br/&gt;&lt;br/&gt;Proof-carrying code (PCC) is a general framework that can in principle verify safety properties of arbitrary machine-level programs.  Existing PCC systems and typed assembly languages (TAL), however, can only handle sequential programs. This severely limits their applicability since many real-world systems use some forms of concurrency in their core software.  This proposed research focuses on developing new techniques for certifying low-level concurrent programs. The PI will also develop new instructional material and tools for disseminating his research results to the general public.&lt;br/&gt;Hoare logic can be combined with the assume-guarantee paradigm to reason about high-level concurrent programs but it does not support well low-level features such as first-class code pointers, unbounded&lt;br/&gt;  dynamic thread creation and termination, sharing of code between threads, and non-atomic machine code blocks.  Typed assembly language provides a more modular and scalable framework but it can certify simple type safety only.  The proposed research will show how to combine the strengths of the two to build a powerful new framework for specifying, composing, and verifying advanced properties on low-level concurrent code.  The results from this research will provide a foundation for certifying realistic multi-threaded programs and make an important advance toward generating proof-carrying concurrent code.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/12/2005</MinAmdLetterDate>
<MaxAmdLetterDate>08/12/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0524545</AwardID>
<Investigator>
<FirstName>Zhong</FirstName>
<LastName>Shao</LastName>
<EmailAddress>zhong.shao@yale.edu</EmailAddress>
<StartDate>08/12/2005</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Yale University</Name>
<CityName>New Haven</CityName>
<ZipCode>065208327</ZipCode>
<PhoneNumber>2037854689</PhoneNumber>
<StreetAddress>Office of Sponsored Projects</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code>7254</Code>
<Text>CYBER SECURITY ACT PROPOSALS</Text>
</ProgramReference>
<ProgramReference>
<Code>7371</Code>
<Text>CYBER TRUST</Text>
</ProgramReference>
<ProgramReference>
<Code>7456</Code>
<Text>ITR-CYBERTRUST</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
