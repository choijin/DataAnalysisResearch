<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>End-to-end source-to-object verification of interface safety</AwardTitle>
<AwardEffectiveDate>02/15/2006</AwardEffectiveDate>
<AwardExpirationDate>01/31/2009</AwardExpirationDate>
<AwardTotalIntnAmount>325000.00</AwardTotalIntnAmount>
<AwardAmount>325000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>ABSTRACT&lt;br/&gt;&lt;br/&gt;0540914&lt;br/&gt;Appel, Andrew&lt;br/&gt;Princeton University&lt;br/&gt;&lt;br/&gt;End-to-End Souce-to-Object Verification of Interface Safety&lt;br/&gt;&lt;br/&gt;The purpose of this research is to strengthen the internal protection barriers in software built from components and run in software virtual machines such as Sun's Java and Microsoft's .Net.  In such software, programmers can design the interfaces between components--using standard techniques such as abstraction, object orientation, and information hiding--to limit the damage that rogue components can do.  Rogue components are those that are designed maliciously or, more  commonly, that have bugs making them vulnerable to attack and take-over.  However, the protection barriers in Java and .Net (type systems that limit access by one component to data belonging to another component) are themselves vulnerable to attack if the type-checkers and compilers that implement them have bugs. &lt;br/&gt;&lt;br/&gt;In order to ensure that no compiler bugs can cause security vulnerabilies, the researchers will develop formal models to relate type systems at the source language--where programmers reason about them to design their protection interfaces--to the machine language that actually executes.  The researchers will construct machine-checkable specifications and design ways to construct compilers with machine-checkable proofs of security.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/13/2006</MinAmdLetterDate>
<MaxAmdLetterDate>02/13/2006</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0540914</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Appel</LastName>
<EmailAddress>appel@cs.princeton.edu</EmailAddress>
<StartDate>02/13/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Princeton University</Name>
<CityName>Princeton</CityName>
<ZipCode>085442020</ZipCode>
<PhoneNumber>6092583090</PhoneNumber>
<StreetAddress>Off. of Research &amp; Proj. Admin.</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0106</Code>
</Appropriation>
</Award>
</rootTag>
