<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Mitigating human error in programs through combined language/reasoning systems</AwardTitle>
<AwardEffectiveDate>04/01/2006</AwardEffectiveDate>
<AwardExpirationDate>03/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Award Abstract&lt;br/&gt;0541447&lt;br/&gt;Tim Sheard&lt;br/&gt;Portland State University&lt;br/&gt;&lt;br/&gt;Mitigating Human Error in Programs Through Combined Language/Reasoning Systems.&lt;br/&gt;&lt;br/&gt;The theory and practice of combined programming/reasoning tools is investigated. The strategy is to enable programmers to define and reason about their programs, cast in terms of properties they defined themselves, all from within the programming language itself. The system developed will reason directly about programs (not models) using enhanced type systems to capture the properties of direct interest to the programmer. The project will develop a sound theory of combined programming/reasoning systems, and apply that theory by extending and refining the existing Omega language.&lt;br/&gt;The system will have four important characteristics that separate it from competing approaches. (1) Each property defined by the programmer has semantic meaning within the programming language independent of its role as a logical entity.  (2) The systems separates values from types to maintain a familiar programming style.  (3) Management of the constraints is performed inside the language using the well understood mechanism of constrained types. And, (4) The system partitions constraint management into static and dynamic parts, allowing the user to choose when constraints can be discharged at compile-time or at run-time.&lt;br/&gt;The broader impacts of combined programming/reasoning tools is to enable programmers to construct higher quality software. The reasoning capabilities allow an efficient division of labor:&lt;br/&gt;Experts design software by specifying its properties, and competent programmers fill in the details. The reasoning facilities check that the constructed software actually contains the desired properties.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>03/17/2006</MinAmdLetterDate>
<MaxAmdLetterDate>02/05/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0541447</AwardID>
<Investigator>
<FirstName>Tim</FirstName>
<LastName>Sheard</LastName>
<EmailAddress>sheard@cs.pdx.edu</EmailAddress>
<StartDate>03/17/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Portland State University</Name>
<CityName>Portland</CityName>
<ZipCode>972070751</ZipCode>
<PhoneNumber>5037259900</PhoneNumber>
<StreetAddress>1600 SW 4th Ave</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
