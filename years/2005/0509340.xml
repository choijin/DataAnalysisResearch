<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR--SMA: Software Verification Using Plug and Play Components</AwardTitle>
<AwardEffectiveDate>09/01/2005</AwardEffectiveDate>
<AwardExpirationDate>08/31/2006</AwardExpirationDate>
<AwardAmount>49942</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Frederica Darema</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Advancements in networking and wireless technologies have led to increased demand of complex, interactive software systems.  Typical applications consist of several cooperating processes, many of which are multithreaded.  The possibility of subtle interactions between threads and between processes leads to significant challenges in the design, implementation, and testing of such systems.  Currently, formal verification and validation methods provide a high degree of confidence of the correctness and reliability of software systems.  Model checking, a state-space exploration methodology, is usually applied at the design phase of the software life cycle to verify that preliminary high-level design specifications conform to their requirements.  Source code (program) analysis, on the other hand, is used to check for correctness of implementation once it is realized from the design specifications.  The current practice of validating a design and its implementation in isolation makes it necessary to employ rigorous testing analysis to empirically ensure that the implementation satisfies the design specification.  &lt;br/&gt;&lt;br/&gt;The principal investigators (PIs) claim that tighter integration of the design and implementation phase of the software development process is necessary to bridge the inherent gap between specification and its corresponding implementation.  The PIs propose to achieve this via a formal framework that allows design models to contain embedded partial implementations as components; these models are then formally analyzed to ensure that global requirements are satisfied.  The framework, therefore, provides flexibility to incrementally develop and ensure correctness of the design and the corresponding implementation. Realization of the above objective requires consolidation and expansion of traditional formal verification techniques by bringing together the power of model checking, program analysis and constraint solving.</AbstractNarration>
<MinAmdLetterDate>08/25/2005</MinAmdLetterDate>
<MaxAmdLetterDate>08/25/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0509340</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Miner</LastName>
<EmailAddress>asminer@iastate.edu</EmailAddress>
<StartDate>08/25/2005</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Samik</FirstName>
<LastName>Basu</LastName>
<EmailAddress>sbasu@cs.iastate.edu</EmailAddress>
<StartDate>08/25/2005</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>Computer Systems Research (CSR</Text>
</ProgramElement>
<ProgramReference>
<Code>2884</Code>
<Text>NEXT GENERATION SOFTWARE PROGR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
