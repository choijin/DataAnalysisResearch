<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Computational Memory : The computing fabric of the future</AwardTitle>
<AwardEffectiveDate>05/01/2006</AwardEffectiveDate>
<AwardExpirationDate>04/30/2010</AwardExpirationDate>
<AwardAmount>275000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Ahmed Louri</SignBlockName>
</ProgramOfficer>
<AbstractNarration>The traditional way to realize computation in hardware is to devise an algorithm that generates the desired result and then implement that algorithm using combinational logic. Another way to realize computation in hardware is rote memorization, i.e., precompute all the results and store them in memory, a method we call Computational Memory. Our premise is that Computational Memory has properties that are particularly useful as technologies scale to higher densities, but lower reliability and higher performance variability. Memories are very regular and thus very dense, easy to test, and dissipate power much more smoothly than logic. Fault-tolerance on memories and interconnects can, in principle, be systematically implemented using error-correcting codes and/or error detection and recomputation, providing an avenue to address both reliability and performance variability in ultrascaled technology substrates. Such computational memory blocks are cleanly composable, making fault-tolerant designs more tractable with much higher fault coverage. However, even with the high densities that are at our disposal, the exponential memory requirements of a naive implementation of Computational Memory calls into question its practicality. The proposed research will show that this scalability problem can be overcome through the combined use of alternative number systems, coding, caching and architectural techniques. If this work is successful, programmable fabrics based on Computational Memory might emerge as a standard computing framework for the nanotechnology era. This might someday enable inexpensive "computing sticks" that provide portable computing power, along with persistent storage in the form-factor of today?s flash memory.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/01/2006</MinAmdLetterDate>
<MaxAmdLetterDate>08/07/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0541416</AwardID>
<Investigator>
<FirstName>Derek</FirstName>
<LastName>Chiou</LastName>
<EmailAddress>derek@ece.utexas.edu</EmailAddress>
<StartDate>08/07/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Derek</FirstName>
<LastName>Chiou</LastName>
<EmailAddress>derek@ece.utexas.edu</EmailAddress>
<StartDate>05/01/2006</StartDate>
<EndDate>08/16/2007</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Gustavo</FirstName>
<LastName>de Veciana</LastName>
<EmailAddress>gustavo@ece.utexas.edu</EmailAddress>
<StartDate>05/01/2006</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Margarida</FirstName>
<LastName>Jacome</LastName>
<EmailAddress>jacome@ece.utexas.edu</EmailAddress>
<StartDate>05/01/2006</StartDate>
<EndDate>08/16/2007</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4715</Code>
<Text>COMPUTER SYSTEMS ARCHITECTURE</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7353</Code>
<Text>EMERGING MODELS &amp; TECHNOLOGIES</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
