<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ST-CRTS: Collaborative Research: Lifting Compiler Optimizations via Generic Programming</AwardTitle>
<AwardEffectiveDate>02/15/2006</AwardEffectiveDate>
<AwardExpirationDate>01/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>279233.00</AwardTotalIntnAmount>
<AwardAmount>279233</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Background&lt;br/&gt;&lt;br/&gt;A typical compiler is designed to apply its optimizations to built-in types of the language it is compiling. Although built-in general-purpose optimizations might be generally beneficial, they cannot be directly applied to user-defined types because their correctness cannot be determined a priori. Extending a compiler to optimize some particular userdefined type would be useful for that particular type, but this approach becomes burdensome if the compiler must be extended on a type-by-type basis. A more powerful approach would be to enable compiler optimizations that are generic, i.e., that can be applied to any type (built-in or user-defined) that meets fundamental semantic requirements.&lt;br/&gt;&lt;br/&gt;Intellectual Merit&lt;br/&gt;&lt;br/&gt;-Formal concept definitions. The PIs propose to integrate concept-based optimization with their research on         formalization of concepts for generic programming.&lt;br/&gt;-Language support for concepts. Concept-based optimization will leverage and inform our on-going research    on direct language support for concepts and generic programming.&lt;br/&gt;-Compiler support for concepts. The PI's initial efforts incorporating concepts into the GNU C++ compiler will     be extended to support concept-based optimizations.&lt;br/&gt;- Concept-based optimizations. The PI's will leverage generic programming mechanisms to define optimizations      using concepts so that such optimizations apply to user-defined types, simply by stating that the types      model (i.e., meetthe requirements of) particular concepts.&lt;br/&gt;-Deployment and library evolution. Selected generic libraries, including the Standard Template Library, the&lt;br/&gt;  Boost Graph Library, and the Vector, Signal, and Image Processing Library will be upgraded to take     advantage of language extensions for generic programming and to take advantage of concept-based optimization.&lt;br/&gt;-Evaluation suite. The PIs will collect optimizations for a suite of high-level benchmarks that can be used to evaluate concept-based optimizations. An important benchmark in this regard will be to demonstrate that     generic optimizations offer the same performance benefits when applied to built-in types as do traditional     type-specific optimizations.&lt;br/&gt;&lt;br/&gt;Broader Impact&lt;br/&gt;The proposed research will have:&lt;br/&gt;- Direct impact on the future development of mainstream programming languages that support generic    programming (e.g., C++, C#, and Java), and on their standard libraries. &lt;br/&gt;-Support for  generic programming in these languages that will provide valuable high-level information about   user-defined types,making high-level and concept-based optimization more widely applicable. &lt;br/&gt;&lt;br/&gt;This project will directly train graduate students and post-doctoral researchers in the emerging field of   generic programming. Results from our research will be integrated into graduate programming coursesand into textbooks.</AbstractNarration>
<MinAmdLetterDate>02/10/2006</MinAmdLetterDate>
<MaxAmdLetterDate>02/10/2006</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0541335</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Lumsdaine</LastName>
<EmailAddress>al75@uw.edu</EmailAddress>
<StartDate>02/10/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Indiana University</Name>
<CityName>Bloomington</CityName>
<ZipCode>474013654</ZipCode>
<PhoneNumber>3172783473</PhoneNumber>
<StreetAddress>509 E 3RD ST</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
