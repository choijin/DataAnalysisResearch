<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Practical Transactional Memory for Highly Parallel Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/01/2006</AwardEffectiveDate>
<AwardExpirationDate>04/30/2013</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hong Jiang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>With uniprocessor systems running into fundamental limitations such as power consumption and design complexity, single-chip multiprocessors provide a realistic path toward scalable performance for server, embedded, and desktop applications. Nevertheless, the key factor limiting the potential of multiprocessor architectures is the difficulty of developing parallel programs. Existing multithreading models with lock-based synchronization introduce complex tradeoffs between functional correctness and performance that most programmers cannot master. Transactional memory provides an alternative model for concurrency management in multiprocessors based on the well-known database concept of atomic transactions. This project will develop new multiprocessor architectures to efficiently implement transactional memory. The first goal is to define the architectural semantics of transactional memory that support intuitive parallel programming models. The second goal is to develop practical hardware implementations of transactional memory that provide high performance in single-chip multiprocessor systems. The project will result in a restructuring of the hardware and software interfaces for synchronization and concurrency management and will pave the way towards multiprocessors that are easy to program, cost-effective to implement, and fast. The project will also provide students with the knowledge and skills necessary to develop and efficiently program the next generation of single-chip multiprocessors for server, embedded, and desktop applications.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>04/19/2006</MinAmdLetterDate>
<MaxAmdLetterDate>05/06/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0546060</AwardID>
<Investigator>
<FirstName>Christoforos</FirstName>
<LastName>Kozyrakis</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christoforos Kozyrakis</PI_FULL_NAME>
<EmailAddress>kozyraki@stanford.edu</EmailAddress>
<PI_PHON>6507253716</PI_PHON>
<NSF_ID>000486618</NSF_ID>
<StartDate>04/19/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009214214</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LELAND STANFORD JUNIOR UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009214214</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stanford University]]></Name>
<CityName>Stanford</CityName>
<StateCode>CA</StateCode>
<ZipCode>943052004</ZipCode>
<StreetAddress><![CDATA[450 Jane Stanford Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0106</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2006~50000</FUND_OBLG>
<FUND_OBLG>2007~100000</FUND_OBLG>
<FUND_OBLG>2009~50000</FUND_OBLG>
<FUND_OBLG>2010~50000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>With uniprocessors running into fundamental limitations, multi-core chips have become widespread in mobile, desktop, and server systems. However, the key factor limiting the potential of multi-core chips is the complexity of parallel software development using locks for concurrency management. Locking primitives introduce difficult performance-correctness tradeoffs, are not composable, and are not robust to failures. As a result, most applications are still sequential and cannot benefit from the increasing number of cores in modern systems.</p> <p>&nbsp;Transactional memory provides an intuitive model for concurrency management that addresses the challenges of locks. Transactions implement non-blocking synchronization, are composable, provide failure isolation, and allow for speculative parallelization of sequential code. Even though several researchers have shown the potential of hardware support for transactional memory, several challenges remain before it becomes a practical mechanism for modern systems. First, transactional memory needs to be a first-class concept in widespread instruction set architectures, including the features necessary to support modern programming languages. Second, transactional memory must be integrated with modern operating systems and virtualization techniques. Finally, we need practical and cost-efficient hardware implementations for current multi-core chips and future chips with tens or hundreds of cores.&nbsp;</p> <p>&nbsp;</p> <p>The goal of this project has been to research, develop, and disseminate the techniques necessary to make hardware transactional memory a practical and efficient mechanism for concurrency management in highly parallel systems. Our research produced the following outcomes. First, we developed instruction set extensions that define rich and clean semantics for hardware transactional memory that support modern programming practices such as nested parallelism or user-controlled exception handling, allow I/O operations and transactions to co-exist, and enable for a wide range of implementations. Second, we developed operating systems techniques that that virtualize hardware resources for transactional memory, allow for IO accesses within transactions, and provide efficient support for interrupt and exception handling. Hence, programmers can make use of large, long-lived transactions in their programs. Third, we developed a wide-range of cost-effective hardware mechanisms for transactional memory in small-scale and large-scale multi-core chips. The mechanisms included both hardware-only techniques and hybrid hardware/software mechanisms.</p> <p>&nbsp;</p> <p>To demonstrate the capabilities of these techniques, we designed prototypes of hardware systems and programming languages. We developed ATLAS, the first full-system hardware transactional memory prototype that allowed execution of transactional programs on 8 processor cores under the control of the Linux operating system. We also developed FARM, the first prototype to provide hardware transactional memory support for existing, commercial, multi-core chips. We demonstrated the benefits of transactional memory support for programming languages by developing the C-based Open-TM language and the Java-based ATOMOS language. We also showed how transactional constructs can support advanced functionality such as semantic concurrency control, garbage collection, checkpointing and snapshots, and advanced security features. Finally, we executed a systematic comparison of design and implementation options for transactional memory, including software, hardware, and hybrid approaches.</p> <p>&nbsp;</p> <p>Our project demonstrated that transactional memory allows for both simplified software development and scalable performance from current and future multi-core chips. However, it also showed that these benefits require hardware support, as software-only techniques are ins...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ With uniprocessors running into fundamental limitations, multi-core chips have become widespread in mobile, desktop, and server systems. However, the key factor limiting the potential of multi-core chips is the complexity of parallel software development using locks for concurrency management. Locking primitives introduce difficult performance-correctness tradeoffs, are not composable, and are not robust to failures. As a result, most applications are still sequential and cannot benefit from the increasing number of cores in modern systems.   Transactional memory provides an intuitive model for concurrency management that addresses the challenges of locks. Transactions implement non-blocking synchronization, are composable, provide failure isolation, and allow for speculative parallelization of sequential code. Even though several researchers have shown the potential of hardware support for transactional memory, several challenges remain before it becomes a practical mechanism for modern systems. First, transactional memory needs to be a first-class concept in widespread instruction set architectures, including the features necessary to support modern programming languages. Second, transactional memory must be integrated with modern operating systems and virtualization techniques. Finally, we need practical and cost-efficient hardware implementations for current multi-core chips and future chips with tens or hundreds of cores.      The goal of this project has been to research, develop, and disseminate the techniques necessary to make hardware transactional memory a practical and efficient mechanism for concurrency management in highly parallel systems. Our research produced the following outcomes. First, we developed instruction set extensions that define rich and clean semantics for hardware transactional memory that support modern programming practices such as nested parallelism or user-controlled exception handling, allow I/O operations and transactions to co-exist, and enable for a wide range of implementations. Second, we developed operating systems techniques that that virtualize hardware resources for transactional memory, allow for IO accesses within transactions, and provide efficient support for interrupt and exception handling. Hence, programmers can make use of large, long-lived transactions in their programs. Third, we developed a wide-range of cost-effective hardware mechanisms for transactional memory in small-scale and large-scale multi-core chips. The mechanisms included both hardware-only techniques and hybrid hardware/software mechanisms.     To demonstrate the capabilities of these techniques, we designed prototypes of hardware systems and programming languages. We developed ATLAS, the first full-system hardware transactional memory prototype that allowed execution of transactional programs on 8 processor cores under the control of the Linux operating system. We also developed FARM, the first prototype to provide hardware transactional memory support for existing, commercial, multi-core chips. We demonstrated the benefits of transactional memory support for programming languages by developing the C-based Open-TM language and the Java-based ATOMOS language. We also showed how transactional constructs can support advanced functionality such as semantic concurrency control, garbage collection, checkpointing and snapshots, and advanced security features. Finally, we executed a systematic comparison of design and implementation options for transactional memory, including software, hardware, and hybrid approaches.     Our project demonstrated that transactional memory allows for both simplified software development and scalable performance from current and future multi-core chips. However, it also showed that these benefits require hardware support, as software-only techniques are insufficient to achieve the potential of transactional memory as a concurrency management construct. The architecture and micro-arch...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
