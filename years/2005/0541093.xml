<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>DCS: Retrofitting a Flow-oriented Paradigm in Commodity Operating Systems for High-Performance Computing</AwardTitle>
<AwardEffectiveDate>01/01/2006</AwardEffectiveDate>
<AwardExpirationDate>12/31/2009</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>416731</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Background&lt;br/&gt;&lt;br/&gt;The PI proposes an operating system and application architecture that removes the memory and CPU from the data path for applications that handle high-bandwidth data flows. The role of the operating system becomes that of data-flow management, while applications are concerned purely with signaling. This design parallels the evolution of modern network routers and has the potential to enable high-performance I/O for end systems, as well as fully exploit recent trends toward programmable peripheral (I/O) devices. An alternative view is that hardware devices are composed into virtual processing pipelines, completely removing the CPU and main memory from the data-intensive tasks for which they are increasingly unsuitable due to performance considerations. &lt;br/&gt;&lt;br/&gt;The Pis hypothesis is that application-specific data-flow handling policies can be executed inside the operating system kernel, which composes and configures peripherals, manages flows, and handles exceptions. Such functionality can be retrofitted to existing operating systems and applications, instead of requiring a complete redesign. Several interesting research issues with respect to safety, flow scheduling, error handling, and resource management arise in the proposed architecture.&lt;br/&gt;&lt;br/&gt;Intellectual Merit&lt;br/&gt;&lt;br/&gt;The proposed architecture is a first step toward abandoning the concept of memorycentric&lt;br/&gt;computing, a paradigm ingrained in computer scientists for several decades. This shift in architectural&lt;br/&gt;thinking is both necessary for performance reasons and natural, given the increasing use of task-specific&lt;br/&gt;and programmable hardware. The proof-of-concept prototype indicates that the proposed system can at least double I/O throughput for large flows, and is orthogonal to other performance optimization approaches (e.g., faster interconnection buses). This research intends to bring together such diverse fields of&lt;br/&gt;Computer Science as networking, operating systems, embedded system design, programming languages, and&lt;br/&gt;security, and to change the way these are taught, from individual subjects to interdependent items that require (and promote) wide knowledge and creative thinking. &lt;br/&gt;&lt;br/&gt;Broader Impact&lt;br/&gt;&lt;br/&gt;-This architecture will enable high-performance applications and allow more efficient use of server resources&lt;br/&gt;-It will also allow experimentation and deployment of new types of system architectures, allowing use of novel hardware designs, device interconnection strategies, and load-balancing and scheduling algorithms.&lt;br/&gt;-This approach will also eliminate one commonly perceived problem with the wide-spread use of secure protocols and cryptography, that of performance.&lt;br/&gt;-The PI hopes to enable a new class of systems that are able to support highperformance applications across a wide range of areas of computer science &lt;br/&gt;-Finally, by fully taking advantage of computing systems capabilities, users can reap considerable savings in equipment spending.&lt;br/&gt;-The PI plans to involve creating cross-subject projects and an undergraduate laboratory class that exposes students to interesting projects and research at the intersection of systems, networks, and security. Many of these projects will allow students to cross the hardware/software boundary, which few current professionals can do despite increasing demand</AbstractNarration>
<MinAmdLetterDate>12/29/2005</MinAmdLetterDate>
<MaxAmdLetterDate>09/05/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0541093</AwardID>
<Investigator>
<FirstName>Angelos</FirstName>
<LastName>Keromytis</LastName>
<EmailAddress>angelos@cs.columbia.edu</EmailAddress>
<StartDate>12/29/2005</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4080</Code>
<Text>ADVANCED COMP RESEARCH PROGRAM</Text>
</ProgramElement>
<ProgramElement>
<Code>7456</Code>
<Text>ITR-CYBERTRUST</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
