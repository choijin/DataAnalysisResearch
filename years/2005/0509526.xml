<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>PDOS: Experimenting with Garbage Collection in an Otherwise Conventional OS</AwardTitle>
<AwardEffectiveDate>08/01/2005</AwardEffectiveDate>
<AwardExpirationDate>07/31/2009</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>379999</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Krishna Kant</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Security holes and crashes at the operating system (OS) level&lt;br/&gt;represent a serious infrastructure problem. These OS bugs are often&lt;br/&gt;the result of memory management errors, which are very hard for&lt;br/&gt;developers to avoid. In the long run, a broad class of&lt;br/&gt;memory-management errors can be prevented by using a high-level,&lt;br/&gt;type-safe language, but whether these languages are suitable for&lt;br/&gt;kernel implementation remains an open question. Unfortunately, any&lt;br/&gt;given experiment to answer the question (i.e., using a particular&lt;br/&gt;high-level language) involves many differences in implementation&lt;br/&gt;compared to a conventional kernel, making it difficult to draw&lt;br/&gt;conclusions about which parts of the high-level approach work and&lt;br/&gt;which parts do not. This project is an experiment specifically about&lt;br/&gt;garbage collection for legacy OS kernels, changing as few other&lt;br/&gt;implementation issues as possible. Concretely, the research is about&lt;br/&gt;developing tools to automatically transform the C source code of a&lt;br/&gt;conventional kernel so that it is compatible with a variety of precise&lt;br/&gt;garbage-collection strategies. The project's ultimate goal is to check&lt;br/&gt;whether the OS becomes usefully more reliable as a result of garbage&lt;br/&gt;collection, and to measure the performance costs in both desktop and&lt;br/&gt;embedded environments. If the experiment shows that the OS improves at&lt;br/&gt;a reasonable cost, then the research will have shown how to increase&lt;br/&gt;the reliability of a major part of today's computer systems&lt;br/&gt;infrastructure. Tools generated by the project will be made publicly&lt;br/&gt;available for use in research, for application to practical software,&lt;br/&gt;and for pedagogical purposes.</AbstractNarration>
<MinAmdLetterDate>07/29/2005</MinAmdLetterDate>
<MaxAmdLetterDate>10/09/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0509526</AwardID>
<Investigator>
<FirstName>Matthew</FirstName>
<LastName>Flatt</LastName>
<EmailAddress>mflatt@cs.utah.edu</EmailAddress>
<StartDate>07/29/2005</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>John</FirstName>
<LastName>Regehr</LastName>
<EmailAddress>regehr@cs.utah.edu</EmailAddress>
<StartDate>07/29/2005</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Utah</Name>
<CityName>SALT LAKE CITY</CityName>
<ZipCode>841128930</ZipCode>
<PhoneNumber>8015816903</PhoneNumber>
<StreetAddress>75 S 2000 E</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<StateCode>UT</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
