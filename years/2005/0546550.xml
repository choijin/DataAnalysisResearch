<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:  Lightweight Modeling and Enforcement of Architectural Behavior</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2006</AwardEffectiveDate>
<AwardExpirationDate>01/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>490000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>CCF-0546550&lt;br/&gt;Jonathan Aldrich&lt;br/&gt;Carnegie Mellon University&lt;br/&gt;&lt;br/&gt;CAREER: Lightweight Modeling and Enforcement of Architectural Behavior&lt;br/&gt;&lt;br/&gt;Building and evolving large software systems is one of the biggest challenges facing software engineers today.  One approach to dealing with the complexity of a software system is to study its software architecture, &lt;br/&gt;the high-level organization of a software system.  This research is developing lightweight techniques for modeling software architecture and for enforcing architecture in code.&lt;br/&gt;&lt;br/&gt;The core approach is a new formal modeling framework for software architectures that can express arbitrary dynamism in the design, yet also abstraction and composition mechanisms that allow the designs to scale. The &lt;br/&gt;framework is grounded in formal semantics that define how dynamic architectural models can be simulated and analyzed.&lt;br/&gt;&lt;br/&gt;In order to increase the impact of software architecture in practice, the project is developing new techniques for mapping from arbitrary object-oriented implementation code to a high-level architectural design, &lt;br/&gt;using unobtrusive program annotations sprinkled throughout the source code. These annotations are used by novel program analysis techniques to verify that the code conforms to the structure of the architectural design, ensuring that engineers achieve the benefits of their architectural design in practice.  The project is validating these techniques through case studies, and is achieving impact through open source software, &lt;br/&gt;commercialization, and educational outreach.</AbstractNarration>
<MinAmdLetterDate>01/31/2006</MinAmdLetterDate>
<MaxAmdLetterDate>05/25/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0546550</AwardID>
<Investigator>
<FirstName>Jonathan</FirstName>
<LastName>Aldrich</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jonathan Aldrich</PI_FULL_NAME>
<EmailAddress>jonathan.aldrich@cs.cmu.edu</EmailAddress>
<PI_PHON>4122687278</PI_PHON>
<NSF_ID>000426894</NSF_ID>
<StartDate>01/31/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0106</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2006~102000</FUND_OBLG>
<FUND_OBLG>2007~102000</FUND_OBLG>
<FUND_OBLG>2008~180000</FUND_OBLG>
<FUND_OBLG>2010~106000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Building and evolving large software systems is the biggest challenge facing software engineers today. One approach to dealing with the complexity of a software system is to study its software architecture, the high-level organization of a software system (analogous to the architecture of a building, which represents its high-level structure). Software architecture has proven to be very useful for studying possible designs for software systems.&nbsp; Unfortunately, however, before this grant it was very difficult to relate that design analysis to the source code of the system.&nbsp; As a result, the techniques of software architecture could not be leveraged as effectively in practice as in theory.</p> <p>In this grant, we developed a new set of techniques for capturing the architectural design of a software system within its source code.&nbsp; The core technique was to put annotations representing architectural information into the source code.&nbsp; These annotations are based on the concept of "ownership" and show what are the high-level objects in the system, and what lower-level data structures are part of these high-level objects.&nbsp; A program then analyzes these annotations, checks them for consistency with each other and with the source code, and extracts an architectural design.</p> <p>For example, the Secure Information Flow Case Study picture attached to this report shows an architecture extracted from source code using a tool developed as part of this research project.&nbsp; The architecture shows all possible paths of (explicit) information flow in the system.&nbsp; Checks and crosses show where the information flow mirrors the designer&rsquo;s intent, or not.&nbsp; Thus, it is easy for software engineers to look at this generated diagram and assess to what degree their source code matches their intended design with respect to structure and information flow--thus addressing the problem we set out to solve.</p> <p>The scientific contributions of this grant include the development of the techniques above, including their precise specification, mathematical theorems about their correctness, and an implementation and evaluation of the techniques on real software.&nbsp; The results of our empirical evaluations show the techniques can apply to a wide range of software, have low costs, and have benefits for program understanding, for improving software designs, and for finding security problems in code.&nbsp; We expect the eventual impact of these results will be helping software engineers to build software that is more reliable and secure, and to do at lower cost.&nbsp; Ultimately, as these scientific contributions are refined and commercialized (something we continue to pursue), this research will benefit every user of software, and positively impact the competitiveness of the United States software industry.</p> <p>The impact of this work also extended to education, in several respects.&nbsp; We released or maintained 2 open-source tools, SASyLF (www.sasylf.org), and Plural (http://code.google.com/p/pluralism/) which have been used in education in addition to research.&nbsp; 7 graduate students and 11 undergraduate students were trained to do research using the results of this grant.&nbsp; The PI actively sought out women and other underrepresented students for training in research, and was able to support 3 such students in this grant.&nbsp; In addition, 150 or more students have been impacted so far by the techniques and tools developed in this grant and integrated into the classroom; many more will likely see that impact in the future.</p> <div> <p>As a CAREER grant, this work also stimulated and supported new ideas in the area of reasoning about protocols in code (Plural), formal reasoning about programming languages (SASyLF), and other areas of programming languages and software engineering.&nbsp; The impact of these ideas may grow in the future thr...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Building and evolving large software systems is the biggest challenge facing software engineers today. One approach to dealing with the complexity of a software system is to study its software architecture, the high-level organization of a software system (analogous to the architecture of a building, which represents its high-level structure). Software architecture has proven to be very useful for studying possible designs for software systems.  Unfortunately, however, before this grant it was very difficult to relate that design analysis to the source code of the system.  As a result, the techniques of software architecture could not be leveraged as effectively in practice as in theory.  In this grant, we developed a new set of techniques for capturing the architectural design of a software system within its source code.  The core technique was to put annotations representing architectural information into the source code.  These annotations are based on the concept of "ownership" and show what are the high-level objects in the system, and what lower-level data structures are part of these high-level objects.  A program then analyzes these annotations, checks them for consistency with each other and with the source code, and extracts an architectural design.  For example, the Secure Information Flow Case Study picture attached to this report shows an architecture extracted from source code using a tool developed as part of this research project.  The architecture shows all possible paths of (explicit) information flow in the system.  Checks and crosses show where the information flow mirrors the designerÆs intent, or not.  Thus, it is easy for software engineers to look at this generated diagram and assess to what degree their source code matches their intended design with respect to structure and information flow--thus addressing the problem we set out to solve.  The scientific contributions of this grant include the development of the techniques above, including their precise specification, mathematical theorems about their correctness, and an implementation and evaluation of the techniques on real software.  The results of our empirical evaluations show the techniques can apply to a wide range of software, have low costs, and have benefits for program understanding, for improving software designs, and for finding security problems in code.  We expect the eventual impact of these results will be helping software engineers to build software that is more reliable and secure, and to do at lower cost.  Ultimately, as these scientific contributions are refined and commercialized (something we continue to pursue), this research will benefit every user of software, and positively impact the competitiveness of the United States software industry.  The impact of this work also extended to education, in several respects.  We released or maintained 2 open-source tools, SASyLF (www.sasylf.org), and Plural (http://code.google.com/p/pluralism/) which have been used in education in addition to research.  7 graduate students and 11 undergraduate students were trained to do research using the results of this grant.  The PI actively sought out women and other underrepresented students for training in research, and was able to support 3 such students in this grant.  In addition, 150 or more students have been impacted so far by the techniques and tools developed in this grant and integrated into the classroom; many more will likely see that impact in the future.   As a CAREER grant, this work also stimulated and supported new ideas in the area of reasoning about protocols in code (Plural), formal reasoning about programming languages (SASyLF), and other areas of programming languages and software engineering.  The impact of these ideas may grow in the future through other work supported by the NSF and other entities.            Last Modified: 05/31/2011       Submitted by: Jonathan Aldrich]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
