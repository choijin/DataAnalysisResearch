<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: CCF-SHF Advanced Execution Environments for Next-generation Cloud Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2009</AwardEffectiveDate>
<AwardExpirationDate>02/29/2016</AwardExpirationDate>
<AwardTotalIntnAmount>419439.00</AwardTotalIntnAmount>
<AwardAmount>427639</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The next years will see a shift from traditional desktop or server applications to a model that is dominated by the confluence of several trends: web-based application delivery, utility computing, software as a service, data mash-ups, and client-side extensions for web customization.  This paradigm shift to next-generation cloud applications profoundly changes the way in which users use the world wide web and provides tremendous potential for accelerating scientific discovery. A crucial component in this shift is the web browser and the server infrastructure delivering those complex applications, which typically consist of multiple, interconnected components from different sources.&lt;br/&gt;This research aims to create advanced browser and server execution environments that address the needs of these applications.&lt;br/&gt;&lt;br/&gt;This project integrates a research and education plan that develops abstractions for advanced execution environments that can robustly support next-generation cloud applications.  Our primary focus falls on an advanced client-side execution environment called script spaces.&lt;br/&gt;Script spaces provide an environment that can support the client side of cloud applications in a reliable, robust, secure, flexible, and scalable fashion.  A complementary effort provides a server-side execution environment.  We are prototyping our abstractions and validate our techniques by applying them to a client-side mash-up framework that is in daily use.  Our education plan applies the research artifacts we create to reinvigorate our undergraduate curriculum by emphasizing real-world contexts in student assignments, even in a first CS course.</AbstractNarration>
<MinAmdLetterDate>02/19/2009</MinAmdLetterDate>
<MaxAmdLetterDate>05/14/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0845830</AwardID>
<Investigator>
<FirstName>Godmar</FirstName>
<LastName>Back</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Godmar Back</PI_FULL_NAME>
<EmailAddress>gback@cs.vt.edu</EmailAddress>
<PI_PHON>5402315281</PI_PHON>
<NSF_ID>000493331</NSF_ID>
<StartDate>02/19/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Virginia Polytechnic Institute and State University</Name>
<CityName>BLACKSBURG</CityName>
<ZipCode>240610001</ZipCode>
<PhoneNumber>5402315281</PhoneNumber>
<StreetAddress>Sponsored Programs 0170</StreetAddress>
<StreetAddress2><![CDATA[300 Turner Street NW, Suite 4200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003137015</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>VIRGINIA POLYTECHNIC INSTITUTE AND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003137015</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Virginia Polytechnic Institute and State University]]></Name>
<CityName>BLACKSBURG</CityName>
<StateCode>VA</StateCode>
<ZipCode>240610001</ZipCode>
<StreetAddress><![CDATA[Sponsored Programs 0170]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~89339</FUND_OBLG>
<FUND_OBLG>2010~79630</FUND_OBLG>
<FUND_OBLG>2011~82800</FUND_OBLG>
<FUND_OBLG>2012~86154</FUND_OBLG>
<FUND_OBLG>2013~89716</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><pre><strong>Advanced Execution Environments for Next-generation Cloud Applications</strong>  The widespread adoption of cloud-based technologies during the last decade has had a profound impact on our society.  At the core of many of these technologies lies an  interaction of users with cloud-based applications through web-based interfaces.  The research performed as part of this grant investigated how best to design and built such  cloud-based applications.  Our research had two tracks: one track in which we investigated how to enhance existing browsers to better support the needs of these emerging applications. In a second track, we explored server-side platforms for the execution of these cloud-based applications.  We identified a key problem in existing browsers and their JavaScript-based virtual machines: their inability to support multiple, independent flows of execution in a manner that separates and isolates them from each other.  In response, we developed ScriptSpaces, which is a browser enhancement that provides the ability to support the separate execution of JavaScript codes within one page.  Akin to processes in an operating system, different script spaces provide separate namespaces, CPU accounting, and memory consumption.  Most importantly, they provide separate fault domains so that a bug in one script does not affect the progress of others.  On the server side, we investigated how modern web applications are built. These cloud-based applications, which increasingly replace traditional desktop applications, provide a rich experience to users who expect to be able to access them seamlessly at any time and from any device, providing a continuous user experience. Designing and building those applications on top of the existing web infrastructure has turned out to be difficult because its stateless server design was originally intended to provide a simple hypertext system.  In response, we built a web application framework called CloudBrowser, which is able to support in-cloud applications to which users can connect and disconnect using a web browser.  In our framework, application developers are shielded from the  distributed and stateless nature of the underlying client-server protocols and can  write applications in a manner similar to desktop applications.  At the same time, they are able to use state-of-the-art JavaScript libraries, including emerging MVC framework libraries, thus leveraging existing skillsets.  In our research, we addressed multiple research questions, including how to represent application's state, and how to optimize the communication protocol between client and server to update and reconcile the application's state.  To examine the validity of our ideas, we built two CloudBrowser prototypes.  Our first prototype, built using the node.js platform, provided a single-process, event-based model in which to execute applications.  In our second prototype, we investigated how to scale our design to be able to use multiple processes on one or more machines.  To facilitate this horizontal scaling, we developed nodeRMI, a custom remote remote invocation framework for  JavaScript.  Our findings include that it is possible to design and build applications using this system.  Application developers can achieve high productivity and create complex  applications with very little code, and these applications can provide a rich user experience.  We are also able to show that our application framework can be scaled horizontally.  Furthermore, we identified several limitations that influence the practical usability of our approach, primarily in terms of latency and resource  consumption.  In terms of broader impacts, this research project contributed to the training of 3 graduate researchers and 1 undergraduate researcher who are now applying their  learned skills at US Internet companies.  The PI also developed an advanced  graduate-level course o...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Advanced Execution Environments for Next-generation Cloud Applications  The widespread adoption of cloud-based technologies during the last decade has had a profound impact on our society.  At the core of many of these technologies lies an  interaction of users with cloud-based applications through web-based interfaces.  The research performed as part of this grant investigated how best to design and built such  cloud-based applications.  Our research had two tracks: one track in which we investigated how to enhance existing browsers to better support the needs of these emerging applications. In a second track, we explored server-side platforms for the execution of these cloud-based applications.  We identified a key problem in existing browsers and their JavaScript-based virtual machines: their inability to support multiple, independent flows of execution in a manner that separates and isolates them from each other.  In response, we developed ScriptSpaces, which is a browser enhancement that provides the ability to support the separate execution of JavaScript codes within one page.  Akin to processes in an operating system, different script spaces provide separate namespaces, CPU accounting, and memory consumption.  Most importantly, they provide separate fault domains so that a bug in one script does not affect the progress of others.  On the server side, we investigated how modern web applications are built. These cloud-based applications, which increasingly replace traditional desktop applications, provide a rich experience to users who expect to be able to access them seamlessly at any time and from any device, providing a continuous user experience. Designing and building those applications on top of the existing web infrastructure has turned out to be difficult because its stateless server design was originally intended to provide a simple hypertext system.  In response, we built a web application framework called CloudBrowser, which is able to support in-cloud applications to which users can connect and disconnect using a web browser.  In our framework, application developers are shielded from the  distributed and stateless nature of the underlying client-server protocols and can  write applications in a manner similar to desktop applications.  At the same time, they are able to use state-of-the-art JavaScript libraries, including emerging MVC framework libraries, thus leveraging existing skillsets.  In our research, we addressed multiple research questions, including how to represent application's state, and how to optimize the communication protocol between client and server to update and reconcile the application's state.  To examine the validity of our ideas, we built two CloudBrowser prototypes.  Our first prototype, built using the node.js platform, provided a single-process, event-based model in which to execute applications.  In our second prototype, we investigated how to scale our design to be able to use multiple processes on one or more machines.  To facilitate this horizontal scaling, we developed nodeRMI, a custom remote remote invocation framework for  JavaScript.  Our findings include that it is possible to design and build applications using this system.  Application developers can achieve high productivity and create complex  applications with very little code, and these applications can provide a rich user experience.  We are also able to show that our application framework can be scaled horizontally.  Furthermore, we identified several limitations that influence the practical usability of our approach, primarily in terms of latency and resource  consumption.  In terms of broader impacts, this research project contributed to the training of 3 graduate researchers and 1 undergraduate researcher who are now applying their  learned skills at US Internet companies.  The PI also developed an advanced  graduate-level course on cloud technologies offered to students at Virginia Tech  and will be teaching an...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
