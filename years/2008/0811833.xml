<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA-CPL-T: Programming Models for Transactional Memory</AwardTitle>
<AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
<AwardExpirationDate>05/31/2009</AwardExpirationDate>
<AwardTotalIntnAmount>330291.00</AwardTotalIntnAmount>
<AwardAmount>107933</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Adoption of multi-core architectures brings a shift to parallel programming as the default model for mainstream software development.  Industry and academia alike are designing and implementing languages, runtime systems, and architectures to enable and leverage this shift.  One of the foremost technologies to emerge from this effort is transactional memory (TM). Transactional memory offers a new paradigm for expressing general-purpose multithreaded applications safely and efficiently.  Although much research effort has focused on implementing transactions, relatively less emphasis has been placed on the problem of defining appropriate programming models for transactional memory. This is a research problem of great practical interest, but also significant difficulty, as its interconnected components span the traditional areas of language implementation (compilers), language design, and software engineering.&lt;br/&gt;&lt;br/&gt;This research explores the issue of programming models for transactional memory. First, the investigators evaluate and refine a programming model for allowing a transaction to perform irreversible operations and to coordinate with other threads. The main concept is that of "transaction punctuation" and supports controlled relaxation of transactional guarantees and local reasoning about the effects of other threads.   Second, the research examines a hybrid programming model, where a transactional implementation is fitted on a lock-like interface. This approach is suitable both for existing lock-based applications, and for new ones where the programmer has the ability to label critical sections with specific locks. The result is an adaptive combination of the performance advantages of both locks and transactions. Finally, the inestigators study "open-nesting" transactional programming models.  Open-nesting is a TM model offering high performance, but at the expense of significant programmer effort. The research evolves and generalizes guidelines for correct open-nesting usage, avoiding counter-intuitive behavior.</AbstractNarration>
<MinAmdLetterDate>08/11/2008</MinAmdLetterDate>
<MaxAmdLetterDate>08/11/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0811833</AwardID>
<Investigator>
<FirstName>Michal</FirstName>
<LastName>Young</LastName>
<EmailAddress>michal@cs.uoregon.edu</EmailAddress>
<StartDate>08/11/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Yannis</FirstName>
<LastName>Smaragdakis</LastName>
<EmailAddress>yannis@cs.umass.edu</EmailAddress>
<StartDate>08/11/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Oregon Eugene</Name>
<CityName>Eugene</CityName>
<ZipCode>974035219</ZipCode>
<PhoneNumber>5413465131</PhoneNumber>
<StreetAddress>5219 UNIVERSITY OF OREGON</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4080</Code>
<Text>ADVANCED COMP RESEARCH PROGRAM</Text>
</ProgramElement>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
