<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SRS: A Decentralized and Rule-Based Approach to Data Dependency Analysis and Failure Recovery in Service-Oriented Environments</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/15/2008</AwardEffectiveDate>
<AwardExpirationDate>05/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>328331.00</AwardTotalIntnAmount>
<AwardAmount>354581</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>NSF Proposal 0820152&lt;br/&gt;&lt;br/&gt;A Decentralized and Rule-Based Approach to Data Dependency Analysis and Failure Recovery in a Service-Oriented Environment&lt;br/&gt;&lt;br/&gt;PI: Susan D. Urban    &lt;br/&gt; &lt;br/&gt;The objective of this research is to develop a decentralized approach to data dependency analysis and failure recovery among concurrently executing processes in a loosely-coupled service-oriented environment. The approach involves monitoring externalized data changes of individual service executions. Peer-to-peer, decentralized communication among process execution agents is then used to discover data dependencies among concurrently executing processes that may lead to data inconsistencies during the recovery of a failed process. Process interference rules of dependent processes are used to test user-defined semantic conditions to determine if 1) critical data conditions have been affected by the recovery of a failed process and 2) recovery procedures should be invoked for dependent processes. The research includes the development of a methodology for using process interference rules.  The correctness and efficiency of decentralized data dependency analysis and rule-based recovery procedures are also demonstrated for concurrent processes in the context of a service composition model that supports compensation, contingency, rollback, and retry techniques. This research provides a new way of thinking about traditional transaction recoverability concepts, providing a dynamic approach to discovering data dependencies and responding to failures in a manner that guarantees user-defined correctness conditions for concurrent processes that execute without isolation guarantees.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/06/2008</MinAmdLetterDate>
<MaxAmdLetterDate>07/13/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0820152</AwardID>
<Investigator>
<FirstName>Susan</FirstName>
<LastName>Urban</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Susan D Urban</PI_FULL_NAME>
<EmailAddress>susan.urban@ttu.edu</EmailAddress>
<PI_PHON>8067422484</PI_PHON>
<NSF_ID>000358633</NSF_ID>
<StartDate>06/06/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Texas Tech University</Name>
<CityName>Lubbock</CityName>
<ZipCode>794091035</ZipCode>
<PhoneNumber>8067423884</PhoneNumber>
<StreetAddress>349 Administration Bldg</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>19</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX19</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041367053</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TEXAS TECH UNIVERSITY SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041367053</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Texas Tech University]]></Name>
<CityName>Lubbock</CityName>
<StateCode>TX</StateCode>
<ZipCode>794091035</ZipCode>
<StreetAddress><![CDATA[349 Administration Bldg]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>19</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX19</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7724</Code>
<Text>SOFTWARE FOR REAL-WORLD SYSTMS</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7724</Code>
<Text>SOFTWARE FOR REAL-WORLD SYSTMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~339581</FUND_OBLG>
<FUND_OBLG>2010~15000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The advent of Web Services and Service-Oriented Computing has significantly changed software development practices and data access patterns for distributed computing environments, creating the ability to develop processes that are composed of distributed service executions. Service-oriented computing, however, also poses new challenges for software design and execution environments, especially with respect to failure recovery and semantic correctness in the context of concurrent process execution. Our research is innovative in that we provide a new paradigm for service execution that supports the dynamic discovery of data dependencies, with rule-based techniques for testing user-defined semantic conditions for correct execution.</p> <p>In particular, this research has extended an abstract execution model for establishing user-defined correctness and recovery in a service composition environment. The service composition model defines a hierarchical service composition structure, where a service is composed of atomic and/or composite groups. The model provides multi-level protection against service execution failure by using compensation and contingency at different composition granularity levels. The model is enhanced with the concept of assurance points (APS), integration rules, invariant rules, and application exception rules. APs serve as logical and physical checkpoints for user-defined consistency checking, invoking integration rules that check pre and post conditions at different points in the execution process. Invariants provide a stronger way of monitoring constraints and guaranteeing that a condition holds for a specific duration of execution as defined by starting and ending assurance points. Application exception rules extend integration rules with a case-based structure that is used to respond variably to events and exceptions that interrupt the execution of a process, allowing a process to determine recovery actions depending on the state of the process execution. A unique aspect of APs is that they provide intermediate rollback points when failures occur, thus allowing a process to be compensated to a specific AP for the purpose of rechecking pre-conditions before retry attempts. APs also support a dynamic backward recovery process, known as cascaded contingency, for hierarchically nested processes in an attempt to recover to a previous AP that can be used to invoke contingent procedures or alternate execution paths for failure of a nested process. As a result, the assurance point approach provides flexibility with respect to the combined use of backward and forward recovery options. Figure 1 illustrates the use of APs, integration rules, invariant rules, and application exception rules for process P1.</p> <p>This research also involved the investigation of decentralized data dependency analysis in support of process recovery procedures. In processes composed of Web Services, interleaved access to data between service executions of concurrent processes can potentially cause data inconsistency problems. If a process fails, data items modified by the recovery of a failed process may affect other processes that are concurrently executing and have accessed the same data items. The results of this research present a decentralized approach to analyzing data dependencies among concurrently executing processes in a service-oriented environment. The decentralized approach is an extension of past research with Delta-Enabled Grid Services (DEGS), which provides a technique for analyzing data changes capture from service execution to determine process dependencies. Process Execution Agents (PEXAs) have been defined that control the execution of processes and maintain local information about data changes. Process execution histories are then enhanced with control information that allows the construction of data dependency graphs to be distributed among multiple PE...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The advent of Web Services and Service-Oriented Computing has significantly changed software development practices and data access patterns for distributed computing environments, creating the ability to develop processes that are composed of distributed service executions. Service-oriented computing, however, also poses new challenges for software design and execution environments, especially with respect to failure recovery and semantic correctness in the context of concurrent process execution. Our research is innovative in that we provide a new paradigm for service execution that supports the dynamic discovery of data dependencies, with rule-based techniques for testing user-defined semantic conditions for correct execution.  In particular, this research has extended an abstract execution model for establishing user-defined correctness and recovery in a service composition environment. The service composition model defines a hierarchical service composition structure, where a service is composed of atomic and/or composite groups. The model provides multi-level protection against service execution failure by using compensation and contingency at different composition granularity levels. The model is enhanced with the concept of assurance points (APS), integration rules, invariant rules, and application exception rules. APs serve as logical and physical checkpoints for user-defined consistency checking, invoking integration rules that check pre and post conditions at different points in the execution process. Invariants provide a stronger way of monitoring constraints and guaranteeing that a condition holds for a specific duration of execution as defined by starting and ending assurance points. Application exception rules extend integration rules with a case-based structure that is used to respond variably to events and exceptions that interrupt the execution of a process, allowing a process to determine recovery actions depending on the state of the process execution. A unique aspect of APs is that they provide intermediate rollback points when failures occur, thus allowing a process to be compensated to a specific AP for the purpose of rechecking pre-conditions before retry attempts. APs also support a dynamic backward recovery process, known as cascaded contingency, for hierarchically nested processes in an attempt to recover to a previous AP that can be used to invoke contingent procedures or alternate execution paths for failure of a nested process. As a result, the assurance point approach provides flexibility with respect to the combined use of backward and forward recovery options. Figure 1 illustrates the use of APs, integration rules, invariant rules, and application exception rules for process P1.  This research also involved the investigation of decentralized data dependency analysis in support of process recovery procedures. In processes composed of Web Services, interleaved access to data between service executions of concurrent processes can potentially cause data inconsistency problems. If a process fails, data items modified by the recovery of a failed process may affect other processes that are concurrently executing and have accessed the same data items. The results of this research present a decentralized approach to analyzing data dependencies among concurrently executing processes in a service-oriented environment. The decentralized approach is an extension of past research with Delta-Enabled Grid Services (DEGS), which provides a technique for analyzing data changes capture from service execution to determine process dependencies. Process Execution Agents (PEXAs) have been defined that control the execution of processes and maintain local information about data changes. Process execution histories are then enhanced with control information that allows the construction of data dependency graphs to be distributed among multiple PEXAs by sharing data dependency information. Research results include the f...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
