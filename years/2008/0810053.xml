<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Advanced Methods for Performing Static Analysis of Machine Code</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2008</AwardEffectiveDate>
<AwardExpirationDate>07/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>299999.00</AwardTotalIntnAmount>
<AwardAmount>299999</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>John Reppy</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>&lt;br/&gt;The goal of the proposed project is to help programmers create&lt;br/&gt;correct, efficient, reliable, and secure software systems by providing&lt;br/&gt;improved static-analysis techniques that can (i) verify properties of&lt;br/&gt;a program's behavior, and (ii) find potential bugs and security&lt;br/&gt;vulnerabilities in programs.  The project will concentrate on the&lt;br/&gt;analysis of machine code: the objectives are to enhance the scientific&lt;br/&gt;basis for static analysis of machine code, to create prototype tools&lt;br/&gt;that apply the techniques developed in tools for analyzing safety&lt;br/&gt;properties of machine-code programs, and to measure how well the tools&lt;br/&gt;perform.</AbstractNarration>
<MinAmdLetterDate>07/22/2008</MinAmdLetterDate>
<MaxAmdLetterDate>06/21/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0810053</AwardID>
<Investigator>
<FirstName>Thomas</FirstName>
<LastName>Reps</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Thomas W Reps</PI_FULL_NAME>
<EmailAddress>reps@cs.wisc.edu</EmailAddress>
<PI_PHON>6082622091</PI_PHON>
<NSF_ID>000134593</NSF_ID>
<StartDate>07/22/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>MADISON</CityName>
<StateCode>WI</StateCode>
<ZipCode>537151218</ZipCode>
<StreetAddress><![CDATA[21 North Park Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~199999</FUND_OBLG>
<FUND_OBLG>2010~100000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This grant supported research in the&nbsp;field of program analysis, with the aim of helping programmers create correct, efficient, reliable, and secure software systems. In particular, the research carried out under the grant focused on the difficult and important problem of analyzing stripped machine code (i.e., neither source code nor symbol-table/debugging information is available to help the analyzer).The number of articles during the last several years about security issues---both in the popular press and in the research literature---are one measure of the importance of machine-code analysis.</p> <p>The applications of the work include verification that machine-code programs operate as desired, and the identification of bugs and security vulnerabilities at the machine-code level, via combinations of static analysis, dynamic analysis, and symbolic execution.</p> <p>During the course of the project, the main activities have been as follows:</p> <p>1. Development of a system, called TSL (for Transformer Specification Language), that makes it easier to implement analyses for machine code. TSL provides a platform for specifying the semantics of machine-code instruction sets and generating dynamic, symbolic, and static analyses from the semantic specification.</p> <p>2. Exploration of how TSL could be used to create implementations of the basic primitives used in symbolic program analysis: forward symbolic evaluation, pre-image computation, and symbolic composition.</p> <p>3. Exploration of how TSL could be used to specify the transition function for cache memory.</p> <p>4. The use of TSL to develop a tool, called BCE (Botnet Command Extractor), for automatically extracting botnet-command information from bot executables.</p> <p>5. The use of TSL to develop a tool, called McVeto (Machine Code VErification Tool), which uses both dynamic analysis and symbolic analysis to determine whether a certain program point of interest is reachable.</p> <p>6. Several investigations of fundamental issues that arise in program analyzers.&nbsp; Static-analysis techniques explore the program's behavior for all possible inputs.&nbsp; The technical challenge that one faces is ``How can one obtain information about the possible states that a program reaches during execution, but without actually running the program on specific inputs?'' To make this feasible, the program is run ``in the aggregate'' -- i.e., on descriptors that represent collections of many states.&nbsp; One of the lines of investigation concerned the development of families of descriptors suitable for use with bit-vector arithmetic (as opposed to integer arithmetic), particularly for representing inequalities. Another line of investigation concerned what we call 'symbolic abstract interpretation', which harnesses the power of modern constraint solvers to perform fundamental symbolic-reasoning operations for different families of descriptors.</p> <p>An overarching theme of the work has been that we have considered a number of issues that have been ignored in previous work on program analysis -- and cause previous techniques to be unsound when applied to machine code -- and shown how comparable techniques can be developed that support sound machine-code analysis.</p><br> <p>            Last Modified: 08/10/2012<br>      Modified by: Thomas&nbsp;W&nbsp;Reps</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This grant supported research in the field of program analysis, with the aim of helping programmers create correct, efficient, reliable, and secure software systems. In particular, the research carried out under the grant focused on the difficult and important problem of analyzing stripped machine code (i.e., neither source code nor symbol-table/debugging information is available to help the analyzer).The number of articles during the last several years about security issues---both in the popular press and in the research literature---are one measure of the importance of machine-code analysis.  The applications of the work include verification that machine-code programs operate as desired, and the identification of bugs and security vulnerabilities at the machine-code level, via combinations of static analysis, dynamic analysis, and symbolic execution.  During the course of the project, the main activities have been as follows:  1. Development of a system, called TSL (for Transformer Specification Language), that makes it easier to implement analyses for machine code. TSL provides a platform for specifying the semantics of machine-code instruction sets and generating dynamic, symbolic, and static analyses from the semantic specification.  2. Exploration of how TSL could be used to create implementations of the basic primitives used in symbolic program analysis: forward symbolic evaluation, pre-image computation, and symbolic composition.  3. Exploration of how TSL could be used to specify the transition function for cache memory.  4. The use of TSL to develop a tool, called BCE (Botnet Command Extractor), for automatically extracting botnet-command information from bot executables.  5. The use of TSL to develop a tool, called McVeto (Machine Code VErification Tool), which uses both dynamic analysis and symbolic analysis to determine whether a certain program point of interest is reachable.  6. Several investigations of fundamental issues that arise in program analyzers.  Static-analysis techniques explore the program's behavior for all possible inputs.  The technical challenge that one faces is ``How can one obtain information about the possible states that a program reaches during execution, but without actually running the program on specific inputs?'' To make this feasible, the program is run ``in the aggregate'' -- i.e., on descriptors that represent collections of many states.  One of the lines of investigation concerned the development of families of descriptors suitable for use with bit-vector arithmetic (as opposed to integer arithmetic), particularly for representing inequalities. Another line of investigation concerned what we call 'symbolic abstract interpretation', which harnesses the power of modern constraint solvers to perform fundamental symbolic-reasoning operations for different families of descriptors.  An overarching theme of the work has been that we have considered a number of issues that have been ignored in previous work on program analysis -- and cause previous techniques to be unsound when applied to machine code -- and shown how comparable techniques can be developed that support sound machine-code analysis.       Last Modified: 08/10/2012       Submitted by: Thomas W Reps]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
