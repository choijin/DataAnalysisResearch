<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Simplifying Parallel Programming for CSE Applications using a Multi-Paradigm Approach</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>800000.00</AwardTotalIntnAmount>
<AwardAmount>828000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Scientific applications can model interactions of medicines with proteins, predict the behavior of nano-materials, model the climate, and lead to better understanding of physical phenomenon. These applications demand ever greater computational resources, which can only be supplied by new parallel computers with ever increasing capability and complexity.  Parallel computing can bring about new breakthroughs only if the complexity of efficient parallel programming can be overcome. Yet developing parallel applications remains significantly more difficult than serial development. Petascale machines with hundreds of thousands(and possibly millions) of processors add to the complexity, as do new sophisticated algorithms and multi-physics applications. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;This project is developing a new approach to parallel programming which builds upon the automatic resource management and composibility of the Charm++ framework. This approach includes development of multiple, individually incomplete, programming models. Each model simplifies parallel programming while still covering significant categories of applications.  This collection of interoperable models, supported by complete models including Adaptive MPI and Charm++, provides a powerful environment for developing future petascale applications. A compiler framework is being developed which provides a common representation and facilitates compatibility between models. In addition, the vision includes abstractions supported by libraries for commonly needed data types and functionalities. These abstractions will support and interoperate with domain specific frameworks. The results of this project will enable the large community of computational scientists and engineers to harness petascale machines with relative ease in order to generate breakthroughs in scientific discovery and engineering design.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/01/2008</MinAmdLetterDate>
<MaxAmdLetterDate>05/13/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0833188</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Padua</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David A Padua</PI_FULL_NAME>
<EmailAddress>padua@uiuc.edu</EmailAddress>
<PI_PHON>2173334233</PI_PHON>
<NSF_ID>000317715</NSF_ID>
<StartDate>08/01/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Laxmikant</FirstName>
<LastName>Kale</LastName>
<PI_MID_INIT>V</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Laxmikant V Kale</PI_FULL_NAME>
<EmailAddress>kale@uiuc.edu</EmailAddress>
<PI_PHON>2172440094</PI_PHON>
<NSF_ID>000123469</NSF_ID>
<StartDate>08/01/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Vikram</FirstName>
<LastName>Adve</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Vikram S Adve</PI_FULL_NAME>
<EmailAddress>vadve@cs.uiuc.edu</EmailAddress>
<PI_PHON>2172442016</PI_PHON>
<NSF_ID>000334755</NSF_ID>
<StartDate>08/01/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>Champaign</CityName>
<StateCode>IL</StateCode>
<ZipCode>618207406</ZipCode>
<StreetAddress><![CDATA[1901 South First Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7583</Code>
<Text>ITR-HECURA</Text>
</ProgramElement>
<ProgramElement>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>7952</Code>
<Text>HECURA</Text>
</ProgramElement>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7952</Code>
<Text>HECURA</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~800000</FUND_OBLG>
<FUND_OBLG>2009~16000</FUND_OBLG>
<FUND_OBLG>2013~12000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>For several decades, computers became smaller, faster and cheaper every year. The speed increase stopped around 2003, because of physical limitations. Further increases in speed of computation can come mainly, if not only, by using many processors in parallel to solve a problem faster. At the high end, it has been possible to put together machines consisting of over a million processors. Advances in scientific and engineering modeling have brought the possibility of breakthroughs of societal importance on the horizon, if these large computers can be used for such modeling.</p> <p>Yet, programming parallel computers has remained a challenging problem. In the work conducted within this project over a period of six years, several advances were made towards solving this problem.</p> <p>One of the insights in this project is the idea that we need a varied toolbox, rather than a single magical tool: i.e. instead of looking for a single parallel programming language, we should look at a collection of specialized languages, each good for some specific subset of problems, and all able to work together in an interoperable framework.</p> <p>To explore these ideas, this project developed several incremental parallel languages, and extended some existing parallel languages. One of the early insights was that the languages can be specialized by observing the kinds of interactions among the set of independent entities. It is often the case that a class of parallel algorithms tend to exhibit a somewhat stylized pattern of interaction that can be captured and expressed by a specialized programming language. Based on this observation, languages such as Charisma and Multiphase Shared Arrays were defined, and other languages such as Hierarchical Tiled Arrays and Deterministic Parallel Java were extended. A new language DivCon, for expressing divide-and-conquer algorithms that dealing with distributed data arrays, was developed. A library that acts as a powerful programming methodology for algorithms involving a tree as a basic data structure was developed.</p> <p>We demonstrated that simple support by a compiler for a carefully designed language, with well-known static analysis techniques, could improve the productivity of a parallel programming methodology significantly.&nbsp; These ideas were embodied in a parallel language called &ldquo;Charj&rdquo;. As measured by lines-of-code as well as by other subjective productivity metrics, Charj programs are elegant and are likely to improve programmer productivity.</p> <p>Although new programming languages are attractive, from the point of view of their innate properties and benefits, the inertia of existing code base and entrenched expertise in the older methodologies constitute major hurdles to their adoption. To this end, this project developed a framework that supports interoperability between the most popular parallel programming system, namely MPI, and the novel languages in the family of languages developed under this project. With this, software developers can incorporate the novel and radical programming languages in their ongoing project by possibly writing a small module in the new language. This allows for incremental adoption of the new methodologies. This idea was demonstrated in large scientific applications in production use within the Department of Energy.</p> <p>Several extensions and improvements were made to the Charm++ framework. Charm++ acts as a base language to which many of the new languages were translated. Its message driven execution model is key to the interoperability among different languages mentioned above. Charm++&rsquo;s adaptive runtime system provides a common substrate for optimizing resource management across modules written in different languages. &nbsp;</p> <p>The utility and impact of this project was demonstrated by submissions to the international High Performance Computing Challenge Competition ...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ For several decades, computers became smaller, faster and cheaper every year. The speed increase stopped around 2003, because of physical limitations. Further increases in speed of computation can come mainly, if not only, by using many processors in parallel to solve a problem faster. At the high end, it has been possible to put together machines consisting of over a million processors. Advances in scientific and engineering modeling have brought the possibility of breakthroughs of societal importance on the horizon, if these large computers can be used for such modeling.  Yet, programming parallel computers has remained a challenging problem. In the work conducted within this project over a period of six years, several advances were made towards solving this problem.  One of the insights in this project is the idea that we need a varied toolbox, rather than a single magical tool: i.e. instead of looking for a single parallel programming language, we should look at a collection of specialized languages, each good for some specific subset of problems, and all able to work together in an interoperable framework.  To explore these ideas, this project developed several incremental parallel languages, and extended some existing parallel languages. One of the early insights was that the languages can be specialized by observing the kinds of interactions among the set of independent entities. It is often the case that a class of parallel algorithms tend to exhibit a somewhat stylized pattern of interaction that can be captured and expressed by a specialized programming language. Based on this observation, languages such as Charisma and Multiphase Shared Arrays were defined, and other languages such as Hierarchical Tiled Arrays and Deterministic Parallel Java were extended. A new language DivCon, for expressing divide-and-conquer algorithms that dealing with distributed data arrays, was developed. A library that acts as a powerful programming methodology for algorithms involving a tree as a basic data structure was developed.  We demonstrated that simple support by a compiler for a carefully designed language, with well-known static analysis techniques, could improve the productivity of a parallel programming methodology significantly.  These ideas were embodied in a parallel language called "Charj". As measured by lines-of-code as well as by other subjective productivity metrics, Charj programs are elegant and are likely to improve programmer productivity.  Although new programming languages are attractive, from the point of view of their innate properties and benefits, the inertia of existing code base and entrenched expertise in the older methodologies constitute major hurdles to their adoption. To this end, this project developed a framework that supports interoperability between the most popular parallel programming system, namely MPI, and the novel languages in the family of languages developed under this project. With this, software developers can incorporate the novel and radical programming languages in their ongoing project by possibly writing a small module in the new language. This allows for incremental adoption of the new methodologies. This idea was demonstrated in large scientific applications in production use within the Department of Energy.  Several extensions and improvements were made to the Charm++ framework. Charm++ acts as a base language to which many of the new languages were translated. Its message driven execution model is key to the interoperability among different languages mentioned above. Charm++Æs adaptive runtime system provides a common substrate for optimizing resource management across modules written in different languages.    The utility and impact of this project was demonstrated by submissions to the international High Performance Computing Challenge Competition at the Supercomputing conference. This competition judges the productivity and performance of different programming models. In two c...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
