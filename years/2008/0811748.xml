<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA-SEL: Collaborative Research - Continuing Progress Toward Verified Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>137409.00</AwardTotalIntnAmount>
<AwardAmount>195889</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Most engineered artifacts, such as bridges and nuclear power plants, are tested by subjecting them to operating conditions and observing results.&lt;br/&gt;Software is different.  It manifests dynamic behavior when running on computers, and software quality (with respect to achieving specified&lt;br/&gt;behavior) is normally tested that way.  But software also can be considered purely symbolic -- a sequence of instructions -- and hence can be subjected to mathematical proof of correctness. Achieving such "verified software" has been identified as a "grand challenge" for computing research.  The work of this project's interdisciplinary team of software engineers and logicians focuses on the thesis that practical, scalable, automated software verification is feasible, one component at a time, by combining careful language design with recent advances in automated theorem proving.  The plan is to evaluate this thesis empirically by generating the logical verification conditions for a benchmark suite of software components like those used in computing courses and commercial software, and proving them automatically.  The project's significance will derive from its proof of concept that the verified software grand challenge can be conquered, and from a better understanding of what the next generation of software engineers need to be taught to produce verified software.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/09/2008</MinAmdLetterDate>
<MaxAmdLetterDate>08/17/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0811748</AwardID>
<Investigator>
<FirstName>Murali</FirstName>
<LastName>Sitaraman</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Murali Sitaraman</PI_FULL_NAME>
<EmailAddress>murali@clemson.edu</EmailAddress>
<PI_PHON>8646566738</PI_PHON>
<NSF_ID>000269181</NSF_ID>
<StartDate>08/09/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Clemson University</Name>
<CityName>CLEMSON</CityName>
<ZipCode>296345701</ZipCode>
<PhoneNumber>8646562424</PhoneNumber>
<StreetAddress>230 Kappa Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>South Carolina</StateName>
<StateCode>SC</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>SC03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042629816</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CLEMSON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042629816</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Clemson University]]></Name>
<CityName>CLEMSON</CityName>
<StateCode>SC</StateCode>
<ZipCode>296345701</ZipCode>
<StreetAddress><![CDATA[230 Kappa Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>South Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>SC03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~137409</FUND_OBLG>
<FUND_OBLG>2009~16000</FUND_OBLG>
<FUND_OBLG>2011~27480</FUND_OBLG>
<FUND_OBLG>2012~15000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Ultimately, the society needs to ensure that deployed software functions according to its specification. &nbsp;Though this project does not directly impact the problem of getting specifications themselves to match human intent, to the extent the specifications capture the intent, it addresses the problem of getting code to function in accordance. &nbsp;The project is interdisciplinary and it involves mathematical logic and computer science.</p> <p>The intellectual merit of the project is that it has led to the development of a prototype push-button verifying compiler--a compiler that checks that code meets specifications under all specified input conditions and then generates executable code. &nbsp;The project has fundamentally established that it is possible to develop a mechanical and modular verifying compiler--not just for simple code--but for non-tivial software involving generic, object-based components that themselves may be built using other such components, such as those we can write in modern programming languages. &nbsp;The modularity of the verifying compiler makes it possible to specify and verify one component at a time, making it scalable for component-based systems. &nbsp;A key technical result is that the project has established that no "deep thinking" is necessary to prove verification conditions (VCs) of correctness that arise, if software is suitaby designed and annotated. &nbsp;The implication of this result is that there is a dichotomy between the powerful provers necessary to establish non-trivial mathematical results and the provers that are suited for discharging software correctness, given those results. &nbsp;The project results have been validated through the development and verification of a benchmark suite of software components.</p> <p>The project has a had a broad impact on human and information resources, and computer science education. &nbsp;Eight graduate students (four of whom are women) and eight undergraduate students (four of whom are also women) have benefitted from the project. &nbsp; Verification techniques to produce high quality software have been integrated into graduate courses and two required undergraduate courses for CS majors at Clemson, affecting numerous students every year. &nbsp;For widespread research experimentation and student learning at multiple institutions, the verifying compiler has been integrated into a web-integrated environment that is freely available.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/11/2013<br>      Modified by: Murali&nbsp;Sitaraman</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Ultimately, the society needs to ensure that deployed software functions according to its specification.  Though this project does not directly impact the problem of getting specifications themselves to match human intent, to the extent the specifications capture the intent, it addresses the problem of getting code to function in accordance.  The project is interdisciplinary and it involves mathematical logic and computer science.  The intellectual merit of the project is that it has led to the development of a prototype push-button verifying compiler--a compiler that checks that code meets specifications under all specified input conditions and then generates executable code.  The project has fundamentally established that it is possible to develop a mechanical and modular verifying compiler--not just for simple code--but for non-tivial software involving generic, object-based components that themselves may be built using other such components, such as those we can write in modern programming languages.  The modularity of the verifying compiler makes it possible to specify and verify one component at a time, making it scalable for component-based systems.  A key technical result is that the project has established that no "deep thinking" is necessary to prove verification conditions (VCs) of correctness that arise, if software is suitaby designed and annotated.  The implication of this result is that there is a dichotomy between the powerful provers necessary to establish non-trivial mathematical results and the provers that are suited for discharging software correctness, given those results.  The project results have been validated through the development and verification of a benchmark suite of software components.  The project has a had a broad impact on human and information resources, and computer science education.  Eight graduate students (four of whom are women) and eight undergraduate students (four of whom are also women) have benefitted from the project.   Verification techniques to produce high quality software have been integrated into graduate courses and two required undergraduate courses for CS majors at Clemson, affecting numerous students every year.  For widespread research experimentation and student learning at multiple institutions, the verifying compiler has been integrated into a web-integrated environment that is freely available.                Last Modified: 12/11/2013       Submitted by: Murali Sitaraman]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
