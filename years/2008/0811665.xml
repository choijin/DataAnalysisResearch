<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA-SEL-T: Domain Specific Languages, Logics, and Proofs for Certified Software Design</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2008</AwardEffectiveDate>
<AwardExpirationDate>06/30/2013</AwardExpirationDate>
<AwardTotalIntnAmount>850001.00</AwardTotalIntnAmount>
<AwardAmount>869239</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This research focuses on developing a new programming methodology to dramatically improve the quality and dependability of software-intensive systems.  The key to this effort is an effective integration of domain-specific languages (DSLs) and formal program verification, two well-known technologies that have been used extensively on their own, but mostly in isolation of one another. DSLs make it easier to write complex software for specific application domains, but they often lack rigorous semantics, making it difficult to formally specify and reason about the resulting programs.  Existing program verification systems, on the other hand, usually rely on a single unified logic (e.g. Hoare logic) or type system, which cannot support the diversity of components in typical software-intensive systems.  By combining the two methodologies, the PI intends to resolve both of these shortcomings. More specifically, the PIs propose to develop a new DSL-centric certified software design methodology that will elevate existing DSL practice into a rigorous software development methodology that allows program verification to scale effectively to large software systems. The proposed research will impact the software engineering community and make it possible to build software more quickly, and with higher assurance of correctness, than previously possible.</AbstractNarration>
<MinAmdLetterDate>07/16/2008</MinAmdLetterDate>
<MaxAmdLetterDate>05/10/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0811665</AwardID>
<Investigator>
<FirstName>Paul</FirstName>
<LastName>Hudak</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Paul Hudak</PI_FULL_NAME>
<EmailAddress>paul.hudak@yale.edu</EmailAddress>
<PI_PHON>2034324715</PI_PHON>
<NSF_ID>000227990</NSF_ID>
<StartDate>07/16/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Zhong</FirstName>
<LastName>Shao</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zhong Shao</PI_FULL_NAME>
<EmailAddress>zhong.shao@yale.edu</EmailAddress>
<PI_PHON>2034326828</PI_PHON>
<NSF_ID>000201856</NSF_ID>
<StartDate>07/16/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Yale University</Name>
<CityName>New Haven</CityName>
<ZipCode>065208327</ZipCode>
<PhoneNumber>2037854689</PhoneNumber>
<StreetAddress>Office of Sponsored Projects</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 208327]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CT03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>043207562</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>YALE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>043207562</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Yale University]]></Name>
<CityName>New Haven</CityName>
<StateCode>CT</StateCode>
<ZipCode>065208327</ZipCode>
<StreetAddress><![CDATA[Office of Sponsored Projects]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CT03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7724</Code>
<Text>SOFTWARE FOR REAL-WORLD SYSTMS</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~603258</FUND_OBLG>
<FUND_OBLG>2009~19238</FUND_OBLG>
<FUND_OBLG>2010~246743</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Writing correct, robust, and efficient software is a famously difficult problem.&nbsp; Software defects have led to many disastrous outcomes that have caused huge financial losses, serious compromises of privacy, physical systems failures, and insidious threats to national security.</p> <p>The goal of this project is to improve the software development process to ensure that our programs are correct, according to a given specification, at the time that we construct them.&nbsp; Testing a software system is not good enough, since testing can never cover all possible execution sequences of a program.&nbsp; Instead, a formal <em>proof</em> is needed to assure correctness of a program with respect to a specification.</p> <p>Our research has focused on achieving this goal through the development of new programming languages that are more abstract and better able to express concisely and accurately a problem solution.&nbsp; These languages are often called "domain specific" in that they are designed for a particular application domain.&nbsp; In addition, we have developed new automated proof techniques to ensure that a program meets a desired specification.</p> <p>A key application area of our research is the desigh of certifiably correct low-level operating systems code -- that is, the program that runs the core of an operating system such as Windows, Mac OS, and so on.&nbsp; These operating systems are deceptively complex, and notorious for their vulnerabilities.</p> <p>To support large-scale proof development, we have developed a new general-purpose programming languaged (named VeriML) that aims to fix several architecture-level deficiencies in existing proof assistants. We have also designed and implemented a few new domain specific program logics for reasoning about low-level and concurrent code at different abstraction layers. These new technologies together forms the core of our new certified software methologies for developing domain-specific languages, logics, libraries, and proofs.&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/19/2013<br>      Modified by: Zhong&nbsp;Shao</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Writing correct, robust, and efficient software is a famously difficult problem.  Software defects have led to many disastrous outcomes that have caused huge financial losses, serious compromises of privacy, physical systems failures, and insidious threats to national security.  The goal of this project is to improve the software development process to ensure that our programs are correct, according to a given specification, at the time that we construct them.  Testing a software system is not good enough, since testing can never cover all possible execution sequences of a program.  Instead, a formal proof is needed to assure correctness of a program with respect to a specification.  Our research has focused on achieving this goal through the development of new programming languages that are more abstract and better able to express concisely and accurately a problem solution.  These languages are often called "domain specific" in that they are designed for a particular application domain.  In addition, we have developed new automated proof techniques to ensure that a program meets a desired specification.  A key application area of our research is the desigh of certifiably correct low-level operating systems code -- that is, the program that runs the core of an operating system such as Windows, Mac OS, and so on.  These operating systems are deceptively complex, and notorious for their vulnerabilities.  To support large-scale proof development, we have developed a new general-purpose programming languaged (named VeriML) that aims to fix several architecture-level deficiencies in existing proof assistants. We have also designed and implemented a few new domain specific program logics for reasoning about low-level and concurrent code at different abstraction layers. These new technologies together forms the core of our new certified software methologies for developing domain-specific languages, logics, libraries, and proofs.           Last Modified: 10/19/2013       Submitted by: Zhong Shao]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
