<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: The Molecular Programming Project</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2008</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>8333335.00</AwardTotalIntnAmount>
<AwardAmount>8333335</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Mitra Basu</SignBlockName>
<PO_EMAI>mbasu@nsf.gov</PO_EMAI>
<PO_PHON>7032928649</PO_PHON>
</ProgramOfficer>
<AbstractNarration>There is great potential for adapting biopolymer molecules such as RNA and DNA to meaningful computational tasks and purposes.  Having the ability to program molecules at many orders of magnitude larger scale than at present using new algorithms and software analogues has the potential to change the way we analyze, understand and manipulate molecular systems.  It can lead to practical applications of significant benefit to society across a wide range of national initiatives in materials, nano-biotechnology, tissue engineering, regenerative medicine, and many other emerging areas.  This ambitious Expedition addresses the exciting challenge of developing initial foundational steps toward creating large-scale molecular programs.  This experimental technology Expedition aims to develop a functional abstraction hierarchy to create molecular programming languages, compilers, tools and models; a theoretical framework for the analysis and design of molecular programs; validation of the above utilizing molecular programs with orders of magnitude higher scale of components than at present; and testing of the developed molecular programming technologies on real-world applications.  This high-risk/high-payoff research will increase our understanding of the relationship between computation and the physical world, how information can be stored and processed by molecules, and the possibilities and limits of what can be computed and fabricated.  Outreach includes summer undergraduate and minority student research fellowships, K-12 visiting days, boot camps, workshops and many other efforts to create a broader molecular programming research community.</AbstractNarration>
<MinAmdLetterDate>08/13/2008</MinAmdLetterDate>
<MaxAmdLetterDate>08/19/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0832824</AwardID>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>Murray</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Richard M Murray</PI_FULL_NAME>
<EmailAddress>murray@caltech.edu</EmailAddress>
<PI_PHON>6263956460</PI_PHON>
<NSF_ID>000369755</NSF_ID>
<StartDate>08/13/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jehoshua</FirstName>
<LastName>Bruck</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jehoshua Bruck</PI_FULL_NAME>
<EmailAddress>bruck@paradise.caltech.edu</EmailAddress>
<PI_PHON>4089271878</PI_PHON>
<NSF_ID>000465142</NSF_ID>
<StartDate>08/13/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Niles</FirstName>
<LastName>Pierce</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Niles A Pierce</PI_FULL_NAME>
<EmailAddress>niles@caltech.edu</EmailAddress>
<PI_PHON>6263958086</PI_PHON>
<NSF_ID>000486482</NSF_ID>
<StartDate>08/13/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Erik</FirstName>
<LastName>Winfree</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Erik Winfree</PI_FULL_NAME>
<EmailAddress>winfree@caltech.edu</EmailAddress>
<PI_PHON>6263956246</PI_PHON>
<NSF_ID>000301036</NSF_ID>
<StartDate>08/13/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Paul W.K.</FirstName>
<LastName>Rothemund</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Paul W.K. Rothemund</PI_FULL_NAME>
<EmailAddress>pwkr@dna.caltech.edu</EmailAddress>
<PI_PHON>6263956073</PI_PHON>
<NSF_ID>000086706</NSF_ID>
<StartDate>08/13/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>California Institute of Technology</Name>
<CityName>PASADENA</CityName>
<ZipCode>911250600</ZipCode>
<PhoneNumber>6263956219</PhoneNumber>
<StreetAddress>1200 E California Blvd</StreetAddress>
<StreetAddress2><![CDATA[Mail Code 273-6]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>27</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA27</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009584210</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CALIFORNIA INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[California Institute of Technology]]></Name>
<CityName>PASADENA</CityName>
<StateCode>CA</StateCode>
<ZipCode>911250600</ZipCode>
<StreetAddress><![CDATA[1200 E California Blvd]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>27</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA27</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7723</Code>
<Text>Expeditions in Computing</Text>
</ProgramElement>
<ProgramReference>
<Code>7723</Code>
<Text>EXPERIMENTAL EXPEDITIONS</Text>
</ProgramReference>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7969</Code>
<Text>FY 2010 Funding for PTR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~5000001</FUND_OBLG>
<FUND_OBLG>2011~3333334</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><br />The computing revolution began over two thousand years ago with mechanical calculating machines such as the Antikythera mechanism. Subsequent developments produced sophisticated clockwork automata for controlling the machinery of the industrial revolution, and culminated in Babbage's remarkable design for a programmable mechanical computer in 1838. With the electronic revolution of the last century, the speed and complexity of computers increased dramatically. Using embedded computers we now program the behavior of a vast array of electro-mechanical devices, from cell phones to automobile engines to power grids. The history of computing has taught us two things: first, that the principles of computing can be embodied in a wide variety of physical substrates from gears and springs to transistors, and second that the mastery of a new physical substratefor computing has the potential to transform technology.</p> <p>&nbsp;</p> <p>Another revolution is just beginning, one that will result in new types of programmable systems based on molecules. &nbsp;Like the previous revolutions, this "molecular programming revolution" will take much of its theory from computer science, but will require reformulation of familiar concepts such as programming languages and compilers, data structures and algorithms, resources and complexity, concurrency and stochasticity, correctness and robustness. It will be interdisciplinary, drawing inspiration, problems, and solutions from all the molecular sciences and giving back tools for the analysis and synthesis of complex molecular systems. &nbsp;With molecular programming, chemistry will become a new information technology for the 21st century.</p> <p>&nbsp;</p> <p>To appreciate the potential of embedding computation within molecularly-defined systems, consider the remarkable impact that embedded microprocessors have had for technologies based on electro-mechanical systems. &nbsp;As an example, inspired by the hardy pack dog, an autonomous load-carrying robot for rugged terrain can be engineered from basic parts such as mechanical and structural components, a variety of sensors and actuators, a power system, and a central processing unit that directs the robot's behavior. &nbsp;None of these parts has a biological origin, though some materials and design principles may be shared. &nbsp;If we take a single-celled organism -- and its capabilities for interacting with and manipulating its molecular environment -- as inspiration for molecular engineering, we might anticipate that armed with an analogous diversity of molecular-scale parts for structures, sensors, actuators, and logic, it should be possible to build molecularly-defined autonomous robotic systems based on similar principles. Though rudimentary compared to biological cells, the first such "molecular robots" are now appearing. &nbsp;As in macroscopic robots, the informational aspect is pervasive and essential in complex systems built from information-bearing molecules.<br /><br />A <em>molecular program</em> is a collection of molecules that can carry out a task, such as performing a computation, fabricating an object, or controlling a system of molecular sensors and actuators. &nbsp;Defined as such, biology is rife with molecular programs controlling subcellular functions and intercellular interactions. &nbsp;Outside of biology,&nbsp;artificial molecular programs in biotechnology and bioengineering are currently limited in complexity when compared either to circuits in computer science and electrical engineering or to naturally occurring molecular programs in biology.&nbsp;</p> <p><br />By overcoming this limitation, molecular programming will eventually allow fabrication and control of artifacts whose parts are arranged with nanoscale precision, with complexity comparable to that of biological organisms. &nbsp;The molecular components may come from biology, synthetic chemistry...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  The computing revolution began over two thousand years ago with mechanical calculating machines such as the Antikythera mechanism. Subsequent developments produced sophisticated clockwork automata for controlling the machinery of the industrial revolution, and culminated in Babbage's remarkable design for a programmable mechanical computer in 1838. With the electronic revolution of the last century, the speed and complexity of computers increased dramatically. Using embedded computers we now program the behavior of a vast array of electro-mechanical devices, from cell phones to automobile engines to power grids. The history of computing has taught us two things: first, that the principles of computing can be embodied in a wide variety of physical substrates from gears and springs to transistors, and second that the mastery of a new physical substratefor computing has the potential to transform technology.     Another revolution is just beginning, one that will result in new types of programmable systems based on molecules.  Like the previous revolutions, this "molecular programming revolution" will take much of its theory from computer science, but will require reformulation of familiar concepts such as programming languages and compilers, data structures and algorithms, resources and complexity, concurrency and stochasticity, correctness and robustness. It will be interdisciplinary, drawing inspiration, problems, and solutions from all the molecular sciences and giving back tools for the analysis and synthesis of complex molecular systems.  With molecular programming, chemistry will become a new information technology for the 21st century.     To appreciate the potential of embedding computation within molecularly-defined systems, consider the remarkable impact that embedded microprocessors have had for technologies based on electro-mechanical systems.  As an example, inspired by the hardy pack dog, an autonomous load-carrying robot for rugged terrain can be engineered from basic parts such as mechanical and structural components, a variety of sensors and actuators, a power system, and a central processing unit that directs the robot's behavior.  None of these parts has a biological origin, though some materials and design principles may be shared.  If we take a single-celled organism -- and its capabilities for interacting with and manipulating its molecular environment -- as inspiration for molecular engineering, we might anticipate that armed with an analogous diversity of molecular-scale parts for structures, sensors, actuators, and logic, it should be possible to build molecularly-defined autonomous robotic systems based on similar principles. Though rudimentary compared to biological cells, the first such "molecular robots" are now appearing.  As in macroscopic robots, the informational aspect is pervasive and essential in complex systems built from information-bearing molecules.  A molecular program is a collection of molecules that can carry out a task, such as performing a computation, fabricating an object, or controlling a system of molecular sensors and actuators.  Defined as such, biology is rife with molecular programs controlling subcellular functions and intercellular interactions.  Outside of biology, artificial molecular programs in biotechnology and bioengineering are currently limited in complexity when compared either to circuits in computer science and electrical engineering or to naturally occurring molecular programs in biology.    By overcoming this limitation, molecular programming will eventually allow fabrication and control of artifacts whose parts are arranged with nanoscale precision, with complexity comparable to that of biological organisms.  The molecular components may come from biology, synthetic chemistry, or both. Thus, the goal of molecular programming is to understand how to program the behavior of complex molecular systems of all varieties.  If successful, it will vastly increase the...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
