<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:  Language Features for Robust Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2009</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>449985.00</AwardTotalIntnAmount>
<AwardAmount>465985</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Developing reliable software systems is a key challenge for our&lt;br/&gt;society.  Despite many years of effort, software systems still suffer&lt;br/&gt;from catastrophic failures.  All too often, software failures are&lt;br/&gt;caused by the propagation of errors through critical components of the&lt;br/&gt;system.  Unfortunately, current software development tools and&lt;br/&gt;practices actually encourage the introduction of unnecessary&lt;br/&gt;dependencies that serve to propagate errors between conceptually&lt;br/&gt;unrelated components.&lt;br/&gt;&lt;br/&gt;The goal of this research is to explore a new approach for creating&lt;br/&gt;software systems that are robust against failures.  The approach&lt;br/&gt;exposes the high-level structure of a software system to the compiler&lt;br/&gt;and run-time environment to enable the automatic application of techniques that&lt;br/&gt;appropriately manage error propagation to make software systems more&lt;br/&gt;resilient.  The foundation of this approach is a specification&lt;br/&gt;language that allows the developer to identify tasks and describe when&lt;br/&gt;tasks should be invoked and how each task changes the conceptual&lt;br/&gt;states of objects.  A set of techniques use this information to&lt;br/&gt;monitor and analyze task execution to eliminate unnecessary&lt;br/&gt;dependencies.  The broader impact of this research is the potential to&lt;br/&gt;mitigate the effects of software faults.</AbstractNarration>
<MinAmdLetterDate>07/29/2009</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0846195</AwardID>
<Investigator>
<FirstName>Brian</FirstName>
<LastName>Demsky</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Brian C Demsky</PI_FULL_NAME>
<EmailAddress>bdemsky@uci.edu</EmailAddress>
<PI_PHON>9498240356</PI_PHON>
<NSF_ID>000399342</NSF_ID>
<StartDate>07/29/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926977600</ZipCode>
<StreetAddress><![CDATA[160 Aldrich Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~90000</FUND_OBLG>
<FUND_OBLG>2010~90000</FUND_OBLG>
<FUND_OBLG>2011~106000</FUND_OBLG>
<FUND_OBLG>2012~89999</FUND_OBLG>
<FUND_OBLG>2013~89986</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Developing reliable software systems is a key challenge for our society. Despite many years of effort, software systems still suffer from catastrophic failures. The negative consequences of these failures range from the simple denial of service to legitimate users through to the destruction of physical systems (with the potential for collateral damage) when their software controls fail. &nbsp;This research project developed a new approach for creating software systems that are more robust against software failures. &nbsp;The project developed a compiler and language for building loosely coupled software systems that can more gracefully tolerate failures in components. &nbsp;The hypothesis that guided this research is that exposing the high-level structure of a software system to the compiler and runtime system can enable the automatic application of techniques that appropriately manage error propagation to make software systems substantially more resilient. &nbsp;The research confirmed that such software systems are more robust to component failures. &nbsp;The research developed language and runtime mechanisms for automatically adapting computations in response to failures to break dependences on the failed component. &nbsp;The project also developed a transactional I/O implementation that supported rolling back the effects of failed computations and precise analysis of source code that can discover information about sharing in the data structures that code creates and manipulates. &nbsp;The results from the project were incorporated into graduate classes and disseminated through research publications. &nbsp;The project has supported and trained several PhD students, a MS student, and undergraduate students. &nbsp;The research project led to the development of software that has been made freely available.</p><br> <p>            Last Modified: 09/25/2015<br>      Modified by: Brian&nbsp;C&nbsp;Demsky</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Developing reliable software systems is a key challenge for our society. Despite many years of effort, software systems still suffer from catastrophic failures. The negative consequences of these failures range from the simple denial of service to legitimate users through to the destruction of physical systems (with the potential for collateral damage) when their software controls fail.  This research project developed a new approach for creating software systems that are more robust against software failures.  The project developed a compiler and language for building loosely coupled software systems that can more gracefully tolerate failures in components.  The hypothesis that guided this research is that exposing the high-level structure of a software system to the compiler and runtime system can enable the automatic application of techniques that appropriately manage error propagation to make software systems substantially more resilient.  The research confirmed that such software systems are more robust to component failures.  The research developed language and runtime mechanisms for automatically adapting computations in response to failures to break dependences on the failed component.  The project also developed a transactional I/O implementation that supported rolling back the effects of failed computations and precise analysis of source code that can discover information about sharing in the data structures that code creates and manipulates.  The results from the project were incorporated into graduate classes and disseminated through research publications.  The project has supported and trained several PhD students, a MS student, and undergraduate students.  The research project led to the development of software that has been made freely available.       Last Modified: 09/25/2015       Submitted by: Brian C Demsky]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
