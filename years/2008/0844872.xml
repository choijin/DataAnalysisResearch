<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Approximation Algorithms and Hardness of Network Optimization Problems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2009</AwardEffectiveDate>
<AwardExpirationDate>12/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>373577.00</AwardTotalIntnAmount>
<AwardAmount>460690</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Balasubramanian Kalyanasundaram</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>CAREER: Approximation Algorithms and Hardness of Network Optimization Problems&lt;br/&gt;Julia Chuzhoy&lt;br/&gt;&lt;br/&gt;Network optimization problems play a central role in combinatorial optimization, and they arise in virtually every area of computer science. Since many such problems are NP-hard, a natural approach is to settle for efficient algorithms that produce near-optimal, or approximate, solutions. Many powerful algorithmic paradigms, and techniques used in proving lower bounds on approximability, have been developed in the context of network optimization problems, leading to a better understanding of many important problems in this class. Despite this progress, some of the most fundamental network optimization problems remain poorly understood. This research will focus on central open problems in the areas of graph partitioning, graph coloring, network design and network routing. One goal of this research is to advance the understanding of the approximability of these problems. The PI would also like to explore the connections between algorithm design and hardness of approximation proofs, and to combine tools developed in the areas of approximation algorithms, graph theory, hardness of approximation and probabilistically checkable proofs in exploring the approximability of network optimization problems.&lt;br/&gt;&lt;br/&gt;Better approximation algorithms for network optimization problems will lead to improved performance for many applications, and will most probably require the development of new algorithmic paradigms. Understanding and isolating features that make problems intractable will help in finding better formulation for practical problems in the framework of combinatorial optimization, when such features can be avoided. The educational component of this project includes introducing a new course on approximation of network optimization problems. The PI will also participate in activities aimed at encouraging a broader involvement of women in research in theoretical computer science. These activities include participation in workshops and mentorship programs whose target audience is advanced undergraduate and graduate female students.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>12/29/2008</MinAmdLetterDate>
<MaxAmdLetterDate>12/18/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0844872</AwardID>
<Investigator>
<FirstName>Julia</FirstName>
<LastName>Chuzhoy</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Julia Chuzhoy</PI_FULL_NAME>
<EmailAddress>cjulia@ttic.edu</EmailAddress>
<PI_PHON>7738342490</PI_PHON>
<NSF_ID>000509131</NSF_ID>
<StartDate>12/29/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Toyota Technological Institute at Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606372803</ZipCode>
<PhoneNumber>7738340409</PhoneNumber>
<StreetAddress>6045 S Kenwood Ave</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>127228927</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TOYOTA TECHNOLOGICAL INSTITUTE AT CHICAGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Toyota Technological Institute at Chicago]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606372803</ZipCode>
<StreetAddress><![CDATA[6045 S Kenwood Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramElement>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~180265</FUND_OBLG>
<FUND_OBLG>2011~90218</FUND_OBLG>
<FUND_OBLG>2012~93435</FUND_OBLG>
<FUND_OBLG>2013~96772</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A graph is a collection of objects, called vertices, with some pairs of objects being connected by edges. Graphs are a natural and a convenient way of representing data, and as such they are extensively used. In this project we have investigated several central graph optimization problems. Many of these problems are NP-hard, and are unlikely to have efficient algorithms that find optimal solutions. Instead, we often settle for approximation algorithms &ndash; efficient algorithms that find near-optimal solution. The approximation factor of an algorithm is the worst-case multiplicative gap between the value of the optimal solution and the value of the solution returned by the algorithm. We use the convention that the approximation factor is always at least 1. We summarize three of the main outcomes of this project.</p> <p>&nbsp;</p> <p>The first line of work is algorithms for the graph crossing number problem. In this problem, we need to draw a graph in the plane, so as to minimize the number of points where pairs of the edges of the graph cross. This problem has been extensively studied in both computer science and mathematics. The problem is NP-hard, and a common heuristic employed to solve this problem is to first delete edges from the graph until it becomes planar, and then gradually add the deleted edges while minimizing the number of crossings introduced. In a joint work with Yury Makarychev and Anastasios Sidiropoulos, we have shown the first analytic bounds on the performance of this type of heuristic in bounded-degree graphs: if at most k edges are deleted, then we can find a drawing with at most O(k(k+OPT)) crossings, where OPT is the number of crossings in the optimal drawing. Building on this result, we have later shown an improved approximation algorithm for the graph crossing number on bounded-degree graphs, achieving an approximation factor of O(n<sup>0.9 </sup>poly(log(n))). This improves the best previous O(n log<sup>1.5</sup>n)-approximation for the problem. When the value of the optimal solution is small, our algorithm achieves stronger approximation factors.</p> <p>The second direction of this project is the study of graph routing problems. In the edge-disjoint-paths problem, we are given a graph and a collection of k pairs of vertices, that we call demand pairs. Our goal is to route as many of the pairs as possible, by choosing a path connecting each such pair, while the chosen paths are required to be edge-disjoint &ndash; that is, each edge of the graph may participate in at most one such path.&nbsp; The approximation status of this problem is still widely open &ndash; the best currently known approximation algorithm achieves an O(\sqrt n)-approximation factor, while the best negative result shows that no efficient algorithm can achieve a better than O(\sqrt{log n})-approximation factor, under some standard complexity assumptions. However, if we slightly relax the problem, and allow an edge to be used by at most two paths, then our recent work with Shi Li shows an O(poly(log k))-approximation algorithm for this problem. This result has lead to several follow-up papers, and we discuss one of them below.</p> <p>The third direction of this project lies in the intersection of approximation algorithms and graph minor theory. We start with some graph-theoretic background. Trees are a special class of relatively simple graphs, and many problems that are hard to solve in general graphs have good algorithms in tree graphs.&nbsp; Moreover, even when a graph is not a tree, it may be close to being a tree in some sense, and we would like to be able to exploit this in designing good algorithms for such graphs. The notion of treewidth allows us to measure how close is a graph to being a tree (in some sense), and usually problems that have good algorithms on trees also have good algorithms on small-treewidth graphs. However, when the graph treewidth is large...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A graph is a collection of objects, called vertices, with some pairs of objects being connected by edges. Graphs are a natural and a convenient way of representing data, and as such they are extensively used. In this project we have investigated several central graph optimization problems. Many of these problems are NP-hard, and are unlikely to have efficient algorithms that find optimal solutions. Instead, we often settle for approximation algorithms &ndash; efficient algorithms that find near-optimal solution. The approximation factor of an algorithm is the worst-case multiplicative gap between the value of the optimal solution and the value of the solution returned by the algorithm. We use the convention that the approximation factor is always at least 1. We summarize three of the main outcomes of this project.     The first line of work is algorithms for the graph crossing number problem. In this problem, we need to draw a graph in the plane, so as to minimize the number of points where pairs of the edges of the graph cross. This problem has been extensively studied in both computer science and mathematics. The problem is NP-hard, and a common heuristic employed to solve this problem is to first delete edges from the graph until it becomes planar, and then gradually add the deleted edges while minimizing the number of crossings introduced. In a joint work with Yury Makarychev and Anastasios Sidiropoulos, we have shown the first analytic bounds on the performance of this type of heuristic in bounded-degree graphs: if at most k edges are deleted, then we can find a drawing with at most O(k(k+OPT)) crossings, where OPT is the number of crossings in the optimal drawing. Building on this result, we have later shown an improved approximation algorithm for the graph crossing number on bounded-degree graphs, achieving an approximation factor of O(n0.9 poly(log(n))). This improves the best previous O(n log1.5n)-approximation for the problem. When the value of the optimal solution is small, our algorithm achieves stronger approximation factors.  The second direction of this project is the study of graph routing problems. In the edge-disjoint-paths problem, we are given a graph and a collection of k pairs of vertices, that we call demand pairs. Our goal is to route as many of the pairs as possible, by choosing a path connecting each such pair, while the chosen paths are required to be edge-disjoint &ndash; that is, each edge of the graph may participate in at most one such path.  The approximation status of this problem is still widely open &ndash; the best currently known approximation algorithm achieves an O(\sqrt n)-approximation factor, while the best negative result shows that no efficient algorithm can achieve a better than O(\sqrt{log n})-approximation factor, under some standard complexity assumptions. However, if we slightly relax the problem, and allow an edge to be used by at most two paths, then our recent work with Shi Li shows an O(poly(log k))-approximation algorithm for this problem. This result has lead to several follow-up papers, and we discuss one of them below.  The third direction of this project lies in the intersection of approximation algorithms and graph minor theory. We start with some graph-theoretic background. Trees are a special class of relatively simple graphs, and many problems that are hard to solve in general graphs have good algorithms in tree graphs.  Moreover, even when a graph is not a tree, it may be close to being a tree in some sense, and we would like to be able to exploit this in designing good algorithms for such graphs. The notion of treewidth allows us to measure how close is a graph to being a tree (in some sense), and usually problems that have good algorithms on trees also have good algorithms on small-treewidth graphs. However, when the graph treewidth is large, the algorithms for tree graphs are not useful anymore, and we need to find other ways to handle such graphs. The grid-min...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
