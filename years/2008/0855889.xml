<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:  Horseshoes and Hand Grenades:  Exploiting Error Tolerance in Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2008</AwardEffectiveDate>
<AwardExpirationDate>05/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>242848.00</AwardTotalIntnAmount>
<AwardAmount>258848</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Ahmed Louri</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The goal in most reliability projects has, traditionally, been to prevent errors of all kinds.  Researchers are now discovering that not all errors cause a failure. Some errors can be masked within the circuits as not all inputs affect final results.  By preventing all errors rather than only those errors that change a result, time and power get wasted.  This project proposes to explore techniques which allow errors to occur that do not change final results. In many applications such as facial recognition or voice recognition, many of the data errors will not be noticed by the software, depending on the particular data. For example, if we one bit gets flipped in an incoming audio signal for voice recognition, it may not affect the result at all. The proper word may be recognized despite the error in one sample. A key observation, however, is that even these applications are not very resistant to control flow errors. For example, if the voice recognition software stops before it completes its analysis of the audio signal, the wrong word would most likely be recognized leading to failure. &lt;br/&gt;&lt;br/&gt;This project explores how to take advantage of partial tolerance to unreliability.  More efficient reliability mechanisms can be designed that are targeted towards only the important instructions, not all instructions. In even more tolerant applications, errors can be introduced into the system in order to speed up the system--allowing the process to proceed without waiting for slow operations.  In order to discover and exploit error-tolerance, this project will identify 10-15 applications that are tolerant to errors, develop heuristics to determine which instructions are more tolerant to error than others, develop specific techniques for efficiently protecting only critical instructions from errors, and develop mechanisms to introduce errors into less important, high-latency instructions in order to save power and/or improve performance.</AbstractNarration>
<MinAmdLetterDate>01/23/2009</MinAmdLetterDate>
<MaxAmdLetterDate>05/06/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0855889</AwardID>
<Investigator>
<FirstName>Diana</FirstName>
<LastName>Franklin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Diana Franklin</PI_FULL_NAME>
<EmailAddress>dmfranklin@uchicago.edu</EmailAddress>
<PI_PHON>8056653630</PI_PHON>
<NSF_ID>000444531</NSF_ID>
<StartDate>01/23/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Barbara</Name>
<CityName>Santa Barbara</CityName>
<ZipCode>931062050</ZipCode>
<PhoneNumber>8058934188</PhoneNumber>
<StreetAddress>Office of Research</StreetAddress>
<StreetAddress2><![CDATA[Rm 3227 Cheadle Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA24</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>094878394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SANTA BARBARA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Santa Barbara]]></Name>
<CityName>Santa Barbara</CityName>
<StateCode>CA</StateCode>
<ZipCode>931062050</ZipCode>
<StreetAddress><![CDATA[Office of Research]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA24</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~2848</FUND_OBLG>
<FUND_OBLG>2008~60000</FUND_OBLG>
<FUND_OBLG>2009~76000</FUND_OBLG>
<FUND_OBLG>2010~60000</FUND_OBLG>
<FUND_OBLG>2011~60000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This CAREER award funded four research efforts - two in computer architecture and two outreach projects for computer science education.</p> <p>In our first project, we looked at how to project the computer from errors caused by unexpected errors, such as radiation from the sun.&nbsp; A common way to protect against this is to run every instruction in the program twice.&nbsp; This requires twice as much hardware for the same program.&nbsp; We found that, especially in multimedia applications like streaming video, audio, or artificial intelligence applications, there is no appreciable loss in accuracy if specific instructions are incorrect.&nbsp; Therefore, we built a system that only runs the important instructions twice.&nbsp; Depending on the application, we were able to reduce the overhead by 20-50%.</p> <p>Our second project looks at running parallel programs on future parallel chips more efficiently.&nbsp; There are two parts to this, the data the program uses and the instructions it runs.&nbsp; Data is a problem because the parallel programs have not caught up with parallel architectures.&nbsp; These programs were written for computers in which each part of the program ran in a separate machine with its own memory.&nbsp; Therefore, much of the same data was stored in each machine.&nbsp; Now, all of these parts of the program are run on the same chip, sharing the same memory.&nbsp; To take advantage of this, the programs would need to all be rewritten.&nbsp; We propose to have the system detect when the same data is being used and store it as one piece of data instead of a separate one for each part of the program.&nbsp; We applied this technique to a few different levels in the machine.&nbsp;&nbsp; By applying this to on-chip cache, we saw orders of magnitude speedup.&nbsp; When used in off-chip memory, we saved 37-60% of the&nbsp; memory, allowing larger programs to be executed on the same machine.&nbsp;</p> <p>We then tackled computation on the chip - reducing instructions rather than memory space.&nbsp; We found that for many parallel applications, they execute many of the same instructions, sometimes with the same data.&nbsp; This is not programmer error - if these instructions were normally only executed once, and all parts of the program needed the results, it would be very slow to communicate all of those results to the other parts of the program.&nbsp; We designed a processor that detects when the instructions be executed are the same.&nbsp; If so, it only executes them once.&nbsp; The key is that the communication is free because this is all done in the same processor with shared resources.</p> <p>Finally, we made significant contributions to broader impacts with computer science education work.&nbsp; We had three undergraduate &nbsp;students create the pilot system for a summer camp eventually funded through the NSF Broadening Participation in Computing Grant.&nbsp; This summer camp is for female and Latina/o middle school students to introduce them to computer science through engaging projects based on Mayan culture and endangered species.&nbsp; This camp has been very successful, increasing interest in computer science as a field, confidence in computer science skills, and experience with programming.&nbsp; Each summer, almost half of the females eligible to return to the camp have applied to return.&nbsp; In addition, we analyzed the needs of K-12 educational cell phone applications and compared that to the known behaviors of cell phones as they fail from old age.&nbsp; We determined that K-12 education is an excellent match for used cell phones and hope this will spur innovation in the use of cell phone technology in K-12 education.</p><br> <p>            Last Modified: 07/04/2012<br>      Modified by: Diana&nbsp;Franklin</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This CAREER award funded four research efforts - two in computer architecture and two outreach projects for computer science education.  In our first project, we looked at how to project the computer from errors caused by unexpected errors, such as radiation from the sun.  A common way to protect against this is to run every instruction in the program twice.  This requires twice as much hardware for the same program.  We found that, especially in multimedia applications like streaming video, audio, or artificial intelligence applications, there is no appreciable loss in accuracy if specific instructions are incorrect.  Therefore, we built a system that only runs the important instructions twice.  Depending on the application, we were able to reduce the overhead by 20-50%.  Our second project looks at running parallel programs on future parallel chips more efficiently.  There are two parts to this, the data the program uses and the instructions it runs.  Data is a problem because the parallel programs have not caught up with parallel architectures.  These programs were written for computers in which each part of the program ran in a separate machine with its own memory.  Therefore, much of the same data was stored in each machine.  Now, all of these parts of the program are run on the same chip, sharing the same memory.  To take advantage of this, the programs would need to all be rewritten.  We propose to have the system detect when the same data is being used and store it as one piece of data instead of a separate one for each part of the program.  We applied this technique to a few different levels in the machine.   By applying this to on-chip cache, we saw orders of magnitude speedup.  When used in off-chip memory, we saved 37-60% of the  memory, allowing larger programs to be executed on the same machine.   We then tackled computation on the chip - reducing instructions rather than memory space.  We found that for many parallel applications, they execute many of the same instructions, sometimes with the same data.  This is not programmer error - if these instructions were normally only executed once, and all parts of the program needed the results, it would be very slow to communicate all of those results to the other parts of the program.  We designed a processor that detects when the instructions be executed are the same.  If so, it only executes them once.  The key is that the communication is free because this is all done in the same processor with shared resources.  Finally, we made significant contributions to broader impacts with computer science education work.  We had three undergraduate  students create the pilot system for a summer camp eventually funded through the NSF Broadening Participation in Computing Grant.  This summer camp is for female and Latina/o middle school students to introduce them to computer science through engaging projects based on Mayan culture and endangered species.  This camp has been very successful, increasing interest in computer science as a field, confidence in computer science skills, and experience with programming.  Each summer, almost half of the females eligible to return to the camp have applied to return.  In addition, we analyzed the needs of K-12 educational cell phone applications and compared that to the known behaviors of cell phones as they fail from old age.  We determined that K-12 education is an excellent match for used cell phones and hope this will spur innovation in the use of cell phone technology in K-12 education.       Last Modified: 07/04/2012       Submitted by: Diana Franklin]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
