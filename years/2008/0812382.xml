<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>HCC-Small: End-User Retrofitting of Applications By Recognizing Text and UI Components</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
<AwardExpirationDate>08/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>328086</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Ephraim Glinert</SignBlockName>
<PO_EMAI>eglinert@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Despite the enormous effort that goes into application design, end users invariably encounter workflow scenarios that are poorly supported by even the most developed, commercial-quality applications. Lack of support for end-user extension increases the burden on application developers to exhaustively anticipate the needs of all end users and then to commit enough resources to address their needs, which often includes re-implementing solutions already found in other applications. This project develops the feasibility of externally retrofitting, without altering, running applications with new interfaces and functionality made possible by using a combination of application-independent pixel-level recognition techniques and more specialized techniques for inspecting data structures exposed by the window system or application. Users will be able to make annotations to those running applications, including hand-drawn ink, typed text, diagrams, interactive widgets, or even links to other application user interface components. Registration techniques will then be researched to associate the annotations with specific elements of an application or document so that such an annotation can be made to appear perhaps only in one place in a specific file, or whenever a certain application runs. This supports a variety of practices, including: integrating functionality from different applications, enriched collaboration, task or user customized interfaces, and adding new fine-grained user interface elements to applications. &lt;br/&gt;&lt;br/&gt;Broader Impact. Making applications more malleable by embracing customization as a first class and general notion could fundamentally shift application design. Instead of relying solely on inherently slow development of one-size-fits-all applications, end-users could become de facto participants in application design, somewhat analogous to the relationship between traditional print-copy publishing and blogging. Rather than waiting, possibly years, for even simple revisions to fix workflow inefficiencies, users will be empowered to make limited modifications to applications almost as easily as marking up a document, for example by freely rearranging applications? interfaces, or adding diagrammatic annotations displayed over documents which do not natively support them.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/16/2008</MinAmdLetterDate>
<MaxAmdLetterDate>07/01/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0812382</AwardID>
<Investigator>
<FirstName>Andries</FirstName>
<LastName>van Dam</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andries van Dam</PI_FULL_NAME>
<EmailAddress>avd@cs.brown.edu</EmailAddress>
<PI_PHON>4018637640</PI_PHON>
<NSF_ID>000100416</NSF_ID>
<StartDate>08/16/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brown University</Name>
<CityName>Providence</CityName>
<ZipCode>029129002</ZipCode>
<PhoneNumber>4018632777</PhoneNumber>
<StreetAddress>BOX 1929</StreetAddress>
<StreetAddress2><![CDATA[350 Eddy Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<StateCode>RI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>RI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001785542</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BROWN UNIVERSITY IN PROVIDENCE IN THE STATE OF RHODE ISLAND AND PROVIDENCE PLANTATIONS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001785542</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Brown University]]></Name>
<CityName>Providence</CityName>
<StateCode>RI</StateCode>
<ZipCode>029129002</ZipCode>
<StreetAddress><![CDATA[BOX 1929]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>RI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0116000</Code>
<Name>Human Subjects</Name>
</FoaInformation>
<ProgramElement>
<Code>7367</Code>
<Text>HCC-Human-Centered Computing</Text>
</ProgramElement>
<ProgramReference>
<Code>7367</Code>
<Text>Cyber-Human Systems</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~300000</FUND_OBLG>
<FUND_OBLG>2009~16000</FUND_OBLG>
<FUND_OBLG>2010~12086</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-family: Times New Roman; font-size: small;">Despite the enormous effort that goes into application design, end users invariably encounter workflow scenarios that are poorly supported by even the most developed, commercial-quality applications.<span style="mso-spacerun: yes;">&nbsp; </span>In this project, we explored a variety of ways for end-users to modify the behavior of applications without involving technically savvy application programmers to modify the application&rsquo;s source code. <span style="mso-spacerun: yes;">&nbsp;</span>The idea is essentially to model the modification of an application&rsquo;s behavior from a physically-based perspective.<span style="mso-spacerun: yes;">&nbsp; </span>Instead of using programming techniques, we wanted to make an application feel more like a piece of paper that can be cut-up, re-arranged, and blended with pieces of other pieces of paper.<span style="mso-spacerun: yes;">&nbsp; </span>Since the process of cutting up applications is not directly supported in existing systems, we show the users a &ldquo;copy&rdquo; of the display screen &ndash; the real, unmodified display screen (with the running applications) is never shown but still exists.<span style="mso-spacerun: yes;">&nbsp; </span>Thus, the copied image can be cut apart and re-assembled since it is just an image &ndash; however, all the while we maintain a link between each piece that has been moved or changed and the unmodified &ldquo;original&rdquo;.<span style="mso-spacerun: yes;">&nbsp; </span>If the user tries to interact with their modified, copied versi</span><a name="_GoBack"></a><span style="font-family: Times New Roman; font-size: small;">on of the screen, we transform all of their actions into corresponding interactions on the original display screen.<span style="mso-spacerun: yes;">&nbsp; </span>By keeping the modified copy of the display screen synchronized with the original display screen, end-users can feel as if they have changed the application&rsquo;s behavior even though the original application is still running, unmodified, &ldquo;in the background.&rdquo;<span style="mso-spacerun: yes;">&nbsp; </span>During this project, we developed techniques for recognizing application elements, techniques for copying and modifying a display screen such that it is still synchronized with the original display, and we developed a set of retrofit applications.</span></p> <p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-family: Times New Roman; font-size: small;">&nbsp;</span></p> <p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: small;"><span style="font-family: Times New Roman;"><em style="mso-bidi-font-style: normal;">Recognizing application elements</em>: <span style="mso-spacerun: yes;">&nbsp;</span>There are two classes of techniques for recognizing application elements so that they can be synchronized with changes made by a user: applications can be recognized optically, the way a human recognizes an application in terms of its colors, shapes, and text labels; or applications can be recognized by probing the abstract representation of applications that operating systems may expose.<span style="mso-spacerun: yes;">&nbsp; </span>The former techniques are the most general since they can work with any application, but the latter techniques can often access (&ldquo;see&rdquo;) more of an application since not all aspects of an application can be seen on the display all the time (e.g., the elements of a File menu cannot be seen before clicking on the File menu, although data structures representing elements of the File menu generally will always exist). In this project, we developed a toolkit of techniques which try to unify recognition based approaches with data structure based approaches to provide the best balance of generality and robustness.</span...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Despite the enormous effort that goes into application design, end users invariably encounter workflow scenarios that are poorly supported by even the most developed, commercial-quality applications.  In this project, we explored a variety of ways for end-users to modify the behavior of applications without involving technically savvy application programmers to modify the applicationÆs source code.  The idea is essentially to model the modification of an applicationÆs behavior from a physically-based perspective.  Instead of using programming techniques, we wanted to make an application feel more like a piece of paper that can be cut-up, re-arranged, and blended with pieces of other pieces of paper.  Since the process of cutting up applications is not directly supported in existing systems, we show the users a "copy" of the display screen &ndash; the real, unmodified display screen (with the running applications) is never shown but still exists.  Thus, the copied image can be cut apart and re-assembled since it is just an image &ndash; however, all the while we maintain a link between each piece that has been moved or changed and the unmodified "original".  If the user tries to interact with their modified, copied version of the screen, we transform all of their actions into corresponding interactions on the original display screen.  By keeping the modified copy of the display screen synchronized with the original display screen, end-users can feel as if they have changed the applicationÆs behavior even though the original application is still running, unmodified, "in the background."  During this project, we developed techniques for recognizing application elements, techniques for copying and modifying a display screen such that it is still synchronized with the original display, and we developed a set of retrofit applications.   Recognizing application elements:  There are two classes of techniques for recognizing application elements so that they can be synchronized with changes made by a user: applications can be recognized optically, the way a human recognizes an application in terms of its colors, shapes, and text labels; or applications can be recognized by probing the abstract representation of applications that operating systems may expose.  The former techniques are the most general since they can work with any application, but the latter techniques can often access ("see") more of an application since not all aspects of an application can be seen on the display all the time (e.g., the elements of a File menu cannot be seen before clicking on the File menu, although data structures representing elements of the File menu generally will always exist). In this project, we developed a toolkit of techniques which try to unify recognition based approaches with data structure based approaches to provide the best balance of generality and robustness.   Modifying application behavior: To modify the way applications work, we allow users to "copy" regions of the screen.  These screen copies know where in the original application they came from.  Thus, for example, if the user copies a button from an application, moves it somewhere else, makes it bigger, and then clicks on it, we pass that click event back to the original button in the underlying (but not visible) application and if that click modifies the appearance of the underlying application, we copy those changes back to the users modified version of the display.   By combining the ability to cut apart user interfaces with the ability to create macros (automated sequences of activities), end-users can generate novel application behaviors on their own.  For example, a user can instruct another on how to use an application by writing messages over menus and buttons; when another user runs the application, those messages will show up next to right buttons/menus even if their windows are arranged differently on the screen.     Interesting retrofit functionality: To emphasize t...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
