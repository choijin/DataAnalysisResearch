<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CT-M:   Hardware Containers for Software Components - Detection and Recovery at the Hardware/Software Interface</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2009</AwardEffectiveDate>
<AwardExpirationDate>12/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>216000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
<PO_EMAI>jepstein@nsf.gov</PO_EMAI>
<PO_PHON>7032928338</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project focuses on hardware features &lt;br/&gt;to improve the security of software systems.&lt;br/&gt;By refining the coarse-grained protections available in&lt;br/&gt;today's architectures, the project will aim to protect&lt;br/&gt;the integrity of individual software objects or components.&lt;br/&gt;The hardware mechanisms force tight controls on &lt;br/&gt;the execution of software components, which&lt;br/&gt;programmers can define to be as large as entire&lt;br/&gt;applications or as small as individual objects. &lt;br/&gt;The goal is to rapidly detect and also recover from attacks that&lt;br/&gt;improperly access memory or take over the CPU.&lt;br/&gt;The approach also includes hardware-supervised&lt;br/&gt;recovery, to enable systems to return to normal &lt;br/&gt;operation after an attack and to protect the recovery &lt;br/&gt;process itself from attacks.&lt;br/&gt;&lt;br/&gt;The benefits of this project include the ability to &lt;br/&gt;thwart a large class of attacks and the potential of&lt;br/&gt;developing more robust software systems in the future.&lt;br/&gt;Recovery, which has received somewhat less attention than&lt;br/&gt;attack prevention or detection, is especially important for &lt;br/&gt;embedded systems that do not have the luxury of intervention &lt;br/&gt;by human operators.&lt;br/&gt;&lt;br/&gt;The project will be used to train graduate students and to &lt;br/&gt;feed material into graduate courses taught at the three &lt;br/&gt;participating universities. Modules will also be developed for &lt;br/&gt;use in K-12 education with the aim of drawing students into &lt;br/&gt;considering careers in computer science and engineering. &lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/15/2008</MinAmdLetterDate>
<MaxAmdLetterDate>07/20/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0831041</AwardID>
<Investigator>
<FirstName>Joseph</FirstName>
<LastName>Zambreno</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Joseph A Zambreno</PI_FULL_NAME>
<EmailAddress>zambreno@iastate.edu</EmailAddress>
<PI_PHON>5152943312</PI_PHON>
<NSF_ID>000315231</NSF_ID>
<StartDate>08/15/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005309844</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005309844</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Iowa State University]]></Name>
<CityName>AMES</CityName>
<StateCode>IA</StateCode>
<ZipCode>500112207</ZipCode>
<StreetAddress><![CDATA[1138 Pearson]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7371</Code>
<Text>CYBER TRUST</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~50000</FUND_OBLG>
<FUND_OBLG>2009~116000</FUND_OBLG>
<FUND_OBLG>2011~50000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>RESEARCH:</p> <p>In this project, we have investigated security issues that arise from complex software systems that are composed of components of&nbsp;varying provenance. Our main idea is that software component metadata&nbsp;can be defined at application build-time, and certain properties (e.g.&nbsp;memory access boundaries) can be enforced at run-time using simple&nbsp;hardware support. Hence the term 'hardware containers'. Specifically&nbsp;we investigated software vulnerabilities that cross component&nbsp;boundaries - a good recent example of this are the various Adobe PDF&nbsp;vulnerabilities that are exploitable due to insufficient sandboxing&nbsp;<br />between the handlers for the various supported modules that can&nbsp;comprise a complex PDF file. We believe that simple run-time rules&nbsp;about individual software components can be specified either manually&nbsp;or with compiler-support, and that a hardware engine that sits near&nbsp;the CPU / memory interface can be used to keep track of current&nbsp;components.&nbsp;</p> <p>A second focus aspect of this project was on recovery. Detection for&nbsp;this approach will typically be posteriori as an ill-behaved&nbsp;component's behavior is only observable as it crosses component&nbsp;monitoring boundaries. For this reason we are investigated both traditional (e.g. check-pointing and rollback) as well as non-traditional (e.g. reversible computing) methods to recover from an&nbsp;attack launched from a vulnerable software component.</p> <p>A third focus area was regarding the security&nbsp;of the hardware components itself. As to some degree our initial approach&nbsp;only pushes the burden down the hw/sw stack by replacing vulnerable&nbsp;software components with (potentially) vulnerable hardware components, we have also investigated general approaches to&nbsp;hardware design security, and how to mitigate the effect of hardware&nbsp;Trojans inserted at various points of the fabrication process.</p> <p>&nbsp;</p> <p>EDUCATION:</p> <p>The students who have worked on this project to this point have picked&nbsp;<br />up research experience and gained expertise in several technical areas:<br />1) VHDL design<br />2) FPGA design<br />3) CAD tool modification<br />4) Algorithms<br />5) Signal processing<br />6) Hardware prototyping<br />7) Some compiler experience<br />8) Architecture simulation</p> <p>With regards to teaching, some aspects of security are being included&nbsp;in my CprE 583 - Reconfigurable Computing Systems&nbsp;class taught every other semester. The newly redesigned labs in 583 are&nbsp;using the LEON-based Sparc&nbsp;<br />infrastructure developed as part of the research tasks for this&nbsp;project. A previously-developed course module on secure systems that was developed for this project and&nbsp;originally included in CprE 381 - Computer&nbsp;Organization has now been moved to CprE 488.&nbsp;</p> <p>A new course came online in Spring 2011: CprE 480X - Graphics&nbsp;Processing and Architecture. While not&nbsp;directly relevant to the security focus of this project, many of the&nbsp;skills the funded students picked up&nbsp;listed above were invaluable in designing the labs and some of the content for this new course.</p> <p>&nbsp;</p> <p>OUTREACH:</p> <p>During the timespan of this project, the PI&nbsp;volunteered to manage the 'video game design' theme of the Iowa&nbsp;State IT Adventures / IT Olympics.&nbsp;Over the course of the year, multiple teams of Iowa high school students&nbsp;were&nbsp;<br />presented with learning modules related to the Alice environment,&nbsp;which supports an innovative game-like environment for teaching&nbsp;fundamental&nbsp;<br />programming concepts.&nbsp;As part of this outreach program, the PI with the assistance of several undergraduate students developed several video game&nbsp;scripting engines. The main goal behind this development was to introduce programmi...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ RESEARCH:  In this project, we have investigated security issues that arise from complex software systems that are composed of components of varying provenance. Our main idea is that software component metadata can be defined at application build-time, and certain properties (e.g. memory access boundaries) can be enforced at run-time using simple hardware support. Hence the term 'hardware containers'. Specifically we investigated software vulnerabilities that cross component boundaries - a good recent example of this are the various Adobe PDF vulnerabilities that are exploitable due to insufficient sandboxing  between the handlers for the various supported modules that can comprise a complex PDF file. We believe that simple run-time rules about individual software components can be specified either manually or with compiler-support, and that a hardware engine that sits near the CPU / memory interface can be used to keep track of current components.   A second focus aspect of this project was on recovery. Detection for this approach will typically be posteriori as an ill-behaved component's behavior is only observable as it crosses component monitoring boundaries. For this reason we are investigated both traditional (e.g. check-pointing and rollback) as well as non-traditional (e.g. reversible computing) methods to recover from an attack launched from a vulnerable software component.  A third focus area was regarding the security of the hardware components itself. As to some degree our initial approach only pushes the burden down the hw/sw stack by replacing vulnerable software components with (potentially) vulnerable hardware components, we have also investigated general approaches to hardware design security, and how to mitigate the effect of hardware Trojans inserted at various points of the fabrication process.     EDUCATION:  The students who have worked on this project to this point have picked  up research experience and gained expertise in several technical areas: 1) VHDL design 2) FPGA design 3) CAD tool modification 4) Algorithms 5) Signal processing 6) Hardware prototyping 7) Some compiler experience 8) Architecture simulation  With regards to teaching, some aspects of security are being included in my CprE 583 - Reconfigurable Computing Systems class taught every other semester. The newly redesigned labs in 583 are using the LEON-based Sparc  infrastructure developed as part of the research tasks for this project. A previously-developed course module on secure systems that was developed for this project and originally included in CprE 381 - Computer Organization has now been moved to CprE 488.   A new course came online in Spring 2011: CprE 480X - Graphics Processing and Architecture. While not directly relevant to the security focus of this project, many of the skills the funded students picked up listed above were invaluable in designing the labs and some of the content for this new course.     OUTREACH:  During the timespan of this project, the PI volunteered to manage the 'video game design' theme of the Iowa State IT Adventures / IT Olympics. Over the course of the year, multiple teams of Iowa high school students were  presented with learning modules related to the Alice environment, which supports an innovative game-like environment for teaching fundamental  programming concepts. As part of this outreach program, the PI with the assistance of several undergraduate students developed several video game scripting engines. The main goal behind this development was to introduce programming and computational thinking concepts to students in 6th through 12th grade who are unfamiliar with programming. Instead of bogging students down with syntax, compilers, and debugging, our engines are an attempt to provide a more entertaining first programming language experience. We've created 4 games to date and are always looking for new project ideas.  During outreach sessions, we introduce the concept of game scripting to s...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
