<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA-CPL-T: Collaborative Research: REEact:  A Robust Execution Environment for Fragile Multicore Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>525000.00</AwardTotalIntnAmount>
<AwardAmount>550000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>With the emergence of the multicore architecture comes the promise of integrating enormous computing power in a single chip, thereby enabling parallel computing in all types of platforms including handheld computers and desktop machines. Providing proper software support for applications is critical to harness the true power of this architecture. An inherent characteristic of multicores that presents a significant obstacle is runtime variation: reliability, energy/thermal behavior and process variation will vary across identically designed components of a multicore, producing a negative impact on application power consumption and performance. Runtime variation has been identified as one of the key problems that could block further scaling of circuits if not properly addressed. &lt;br/&gt;&lt;br/&gt;This research project is developing an advanced execution system, called a Robust Execution Environment (REEact), that dynamically mediates, controls and adapts an application's execution to the runtime resource landscape originating from runtime variations. It employs a combination of techniques in adapting both the hardware resources and the application software code to overcome the impact of runtime variations. At the hardware level, it adapts the resources, such as setting the speed/voltage of a node on the multicore. At the software level, REEact dynamically optimizes code, taking into account performance and power consumption due to runtime variations. It elicits the help of the OS in determining what resources to use in running the application. REEact informs the OS about information it dynamically discovers about latency, power, and application behavior. REEact is built as multi-layer hierarchical runtime system that interacts with the parallel application, the OS, and the underlying multicore architecture to ensure that maximum performance is achieved.</AbstractNarration>
<MinAmdLetterDate>08/16/2008</MinAmdLetterDate>
<MaxAmdLetterDate>06/17/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0811687</AwardID>
<Investigator>
<FirstName>Mary</FirstName>
<LastName>Irwin</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mary J Irwin</PI_FULL_NAME>
<EmailAddress>mji@cse.psu.edu</EmailAddress>
<PI_PHON>8148651802</PI_PHON>
<NSF_ID>000348527</NSF_ID>
<StartDate>08/16/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Mahmut</FirstName>
<LastName>Kandemir</LastName>
<PI_MID_INIT>T</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mahmut T Kandemir</PI_FULL_NAME>
<EmailAddress>mtk2@psu.edu</EmailAddress>
<PI_PHON>8148634888</PI_PHON>
<NSF_ID>000163936</NSF_ID>
<StartDate>08/16/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Pennsylvania State Univ University Park</Name>
<CityName>University Park</CityName>
<ZipCode>168021503</ZipCode>
<PhoneNumber>8148651372</PhoneNumber>
<StreetAddress>201 Old Main</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003403953</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PENNSYLVANIA STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003403953</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Pennsylvania State Univ University Park]]></Name>
<CityName>University Park</CityName>
<StateCode>PA</StateCode>
<ZipCode>168021503</ZipCode>
<StreetAddress><![CDATA[201 Old Main]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~525000</FUND_OBLG>
<FUND_OBLG>2010~25000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>With the emergence of multiple central processing units (i.e., &ldquo;cores&rdquo;) on a processor comes the promise of integrating enormous computing power in a single chip, thereby enabling parallel computing in all types of platforms, including mobile, desktop and server computers. Providing support for applications to harness the true power of this processor type is critical. Multi-core processors have an inherent characteristic that presents a significant obstacle: reliability, performance, and energy/thermal behavior vary across identically designed components of a multicore processor during the execution of software applications, producing a negative impact on power consumption and performance. Runtime variation has been identified as one of the key problems that could block further improvement of circuits if not addressed.</p> <p>&nbsp;This research project developed an advanced execution system, called REEact (Robust Execution Environment), to mediate, control and adapt an application's execution to the runtime resource landscape originating from runtime variations. REEact employed a combination of techniques to adapt the hardware resources and application software to overcome the impact of runtime variation. It dynamically changed the application through optimizations that take into account performance and power consumption due to runtime variations. It optimized the amount of work done concurrently on multiple cores and the assignment of work to cores to achieve better performance, based on other activity in the system.&nbsp; It also optimized the use of hardware capabilities, such as enabling/disabling the prefetching of data from memory and scheduling the application software to different cores to avoid thermal failure. The project determined that these optimizations successfully improved performance in response to runtime variation.</p> <p>REEact was built as multi-layer hierarchical runtime system that interacted with the parallel application, the operating system, and the underlying multicore processor. The project designed, developed and implemented REEact for a variety of computer systems, including large computers that have multiple processors, each with multiple cores. REEact was developed to be extensible to allow adaptation to new architecture features and incorporation of new new transformations and optimizations. The project found that carefully designed interfaces and capabilities made REEact flexible enough to support many transformations and optimizations while reducing programmer burden to implement the transformations and optimizations.</p> <p>The project trained twelve graduate students---five at the University of Pittsburgh, four at Penn State University, and three at the University of Virginia. In addition, the project included a number of undergraduate students. The project undertook a many outreach activities, including participating in several CRA-W Grad Cohort Workshops, leading a Schloss-Dagstuhl seminar on software dynamic translation, and presenting a conference tutorial on software dynamic translation. &nbsp;The project team also organized and led a&nbsp;CRA-W Discipline-Specific Workshop to increase participation of members of underrepresented groups by providing career mentoring advice and an overview of future research directions. The theme of the workshop was Multicore Systems: Architectures, Runtime Systems and Software Development. &nbsp;The workshop included a number of invited talks and was attended by over 35 graduate students from underrepresented groups.&nbsp;</p><br> <p>            Last Modified: 12/14/2012<br>      Modified by: Mary&nbsp;J&nbsp;Irwin</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ With the emergence of multiple central processing units (i.e., "cores") on a processor comes the promise of integrating enormous computing power in a single chip, thereby enabling parallel computing in all types of platforms, including mobile, desktop and server computers. Providing support for applications to harness the true power of this processor type is critical. Multi-core processors have an inherent characteristic that presents a significant obstacle: reliability, performance, and energy/thermal behavior vary across identically designed components of a multicore processor during the execution of software applications, producing a negative impact on power consumption and performance. Runtime variation has been identified as one of the key problems that could block further improvement of circuits if not addressed.   This research project developed an advanced execution system, called REEact (Robust Execution Environment), to mediate, control and adapt an application's execution to the runtime resource landscape originating from runtime variations. REEact employed a combination of techniques to adapt the hardware resources and application software to overcome the impact of runtime variation. It dynamically changed the application through optimizations that take into account performance and power consumption due to runtime variations. It optimized the amount of work done concurrently on multiple cores and the assignment of work to cores to achieve better performance, based on other activity in the system.  It also optimized the use of hardware capabilities, such as enabling/disabling the prefetching of data from memory and scheduling the application software to different cores to avoid thermal failure. The project determined that these optimizations successfully improved performance in response to runtime variation.  REEact was built as multi-layer hierarchical runtime system that interacted with the parallel application, the operating system, and the underlying multicore processor. The project designed, developed and implemented REEact for a variety of computer systems, including large computers that have multiple processors, each with multiple cores. REEact was developed to be extensible to allow adaptation to new architecture features and incorporation of new new transformations and optimizations. The project found that carefully designed interfaces and capabilities made REEact flexible enough to support many transformations and optimizations while reducing programmer burden to implement the transformations and optimizations.  The project trained twelve graduate students---five at the University of Pittsburgh, four at Penn State University, and three at the University of Virginia. In addition, the project included a number of undergraduate students. The project undertook a many outreach activities, including participating in several CRA-W Grad Cohort Workshops, leading a Schloss-Dagstuhl seminar on software dynamic translation, and presenting a conference tutorial on software dynamic translation.  The project team also organized and led a CRA-W Discipline-Specific Workshop to increase participation of members of underrepresented groups by providing career mentoring advice and an overview of future research directions. The theme of the workshop was Multicore Systems: Architectures, Runtime Systems and Software Development.  The workshop included a number of invited talks and was attended by over 35 graduate students from underrepresented groups.        Last Modified: 12/14/2012       Submitted by: Mary J Irwin]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
