<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>A Compositional Approach to Scalable Parallel Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>999623.00</AwardTotalIntnAmount>
<AwardAmount>1327412</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>High-end computing systems are needed to study important, compute-intensive applications such as scientific simulations, multimedia stream processing, and geographical information systems.  While these systems are still evolving, it is clear that they will be extremely large and complex, with tens to hundreds of thousands of processors providing a deep hierarchy of systems and resources.  This research will develop the theory, techniques, and building blocks that can be used by domain scientists who are not expert parallel programmers to compose efficient applications for such complex systems.&lt;br/&gt;Hence, the outcomes of the research should greatly increase the number of potential users of high-end machines to include essentially all scientists whose problems could take advantage of such systems.  The software resulting from this research, including the testbed applications for important problems in computational biology and physics, will be made publically available.&lt;br/&gt;&lt;br/&gt;Composition is a natural way to construct and reason about large, complex systems.  This research will develop compositional strategies for building applications and for optimizing and controlling the application and its use of system resources.&lt;br/&gt;This project will use the STAPL (the Standard Template Adaptive Parallel Library) infrastructure for parallel C++ code.  STAPL includes of a collection of generic parallel algorithms and distributed containers.  In this research, STAPL's existing adaptive capabilities will be further refined and novel techniques will be developed for compositional performance modeling and for providing fault-tolerance capabilities that can be set individually for each container or algorithm instance in the program.  A modern programming interface will be designed based on composition of parallel operations that will be modeled on the range abstractions in STAPL and C++0x and directly supported by a high-level compiler.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/16/2008</MinAmdLetterDate>
<MaxAmdLetterDate>05/19/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0833199</AwardID>
<Investigator>
<FirstName>Nancy</FirstName>
<LastName>Amato</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nancy M Amato</PI_FULL_NAME>
<EmailAddress>namato@illinois.edu</EmailAddress>
<PI_PHON>2173333373</PI_PHON>
<NSF_ID>000430397</NSF_ID>
<StartDate>08/16/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Lawrence</FirstName>
<LastName>Rauchwerger</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Lawrence Rauchwerger</PI_FULL_NAME>
<EmailAddress>rwerger@illinois.edu</EmailAddress>
<PI_PHON>9792550424</PI_PHON>
<NSF_ID>000468621</NSF_ID>
<StartDate>08/16/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Bjarne</FirstName>
<LastName>Stroustrup</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bjarne Stroustrup</PI_FULL_NAME>
<EmailAddress>bs@cs.tamu.edu</EmailAddress>
<PI_PHON>9798621696</PI_PHON>
<NSF_ID>000197460</NSF_ID>
<StartDate>08/16/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Texas A&amp;M Engineering Experiment Station</Name>
<CityName>College Station</CityName>
<ZipCode>778454645</ZipCode>
<PhoneNumber>9798626777</PhoneNumber>
<StreetAddress>400 Harvey Mitchell Pkwy S</StreetAddress>
<StreetAddress2><![CDATA[Suite 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX17</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>847205572</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TEXAS A&amp;M ENGINEERING EXPERIMENT STATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042915991</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Texas A&amp;M Engineering Experiment Station]]></Name>
<CityName>College Station</CityName>
<StateCode>TX</StateCode>
<ZipCode>778454645</ZipCode>
<StreetAddress><![CDATA[400 Harvey Mitchell Pkwy S]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX17</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2878</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>7952</Code>
<Text>HECURA</Text>
</ProgramElement>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7952</Code>
<Text>HECURA</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~999623</FUND_OBLG>
<FUND_OBLG>2009~231789</FUND_OBLG>
<FUND_OBLG>2010~32000</FUND_OBLG>
<FUND_OBLG>2011~32000</FUND_OBLG>
<FUND_OBLG>2013~32000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>High-end computing systems are needed to study important, compute-intensive applications such as scientific simulations, multimedia stream processing, and geographical information systems. These systems are extremely large and complex and require expert programmers to develop applications that can efficiently utilize them.<br /><br />In this project, we designed and developed theory, techniques, and building blocks that can be used by domain scientists who are not expert parallel programmers to develop efficient applications for such complex systems.&nbsp; This project made several novel contributions to the theory and practice of parallel programming that were demonstrated using the STAPL (the Standard Template Adaptive Parallel Library) infrastructure for parallel C++ code, two of which are highlighted next.&nbsp; (1) A new algorithmic paradigm - k-level asynchronous (KLA) - was designed that enables the level of asynchrony in parallel graph algorithms to be parametrically varied from none (level-synchronous) to full (asynchronous), enabling execution times to be improved through an appropriate trade-off between the use of fewer, but more expensive global synchronizations, as in level-synchronous algorithms, and more, but less expensive local synchronizations (and perhaps also redundant work), as in asynchronous algorithms.&nbsp; Experimental results of an implementation of KLA in the STAPL Graph Library showed excellent scalability on systems with tens of thousands of processors and improvements of 10x or more over level-synchronous and asynchronous versions for common graph algorithms such as breadth-first search, PageRank, k-core decomposition on certain classes of real-world graphs.&nbsp; (2) Algorithmic skeletons are high-level representations for parallel programs that hide the underlying parallelism details from program specification.&nbsp; This project developed a novel skeleton framework that represents skeletons as parametric data flow graphs and allows the composition of skeletons by point-to-point dependencies of their data flow graph representations, which eliminates&nbsp; the need for reimplementation and global synchronizations in composed skeletons. An implementation in the STAPL infrastructure showed that expressivity can be achieved without loss of performance even in complex real-world applications.<br /><br />An important objective of this project was to enable domain scientists to compose efficient applications for high-end computing systems.&nbsp; Towards this goal, we worked with several important computational science applications and representative platforms throughout the development process.&nbsp; From computational physics, we developed a code PDT (parallel deterministic transport) that implements discrete-ordinates methods for deterministic particle transport in irregular problems with complex geometries. This code is used in several multidisciplinary research projects, including multiple centers in the Department of Energy's Predictive Science Academic Alliance Program (PSAAP).&nbsp; From computational biology, we developed a STAPL code which parallelizes a motion planning algorithm that can be used to model molecular motions, such as protein folding. This project designed a new approach for parallelizing these algorithms that achieved better scalability than previous methods.<br /><br />To support high-level parallelism expressed in terms of C++ libraries we built a static analysis and transformation system, the Pivot, which can handle all of C++. We placed particular emphasis on the higher levels of abstraction, such as systematically use of templates.&nbsp; We contributed in the ISO C++ standardization effort to provide direct language support for generic programming (concepts) including a notation for semantic properties of types (axioms). Partially because of our analysis of weaknesses in actual use ``concepts'' did not make it ...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ High-end computing systems are needed to study important, compute-intensive applications such as scientific simulations, multimedia stream processing, and geographical information systems. These systems are extremely large and complex and require expert programmers to develop applications that can efficiently utilize them.  In this project, we designed and developed theory, techniques, and building blocks that can be used by domain scientists who are not expert parallel programmers to develop efficient applications for such complex systems.  This project made several novel contributions to the theory and practice of parallel programming that were demonstrated using the STAPL (the Standard Template Adaptive Parallel Library) infrastructure for parallel C++ code, two of which are highlighted next.  (1) A new algorithmic paradigm - k-level asynchronous (KLA) - was designed that enables the level of asynchrony in parallel graph algorithms to be parametrically varied from none (level-synchronous) to full (asynchronous), enabling execution times to be improved through an appropriate trade-off between the use of fewer, but more expensive global synchronizations, as in level-synchronous algorithms, and more, but less expensive local synchronizations (and perhaps also redundant work), as in asynchronous algorithms.  Experimental results of an implementation of KLA in the STAPL Graph Library showed excellent scalability on systems with tens of thousands of processors and improvements of 10x or more over level-synchronous and asynchronous versions for common graph algorithms such as breadth-first search, PageRank, k-core decomposition on certain classes of real-world graphs.  (2) Algorithmic skeletons are high-level representations for parallel programs that hide the underlying parallelism details from program specification.  This project developed a novel skeleton framework that represents skeletons as parametric data flow graphs and allows the composition of skeletons by point-to-point dependencies of their data flow graph representations, which eliminates  the need for reimplementation and global synchronizations in composed skeletons. An implementation in the STAPL infrastructure showed that expressivity can be achieved without loss of performance even in complex real-world applications.  An important objective of this project was to enable domain scientists to compose efficient applications for high-end computing systems.  Towards this goal, we worked with several important computational science applications and representative platforms throughout the development process.  From computational physics, we developed a code PDT (parallel deterministic transport) that implements discrete-ordinates methods for deterministic particle transport in irregular problems with complex geometries. This code is used in several multidisciplinary research projects, including multiple centers in the Department of Energy's Predictive Science Academic Alliance Program (PSAAP).  From computational biology, we developed a STAPL code which parallelizes a motion planning algorithm that can be used to model molecular motions, such as protein folding. This project designed a new approach for parallelizing these algorithms that achieved better scalability than previous methods.  To support high-level parallelism expressed in terms of C++ libraries we built a static analysis and transformation system, the Pivot, which can handle all of C++. We placed particular emphasis on the higher levels of abstraction, such as systematically use of templates.  We contributed in the ISO C++ standardization effort to provide direct language support for generic programming (concepts) including a notation for semantic properties of types (axioms). Partially because of our analysis of weaknesses in actual use ``concepts'' did not make it into C++11.   Training and the development of human resources was an important aspect of this project.  A large number of graduate students, m...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
