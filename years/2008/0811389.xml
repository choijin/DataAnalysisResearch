<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:   CPA-SEL : Implementation Techniques for High- level Parallel Languages</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2008</AwardEffectiveDate>
<AwardExpirationDate>06/30/2012</AwardExpirationDate>
<AwardTotalIntnAmount>414484.00</AwardTotalIntnAmount>
<AwardAmount>522086</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anita La Salle</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The rapid trend toward multi-core architectures promises faster execution of computer programs but poses significant difficulties for software development due to the lack of good programming models for exploiting the parallelism in such architectures.  This situation is a significant opportunity for programming-language research to supply effective languages and tools for writing desktop applications while exploiting the performance of multi-core hardware.  It is well known that functional-programming languages provide a good semantic base for concurrent and parallel programming, but for such languages to be successful, they need to provide competitive performance.  The research focuses on the technical challenges in the efficient implementation of parallel functional languages.  The characteristics of multi-core and many-core architectures demand that implementations preserve sequential semantics in parallel constructs, manage the granularity and scheduling of parallel threads, and be aware of the locality of data.  The research explores a collection of techniques that combine static program analyses, compiler transformations, and dynamic runtime policies.  Empirical analysis of both traditional parallel benchmarks and small applications is used to evaluate the effectiveness of the techniques developed by this research.  By addressing performance concerns, the research will enable the practical use of parallel functional programming languages for a broad range of applications.</AbstractNarration>
<MinAmdLetterDate>06/12/2008</MinAmdLetterDate>
<MaxAmdLetterDate>07/27/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0811389</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Reppy</LastName>
<PI_MID_INIT>H</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John H Reppy</PI_FULL_NAME>
<EmailAddress>jhr@cs.uchicago.edu</EmailAddress>
<PI_PHON>7737025534</PI_PHON>
<NSF_ID>000115461</NSF_ID>
<StartDate>06/12/2008</StartDate>
<EndDate>07/27/2011</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>David</FirstName>
<LastName>MacQueen</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David MacQueen</PI_FULL_NAME>
<EmailAddress>macqueen@cs.uchicago.edu</EmailAddress>
<PI_PHON>7737024980</PI_PHON>
<NSF_ID>000441869</NSF_ID>
<StartDate>07/27/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606372612</ZipCode>
<PhoneNumber>7737028669</PhoneNumber>
<StreetAddress>6054 South Drexel Avenue</StreetAddress>
<StreetAddress2><![CDATA[Suite 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005421136</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CHICAGO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005421136</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Chicago]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606372612</ZipCode>
<StreetAddress><![CDATA[6054 South Drexel Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~269914</FUND_OBLG>
<FUND_OBLG>2009~94602</FUND_OBLG>
<FUND_OBLG>2010~157570</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The rapid trend toward multicore architectures creates significant difficulties for software development, because of the lack of good programming models for exploiting the parallelism in such architectures. &nbsp;One of the main goals of this project is to make parallel programming accessible to a larger community of programmers. &nbsp;It is well known that functional programming languages provide a good semantic base for concurrent and parallel programming, but for such languages to be successful, they need to provide competitive performance.<br /><br />This research focuses on the technical challenges in the efficient implementation of parallel functional languages. &nbsp;The main vehicle for this research is the Manticore system, which consists of a parallel dialect of Standard ML, called Parallel ML (PML), and a supporting compiler and parallel runtime system. &nbsp;Results include the design and implementation of the PML language and a variety of compiler and runtime system techniques that improve the scalability of PML's parallel performance. &nbsp;The prototype implementation that has been developed as part of this project demonstrates sequential performance that is competitive with other functional language implementations and parallel performance that scales to 48 cores (the largest available test machine).<br /><br />The PML language design consists of a side-effect free sequential core extended with syntactically lightweight annotations to introduce implicitly-threaded fine-grain parallelism and with explicit message-passing-based concurrency for coarse-grain parallelism. &nbsp;This design allows applications to exploit parallelism at many different levels. &nbsp;The implicitly threaded mechanisms include parallel tuples, which provide for fork-join parallelism, parallel bindings, which provide a future-like mechanism, and support for nested data parallelism (NDP) over irregular nested arrays. &nbsp;In addition to these constructs, which have deterministic semantics, PML also provides a nondeterministic parallel case construct to support speculative parallelism.<br /><br />The project has developed a broad range of new implementation techniques to support the efficient and scalable execution of PML programs. &nbsp;A main focus of the research has been effective work-stealing techniques, which balance the workload across processors while minimizing overhead. &nbsp;Another result has been new optimistic-concurrency protocols for PML's message-passing primitives. &nbsp;The runtime system includes a NUMA-aware parallel garbage collector that provides scalable performance. &nbsp;The research has also explored compiler techniques for the efficient execution of NDP computations on shared-memory multiprocessors (previous research on NDP compilation targeted vector hardware) and techniques for optimizing the granularity of recursive divide-and-conquer parallel programs.<br /><br />Parallelism is becoming increasingly important for most applications of computation, but existing parallel programming techniques are not ready for mainstream use. &nbsp;This project is exploring an alternative path that has the potential to provide much higher-level and easier to use parallel languages. Such languages can make parallel hardware useful to a broad range of application areas and users. &nbsp;Over the course of this project, five students completed Master's degrees and three of them received Doctoral degrees.&nbsp;The project has also provided the opportunity for nine undergraduates to be involved in research.</p><br> <p>            Last Modified: 08/03/2012<br>      Modified by: David&nbsp;Macqueen</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The rapid trend toward multicore architectures creates significant difficulties for software development, because of the lack of good programming models for exploiting the parallelism in such architectures.  One of the main goals of this project is to make parallel programming accessible to a larger community of programmers.  It is well known that functional programming languages provide a good semantic base for concurrent and parallel programming, but for such languages to be successful, they need to provide competitive performance.  This research focuses on the technical challenges in the efficient implementation of parallel functional languages.  The main vehicle for this research is the Manticore system, which consists of a parallel dialect of Standard ML, called Parallel ML (PML), and a supporting compiler and parallel runtime system.  Results include the design and implementation of the PML language and a variety of compiler and runtime system techniques that improve the scalability of PML's parallel performance.  The prototype implementation that has been developed as part of this project demonstrates sequential performance that is competitive with other functional language implementations and parallel performance that scales to 48 cores (the largest available test machine).  The PML language design consists of a side-effect free sequential core extended with syntactically lightweight annotations to introduce implicitly-threaded fine-grain parallelism and with explicit message-passing-based concurrency for coarse-grain parallelism.  This design allows applications to exploit parallelism at many different levels.  The implicitly threaded mechanisms include parallel tuples, which provide for fork-join parallelism, parallel bindings, which provide a future-like mechanism, and support for nested data parallelism (NDP) over irregular nested arrays.  In addition to these constructs, which have deterministic semantics, PML also provides a nondeterministic parallel case construct to support speculative parallelism.  The project has developed a broad range of new implementation techniques to support the efficient and scalable execution of PML programs.  A main focus of the research has been effective work-stealing techniques, which balance the workload across processors while minimizing overhead.  Another result has been new optimistic-concurrency protocols for PML's message-passing primitives.  The runtime system includes a NUMA-aware parallel garbage collector that provides scalable performance.  The research has also explored compiler techniques for the efficient execution of NDP computations on shared-memory multiprocessors (previous research on NDP compilation targeted vector hardware) and techniques for optimizing the granularity of recursive divide-and-conquer parallel programs.  Parallelism is becoming increasingly important for most applications of computation, but existing parallel programming techniques are not ready for mainstream use.  This project is exploring an alternative path that has the potential to provide much higher-level and easier to use parallel languages. Such languages can make parallel hardware useful to a broad range of application areas and users.  Over the course of this project, five students completed Master's degrees and three of them received Doctoral degrees. The project has also provided the opportunity for nine undergraduates to be involved in research.       Last Modified: 08/03/2012       Submitted by: David Macqueen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
