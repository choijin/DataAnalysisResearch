<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Toward Software Tools for Memory-Efficient Matrix Algebra</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2008</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>100000.00</AwardTotalIntnAmount>
<AwardAmount>130000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Dmitri Maslov</SignBlockName>
<PO_EMAI>dmaslov@nsf.gov</PO_EMAI>
<PO_PHON>7032928910</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A scientific program is a mathematical one so there are two factors&lt;br/&gt;contributing to its performance.  One is the time required to perform&lt;br/&gt;arithmetic.  The other is the time needed to move data through the&lt;br/&gt;memory hierarchy of the computer.  In today's large applications, the&lt;br/&gt;latter cost often dominates.   The work funded by this grant focuses on&lt;br/&gt;efficient computational methods for solving the problems in matrix algebra&lt;br/&gt;that arise in a wide variety of science and engineering applications.&lt;br/&gt;Codes for such problems are typically constructed as sequences of calls to&lt;br/&gt;the routines known as the Basic Linear Algebra Subprograms (BLAS). Writing&lt;br/&gt;programs in this way promotes readability and maintainability but can&lt;br/&gt;be costly in terms of memory efficiency especially for matrices of&lt;br/&gt;large order.&lt;br/&gt;&lt;br/&gt;The grant will be used primarily to support a Ph.D. student who will&lt;br/&gt;study ways to combine multiple BLAS routines into a single routine that&lt;br/&gt;performs the functions of more than one BLAS.  He will examine ways to&lt;br/&gt;create composed BLAS via novel algorithms and performance programming&lt;br/&gt;techniques, developing a general methodology for their creation in the&lt;br/&gt;process.  His work will ultimately form the basis for a tool that creates&lt;br/&gt;composed BLAS automatically.  Composed routines can significantly reduce&lt;br/&gt;the amount of data read from main memory.  Preliminary results include&lt;br/&gt;speedups as large as 90\%.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/05/2008</MinAmdLetterDate>
<MaxAmdLetterDate>09/14/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0830458</AwardID>
<Investigator>
<FirstName>Elizabeth</FirstName>
<LastName>Jessup</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Elizabeth R Jessup</PI_FULL_NAME>
<EmailAddress>jessup@cs.colorado.edu</EmailAddress>
<PI_PHON>3034920211</PI_PHON>
<NSF_ID>000293670</NSF_ID>
<StartDate>08/05/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Boulder</Name>
<CityName>Boulder</CityName>
<ZipCode>803031058</ZipCode>
<PhoneNumber>3034926221</PhoneNumber>
<StreetAddress>3100 Marine Street, Room 481</StreetAddress>
<StreetAddress2><![CDATA[572 UCB]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>007431505</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF COLORADO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007431505</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Colorado at Boulder]]></Name>
<CityName>Boulder</CityName>
<StateCode>CO</StateCode>
<ZipCode>803031058</ZipCode>
<StreetAddress><![CDATA[3100 Marine Street, Room 481]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2865</Code>
<Text>NUMERIC, SYMBOLIC &amp; GEO COMPUT</Text>
</ProgramElement>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramElement>
<Code>7934</Code>
<Text>PARAL/DISTRIBUTED ALGORITHMS</Text>
</ProgramElement>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7934</Code>
<Text>PARAL/DISTRIBUTED ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~100000</FUND_OBLG>
<FUND_OBLG>2009~6000</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<FUND_OBLG>2012~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A scientist needing high quality computational tools is tasked with mastering advanced concepts in computer science and with carrying out complex programming tasks in addition to managing the scientific content of the work. &nbsp;The problem is compounded by the constant evolution of computer hardware. &nbsp;Scientists are often forced to choose between investing substantial time in tuning computer codes or accepting performance that can be significantly lower than the best attainable. In both cases, the productivity ofthe scientist degrades. To aid in the process of software tuning, our research concerned tools for automating the development of high-performance software for scientific applications.</p> <p>A scientific program is a mathematical one, and there are two contributing factors to its performance. &nbsp;One is the time required for performing arithmetic. The other is the time needed for moving data through the memory hierarchy of the computer. &nbsp;In today's large applications, the latter cost often dominates. &nbsp;Our work focused on reducing memory access costs in the solution of the matrix algebra problems that constitute the most expensive part of many scientific computations.</p> <p>Historically, codes for matrix algebra have been constructed as sequences of calls to subprograms that perform fundamental operations. Writing programs in this way promotes readability and maintainability but can be costly in terms of memory efficiency as the same data are accessed by the routines one after another. One remedy is to employ a powerful optimization known as loop fusion that combines the subprograms into a single routine that employs the data only once. &nbsp;Our work began with a study of the performance effects of loop fusion which ultimately led us to develop a formal, analytical model of the computer's memory hierarchy for fused matrix algebra problems. &nbsp;We integrated the model into the Build to Order (BTO) compiler which converts high level descriptions of matrix algebra into optimized implementations. &nbsp;Including the model accurately and efficiently reduced compilation times for BTO.</p> <p><br />Intellectual Merit: We have improved the understanding the factors that influence memory traffic in matrix algebra computations, and we have built a tool that aids in the development of high-performance matrix algebra implementations.</p> <p><br />Broader Impacts: The model developed during this grant's funding is now released to the public as part of the open source compiler BTO which helps to remove the onus of high-performance programming for scientists. The grant funded a number of educational opportunities. &nbsp;It primarily supported one PhD student, but it also provided a number of undergraduates with their first research experiences.</p><br> <p>            Last Modified: 12/01/2013<br>      Modified by: Elizabeth&nbsp;R&nbsp;Jessup</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A scientist needing high quality computational tools is tasked with mastering advanced concepts in computer science and with carrying out complex programming tasks in addition to managing the scientific content of the work.  The problem is compounded by the constant evolution of computer hardware.  Scientists are often forced to choose between investing substantial time in tuning computer codes or accepting performance that can be significantly lower than the best attainable. In both cases, the productivity ofthe scientist degrades. To aid in the process of software tuning, our research concerned tools for automating the development of high-performance software for scientific applications.  A scientific program is a mathematical one, and there are two contributing factors to its performance.  One is the time required for performing arithmetic. The other is the time needed for moving data through the memory hierarchy of the computer.  In today's large applications, the latter cost often dominates.  Our work focused on reducing memory access costs in the solution of the matrix algebra problems that constitute the most expensive part of many scientific computations.  Historically, codes for matrix algebra have been constructed as sequences of calls to subprograms that perform fundamental operations. Writing programs in this way promotes readability and maintainability but can be costly in terms of memory efficiency as the same data are accessed by the routines one after another. One remedy is to employ a powerful optimization known as loop fusion that combines the subprograms into a single routine that employs the data only once.  Our work began with a study of the performance effects of loop fusion which ultimately led us to develop a formal, analytical model of the computer's memory hierarchy for fused matrix algebra problems.  We integrated the model into the Build to Order (BTO) compiler which converts high level descriptions of matrix algebra into optimized implementations.  Including the model accurately and efficiently reduced compilation times for BTO.   Intellectual Merit: We have improved the understanding the factors that influence memory traffic in matrix algebra computations, and we have built a tool that aids in the development of high-performance matrix algebra implementations.   Broader Impacts: The model developed during this grant's funding is now released to the public as part of the open source compiler BTO which helps to remove the onus of high-performance programming for scientists. The grant funded a number of educational opportunities.  It primarily supported one PhD student, but it also provided a number of undergraduates with their first research experiences.       Last Modified: 12/01/2013       Submitted by: Elizabeth R Jessup]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
