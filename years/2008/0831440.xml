<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CT-M:   Realizing Verifiable Security Properties on Untrusted Computing Platforms</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2008</AwardEffectiveDate>
<AwardExpirationDate>09/30/2013</AwardExpirationDate>
<AwardTotalIntnAmount>790000.00</AwardTotalIntnAmount>
<AwardAmount>1014400</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
<PO_EMAI>jepstein@nsf.gov</PO_EMAI>
<PO_PHON>7032928338</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project is motivated by the fundamental question of whether it is possible to achieve verifiable end-to-end security properties by adding suitable security mechanisms on top of commercially available applications executing on an untrusted computing platform. A concrete example of such a scenario is provided by a user interacting with a bank's web server using a web browser running SSL. An important end-to-end security property in this context is protecting the confidentiality and integrity of the exchanged information and the user's password from malware and insider attacks on the local machine or the bank's server, as well as an active adversary trying to compromise the network communication. The untrusted computing platform here is the user's machine, which is running a commodity OS such as Windows or Linux and applications such as Internet Explorer or Firefox.&lt;br/&gt; &lt;br/&gt;We believe that this goal can be achieved if one takes the approach of (1) minimizing the liability of security-property proof based on differentiated application services, and well-defined, useful properties of security-sensitive code, and (2) supporting the identified and proved properties by a security architecture that is compatible with commercially available platforms. Our system architecture includes novel components (e.g. trusted paths to local and remote security sensitive code) and integrates existing &lt;br/&gt;technologies (e.g., hypervisors, isolated execution environments) in a way that minimizes the size of both system and security-sensitive application code, thus enabling formal verification.&lt;br/&gt;&lt;br/&gt;The project will provide extensive educational opportunities for undergraduate and graduate students; research results will be integrated into courses at CMU and disseminated via technical publications, student internships, the CyLab Industrial Partners program, and the CMU Women@SCS roadshow program.</AbstractNarration>
<MinAmdLetterDate>08/18/2008</MinAmdLetterDate>
<MaxAmdLetterDate>05/06/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0831440</AwardID>
<Investigator>
<FirstName>Adrian</FirstName>
<LastName>Perrig</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Adrian Perrig</PI_FULL_NAME>
<EmailAddress>perrig@cmu.edu</EmailAddress>
<PI_PHON>4122682242</PI_PHON>
<NSF_ID>000225148</NSF_ID>
<StartDate>08/18/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Anupam</FirstName>
<LastName>Datta</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Anupam Datta</PI_FULL_NAME>
<EmailAddress>danupam@andrew.cmu.edu</EmailAddress>
<PI_PHON>4122688746</PI_PHON>
<NSF_ID>000501887</NSF_ID>
<StartDate>08/18/2008</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Virgil</FirstName>
<LastName>Gligor</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Virgil Gligor</PI_FULL_NAME>
<EmailAddress>gligor@cmu.edu</EmailAddress>
<PI_PHON>4122688746</PI_PHON>
<NSF_ID>000502169</NSF_ID>
<StartDate>08/18/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~330000</FUND_OBLG>
<FUND_OBLG>2009~434400</FUND_OBLG>
<FUND_OBLG>2011~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>To be useful in practice, security primitives must be available on commodity computers with demonstrable assurance and be understandable by ordinary users with minimum effort. The working hypothesis of this project was that traditional trusted systems comprising a reference monitor and layered operating system services that are formally verified, while useful for a few niche application areas, will continue to fail these criteria for commodity computers. In particular, commodity operating systems will continue to be untrustworthy; i.e., they will lack demonstrable properties and support only low&shy;-assurance services. Hence, this project was motivated by the fundamental question of whether it is possible to achieve verifiable security properties by adding suitable security mechanisms to unmodified commodity systems and untrusted applications.</p> <p><span>This project represents a fundamental shift in the design of systems with demonstrable security properties. For nearly four decades, most researchers assumed that all security properties must be implemented layer&shy;-by-&shy;layer from the ground up, starting with a reference monitor. The reference monitor identifies all system subjects and objects, is isolated from external attacks, is always invoked for every subject reference to any object, and hence enforces a system's security policy. The reference monitor is supposed to be small and simple enough to enable correctness verification via formal proofs and hence provides high&shy; assurance of correct implementation of security properties. Furthermore, most researchers assumed that full operating system layering is also essential for verifiable security properties of applications.&nbsp;</span></p> <p><span>In contrast with these long&shy;-standing assumptions, this project showed that it is possible to add non&shy;-virtualizing, micro&shy;-hypervisors to unmodified, untrustworthy commodity (i.e., low&shy;-assurance) operating systems. These micro-hypervisors enable the creation of isolated execution environments for application modules with verifiable security properties. In contrast with traditional hypervisors, our micro-&shy;hypervisors (e.g., TrustVisor, XMHF) do not virtualize hardware; e.g., they do not include scheduling or multiplexing operations. Hence, they are much simpler than all virtualizing hypervisors/VMMs, other recent micro-&shy;hypervisor designs, and past security kernels. As a consequence, we are able to verify micro&shy;-hypervisor security properties, and compose them with the higher &shy;level properties of isolated application modules. In addition, we are able to show that our micro-&shy;hypervisors can support higher &shy;level security primitives in a verifiable manner; i.e., trusted path to/from isolated application modules, and application &shy;level micro&shy;-kernels that implement verifiable services for isolated application modules. As a result, trustworthy software components can be supported for security-&shy;sensitive applications running on top of unmodified commodity operating systems. Hence, restructuring commodity operating systems to implement native security kernels and fully layered services becomes unnecesary for most security&shy;-sensitive applications. &nbsp;<span>In addition, we investigated various mechanisms for the trusted boot of micro-hypervisor </span></span>software, and the establishment of both hardware-&shy;based and software-based root of trust. Finally, we explored the use of micro&shy;-hypervisors to support security properties of network protocols.&nbsp;</p> <p>The impact of this project reached beyond numerous publications in leading security conferences. For example, our reseach helped produce a micro&shy;-hypervisor development framework, called the XMHF, which is now available as open-&shy;source code. Our micro-&shy;hypervisor designs have been used by industry research efforts, including at N...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ To be useful in practice, security primitives must be available on commodity computers with demonstrable assurance and be understandable by ordinary users with minimum effort. The working hypothesis of this project was that traditional trusted systems comprising a reference monitor and layered operating system services that are formally verified, while useful for a few niche application areas, will continue to fail these criteria for commodity computers. In particular, commodity operating systems will continue to be untrustworthy; i.e., they will lack demonstrable properties and support only low&shy;-assurance services. Hence, this project was motivated by the fundamental question of whether it is possible to achieve verifiable security properties by adding suitable security mechanisms to unmodified commodity systems and untrusted applications.  This project represents a fundamental shift in the design of systems with demonstrable security properties. For nearly four decades, most researchers assumed that all security properties must be implemented layer&shy;-by-&shy;layer from the ground up, starting with a reference monitor. The reference monitor identifies all system subjects and objects, is isolated from external attacks, is always invoked for every subject reference to any object, and hence enforces a system's security policy. The reference monitor is supposed to be small and simple enough to enable correctness verification via formal proofs and hence provides high&shy; assurance of correct implementation of security properties. Furthermore, most researchers assumed that full operating system layering is also essential for verifiable security properties of applications.   In contrast with these long&shy;-standing assumptions, this project showed that it is possible to add non&shy;-virtualizing, micro&shy;-hypervisors to unmodified, untrustworthy commodity (i.e., low&shy;-assurance) operating systems. These micro-hypervisors enable the creation of isolated execution environments for application modules with verifiable security properties. In contrast with traditional hypervisors, our micro-&shy;hypervisors (e.g., TrustVisor, XMHF) do not virtualize hardware; e.g., they do not include scheduling or multiplexing operations. Hence, they are much simpler than all virtualizing hypervisors/VMMs, other recent micro-&shy;hypervisor designs, and past security kernels. As a consequence, we are able to verify micro&shy;-hypervisor security properties, and compose them with the higher &shy;level properties of isolated application modules. In addition, we are able to show that our micro-&shy;hypervisors can support higher &shy;level security primitives in a verifiable manner; i.e., trusted path to/from isolated application modules, and application &shy;level micro&shy;-kernels that implement verifiable services for isolated application modules. As a result, trustworthy software components can be supported for security-&shy;sensitive applications running on top of unmodified commodity operating systems. Hence, restructuring commodity operating systems to implement native security kernels and fully layered services becomes unnecesary for most security&shy;-sensitive applications.  In addition, we investigated various mechanisms for the trusted boot of micro-hypervisor software, and the establishment of both hardware-&shy;based and software-based root of trust. Finally, we explored the use of micro&shy;-hypervisors to support security properties of network protocols.   The impact of this project reached beyond numerous publications in leading security conferences. For example, our reseach helped produce a micro&shy;-hypervisor development framework, called the XMHF, which is now available as open-&shy;source code. Our micro-&shy;hypervisor designs have been used by industry research efforts, including at Northrop &shy;Grumman, Lockheed Martin, and Intel. Our software root of trust technology is also being used in other research projects;...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
