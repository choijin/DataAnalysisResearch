<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA-SEL: Practical Typestate Verification with Assume-Guarantee Reasoning</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
<AwardExpirationDate>08/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>316000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>CCF-0811592&lt;br/&gt;&lt;br/&gt;CPA-SEL: Practical Typestate Verification with Assume-Guarantee Reasoning&lt;br/&gt;&lt;br/&gt;Jonathan Aldrich&lt;br/&gt;&lt;br/&gt;One of the main difficulties in modern software development is using software libraries and frameworks correctly.  This project is developing new tools to verify temporal usage properties of libraries and frameworks, capturing the permitted ordering of calls to an object and the state of that object when the calls are made.&lt;br/&gt;&lt;br/&gt;Key verification challenges addressed by this project include inheritance and subtyping, recursive callbacks from a library into the client and back, and multiple aliased pointers to a library object.  The project is applying assume-guarantee reasoning to these challenges: allowing multiple clients to access an object cooperatively, with an agreement about how that object should be used so that each client can safely make assumptions about other clients? behavior, and in turn each client guarantees that it will not violate other clients? assumptions.&lt;br/&gt;&lt;br/&gt;The project is developing the underlying theory behind the approach, but is also building practical tools and evaluating them on real-world applications and libraries through scientific case studies.  If successful, the project will increase the productivity of software engineers when using libraries, reduce the number of defects in software, and help students to learn about the theory and practice of lightweight software verification tools.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/06/2008</MinAmdLetterDate>
<MaxAmdLetterDate>03/23/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0811592</AwardID>
<Investigator>
<FirstName>Jonathan</FirstName>
<LastName>Aldrich</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jonathan Aldrich</PI_FULL_NAME>
<EmailAddress>jonathan.aldrich@cs.cmu.edu</EmailAddress>
<PI_PHON>4122687278</PI_PHON>
<NSF_ID>000426894</NSF_ID>
<StartDate>06/06/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~300000</FUND_OBLG>
<FUND_OBLG>2011~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Many software programs do not work correctly. &nbsp;This problem occurs because software is being asked to do more for us, and so the code providing that functionality becomes far more complex. &nbsp;To manage that complexity, developers divide the code they are writing into parts, but problems still crop up where parts written by different programming teams must interoperate. &nbsp;This project uses typestates and permissions to characterize how a part of a larger system ought to be used, and provides tools to help developers that need to access that part ensure they are accessing it correctly.</p> <p>Our work showed that typestate constraints are implicit but common in industrial source code, causing a majority of the difficult problems reported in the help forum of one system. &nbsp;We studied a corpus of 2 million lines of Java source code, and found it is more common for a class to require a usage protocol than to declare a generic type parameter.</p> <p>Previous proposals for &nbsp;typestates and permissions were quite restrictive. &nbsp;We empirically showed that they were unable to express common design idioms in object-oriented systems. &nbsp;This led us to propose more descriptive forms of typestates, building on specification ideas from Statecharts, and more flexible forms of permissions. &nbsp;We designed a type-based system for checking code against our new typestate and permission specifications, formalized its behavior, and showed that it was mathematically sound. &nbsp;We then built a tool based on the technology (see image) and showed that we could verify real open source library code effectively in practice and find design errors in the process.</p> <p>These research results suggest that the technology can now be applied to real software in order to eliminate bugs from software, enabling that software to provide services to its users in a reliable and correct fashion.</p><br> <p>            Last Modified: 02/06/2012<br>      Modified by: Jonathan&nbsp;Aldrich</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2012/0811592/0811592_10080473_1328512479991_plural-screen--rgov-214x142.jpg" original="/por/images/Reports/POR/2012/0811592/0811592_10080473_1328512479991_plural-screen--rgov-800width.jpg" title="Screenshot of Plural Tooling within Eclipse"><img src="/por/images/Reports/POR/2012/0811592/0811592_10080473_1328512479991_plural-screen--rgov-66x44.jpg" alt="Screenshot of Plural Tooling within Eclipse"></a> <div class="imageCaptionContainer"> <div class="imageCaption">In Plural, developers can specify API protocols when they design a library.  The tool can automatically check that client code obeys the protocols.  Any errors appear in the Eclipse problems view at the bottom.</div> <div class="imageCredit">Jonathan Aldrich/Kevin Bierhoff</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Jonathan&nbsp;Aldrich</div> <div class="imageTitle">Screenshot of Plural Tooling within Eclipse</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Many software programs do not work correctly.  This problem occurs because software is being asked to do more for us, and so the code providing that functionality becomes far more complex.  To manage that complexity, developers divide the code they are writing into parts, but problems still crop up where parts written by different programming teams must interoperate.  This project uses typestates and permissions to characterize how a part of a larger system ought to be used, and provides tools to help developers that need to access that part ensure they are accessing it correctly.  Our work showed that typestate constraints are implicit but common in industrial source code, causing a majority of the difficult problems reported in the help forum of one system.  We studied a corpus of 2 million lines of Java source code, and found it is more common for a class to require a usage protocol than to declare a generic type parameter.  Previous proposals for  typestates and permissions were quite restrictive.  We empirically showed that they were unable to express common design idioms in object-oriented systems.  This led us to propose more descriptive forms of typestates, building on specification ideas from Statecharts, and more flexible forms of permissions.  We designed a type-based system for checking code against our new typestate and permission specifications, formalized its behavior, and showed that it was mathematically sound.  We then built a tool based on the technology (see image) and showed that we could verify real open source library code effectively in practice and find design errors in the process.  These research results suggest that the technology can now be applied to real software in order to eliminate bugs from software, enabling that software to provide services to its users in a reliable and correct fashion.       Last Modified: 02/06/2012       Submitted by: Jonathan Aldrich]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
