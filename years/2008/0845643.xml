<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Architecting A Database Management System for Semantic Web Data</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/15/2009</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Frank Olken</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>&lt;br/&gt;The goal of the Semantic Web is to free Web data from the applications that control them, so that data can be easily described and exchanged. &lt;br/&gt;This is accomplished by supplementing natural language and other data found on the Web with machine readable metadata in statement form (e.g., X is-a person, X has-name Joe, X has-age 35) and enabling descriptions of data ontologies so that data from different applications can be integrated through ontology mapping. One element of this vision is to turn the Web into a giant database, against which one can issue structured queries and receive structured answers in response.&lt;br/&gt;&lt;br/&gt;The SW-Store project is undertaking the clean-slate design of a DBMS specifically architected for this type of Web metadata and the prevalent Semantic Web data model, the Resource Description Framework, or RDF. The management of Semantic Web data presents many difficult challenges. The size of the data is growing rapidly, and in theory could reach the scale of the Web. The types of queries vary greatly in complexity, ranging from keyword search to complicated parameterized subgraph matching. Data integration, inference, and reasoning must be primitive operations that can operate at scale without human intervention. A data management system must not only be a place where data is stored and from which data is accessed; it must use the machine-readable semantics of the data to develop higher level models and help guide a user through the mass of information. In sum, a data management system for the Semantic Web will look very different from a standard, transactional, relational database system.&lt;br/&gt;&lt;br/&gt;The SW-store project researches the architecture of such a system. This research is inherently interdisciplinary, bringing in ideas from the data management, Semantic Web, and artificial intelligence communities. The project involves experimenting with partitioning schemes, where data is allocated to different nodes on a shared-nothing cluster so that queries can be run in parallel across multiple machines. It also involves exploring how ontology reasoning can be integrated inside the database system so that it can benefit from the near limitless scalability a shared-nothing cluster can offer. SW-Store further investigates providing iterative query interfaces and integrating complex queries with text search. Finally, the project involves studying the design of the storage layer for a Semantic Web data management system, looking at how data should be laid out, updates should be performed, and what materialized views to create.&lt;br/&gt;&lt;br/&gt;Further information about the project can be found at the project Webpage: &lt;br/&gt;http://db.cs.yale.edu/swstore/&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/18/2009</MinAmdLetterDate>
<MaxAmdLetterDate>01/30/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0845643</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Abadi</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel J Abadi</PI_FULL_NAME>
<EmailAddress>abadi@umd.edu</EmailAddress>
<PI_PHON>3014052662</PI_PHON>
<NSF_ID>000508003</NSF_ID>
<StartDate>02/18/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Yale University</Name>
<CityName>New Haven</CityName>
<ZipCode>065208327</ZipCode>
<PhoneNumber>2037854689</PhoneNumber>
<StreetAddress>Office of Sponsored Projects</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 208327]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CT03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>043207562</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>YALE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>043207562</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Yale University]]></Name>
<CityName>New Haven</CityName>
<StateCode>CT</StateCode>
<ZipCode>065208327</ZipCode>
<StreetAddress><![CDATA[Office of Sponsored Projects]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CT03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~75587</FUND_OBLG>
<FUND_OBLG>2010~68026</FUND_OBLG>
<FUND_OBLG>2011~102891</FUND_OBLG>
<FUND_OBLG>2012~111774</FUND_OBLG>
<FUND_OBLG>2013~41722</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>High level summary of the project outcomes: This award lead to development of a database system designed specifically for graph data. The original use-case for our graph-store was Semantic-Web data, which is naturally represented using the Resource Description Framework as a graph connecting resources and data on the Web. However, we found that our system is also generally applicable to any type of graph, and successfully applied it to other graph applications including social websites such as Twitter and LinkedIn.</p> <p>The primary outcomes of the project in terms of <strong>intellectual merit</strong> include the following:</p> <p>(1) We found that a shared-nothing architecture that leverages state-of-the-art RDF-stores and the popular Apache Hadoop framework is capable of scaling RDF data management to march larger deployments than have possible in the past, and can dramatically improve performance. In particular, it is very helpful to use a graph-oriented data partitioning scheme to exploit the spatial locality inherent in graph pattern matching, and combine this with a careful replication of RDF triples whose location is near a partitioning border. By pushing most or even all of query processing into fast single-node RDF stores which operate in parallel, a Semantic Web database built in this way is able to perform up to <strong>three orders of magnitude faster</strong> than other attempts at horizontally scalable RDF data management.</p> <p>(2) We developed several algorithms for performing distributed query optimization of SPARQL and subgraph matching queries. We found that greedy algorithms for SPARQL/subgraph pattern matching operations are often sufficient when the graph data set can be held in memory on a single machine. However, as graph data sets increasingly expand and require external storage and partitioning across a cluster of machines, more sophisticated query optimization techniques become critical to avoid explosions in query latency. Of the algorithms we developed for distributed query optimization of SPARQL/subgraph matching, each algorithm performed well on specific (and different) input graphs and query requests. However, our experimental results showed that these algorithms can be combined in the same system, and the best algorithm selected for a given query (and input data) graph. When combined, these algorithms can lead to an order of magnitude improvement in query performance of SPARQL and other graph matching queries.</p> <p>(3) We invented an invisible loading technique that enables data to be loaded into our system without the user experiencing any overhead. &nbsp;This technique alleviates the high "time-to-first-analysis" problem this is suffered by most analytical database systems. &nbsp;The "time-to-first-analysis" problem describes the phenomenon that before data can be processed, it must be modeled and schematized (a human effort), transferred into the database's storage layer, and optionally clustered and indexed (a computational effort). This upfront effort is so significant that in many cases, the user never bothers to load the data into the system, and instead keeps the data on a file system and analyzes it using user-created scripts and mini-programs. The invisible loading technique that was developed as part of this project achieves the immediate gratification of running processing jobs directly over a file system, while still making progress towards the long-term performance benefits of loading data into an analytical system such as the one that was built as part of this project. The basic idea is to piggyback on top of user-defined scripts or Hadoop jobs, and leverage their parsing and tuple extraction operations to incrementally load and organize tuples into our system, while simultaneously processing the file system data. We found that this allows partitions of the data to be loaded into our system at almost no marginal...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ High level summary of the project outcomes: This award lead to development of a database system designed specifically for graph data. The original use-case for our graph-store was Semantic-Web data, which is naturally represented using the Resource Description Framework as a graph connecting resources and data on the Web. However, we found that our system is also generally applicable to any type of graph, and successfully applied it to other graph applications including social websites such as Twitter and LinkedIn.  The primary outcomes of the project in terms of intellectual merit include the following:  (1) We found that a shared-nothing architecture that leverages state-of-the-art RDF-stores and the popular Apache Hadoop framework is capable of scaling RDF data management to march larger deployments than have possible in the past, and can dramatically improve performance. In particular, it is very helpful to use a graph-oriented data partitioning scheme to exploit the spatial locality inherent in graph pattern matching, and combine this with a careful replication of RDF triples whose location is near a partitioning border. By pushing most or even all of query processing into fast single-node RDF stores which operate in parallel, a Semantic Web database built in this way is able to perform up to three orders of magnitude faster than other attempts at horizontally scalable RDF data management.  (2) We developed several algorithms for performing distributed query optimization of SPARQL and subgraph matching queries. We found that greedy algorithms for SPARQL/subgraph pattern matching operations are often sufficient when the graph data set can be held in memory on a single machine. However, as graph data sets increasingly expand and require external storage and partitioning across a cluster of machines, more sophisticated query optimization techniques become critical to avoid explosions in query latency. Of the algorithms we developed for distributed query optimization of SPARQL/subgraph matching, each algorithm performed well on specific (and different) input graphs and query requests. However, our experimental results showed that these algorithms can be combined in the same system, and the best algorithm selected for a given query (and input data) graph. When combined, these algorithms can lead to an order of magnitude improvement in query performance of SPARQL and other graph matching queries.  (3) We invented an invisible loading technique that enables data to be loaded into our system without the user experiencing any overhead.  This technique alleviates the high "time-to-first-analysis" problem this is suffered by most analytical database systems.  The "time-to-first-analysis" problem describes the phenomenon that before data can be processed, it must be modeled and schematized (a human effort), transferred into the database's storage layer, and optionally clustered and indexed (a computational effort). This upfront effort is so significant that in many cases, the user never bothers to load the data into the system, and instead keeps the data on a file system and analyzes it using user-created scripts and mini-programs. The invisible loading technique that was developed as part of this project achieves the immediate gratification of running processing jobs directly over a file system, while still making progress towards the long-term performance benefits of loading data into an analytical system such as the one that was built as part of this project. The basic idea is to piggyback on top of user-defined scripts or Hadoop jobs, and leverage their parsing and tuple extraction operations to incrementally load and organize tuples into our system, while simultaneously processing the file system data. We found that this allows partitions of the data to be loaded into our system at almost no marginal cost in query latency. Furthermore, future queries are able to run much faster since part of the query can be redirected away fro...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
