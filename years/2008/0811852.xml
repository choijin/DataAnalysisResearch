<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA-CPL:   The Reduction Simplification Engine</AwardTitle>
<AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
<AwardExpirationDate>08/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>72000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Improving programmer productivity is a crucial challenge,  &lt;br/&gt;especially with the emergence of multi- and many-core processors.   &lt;br/&gt;High level mathematical equations serve as declarative specifications  &lt;br/&gt;for a large class of compute- and data- intensive parts of programs.   &lt;br/&gt;The expressivity of such equations is greatly enhanced when users are allowed to specify collective operations called "reductions:"  &lt;br/&gt;associative and commutative operators applied to sets of values.   &lt;br/&gt;Another common feature of such equational programs is "reuse:" at different points in a set, the same intermediate value is (re)- computed or used.  Certain extremely effective program optimizations are possible when equational programs have both reductions and reuse.   &lt;br/&gt;These optimizations yield new equations with lower computational complexity (e.g., a quadratic time equation can be transformed into one with linear complexity).  This project investigates how to perform  these simplifications automatically and optimally.    The PIs will develop   and deploy a tool called Reduction Simplification Engine (RSE) that implements such optimizations techniques.  Traditional compiler optimizations simply seek a few percentage points of performance gains, at best a small, constant factor.  On the other hand, the optimizations performed by the RSE have significantly more benefits since they reduce the asymptotic complexity of the program.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/01/2008</MinAmdLetterDate>
<MaxAmdLetterDate>06/02/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0811852</AwardID>
<Investigator>
<FirstName>Sanjay</FirstName>
<LastName>Rajopadhye</LastName>
<EmailAddress>Sanjay.Rajopadhye@colostate.edu</EmailAddress>
<StartDate>08/01/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Colorado State University</Name>
<CityName>Fort Collins</CityName>
<ZipCode>805232002</ZipCode>
<PhoneNumber>9704916355</PhoneNumber>
<StreetAddress>601 S Howes St</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
