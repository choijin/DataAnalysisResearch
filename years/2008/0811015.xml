<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA-SEL: Developing a Theory of Hygienic Macros</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2008</AwardEffectiveDate>
<AwardExpirationDate>07/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>298687.00</AwardTotalIntnAmount>
<AwardAmount>298687</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern software systems involve millions of lines of code.  In many&lt;br/&gt;systems, many of these lines are repetitions, with some variations, of&lt;br/&gt;a few patterns.  This repetition is necessary because current&lt;br/&gt;programming languages require the programmer to spell out many details&lt;br/&gt;over and over again.  Such repetition is error-prone and increases the&lt;br/&gt;cost and time-to-market of software systems.  This research studies&lt;br/&gt;syntactic abstraction, a technique to eliminate much of the repetition&lt;br/&gt;in such systems.&lt;br/&gt;&lt;br/&gt;This research aims to develop the theory of syntactic abstractions&lt;br/&gt;(also called "macros") to put it on a par with procedural or data&lt;br/&gt;abstraction.  Its goal is to develop theories and tools that will make&lt;br/&gt;syntactic abstraction easy.  Its results are intended to make it&lt;br/&gt;easier to write complex syntactic abstractions and that will allow a&lt;br/&gt;language designer to make rational choices when designing a syntactic&lt;br/&gt;abstraction facility.  The main technical innovation is the inclusion&lt;br/&gt;of binding patterns as part of the public interface of a macro.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/04/2008</MinAmdLetterDate>
<MaxAmdLetterDate>05/14/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0811015</AwardID>
<Investigator>
<FirstName>Mitchell</FirstName>
<LastName>Wand</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mitchell Wand</PI_FULL_NAME>
<EmailAddress>wand@ccs.neu.edu</EmailAddress>
<PI_PHON>6173732072</PI_PHON>
<NSF_ID>000148000</NSF_ID>
<StartDate>08/04/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northeastern University</Name>
<CityName>BOSTON</CityName>
<ZipCode>021155005</ZipCode>
<PhoneNumber>6173733004</PhoneNumber>
<StreetAddress>360 HUNTINGTON AVE</StreetAddress>
<StreetAddress2><![CDATA[177-500]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001423631</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHEASTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001423631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northeastern University]]></Name>
<CityName>BOSTON</CityName>
<StateCode>MA</StateCode>
<ZipCode>021155005</ZipCode>
<StreetAddress><![CDATA[360 HUNTINGTON AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~196906</FUND_OBLG>
<FUND_OBLG>2010~101781</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Modern software systems involve millions of lines of code. &nbsp;In many systems, many of these lines are repetitions, with some variations, of a few patterns. This repetition is necessary because current programming languages require the programmer to spell out many detailsover and over again. &nbsp;Such repetition is error-prone and increases the cost and time-to-market of software systems.</p> <p>This research studied syntactic abstraction, a technique to eliminate much of the repetition in such systems.&nbsp;In particular, we studied new techniques for avoiding name conflicts-- situations in which two programmers may accidently use the same name for different things. &nbsp;Such a conflict could cause disastrous program failure.</p> <p>We developed methods that allow programmers to use these more powerful abstraction techniques without fear of accidently introducing name conflicts.</p> <p>We also developed methods for defining programming languages that are tailored for particular problem areas. &nbsp;Such a &nbsp;language, called a "domain-specific language", allow a programmer writing an application in that area to concentrate on the specifics of his or her application, because all of the "boiler-plate" that is common to the area is already built in to the language. As a result, these languages can greatly increase programmer productivity.</p> <p>For example, there are commonly-used domain-specific languages for statistics, for circuit design, for algebra, and many other domains.</p> <p>Our research developed techniques for making it easier to define such languages and allow them to use syntax that is natural for the domain, rather than being confined to the syntax of a conventional computer language.</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/21/2012<br>      Modified by: Mitchell&nbsp;Wand</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Modern software systems involve millions of lines of code.  In many systems, many of these lines are repetitions, with some variations, of a few patterns. This repetition is necessary because current programming languages require the programmer to spell out many detailsover and over again.  Such repetition is error-prone and increases the cost and time-to-market of software systems.  This research studied syntactic abstraction, a technique to eliminate much of the repetition in such systems. In particular, we studied new techniques for avoiding name conflicts-- situations in which two programmers may accidently use the same name for different things.  Such a conflict could cause disastrous program failure.  We developed methods that allow programmers to use these more powerful abstraction techniques without fear of accidently introducing name conflicts.  We also developed methods for defining programming languages that are tailored for particular problem areas.  Such a  language, called a "domain-specific language", allow a programmer writing an application in that area to concentrate on the specifics of his or her application, because all of the "boiler-plate" that is common to the area is already built in to the language. As a result, these languages can greatly increase programmer productivity.  For example, there are commonly-used domain-specific languages for statistics, for circuit design, for algebra, and many other domains.  Our research developed techniques for making it easier to define such languages and allow them to use syntax that is natural for the domain, rather than being confined to the syntax of a conventional computer language.          Last Modified: 10/21/2012       Submitted by: Mitchell Wand]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
