<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Dynamic Run-Time Optimization of Parallel, Adaptive and Hybrid Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/15/2009</AwardEffectiveDate>
<AwardExpirationDate>01/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>409576.00</AwardTotalIntnAmount>
<AwardAmount>409576</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>CAREER: Dynamic Run-Time Tuning of Parallel, Adaptive and Hybrid Applications&lt;br/&gt;&lt;br/&gt;The complexity of today?s High Performance Computing systems mandate significant efforts by end users and application developers to tune their code for each platform.  Processor and node architecture, network interconnect and the software stack all expose a significant number of parameters which influence the performance of an application. These parameters are furthermore often correlated, which further complicates the predictability of the performance of any application. The most popular tuning approach as of today applies a static tuning for the most time consuming operations of the code, i.e. the performance of different versions of the same operation is evaluated for certain problem sizes and the best performing version is chosen for the subsequent executions of the application. However, this approach is not practical for adaptive applications. These applications vary the problem sizes at run-time, e.g. by locally refining the computational mesh based on certain error criteria. Thus, the problem sizes are typically unknown in advance and therefore expensive operations cannot be tuned for the relevant problem sizes.&lt;br/&gt;&lt;br/&gt;This project focuses on run-time tuning of parallel, adaptive applications utilizing either a distributed memory parallel programming model such as MPI or a hybrid shared memory/distributed memory parallelization strategy using OpenMP and MPI. The focus of the project is on introducing novel run-time selection algorithms which incorporate knowledge gathered from previous executions, algorithms from factorial design theory for very large parameter spaces and advanced algorithms from machine learning.  The project also targets the development of a recommendation system, which presents a human readable form of experiences gathered from an optimization run in order to reuse them in other applications. &lt;br/&gt;&lt;br/&gt;This proposal tackles one of the most pressing and fundamental problems in High Performance Computing. Code portability and maintainability on one side and performance on the other side often seem to be contradicting goals. The project develops the fundamental knowledge required to develop performance portable parallel code and thus avoid the necessity to maintain multiple versions of the same code for different platforms.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/05/2009</MinAmdLetterDate>
<MaxAmdLetterDate>08/20/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0846002</AwardID>
<Investigator>
<FirstName>Edgar</FirstName>
<LastName>Gabriel</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Edgar Gabriel</PI_FULL_NAME>
<EmailAddress>gabriel@cs.uh.edu</EmailAddress>
<PI_PHON>7137433857</PI_PHON>
<NSF_ID>000316336</NSF_ID>
<StartDate>02/05/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Houston</Name>
<CityName>Houston</CityName>
<ZipCode>772042015</ZipCode>
<PhoneNumber>7137435773</PhoneNumber>
<StreetAddress>4800 Calhoun Boulevard</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>036837920</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF HOUSTON SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042916627</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Houston]]></Name>
<CityName>Houston</CityName>
<StateCode>TX</StateCode>
<ZipCode>772042015</ZipCode>
<StreetAddress><![CDATA[4800 Calhoun Boulevard]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2009~95928</FUND_OBLG>
<FUND_OBLG>2010~98204</FUND_OBLG>
<FUND_OBLG>2011~82418</FUND_OBLG>
<FUND_OBLG>2012~133026</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The fundamental goal of this project is to create portable and efficient parallel applications by allowing an application to adjust to a given platform and application scenario by auto-tuning the occuring communication operations. As of today, applications using thousands of processes are often the result of many person-years of tuning for a particular platform, and end-users often have to maintain multiple versions of the application for different platforms. This project contributes to the solution of this problem by developing novel techniques and algorithms through dynamic run-time tuning of collective communication, and eliminate the necessity to maintain multiple code versions for performance reasons. The auto-tuning of communication operations is based on the following principles:</p> <ol> <li>Availability of alternative algorithms and/or implementations of the operation to be tuned.</li> <li>A parameterized description of the alternative implementations is available.</li> <li>Using a selection logic to choose among the alternatives based on performance data gathered during the execution of an application. </li> </ol> <p>Alternative implementations/algorithms can be evaluated within the lifetime of a single instance of the application, e.g. each function call to a particular communication operation will invoke a different alternative implementation. The algorithms developed within the project have been implemented within the Abstract Data and Communication Library (ADCL), an auto-tuning library for communication operations.</p> <p>The key results obtained by the project include i) demonstration of the ability of applications to achieve close to optimal performance on a wide variety of high-end computing systems using the algorithms and techniques developed in the project; ii) enormous performance improvements of parallel applications when using auto-tuning for both blocking and non-blocking collective communication operations; iii) solving the technical challenges and solutions of transferring the knowledge gathered from one application instance to another application through historic learning; iv) develop a user-friendly, human readable representation of the results of the auto-tuning operation through a recommendation system; v) an application of the algorithms developed in the project to tune internal parameters of a communication library (Open MPI); vi) successful demonstration of the benefits of integrating communication auto-tuning with automatic parallelization.</p> <p>The project has led to numerous conference, workshop and journal publications, contributed directly and indirectly to six PhD dissertations and two MS thesis. All software developed as part of this project is open source and available for download on the project webpages.</p> <p>&nbsp;</p><br> <p>            Last Modified: 03/30/2016<br>      Modified by: Edgar&nbsp;Gabriel</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The fundamental goal of this project is to create portable and efficient parallel applications by allowing an application to adjust to a given platform and application scenario by auto-tuning the occuring communication operations. As of today, applications using thousands of processes are often the result of many person-years of tuning for a particular platform, and end-users often have to maintain multiple versions of the application for different platforms. This project contributes to the solution of this problem by developing novel techniques and algorithms through dynamic run-time tuning of collective communication, and eliminate the necessity to maintain multiple code versions for performance reasons. The auto-tuning of communication operations is based on the following principles:  Availability of alternative algorithms and/or implementations of the operation to be tuned. A parameterized description of the alternative implementations is available. Using a selection logic to choose among the alternatives based on performance data gathered during the execution of an application.    Alternative implementations/algorithms can be evaluated within the lifetime of a single instance of the application, e.g. each function call to a particular communication operation will invoke a different alternative implementation. The algorithms developed within the project have been implemented within the Abstract Data and Communication Library (ADCL), an auto-tuning library for communication operations.  The key results obtained by the project include i) demonstration of the ability of applications to achieve close to optimal performance on a wide variety of high-end computing systems using the algorithms and techniques developed in the project; ii) enormous performance improvements of parallel applications when using auto-tuning for both blocking and non-blocking collective communication operations; iii) solving the technical challenges and solutions of transferring the knowledge gathered from one application instance to another application through historic learning; iv) develop a user-friendly, human readable representation of the results of the auto-tuning operation through a recommendation system; v) an application of the algorithms developed in the project to tune internal parameters of a communication library (Open MPI); vi) successful demonstration of the benefits of integrating communication auto-tuning with automatic parallelization.  The project has led to numerous conference, workshop and journal publications, contributed directly and indirectly to six PhD dissertations and two MS thesis. All software developed as part of this project is open source and available for download on the project webpages.          Last Modified: 03/30/2016       Submitted by: Edgar Gabriel]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
