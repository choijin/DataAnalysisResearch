<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Using Contracts to Support Development, Verification, and Maintenance of Multi-threaded Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2007</AwardEffectiveDate>
<AwardExpirationDate>06/30/2012</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>430000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Stirewalt Abstract:&lt;br/&gt;&lt;br/&gt;A principal difficulty in the development of high-assurance software is to safely accommodate concurrency and synchronization.  The propensity for concurrency to engender state-explosion confounds verification, and the tendency for synchronization logic to be interleaved with "functional" code complicates understanding and maintenance.  Thus, development and long-term maintenance of high-assurance software requires design artifacts over which verification is feasible and processes that use these artifacts to maintain separation of concerns in the implementation.&lt;br/&gt;&lt;br/&gt;This project aims to achieve these goals.  Specifically, it explores a design-for-verification (D4V) approach based on synchronization contracts, which provides the high level of abstraction needed to support verification while maintaining a good separation of synchronization and functional concerns.  We are developing programming systems that leverage contract awareness for analysis; to automate the generation of models from design artifacts, (e.g., UML diagrams); and to separate synchronization and functional concerns. We are conducting these explorations in the context of an existing software baseline.&lt;br/&gt;&lt;br/&gt;The project also involves development of undergraduate courses in concurrent systems design, model-based software engineering, and D4V. One benchmark is the extent to which undergraduates are able to design and verify contract-aware programs using the tools and methods developed under this grant.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/14/2007</MinAmdLetterDate>
<MaxAmdLetterDate>05/07/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0702667</AwardID>
<Investigator>
<FirstName>Kurt</FirstName>
<LastName>Stirewalt</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kurt Stirewalt</PI_FULL_NAME>
<EmailAddress>stire@cse.msu.edu</EmailAddress>
<PI_PHON>5173552359</PI_PHON>
<NSF_ID>000260086</NSF_ID>
<StartDate>06/14/2007</StartDate>
<EndDate>01/27/2010</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Laura</FirstName>
<LastName>Dillon</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Laura Dillon</PI_FULL_NAME>
<EmailAddress>ldillon@cse.msu.edu</EmailAddress>
<PI_PHON>5173534387</PI_PHON>
<NSF_ID>000698384</NSF_ID>
<StartDate>05/07/2010</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Laura</FirstName>
<LastName>Dillon</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Laura Dillon</PI_FULL_NAME>
<EmailAddress>ldillon@cse.msu.edu</EmailAddress>
<PI_PHON>5173534387</PI_PHON>
<NSF_ID>000698384</NSF_ID>
<StartDate>06/14/2007</StartDate>
<EndDate>01/27/2010</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Michigan State University</Name>
<CityName>East Lansing</CityName>
<ZipCode>488242600</ZipCode>
<PhoneNumber>5173555040</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[426 Administration Bldg, Rm2]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI08</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>193247145</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MICHIGAN STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053343976</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Michigan State University]]></Name>
<CityName>East Lansing</CityName>
<StateCode>MI</StateCode>
<ZipCode>488242600</ZipCode>
<StreetAddress><![CDATA[Office of Sponsored Programs]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI08</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~135000</FUND_OBLG>
<FUND_OBLG>2008~265000</FUND_OBLG>
<FUND_OBLG>2010~30000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The expressive power and performance gains promised by multi-threaded software comes at the expense of increased complexity. Without proper synchronization, multiple threads may concurrently access the same shared object, producing a race condition, and incorrect synchronization logic can lead to starvation and/or deadlock. Moreover, because synchronization policies and decisions are difficult to localize within software modules, concurrency confounds the development of reusable software. &nbsp;</p> <p><br />This project developed a model of synchronization contracts for object-oriented languages that addresses this complexity, and validated benefits of this model. Called the Synchronization Units Model (Szumo), the model's key benefits are increased design transparency, separation of synchronization code from functional code, and enhanced extensibility and maintenance. &nbsp;Separating synchronization code from functional code simplifies programming, and localizing synchronization contracts in module interfaces simplifies reasoning about synchronization errors.&nbsp;</p> <p><br />In this project, we demonstrated that, although the full Szumo negotiation algorithm does not scale well under high contention when compared with hand-optimized solutions, a restricted version of this algorithm reduces contention when compared to two common synchronization policies. &nbsp;This restricted algorithm is well suited to the IP telecommunication services domain. &nbsp;We used it to demonstrate that performance of contract-based automatic synchronization could be very close to that of an optimized manually synchronized implementation of an IP telecommunications service.</p> <p><br />Our paper on synchronization issues for IP telecommunications services was circulated to the expert group for SIP Servlet API, the current industry standard for deployment of Voice Over IP (VoIP) service, when it was actively debating a specification for a threading model for the standard. Due to our findings, the expert group decided that JSR 289 should not mandate any particular threading model (JSR 289, Section 6.4.2). Thus, our work influenced the standards body to not adopt a flawed threading model.</p> <p><br />In addition, empirical studies performed in this project have contributed to the body of understanding in program comprehension and software maintenance. To our knowledge, our work is the first to explore the effects of concurrency on these key software-development activities.</p> <p><br />Finally, our work on the use of finite-state verification to assist in the design and evaluation of user studies involving computing processes and artifacts (i.e., development methods and notations) and our development of on-line tutorials to assist in training participants prior to such studies contributes to helping make these studies more objective and to prevent erroneous or ambiguous materials from being used in these very expensive studies. This may, in the long term, help the field to reduce the effort required to run these studies and thus help bring about a greater body of empirical knowledge in software engineering.</p><br> <p>            Last Modified: 07/30/2012<br>      Modified by: Laura&nbsp;K&nbsp;Dillon</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The expressive power and performance gains promised by multi-threaded software comes at the expense of increased complexity. Without proper synchronization, multiple threads may concurrently access the same shared object, producing a race condition, and incorrect synchronization logic can lead to starvation and/or deadlock. Moreover, because synchronization policies and decisions are difficult to localize within software modules, concurrency confounds the development of reusable software.     This project developed a model of synchronization contracts for object-oriented languages that addresses this complexity, and validated benefits of this model. Called the Synchronization Units Model (Szumo), the model's key benefits are increased design transparency, separation of synchronization code from functional code, and enhanced extensibility and maintenance.  Separating synchronization code from functional code simplifies programming, and localizing synchronization contracts in module interfaces simplifies reasoning about synchronization errors.    In this project, we demonstrated that, although the full Szumo negotiation algorithm does not scale well under high contention when compared with hand-optimized solutions, a restricted version of this algorithm reduces contention when compared to two common synchronization policies.  This restricted algorithm is well suited to the IP telecommunication services domain.  We used it to demonstrate that performance of contract-based automatic synchronization could be very close to that of an optimized manually synchronized implementation of an IP telecommunications service.   Our paper on synchronization issues for IP telecommunications services was circulated to the expert group for SIP Servlet API, the current industry standard for deployment of Voice Over IP (VoIP) service, when it was actively debating a specification for a threading model for the standard. Due to our findings, the expert group decided that JSR 289 should not mandate any particular threading model (JSR 289, Section 6.4.2). Thus, our work influenced the standards body to not adopt a flawed threading model.   In addition, empirical studies performed in this project have contributed to the body of understanding in program comprehension and software maintenance. To our knowledge, our work is the first to explore the effects of concurrency on these key software-development activities.   Finally, our work on the use of finite-state verification to assist in the design and evaluation of user studies involving computing processes and artifacts (i.e., development methods and notations) and our development of on-line tutorials to assist in training participants prior to such studies contributes to helping make these studies more objective and to prevent erroneous or ambiguous materials from being used in these very expensive studies. This may, in the long term, help the field to reduce the effort required to run these studies and thus help bring about a greater body of empirical knowledge in software engineering.       Last Modified: 07/30/2012       Submitted by: Laura K Dillon]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
