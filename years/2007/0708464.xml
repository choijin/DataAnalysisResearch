<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CRI: IAD An Advanced Infrastructure for Generation, Storage, and Analysis of Program Execution Traces</AwardTitle>
<AwardEffectiveDate>09/01/2007</AwardEffectiveDate>
<AwardExpirationDate>09/30/2010</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>83552</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rita Rodriguez</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Proposal #: CNS 07-08199     07-08464&lt;br/&gt;PI(s):          Gupta, Rajiv; Gupta, Neelam   Zhang, Xiangyu&lt;br/&gt;Institution: University of Arizona    Purdue University&lt;br/&gt;  Tucson, AZ 85721-0001    Wes Lafayette, IN 47907-2108&lt;br/&gt;Title:   IAD: Advanced Infr for Generation, Storage, and Analysis of Program Execution Traces &lt;br/&gt;&lt;br/&gt;Project Proposed:&lt;br/&gt;This collaborative project, developing an open source software infrastructure that is capable of tracing and analyzing long program executions, features customizability, extensibility, and most importantly, the capability of collecting prolific types of execution traces for realistic executions on single- and multi-threaded programs. The work is feasible due to the fact that, at present, checkpointing/logging can be effectively combined with tracing through a technique called Execution Fast Forwarding (EFF) that enables scaling up tracing by orders of magnitude and availability of a highly compacted trace representation called Whole Execution Trace (WET) composed of static program representation that is annotated with dynamic traces including control flow, address, value, and a dependence trace that can contain complete program execution history in compacted form. Components of the infrastructure include&lt;br/&gt;. Checkpointing/logging environment that will execute a given binary on the supplied input to produce a set of checkpoints and logs which can be used to replay the execution;&lt;br/&gt;. Execution fast forwarding components that will eliminate part of the execution that is not relevant to reproducing a given event;&lt;br/&gt;. Tracing component to generate, compress, and store the WET (Whole Execution Trace) of a replayed execution interval; and&lt;br/&gt;. Trace analysis component to provide an API that will enable users to access WET's with ease, without having to understand the low level detailed representation of WET.&lt;br/&gt;Dynamic analysis techniques analyze traces of program executions to characterize the runtime behavior of programs. Distinctive runtime characteristics are then exploited in designing the systems to &lt;br/&gt;. Develop highly reliable systems by detecting bugs, locating faults, and testing programs; &lt;br/&gt;. Develop secure systems by detecting information leaks and unsafe behavior, and performing software marking; &lt;br/&gt;. Validate and verify data by associating the output produced by highly complicated data processing procedures to the raw input data that can greatly facilitate verification of results;&lt;br/&gt;. Develop hardware and software for highly optimized systems (e.g.,  embedded systems that must optimize performance, power, &amp; memory usage) exploiting a wide range of runtime program characteristics (e.g., recurring code sequences to achieve compression, narrow width data to develop energy efficient cache designs &amp; pipelines, etc.). &lt;br/&gt;&lt;br/&gt;Broader Impacts: The infrastructure enables rapid prototyping for data verification, computer architecture, compilers, embedded systems, software engineering such as building testers and debuggers, security such as designing watermarking and information flow analysis tools. The uniform representation of logs and WETs provides standard interface to easily exchange traces. Moreover, encouraging synergy among projects, course projects will be designed and provided with the infrastructure.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/24/2007</MinAmdLetterDate>
<MaxAmdLetterDate>09/29/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0708464</AwardID>
<Investigator>
<FirstName>Xiangyu</FirstName>
<LastName>Zhang</LastName>
<EmailAddress>xyzhang@cs.purdue.edu</EmailAddress>
<StartDate>07/24/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7359</Code>
<Text>CCRI-CISE Cmnty Rsrch Infrstrc</Text>
</ProgramElement>
<ProgramReference>
<Code>7359</Code>
<Text>COMPUTING RES INFRASTRUCTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
