<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CRI: CRD: A Compiler-Based Virtual Machine Infrastructure for System Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2007</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rita Rodriguez</SignBlockName>
<PO_EMAI>rrodrigu@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Proposal #: CNS 07-09122&lt;br/&gt;PI(s):          Adve, Vikram S.&lt;br/&gt;Institution: University of Illinois - Urbana-Champaign&lt;br/&gt;  Champaign, IL 61820-7406&lt;br/&gt;Title:     CRD:A Compiler-Based Virtual Machine Infrastructure for System Software &lt;br/&gt;&lt;br/&gt;Project Proposed:&lt;br/&gt;&lt;br/&gt;This project, building and distributing a compiler-based virtual monitor machine (VMM) for system software, combines virtualization and compiler techniques. This infrastructure supports safety and verifiability for both high-level applications and low-level system code and includes a compiler-based virtual machine (LLVA) that can host an entire OS and all its applications, the Linux kernel (ported to the LLVA architecture), and development tools to compile and work with LLVA code. Building on techniques developed in the SAFECode in-house project, this virtual machine will enforce a safe execution environment for applications and even for legacy systems. The flexibility of the infrastructure permits individual components to be used separately and to be integrated into other systems. Important components include the LLVA instruction set, a run-time library implementing the kernel support functions, compiler modules, development tools, a Just-in-Time (JIT) engine for managing JIT compilation and caching, and the SAFECode compiler for enforcing memory safety for C programs and the kernel. The infrastructure also includes examples of course projects pre-packaged for instructor to use. Beginning with the prototype, major developments consist of modifying the compiler and JIT engine to be able to run without system services, assembling the components into a complete usable system, improving the robustness and performance, and adding usability features such as documentation, auto-configuration, automatic testing, bug tracking, and pre-packaged course projects. The infrastructure aims to enable approaches to intrusion detection and prevention, cross-program information flow, compilation certification, and formal verification of system software.&lt;br/&gt;&lt;br/&gt;Broader Impacts: This work enables research groups to undertake prohibitively difficult research providing new solutions that tackle hard problems such as insider threats, building scalable secure systems, information provenance, and security and privacy. Moreover, in addition to contributing to train students in the area, the infrastructure facilitates development of new and/or more ambitious course projects and education topics in OS, compiler, architecture, embedded and distributed systems&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/09/2007</MinAmdLetterDate>
<MaxAmdLetterDate>08/22/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0709122</AwardID>
<Investigator>
<FirstName>Vikram</FirstName>
<LastName>Adve</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Vikram S Adve</PI_FULL_NAME>
<EmailAddress>vadve@cs.uiuc.edu</EmailAddress>
<PI_PHON>2172442016</PI_PHON>
<NSF_ID>000334755</NSF_ID>
<StartDate>08/09/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>Champaign</CityName>
<StateCode>IL</StateCode>
<ZipCode>618207406</ZipCode>
<StreetAddress><![CDATA[1901 South First Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7359</Code>
<Text>CCRI-CISE Cmnty Rsrch Infrstrc</Text>
</ProgramElement>
<ProgramReference>
<Code>7359</Code>
<Text>COMPUTING RES INFRASTRUCTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~160000</FUND_OBLG>
<FUND_OBLG>2008~93291</FUND_OBLG>
<FUND_OBLG>2009~150000</FUND_OBLG>
<FUND_OBLG>2010~96709</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The major goal of this project is to develop and make available a unique software system called <strong>Secure Virtual Architecture (SVA)</strong> for research on software security. &nbsp;SVA can be used to enforce security policies for popular operating systems such as Linux, FreeBSD, iOS, Android, MacOS and Windows. &nbsp;These systems form the foundation of security on modern computers: they regulate and protect nearly all software that runs on a system, and have complete access to all the code and data of all applications on the system. &nbsp;Any exploit of the operating system can undermine even the most securely designed applications. &nbsp;Unfortunately, all the above systems have suffered numerous successful exploits, as documented by the Homeland Security Computer Emergency Readiness Team (CERT). &nbsp;For example, the recent theft of a large number of credit card numbers from Target, Home Depot, and other retailers was possible in part because the attackers exploited vulnerabilities in a popular version of Windows.&nbsp;</p> <p><strong>Intellectual Merit:</strong></p> <p>SVA provides a unique combination of capabilities that can be used to (a) <em>IMPROVE THE SECURITY</em> of operating systems, and (b) to <em>REDUCE THE HARM</em> that can be done to applications if the operating system is compromised. &nbsp;For example, using SVA, we have shown that an application can protect itself from attacks that attempt to steal or tamper with its data, <em>EVEN IF THE UNDERLYING OPERATING SYSTEM IS FULLY COMPROMISED BY THE ATTACKER</em>. &nbsp;This is a sophisticated security capability that is possible because SVA can carefully control a number of fundamental operating system functions. &nbsp;We have added this capability to the FreeBSD operating system (which is used by many major companies, including Netflix, WhatsApp, Dell, and others). Importantly, no previous operating system by itself has been able to provide this capability. &nbsp;John Criswell's Ph.D. dissertation on SVA, which was supported in part by this project, received an <em>Honorable Mention for the 2014 ACM SIGOPS Dennis M. Ritchie Distinguished Dissertation Award</em>.</p> <p>Through this project, we have made available to researchers and the general public the source code of all components of SVA and the version of FreeBSD ported to SVA, under non-restrictive open source licenses. &nbsp;The major artifacts we have released include:</p> <p>(1) SAFECode, the safety checking compiler underlying SVA. &nbsp;SAFECode is built on the LLVM Compiler Infrastructure, an NSF-funded, open source software system that was developed by our research group at the University of Illinois. &nbsp;LLVM has become widely used in industry, including in major consumer products like iPhones, iPads, Apple computers, and Sony Playstations, and in high-end systems such as Cray supercomputers.</p> <p>(2) The Automatic Pool Allocation transformation, a compiler transformation described in an award-winning paper, which enables key security properties in SAFECode and SVA.</p> <p>(3) The SVA Execution Engine, the key component that monitors and restricts operating system behavior.</p> <p>(4) Formal, computer-executable definitions and proofs of correctness properties of the SVA Execution Engine, which enable researchers to prove the correctness of security solutions built using SVA.</p> <p>(5) The FreeBSD operating system that we ported to use SVA, under the FreeBSD license.</p> <p>All the above artifacts and associated documentation and research publications are available to the public through the project Web site (<a title="Secure Virtual Architecture Project Home" href="http://sva.cs.illinois.edu">http://sva.cs.illinois.edu</a>). &nbsp;We have set up mailing lists where users of the software can post and respond to questions about the software.<br /><br />The artifacts we have released have already enjoyed some valuable adoptio...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The major goal of this project is to develop and make available a unique software system called Secure Virtual Architecture (SVA) for research on software security.  SVA can be used to enforce security policies for popular operating systems such as Linux, FreeBSD, iOS, Android, MacOS and Windows.  These systems form the foundation of security on modern computers: they regulate and protect nearly all software that runs on a system, and have complete access to all the code and data of all applications on the system.  Any exploit of the operating system can undermine even the most securely designed applications.  Unfortunately, all the above systems have suffered numerous successful exploits, as documented by the Homeland Security Computer Emergency Readiness Team (CERT).  For example, the recent theft of a large number of credit card numbers from Target, Home Depot, and other retailers was possible in part because the attackers exploited vulnerabilities in a popular version of Windows.   Intellectual Merit:  SVA provides a unique combination of capabilities that can be used to (a) IMPROVE THE SECURITY of operating systems, and (b) to REDUCE THE HARM that can be done to applications if the operating system is compromised.  For example, using SVA, we have shown that an application can protect itself from attacks that attempt to steal or tamper with its data, EVEN IF THE UNDERLYING OPERATING SYSTEM IS FULLY COMPROMISED BY THE ATTACKER.  This is a sophisticated security capability that is possible because SVA can carefully control a number of fundamental operating system functions.  We have added this capability to the FreeBSD operating system (which is used by many major companies, including Netflix, WhatsApp, Dell, and others). Importantly, no previous operating system by itself has been able to provide this capability.  John Criswell's Ph.D. dissertation on SVA, which was supported in part by this project, received an Honorable Mention for the 2014 ACM SIGOPS Dennis M. Ritchie Distinguished Dissertation Award.  Through this project, we have made available to researchers and the general public the source code of all components of SVA and the version of FreeBSD ported to SVA, under non-restrictive open source licenses.  The major artifacts we have released include:  (1) SAFECode, the safety checking compiler underlying SVA.  SAFECode is built on the LLVM Compiler Infrastructure, an NSF-funded, open source software system that was developed by our research group at the University of Illinois.  LLVM has become widely used in industry, including in major consumer products like iPhones, iPads, Apple computers, and Sony Playstations, and in high-end systems such as Cray supercomputers.  (2) The Automatic Pool Allocation transformation, a compiler transformation described in an award-winning paper, which enables key security properties in SAFECode and SVA.  (3) The SVA Execution Engine, the key component that monitors and restricts operating system behavior.  (4) Formal, computer-executable definitions and proofs of correctness properties of the SVA Execution Engine, which enable researchers to prove the correctness of security solutions built using SVA.  (5) The FreeBSD operating system that we ported to use SVA, under the FreeBSD license.  All the above artifacts and associated documentation and research publications are available to the public through the project Web site (http://sva.cs.illinois.edu).  We have set up mailing lists where users of the software can post and respond to questions about the software.  The artifacts we have released have already enjoyed some valuable adoption.  Researchers from multiple organizations, including CERT, have downloaded and used SAFECode in their research.  Separate groups of researchers from Harvard University and the University of Pennsylvania have developed formal models of execution of SVA and some of its security properties, as part of other federally funded research projects.  More genera...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
