<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>HCC: Evaluating the Performance of Distributed  Synchronous Collaboration Architectures</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2007</AwardEffectiveDate>
<AwardExpirationDate>08/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>475919</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Susan Fussell</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>There has been a recent proliferation of industrial-strength synchronous collaborative systems, however, there has been little research comparing the performance of their distributed architectures, even though inadequate performance can be a show-stopper. In systematically examining this architectural design space, this project will provide a critical foundation for what is currently the ''black art'' of collaborative system design. This will have broad ranging impact in both research and industry.  &lt;br/&gt;&lt;br/&gt;The architecture design space will be modeled by several architecture parameters (e.g., transport protocol, server configuration, I/O scheduling), system parameters (e.g., network latency, processing power) and task parameters (e.g., I/O size, think time) that impact performance. Equations will be developed that give the value of the time, along key metrics such as join, leave, response, feedthrough, and task-completion, as a function of the architecture, system, and task parameters. Experiments will be performed to validate these equations using logs of different kinds of collaborations such as multi-user presentations, chats, and scientific visualizations. This novel experimental test bed will enable performance comparisons that have not been possible before. &lt;br/&gt;&lt;br/&gt;Broader impact: The analytic model resulting from this research will allow application and infrastructure developers to determine the range of architectures they should implement. It will provide scientists, engineers, writers, and other users of collaboration technology a better understanding of the design space so they can choose the correct architecture to fit their needs while appreciating the performance consequences of that choice. In addition, the project infrastructure will form the first proof-of-concept system supporting the entire space of collaborative architectures, a novel research test-bed for experimentation, and a vehicle for teaching collaboration architectures. The multi-user activity logs created for these experiments will be publicized so that they can become benchmarks, in both academic and industrial research, used to compare performance of new architectures.</AbstractNarration>
<MinAmdLetterDate>08/29/2007</MinAmdLetterDate>
<MaxAmdLetterDate>03/30/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0712794</AwardID>
<Investigator>
<FirstName>Prasun</FirstName>
<LastName>Dewan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Prasun Dewan</PI_FULL_NAME>
<EmailAddress>dewan@cs.unc.edu</EmailAddress>
<PI_PHON>9195906123</PI_PHON>
<NSF_ID>000336210</NSF_ID>
<StartDate>08/29/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of North Carolina at Chapel Hill</Name>
<CityName>CHAPEL HILL</CityName>
<ZipCode>275991350</ZipCode>
<PhoneNumber>9199663411</PhoneNumber>
<StreetAddress>104 AIRPORT DR STE 2200</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>608195277</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of North Carolina at Chapel Hill]]></Name>
<CityName>CHAPEL HILL</CityName>
<StateCode>NC</StateCode>
<ZipCode>275991350</ZipCode>
<StreetAddress><![CDATA[104 AIRPORT DR STE 2200]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0116000</Code>
<Name>Human Subjects</Name>
</FoaInformation>
<ProgramElement>
<Code>7367</Code>
<Text>HCC-Human-Centered Computing</Text>
</ProgramElement>
<ProgramReference>
<Code>7367</Code>
<Text>Cyber-Human Systems</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~147490</FUND_OBLG>
<FUND_OBLG>2008~141680</FUND_OBLG>
<FUND_OBLG>2009~162749</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<FUND_OBLG>2011~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The increasingly popular multi-user webinars, games, and document editing are examples of distributed synchronous collaboration technology. The interactivity of a synchronous application can be the difference between life and death in synchronous collaboration. &nbsp;If a system does not display the results of an action to a user in a timely fashion, the user may get frustrated and switch to a different system or, worse, never use a collaborative system again.&nbsp; One way to improve performance is to use faster computers and communication links.&nbsp; As this solution is expensive and not always possible, our research has developed techniques that attempt to automatically optimize the use of existing resources. Rather than focusing on a particular implementation, or class of applications, we have taken an application-independent approach.</p> <p>In general, the computers of all users interacting with a collaborative application are involved in executing the application.&nbsp; Each of these computers gathers input from and displays output to the local user, and communicates information to other computers. Optionally, it can also perform some of the processing of user actions (such as determining the next slide to present in a webinar), and route information to other computers. &nbsp;Our experiments found that the performance of an application depends on three architectural dimensions including: (1) which computers process actions, (2) how information is routed among them, and (3) how processing and routing tasks are scheduled on different computers and how many cores are available to perform these tasks.&nbsp; One particularly interesting result had to with a new scheduling policy we invented, which was based on psychological experiments showing that users cannot perceive delays of less than 50 milliseconds. &nbsp;We found that, under this policy, a non-perceptible increase in the response time of a user could result in much larger, perceptible, reduction in response times of other users. &nbsp;This policy is an interesting example of merging computer science and psychology research</p> <p>The architecture factors we identified can be used to manually tune the performance of an application, but this &ldquo;trial and error&rdquo; approach is tedious and error prone. &nbsp;Therefore, we developed mathematical equations that can predict the effect of changes to these factors, and verified that these equations were consistent with our experimental observations. The final step was to develop a self optimizing software system that (a) is independent of any particular application, (b) keeps track of various performance parameters such&nbsp; how much time is taken by each computer to process actions and communicate them,&nbsp; how much time users take to think between actions, and &nbsp;network latencies to all other computers, (c) automatically changes the architecture along one of the three dimensions based on predictions of our equations,&nbsp; and (d) keeps the overhead of monitoring&nbsp; parameters and changing architecture&nbsp; low. To illustrate a simple use of this system, suppose a user on a tablet is giving a PPT presentation to a user on a smart phone. As the smart phone is slow, all PPT processing is done on the tablet.&nbsp; Suppose a new user with a powerful laptop joins the session.&nbsp; &nbsp;The PPT presentation application would automatically move to the laptop when the latecomer joins (if the equations predict that this change would be beneficial), and move back to the tablet if he/she leaves. Our work is even more important to support large scalable collaborative sessions, such as state of the union webinar presentation to the whole country or the whole world.&nbsp;</p> <p>The extent to which our work can help, of course, depends on various factors such as the configuration of computers and communication links and the application, but our results sh...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The increasingly popular multi-user webinars, games, and document editing are examples of distributed synchronous collaboration technology. The interactivity of a synchronous application can be the difference between life and death in synchronous collaboration.  If a system does not display the results of an action to a user in a timely fashion, the user may get frustrated and switch to a different system or, worse, never use a collaborative system again.  One way to improve performance is to use faster computers and communication links.  As this solution is expensive and not always possible, our research has developed techniques that attempt to automatically optimize the use of existing resources. Rather than focusing on a particular implementation, or class of applications, we have taken an application-independent approach.  In general, the computers of all users interacting with a collaborative application are involved in executing the application.  Each of these computers gathers input from and displays output to the local user, and communicates information to other computers. Optionally, it can also perform some of the processing of user actions (such as determining the next slide to present in a webinar), and route information to other computers.  Our experiments found that the performance of an application depends on three architectural dimensions including: (1) which computers process actions, (2) how information is routed among them, and (3) how processing and routing tasks are scheduled on different computers and how many cores are available to perform these tasks.  One particularly interesting result had to with a new scheduling policy we invented, which was based on psychological experiments showing that users cannot perceive delays of less than 50 milliseconds.  We found that, under this policy, a non-perceptible increase in the response time of a user could result in much larger, perceptible, reduction in response times of other users.  This policy is an interesting example of merging computer science and psychology research  The architecture factors we identified can be used to manually tune the performance of an application, but this "trial and error" approach is tedious and error prone.  Therefore, we developed mathematical equations that can predict the effect of changes to these factors, and verified that these equations were consistent with our experimental observations. The final step was to develop a self optimizing software system that (a) is independent of any particular application, (b) keeps track of various performance parameters such  how much time is taken by each computer to process actions and communicate them,  how much time users take to think between actions, and  network latencies to all other computers, (c) automatically changes the architecture along one of the three dimensions based on predictions of our equations,  and (d) keeps the overhead of monitoring  parameters and changing architecture  low. To illustrate a simple use of this system, suppose a user on a tablet is giving a PPT presentation to a user on a smart phone. As the smart phone is slow, all PPT processing is done on the tablet.  Suppose a new user with a powerful laptop joins the session.   The PPT presentation application would automatically move to the laptop when the latecomer joins (if the equations predict that this change would be beneficial), and move back to the tablet if he/she leaves. Our work is even more important to support large scalable collaborative sessions, such as state of the union webinar presentation to the whole country or the whole world.   The extent to which our work can help, of course, depends on various factors such as the configuration of computers and communication links and the application, but our results show that it cannot hurt and, in many scenarios, it can help in a significant manner. Perhaps more important, it has led to a better understanding of the architectures of collaborative appl...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
