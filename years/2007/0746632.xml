<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:    Improving the Productivity of the Sensor Network Programmer</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2008</AwardEffectiveDate>
<AwardExpirationDate>01/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>510000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Thyagarajan Nandagopal</SignBlockName>
<PO_EMAI>tnandago@nsf.gov</PO_EMAI>
<PO_PHON>7032924550</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Wireless sensor networks (sensornets) have the potential to enable an unprecedented amount of visibility and control over the world around us. There are major obstacles to realizing this potential, however: the methods and tools available for constructing sensornet software are too brittle, and require specialized training to use effectively. This CAREER project is investigating ways to overcome these obstacles. In particular, this project involves creating programming and middleware artifacts, specification and reasoning techniques, and toolsets that can be easily used by "non-programmer" specialists -- researchers outside of the field of computing.&lt;br/&gt;&lt;br/&gt;The project has four major thrusts: (i) a system of programming that will enable non-programmer specialists to express applications in a form that is natural for them to develop sensornet applications on their own, (ii) a notation for specifying the functional behavior as well as performance and quality-of-service (QoS) profiles of software components that provide various services, (iii) a set of tools that will support application development, integrating the programming and specification systems, and (iv) integration of research findings into the graduate and undergraduate curricula, and outreach into the K-12 preparatory curricula.&lt;br/&gt;&lt;br/&gt;The success of this project will be validated through collaborative efforts along with researchers in transportation engineering, automation systems, and environmental science. The results from this project will be disseminated via papers in conferences and journals, and all the software created will be distributed to the research community under open-source licenses.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>01/22/2008</MinAmdLetterDate>
<MaxAmdLetterDate>04/05/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0746632</AwardID>
<Investigator>
<FirstName>Nigamanth</FirstName>
<LastName>Sridhar</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nigamanth Sridhar</PI_FULL_NAME>
<EmailAddress>n.sridhar1@csuohio.edu</EmailAddress>
<PI_PHON>2166875341</PI_PHON>
<NSF_ID>000271049</NSF_ID>
<StartDate>01/22/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cleveland State University</Name>
<CityName>Cleveland</CityName>
<ZipCode>441152214</ZipCode>
<PhoneNumber>2166873630</PhoneNumber>
<StreetAddress>2121 Euclid Avenue</StreetAddress>
<StreetAddress2><![CDATA[Parker Hannifin Hall, 2rd Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>11</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH11</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>010841617</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CLEVELAND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>010841617</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Cleveland State University]]></Name>
<CityName>Cleveland</CityName>
<StateCode>OH</StateCode>
<ZipCode>441152214</ZipCode>
<StreetAddress><![CDATA[2121 Euclid Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>11</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH11</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7363</Code>
<Text>RES IN NETWORKING TECH &amp; SYS</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~462000</FUND_OBLG>
<FUND_OBLG>2009~16000</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Over the last decade, wireless sensor networks (<em>sensornets</em>) have represented a dramatic leap in technology that is available to researchers and practitioners in a wide range of fields. These networks, composed of large numbers of extremely small and low-cost devices (called <em>motes</em>) provide a previously unimaginable amount of visibility and control of the physical world around us. There has been one significant impediment to the use of these sensornets, though --- installing and maintaining them involves an incredible amount of engineering effort, and almost necessarily requires highly qualified personnel. As such, a domain expert in a field such as transportation safety, for example, needs to depend on computing specialists to write software for these network systems. This is the key problem that this CAREER project addressed. Over the lifetime of this project, we created a number of tools and programming language artifacts that allowed these "non-programmer specialists" to be able to write and maintain software for these embedded network systems.&nbsp;</p> <p>Some of the key tools and artifacts we created are:</p> <ol> <li>A multi-threading system for low-power embedded systems called TinyThread. These low-power motes are typically programmed using an event-driven paradigm, which is very well suited for situations where performance in resource-constrained environment is a significant concern. However, expressing programs in this paradigm places an undue burden on the programmer. Our multi-threading approach alleviated this burden significantly.&nbsp;</li> <li>A state-based programming paradigm manifested in a language and runtime environment called DESAL (supported by NSF project CNS-<span>0520222)</span>. The DESAL implementation is built upon TinyThread.&nbsp;</li> <li>A graphical software development tool for sensornets called TOSDev. This tool enables non-programmers who are not as comfortable in front of code editors to easily configure the software system using a graphical interface. TOSDev takes care of all the low level details of producing executable code that would run on the target hardware.&nbsp;</li> <li>A runtime functional behavior monitoring tool called PromiseTracker, which allows developers to continuously monitor functional behavior, particularly "promises" of future behavior that individual software components make.&nbsp;</li> <li>An algorithm and tool support for identifying and detecting failures in sensornet systems, that quickly isolates faulty nodes, and protects the rest of the network from the impact of such faults.&nbsp;</li> <li>An algorithm and tool support for managing a number of mobile base stations in a sensor network, with the goal of extending the functional lifetime of the entire network.&nbsp;</li> </ol> <p>These tools and artifacts, and others not mentioned in the list above, were validated in two separate application contexts:</p> <ol> <li>Understanding driver behavior in short-term construction work zones. In construction work zones that last a few hours, such as one set up so that the cable company can work in a neighborhood street, the cost (in terms of time, money, and effort) of installing sensing equipment to monitor trafic is disproportionate. As well, the cognitive cost of writing software to run on such infrastructure is also significant. In this project, we worked with researchers in transportation safety to build a quickly deployable sensor network that can capture and report vehicle statistics in a short-term work zone.&nbsp;</li> <li>Monitoring exercise behavior in hemaplegic rehab subjects. People who have suffered from a stroke are frequently severely limited in limb motion, and need extensive physical therapy to regain such motion. In this project, we worked with researchers in physical therapy who work on using video game systems (such as the Nintendo Wii and Microsoft Kinect) to design exer...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Over the last decade, wireless sensor networks (sensornets) have represented a dramatic leap in technology that is available to researchers and practitioners in a wide range of fields. These networks, composed of large numbers of extremely small and low-cost devices (called motes) provide a previously unimaginable amount of visibility and control of the physical world around us. There has been one significant impediment to the use of these sensornets, though --- installing and maintaining them involves an incredible amount of engineering effort, and almost necessarily requires highly qualified personnel. As such, a domain expert in a field such as transportation safety, for example, needs to depend on computing specialists to write software for these network systems. This is the key problem that this CAREER project addressed. Over the lifetime of this project, we created a number of tools and programming language artifacts that allowed these "non-programmer specialists" to be able to write and maintain software for these embedded network systems.   Some of the key tools and artifacts we created are:  A multi-threading system for low-power embedded systems called TinyThread. These low-power motes are typically programmed using an event-driven paradigm, which is very well suited for situations where performance in resource-constrained environment is a significant concern. However, expressing programs in this paradigm places an undue burden on the programmer. Our multi-threading approach alleviated this burden significantly.  A state-based programming paradigm manifested in a language and runtime environment called DESAL (supported by NSF project CNS-0520222). The DESAL implementation is built upon TinyThread.  A graphical software development tool for sensornets called TOSDev. This tool enables non-programmers who are not as comfortable in front of code editors to easily configure the software system using a graphical interface. TOSDev takes care of all the low level details of producing executable code that would run on the target hardware.  A runtime functional behavior monitoring tool called PromiseTracker, which allows developers to continuously monitor functional behavior, particularly "promises" of future behavior that individual software components make.  An algorithm and tool support for identifying and detecting failures in sensornet systems, that quickly isolates faulty nodes, and protects the rest of the network from the impact of such faults.  An algorithm and tool support for managing a number of mobile base stations in a sensor network, with the goal of extending the functional lifetime of the entire network.    These tools and artifacts, and others not mentioned in the list above, were validated in two separate application contexts:  Understanding driver behavior in short-term construction work zones. In construction work zones that last a few hours, such as one set up so that the cable company can work in a neighborhood street, the cost (in terms of time, money, and effort) of installing sensing equipment to monitor trafic is disproportionate. As well, the cognitive cost of writing software to run on such infrastructure is also significant. In this project, we worked with researchers in transportation safety to build a quickly deployable sensor network that can capture and report vehicle statistics in a short-term work zone.  Monitoring exercise behavior in hemaplegic rehab subjects. People who have suffered from a stroke are frequently severely limited in limb motion, and need extensive physical therapy to regain such motion. In this project, we worked with researchers in physical therapy who work on using video game systems (such as the Nintendo Wii and Microsoft Kinect) to design exercise programs for patients in rehab post-stroke. We designed wearable sensor systems that can be used to accurately track and measure a patient's progress throughout their rehab program.         Last Modified: 05/05/2014       Su...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
