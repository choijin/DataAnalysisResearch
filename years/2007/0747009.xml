<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:  Configuration-Aware Testing Through Intelligent Sampling to Improve Software Dependability</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/15/2008</AwardEffectiveDate>
<AwardExpirationDate>01/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Proposal Number:  CCF-0747009&lt;br/&gt;&lt;br/&gt;TITLE:  CAREER: Configuration-Aware Testing Through Intelligent Sampling to Improve Software Dependability&lt;br/&gt;&lt;br/&gt;PI:  Myra B. Cohen&lt;br/&gt;&lt;br/&gt;The advent of modern software systems and the rise of system configurability add a new dimension of complexity to the task of ensuring system quality. A single configurable software system encapsulates thousands or millions of unique program configurations or instantiations, and each configuration may behave differently under the same software test sequences acting as a unique program from the tester?s point of view. Testing techniques should not assume configuration heterogeneity, but should instead sample a representative set of program instantiations.  This project focuses on the configuration-definition layer (CDL) of software to develop a set of scalable and adaptive configuration-aware testing techniques.  It leverages research from combinatorial interaction testing for sampling, and work in satisfiability solving to handle complex dependencies.  Specifically, it creates new algorithmic techniques to sample test configurations, creates models for cost-based sampling in time-constrained or risk-based environments, and explores several domain specific customizations. The impact of this work is that it explores a new avenue of research for software testers that focuses on the CDL, while providing theoretical results of interest to a broader community.  It includes a tightly woven educational plan that involves both graduate and undergraduate students.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/21/2008</MinAmdLetterDate>
<MaxAmdLetterDate>02/03/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0747009</AwardID>
<Investigator>
<FirstName>Myra</FirstName>
<LastName>Cohen</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Myra B Cohen</PI_FULL_NAME>
<EmailAddress>mcohen@iastate.edu</EmailAddress>
<PI_PHON>5152948305</PI_PHON>
<NSF_ID>000124813</NSF_ID>
<StartDate>02/21/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Nebraska-Lincoln</Name>
<CityName>Lincoln</CityName>
<ZipCode>685031435</ZipCode>
<PhoneNumber>4024723171</PhoneNumber>
<StreetAddress>151 Prem S. Paul Research Center</StreetAddress>
<StreetAddress2><![CDATA[2200 Vine St]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Nebraska</StateName>
<StateCode>NE</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NE01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>555456995</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BOARD OF REGENTS OF THE UNIVERSITY OF NEBRASKA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>068662618</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Nebraska-Lincoln]]></Name>
<CityName>Lincoln</CityName>
<StateCode>NE</StateCode>
<ZipCode>685031435</ZipCode>
<StreetAddress><![CDATA[151 Prem S. Paul Research Center]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Nebraska</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NE01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~79505</FUND_OBLG>
<FUND_OBLG>2009~79083</FUND_OBLG>
<FUND_OBLG>2010~79661</FUND_OBLG>
<FUND_OBLG>2011~80793</FUND_OBLG>
<FUND_OBLG>2012~80958</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Many software systems today are customizable, providing a flexible environment for the end-user.&nbsp; Features such as opening a new browser window within a tab, or blocking pop-up windows, can be added or removed at will.&nbsp; There are hundreds or thousands of options in some software systems, and every user can create their own custom program version.&nbsp; However, this also means that some faults may go undiscovered, since research has shown that different combinations of options, will&nbsp; <span>exercise</span> different program code, and potentially expose different faults.</p> <p>The intellectual merit of this project lies in the development of a set of techniques to sample configurable systems efficiently and effectively for testing. The first set of key results were new algorithms and an open source tool, <span><span><span><span>CASA</span></span></span></span>, for generating samples that are cognizant of dependencies between features.&nbsp; Follow on work, refined testing in the presence of these dependencies including an iterative technique (FDA-CIT), that finds previously unknown dependencies during testing, and then refines and iterates with the new model. Second, new techniques were developed to select the order with which to test specific configurations (based either on the cost of testing, or on improved fault detection).&nbsp; The new orderings are able to find faults at a faster rate than other orders (such as random), which means that less time is spent testing before bugs are found and fixed.&nbsp; Third, specific domains of configurable systems were addressed, with the largest focus on software product lines (families of related software systems). Software product lines have models (called feature models) that define the set of possible products and detail both the common and variable features of the system. By judiciously using information in the feature model it is possible to improve testing and reduce the time taken to do so.</p> <p>Finally, in this project we have evaluated several large configurable systems and their failure history and have discovered that failures tend to be localized within a small set of features. We call this feature-locality and have leveraged this notion to develop algorithms to automatically re-configure and avoid failures by changing which features we select. This will allow systems to continue operating after a failure is seen.&nbsp; Using the locality phenomenon allows us to guard against future failures over time.</p> <p>As part of our outreach for this project, we have developed a public web portal (<span><span><span><span>http</span></span></span></span>://<span><span><span><span>cse</span></span></span></span>.<span><span><span><span>unl</span></span></span></span>.<span><span><span><span>edu</span></span></span></span>/<span><span><span><span>~citporal</span></span></span></span>) to provide information and tools for configuration-aware testing. This portal provides information on the sampling technique, combinatorial interaction testing that we utilize. It contains a history of combinatorial interaction testing, several tutorials, and links to tools that we have developed during the course of the project.</p> <p>With respect to broader impacts and educational training, both graduate students and undergraduate students (several from underrepresented groups) were trained on this grant; the web portal was developed primarily by undergraduates. Tools and techniques developed in this grant were also used in the classroom at the <span><span>principal investigator's </span></span>institution.&nbsp; In addition, the PI gave lectures and tutorials and participated in a summer school on software testing, lecturing on results of this project. &nbsp; The open source tool, <span><span><span><span>CASA</span></span></span></span>,&nbsp; has been used by other researchers to further their own research.&nbsp; Finall...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Many software systems today are customizable, providing a flexible environment for the end-user.  Features such as opening a new browser window within a tab, or blocking pop-up windows, can be added or removed at will.  There are hundreds or thousands of options in some software systems, and every user can create their own custom program version.  However, this also means that some faults may go undiscovered, since research has shown that different combinations of options, will  exercise different program code, and potentially expose different faults.  The intellectual merit of this project lies in the development of a set of techniques to sample configurable systems efficiently and effectively for testing. The first set of key results were new algorithms and an open source tool, CASA, for generating samples that are cognizant of dependencies between features.  Follow on work, refined testing in the presence of these dependencies including an iterative technique (FDA-CIT), that finds previously unknown dependencies during testing, and then refines and iterates with the new model. Second, new techniques were developed to select the order with which to test specific configurations (based either on the cost of testing, or on improved fault detection).  The new orderings are able to find faults at a faster rate than other orders (such as random), which means that less time is spent testing before bugs are found and fixed.  Third, specific domains of configurable systems were addressed, with the largest focus on software product lines (families of related software systems). Software product lines have models (called feature models) that define the set of possible products and detail both the common and variable features of the system. By judiciously using information in the feature model it is possible to improve testing and reduce the time taken to do so.  Finally, in this project we have evaluated several large configurable systems and their failure history and have discovered that failures tend to be localized within a small set of features. We call this feature-locality and have leveraged this notion to develop algorithms to automatically re-configure and avoid failures by changing which features we select. This will allow systems to continue operating after a failure is seen.  Using the locality phenomenon allows us to guard against future failures over time.  As part of our outreach for this project, we have developed a public web portal (http://cse.unl.edu/~citporal) to provide information and tools for configuration-aware testing. This portal provides information on the sampling technique, combinatorial interaction testing that we utilize. It contains a history of combinatorial interaction testing, several tutorials, and links to tools that we have developed during the course of the project.  With respect to broader impacts and educational training, both graduate students and undergraduate students (several from underrepresented groups) were trained on this grant; the web portal was developed primarily by undergraduates. Tools and techniques developed in this grant were also used in the classroom at the principal investigator's institution.  In addition, the PI gave lectures and tutorials and participated in a summer school on software testing, lecturing on results of this project.   The open source tool, CASA,  has been used by other researchers to further their own research.  Finally, a mathematical structure called a covering array is the underlying object that we use  for our configuration-aware sampling. The PI has presented her research results at discrete mathematics conferences, which has provided  cross-breeding of ideas between the two communities.                   Last Modified: 07/10/2015       Submitted by: Myra B Cohen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
