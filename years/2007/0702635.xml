<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Modular Static Checking of Software Design Intent Using Permissions</AwardTitle>
<AwardEffectiveDate>10/01/2007</AwardEffectiveDate>
<AwardExpirationDate>09/30/2011</AwardExpirationDate>
<AwardTotalIntnAmount>201427.00</AwardTotalIntnAmount>
<AwardAmount>201427</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCF-0702635&lt;br/&gt;TITLE Modular Static Checking of Software Design Intent Using Permissions PI John Boyland&lt;br/&gt;&lt;br/&gt;Modularity is the key technique for controlling the complexity of large software projects.  Modules often have requirements on how they communicate and collaborate with other modules.  This work extends what can be expressed and checked in a modular way.&lt;br/&gt;&lt;br/&gt;Annotations of design intent about properties such as aliasing, effects and locking are given a strong semantic foundation using the concept of ``permissions.'' Annotations avoid both the need of a type system to have a single decidable semantics, and the excessive detail of full specification. Rather, a single (in principle undecidable) semantic system can be checked using a variety of different algorithms ranging from syntax-directed analysis to theorem proving.&lt;br/&gt;&lt;br/&gt;This work has the following objectives: (1) show soundness of a full system of permissions; (2) give a semantics for a wide-range of design-intent annotations; (3) implement permissions checkers; and (4) evaluate their usefulness on large commercial and open-source software.&lt;br/&gt;&lt;br/&gt;This research uses the techniques of logics, type systems and program analysis.  The investigators use an existing infrastructure integrated with an open-source environment (``Eclipse'').  It is the intent to make the resulting analyses available in open-source and/or commercial products.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/19/2007</MinAmdLetterDate>
<MaxAmdLetterDate>09/19/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0702635</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Boyland</LastName>
<EmailAddress>boyland@uwm.edu</EmailAddress>
<StartDate>09/19/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Milwaukee</Name>
<CityName>Milwaukee</CityName>
<ZipCode>532010340</ZipCode>
<PhoneNumber>4142294853</PhoneNumber>
<StreetAddress>P O BOX 340</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
