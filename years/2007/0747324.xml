<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Understanding and Exploring Performance-Correctness Explicitly Decoupled Architecture</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2008</AwardEffectiveDate>
<AwardExpirationDate>05/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>350000.00</AwardTotalIntnAmount>
<AwardAmount>393350</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hong Jiang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>As processor microarchitecture has evolved over the past 30 years, both the complexity of the design and the number of transistors used in its realization have escalated.  This complexity makes guaranteeing correct operation under all corner cases (logical as well as electrical) an ever more challenging task. This, in turn, translates in to higher and higher practical barriers for microarchitectural innovation for performance optimization as correctness is an overriding consideration. The goal of this CAREER proposal is to explore a new design model called Performance-correctness Explicitly-decoupled Architecture. From ground up, an explicitly-decoupled architecture is designed such that performance optimization circuitry is an independent entity separate from the circuitry guaranteeing functionality and correctness. This explicit separation allows performance optimization to be truly considered in a common-case-only manner, allowing the use of probabilistic techniques considered impractical or even incorrect in a conventional monolithic microarchitecture. This project seeks to develop insights to better understand this design model and develop complexity-effective microarchitectural and software mechanisms for performance optimization.</AbstractNarration>
<MinAmdLetterDate>01/25/2008</MinAmdLetterDate>
<MaxAmdLetterDate>05/09/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0747324</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Huang</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael C Huang</PI_FULL_NAME>
<EmailAddress>michael.huang@rochester.edu</EmailAddress>
<PI_PHON>5852752111</PI_PHON>
<NSF_ID>000300067</NSF_ID>
<StartDate>01/25/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Rochester</Name>
<CityName>Rochester</CityName>
<ZipCode>146270140</ZipCode>
<PhoneNumber>5852754031</PhoneNumber>
<StreetAddress>518 HYLAN, RC BOX 270140</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY25</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041294109</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ROCHESTER</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041294109</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Rochester]]></Name>
<CityName>Rochester</CityName>
<StateCode>NY</StateCode>
<ZipCode>146270140</ZipCode>
<StreetAddress><![CDATA[518 HYLAN, RC BOX 270140]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~82000</FUND_OBLG>
<FUND_OBLG>2009~85900</FUND_OBLG>
<FUND_OBLG>2010~85450</FUND_OBLG>
<FUND_OBLG>2011~70000</FUND_OBLG>
<FUND_OBLG>2012~70000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Computation has long been a central technology for the modern society. Our reliance on it seems to only increase as computers become more and more powerful. However, in a recent industry reflection point, we have seen much slower improvement of the performance of a single processor core. Instead, the performance gain is largely in the form of more and more cores in a single chip. While in theory, all programs can be written to take advantage of many cores available in a single chip, it is not as easy in practice &ndash; efficient parallel programming has been a real challenge for the past 50 years or more.</p> <p>&nbsp;</p> <p>The major goal of this CAREER project is to understand a special single-thread performance improvement technique, which we call decoupled architecture.&nbsp;The architecture allows performance improvement (via look-ahead) to be separated from the correctness guarantee in executing the program, permitting efficient techniques for deep look-ahead. We seek to develop a whole host of techniques to significantly increase the look-ahead effectiveness. The reason we are pursuing this technique is that the main challenge of improving performance is not the lack of ideas, but that most ideas are simple in concept but require extraordinary efforts to ensure their correctness in the unlikely (but possible) scenarios that we call corner cases. Corner case correctness requirement is absolute. After all, few real-world problems allow running a program a bit faster at the expense of possibly getting things wrong &ndash; and never knowing exactly when it does go wrong. The gist of our technique is simple, if we only use the fast-but-possibly-wrong execution as a source of hint to smooth things out in a real execution, we don&rsquo;t have to worry about corner cases. On the hand, if we have a semi-oracle custom built for a particular program telling us what the future of the execution is like, we get far more bang for buck compared to using big, expensive hardware to predict future in a generic way as the state of the art does.</p> <p>&nbsp;</p> <p>Throughout this project, we tried many different little and not-so-little tricks, accumulating good ideas and learning lessons from those ideas that don&rsquo;t pan out as hoped. In the end, we have a prototype system that can <em>automatically</em> improve a program&rsquo;s execution significantly (up to several times faster). Moreover, we have also accumulated a large number of ideas that we believe to be better guesses than what we&rsquo;ve tried in the project. No less important than the techniques we developed (and those are all documented and published in computer architecture literature) is the training of PhD students (two students theses are on this topic) both working in industry team now applying both the technical and methodological lessons learned from their research. These are future leaders that will help keep our industry the best in the world.</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/30/2014<br>      Modified by: Michael&nbsp;C&nbsp;Huang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Computation has long been a central technology for the modern society. Our reliance on it seems to only increase as computers become more and more powerful. However, in a recent industry reflection point, we have seen much slower improvement of the performance of a single processor core. Instead, the performance gain is largely in the form of more and more cores in a single chip. While in theory, all programs can be written to take advantage of many cores available in a single chip, it is not as easy in practice &ndash; efficient parallel programming has been a real challenge for the past 50 years or more.     The major goal of this CAREER project is to understand a special single-thread performance improvement technique, which we call decoupled architecture. The architecture allows performance improvement (via look-ahead) to be separated from the correctness guarantee in executing the program, permitting efficient techniques for deep look-ahead. We seek to develop a whole host of techniques to significantly increase the look-ahead effectiveness. The reason we are pursuing this technique is that the main challenge of improving performance is not the lack of ideas, but that most ideas are simple in concept but require extraordinary efforts to ensure their correctness in the unlikely (but possible) scenarios that we call corner cases. Corner case correctness requirement is absolute. After all, few real-world problems allow running a program a bit faster at the expense of possibly getting things wrong &ndash; and never knowing exactly when it does go wrong. The gist of our technique is simple, if we only use the fast-but-possibly-wrong execution as a source of hint to smooth things out in a real execution, we donÆt have to worry about corner cases. On the hand, if we have a semi-oracle custom built for a particular program telling us what the future of the execution is like, we get far more bang for buck compared to using big, expensive hardware to predict future in a generic way as the state of the art does.     Throughout this project, we tried many different little and not-so-little tricks, accumulating good ideas and learning lessons from those ideas that donÆt pan out as hoped. In the end, we have a prototype system that can automatically improve a programÆs execution significantly (up to several times faster). Moreover, we have also accumulated a large number of ideas that we believe to be better guesses than what weÆve tried in the project. No less important than the techniques we developed (and those are all documented and published in computer architecture literature) is the training of PhD students (two students theses are on this topic) both working in industry team now applying both the technical and methodological lessons learned from their research. These are future leaders that will help keep our industry the best in the world.          Last Modified: 07/30/2014       Submitted by: Michael C Huang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
