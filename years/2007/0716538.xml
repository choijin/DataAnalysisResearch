<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CT-ISG: Alternate representation of NIDS/NIPS signatures for fast matching</AwardTitle>
<AwardEffectiveDate>07/15/2007</AwardEffectiveDate>
<AwardExpirationDate>06/30/2012</AwardExpirationDate>
<AwardTotalIntnAmount>350000.00</AwardTotalIntnAmount>
<AwardAmount>350000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Proposal: 0715358&lt;br/&gt;Cristina Estan&lt;br/&gt;University of Wisconsin&lt;br/&gt;CT-ISG: Alternate Representation of NIDS/NIPS signatures for fast matching&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Network intrusion prevention systems (IPSes) play an important role in&lt;br/&gt;protecting computers against attacks originating from the&lt;br/&gt;network. Signature matching is a performance-critical operation that&lt;br/&gt;each IPS must perform: after storing a reassembled TCP-level byte&lt;br/&gt;stream or a field of a higher level protocol in a buffer, the IPS&lt;br/&gt;needs to decide whether it matches any of the signatures that describe&lt;br/&gt;known attacks. This project investigates methods for representing&lt;br/&gt;signatures that allow fast matching, require little memory, and can&lt;br/&gt;support complex signatures expressed as regular expressions.&lt;br/&gt;&lt;br/&gt;Currently used representations, such as deterministic finite-state&lt;br/&gt;automata (DFAs) and non-deterministic finite-state automata (NFAs),&lt;br/&gt;have severe drawbacks. In general, DFAs enable fast matching but are&lt;br/&gt;space inefficient and NFAs are concise but are slow to match&lt;br/&gt;against. Solutions based on multiple DFAs have intermediary matching&lt;br/&gt;speeds and memory requirements. One of the core reasons why such&lt;br/&gt;solutions provide unfavorable speed versus memory tradeoffs is the&lt;br/&gt;state-space explosion problem.&lt;br/&gt;&lt;br/&gt;This project focuses on a novel signature representation that&lt;br/&gt;neutralizes statespace explosion: extended finite automata&lt;br/&gt;(XFAs). XFAs extend DFAs with a few bytes of "scratch memory" used to&lt;br/&gt;store bits which record auxiliary information during the matching, or&lt;br/&gt;counters which record progress. When an accepting state is reached,&lt;br/&gt;the scratch memory is checked and a match is declared only if it holds&lt;br/&gt;suitable values. Preliminary results on signature sets from Snort and&lt;br/&gt;Cisco IPS show that compared to solutions using multiple DFAs, XFAs&lt;br/&gt;can be 10 times smaller and at the same time 5 times faster in&lt;br/&gt;software.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/25/2007</MinAmdLetterDate>
<MaxAmdLetterDate>08/14/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0716538</AwardID>
<Investigator>
<FirstName>Somesh</FirstName>
<LastName>Jha</LastName>
<EmailAddress>jha@cs.wisc.edu</EmailAddress>
<StartDate>07/25/2007</StartDate>
<EndDate>08/14/2009</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Somesh</FirstName>
<LastName>Jha</LastName>
<EmailAddress>jha@cs.wisc.edu</EmailAddress>
<StartDate>08/14/2009</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Cristian</FirstName>
<LastName>Estan</LastName>
<EmailAddress>estan@cs.wisc.edu</EmailAddress>
<StartDate>07/25/2007</StartDate>
<EndDate>08/14/2009</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7371</Code>
<Text>CYBER TRUST</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
