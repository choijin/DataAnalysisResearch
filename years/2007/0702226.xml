<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Delivering on the Promises of Software Transactions for Programming Languages</AwardTitle>
<AwardEffectiveDate>07/01/2007</AwardEffectiveDate>
<AwardExpirationDate>12/31/2011</AwardExpirationDate>
<AwardAmount>381000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>John Reppy</SignBlockName>
</ProgramOfficer>
<AbstractNarration>0702226&lt;br/&gt;Dan Grossman&lt;br/&gt;University of Washington&lt;br/&gt;&lt;br/&gt;Delivering on the Promises of Software Transactions for Programming Languages&lt;br/&gt;&lt;br/&gt;This research focuses on how to integrate software transactions into the definition and implementation of modern programming languages.&lt;br/&gt;With small-scale parallel computers (also known as multicore architectures) becoming the norm, there is an urgent need for programming languages to provide programmers convenient mechanisms for exploiting parallelism.  Software transactions are one such mechanism because they make it easier to synchronize computations executing in parallel.  While they hold great promise, important questions of semantics and interaction with language-implementation technology have not been considered with sufficient precision.  This research investigates the semantic questions via formal operational semantics, attacking questions regarding weak atomicity, open nesting, and interaction with code written in other languages.  For implementation questions, a variety of static and dynamic optimizations are considered for identifying data that is not used within a software transaction or that is used by only one thread of computation at a time.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/29/2007</MinAmdLetterDate>
<MaxAmdLetterDate>12/19/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0702226</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Grossman</LastName>
<EmailAddress>djg@cs.washington.edu</EmailAddress>
<StartDate>05/29/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9229</Code>
<Text>RES IN UNDERGRAD INST-RESEARCH</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
