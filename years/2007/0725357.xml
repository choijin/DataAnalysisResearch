<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:  Applying Hardware-Inspired Methods for Multi-Core Software Design</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2007</AwardEffectiveDate>
<AwardExpirationDate>09/30/2010</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>462494</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>0725350&lt;br/&gt;Collaborative Research: Applying Hardware-Inspired Methods for Multi- Core Software Design Brian C. Demsky University of California, Irvine&lt;br/&gt;&lt;br/&gt;0725357&lt;br/&gt;Collaborative Research: Applying Hardware-Inspired Methods for Multi- Core Software Design Michael B. Taylor University of California, San Diego&lt;br/&gt;&lt;br/&gt;In the past, improvements in microprocessor capabilities were expressed largely through a combination of clock frequency increases and microarchitectural enhancements that were invisible to the typical developer. More recently, due to power and microarchitectural scalability issues, microprocessor designs have diverged from this path and have begun to focus on exposing improved semiconductor process capabilities through the multi-core abstraction, which integrates multiple independent processors into a single chip. The deployment of such explicitly-parallel multi-core processors has deep implications on the future of software systems. While parallel software has been largely unnecessary in desktop systems, it will become essential if we are to expect continued increases in software functionality and programmer productivity like those that society has enjoyed over the last 35 years.&lt;br/&gt;&lt;br/&gt;This research investigates a new design methodology for developing the parallel software systems that are necessary to take advantage of multi-core processors. This methodology leverages concepts from hardware chip-design methodologies, which scale to millions of communicating parallel entities.  This new design process enables the software developer to create flexible system designs that easily accommodate refinement of how the computation is realized. It does this by separating the functional design of the software system from the specification of how to organize the computation.  To validate this new design methodology, the research project investigates the construction of synthesis and profiling tools that can be used to develop and refine these functional and organizational specifications. These specifications are in turn used to create an executable that is optimized for the specific multi-core microprocessor.</AbstractNarration>
<MinAmdLetterDate>08/06/2007</MinAmdLetterDate>
<MaxAmdLetterDate>01/27/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0725357</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Taylor</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael B Taylor</PI_FULL_NAME>
<EmailAddress>profmbt@cs.washington.edu</EmailAddress>
<PI_PHON/>
<NSF_ID>000069038</NSF_ID>
<StartDate>08/06/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930934</ZipCode>
<StreetAddress><![CDATA[Office of Contract &amp; Grant A]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7652</Code>
<Text>SCIENCE OF DESIGN</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~446494</FUND_OBLG>
<FUND_OBLG>2009~8000</FUND_OBLG>
<FUND_OBLG>2010~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>As multicore processors enter mainstream computing, program parallelization is getting more attention. Although many tools have been proposed to help programmers parallelize their code, one important question has been largely overlooked: &rdquo;which parts of the program should I spend time parallelizing?&rdquo;</p> <p><br />Profilers such as gprof provide a solution to a similar problem in the domain of serial optimization. A typical profiler produces a list of regions ordered by their work coverage (we call it a &rdquo;plan&rdquo;) as a region with larger work is likely to bring higher benefit from optimization, guiding to more effective optimization activities.</p> <p><br />In this work, we created a prototype for Kremlin, a profiling tool for par- allelization. Kremlin adopts the time-tested gprof usage model. Whereas gprof uses the work coverage of a region as a metric, Kremlin uses the program speedup as a metric. According to Moore&rsquo;s law, we can calculate the program speedup upon a region parallelization if region-localized parallelism and work coverage of the region is known. Region-localized parallelism represents the parallelism available in a region excluding the parallelism originated from its subregions.</p> <p>&nbsp;</p> <p>The major challenge in the design of Kremlin is the lack of a technique to localize parallelism to a region. Conventional critical path analysis (CPA)<br />termine the overall parallelism in a program, but it cannot localize the parallelism to a specific region. Kremlin overcomes this prob- lem by employing a new technique called hierarchical critical path analysis (HCPA). Based on the region hierarchy of a program and CPA results for each region, HCPA extracts region-localized parallelism.</p> <p><br />From our preliminary evaluation with NAS Parallel Bench (NPB), a parallelization guided by Kremlin achieves a com- parable speedup to manual parallelization with a smaller number of parallelized regions, effectively reducing a programmer&rsquo;s efforts without sacrificing the quality of parallelization. A user study also indicates parallelization can be more effective with Kremlin.</p><br> <p>            Last Modified: 01/12/2011<br>      Modified by: Michael&nbsp;B&nbsp;Taylor</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2011/0725357/0725357_10023319_1294820698745_overview--rgov-214x142.jpg" original="/por/images/Reports/POR/2011/0725357/0725357_10023319_1294820698745_overview--rgov-800width.jpg" title="Kremlin Design"><img src="/por/images/Reports/POR/2011/0725357/0725357_10023319_1294820698745_overview--rgov-66x44.jpg" alt="Kremlin Design"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The internal workings of the Kremlin tool.</div> <div class="imageCredit">UCSD</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Michael&nbsp;B&nbsp;Taylor</div> <div class="imageTitle">Kremlin Design</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ As multicore processors enter mainstream computing, program parallelization is getting more attention. Although many tools have been proposed to help programmers parallelize their code, one important question has been largely overlooked: "which parts of the program should I spend time parallelizing?"   Profilers such as gprof provide a solution to a similar problem in the domain of serial optimization. A typical profiler produces a list of regions ordered by their work coverage (we call it a "plan") as a region with larger work is likely to bring higher benefit from optimization, guiding to more effective optimization activities.   In this work, we created a prototype for Kremlin, a profiling tool for par- allelization. Kremlin adopts the time-tested gprof usage model. Whereas gprof uses the work coverage of a region as a metric, Kremlin uses the program speedup as a metric. According to MooreÆs law, we can calculate the program speedup upon a region parallelization if region-localized parallelism and work coverage of the region is known. Region-localized parallelism represents the parallelism available in a region excluding the parallelism originated from its subregions.     The major challenge in the design of Kremlin is the lack of a technique to localize parallelism to a region. Conventional critical path analysis (CPA) termine the overall parallelism in a program, but it cannot localize the parallelism to a specific region. Kremlin overcomes this prob- lem by employing a new technique called hierarchical critical path analysis (HCPA). Based on the region hierarchy of a program and CPA results for each region, HCPA extracts region-localized parallelism.   From our preliminary evaluation with NAS Parallel Bench (NPB), a parallelization guided by Kremlin achieves a com- parable speedup to manual parallelization with a smaller number of parallelized regions, effectively reducing a programmerÆs efforts without sacrificing the quality of parallelization. A user study also indicates parallelization can be more effective with Kremlin.       Last Modified: 01/12/2011       Submitted by: Michael B Taylor]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
