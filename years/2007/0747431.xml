<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Multi-stage Programming for Object-Oriented Languages</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/15/2008</AwardEffectiveDate>
<AwardExpirationDate>11/30/2010</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>173842</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Proposal Number  0747431&lt;br/&gt;TITLE  CAREER: Multi-stage Programming for Object-Oriented Languages &lt;br/&gt;&lt;br/&gt;PI     Walid Taha, Rice University&lt;br/&gt;&lt;br/&gt;Over the past decade, multi-stage programming (MSP) has emerged as a unifying approach that captures the disciplined essence program generation. Early work on MSP focused on purely functional languages. The goal of this proposal is to put what we know about MSP to work in the context of mainstream languages such as Java and C#. This will be achieved by means of carefully designed, minimal extensions that provide an expressive, statically checked mechanism for effectively eliminating the interpretive overhead.&lt;br/&gt;&lt;br/&gt;The project will design an object-oriented language that provides statically checked support for the writing of program generators. The language, called The Java Program Mint (Mint) will support: &lt;br/&gt;&lt;br/&gt;   1. Staging constructs that are statically checked before expansion/generation,&lt;br/&gt;&lt;br/&gt;   2. Indexed types, to enable further optimizations that are particularly synergistic with staging, and&lt;br/&gt;&lt;br/&gt;   3. Disciplined, statically typed compile-time computation. &lt;br/&gt;&lt;br/&gt;The design of Mint will be evaluated by establishing formal safety and expressivity results, and the implementation will be evaluated by building demonstration applications. The novel features of Mint will have the most impact on applications that use reflection and that constitute domain-specific language (DSL) extensions, such as serializers, JavaBeans customization facilities, and  synchronization libraries.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/15/2008</MinAmdLetterDate>
<MaxAmdLetterDate>03/08/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0747431</AwardID>
<Investigator>
<FirstName>Walid</FirstName>
<LastName>Taha</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Walid M Taha</PI_FULL_NAME>
<EmailAddress>maroneal@gmail.com</EmailAddress>
<PI_PHON>8325285948</PI_PHON>
<NSF_ID>000434647</NSF_ID>
<StartDate>02/15/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>William Marsh Rice University</Name>
<CityName>Houston</CityName>
<ZipCode>770051827</ZipCode>
<PhoneNumber>7133484820</PhoneNumber>
<StreetAddress>6100 MAIN ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>050299031</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>WILLIAM MARSH RICE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>050299031</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[William Marsh Rice University]]></Name>
<CityName>Houston</CityName>
<StateCode>TX</StateCode>
<ZipCode>770051827</ZipCode>
<StreetAddress><![CDATA[6100 MAIN ST]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7299</Code>
<Text>Catalyzing New Intl Collab</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>5944</Code>
<Text>EGYPT (COOP SCIENCE)</Text>
</ProgramReference>
<ProgramReference>
<Code>5976</Code>
<Text>AFRICA, NEAR EAST, &amp; SO ASIA</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~80000</FUND_OBLG>
<FUND_OBLG>2009~87918</FUND_OBLG>
<FUND_OBLG>2010~154076</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The project witnessed significant activity in understanding type systems<br />for imperative multi-stage languages and explored a range of options<br />that can be compatible with the Java language. &nbsp;The key educational<br />activity has been the development of an online tutorial that has been<br />posted on the Java Mint website. &nbsp;This tutorial was recently presented</p> <p>at a research conference.</p> <p>&nbsp;</p> <p>Intellectual Merit</p> <p>The main findings of our research year were published in a PDLI<br />paper that was presented in Toronto in 2010. &nbsp;In what follows<br />is an excerpt abstract of this paper:<br />&nbsp; In the purely functional setting, it has been shown how<br />&nbsp; Multi-stage Programming (MSP) can be used to reduce the overhead of<br />&nbsp; abstractions, allowing clean, maintainable code without paying<br />&nbsp; performance penalties. Unfortunately, MSP is difficult to combine<br />&nbsp; with imperative features, which are prevalent in mainstream<br />&nbsp; languages. The central difficulty is scope extrusion, wherein free<br />&nbsp; variables can inadvertently be moved outside the scopes of their<br />&nbsp; binders. This paper proposes a new approach to combining MSP with<br />&nbsp; imperative features that occupies a ``sweet spot'' in the design<br />&nbsp; space in terms of how well useful MSP applications can be expressed<br />&nbsp; and how easy it is for programmers to understand. The key insight is<br />&nbsp; that escapes (or ``anti-quotes'') must be "weakly separable"<br />&nbsp; from the rest of the code, i.e. the computational effects occurring<br />&nbsp; inside an escape that are visible outside the escape are guaranteed<br />&nbsp; to not contain code. &nbsp;To demonstrate the feasibility of this<br />&nbsp; approach, we formalize a type system based on Lightweight Java which<br />&nbsp; we prove sound, and we also provide an implementation, called Mint,<br />&nbsp; to validate both the expressivity of the type system and the effect<br />&nbsp; of staging on the performance of Java programs.</p> <p>Secondary contributions came in the form of advances in hardware<br />description language through the use of staging. &nbsp;In particular, work<br />in this year focused on showing that a wide range of static analysis<br />techniques can be developed to enable the determination of hardware<br />resource use on staged hardware descriptions.</p> <p>Our contributions to hardware description languages can be viewed as<br />extending to the fields of electrical and electronics engineering.</p> <p>Broader Impact</p> <p>The project has trained two PhD students (Jun Inoue and Mathias<br />Ricken), partially contributed to the training of one post-doctoral<br />student (Edwin Westbrook), and to involving one undergraduate student<br />(Yilong Yao, ECE) in research activities.</p> <p>Mathias Ricken and Edwin Westbrook gained significant<br />experience with the internals of the Java compiler as well as<br />managing large research projects that require modifying the&nbsp;<br />compiler.</p> <p>Jun Inoue and Edwin Westbrook developed significant<br />expertise in the design of type systems in general, and in particular,<br />type systems for multi-stage languages. &nbsp;These expertise include<br />forming meaningful typing rules and then developing the proof stratgy<br />need to verify their soundness.</p> <p>The main outreach activity was creating a blog for Java<br />Mint, and continually posting tutorial materials on that web site.</p><br> <p>            Last Modified: 06/15/2011<br>      Modified by: Walid&nbsp;M&nbsp;Taha</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The project witnessed significant activity in understanding type systems for imperative multi-stage languages and explored a range of options that can be compatible with the Java language.  The key educational activity has been the development of an online tutorial that has been posted on the Java Mint website.  This tutorial was recently presented  at a research conference.     Intellectual Merit  The main findings of our research year were published in a PDLI paper that was presented in Toronto in 2010.  In what follows is an excerpt abstract of this paper:   In the purely functional setting, it has been shown how   Multi-stage Programming (MSP) can be used to reduce the overhead of   abstractions, allowing clean, maintainable code without paying   performance penalties. Unfortunately, MSP is difficult to combine   with imperative features, which are prevalent in mainstream   languages. The central difficulty is scope extrusion, wherein free   variables can inadvertently be moved outside the scopes of their   binders. This paper proposes a new approach to combining MSP with   imperative features that occupies a ``sweet spot'' in the design   space in terms of how well useful MSP applications can be expressed   and how easy it is for programmers to understand. The key insight is   that escapes (or ``anti-quotes'') must be "weakly separable"   from the rest of the code, i.e. the computational effects occurring   inside an escape that are visible outside the escape are guaranteed   to not contain code.  To demonstrate the feasibility of this   approach, we formalize a type system based on Lightweight Java which   we prove sound, and we also provide an implementation, called Mint,   to validate both the expressivity of the type system and the effect   of staging on the performance of Java programs.  Secondary contributions came in the form of advances in hardware description language through the use of staging.  In particular, work in this year focused on showing that a wide range of static analysis techniques can be developed to enable the determination of hardware resource use on staged hardware descriptions.  Our contributions to hardware description languages can be viewed as extending to the fields of electrical and electronics engineering.  Broader Impact  The project has trained two PhD students (Jun Inoue and Mathias Ricken), partially contributed to the training of one post-doctoral student (Edwin Westbrook), and to involving one undergraduate student (Yilong Yao, ECE) in research activities.  Mathias Ricken and Edwin Westbrook gained significant experience with the internals of the Java compiler as well as managing large research projects that require modifying the  compiler.  Jun Inoue and Edwin Westbrook developed significant expertise in the design of type systems in general, and in particular, type systems for multi-stage languages.  These expertise include forming meaningful typing rules and then developing the proof stratgy need to verify their soundness.  The main outreach activity was creating a blog for Java Mint, and continually posting tutorial materials on that web site.       Last Modified: 06/15/2011       Submitted by: Walid M Taha]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
