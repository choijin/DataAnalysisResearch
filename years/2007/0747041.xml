<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:  The Automata Theoretic Method in Software Verification</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/15/2008</AwardEffectiveDate>
<AwardExpirationDate>05/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Proposal Number: 0747041&lt;br/&gt;&lt;br/&gt;TITLE: The Automata Theoretic Method in Software Verification&lt;br/&gt;PI: Madhusudan Parthasarathy&lt;br/&gt;Correct programs are hard to write. Tools that find errors automatically and reliably are essential to ensure engineering of correct software.  Automata theory has had a great impact in hardware verification, where it forms the basis of model-checking systems against temporal logics. This project leverages automata-theoretic methods to the field of software verification.  Automata theory provides several strikingly new mechanisms for verifying software, including handling of complex control flows of recursion and concurrency, and bridging logical specifications to verification algorithms.&lt;br/&gt;The project will develop these mechanisms and apply them to solve key problems in the following areas of software verification:&lt;br/&gt;- Developing temporal logics for specifying complex event sequence properties of recursive programs;&lt;br/&gt;- Checking atomicity violations in concurrent programs using automata-based monitoring; and&lt;br/&gt;- Verifying heap properties of programs manipulating dynamic data, using a novel automata based abstraction.&lt;br/&gt;In addition, two tools will be developed: one monitors concurrent programs for atomicity violations, and the second implements an abstraction framework to verify heap-intensive programs.  The techniques developed will pave innovative pathways into the fundamental problems of analyzing software. The techniques will have immediate impact on analysis tools built and used in the software industry, and significantly advance the landscape of software verification.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/10/2008</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0747041</AwardID>
<Investigator>
<FirstName>Madhusudan</FirstName>
<LastName>Parthasarathy</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Madhusudan Parthasarathy</PI_FULL_NAME>
<EmailAddress>madhu@cs.uiuc.edu</EmailAddress>
<PI_PHON>2172441323</PI_PHON>
<NSF_ID>000214557</NSF_ID>
<StartDate>06/10/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>Champaign</CityName>
<StateCode>IL</StateCode>
<ZipCode>618207406</ZipCode>
<StreetAddress><![CDATA[1901 South First Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~80000</FUND_OBLG>
<FUND_OBLG>2009~80000</FUND_OBLG>
<FUND_OBLG>2010~80000</FUND_OBLG>
<FUND_OBLG>2011~80000</FUND_OBLG>
<FUND_OBLG>2012~80000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project aimed at automating several aspects of software verification, which are yet to be automated, using automata-theoretic techniques. Automata are very restricted machines that give ways to express properties of structures using finite representations, and give algorithmic ways to manipulate the finite representations. Automata hence can be seen as algorithmically amenable ways to express logical properties of structures. Automata have very interesting and deep technical properties, including decidability of concepts expressible as automata as well as a solid theory of learning associated with them. The key proposal was to use these properties to automate problems in software verification.</p> <p>&nbsp;</p> <p><strong>Intellectual Merit:</strong></p> <p>The work addressed several applications of automata theory to software verification. First, we addressed the problem of abstracting software using automata-based models and subsequently verifying them. This led to a general way to build efficient model-checking algorithms using a very succinct declarative representation of the algorithm to compute on the automata-theoretic model, and led to a general model-checker for both sequential and concurrent programs, with recursion. Second, automata-theoretic methods were developed to monitor executions of concurrent programs, where complex properties such as atomicity can be efficiently monitored using an automaton giving bounded memory online algorithms for this problem. This investigation then led to ways to use the monitored run to predict new executions that could have bugs, and led to an entire research program, called predictive testing, where several techniques and tools (Penelope) were developed to find errors in concurrent programs based on properties of the interleaved execution they exhibited. Third, the research fundamentally addressed the problem of expressing properties of heap structures, such as lists, arrays, and trees, using automata and using automata as a way to decide properties of program manipulating data-structures. A powerful logic called Strand and a decision technique based on automata-theory emerged from this research, and to date, is one of the most powerful decidable logics for heaps. Several connections to automata, graphs of bounded tree-width, and tree automata representing properties of data-structures were developed, along with accompanying tools. The final phase of this research led to a more tractable (but incomplete) method for reasoning about heaps, called natural proofs, that overcame the extreme complexity of deciding these logics by using much simpler proofs that can be searched for more efficiently. This technique and tool (called Dryad) is the current state-of-the-art verification tool for automated analysis of heap-based programs. Finally, the research also developed learning techniques for program verification, both using automata as well as other logical techniques. In particular, we developed new classes of automata that can express properties of heaps expressible in Strand (the decidable logic) and developed learning algorithms for these automata that can be used to learn invariants from examples. Also, an entirely new learning model for synthesizing invariants was developed, called ICE, which in addition to positive and negative samples, uses implication counterexamples to guide the learner towards an invariant. This new learning model was shown to be robust for invariant synthesis, and several learning algorithms were developed, showing robustness through experiments. Invariant synthesis allows automating the expression of invariants in program verification, automating a phase that programmers currently find very hard, and is arguably a major bottleneck for the use of formal methods in practice.</p> <p><strong>Broader Impact:</strong></p> <p>Research and Technological:</p> <p>The techniques and tools developed in t...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project aimed at automating several aspects of software verification, which are yet to be automated, using automata-theoretic techniques. Automata are very restricted machines that give ways to express properties of structures using finite representations, and give algorithmic ways to manipulate the finite representations. Automata hence can be seen as algorithmically amenable ways to express logical properties of structures. Automata have very interesting and deep technical properties, including decidability of concepts expressible as automata as well as a solid theory of learning associated with them. The key proposal was to use these properties to automate problems in software verification.     Intellectual Merit:  The work addressed several applications of automata theory to software verification. First, we addressed the problem of abstracting software using automata-based models and subsequently verifying them. This led to a general way to build efficient model-checking algorithms using a very succinct declarative representation of the algorithm to compute on the automata-theoretic model, and led to a general model-checker for both sequential and concurrent programs, with recursion. Second, automata-theoretic methods were developed to monitor executions of concurrent programs, where complex properties such as atomicity can be efficiently monitored using an automaton giving bounded memory online algorithms for this problem. This investigation then led to ways to use the monitored run to predict new executions that could have bugs, and led to an entire research program, called predictive testing, where several techniques and tools (Penelope) were developed to find errors in concurrent programs based on properties of the interleaved execution they exhibited. Third, the research fundamentally addressed the problem of expressing properties of heap structures, such as lists, arrays, and trees, using automata and using automata as a way to decide properties of program manipulating data-structures. A powerful logic called Strand and a decision technique based on automata-theory emerged from this research, and to date, is one of the most powerful decidable logics for heaps. Several connections to automata, graphs of bounded tree-width, and tree automata representing properties of data-structures were developed, along with accompanying tools. The final phase of this research led to a more tractable (but incomplete) method for reasoning about heaps, called natural proofs, that overcame the extreme complexity of deciding these logics by using much simpler proofs that can be searched for more efficiently. This technique and tool (called Dryad) is the current state-of-the-art verification tool for automated analysis of heap-based programs. Finally, the research also developed learning techniques for program verification, both using automata as well as other logical techniques. In particular, we developed new classes of automata that can express properties of heaps expressible in Strand (the decidable logic) and developed learning algorithms for these automata that can be used to learn invariants from examples. Also, an entirely new learning model for synthesizing invariants was developed, called ICE, which in addition to positive and negative samples, uses implication counterexamples to guide the learner towards an invariant. This new learning model was shown to be robust for invariant synthesis, and several learning algorithms were developed, showing robustness through experiments. Invariant synthesis allows automating the expression of invariants in program verification, automating a phase that programmers currently find very hard, and is arguably a major bottleneck for the use of formal methods in practice.  Broader Impact:  Research and Technological:  The techniques and tools developed in this proposal are useful in both debugging as well as proving programs free of errors. In particular, the tools based on predictive analys...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
