<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>A High Throughput Massive I/O Storage Hierarchy for PETA-scale High-end Architectures</AwardTitle>
<AwardEffectiveDate>05/01/2007</AwardEffectiveDate>
<AwardExpirationDate>04/30/2010</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>311999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Modern high-end computer (HEC) architectures (comprised of tens-of-thousands of processors or more) have widened the performance gap between the computing power and the storage and I/O performance that can support and sustain such calculations. With the petascale computing (1015 floating point operations per second) just over the horizon, the gap will be even more pronounced. This research is aimed at addressing both the limited bandwidth and the performance of today's I/O storage systems. The main idea is to replace traditional rotary disks with a 'memory pool'  -  a massive grid of solid-state (flash) memories, and to introduce a new memory hierarchy model based on the improved access time and bandwidth of such grid. A memory pool embedded and distributed across the compute engine leverages the rapid progression of solid-state storage technology.&lt;br/&gt;&lt;br/&gt;The I/O-aware multithreaded program execution model takes full advantage of the tremendous bandwidth to the local memory pool, while tolerating the solid state storage access latency through proactive distributed pre-fetching and software-controlled memory caching. In particular, the responses to different patterns of solid-state storage communication requests (blocking and non-blocking, and of various block sizes), simulated solid-state storage module failures, extended shared memory responsiveness and management are examined. The effectiveness of the approach is observed through the most common set of third party I/O benchmarks.&lt;br/&gt;&lt;br/&gt;The intellectual merit of this research can be summarized as:&lt;br/&gt;1) Development of a novel I/O architecture model. for a class of  high-end petascale computing systems. &lt;br/&gt;2) Development of a corresponding RAS model&lt;br/&gt;3) An experimental study on the new I/O architecture and software model (in (1) and (2) above). &lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>04/17/2007</MinAmdLetterDate>
<MaxAmdLetterDate>04/17/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0702244</AwardID>
<Investigator>
<FirstName>Guang</FirstName>
<LastName>Gao</LastName>
<EmailAddress>ggao@udel.edu</EmailAddress>
<StartDate>04/17/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Delaware</Name>
<CityName>Newark</CityName>
<ZipCode>197160099</ZipCode>
<PhoneNumber>3028312136</PhoneNumber>
<StreetAddress>210 Hullihen Hall</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<StateCode>DE</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
