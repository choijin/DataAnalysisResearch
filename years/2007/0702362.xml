<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:  Modular Metaprogramming</AwardTitle>
<AwardEffectiveDate>07/01/2007</AwardEffectiveDate>
<AwardExpirationDate>06/30/2011</AwardExpirationDate>
<AwardTotalIntnAmount>340000.00</AwardTotalIntnAmount>
<AwardAmount>340000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Software developers rely on high-quality software libraries to mitigate the cost of building complex applications. However, many software libraries provide complex interfaces to make the library adaptable to application-specific needs. This complexity raises the cost of adoption and reduces the benefits of software reuse. Researchers discovered that libraries can be made more versatile and easier to use if the underlying programming language provides library authors with constructs for reasoning, during the compilation of the application, about program metadata and for customizing the library implementation based on this information. Current programming languages provide these features in an immature form and the state of the art in programming language theory does not yet reach this combination of features. The investigators are advancing the theory to bring type safety and modularity to this context and they are working closely with the C++ Standards Committee to transfer their results to industrial practice.&lt;br/&gt;&lt;br/&gt;The combination of language features needed to reason about metadata and customize libraries is called reflective metaprogramming. Previous research in this area provides type safety and modularity for metaprogramming but not reflective metaprogramming. The investigators are researching type safety for reflective metaprogramming through a careful integration of 1) a meta-language that provides computation over values and types and that provides reflection over all the program's metadata, 2) a facility for classifying types, and 3) a type system that provides hooks into the meta-language using dependent types. By developing a more reliable and expressive metaprogramming system, this research improves programmer productivity for both the developers and users of software libraries because many more bugs will be caught early in the development cycle by the modular type system.</AbstractNarration>
<MinAmdLetterDate>07/02/2007</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0702362</AwardID>
<Investigator>
<FirstName>Jeremy</FirstName>
<LastName>Siek</LastName>
<EmailAddress>jsiek@indiana.edu</EmailAddress>
<StartDate>07/02/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Boulder</Name>
<CityName>Boulder</CityName>
<ZipCode>803031058</ZipCode>
<PhoneNumber>3034926221</PhoneNumber>
<StreetAddress>3100 Marine Street, Room 481</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
