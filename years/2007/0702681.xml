<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Program Analysis for Concurrency</AwardTitle>
<AwardEffectiveDate>07/01/2007</AwardEffectiveDate>
<AwardExpirationDate>08/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>350000.00</AwardTotalIntnAmount>
<AwardAmount>350000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>0702681&lt;br/&gt;Program Analysis for Concurrency&lt;br/&gt;Alex Aiken&lt;br/&gt;&lt;br/&gt;A revolution is taking place in hardware, with commodity, parallel multi-core chips replacing the sequential single-core chips that have been the dominant hardware platform for decades.  Quad-core chips are now available, and chips with many times that number of cores are in the planning stages.  Clock speeds are not likely to increase quickly in the future, and thus future performance gains will come primarily from exploiting the concurrency available in multi-core architectures.&lt;br/&gt;&lt;br/&gt;However, it is well-understood that our software infrastructure is not ready for this revolution, because concurrent programming remains much more difficult than sequential programming.  In practice one of the biggest differences with sequential programming and a source of many serious problems is concurrency bugs.  Concurrent programs today are riddled with race conditions and deadlocks.  This project seeks to develop techniques that will answer the questions: Can realistic programs be automatically analyzed to accurately determine whether there are race conditions?  Can the same thing be done for deadlocks?  And can both problems be solved simultaneously, guaranteeing developers that their programs are free of these low-level concurrency errors?&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/08/2007</MinAmdLetterDate>
<MaxAmdLetterDate>05/08/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0702681</AwardID>
<Investigator>
<FirstName>Alexander</FirstName>
<LastName>Aiken</LastName>
<EmailAddress>aiken@cs.stanford.edu</EmailAddress>
<StartDate>05/08/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
