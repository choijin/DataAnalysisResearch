<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Parallelization using Inspector/Executor Strategies (PIES)</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/15/2008</AwardEffectiveDate>
<AwardExpirationDate>01/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>411891</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Irregular computations occur in many important science and engineering application domains such as solving partial differential equations over irregular grids, molecular dynamics simulations, and computations over sparse matrices. To address this problem, inspector/executor strategies have been developed where the inspector dynamically analyzes memory reference patterns and generates communication schedules and/or reorganizes computation and data, and the executor executes the irregular computation in parallel. Although inspector/executor strategies have been incorporated into many applications and libraries, these strategies are still hindered by two main problems: (1) Currently, no general framework exists for automating the process of incorporating inspector/executor strategies into programs despite the complexity and difficulty that by-hand synthesis entails. (2) The performance of irregular applications significantly lags that of regular applications ? and this gap is widening for current and next-generation high-end multi-core systems.&lt;br/&gt;This research involves developing a tool suite called PIES (Parallelization using Inspector/Executor Strategies) for the automatic incorporation of inspector/executor strategies into irregular applications. The PIES tool suite includes the Mapping Intermediate Representation (MapIR) for specifying irregular code and inspector/executor strategies, a program analysis tool capable of determining the legal application of various inspector/executor strategies, a code generator capable of automatically generating inspectors and executors, and performance models to guide the selection of inspector/executor strategies and their parameters. This research includes an outreach program for local high school students based on applying the PIES tool suite to molecular dynamics simulations. Use of the PIES tool suite reduces software development time by automating the incorporation of inspector/executor strategies into existing code and enables the development of new inspector/executor strategies.</AbstractNarration>
<MinAmdLetterDate>02/07/2008</MinAmdLetterDate>
<MaxAmdLetterDate>12/29/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0746693</AwardID>
<Investigator>
<FirstName>Michelle</FirstName>
<LastName>Strout</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michelle M Strout</PI_FULL_NAME>
<EmailAddress>mstrout@cs.arizona.edu</EmailAddress>
<PI_PHON>5206211602</PI_PHON>
<NSF_ID>000273488</NSF_ID>
<StartDate>02/07/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Colorado State University</Name>
<CityName>Fort Collins</CityName>
<ZipCode>805232002</ZipCode>
<PhoneNumber>9704916355</PhoneNumber>
<StreetAddress>601 S Howes St</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>785979618</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>COLORADO STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>948905492</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Colorado State University]]></Name>
<CityName>Fort Collins</CityName>
<StateCode>CO</StateCode>
<ZipCode>805232002</ZipCode>
<StreetAddress><![CDATA[601 S Howes St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4080</Code>
<Text>ADVANCED COMP RESEARCH PROGRAM</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~85412</FUND_OBLG>
<FUND_OBLG>2009~71431</FUND_OBLG>
<FUND_OBLG>2010~75143</FUND_OBLG>
<FUND_OBLG>2011~96700</FUND_OBLG>
<FUND_OBLG>2012~83205</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Irregular computations occur in many important science and engineering application domains such as solving partial differential equations over irregular grids, molecular dynamics simulations, and computations over sparse matrices. To address this problem, inspector/executor strategies have been developed where the inspector dynamically analyzes memory reference patterns and generates communication schedules and/or reorganizes computation and data, and the executor executes the irregular computation in parallel. Although inspector/executor strategies have been incorporated into many applications and libraries, these strategies are still hindered by two main problems: (1) &nbsp;Currently, no general framework exists for automating the process of incorporating inspector/executor strategies into programs despite the complexity and difficulty that by-hand synthesis entails. (2) The performance of irregular applications significantly lags that of regular applications -- and this gap is widening for current and next-generation high-end multi-core systems.</p> <p><br />The NSF CAREER supported PIES (Parallelization using Inspector/Executor Strategies) project led by Michelle Strout resulted in research methods for the &nbsp;incorporation of inspector/executor strategies into irregular applications. &nbsp;The project led to the development of the Sparse Polyhedral Framework including techniques to compose transformations with affine and uninterpreted function constraints, which are available in the IEGenLib open source C library. &nbsp;This work also supported further development, application, and generalization of full sparse tiling, which is a technique that improve data locality as well as exposing asynchronous parallelism in irregular applications. &nbsp;As part of the full sparse tiling work, the research group developed an efficient shared-memory, parallel graph partitioner called ParCubed.</p> <p><br />Going forward, the PIES project has led to the development of the loop chain programming abstraction; the incorporation of full sparse tiling as a transformation used by the OP2 library, which is used in airplane engine simulations; and to the incorporation of an inspector/executor transformations in the CHILL scripting transformation tool, which is capable of generating optimized GPU code. &nbsp;These new technologies make it easier to annotate existing scientific simulation codes with information and transformation strategies that enable performance portability. &nbsp;Leveraging improved performance made possible by new and different computer architectures leads to better simulation accuracy, which leads to more scientific breakthroughs using less money than experimental science alone.</p> <p><br />The PIES research project included an outreach program for local high school with the goal of introducing high school students to computer science in the context of chemistry. &nbsp;The Poudre High School in Fort Collins, Colorado does not provide computer science as part of their curriculum.</p> <p>Dr. Michelle Strout and her research group in the Computer Science department at&nbsp;Colorado State University collaborated with two high school chemistry&nbsp;teachers during the Summer of 2008 to increase the visibility of Computer Science &nbsp;at the high school level. &nbsp;The group constructed interactive, electronic worksheets using the Molecular Workbench software (also supported by&nbsp;NSF). &nbsp;These electronic worksheets included computer science concepts as well as chemistry concepts. &nbsp;The group also did surveys of the students' attitudes about computer science before and after doing the worksheets, and although the results were inconclusive, the students did seem to learn more about computer science by participating in this activity.</p> <p><br />During the fifth summer, the PIES research group held a three day workshop to teach a group of up to 20 second...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Irregular computations occur in many important science and engineering application domains such as solving partial differential equations over irregular grids, molecular dynamics simulations, and computations over sparse matrices. To address this problem, inspector/executor strategies have been developed where the inspector dynamically analyzes memory reference patterns and generates communication schedules and/or reorganizes computation and data, and the executor executes the irregular computation in parallel. Although inspector/executor strategies have been incorporated into many applications and libraries, these strategies are still hindered by two main problems: (1)  Currently, no general framework exists for automating the process of incorporating inspector/executor strategies into programs despite the complexity and difficulty that by-hand synthesis entails. (2) The performance of irregular applications significantly lags that of regular applications -- and this gap is widening for current and next-generation high-end multi-core systems.   The NSF CAREER supported PIES (Parallelization using Inspector/Executor Strategies) project led by Michelle Strout resulted in research methods for the  incorporation of inspector/executor strategies into irregular applications.  The project led to the development of the Sparse Polyhedral Framework including techniques to compose transformations with affine and uninterpreted function constraints, which are available in the IEGenLib open source C library.  This work also supported further development, application, and generalization of full sparse tiling, which is a technique that improve data locality as well as exposing asynchronous parallelism in irregular applications.  As part of the full sparse tiling work, the research group developed an efficient shared-memory, parallel graph partitioner called ParCubed.   Going forward, the PIES project has led to the development of the loop chain programming abstraction; the incorporation of full sparse tiling as a transformation used by the OP2 library, which is used in airplane engine simulations; and to the incorporation of an inspector/executor transformations in the CHILL scripting transformation tool, which is capable of generating optimized GPU code.  These new technologies make it easier to annotate existing scientific simulation codes with information and transformation strategies that enable performance portability.  Leveraging improved performance made possible by new and different computer architectures leads to better simulation accuracy, which leads to more scientific breakthroughs using less money than experimental science alone.   The PIES research project included an outreach program for local high school with the goal of introducing high school students to computer science in the context of chemistry.  The Poudre High School in Fort Collins, Colorado does not provide computer science as part of their curriculum.  Dr. Michelle Strout and her research group in the Computer Science department at Colorado State University collaborated with two high school chemistry teachers during the Summer of 2008 to increase the visibility of Computer Science  at the high school level.  The group constructed interactive, electronic worksheets using the Molecular Workbench software (also supported by NSF).  These electronic worksheets included computer science concepts as well as chemistry concepts.  The group also did surveys of the students' attitudes about computer science before and after doing the worksheets, and although the results were inconclusive, the students did seem to learn more about computer science by participating in this activity.   During the fifth summer, the PIES research group held a three day workshop to teach a group of up to 20 secondary school teachers how to make interactive electronic worksheets.  The attendees were led through example worksheets the first day and then were expected to build an interactive electron...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
