<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:     Automated Synthesis of High-Assurance Security Kernels</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2008</AwardEffectiveDate>
<AwardExpirationDate>06/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Deborah Shands</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Programming languages research has many techniques for generating efficient, correct implementations from high-level specifications. Recent research on language-based security formulates models of information security in terms of modular, algebraic structures from language semantics. This research combines these threads in novel ways to construct high-assurance secure systems in which techniques from programming language semantics provide both a mathematical basis for formal verification and a flexible, modular organizing principle for system design and implementation. This methodology is illustrated with a case study in which kernels (in particular, separation kernels) with a verified security policy are synthesized directly from formal models of security. &lt;br/&gt;&lt;br/&gt;There is growing interest within defense and avionics circles in separation kernels as a means of coping with serious concerns for system security, safety and integrity arising from the use of high levels of integration. Multi-level security (MLS) systems can be implemented by physical separation: computations at different security levels are situated on different network nodes. However, for many defense and avionics scenarios, physical separation is infeasible due to tight resource constraints. Because sharing resources introduces potential vulnerabilities, mission- or safety-critical MLS systems require both highly integrated implementations and high-assurance security guarantees. This research will have a direct impact on how separation kernels are designed, implemented and verified. Can the rigorous techniques for constructing modular and robust secure systems be generalized to other systems? The long range goal is to facilitate the construction of systems with high assurance end-to-end guarantees, thereby making high assurance more widely available. &lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>01/22/2008</MinAmdLetterDate>
<MaxAmdLetterDate>08/02/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0746509</AwardID>
<Investigator>
<FirstName>William</FirstName>
<LastName>Harrison</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>William L Harrison</PI_FULL_NAME>
<EmailAddress>harrisonwl@missouri.edu</EmailAddress>
<PI_PHON>5738842436</PI_PHON>
<NSF_ID>000224591</NSF_ID>
<StartDate>01/22/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Missouri-Columbia</Name>
<CityName>COLUMBIA</CityName>
<ZipCode>652110001</ZipCode>
<PhoneNumber>5738827560</PhoneNumber>
<StreetAddress>115 Business Loop 70 W</StreetAddress>
<StreetAddress2><![CDATA[Mizzou North, Room 501]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Missouri</StateName>
<StateCode>MO</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MO04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>153890272</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MISSOURI SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>006326904</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Missouri-Columbia]]></Name>
<CityName>COLUMBIA</CityName>
<StateCode>MO</StateCode>
<ZipCode>652110001</ZipCode>
<StreetAddress><![CDATA[115 Business Loop 70 W]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Missouri</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MO04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~90000</FUND_OBLG>
<FUND_OBLG>2009~180000</FUND_OBLG>
<FUND_OBLG>2011~90000</FUND_OBLG>
<FUND_OBLG>2012~90000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Embedded hardware systems have become ubiquitous. We rely on their correctness, safety and security, often without even being aware of their presence. But how do we achieve confidence that the embedded hardware we rely on is, indeed, reliable? This challenge is especially important in the realm of safety- and mission-critical embedded applications in which lives may depend on the correct and secure operation of hardware systems.</p> <p>Tools, techniques and methodologies for creating and maintaining secure and safe software are advanced by comparison with hardware methods and one approach to confronting the high reliability challenge in embedded hardware is to adapt some of these software ideas to hardware. This is precisely the approach that this research has taken. The main outcome of this research is a high assurance design methodology for embedded hardware that allows engineers to design, test, implement and verify hardware designs for a wide variety of systems.</p> <p>The main vehicle for this research is a new functional programming language called ReWire. ReWire&rsquo;s language design incorporates many of the lessons learned in previous research on constructing secure and safe software. For example, ReWire uses a strong, static type system to automatically check the consistency of ReWire designs. ReWire&rsquo;s design also enables the technology transfer to hardware systems of ideas and techniques from recent advances in so-called language-based security. ReWire&rsquo;s compiler can automatically translate hardware designs into reasonably efficient circuits on FPGA boards. Field programmable gate arrays (FPGAs) are programmable hardware platforms that can be programmed in a manner similar to software systems.</p> <p>In addition to the tools developed for ReWire, a number of case studies were performed to evaluate the efficiency and utility of the language and to demonstrate how ReWire designs may be proved safe and secure. A number of hardware systems were developed, including microcontrollers, many core systems, cryptographic algorithms and pattern matchers for deep packet inspection in network processors. These case studies showed that hardware designs can be rendered cleanly in ReWire and implemented efficiently using the ReWire compiler. In some cases, the performance of hardware artifacts produced with ReWire beat the state-of-the-art. An important benefit of the functional programming languages approach taken with ReWire is that hardware designs can be analyzed and proven correct and secure using mathematics &ndash; called formal verification in Computer Science. Several useful case studies of formal verification of security and correctness were performed in the course of this research.</p> <p>&nbsp;</p><br> <p>            Last Modified: 04/06/2016<br>      Modified by: William&nbsp;L&nbsp;Harrison</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Embedded hardware systems have become ubiquitous. We rely on their correctness, safety and security, often without even being aware of their presence. But how do we achieve confidence that the embedded hardware we rely on is, indeed, reliable? This challenge is especially important in the realm of safety- and mission-critical embedded applications in which lives may depend on the correct and secure operation of hardware systems.  Tools, techniques and methodologies for creating and maintaining secure and safe software are advanced by comparison with hardware methods and one approach to confronting the high reliability challenge in embedded hardware is to adapt some of these software ideas to hardware. This is precisely the approach that this research has taken. The main outcome of this research is a high assurance design methodology for embedded hardware that allows engineers to design, test, implement and verify hardware designs for a wide variety of systems.  The main vehicle for this research is a new functional programming language called ReWire. ReWireÆs language design incorporates many of the lessons learned in previous research on constructing secure and safe software. For example, ReWire uses a strong, static type system to automatically check the consistency of ReWire designs. ReWireÆs design also enables the technology transfer to hardware systems of ideas and techniques from recent advances in so-called language-based security. ReWireÆs compiler can automatically translate hardware designs into reasonably efficient circuits on FPGA boards. Field programmable gate arrays (FPGAs) are programmable hardware platforms that can be programmed in a manner similar to software systems.  In addition to the tools developed for ReWire, a number of case studies were performed to evaluate the efficiency and utility of the language and to demonstrate how ReWire designs may be proved safe and secure. A number of hardware systems were developed, including microcontrollers, many core systems, cryptographic algorithms and pattern matchers for deep packet inspection in network processors. These case studies showed that hardware designs can be rendered cleanly in ReWire and implemented efficiently using the ReWire compiler. In some cases, the performance of hardware artifacts produced with ReWire beat the state-of-the-art. An important benefit of the functional programming languages approach taken with ReWire is that hardware designs can be analyzed and proven correct and secure using mathematics &ndash; called formal verification in Computer Science. Several useful case studies of formal verification of security and correctness were performed in the course of this research.          Last Modified: 04/06/2016       Submitted by: William L Harrison]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
