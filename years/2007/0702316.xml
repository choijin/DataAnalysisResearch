<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPA: Collaborative Research: Formal Techniques for Designing  Globally Asynchronous and Locally Synchronous Systems (FMGALS)</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2007</AwardEffectiveDate>
<AwardExpirationDate>06/30/2012</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>242000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Collaborative Proposal ID(s):   0702316 and 0702539&lt;br/&gt;Title:: Collaborative Research: Formal Techniques for Designing Globally Asynchronous and Locally Synchronous Systems (FMGALS)&lt;br/&gt;PIs: Sandeep K. Shukla (Virginia Tech) &amp; Kenneth Stevens (University of Utah)&lt;br/&gt;&lt;br/&gt;The increased momentum towards Globally Asynchronous and Locally Synchronous&lt;br/&gt;(GALS) design has been necessitated by three factors. First, due to decreasing feature size of CMOS technology, and increasing clock frequency in the gigahertz range, the clock period is diminishing towards a limit where efficient synchronous clocking throughout the chip is getting difficult. Second, IP reuse based System on Chip (SoC) design becomes easier if all IPs do not have to be optimized for the same clocking scheme, and finally, increasing power consumption in clock buffers, global repeaters and clock tree is a growing industrial concern.&lt;br/&gt;&lt;br/&gt;However, correctly designing GALS systems is error prone and difficult.&lt;br/&gt;Asynchronous design tools and methodologies are almost nonexistent outside academia with a few exceptions. Research towards tools and methodologies for GALS design is imperative. Given the subtlety and complexity of these problems, we believe that grounding any GALS methodology in formal methods is important and necessary.  Real implementation of protocols into on-chip fabrics and experimental validation of the efficacy of such designs is necessary for the wide acceptance of the design methodologies.&lt;br/&gt;&lt;br/&gt;In this project, the Virginia Polytechnic and State University and the University of Utah teams will collaborate to develop a formal basis for designing and experimenting with the trade-offs of various GALS solutions, and actually fabricate such solutions on-chip to calibrate the solutions.&lt;br/&gt;&lt;br/&gt;Other than the research and educational impact of inventing new GALS techniques, and methodologies for formally capturing the protocols and verifying them, the broader impact of this project will constitute collaborative team work and training of students to work in a distributed development environment, inclusion of undergraduate researchers into research, and special effort of including minority students into the project.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/22/2007</MinAmdLetterDate>
<MaxAmdLetterDate>06/11/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0702316</AwardID>
<Investigator>
<FirstName>Sandeep</FirstName>
<LastName>Shukla</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sandeep K Shukla</PI_FULL_NAME>
<EmailAddress>shukla@vt.edu</EmailAddress>
<PI_PHON>5402312133</PI_PHON>
<NSF_ID>000165850</NSF_ID>
<StartDate>06/22/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Virginia Polytechnic Institute and State University</Name>
<CityName>BLACKSBURG</CityName>
<ZipCode>240610001</ZipCode>
<PhoneNumber>5402315281</PhoneNumber>
<StreetAddress>Sponsored Programs 0170</StreetAddress>
<StreetAddress2><![CDATA[300 Turner Street NW, Suite 4200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003137015</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>VIRGINIA POLYTECHNIC INSTITUTE AND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003137015</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Virginia Polytechnic Institute and State University]]></Name>
<CityName>BLACKSBURG</CityName>
<StateCode>VA</StateCode>
<ZipCode>240610001</ZipCode>
<StreetAddress><![CDATA[Sponsored Programs 0170]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~200000</FUND_OBLG>
<FUND_OBLG>2008~12000</FUND_OBLG>
<FUND_OBLG>2009~15000</FUND_OBLG>
<FUND_OBLG>2010~15000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Latency insensitive protocol (LIP) provides a synchronous solution for hardware components that needs to be&nbsp; composed in a system-on-chip (SOC). Due to increased clock speed, logic-gate count, and increased chip die sizes, the synchronous clocking of the entire chip is expensive, and power consuming. In this project we addressed the issue of designing LIP solutions for SOC design using existing synchronous components. A straight forward solution proposed early on was to implement&nbsp; handshakes for every inter-component connection. This method then desynchronizes the entire design. However,&nbsp; this kind of&nbsp; over-design&nbsp; is redundant and often results in an SOCs which require larger area,&nbsp; buffer sizes&nbsp; and increased latency, reduced throughput and scalability. In this NSF funded project, we created a front to back design&nbsp; framework for specification, performance analysis, optimization and implementation of converting a synchronous design into a latency insensitive system. This work starts from any synchronous design after floor planning if multi-cycle wiring latencies is detected. We defined partial back pressure graphs (PBPG) as a model for the&nbsp; data flow. Activation of each synchronous component and throughput can be represented in such a graph.&nbsp; PBPG is also used throughout the whole design process as the formal model. Initially, 'stall' signals which implement the back pressure are completely&nbsp; removed which might cause overflow if the PBPG representation of the system&nbsp; has multiple strongly connected components.&nbsp; We then define the strongly connected component graph (SCCG) based on which boundedness can be checked. If the&nbsp; system has overflow, the&nbsp; minimal&nbsp; back pressure necessary to prevent overflow is explored and&nbsp; we designed an algorithm which add minimal number of back pressure arcs (MBPA). We showed that this problem can be reduced to the Minimum Cost Arborescence (MCA) problem for directed graphs which has a polynomial time (thus efficient)&nbsp; solution. An optimized latency insensitive design&nbsp; also requires that back pressure should not affect the throughput. Any resulting throughput reduction can be recovered through buffer resizing. In this framework, two techniques (RMILP) and (LMILP) are invented to find the stringent buffer sized demanded for the throughput improvement, which are more scalable than any prior method for designing latency insensitive design. In the end, the framework refines the optimized formal model (PBPG model)&nbsp; and map it back to circuits by our tool. Our approach provides a formal framework for converting a synchronous model into a latency insensitive implementation with performance optimization in back pressure, throughput and buffer sizes.</p> <p>The outcome of this research is useful for Semiconductor companies that are involved in designing large system-on-chip (such as today's mobile phone chips, integrated graphics and processor chips, and many other system-on-chip designs used in medical devices, consumer electronics, and mission critical applications). The research funded by this grant also spawned many other interesting projects associated with embedded software design methods, software synthesis methods, and composition of software into large software.</p><br> <p>            Last Modified: 09/03/2012<br>      Modified by: Sandeep&nbsp;K&nbsp;Shukla</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2012/...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Latency insensitive protocol (LIP) provides a synchronous solution for hardware components that needs to be  composed in a system-on-chip (SOC). Due to increased clock speed, logic-gate count, and increased chip die sizes, the synchronous clocking of the entire chip is expensive, and power consuming. In this project we addressed the issue of designing LIP solutions for SOC design using existing synchronous components. A straight forward solution proposed early on was to implement  handshakes for every inter-component connection. This method then desynchronizes the entire design. However,  this kind of  over-design  is redundant and often results in an SOCs which require larger area,  buffer sizes  and increased latency, reduced throughput and scalability. In this NSF funded project, we created a front to back design  framework for specification, performance analysis, optimization and implementation of converting a synchronous design into a latency insensitive system. This work starts from any synchronous design after floor planning if multi-cycle wiring latencies is detected. We defined partial back pressure graphs (PBPG) as a model for the  data flow. Activation of each synchronous component and throughput can be represented in such a graph.  PBPG is also used throughout the whole design process as the formal model. Initially, 'stall' signals which implement the back pressure are completely  removed which might cause overflow if the PBPG representation of the system  has multiple strongly connected components.  We then define the strongly connected component graph (SCCG) based on which boundedness can be checked. If the  system has overflow, the  minimal  back pressure necessary to prevent overflow is explored and  we designed an algorithm which add minimal number of back pressure arcs (MBPA). We showed that this problem can be reduced to the Minimum Cost Arborescence (MCA) problem for directed graphs which has a polynomial time (thus efficient)  solution. An optimized latency insensitive design  also requires that back pressure should not affect the throughput. Any resulting throughput reduction can be recovered through buffer resizing. In this framework, two techniques (RMILP) and (LMILP) are invented to find the stringent buffer sized demanded for the throughput improvement, which are more scalable than any prior method for designing latency insensitive design. In the end, the framework refines the optimized formal model (PBPG model)  and map it back to circuits by our tool. Our approach provides a formal framework for converting a synchronous model into a latency insensitive implementation with performance optimization in back pressure, throughput and buffer sizes.  The outcome of this research is useful for Semiconductor companies that are involved in designing large system-on-chip (such as today's mobile phone chips, integrated graphics and processor chips, and many other system-on-chip designs used in medical devices, consumer electronics, and mission critical applications). The research funded by this grant also spawned many other interesting projects associated with embedded software design methods, software synthesis methods, and composition of software into large software.       Last Modified: 09/03/2012       Submitted by: Sandeep K Shukla]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
