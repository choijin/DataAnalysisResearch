<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Finding What's Not There: A New Approach to Revealing Neglected Conditions in Software</AwardTitle>
<AwardEffectiveDate>06/01/2007</AwardEffectiveDate>
<AwardExpirationDate>05/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>299999</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>P0702693&lt;br/&gt;Finding What's Not There: A New Approach to Revealing Neglected Conditions in Software&lt;br/&gt;Andy Podgurski&lt;br/&gt;&lt;br/&gt;A new approach to the detection of neglected conditions in software is explored that is based on the ideas that vital clues about neglected conditions are often distributed throughout a project code base.  Clues are represented as graph minors of program dependence graphs, which model programming patterns in which particular conditions are handled properly.  PDG minors permit a wide variety of such patterns to be modeled concisely and without unnecessary constraints on the contexts in which the patterns may be found.  Patterns are found by mining a database of dependence graphs to identify recurring graph minors, on the assumption that the more a programming pattern is used, the more likely it is to be correct.  After putatively correct patterns are identified, the graph database is searched again to identify pattern violations corresponding to neglected conditions.  This approach is distinguished from related work on defect detection by its focus on neglected conditions, by its use of dependence graph minors to represent programming patterns, and by its use of graph mining technology to identify patterns.  The approach will be evaluated and refined by applying it to reveal neglected conditions in a variety of open-source projects.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/29/2007</MinAmdLetterDate>
<MaxAmdLetterDate>08/01/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0702693</AwardID>
<Investigator>
<FirstName>H. Andy</FirstName>
<LastName>Podgurski</LastName>
<EmailAddress>podgurski@case.edu</EmailAddress>
<StartDate>05/29/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Case Western Reserve University</Name>
<CityName>CLEVELAND</CityName>
<ZipCode>441064901</ZipCode>
<PhoneNumber>2163684510</PhoneNumber>
<StreetAddress>Nord Hall, Suite 615</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
