<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>ATS: a Language to Support Practical Programming with Theorem Proving</AwardTitle>
<AwardEffectiveDate>10/01/2007</AwardEffectiveDate>
<AwardExpirationDate>09/30/2011</AwardExpirationDate>
<AwardTotalIntnAmount>299980.00</AwardTotalIntnAmount>
<AwardAmount>299980</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Proposal Number: CCF-0702665&lt;br/&gt;&lt;br/&gt;TITLE: ATS: A Language to Support Practical Programming with Theorem Proving&lt;br/&gt;&lt;br/&gt;PI: Hongwei Xi&lt;br/&gt;&lt;br/&gt;The immense complexity in software design and implementation is evident.  In this day and age, software design is often expressed in forms of varying degree of formalism, ranging from verbal discussions to plain text descriptions to UML diagrams to specifications in languages like Z.  Also, there is often an enormous gap between the design of a system and its actual implementation, making it exceedingly difficult to construct software meeting its specification.  However, the very ability to construct software meeting its specification is crucial to (highly) dependable computing, and there seem to be no other shortcuts.  The proposed research focuses on the design and implementation of a full-fledged programming language ATS with a type system rooted in the recently developed framework Applied Type System. In ATS, (certain) specifications in software design can be formally captured in terms of types and then be verified through type-checking.  In stark contrast to pure theorem proving systems where programs are extracted from proofs, ATS is an effective programming language that contains a pure theorem-proving subsystem to support programming with theorem proving. The effectiveness of ATS is to be evaluated in the construction of real and complex systems.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/21/2007</MinAmdLetterDate>
<MaxAmdLetterDate>09/21/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0702665</AwardID>
<Investigator>
<FirstName>Hongwei</FirstName>
<LastName>Xi</LastName>
<EmailAddress>hwxi@cs.bu.edu</EmailAddress>
<StartDate>09/21/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Trustees of Boston University</Name>
<CityName>BOSTON</CityName>
<ZipCode>022151300</ZipCode>
<PhoneNumber>6173534365</PhoneNumber>
<StreetAddress>881 COMMONWEALTH AVE</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
