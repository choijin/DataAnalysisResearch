<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SGER:   Monitoring Off-the-shelf Components</AwardTitle>
<AwardEffectiveDate>09/15/2007</AwardEffectiveDate>
<AwardExpirationDate>02/28/2009</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>109285</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>This small grant for exploratory research investigates a promising new approach to checking the proper execution of software composed of components. An attractive method for developing new reactive software is to use ?off-the-shelf? third-party components that do not, or may not, exactly satisfy the desired requirements.  To safely use such components, the use of  run-time monitors is used to detect behaviors violating the requirements.  Such requirements are usually composed of a safety part, whose run-time monitoring is well studied, and a liveness part, whose run-time monitoring is elusive. Most commonly, run-time monitors extract a safety property, that either over-approximates or under-approximate the original requirements, and thus tend to have a have high level of inaccuracy.&lt;br/&gt;&lt;br/&gt;A novel class of methods is proposed that employs randomization for monitoring the liveness properties.  Roughly speaking, the method occasionally tosses a coin to determine whether to give up achieving a liveness requirement. Such methods are highly accurate and enjoy the property of graceful degradation: the longer a liveness property is not satisfied, the more likely is it to be rejected by the monitor.  The project also investigates novel methods for evaluating the accuracy of monitoring approaches to compare various algorithms. Finally, monitors are usually ?passive? -- they only observe the computation, but do not participate in them ? but this work explores ?active? monitors that cooperate with the component to generate a computation that satisfies the requirements.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/19/2007</MinAmdLetterDate>
<MaxAmdLetterDate>09/23/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0742686</AwardID>
<Investigator>
<FirstName>Lenore</FirstName>
<LastName>Zuck</LastName>
<EmailAddress>lenore@cs.uic.edu</EmailAddress>
<StartDate>09/19/2007</StartDate>
<EndDate>09/09/2008</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Aravinda</FirstName>
<LastName>Sistla</LastName>
<EmailAddress>sistla@cs.uic.edu</EmailAddress>
<StartDate>09/19/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606124305</ZipCode>
<PhoneNumber>3129962862</PhoneNumber>
<StreetAddress>809 S. Marshfield Avenue</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9237</Code>
<Text>SMALL GRANTS-EXPLORATORY RSRCH</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
