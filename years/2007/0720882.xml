<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: CSR-EHS: Pret: Precision Timed Architectures</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2007</AwardEffectiveDate>
<AwardExpirationDate>12/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>549994.00</AwardTotalIntnAmount>
<AwardAmount>819072</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Abstractions currently used in computing hide timing properties of software. As a consequence, computer scientists have developed techniques that deliver improved average-case performance and/or design convenience at the expense of timing predictability. For embedded software, which interacts closely with physical processes, timing is usually an essential property. Lack of timing in the core abstractions results in brittle and non-portable designs. Moreover, as embedded software becomes more networked, the prevailing empirical test-based approach to achieving real-time computing becomes inadequate.&lt;br/&gt;&lt;br/&gt;This project reintroduces timing predictability as a first-class property of embedded processor architectures. It tackles the problem from the hardware design perspective, developing precision timed (PRET) machines as soft cores on FPGAs. It shows that software on PRET machines can be integrated with what would traditionally have been purely hardware designs. This project seeks to reinvigorate research in an area of computer science and computer architecure that have stagnated in research due to maturing industrial practice. This is expected to provide a starting point for a decades-long revolution that will once again make timing predictability an essential feature of processors.  This project addresses the core abstractions of computing. Rather than attempting to correct the lack of timing in these abstractions with more layers of abstraction, this project has the goal of showing that embedded processors can deliver both predictable timing and high performance. It opens up the field to new computing abstractions that include timing as a first-class property.  &lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/07/2007</MinAmdLetterDate>
<MaxAmdLetterDate>09/16/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0720882</AwardID>
<Investigator>
<FirstName>Jan</FirstName>
<LastName>Rabaey</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jan Rabaey</PI_FULL_NAME>
<EmailAddress>jan@eecs.Berkeley.edu</EmailAddress>
<PI_PHON/>
<NSF_ID>000472478</NSF_ID>
<StartDate>08/07/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Edward</FirstName>
<LastName>Lee</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Edward A Lee</PI_FULL_NAME>
<EmailAddress>eal@eecs.berkeley.edu</EmailAddress>
<PI_PHON>5106433728</PI_PHON>
<NSF_ID>000479285</NSF_ID>
<StartDate>08/07/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>John</FirstName>
<LastName>Wawrzynek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John Wawrzynek</PI_FULL_NAME>
<EmailAddress>johnw@eecs.berkeley.edu</EmailAddress>
<PI_PHON>5106439434</PI_PHON>
<NSF_ID>000063703</NSF_ID>
<StartDate>08/07/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<StreetAddress2><![CDATA[1608 Fourth Street, Suite 220]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>124726725</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Berkeley]]></Name>
<CityName>BERKELEY</CityName>
<StateCode>CA</StateCode>
<ZipCode>947101749</ZipCode>
<StreetAddress><![CDATA[Sponsored Projects Office]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramElement>
<Code>K156</Code>
<Text/>
</ProgramElement>
<ProgramReference>
<Code>170E</Code>
<Text>Interagency Agreements</Text>
</ProgramReference>
<ProgramReference>
<Code>2801</Code>
<Text>EMBEDDED &amp; HYBRID SYSTEMS(EHS)</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~149999</FUND_OBLG>
<FUND_OBLG>2008~99999</FUND_OBLG>
<FUND_OBLG>2009~299996</FUND_OBLG>
<FUND_OBLG>2011~269078</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>All widely used software abstractions lack temporal semantics. The notion of correct execution of a program written in every widely-used programming language today does not depend on the temporal behavior of the program. But temporal behavior matters in almost all systems. Even in systems with no particular real-time requirements, timing of programs is relevant to the value delivered by programs, and in the case of concurrent programs, also affects the functionality. In systems with real-time requirements, including most cyber-physical systems, temporal behavior affects not just the value delivered by a system but also its correctness.<br /><br />For concurrent software, which includes almost all interesting applications, the inability to directly control timing of software makes systems much more fragile. In particular, the behavior of a deployed system may differ considerably from the behavior of the system when being tested. Programmers are forced to use indirect methods such as setting priorities or deadlines, using synchronization primitives such as monitors and semaphores, and (often) delving into operating-system and hardware details to control interrupts and multitasking behavior. Such techniques are notoriously difficult to get right.<br /><br />Formal verification can help, but for many applications, verifying the software is not enough. We have to verify the system, which includes physical components that are not realized in software. Those physical components have temporal semantics, and the temporal behavior of the software directly impacts the overall system behavior. We cannot formally verify temporal behavior of software, however, if time is not part of the semantics of programs.<br /><br />To solve these problems, time can and must become part of the semantics of programs for a large class of applications. This NSF project has demonstrated that this is both practical and useful. The project has developed and evaluated three generations of PRET machines, where the PRET acronym stands for PREcision Timed; Predictable, REpeatable Timing; Performance with REpeatable Timing; and the French word for ``ready.'' All interpretations are valid and informative. PRET machines revise the concept of an instruction set architecture (ISA) to introduce temporal semantics. Programs written for a particular PRET ISA must meet certain timing requirements to be correctly executed. Timing becomes a correctness criterion, rather than a performance metric.<br /><br />Outcomes:<br /><br />This project started Feb. 1, 2008, ran for three years, and then received a two-year extension, for a total of five years. Over that time, the participants included, besides the three co-PIs, three visiting faculty, 10 grad students, and two postdocs.&nbsp; In addition, the project collaborated with Columbia University, University of Aukland (New Zealand), INRIA (Grenoble), National Instruments, Brigham Young University, Arizona State University, and Thales.<br /><br />The publications resulting from the project are listed at http://chess.eecs.berkeley.edu/pret/ and include 16 conference papers, one PhD thesis, 6 technical reports, and many presentations, including some invited keynote presentations.<br /><br />This project has established that it is possible to gain precise control over the timing of the actions of software without sacrificing performance. We believe that this work will lead to a generation of processors capable of precise and repeatable real-time behavior. These will be used in conjunction with general-purpose processors to provide time-sensitive services (such as high-performance networking and real-time media processing), and as processors for safety-critical and certification-intensive applications, such as automotive systems and aircraft control systems.<br /><br />Intellectual Merit:<br /><br />This project has addressed the core abstractions of computing, which th...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ All widely used software abstractions lack temporal semantics. The notion of correct execution of a program written in every widely-used programming language today does not depend on the temporal behavior of the program. But temporal behavior matters in almost all systems. Even in systems with no particular real-time requirements, timing of programs is relevant to the value delivered by programs, and in the case of concurrent programs, also affects the functionality. In systems with real-time requirements, including most cyber-physical systems, temporal behavior affects not just the value delivered by a system but also its correctness.  For concurrent software, which includes almost all interesting applications, the inability to directly control timing of software makes systems much more fragile. In particular, the behavior of a deployed system may differ considerably from the behavior of the system when being tested. Programmers are forced to use indirect methods such as setting priorities or deadlines, using synchronization primitives such as monitors and semaphores, and (often) delving into operating-system and hardware details to control interrupts and multitasking behavior. Such techniques are notoriously difficult to get right.  Formal verification can help, but for many applications, verifying the software is not enough. We have to verify the system, which includes physical components that are not realized in software. Those physical components have temporal semantics, and the temporal behavior of the software directly impacts the overall system behavior. We cannot formally verify temporal behavior of software, however, if time is not part of the semantics of programs.  To solve these problems, time can and must become part of the semantics of programs for a large class of applications. This NSF project has demonstrated that this is both practical and useful. The project has developed and evaluated three generations of PRET machines, where the PRET acronym stands for PREcision Timed; Predictable, REpeatable Timing; Performance with REpeatable Timing; and the French word for ``ready.'' All interpretations are valid and informative. PRET machines revise the concept of an instruction set architecture (ISA) to introduce temporal semantics. Programs written for a particular PRET ISA must meet certain timing requirements to be correctly executed. Timing becomes a correctness criterion, rather than a performance metric.  Outcomes:  This project started Feb. 1, 2008, ran for three years, and then received a two-year extension, for a total of five years. Over that time, the participants included, besides the three co-PIs, three visiting faculty, 10 grad students, and two postdocs.  In addition, the project collaborated with Columbia University, University of Aukland (New Zealand), INRIA (Grenoble), National Instruments, Brigham Young University, Arizona State University, and Thales.  The publications resulting from the project are listed at http://chess.eecs.berkeley.edu/pret/ and include 16 conference papers, one PhD thesis, 6 technical reports, and many presentations, including some invited keynote presentations.  This project has established that it is possible to gain precise control over the timing of the actions of software without sacrificing performance. We believe that this work will lead to a generation of processors capable of precise and repeatable real-time behavior. These will be used in conjunction with general-purpose processors to provide time-sensitive services (such as high-performance networking and real-time media processing), and as processors for safety-critical and certification-intensive applications, such as automotive systems and aircraft control systems.  Intellectual Merit:  This project has addressed the core abstractions of computing, which throughout the 20-th century, have deliberately abstracted away time. For embedded systems, this is inappropriate. Unlike most research in real-time systems, w...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
