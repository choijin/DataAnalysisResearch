<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CT-T: A Clean-Slate Infrastructure for Information Flow Control</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2007</AwardEffectiveDate>
<AwardExpirationDate>08/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>1200000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
<PO_EMAI>jepstein@nsf.gov</PO_EMAI>
<PO_PHON>7032928338</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Experience shows that most programmers can't write secure code.  Few applications have the luxury of being written by security-conscious programmers, and thus the vast majority of all software is untrustworthy.  At the same time, operating systems and networks have spectacularly failed to control the damage caused by subverted software.&lt;br/&gt;&lt;br/&gt;However, one technique--information flow control--has proven capable of limiting damage by buggy and even malicious software.  The military has long used this technique to protect sensitive data against Trojan horses, but retrofitting existing operating systems with information flow control is a lengthy and difficult process, often unable to keep pace with the evolution of commodity software.&lt;br/&gt;&lt;br/&gt;We intend to develop a clean-slate infrastructure for distributed applications in which the lowest-level abstractions are specifically designed to control information flow.  We will re-think the architecture of operating systems, networks, and even processors to realize an infrastructure that relies on a small, highly-secure, and, at least in part, mechanically checkable trusted computing base.  On top of this base, we will implement interfaces that resemble the network programming APIs to which Unix programmers are accustomed.&lt;br/&gt;&lt;br/&gt;Our infrastructure will aim to give programmers as much freedom as possible to structure their applications, subject only to information flow constraints.  Our motivating application will be scalable Internet web sites replicated across multiple servers.</AbstractNarration>
<MinAmdLetterDate>09/12/2007</MinAmdLetterDate>
<MaxAmdLetterDate>08/31/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0716806</AwardID>
<Investigator>
<FirstName>Nick</FirstName>
<LastName>McKeown</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nick W McKeown</PI_FULL_NAME>
<EmailAddress>nickm@ee.stanford.edu</EmailAddress>
<PI_PHON>6507253641</PI_PHON>
<NSF_ID>000487607</NSF_ID>
<StartDate>09/12/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Dawson</FirstName>
<LastName>Engler</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Dawson R Engler</PI_FULL_NAME>
<EmailAddress>engler@csl.stanford.edu</EmailAddress>
<PI_PHON>6507230762</PI_PHON>
<NSF_ID>000485661</NSF_ID>
<StartDate>09/12/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>David</FirstName>
<LastName>Mazieres</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David Mazieres</PI_FULL_NAME>
<EmailAddress>dm-list-sup-nsf14@scs.stanford.edu</EmailAddress>
<PI_PHON>4154909451</PI_PHON>
<NSF_ID>000100121</NSF_ID>
<StartDate>09/12/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Christoforos</FirstName>
<LastName>Kozyrakis</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christoforos Kozyrakis</PI_FULL_NAME>
<EmailAddress>kozyraki@stanford.edu</EmailAddress>
<PI_PHON>6507253716</PI_PHON>
<NSF_ID>000486618</NSF_ID>
<StartDate>09/12/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009214214</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LELAND STANFORD JUNIOR UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009214214</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stanford University]]></Name>
<CityName>Stanford</CityName>
<StateCode>CA</StateCode>
<ZipCode>943052004</ZipCode>
<StreetAddress><![CDATA[450 Jane Stanford Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7456</Code>
<Text>ITR-CYBERTRUST</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~1000000</FUND_OBLG>
<FUND_OBLG>2010~200000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>??Traditionally, much of computer system security centers aroundrestricting what operations can be performed in various contexts. &nbsp;Bycontrast, this project set out to build systems in which securitycenters around the data. &nbsp;For instance, a web site's policy might holdthat a user's private profile information should only be viewed by theuser herself or an administrator of the system. &nbsp;To enforce such apolicy, the system must provide information flow control (IFC)--i.e.,it must trace information propagating through the system and restrictits unauthorized dissemination.</p> <p><br />While IFC dates back to the 60s, it is traditionally retrofitted ontomore traditional access control frameworks. &nbsp;In this project were-thought our network protocols, operating systems, and hardware toprovide information flow control from the ground up at the lowestlevel. &nbsp;We showed that more traditional access control can beimplemented on top of an IFC substrate, in less security-criticalcode. &nbsp;The resulting systems provided a new and attractive datapoint,balancing relatively high assurance IFC (which depended on thecorrectness of only small amounts of code) with a high degree ofsource code compatibility with existing systems. &nbsp;More importantly,our systems let applications themselves leverage underlying IFCfunctions, allowing application security to rest directly on thesecurity properties guaranteed by the underlying operating system.</p> <p><br />The research led to a number of artifacts, all available underopen-source licenses. &nbsp;The HiStar operating system, which began theproject, demonstrated how a 20,000 line operating system kernel couldboth enforce IFC and provide low-level facilities sufficient toimplement a more traditional operating system interface in anuntrusted (and hence not security-critical) library. &nbsp;The Loki projectshowed that simple hardware support from the CPU could approximatelyhalve the amount of fully trusted code in the kernel. &nbsp;The DStarnetwork protocol demonstrated that it is possible to enforcedistributed IFC in a decentralized way, with no central root of trust.Cinder demonstrated the applicability of our ideas to a mobile phone.</p> <p><br />In addition, our research required us to develop several technologiesthat are of more general interest. &nbsp;Notably, tcpcrypt is a simple andbackwards-compatible extension to the ubiquitous TCP protocol thatallows opportunistic encryption everywhere and strong securitywherever there is application-level authentication. &nbsp;Trusted HTTPdemonstrated that, unlike the status quo, password authentication inthe browser can be used for strong mutual authentication of servers tobrowsers as well as browsers to servers.</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/24/2012<br>      Modified by: David&nbsp;Mazieres</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ ??Traditionally, much of computer system security centers aroundrestricting what operations can be performed in various contexts.  Bycontrast, this project set out to build systems in which securitycenters around the data.  For instance, a web site's policy might holdthat a user's private profile information should only be viewed by theuser herself or an administrator of the system.  To enforce such apolicy, the system must provide information flow control (IFC)--i.e.,it must trace information propagating through the system and restrictits unauthorized dissemination.   While IFC dates back to the 60s, it is traditionally retrofitted ontomore traditional access control frameworks.  In this project were-thought our network protocols, operating systems, and hardware toprovide information flow control from the ground up at the lowestlevel.  We showed that more traditional access control can beimplemented on top of an IFC substrate, in less security-criticalcode.  The resulting systems provided a new and attractive datapoint,balancing relatively high assurance IFC (which depended on thecorrectness of only small amounts of code) with a high degree ofsource code compatibility with existing systems.  More importantly,our systems let applications themselves leverage underlying IFCfunctions, allowing application security to rest directly on thesecurity properties guaranteed by the underlying operating system.   The research led to a number of artifacts, all available underopen-source licenses.  The HiStar operating system, which began theproject, demonstrated how a 20,000 line operating system kernel couldboth enforce IFC and provide low-level facilities sufficient toimplement a more traditional operating system interface in anuntrusted (and hence not security-critical) library.  The Loki projectshowed that simple hardware support from the CPU could approximatelyhalve the amount of fully trusted code in the kernel.  The DStarnetwork protocol demonstrated that it is possible to enforcedistributed IFC in a decentralized way, with no central root of trust.Cinder demonstrated the applicability of our ideas to a mobile phone.   In addition, our research required us to develop several technologiesthat are of more general interest.  Notably, tcpcrypt is a simple andbackwards-compatible extension to the ubiquitous TCP protocol thatallows opportunistic encryption everywhere and strong securitywherever there is application-level authentication.  Trusted HTTPdemonstrated that, unlike the status quo, password authentication inthe browser can be used for strong mutual authentication of servers tobrowsers as well as browsers to servers.          Last Modified: 01/24/2012       Submitted by: David Mazieres]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
