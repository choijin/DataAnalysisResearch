<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Static and Dynamic Techniques for Classifying, Locating, and Fixing Bugs</AwardTitle>
<AwardEffectiveDate>09/01/2007</AwardEffectiveDate>
<AwardExpirationDate>08/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>600000.00</AwardTotalIntnAmount>
<AwardAmount>600000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>P0701957&lt;br/&gt;&lt;br/&gt;Static and Dynamic Techniques for Classifying, Locating, and Fixing Bugs &lt;br/&gt;&lt;br/&gt;Susan Horwitz and Ben Liblit&lt;br/&gt;&lt;br/&gt;Testing and debugging are vital but notoriously difficult parts of the software-development process.  Languages like C and C++, with weak type systems, exacerbate the problem by making it easy for programmers to introduce memory- and type-safety bugs.  These bugs are hard to identify because the actual error and the symptom often seem to have no logical connection.&lt;br/&gt;&lt;br/&gt;This research focuses on designing, implementing, and evaluating innovative new ways to identify, reproduce, and eliminate bugs. Questions addressed include: How to determine whether a program failure is due to a memory/type-safety bug, and in that case how to locate the buggy code (not just the code where the symptom occurs); given a failure that is not due to a memory/type-safety bug, how to reproduce that failure, and how to find the source of the problem.&lt;br/&gt;&lt;br/&gt;One of the most creative aspects of the work is the combination of complementary techniques to achieve powerful synergies: dynamic memory type inference is combined with static program slicing to attack memory/type-safety bugs, while program slicing is paired with statistical bug identification to implement new algorithms for finding, reproducing, and repairing other kinds of bugs.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/31/2007</MinAmdLetterDate>
<MaxAmdLetterDate>07/21/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0701957</AwardID>
<Investigator>
<FirstName>Susan</FirstName>
<LastName>Horwitz</LastName>
<EmailAddress>horwitz@cs.wisc.edu</EmailAddress>
<StartDate>07/31/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Benjamin</FirstName>
<LastName>Liblit</LastName>
<EmailAddress>liblit@cs.wisc.edu</EmailAddress>
<StartDate>07/31/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
