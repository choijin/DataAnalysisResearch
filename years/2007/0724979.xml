<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Architectural Metaprogramming</AwardTitle>
<AwardEffectiveDate>10/01/2007</AwardEffectiveDate>
<AwardExpirationDate>09/30/2012</AwardExpirationDate>
<AwardTotalIntnAmount>800000.00</AwardTotalIntnAmount>
<AwardAmount>800000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>0724979&lt;br/&gt;Don S. Batory&lt;br/&gt;University of Texas at Austin&lt;br/&gt;&lt;br/&gt;Today's programmers wrestle with a bewildering number of languages, tools, programming concepts, and representations. Instinctively we sense familiar ideas are reinvented and reimplemented in different contexts, in different languages, with different implementations, and on different platforms. The result is overwhelming complexity, steep learning curves, and the inability to create customized software cheaply. This research exposes fundamental principles that underlie different threads of research in program development and maintenance to create a general theory of automated software development that ultimately will reduce complexity, be easier to learn, and will enable customized software to be created inexpensively.&lt;br/&gt;&lt;br/&gt;Architectural Metaprogramming is the idea that programs (or program designs and program structures) are first-class entities that are manipulated by transformations. Programs are values, transformations map programs to other programs, and operators map transformations to transformations. The result is an algebra of programs: programs can be added, subtracted, and transformed. The algebra unifies important areas of software design in a very teachable way: refactorings are behavior-preserving program transformations, feature-based and aspect-oriented software synthesis use behavior-extending program transformations, and model-driven design exploits both to map platform-independent models to platform-specific models. The result of our work is a foundation for a new paradigm, languages, and tools for low-cost automated software design and development. The short-term impact of our work will be in software engineering education, where refactorings, features, aspects, and model-driven design can be presented as a coherent and integrated discipline; the longer-term impact will be on tools and languages in commercial software development.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/07/2007</MinAmdLetterDate>
<MaxAmdLetterDate>08/07/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0724979</AwardID>
<Investigator>
<FirstName>Don</FirstName>
<LastName>Batory</LastName>
<EmailAddress>batory@cs.utexas.edu</EmailAddress>
<StartDate>08/07/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>William</FirstName>
<LastName>Cook</LastName>
<EmailAddress>cook@cs.utexas.edu</EmailAddress>
<StartDate>08/07/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7652</Code>
<Text>SCIENCE OF DESIGN</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
