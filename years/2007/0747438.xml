<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:   Transforming Computer System Design</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2008</AwardEffectiveDate>
<AwardExpirationDate>12/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project attacks the high costs of architecting, implementation,&lt;br/&gt;and verifying computer systems as well as developing system and&lt;br/&gt;application software through the use of FPGA-Accelerate Simulation&lt;br/&gt;Technologies (FAST) simulators.  Rather than having to develop a&lt;br/&gt;distinct set of simulation and evaluation tools for each task, FAST&lt;br/&gt;simulators have been demonstrated to be both accurate enough and&lt;br/&gt;sufficiently easy to write to be useful to architects and are both&lt;br/&gt;full-system and fast enough to be useful to software developers.&lt;br/&gt;Initial FAST prototypes were not, however, directly useful to computer&lt;br/&gt;system implementation and verfication.  In addition, there is no&lt;br/&gt;mature methodology to verify FAST simulators themselves.&lt;br/&gt;&lt;br/&gt;The specification of a FAST simulator, however, contains sufficient&lt;br/&gt;information to specify a set of implementations, thus begging the&lt;br/&gt;question of whether one or more implementations could be automatically&lt;br/&gt;generated from such a specification.  This project is developing a&lt;br/&gt;tool chain to automatically transform a FAST simulator specification&lt;br/&gt;into an implementation, thus coupling architecture, implementation and&lt;br/&gt;software development, permitting all to be co-developed and making it&lt;br/&gt;easy for each to influence the other two.  An implementation can also&lt;br/&gt;be verified using conventional methods, meaning such an automatic&lt;br/&gt;transformation provides a conventional method to verify FAST&lt;br/&gt;simulators.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>01/22/2008</MinAmdLetterDate>
<MaxAmdLetterDate>04/05/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0747438</AwardID>
<Investigator>
<FirstName>Derek</FirstName>
<LastName>Chiou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Derek Chiou</PI_FULL_NAME>
<EmailAddress>derek@ece.utexas.edu</EmailAddress>
<PI_PHON>5122327722</PI_PHON>
<NSF_ID>000332399</NSF_ID>
<StartDate>01/22/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787595316</ZipCode>
<StreetAddress><![CDATA[3925 W Braker Lane, Ste 3.340]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~80000</FUND_OBLG>
<FUND_OBLG>2009~80000</FUND_OBLG>
<FUND_OBLG>2010~80000</FUND_OBLG>
<FUND_OBLG>2011~80000</FUND_OBLG>
<FUND_OBLG>2012~80000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In this grant we investigated the expressiveness and implementability of application descriptions that are split into a functional specification and resource-timing specification.&nbsp; For example, for a microprocessor, one can describe how each instruction operates independently of how long those instructions take to execute, which depends on when resources are used to execute those instructions.&nbsp; Thus, there is a functional component and a resource-timing component.</p> <p>We initially focused on describing simulators in this split way that enables the use of existing, fast functional-only simulators coupled with resource-timing models implemented in reconfigurable hardware in the form of field programmable gate arrays.&nbsp; Such simulators are capable of simulation performance three to four orders of magnitude faster than standard simulators of similar accuracy, potentially transforming a one year simulation into a one hour simulation. Such speed increases could transform the design of future computers, making them easier and faster to design.</p> <p>We significantly extended the usefulness of such simulators by generalizing them in a way that enabled the efficient modeling of all features in a modern microprocessor, including branch prediction, data speculation, and multicore processors including any memory consistency model on any platform that ran the simulator even if its memory consistency model differed from what was being simulated.&nbsp; This result is novel.&nbsp; No other simulator architecture is able to simultaneously model complex micro-architectures both quickly and accuracy, without regard to the underlying platform on which the simulator is running. Even if speed is not an issue, this simulator architecture can make simulator construction easier by factoring the simulator without losing accuracy.&nbsp; Such a simulator architecture could dramatically improve the performance of accurate simulators of complex microprocessors, which is critical for designing faster computers. This work was published in Computer Architecture Letters in 2009.</p> <p>We developed methodologies to transform such split simulator descriptions into full implementations would enable a "single source" instead of the separate implementations of the simulator and the full implementation that is the traditional way to do such designs.&nbsp; The result of this work could lead to much faster design cycles of computer systems, improving productivity, and improving the quality of computer systems.&nbsp; This work was published in the Design Automation Conference in 2011 and in the Asian-South Pacific Design Automation Conference in 2013.</p> <p>We also partially developed a power modeling methodology designed to work well with such simulators.&nbsp; The power models are derived from reference information generated by an accurate (but slow) power simulator or real measurements.&nbsp; Such power information contains potentially thousands to hundreds of thousands of possible signal values, each mapping to a single power consumed number based on those signal values, resulting in an extremely large, but extremely sparsely populated table.&nbsp; Our methodology automatically reduces such power information to a small lookup table that can be trivially incorporated into our fast, partitioned simulators.&nbsp; The accuracy of these power simulators is within a few percent of the reference power numbers and higher than state-of-the-art machine learning methods that we compared against.&nbsp;</p> <p>This work could lead to fast simulators that model not only performance accurately, but also power accurately.&nbsp; Since power has become a primary design constraint and predicting power accurately is traditionally multiple orders of magnitude slower than even very slow performance simulation, such a power modeling methodology could transform the design of more power efficient computer sy...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In this grant we investigated the expressiveness and implementability of application descriptions that are split into a functional specification and resource-timing specification.  For example, for a microprocessor, one can describe how each instruction operates independently of how long those instructions take to execute, which depends on when resources are used to execute those instructions.  Thus, there is a functional component and a resource-timing component.  We initially focused on describing simulators in this split way that enables the use of existing, fast functional-only simulators coupled with resource-timing models implemented in reconfigurable hardware in the form of field programmable gate arrays.  Such simulators are capable of simulation performance three to four orders of magnitude faster than standard simulators of similar accuracy, potentially transforming a one year simulation into a one hour simulation. Such speed increases could transform the design of future computers, making them easier and faster to design.  We significantly extended the usefulness of such simulators by generalizing them in a way that enabled the efficient modeling of all features in a modern microprocessor, including branch prediction, data speculation, and multicore processors including any memory consistency model on any platform that ran the simulator even if its memory consistency model differed from what was being simulated.  This result is novel.  No other simulator architecture is able to simultaneously model complex micro-architectures both quickly and accuracy, without regard to the underlying platform on which the simulator is running. Even if speed is not an issue, this simulator architecture can make simulator construction easier by factoring the simulator without losing accuracy.  Such a simulator architecture could dramatically improve the performance of accurate simulators of complex microprocessors, which is critical for designing faster computers. This work was published in Computer Architecture Letters in 2009.  We developed methodologies to transform such split simulator descriptions into full implementations would enable a "single source" instead of the separate implementations of the simulator and the full implementation that is the traditional way to do such designs.  The result of this work could lead to much faster design cycles of computer systems, improving productivity, and improving the quality of computer systems.  This work was published in the Design Automation Conference in 2011 and in the Asian-South Pacific Design Automation Conference in 2013.  We also partially developed a power modeling methodology designed to work well with such simulators.  The power models are derived from reference information generated by an accurate (but slow) power simulator or real measurements.  Such power information contains potentially thousands to hundreds of thousands of possible signal values, each mapping to a single power consumed number based on those signal values, resulting in an extremely large, but extremely sparsely populated table.  Our methodology automatically reduces such power information to a small lookup table that can be trivially incorporated into our fast, partitioned simulators.  The accuracy of these power simulators is within a few percent of the reference power numbers and higher than state-of-the-art machine learning methods that we compared against.   This work could lead to fast simulators that model not only performance accurately, but also power accurately.  Since power has become a primary design constraint and predicting power accurately is traditionally multiple orders of magnitude slower than even very slow performance simulation, such a power modeling methodology could transform the design of more power efficient computer systems by making a year-long simulator take minutes or seconds.  This work will be published in a thesis that will be completed this summer.  We then further gener...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
