<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Mimir: A Geometric Approach to Multi-dimensional Program Profiling Architectures</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2007</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>316000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>CCF-0702798&lt;br/&gt;&lt;br/&gt;Mimir: A Geometric Approach to Multi-dimensional Program Profiling Architectures&lt;br/&gt;&lt;br/&gt;Timothy P. Sherwood&lt;br/&gt;&lt;br/&gt;While mixed static-dynamic program analysis can be done completely in software through binary instrumentation, the amount of analysis that can be done at test-time is bounded by the performance impact that can be tolerated. The end goal of the Mimir project is to enable a new breed of hardware/software analysis tools, for researchers and system builders that can sift through on-line profile data at unprecedented speeds, yielding a highly accurate and timely image of computer system execution.  The cross-layer approach to be investigated combines the raw computational ability of custom architectures with the formal guarantees provided by carefully crafted stream algorithms. At a high level, the proposed algorithmic approach to profiling is grounded in geometry, implicitly motivated by the belief that many profiling patterns, trends, or anomalies have natural geometric representations that become discernible under a geometric lens.  At a low level, novel programmable hardware methods will provide a scalable and high performance substrate onto which these stream algorithms can be mapped. The combination of these two methods will allow online monitors to make streaming queries over live data at unprecedented speeds with the goal of enabling a new class of previously intractable dynamic analysis methods.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/17/2007</MinAmdLetterDate>
<MaxAmdLetterDate>04/09/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0702798</AwardID>
<Investigator>
<FirstName>Subhash</FirstName>
<LastName>Suri</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Subhash Suri</PI_FULL_NAME>
<EmailAddress>suri@cs.ucsb.edu</EmailAddress>
<PI_PHON>8058938856</PI_PHON>
<NSF_ID>000228429</NSF_ID>
<StartDate>08/17/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Timothy</FirstName>
<LastName>Sherwood</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Timothy P Sherwood</PI_FULL_NAME>
<EmailAddress>sherwood@cs.ucsb.edu</EmailAddress>
<PI_PHON>8058937426</PI_PHON>
<NSF_ID>000488790</NSF_ID>
<StartDate>08/17/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Barbara</Name>
<CityName>Santa Barbara</CityName>
<ZipCode>931062050</ZipCode>
<PhoneNumber>8058934188</PhoneNumber>
<StreetAddress>Office of Research</StreetAddress>
<StreetAddress2><![CDATA[Rm 3227 Cheadle Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA24</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>094878394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SANTA BARBARA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Santa Barbara]]></Name>
<CityName>Santa Barbara</CityName>
<StateCode>CA</StateCode>
<ZipCode>931062050</ZipCode>
<StreetAddress><![CDATA[Office of Research]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA24</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~109217</FUND_OBLG>
<FUND_OBLG>2008~190783</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software bugs are so damaging and widespread that they cost the U.S. economy an estimated $59.5 billion annually (more than half a percent of the GNP). Although it is certainly not possible to remove all errors, it is estimated that more than a third of the cost associated with bugs could be eliminated through an improved testing and analysis infrastructure. This grant funded new science aimed at developing the sophisticated software analysis and testing tools needed to discover complex pointer errors, memory leaks, race conditions, and performance anomalies from a sea of runtime data.</p> <p>Specifically, the Mimir project was successful in creating a new breed of hardware/software analysis tools (for researchers and system builders) that can sift through on-line profile data at unprecedented speeds, yielding a highly accurate and timely image of system execution. The techniques developed are useful in a variety of profiling situations, incur very little overhead even during complex on-line profile analysis, and provide guarantees of bounded error. Importantly, this meant showing not just how to do these analysis on pen and paper, but to scale the system to handle profile data at hundreds of gigabytes per second, the ability to perform significant streaming computation over irregular data structures, and non-trivial data aggregation and query methods. The key to success for this project was a cross-layer approach that combines the raw computational ability of custom architectures with the formal guarantees provided by carefully crafted stream algorithms.</p> <p>There were three major intellectual challenges to realizing a stream algorithm based profiling model: The first challenge was finding ways by which long slices of data can be extracted efficiently from an executing machine. Here we demonstrated that experimental new interconnect technologies, such as 3d-integration, offer a novel ability to include "snap-on" profiling functionality yielding access to processor signals at a rate of terabits/sec.&nbsp; The second challenge was managing this immense fountain of data; new online methods were used that operated on data in a streaming fashion to prevent storing all of this data for post processing. At a high level, our algorithmic approach to profiling is grounded in geometry, implicitly motivated by the belief that many profiling patterns, trends, or anomalies have natural geometric representations that become discernible under a geometric lens. The third challenge was in building a system that can implement a broad class of online program analysis algorithms, including the above streaming algorithms, in a high throughput and programmable way. Here we demonstrated that such an analysis can be efficiently supported on a reconfigurable logic platform, and building such a prototype system for the first time netted the researchers a best paper award from the International Conference on Parallel Architectures and Compilation Techniques in 2009.&nbsp; Our algorithmic approach to profiling builds upon concepts in computational geometry, driven by the understanding that many online program analysis problems have natural representation in geometric terms. Counting and tracking edges is a problem in the two dimensional space of code address x code address. Even race conditions are queries in the space of threadsets and virtual clocks. While this is not the way such problems are normally framed, in doing so we brought to bear the significant power of existing and developing streaming geometry algorithms. Our preliminary work on Range Adaptive Profiling is a geometric approach to tracking simple profile types (such as basic block execution frequencies, or the value profiling example above) and it describes a new and general purpose profiling method capable of hierarchically classifying streams of data efficiently in hardware.</p> <p>With respect to the broader impact of the...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software bugs are so damaging and widespread that they cost the U.S. economy an estimated $59.5 billion annually (more than half a percent of the GNP). Although it is certainly not possible to remove all errors, it is estimated that more than a third of the cost associated with bugs could be eliminated through an improved testing and analysis infrastructure. This grant funded new science aimed at developing the sophisticated software analysis and testing tools needed to discover complex pointer errors, memory leaks, race conditions, and performance anomalies from a sea of runtime data.  Specifically, the Mimir project was successful in creating a new breed of hardware/software analysis tools (for researchers and system builders) that can sift through on-line profile data at unprecedented speeds, yielding a highly accurate and timely image of system execution. The techniques developed are useful in a variety of profiling situations, incur very little overhead even during complex on-line profile analysis, and provide guarantees of bounded error. Importantly, this meant showing not just how to do these analysis on pen and paper, but to scale the system to handle profile data at hundreds of gigabytes per second, the ability to perform significant streaming computation over irregular data structures, and non-trivial data aggregation and query methods. The key to success for this project was a cross-layer approach that combines the raw computational ability of custom architectures with the formal guarantees provided by carefully crafted stream algorithms.  There were three major intellectual challenges to realizing a stream algorithm based profiling model: The first challenge was finding ways by which long slices of data can be extracted efficiently from an executing machine. Here we demonstrated that experimental new interconnect technologies, such as 3d-integration, offer a novel ability to include "snap-on" profiling functionality yielding access to processor signals at a rate of terabits/sec.  The second challenge was managing this immense fountain of data; new online methods were used that operated on data in a streaming fashion to prevent storing all of this data for post processing. At a high level, our algorithmic approach to profiling is grounded in geometry, implicitly motivated by the belief that many profiling patterns, trends, or anomalies have natural geometric representations that become discernible under a geometric lens. The third challenge was in building a system that can implement a broad class of online program analysis algorithms, including the above streaming algorithms, in a high throughput and programmable way. Here we demonstrated that such an analysis can be efficiently supported on a reconfigurable logic platform, and building such a prototype system for the first time netted the researchers a best paper award from the International Conference on Parallel Architectures and Compilation Techniques in 2009.  Our algorithmic approach to profiling builds upon concepts in computational geometry, driven by the understanding that many online program analysis problems have natural representation in geometric terms. Counting and tracking edges is a problem in the two dimensional space of code address x code address. Even race conditions are queries in the space of threadsets and virtual clocks. While this is not the way such problems are normally framed, in doing so we brought to bear the significant power of existing and developing streaming geometry algorithms. Our preliminary work on Range Adaptive Profiling is a geometric approach to tracking simple profile types (such as basic block execution frequencies, or the value profiling example above) and it describes a new and general purpose profiling method capable of hierarchically classifying streams of data efficiently in hardware.  With respect to the broader impact of the work completed, in addition to addressing an important problem facing the information tec...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
