<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>A Practical Dependently-Typed Functional Programming Language</AwardTitle>
<AwardEffectiveDate>05/15/2007</AwardEffectiveDate>
<AwardExpirationDate>04/30/2010</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>200000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>NSF 0702545&lt;br/&gt;Weirich, Stephanie&lt;br/&gt;U of Pennsylvania&lt;br/&gt;&lt;br/&gt;A Practical Dependently-typed Functional Programming Language&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Static type systems are a cost-effective form of lightweight program verification, providing a tractable way for programmers to express properties that can be mechanically checked.  However, while helpful,&lt;br/&gt;type systems used in practice verify relatively weak safety properties; they fall far short of program correctness.  This inexpressiveness is partly by design---full verification is expensive, not fully automatable, and often unwarranted.  Nevertheless, there are many situations where the ability to specify rich program properties would be useful. Among programming-language researchers, there is recent argument that techniques from dependent type theory provide a spectrum of possibilities between simple type safety and full verification&lt;br/&gt;&lt;br/&gt;The goal of this project is to advance the design of practical dependently-typed functional programming languages. In particular, the research focuses on two approaches:&lt;br/&gt;  * To design a fully dependently-typed language, using an&lt;br/&gt;    effect-type system to ensure soundness.&lt;br/&gt;  * To employ a combination of global and local type inference so&lt;br/&gt;    that programming with dependent types may be done concisely.&lt;br/&gt;&lt;br/&gt;The evaluation of these approaches is through the design of a prototype dependently-typed language.  As well as the contributions listed above, this project aids the education of both graduate and undergraduate students.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/07/2007</MinAmdLetterDate>
<MaxAmdLetterDate>02/05/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0702545</AwardID>
<Investigator>
<FirstName>Stephanie</FirstName>
<LastName>Weirich</LastName>
<EmailAddress>sweirich@cis.upenn.edu</EmailAddress>
<StartDate>05/07/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
