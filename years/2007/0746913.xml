<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:    Flexible Multi-Core Substrate for Trustworthy Computing Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2008</AwardEffectiveDate>
<AwardExpirationDate>01/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>425000.00</AwardTotalIntnAmount>
<AwardAmount>433750</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Multi-core architecture with 4 to 8 cores on a die is a reality today and future generations of processors are expected to contain even more cores per chip. This project targets to realize the full potential of large-scale multi-core processors as a secure and trustworthy computing substrate. First, in "many-core" processors, the availability of a large number of processing elements together with constraints on power consumption alleviates the need for heavy time-sharing of resources, which often results in various types of side-channels. This change enables the use of more dedicated and statically allocated resources in this project to provide strong isolation and a simplified trusted software base. Second, many programmable processing elements in large-scale multi-cores can serve as a general substrate for various types of fine-grained inspection. This project is developing a flexible architecture framework for various run-time checks with minimal overheads in order to automatically detect, diagnose, and recover from malicious software attacks. Finally, the project extends the architectural framework to other aspects of trust beyond security, focusing on post-silicon verification, where the dynamic inspection can ensure various correctness properties. The research will deliver the benefits of hardware support in security and verification without requiring dedicated resources for a single fixed mechanism. Users can use each "extended core" for various security purposes, for verification and reliability purposes, or even for general computing. At the same time, the research will also enable highly secure execution environments where critical software components can be better protected.</AbstractNarration>
<MinAmdLetterDate>01/22/2008</MinAmdLetterDate>
<MaxAmdLetterDate>04/13/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0746913</AwardID>
<Investigator>
<FirstName>Gookwon</FirstName>
<LastName>Suh</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gookwon E Suh</PI_FULL_NAME>
<EmailAddress>gs272@cornell.edu</EmailAddress>
<PI_PHON>6072556856</PI_PHON>
<NSF_ID>000104889</NSF_ID>
<StartDate>01/22/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cornell University</Name>
<CityName>Ithaca</CityName>
<ZipCode>148502820</ZipCode>
<PhoneNumber>6072555014</PhoneNumber>
<StreetAddress>373 Pine Tree Road</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY23</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>872612445</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CORNELL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002254837</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Cornell University]]></Name>
<CityName>Ithaca</CityName>
<StateCode>NY</StateCode>
<ZipCode>148502820</ZipCode>
<StreetAddress><![CDATA[373 Pine Tree Road]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY23</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2008~85000</FUND_OBLG>
<FUND_OBLG>2009~170000</FUND_OBLG>
<FUND_OBLG>2011~93750</FUND_OBLG>
<FUND_OBLG>2012~85000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project aimed to realize the full potential of large-scale multi-core processors as a secure and trustworthy computing substrate. While traditional microprocessors often contained only a single main processing core, modern processors include an increasing number of processing cores on a single chip. For example, high-end smartphone chips today use eight main processing cores. This move towards a large-scale multi-core processors presents both opportunities and challenges for building trustworthy computing systems, which this project aimed to address.</p> <p>The increasing number of processing cores presents an opportunity to use some of them to closely monitor program behaviors at run-time in parallel to other programs. This project developed hardware frameworks that utilize parallel computing resources in multi&shy;-core processors to efficiently monitor and detect a wide range of security attacks at run-time. For example, the project showed that comparing multiple diversified copies of a program or explicitly checking security invariants can detect many common security exploits. The project also extended the run-time monitoring frameworks for real-time systems where the worst-case execution time must be guaranteed. This work enables the protection techniques to be applied to safety-critical real-time systems such as airplane and automotive control systems.</p> <p>The large-scale multi-core processors also present new challenges in building secure systems. For example, recent studies have shown that multiple programs that run concurrently on the same hardware can leak information through interference in shared hardware resources. This project developed new techniques to provide strong isolation of concurrent software components on multi-core systems by removing timing-based information leaks. These techniques provide important building blocks for secure cloud computing platforms where multiple virtual machines are truly isolated.</p> <p>Another challenge in building secure multi-core systems come from the added complexity in developing correct and secure software programs that need to carefully coordinate multiple parallel computations. As a result, parallel program bugs represent an emerging security threat in the many&shy;core era. This project developed new techniques to detect a broad range of parallel program bugs, including traditional data races as well as new non-race bugs.</p> <p>For broader impacts, the project included multiple educational activities. For example, the project trained many graduate and undergraduate students through research activities. The research outcomes were used to developed two new graduate-level courses that teach security challenges and techniques to future hardware engineers. The PI also organized summer programs for high school students to encourage underrepresented students to pursue careers in engineering, and provided tutorials on hardware-based security at major computer architecture and security conferences.</p><br> <p>            Last Modified: 04/27/2015<br>      Modified by: Gookwon&nbsp;E&nbsp;Suh</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project aimed to realize the full potential of large-scale multi-core processors as a secure and trustworthy computing substrate. While traditional microprocessors often contained only a single main processing core, modern processors include an increasing number of processing cores on a single chip. For example, high-end smartphone chips today use eight main processing cores. This move towards a large-scale multi-core processors presents both opportunities and challenges for building trustworthy computing systems, which this project aimed to address.  The increasing number of processing cores presents an opportunity to use some of them to closely monitor program behaviors at run-time in parallel to other programs. This project developed hardware frameworks that utilize parallel computing resources in multi&shy;-core processors to efficiently monitor and detect a wide range of security attacks at run-time. For example, the project showed that comparing multiple diversified copies of a program or explicitly checking security invariants can detect many common security exploits. The project also extended the run-time monitoring frameworks for real-time systems where the worst-case execution time must be guaranteed. This work enables the protection techniques to be applied to safety-critical real-time systems such as airplane and automotive control systems.  The large-scale multi-core processors also present new challenges in building secure systems. For example, recent studies have shown that multiple programs that run concurrently on the same hardware can leak information through interference in shared hardware resources. This project developed new techniques to provide strong isolation of concurrent software components on multi-core systems by removing timing-based information leaks. These techniques provide important building blocks for secure cloud computing platforms where multiple virtual machines are truly isolated.  Another challenge in building secure multi-core systems come from the added complexity in developing correct and secure software programs that need to carefully coordinate multiple parallel computations. As a result, parallel program bugs represent an emerging security threat in the many&shy;core era. This project developed new techniques to detect a broad range of parallel program bugs, including traditional data races as well as new non-race bugs.  For broader impacts, the project included multiple educational activities. For example, the project trained many graduate and undergraduate students through research activities. The research outcomes were used to developed two new graduate-level courses that teach security challenges and techniques to future hardware engineers. The PI also organized summer programs for high school students to encourage underrepresented students to pursue careers in engineering, and provided tutorials on hardware-based security at major computer architecture and security conferences.       Last Modified: 04/27/2015       Submitted by: Gookwon E Suh]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
