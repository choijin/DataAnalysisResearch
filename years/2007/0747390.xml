<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Scalable Automated Software Testing and Repair</AwardTitle>
<AwardEffectiveDate>07/01/2008</AwardEffectiveDate>
<AwardExpirationDate>06/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Proposal number: CCF-0747390 &lt;br/&gt;TITLE: CAREER: Scalable Automated Software Testing and Repair &lt;br/&gt;PI: Koushik Sen &lt;br/&gt;Abstract: &lt;br/&gt;Today's software systems suffer from poor reliability, with software errors costing the U.S. economy upwards of $60 billion annually.  Testing is the predominant technique in industry to ensure software quality.  Existing test generation techniques, such as random testing and symbolic execution based test generation, are either not effective or not scalable.  This project investigates techniques to make automated test generation and automated bug fixing fast, scalable, and exhaustive by bridging the gap between practical techniques, such as testing, and mathematically rigorous techniques, such as model checking and symbolic analysis.  Specifically, the project integrates ideas from randomized algorithms, symbolic analysis and model checking, and computational machine learning and develops novel ideas in three research efforts: (1) develop techniques for fast and exhaustive unit test generation; (2) scale automated testing to large software through compositional reasoning; and (3) investigate techniques for automated repair advice generation where automated test generation is used to automatically generate candidate program variants that could potentially fix the bugs discovered during testing.  This project will immediately benefit the software industry where testing and bug fixing consume more than half of the total software development cost.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/06/2008</MinAmdLetterDate>
<MaxAmdLetterDate>06/27/2012</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0747390</AwardID>
<Investigator>
<FirstName>Koushik</FirstName>
<LastName>Sen</LastName>
<EmailAddress>ksen@eecs.berkeley.edu</EmailAddress>
<StartDate>06/06/2008</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
