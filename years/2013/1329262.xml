<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Computational Worked Examples for Scaffolding Student Representational Fluency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>313889.00</AwardTotalIntnAmount>
<AwardAmount>313889</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07050000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>EEC</Abbreviation>
<LongName>Div Of Engineering Education and Centers</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Julie Martin</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Technical Description:&lt;br/&gt;&lt;br/&gt;The goal for this Research in Engineering Education project is to identify how computational worked examples coupled with a fading strategy can effectively scaffold student development of representational fluency across qualitative and quantitative representations in engineering. This will be accomplished through these objectives: &lt;br/&gt;&lt;br/&gt;Objective 1: Use research on complex task learning to develop and implement a set of computational worked examples. &lt;br/&gt;&lt;br/&gt;Objective 2: Use naturalistic and quasi-experimental investigations through design-based research to examine the foundational research question. &lt;br/&gt;&lt;br/&gt;Objective 3: Disseminate results to ensure broad impacts among intended audiences.&lt;br/&gt;&lt;br/&gt;The foundational research question is: "How computational worked examples can effectively scaffold student development of representational fluency translating from qualitative to quantitative representations?" We will approach this investigation using design-based research coupling phenomenographic methods with quantitative methods. The long-term goal of this research is to establish an integrated evidence based program of research to practice centered on how people develop representational fluency, and to use this knowledge to develop strategies that will prepare the next generation of scientists and engineers to be capable of addressing complex interdisciplinary problems.&lt;br/&gt;&lt;br/&gt;Broader Impact and Importance:&lt;br/&gt;&lt;br/&gt;Computing is having major implications in discovery and innovation by supporting advances in healthcare, energy, economic competitiveness, and national security. Training and engagement of the next generation of work force engineers able to integrate and take advantage of computation successfully must be an integral part of modern engineering education in order to create new opportunities for complex interdisciplinary work. Graphical representations and other visual representations of the results of computational problem solving are central to scientific research as well as to the solution of complex problems in workplace engineering. Specifically, they are used in engineering as tools to gain insight into the material world, further interpret information about a problem, identify relationships between its components, and provide potential solutions to it. Future engineers need to develop representational fluency, or the ability to describe a problem and solutions obtained using computational tools visually and in physical terms, across diverse types of media. The outcomes of this research will include a set of principles for the design and integration of computational worked examples in engineering disciplinary courses. Findings will boost the chances for engineering discovery and innovation success and will help the United States take advantage of the role of computation in engineering sooner, better, and with greater confidence.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;This research is supported by the Research in Engineering Education Program of the Engineering Education and Centers Division.</AbstractNarration>
<MinAmdLetterDate>08/20/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/20/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1329262</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Falk</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael L Falk</PI_FULL_NAME>
<EmailAddress>mfalk@jhu.edu</EmailAddress>
<PI_PHON>4109294242</PI_PHON>
<NSF_ID>000172156</NSF_ID>
<StartDate>08/20/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Edwin</FirstName>
<LastName>Garcia</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Edwin Garcia</PI_FULL_NAME>
<EmailAddress>redwing@purdue.edu</EmailAddress>
<PI_PHON>7654940148</PI_PHON>
<NSF_ID>000101910</NSF_ID>
<StartDate>08/20/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Alejandra</FirstName>
<LastName>Magana-de-Leon</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Alejandra J Magana-de-Leon</PI_FULL_NAME>
<EmailAddress>admagana@purdue.edu</EmailAddress>
<PI_PHON>7654943994</PI_PHON>
<NSF_ID>000541666</NSF_ID>
<StartDate>08/20/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072045</ZipCode>
<StreetAddress><![CDATA[401 Grant Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1340</Code>
<Text>EngEd-Engineering Education</Text>
</ProgramElement>
<ProgramReference>
<Code>110E</Code>
<Text>EDUCATION RESEARCH</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~313889</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The identification of design principles for the implementation of worked-examples and their learning benefits in the context of computational science and engineering is the main contribution of this project.</p> <p><em>Intellectual Merit: </em>The use of in-code comments as a self-explanation strategy to engage students with worked out examples was proven beneficial for students as follows: (1) writing in-code comments can be beneficial as self-explanation strategy to engage students with the examples; (2) students benefit from the self-explanation activities in several ways including getting familiar with the syntax, connecting individual lines of code to the overall goal of the example, identifying effective strategies of algorithm design, practicing commenting skills, and connecting the computational lab sessions to their discipline; (3) student approaches to self-explain are related to their ability to do computer programming. While novices take these activities as a learning opportunity to reflect on their own learning, more experienced students write simple comment assuming that the code speaks for itself. Most experienced students create explain their own solution instead of the worked-example provided; and (4) code snippets help students to divide their work on specific steps, reducing the degrees of freedom and keeping students on the right track to find a solution.</p> <p>A second outcome of this study was the generation of a coding scheme for describing types of knowledge students&rsquo; used to construct their explanations.&nbsp; The coding scheme evaluated four dimensions of learning: declarative knowledge, procedural knowledge, schematic knowledge and strategic knowledge.&nbsp; This coding scheme can have different instructional uses: (1) it can be used to assess students&rsquo; ability to communicate and collaborate with peers through the use of comments in computational science and engineering; (2) it can be used as an instructional material to support students&rsquo; self-explanation process, leading to a better understanding of the examples; and (3) it can be used as a research tool to identify the self-explanation effect on different areas in engineering education.</p> <p>A third outcome of this study was the identification of students&rsquo; approaches to self-explain. Four approaches to self-explain were identified in two contexts. In a freshmen level programming course, the reasoners corresponded to students who had a strong background knowledge that enabled them to solve the problem on their own instead of self-explaining the provided solution. The limited explainers corresponded to a small group of students who depicted some common misunderstandings in programming, while the mechanistic explainers focused on the how the program worked. The principle-based explainers were students who described the rationale for several sections of the code and made connections to background knowledge and principles. In a thermodynamics sophomore course, two additional types of explainers emerged. The problem-oriented explainers made connections to the problem statement to explain the code, and the declarative explainers wrote simple explanations focusing mostly in declarative knowledge.</p> <p>A fourth outcome of this project corresponds to the identification of a relationship between students&rsquo; ability to do computer programming and their approaches to self-explain in a disciplinary-programming course. The implications of these findings are two-fold: (1) in order to identify the self-explanation effect in this context, the prior experience with computer programming needs to be taken into account; (2) the quality of students&rsquo; explanations in this context may have a different meaning for novice and expert programmers. While expert programmers may assume that the code speaks for itself, novices reflect on their understanding of the example and provide comprehensive explanations. These long explanations can have a negative effect on the code readability.</p> <p><em>Broader Impact: </em>The curricular materials and findings of the research associated with this project have a direct impact on the Materials Science and Engineering discipline, as well as other engineering disciplines.&nbsp;Over the last decade many significant changes have taken place in Materials Science and Engineering, but among the most significant of these changes has been the increasingly central role of computational methods in characterizing structure, simulating processes and predicting materials' response. In academia this change has been most notable with the establishment of "computational materials science and engineering" as a recognized sub-discipline. &nbsp;</p> <p>The guidelines for the implementation of worked-examples in this context can be used for faculty professional development as a framework to design learning activities. &nbsp;As we developed the guidelines to implement worked-examples in the context of computational science, engineering students both at Purdue University (n=130) and at Johns Hopkins University (n=100) benefited from this approach.&nbsp;Two engineering faculty with no previous experience in educational research, and who participated in this project, have familiarized with the instructional principles and have adopted them for the design of educational materials.&nbsp; We have also been working with four more professors who have started to implement worked examples and in-code comments into their own courses. Moreover, postdoctoral and doctoral students received training in educational research methods and learning design.&nbsp; Faculty development workshops were also delivered to intended audiences.</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/13/2017<br>      Modified by: Alejandra&nbsp;J&nbsp;Magana-De-Leon</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The identification of design principles for the implementation of worked-examples and their learning benefits in the context of computational science and engineering is the main contribution of this project.  Intellectual Merit: The use of in-code comments as a self-explanation strategy to engage students with worked out examples was proven beneficial for students as follows: (1) writing in-code comments can be beneficial as self-explanation strategy to engage students with the examples; (2) students benefit from the self-explanation activities in several ways including getting familiar with the syntax, connecting individual lines of code to the overall goal of the example, identifying effective strategies of algorithm design, practicing commenting skills, and connecting the computational lab sessions to their discipline; (3) student approaches to self-explain are related to their ability to do computer programming. While novices take these activities as a learning opportunity to reflect on their own learning, more experienced students write simple comment assuming that the code speaks for itself. Most experienced students create explain their own solution instead of the worked-example provided; and (4) code snippets help students to divide their work on specific steps, reducing the degrees of freedom and keeping students on the right track to find a solution.  A second outcome of this study was the generation of a coding scheme for describing types of knowledge students? used to construct their explanations.  The coding scheme evaluated four dimensions of learning: declarative knowledge, procedural knowledge, schematic knowledge and strategic knowledge.  This coding scheme can have different instructional uses: (1) it can be used to assess students? ability to communicate and collaborate with peers through the use of comments in computational science and engineering; (2) it can be used as an instructional material to support students? self-explanation process, leading to a better understanding of the examples; and (3) it can be used as a research tool to identify the self-explanation effect on different areas in engineering education.  A third outcome of this study was the identification of students? approaches to self-explain. Four approaches to self-explain were identified in two contexts. In a freshmen level programming course, the reasoners corresponded to students who had a strong background knowledge that enabled them to solve the problem on their own instead of self-explaining the provided solution. The limited explainers corresponded to a small group of students who depicted some common misunderstandings in programming, while the mechanistic explainers focused on the how the program worked. The principle-based explainers were students who described the rationale for several sections of the code and made connections to background knowledge and principles. In a thermodynamics sophomore course, two additional types of explainers emerged. The problem-oriented explainers made connections to the problem statement to explain the code, and the declarative explainers wrote simple explanations focusing mostly in declarative knowledge.  A fourth outcome of this project corresponds to the identification of a relationship between students? ability to do computer programming and their approaches to self-explain in a disciplinary-programming course. The implications of these findings are two-fold: (1) in order to identify the self-explanation effect in this context, the prior experience with computer programming needs to be taken into account; (2) the quality of students? explanations in this context may have a different meaning for novice and expert programmers. While expert programmers may assume that the code speaks for itself, novices reflect on their understanding of the example and provide comprehensive explanations. These long explanations can have a negative effect on the code readability.  Broader Impact: The curricular materials and findings of the research associated with this project have a direct impact on the Materials Science and Engineering discipline, as well as other engineering disciplines. Over the last decade many significant changes have taken place in Materials Science and Engineering, but among the most significant of these changes has been the increasingly central role of computational methods in characterizing structure, simulating processes and predicting materials' response. In academia this change has been most notable with the establishment of "computational materials science and engineering" as a recognized sub-discipline.    The guidelines for the implementation of worked-examples in this context can be used for faculty professional development as a framework to design learning activities.  As we developed the guidelines to implement worked-examples in the context of computational science, engineering students both at Purdue University (n=130) and at Johns Hopkins University (n=100) benefited from this approach. Two engineering faculty with no previous experience in educational research, and who participated in this project, have familiarized with the instructional principles and have adopted them for the design of educational materials.  We have also been working with four more professors who have started to implement worked examples and in-code comments into their own courses. Moreover, postdoctoral and doctoral students received training in educational research methods and learning design.  Faculty development workshops were also delivered to intended audiences.          Last Modified: 11/13/2017       Submitted by: Alejandra J Magana-De-Leon]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
