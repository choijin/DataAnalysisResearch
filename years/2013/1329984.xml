<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPS: Synergy: Collaborative Research: Safety-Feature Modeling and Adaptive Resource Management for Mixed-Criticality Cyber-Physical Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>600000.00</AwardTotalIntnAmount>
<AwardAmount>600000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>To ensure operational safety of complex cyber-physical systems such as automobiles, aircraft, and medical devices, new models, analyses, platforms, and development techniques are needed that can predict, possible interactions between features, detect them in the features' concrete implementations, and either eliminate or mitigate such interactions through precise modeling and enforcement of mixed-criticality cyber-physical system semantics. This project is taking a novel approach to reasoning about and managing feature interactions in cyber-physical systems, which encompasses interactions within software, interactions through the physical dynamics of the system, and interactions via shared computational resources. The proposed approach consists of three tightly coupled research thrusts: (1) a novel way of modeling features as automata equipped with both physical dynamics of the feature environment, and an assigned criticality level in each state of an automaton, (2) new automata-theoretic and control-theoretic analysis techniques, enabled by the modeling approach, and (3) new algorithms for adaptive sharing of computational resources between individual features that are guaranteed to satisfy the assumptions made during analysis, realized within a novel mixed-criticality cyber-physical platform architecture.  The modeling approach will introduce a new model for mixed-criticality cyber-physical components and will support modern development standards, such as AUTOSAR in the automotive industry, for assigning criticality levels to features. Component interfaces in this model will capture control modes and the associated physical dynamics, operating modes and the associated resource requirements and criticality level, as well as relationships between control modes and operating modes. Analysis of features expressed in the proposed model will include detection of interactions and exploration of their effect on safety properties of the composite system.  The broader impacts of the proposed work are twofold. One impact lies in the pervasive use of cyber-physical systems in our society. If the developed results are adopted in industry, it may help to promote improved safety of such systems. Results of the proposed research will be used in courses offered at both University of Pennsylvania and Washington University at the graduate and undergraduate levels. The project will also provide students with opportunities to get involved in cutting edge research within their fields of study</AbstractNarration>
<MinAmdLetterDate>09/23/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/23/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1329984</AwardID>
<Investigator>
<FirstName>Insup</FirstName>
<LastName>Lee</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Insup Lee</PI_FULL_NAME>
<EmailAddress>lee@cis.upenn.edu</EmailAddress>
<PI_PHON>2158983532</PI_PHON>
<NSF_ID>000254728</NSF_ID>
<StartDate>09/23/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Oleg</FirstName>
<LastName>Sokolsky</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Oleg Sokolsky</PI_FULL_NAME>
<EmailAddress>sokolsky@cis.upenn.edu</EmailAddress>
<PI_PHON>2158984448</PI_PHON>
<NSF_ID>000183215</NSF_ID>
<StartDate>09/23/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Linh Thi Xuan</FirstName>
<LastName>Phan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Linh Thi Xuan Phan</PI_FULL_NAME>
<EmailAddress>linhphan@cis.upenn.edu</EmailAddress>
<PI_PHON>2158987293</PI_PHON>
<NSF_ID>000581290</NSF_ID>
<StartDate>09/23/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<StreetAddress2><![CDATA[3451 Walnut St, 5th Flr Franklin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042250712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042250712</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Pennsylvania]]></Name>
<CityName>Philadelphia</CityName>
<StateCode>PA</StateCode>
<ZipCode>191046205</ZipCode>
<StreetAddress><![CDATA[3451 Walnut Street P-221]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7918</Code>
<Text>CPS-Cyber-Physical Systems</Text>
</ProgramElement>
<ProgramReference>
<Code>7918</Code>
<Text>CYBER-PHYSICAL SYSTEMS (CPS)</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~600000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Modern embedded control systems in vehicles, medical devices, and other safety-critical domains are undergoing a major infrastructure shift from single-core to multi-core processors.&nbsp; To stay cost effective, developers of next generation control software for these systems need to utilize the additional power of multiple cores.&nbsp; An appealing way to do it is to combine several control applications on the same processor node.&nbsp; For example, engine controller and anti-lock brake controller can share a processor, each using one core.<br /><br />Modern software engineering techniques provide strong support for functional isolation of different applications on the same processor, giving each application an abstraction of having the whole processor node to itself.&nbsp; Hardware virtualization techniques enable applications to be designed independently and seamlessly deployed together on an multi-core platform.&nbsp; Unfortunately, such functional isolation is not sufficient for control systems.&nbsp; Control systems and other embedded software are real-time systems, meaning that their correct operation depends not only on functional correctness, but also on the timing of their execution.&nbsp; This means that, in addition to functional isolation, a multicore platform should also provide timing isolation for the applications running on the platform.&nbsp; There are many ways in which applications can affect timing of each other through shared resources of the platform, such as input/output devices, shared cache, and platform scheduler.&nbsp; Timing isolation, unlike functional isolation, is not provided by existing mainstream virtualization platforms.<br /><br />To address this need, we have developed a real-time virtualization platform, called RT-Xen, based on the widely used Xen platform.&nbsp; RT-Xen is based on state-of-the-art compositional scheduling theory and provides means to share input/output devices and cache is a predictable and analyzable way.&nbsp; We demonstrated its utility using an autonomous car testbed.<br /><br />RT-Xen has been designed and implemented in close coordination with Xen developer community.&nbsp; Because of this working relationship, and our faithful support of all Xen interfaces, RT-Xen has been incorporated into the mainstream release of Xen.&nbsp; RT-Xen provides drop-in replacements for several Xen modules, most importantly, the platform scheduler.&nbsp; This offers Xen users an easy pathway to transition to real-time virtualization in embedded systems projects.&nbsp; In turn, wider availability of the technology may ultimately enable more efficient and reliable designs for commonly used systems, such as cars and trains.</p><br> <p>            Last Modified: 11/15/2017<br>      Modified by: Oleg&nbsp;Sokolsky</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Modern embedded control systems in vehicles, medical devices, and other safety-critical domains are undergoing a major infrastructure shift from single-core to multi-core processors.  To stay cost effective, developers of next generation control software for these systems need to utilize the additional power of multiple cores.  An appealing way to do it is to combine several control applications on the same processor node.  For example, engine controller and anti-lock brake controller can share a processor, each using one core.  Modern software engineering techniques provide strong support for functional isolation of different applications on the same processor, giving each application an abstraction of having the whole processor node to itself.  Hardware virtualization techniques enable applications to be designed independently and seamlessly deployed together on an multi-core platform.  Unfortunately, such functional isolation is not sufficient for control systems.  Control systems and other embedded software are real-time systems, meaning that their correct operation depends not only on functional correctness, but also on the timing of their execution.  This means that, in addition to functional isolation, a multicore platform should also provide timing isolation for the applications running on the platform.  There are many ways in which applications can affect timing of each other through shared resources of the platform, such as input/output devices, shared cache, and platform scheduler.  Timing isolation, unlike functional isolation, is not provided by existing mainstream virtualization platforms.  To address this need, we have developed a real-time virtualization platform, called RT-Xen, based on the widely used Xen platform.  RT-Xen is based on state-of-the-art compositional scheduling theory and provides means to share input/output devices and cache is a predictable and analyzable way.  We demonstrated its utility using an autonomous car testbed.  RT-Xen has been designed and implemented in close coordination with Xen developer community.  Because of this working relationship, and our faithful support of all Xen interfaces, RT-Xen has been incorporated into the mainstream release of Xen.  RT-Xen provides drop-in replacements for several Xen modules, most importantly, the platform scheduler.  This offers Xen users an easy pathway to transition to real-time virtualization in embedded systems projects.  In turn, wider availability of the technology may ultimately enable more efficient and reliable designs for commonly used systems, such as cars and trains.       Last Modified: 11/15/2017       Submitted by: Oleg Sokolsky]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
