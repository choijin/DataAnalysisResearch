<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Ascend: Architecture for Secure Computation on Encrypted Data</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>549967</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Outsourcing computation to the cloud has a difficult set of privacy challenges, a primary one being that the client cannot really trust cloud or application software. Encrypted computation achieves privacy by having the user specify encrypted inputs to a program in the cloud and returning encrypted results.&lt;br/&gt;&lt;br/&gt;The design and implementation of a secure processor architecture, called Ascend, that guarantees privacy of data computed upon by untrusted programs and run on an untrusted operating system (OS) is underway.  Our security goal is to only trust the Ascend processor chip and show that it is secure against software attacks and power analysis attacks on its pins even though application and system software can be malicious. Our performance goal is to show that execution time and energy overheads of encrypted computation are reasonable.  The key idea in Ascend to guarantee privacy is obfuscated program execution: from the perspective of the Ascend chip's input/output and power pins, an untrusted server cannot learn anything about private user data regardless of the program run.&lt;br/&gt;&lt;br/&gt;Through innovations in architectural mechanisms, security protocols, and applied cryptography, we hope to show that it is viable to only trust hardware and not trust any software in some security-conscious applications, thereby substantially minimizing the trusted computing base for these applications. The development of simulator infrastructure and hardware prototypes will allow the fruits of the research to be widely disseminated. This project will introduce high-school students to research in applied cryptography and security through an innovative high-school outreach program.</AbstractNarration>
<MinAmdLetterDate>08/30/2013</MinAmdLetterDate>
<MaxAmdLetterDate>12/20/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1317763</AwardID>
<Investigator>
<FirstName>Srini</FirstName>
<LastName>Devadas</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Srini Devadas</PI_FULL_NAME>
<EmailAddress>devadas@mit.edu</EmailAddress>
<PI_PHON>6172530454</PI_PHON>
<NSF_ID>000451511</NSF_ID>
<StartDate>08/30/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394827</ZipCode>
<StreetAddress><![CDATA[32 Vassar Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1668</Code>
<Text>CYBERCORPS: SCHLAR FOR SER</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0414</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~500000</FUND_OBLG>
<FUND_OBLG>2014~49967</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Helvetica} --> <!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Helvetica} --> <p class="p1">Privacy of data storage has long been a central problem in computer security, having direct&nbsp;<span style="font-size: 12px;">implications for many Internet-era applications such as storage/computation outsourcing&nbsp;</span><span style="font-size: 12px;">and the Internet of Things (IoT). Yet, the prevailing way we protect our data -- through&nbsp;</span><span style="font-size: 12px;">encryption techniques -- doesn't protect where we read or write in our data. This additional&nbsp;</span><span style="font-size: 12px;">information, the access pattern, can be used to reverse-engineer proprietary programs as&nbsp;</span><span style="font-size: 12px;">they run, reveal a user's physical location or health information, and more, even if data is&nbsp;</span><span style="font-size: 12px;">correctly encrypted.</span></p> <p class="p1">This project studied a cryptographic primitive called Oblivious RAM (ORAM) which&nbsp;<span style="font-size: 12px;">provably hides a client's access pattern as seen by untrusted storage. While ORAM is very&nbsp;</span><span style="font-size: 12px;">compelling from a privacy standpoint, it incurs a large performance overhead and can require&nbsp;</span><span style="font-size: 12px;">a large amount of client (trusted) storage. In particular, ORAM schemes require the client&nbsp;</span><span style="font-size: 12px;">to continuously shuffle the data stored in the untrusted storage, using the trusted storage.</span></p> <p class="p1">Early work on ORAM proves that this operation must incur a client-storage bandwidth&nbsp;<span style="font-size: 12px;">blowup that is logarithmic in the dataset size, which can translate to &gt; 100 in practice.&nbsp;</span><span style="font-size: 12px;">We addressed this challenge by developing new tools for constructing ORAMs that allow&nbsp;</span><span style="font-size: 12px;">us to achieve constant bandwidth blowup while requiring only small client storage. A recurring&nbsp;</span><span style="font-size: 12px;">theme in our project is to grant untrusted storage the ability to perform untrusted computation&nbsp;</span><span style="font-size: 12px;">on behalf of the client, thereby circumventing lower bound results from prior work. Using&nbsp;</span><span style="font-size: 12px;">these tools, we constructed a new ORAM called Ring ORAM, the first small client storage&nbsp;</span><span style="font-size: 12px;">ORAM to achieve constant online bandwidth blowup. At the same time, Ring ORAM&nbsp;</span><span style="font-size: 12px;">matches or improves upon the overall bandwidth of all prior ORAM schemes (given equal&nbsp;</span><span style="font-size: 12px;">client storage), up to constant factors.</span></p> <p class="p1"><span style="font-size: 12px;">Finally, we demonstrated a working ORAM prototype, built into hardware in a processor called Ascend and taped-out&nbsp;</span><span style="font-size: 12px;">in 32 nm silicon. We have deployed the design as the on-chip memory controller for a 25-</span><span style="font-size: 12px;">core processor. This proves the viability of a single-chip secure processor that can prevent&nbsp;</span><span style="font-size: 12px;">software IP or data theft through a program's access pattern to main memory (having&nbsp;</span><span style="font-size: 12px;">applications to computation outsourcing and IoT). From a technical perspective, this work&nbsp;</span><span style="font-size: 12px;">represents the first ORAM client built into silicon and the first hardware ORAM with small&nbsp;</span><span style="font-size: 12px;">client storage, integrity verification, or encryption units. We proposed a number of additional&nbsp;</span><span style="font-size: 12px;">optimizations to improve performance in the hardware setting.</span></p> <p class="p1">&nbsp;</p><br> <p>            Last Modified: 10/01/2017<br>      Modified by: Srini&nbsp;Devadas</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Privacy of data storage has long been a central problem in computer security, having direct implications for many Internet-era applications such as storage/computation outsourcing and the Internet of Things (IoT). Yet, the prevailing way we protect our data -- through encryption techniques -- doesn't protect where we read or write in our data. This additional information, the access pattern, can be used to reverse-engineer proprietary programs as they run, reveal a user's physical location or health information, and more, even if data is correctly encrypted. This project studied a cryptographic primitive called Oblivious RAM (ORAM) which provably hides a client's access pattern as seen by untrusted storage. While ORAM is very compelling from a privacy standpoint, it incurs a large performance overhead and can require a large amount of client (trusted) storage. In particular, ORAM schemes require the client to continuously shuffle the data stored in the untrusted storage, using the trusted storage. Early work on ORAM proves that this operation must incur a client-storage bandwidth blowup that is logarithmic in the dataset size, which can translate to &gt; 100 in practice. We addressed this challenge by developing new tools for constructing ORAMs that allow us to achieve constant bandwidth blowup while requiring only small client storage. A recurring theme in our project is to grant untrusted storage the ability to perform untrusted computation on behalf of the client, thereby circumventing lower bound results from prior work. Using these tools, we constructed a new ORAM called Ring ORAM, the first small client storage ORAM to achieve constant online bandwidth blowup. At the same time, Ring ORAM matches or improves upon the overall bandwidth of all prior ORAM schemes (given equal client storage), up to constant factors. Finally, we demonstrated a working ORAM prototype, built into hardware in a processor called Ascend and taped-out in 32 nm silicon. We have deployed the design as the on-chip memory controller for a 25-core processor. This proves the viability of a single-chip secure processor that can prevent software IP or data theft through a program's access pattern to main memory (having applications to computation outsourcing and IoT). From a technical perspective, this work represents the first ORAM client built into silicon and the first hardware ORAM with small client storage, integrity verification, or encryption units. We proposed a number of additional optimizations to improve performance in the hardware setting.         Last Modified: 10/01/2017       Submitted by: Srini Devadas]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
