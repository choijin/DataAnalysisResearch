<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Foundations for User Interface Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>399994.00</AwardTotalIntnAmount>
<AwardAmount>399994</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>More than one-third of all program code exists to implement user interfaces and this code contains an even larger portion of all defects. This is no surprise; user interface code is seldom reusable and current event-handling-based approaches to user interface programming require programmers to manage a large number of details; too many to consistently produce correct and rich user interface behaviors. The impact is experienced by all computer users: user interfaces get stuck, behave illogically, lose information, lack crucial or useful functionality, or are simply confusing.  The result is user frustration and wasted effort, a very significant cost when aggregated over all users, and significant even to one user when aggregated over all of his or her computer use. This project seeks advances in user interface programming, studying a declarative approach where many behaviors of user interfaces can be expressed as reusable algorithms encoded in software libraries. This drastically reduces the details that an application programmer needs to be concerned with; application-specific "event handling" code is not necessary at all. The goal is to significantly reduce the cost of producing high quality user interfaces, and, indirectly through better user interfaces, to make our interactions with computers less frustrating and more productive.&lt;br/&gt;&lt;br/&gt;The proposed declarative programming approach is based on multi-way data-flow constraint systems, which are applied to model the data directly manipulated by user interfaces and the dependencies within that data. The project seeks to show that once an application programmer specifies such a constraint system and connects it to the visual elements of a user interface, a large class of the interface's behavior can be derived from reusable algorithms parametrized over the constraint system.  Examples of such behaviors include updating values of elements based on user interaction on other user interface elements, enabling and disabling user interface elements, keeping the user interface maximally responsive by concurrently executing computations triggered by users' interactions, managing changes in the structure of the user interface, and correctly orchestrating all of the above.</AbstractNarration>
<MinAmdLetterDate>08/07/2013</MinAmdLetterDate>
<MaxAmdLetterDate>10/04/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320092</AwardID>
<Investigator>
<FirstName>Jaakko</FirstName>
<LastName>Jarvi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jaakko Jarvi</PI_FULL_NAME>
<EmailAddress>jarvi@cse.tamu.edu</EmailAddress>
<PI_PHON>9798454359</PI_PHON>
<NSF_ID>000287441</NSF_ID>
<StartDate>10/04/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jaakko</FirstName>
<LastName>Jarvi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jaakko Jarvi</PI_FULL_NAME>
<EmailAddress>jarvi@cse.tamu.edu</EmailAddress>
<PI_PHON>9798454359</PI_PHON>
<NSF_ID>000287441</NSF_ID>
<StartDate>08/07/2013</StartDate>
<EndDate>10/04/2016</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Dilma</FirstName>
<LastName>Da Silva</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Dilma Da Silva</PI_FULL_NAME>
<EmailAddress>dilma@tamu.edu</EmailAddress>
<PI_PHON>9794587617</PI_PHON>
<NSF_ID>000695299</NSF_ID>
<StartDate>09/30/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Texas A&amp;M Engineering Experiment Station</Name>
<CityName>College Station</CityName>
<ZipCode>778454645</ZipCode>
<PhoneNumber>9798626777</PhoneNumber>
<StreetAddress>400 Harvey Mitchell Pkwy S</StreetAddress>
<StreetAddress2><![CDATA[Suite 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX17</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>847205572</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TEXAS A&amp;M ENGINEERING EXPERIMENT STATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042915991</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Texas Engineering Experiment Station]]></Name>
<CityName>College Station</CityName>
<StateCode>TX</StateCode>
<ZipCode>778454645</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX17</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~399994</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The quality of the graphical user interface (GUI) of an application is crucial for productive interaction with a computer. For decades, the programming of GUIs has remained a laborous and error-prone activity, and as a result, GUIs in many applications have defects that frustrate and confuse users, waste their time, and hinder them from accomplishing their tasks. The reason for the complexity of GUI pprogramming is that the programmer needs to coordinate responses to a large set of possible user events, which typically have many interdependencies. The programming models that currently are used for GUI programming provide little help to the programmer in managing this complexity.<br />This project investigated the programming of (graphical) user interfaces, where the goal was to make GUI programming significantly easier. We developed and studied a programming model that shields the programmer from much of the complexity in deciding how to react to user events, coordinating the responses, and even automating many of the responses. In this model, the programmer can reason modularly, focusing only on a small part of a user interface at a time. The programs that specify fragments of a GUI can then be composed together, with guarantees that the GUI as a whole behaves as expected.<br />The project developed generic algorithms of common user interface behaviors (recomputing values in the user interface based on user input, enabling/disabling GUI `widgets', marking values that are pending, ensuring a consistent execution order of responses to user input, etc.) so that application programmers do not need to concern with these aspects when writing GUIs.&nbsp;<br />Concretely, the project developed a theory for GUI programming, we call it `property models`, based on hierarchical multi-way dataflow constraint systems, and a reference implementation of the theory that allows for writing GUIs in practice. In particular, the implementation is for GUIs for Web applications, written in HTML/JavaScript. The implementation, the `HotDrink' library, is freely available as open-source software. To evaluate the effectiveness of the approach, we implemented several small and medium size GUIs, and compared the implementations to current standard practices in GUI programming. The largest GUI was a mock-up of a flight reservation system. We observed that GUIs implemented with HotDrink required drastically less code and were free of defects that plagued similar GUIs implemented with the usual event-based approach. In particular, GUIs often behave differently, unintentionally, depending on the exact timing of user's actions. Such defects cannot appear with HotDrink.<br />As a related contribution to the main theme, the project developed what we call the `theory of multi-selection', the universal laws that underlie the very common user interface feature of selecting multiple elements (files, images, grids, etc.) with a mouse or finger (on a touch device). This feature is often missing, limited, or has defects in today's applications, and is almost invariably somehow different in each different application. The concrete practical outcome of this project is a library and protocol that makes implementing multiselection correctly a very simple and inexpensive task.<br />The project collaborated closely with Adobe Systems, where the projects findings have been put to use; Adobe reports that some of the GUIs in their products are based on the property models approach.<br />The project supported three PhD and two Masters students, producing two PhD dissertations and two Masters theses.<br />The property models approach and the HotDrink library are being developed further. The projects demonstrated the benefits of property models for GUI programming, and that GUI programming is not inherentlycomplex and error-prone. The research team continues to work for a wider adoption of property models to GUI programming.</p><br> <p>            Last Modified: 11/29/2018<br>      Modified by: Jaakko&nbsp;Jarvi</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2018/1320092/1320092_10264838_1543498915170_constraint-graph-ui--rgov-214x142.jpg" original="/por/images/Reports/POR/2018/1320092/1320092_10264838_1543498915170_constraint-graph-ui--rgov-800width.jpg" title="Graphical User Interface and its underlying constraint system."><img src="/por/images/Reports/POR/2018/1320092/1320092_10264838_1543498915170_constraint-graph-ui--rgov-66x44.jpg" alt="Graphical User Interface and its underlying constraint system."></a> <div class="imageCaptionContainer"> <div class="imageCaption">An example GUI, a hypothetical shipping cost calculator, and a depiction of the data and its dependencies represented as a multi-way dataflow constraint system. GUI programming with property models reduces to specifying a constraint system; all GUI behavior is determined by the constraint system.</div> <div class="imageCredit">Gabriel Foust</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Jaakko&nbsp;Jarvi</div> <div class="imageTitle">Graphical User Interface and its underlying constraint system.</div> </div> </li> <li> <a href="/por/images/Reports/POR/2018/1320092/1320092_10264838_1543499339920_evaluation-graph--rgov-214x142.jpg" original="/por/images/Reports/POR/2018/1320092/1320092_10264838_1543499339920_evaluation-graph--rgov-800width.jpg" title="A snapshot of the dependencies between pending computations within the example GUI."><img src="/por/images/Reports/POR/2018/1320092/1320092_10264838_1543499339920_evaluation-graph--rgov-66x44.jpg" alt="A snapshot of the dependencies between pending computations within the example GUI."></a> <div class="imageCaptionContainer"> <div class="imageCaption">Property Models maintain explicit and full information of all dependencies between values in a GUI at all times. In this snapshot, each user interaction grows the dependency graph with a new generation, scheduling new computations, and the program responds by gradually performing those computations.</div> <div class="imageCredit">Gabriel Foust</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Jaakko&nbsp;Jarvi</div> <div class="imageTitle">A snapshot of the dependencies between pending computations within the example GUI.</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The quality of the graphical user interface (GUI) of an application is crucial for productive interaction with a computer. For decades, the programming of GUIs has remained a laborous and error-prone activity, and as a result, GUIs in many applications have defects that frustrate and confuse users, waste their time, and hinder them from accomplishing their tasks. The reason for the complexity of GUI pprogramming is that the programmer needs to coordinate responses to a large set of possible user events, which typically have many interdependencies. The programming models that currently are used for GUI programming provide little help to the programmer in managing this complexity. This project investigated the programming of (graphical) user interfaces, where the goal was to make GUI programming significantly easier. We developed and studied a programming model that shields the programmer from much of the complexity in deciding how to react to user events, coordinating the responses, and even automating many of the responses. In this model, the programmer can reason modularly, focusing only on a small part of a user interface at a time. The programs that specify fragments of a GUI can then be composed together, with guarantees that the GUI as a whole behaves as expected. The project developed generic algorithms of common user interface behaviors (recomputing values in the user interface based on user input, enabling/disabling GUI `widgets', marking values that are pending, ensuring a consistent execution order of responses to user input, etc.) so that application programmers do not need to concern with these aspects when writing GUIs.  Concretely, the project developed a theory for GUI programming, we call it `property models`, based on hierarchical multi-way dataflow constraint systems, and a reference implementation of the theory that allows for writing GUIs in practice. In particular, the implementation is for GUIs for Web applications, written in HTML/JavaScript. The implementation, the `HotDrink' library, is freely available as open-source software. To evaluate the effectiveness of the approach, we implemented several small and medium size GUIs, and compared the implementations to current standard practices in GUI programming. The largest GUI was a mock-up of a flight reservation system. We observed that GUIs implemented with HotDrink required drastically less code and were free of defects that plagued similar GUIs implemented with the usual event-based approach. In particular, GUIs often behave differently, unintentionally, depending on the exact timing of user's actions. Such defects cannot appear with HotDrink. As a related contribution to the main theme, the project developed what we call the `theory of multi-selection', the universal laws that underlie the very common user interface feature of selecting multiple elements (files, images, grids, etc.) with a mouse or finger (on a touch device). This feature is often missing, limited, or has defects in today's applications, and is almost invariably somehow different in each different application. The concrete practical outcome of this project is a library and protocol that makes implementing multiselection correctly a very simple and inexpensive task. The project collaborated closely with Adobe Systems, where the projects findings have been put to use; Adobe reports that some of the GUIs in their products are based on the property models approach. The project supported three PhD and two Masters students, producing two PhD dissertations and two Masters theses. The property models approach and the HotDrink library are being developed further. The projects demonstrated the benefits of property models for GUI programming, and that GUI programming is not inherentlycomplex and error-prone. The research team continues to work for a wider adoption of property models to GUI programming.       Last Modified: 11/29/2018       Submitted by: Jaakko Jarvi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
