<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Small: Data Synchronization : Theory, Algorithms, and Practice</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>399370.00</AwardTotalIntnAmount>
<AwardAmount>399370</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rahul Shah</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This project addresses the growing need for improved synchronization methods for large-scale, multi-party distributed systems.  As users migrate information to cloud storage, cloud providers may use multiple loosely consistent replicas because of the overhead of keeping replicas synchronized at all times.  Further, users themselves may create loosely synchronized replicas on laptops, tablets, or other devices when they are disconnected from the cloud storage.  Periodic synchronization, or reconciliation, becomes a requirement in such settings.&lt;br/&gt;&lt;br/&gt;Reconciliation has been most studied in the specific setting of two connected users, each containing a set of keys, and both desiring the union of the sets.  The costs of these protocols is typically in terms of the size of the symmetric set difference between the two sets.  The Principal Investigator (PI) will focus on generalizing reconciliation methods to settings where many parties communicate over a network represented by a graph.  The new framework will aim to  encompass standard problems such as rumor spreading and network coding, as well as generalize to other objects such as sequences with other measures such as edit distance. The primary theoretical and practical challenge the PI will pursue is to develop schemes where the amount of communication necessary for object synchronization depends only on the size of the difference among objects that need to be synchronized, and not the sizes of the objects themselves.  For example, for large databases, the synchronization cost should depend on the delta between the databases, which will generally be much smaller than the databases themselves.  A further goal is that the framework will have practical consequences for modern cloud-based deployments, especially large-scale big data systems. Because the goals of reconciliation include both algorithmic efficiency as well as communication efficiency, the PI will work to bring ideas from both the theoretical computer science and information theory communities together in this work.  The new algorithms and data structures developed for these problems are expected to have significant additional uses for other problems as well.</AbstractNarration>
<MinAmdLetterDate>08/12/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/12/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320231</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Mitzenmacher</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME>Dr.</PI_SUFX_NAME>
<PI_FULL_NAME>Michael Mitzenmacher</PI_FULL_NAME>
<EmailAddress>michaelm@eecs.harvard.edu</EmailAddress>
<PI_PHON>6174967172</PI_PHON>
<NSF_ID>000439480</NSF_ID>
<StartDate>08/12/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Harvard University</Name>
<CityName>Cambridge</CityName>
<ZipCode>021385369</ZipCode>
<PhoneNumber>6174955501</PhoneNumber>
<StreetAddress>1033 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[5th Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>082359691</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PRESIDENT AND FELLOWS OF HARVARD COLLEGE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001963263</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Harvard University]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021383846</ZipCode>
<StreetAddress><![CDATA[33 Oxford St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~399370</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This award focused on issues related to data reconcilation.&nbsp; As an example setting, suppose I have a distributed database, in the form of collection of values, known as keys.&nbsp; Each copy of the database starts with the same set of keys, but we allow keys to be added and deleted at local copies.&nbsp; While the copies do not need to be perfectly synchronized, over time the differences between the local copies will begin to grow, and they will need to be synchronized, or reconciled, periodically.&nbsp; In a typical case, the database may be very large, but the differences between copies will be relatively small, often several orders magnitude smaller than the actual databases.&nbsp; Can we achieve reconcilation in a computationally efficient and communication efficient manner, so that the communication required is proportional to the size of the differences, not the size of the database?</p> <p>The PI, in conjunction with a graduate student, pursued several subprojects in this area.&nbsp; One work introduced a new reconciliation primitive, based on reconciling "sets of sets". &nbsp;A natural example is in the context of graph reconciliation: &nbsp;the neighborhood of each vertex can be viewed as a set (of vertices), and a graph is then a collection corresponding to a "set of sets".&nbsp; Sets of sets are also a natural way to represent binary databases and document databases.&nbsp; Expanding on prior work for schemes fo reconciling sets, we found efficient reconciliation schemes for sets of sets where the overall number of differences between sets of sets are small.&nbsp;</p> <p>We also considered subprojects covering several additional generalization.&nbsp; For example, we considered the problem of reconciling point sets in a metric space; &nbsp;here a reconciliation is considered successful if for every point one party has, the other party has a corresponding point that is sufficiently close in the metric space. &nbsp;Instead of "exact reconciliation", this paradigm allows for an approximate reconciliation in a well-defined sense.&nbsp; We obtain new algorithms for reconciling point sets in a metric space.&nbsp; Another subproject dealt with the problem of directory reconciliation, where one has a directory of information to be reconciled.&nbsp; Popular tools such as rsync implement solutions to this problem;&nbsp; we have formalized it and introduced new algorithmic ideas that we hope, in the future, may lead to improved practical solutions.</p> <p>Finally, the grant also covered additional work for the PI on sampling and hasing related algorithms and data structures, which form the backbone of reconciliation schemes.&nbsp; In particular, the grant helped fund a postdoctoral student who, with the PI, developed new schemes for subsampling graphs in a metric space efficiently in a way that allows for novel sublinear time algorithms.&nbsp; We believe this sampling technique will serve as general tool for further sublinear time algorithms on metric graphs.&nbsp;&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/06/2018<br>      Modified by: Michael&nbsp;Mitzenmacher</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This award focused on issues related to data reconcilation.  As an example setting, suppose I have a distributed database, in the form of collection of values, known as keys.  Each copy of the database starts with the same set of keys, but we allow keys to be added and deleted at local copies.  While the copies do not need to be perfectly synchronized, over time the differences between the local copies will begin to grow, and they will need to be synchronized, or reconciled, periodically.  In a typical case, the database may be very large, but the differences between copies will be relatively small, often several orders magnitude smaller than the actual databases.  Can we achieve reconcilation in a computationally efficient and communication efficient manner, so that the communication required is proportional to the size of the differences, not the size of the database?  The PI, in conjunction with a graduate student, pursued several subprojects in this area.  One work introduced a new reconciliation primitive, based on reconciling "sets of sets".  A natural example is in the context of graph reconciliation:  the neighborhood of each vertex can be viewed as a set (of vertices), and a graph is then a collection corresponding to a "set of sets".  Sets of sets are also a natural way to represent binary databases and document databases.  Expanding on prior work for schemes fo reconciling sets, we found efficient reconciliation schemes for sets of sets where the overall number of differences between sets of sets are small.   We also considered subprojects covering several additional generalization.  For example, we considered the problem of reconciling point sets in a metric space;  here a reconciliation is considered successful if for every point one party has, the other party has a corresponding point that is sufficiently close in the metric space.  Instead of "exact reconciliation", this paradigm allows for an approximate reconciliation in a well-defined sense.  We obtain new algorithms for reconciling point sets in a metric space.  Another subproject dealt with the problem of directory reconciliation, where one has a directory of information to be reconciled.  Popular tools such as rsync implement solutions to this problem;  we have formalized it and introduced new algorithmic ideas that we hope, in the future, may lead to improved practical solutions.  Finally, the grant also covered additional work for the PI on sampling and hasing related algorithms and data structures, which form the backbone of reconciliation schemes.  In particular, the grant helped fund a postdoctoral student who, with the PI, developed new schemes for subsampling graphs in a metric space efficiently in a way that allows for novel sublinear time algorithms.  We believe this sampling technique will serve as general tool for further sublinear time algorithms on metric graphs.            Last Modified: 10/06/2018       Submitted by: Michael Mitzenmacher]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
