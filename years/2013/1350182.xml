<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Gradual Typing for Industry Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2014</AwardEffectiveDate>
<AwardExpirationDate>01/31/2021</AwardExpirationDate>
<AwardTotalIntnAmount>575528.00</AwardTotalIntnAmount>
<AwardAmount>651829</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Types are a structure imposed upon programming languages. As with any structure, types offer useful support, but they also impose restrictions. As such, different communities have adopted types to different degrees. This provides programmers with a wealth of options, each with their own tradeoffs. Unfortunately this diversity proves problematic when programs written in different languages need to interact. The intellectual merit of this project is a principled form for gradual typing for mixing typed and untyped code together while retaining compatibility with expectations and methodologies of industry developers. In particular, we focus on mixing statically-typed object-oriented languages using generics and variance with dynamically-typed structural object-oriented languages. The latter class includes major languages like Java, C#, and Scala, whereas the former includes JavaScript, Python, and PHP.&lt;br/&gt;&lt;br/&gt;In addition to improving the language resources for developing web technologies, the broader impact of this project also includes a plan for exploiting those technologies in order to provide an entirely online interactive program-development environment targeted towards building interactive web pages. The intent is to make programming engaging and accessible to interested individuals who solely have access to a modern web browser. In addition to improving accessibility, this educational platform, along with our industry collaborations, will help with widespread adoption of the technologies we develop.</AbstractNarration>
<MinAmdLetterDate>01/22/2014</MinAmdLetterDate>
<MaxAmdLetterDate>03/02/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1350182</AwardID>
<Investigator>
<FirstName>Ross</FirstName>
<LastName>Tate</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ross E Tate</PI_FULL_NAME>
<EmailAddress>ross@cs.cornell.edu</EmailAddress>
<PI_PHON>6508673233</PI_PHON>
<NSF_ID>000579898</NSF_ID>
<StartDate>01/22/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cornell University</Name>
<CityName>Ithaca</CityName>
<ZipCode>148502820</ZipCode>
<PhoneNumber>6072555014</PhoneNumber>
<StreetAddress>373 Pine Tree Road</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY23</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>872612445</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CORNELL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002254837</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Cornell University]]></Name>
<CityName>Ithaca</CityName>
<StateCode>NY</StateCode>
<ZipCode>148537501</ZipCode>
<StreetAddress><![CDATA[4130 Upson Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY23</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~243293</FUND_OBLG>
<FUND_OBLG>2016~173211</FUND_OBLG>
<FUND_OBLG>2017~116033</FUND_OBLG>
<FUND_OBLG>2018~119292</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Typed objected-oriented languages can be very rigid and unforgiving to work within. That rigidity does come with run-time performance benefits, but sometimes those benefits are not worth the effort, either because the effort is too substantial or because the code at hand does not need to be high performance.</p> <p>Through the effort supported by this grant, we have developed both design principles and implementation techniques for enabling flexible untyped code to be mixed with and interoperate with rigid typed code. The design principles ensure that programmers can gradually add types and structure to their code, either&nbsp;as the flexibility is no longer needed or as performance becomes more of a pressing concern, without the functional behavior of their program changing. The implementation techniques ensure that the addition of untyped code does not slow down existing typed code, while also permitting efficient interaction between the two kinds of code.</p> <p>These considerations make this work to amenable to major industry programming languages. For example, it was an inspiration for the design of Kotlin's "platform types", which are specifically used to facilite ergonomic and efficient interop with Java programs. In particular, Kotlin is a (mostly) null safe language, whereas Java is a (mostly) null unsafe language, and the insights from this work informed the design used to bridge the gap between these two typing disciplines in a principled and efficient manner.</p> <p>Looking forward, the introduction of WebAssembly into the web's ecosystem has prompted a need for designing ergonomic and efficient interop with JavaScript. Languages currently compiling to JavaScript are hoping to switch to more efficient WebAssembly but need to maintain their current rich interactions with JavaScript libraries. Similarly, JavaScript language designers are under increasing pressure to add high-performance constructs to the language that programmers can smoothly transition to. In both these cases, the work supported by this grant demonstrates that such principled and efficient interop and transition is possible, and there are ongoing discussions on how the insights and techniques developed here might best be incorporated into each of these systems to foster a more unified ecosystem.</p><br> <p>            Last Modified: 05/26/2021<br>      Modified by: Ross&nbsp;E&nbsp;Tate</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Typed objected-oriented languages can be very rigid and unforgiving to work within. That rigidity does come with run-time performance benefits, but sometimes those benefits are not worth the effort, either because the effort is too substantial or because the code at hand does not need to be high performance.  Through the effort supported by this grant, we have developed both design principles and implementation techniques for enabling flexible untyped code to be mixed with and interoperate with rigid typed code. The design principles ensure that programmers can gradually add types and structure to their code, either as the flexibility is no longer needed or as performance becomes more of a pressing concern, without the functional behavior of their program changing. The implementation techniques ensure that the addition of untyped code does not slow down existing typed code, while also permitting efficient interaction between the two kinds of code.  These considerations make this work to amenable to major industry programming languages. For example, it was an inspiration for the design of Kotlin's "platform types", which are specifically used to facilite ergonomic and efficient interop with Java programs. In particular, Kotlin is a (mostly) null safe language, whereas Java is a (mostly) null unsafe language, and the insights from this work informed the design used to bridge the gap between these two typing disciplines in a principled and efficient manner.  Looking forward, the introduction of WebAssembly into the web's ecosystem has prompted a need for designing ergonomic and efficient interop with JavaScript. Languages currently compiling to JavaScript are hoping to switch to more efficient WebAssembly but need to maintain their current rich interactions with JavaScript libraries. Similarly, JavaScript language designers are under increasing pressure to add high-performance constructs to the language that programmers can smoothly transition to. In both these cases, the work supported by this grant demonstrates that such principled and efficient interop and transition is possible, and there are ongoing discussions on how the insights and techniques developed here might best be incorporated into each of these systems to foster a more unified ecosystem.       Last Modified: 05/26/2021       Submitted by: Ross E Tate]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
