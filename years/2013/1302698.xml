<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Medium: Collaborative Research: Scaling Machine Learning to Massive Datasets---A Logic Based Approach</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>667000.00</AwardTotalIntnAmount>
<AwardAmount>667000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Machine learning (ML) algorithms have become ubiquitous across applications as diverse as science, engineering, business, finance, education and healthcare. However, development of ML software that can scale to massive datasets and that are also easy-to-use remains a challenge in part due to the fact that developing an ML tool currently requires the implementation of a deep software stack, from the actual runtime (i.e., how an ML algorithm is executed) to the API exposed to the users.&lt;br/&gt;&lt;br/&gt;This  project aims to develop DeML, a system to support the authoring and execution of ML tools. Specifically, DeML would allow ML algorithms to be formulated in the form of a declarative query over the training dataset. DeML  optimizes the execution of the query over a computing platform (e.g., Amazon EC2 or SQL Azure), taking into account the characteristics of the algorithm, the data, and the available computational resources. Adoption of DeML would greatly reduce the effort required to develop scalable implementations of ML algorithms. The project is organized around three thrusts: (i) Development of a declarative query language, based on extensions of Datalog; (ii) Analysis of runtime of DeML queries; (iii) Optimization of dataflow of DeML queries based on the characteristics of data sources and the capabilities of the underlying execution platform. The resulting open source DeML prototype implementation will be made freely available to the community through the project web page at: http://deml.cs.ucla.edu.&lt;br/&gt;&lt;br/&gt;The availability of the DeML could greatly lower the effort needed to author scalable implementations of ML algorithms for analysis of massive datasets, which in turn would increase the availability of such tools to the broader community. Experience gained by implementing and deploying ML algorithms at scale over modern cloud-computing platforms, could help inform critical design choices in the development of future cloud computing platforms for big data analytics, and hence impact a broad range of scientific, engineering, national security, healthcare and business applications of big data analytics. The project offers enhanced opportunities for research-based advanced training of graduate and undergraduate students, including members of groups that are currently under-represented in computer science, in databases, machine learning, and cloud computing.</AbstractNarration>
<MinAmdLetterDate>07/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/25/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1302698</AwardID>
<Investigator>
<FirstName>Carlo</FirstName>
<LastName>Zaniolo</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Carlo Zaniolo</PI_FULL_NAME>
<EmailAddress>zaniolo@CS.UCLA.EDU</EmailAddress>
<PI_PHON>3108258137</PI_PHON>
<NSF_ID>000451654</NSF_ID>
<StartDate>07/26/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Tyson</FirstName>
<LastName>Condie</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tyson Condie</PI_FULL_NAME>
<EmailAddress>tconde@cs.ucla.edu</EmailAddress>
<PI_PHON>3107940102</PI_PHON>
<NSF_ID>000629463</NSF_ID>
<StartDate>07/26/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Los Angeles</Name>
<CityName>LOS ANGELES</CityName>
<ZipCode>900951406</ZipCode>
<PhoneNumber>3107940102</PhoneNumber>
<StreetAddress>10889 Wilshire Boulevard</StreetAddress>
<StreetAddress2><![CDATA[Suite 700]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA33</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>092530369</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, LOS ANGELES</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[UCLA Department of Computer Science]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900951596</ZipCode>
<StreetAddress><![CDATA[BOX 959515, 4531 Boelter Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA33</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~333500</FUND_OBLG>
<FUND_OBLG>2014~166750</FUND_OBLG>
<FUND_OBLG>2016~166750</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="paragraph_style_1"><span><span class="style_2">The project seeks to create a unified, high-productivity, declarative programming environment for the development BigData analytics that will assure&nbsp; ease-of-use, scalability and portability, much in the ways in which these properties for simple database applications were made possible by the introduction of Codd's&nbsp; Relational Model.&nbsp; To realization of this ambiguous objective&nbsp; requires&nbsp; (i) the design of a declarative language that enable the high-level specification of complex algorithms, whereby the program abstract semantics can be turned into efficient operational semantics over different platforms thanks to (ii) effective query optimization techniques that take into account&nbsp;</span></span><span><span class="style_2">the characteristics of the algorithm, the data, and the available computational resources as needed to execute efficiently over diverse platforms.&nbsp; These&nbsp; must include muliti-cluster systems, multicore systems, and workshations along we new cloud-computing platforms such</span></span><span><span class="style_2">&nbsp;Amazon EC2 or SQL Azure).&nbsp; In the course of this project major progress was accomplished toward realizeing these ambitions objectives using using a logic-based approach as a result of the significant technical advances summarized next.</span></span></p> <div>Our key technical advances stem from our work on BigDatalog, a Datalog language implementation on Apache Spark. Using our system Spark programmers can now benefit from using a declarative, recursive language to implement their distributed algorithms, while maintaining the efficiency of highly optimized programs. On our large test graph instances BigDatalog outperforms other state-of-the-art Datalog systems on the majority of our tests. Moreover, our experimental results confirmed that among Spark-based systems BigDatalog outperforms both GraphX and native Spark for recursive queries.&nbsp;</div> <div></div> <div>We addressed three key challenges for using Spark as a Datalog runtime. Speicifcally, now with BigDatalog, recursive queries are compiled and optimized for efficient evaluation on Spark, which was verified by our experimental results (Challenge 1). BigDatalog is able to identify and produce physical plans for evaluating decomposable programs. In addition, we propose a new type of job for recursive programs to allow the scheduler greater control over iterations (Challenge 2). Lastly, we propose specialized RDDs (SetRDD/AggregateSetRDD) that utilize Datalog semantics to support memory-efficient recursive evaluation (Challenge 3).</div> <div></div> <div>Future Work. In the course of this research we have identified several opportunities for exciting new directions. One first direction is to extend BigDatalog to support XYDatalog and realize the vision of to use Datalog to support complex machine learning analytics such as logistic regression over a massively parallel system. Another area is to investigate system extensions for provenance and fault tolerance enabled by monotonic Datalog constructs.</div><br> <p>            Last Modified: 10/10/2017<br>      Modified by: Tyson&nbsp;Condie</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[The project seeks to create a unified, high-productivity, declarative programming environment for the development BigData analytics that will assure  ease-of-use, scalability and portability, much in the ways in which these properties for simple database applications were made possible by the introduction of Codd's  Relational Model.  To realization of this ambiguous objective  requires  (i) the design of a declarative language that enable the high-level specification of complex algorithms, whereby the program abstract semantics can be turned into efficient operational semantics over different platforms thanks to (ii) effective query optimization techniques that take into account the characteristics of the algorithm, the data, and the available computational resources as needed to execute efficiently over diverse platforms.  These  must include muliti-cluster systems, multicore systems, and workshations along we new cloud-computing platforms such Amazon EC2 or SQL Azure).  In the course of this project major progress was accomplished toward realizeing these ambitions objectives using using a logic-based approach as a result of the significant technical advances summarized next. Our key technical advances stem from our work on BigDatalog, a Datalog language implementation on Apache Spark. Using our system Spark programmers can now benefit from using a declarative, recursive language to implement their distributed algorithms, while maintaining the efficiency of highly optimized programs. On our large test graph instances BigDatalog outperforms other state-of-the-art Datalog systems on the majority of our tests. Moreover, our experimental results confirmed that among Spark-based systems BigDatalog outperforms both GraphX and native Spark for recursive queries.   We addressed three key challenges for using Spark as a Datalog runtime. Speicifcally, now with BigDatalog, recursive queries are compiled and optimized for efficient evaluation on Spark, which was verified by our experimental results (Challenge 1). BigDatalog is able to identify and produce physical plans for evaluating decomposable programs. In addition, we propose a new type of job for recursive programs to allow the scheduler greater control over iterations (Challenge 2). Lastly, we propose specialized RDDs (SetRDD/AggregateSetRDD) that utilize Datalog semantics to support memory-efficient recursive evaluation (Challenge 3).  Future Work. In the course of this research we have identified several opportunities for exciting new directions. One first direction is to extend BigDatalog to support XYDatalog and realize the vision of to use Datalog to support complex machine learning analytics such as logistic regression over a massively parallel system. Another area is to investigate system extensions for provenance and fault tolerance enabled by monotonic Datalog constructs.       Last Modified: 10/10/2017       Submitted by: Tyson Condie]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
