<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative research:Complexity and feasibility for programs over coinductively-defined data</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>122340.00</AwardTotalIntnAmount>
<AwardAmount>122340</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The typical tools of complexity theory and algorithms tend to be biased toward low-level models of computation that refer directly to bit-level representations of data.  But when programming in the large, there are layers upon layers of abstraction over any low-level details, and a key feature of modern programming is the ability to compose different abstractions without regard to such details.  Compositionality has yielded very reliable software development methodologies, in large part because the tools developed for reasoning about program correctness have developed alongside these notions of abstraction.  However, tools for reasoning about complexity have not kept pace.  The big picture of the principle investigators' research program is to develop techniques for compositional reasoning about complexity, thereby allowing for reasoning about run-time cost in all its facets of large-scale programming with methods similar to those so successfully deployed for reasoning about correctness.  The research project funded by this grant concentrates on characterizing sensible notions of feasibility for programs that use coinductively-defined data such as streams (a program that produces or processes streaming media is just the right model to have in mind) and more generally quantifying, in a machine-checkable manner, resource usage for such programs.&lt;br/&gt;&lt;br/&gt;Although feasibility has been well-studied in the context of finite structures, extensions to potentially infinite data structures such as streams have been somewhat piecemeal.  One facet of this research project is to develop principled notions of feasibility in this setting.  To do so, the PIs will extend tools such as logic and programming language formalisms that have previously been used to give resource-free characterizations of complexity classes for finite structures.  Such tools are already more closely tied to a compositional view of programming, and they give a jumping-off point for analyzing notions of cost in domains where the very definition of resource usage may not be so obvious.  One such tool that they developed in previous work is a framework for compositional cost analysis of higher-order programs.  This time-complexity semantics is essentially a translation of target-language programs into a domain of complexities, which encode information about evaluation and usage cost.  The translation can be automated, and so this framework not only provides a tool for reasoning compositionally about cost, but provides machine-checkable assertions about the cost of target programs.</AbstractNarration>
<MinAmdLetterDate>07/31/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/31/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1318864</AwardID>
<Investigator>
<FirstName>Norman</FirstName>
<LastName>Danner</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Norman Danner</PI_FULL_NAME>
<EmailAddress>ndanner@wesleyan.edu</EmailAddress>
<PI_PHON>8606852185</PI_PHON>
<NSF_ID>000457361</NSF_ID>
<StartDate>07/31/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Wesleyan University</Name>
<CityName>Middletown</CityName>
<ZipCode>064593208</ZipCode>
<PhoneNumber>8606853683</PhoneNumber>
<StreetAddress>237 HIGH ST</StreetAddress>
<StreetAddress2><![CDATA[NORTH COLLEGE]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CT03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>145683954</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>WESLEYAN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>069252492</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Wesleyan University]]></Name>
<CityName>Middletown</CityName>
<StateCode>CT</StateCode>
<ZipCode>064593208</ZipCode>
<StreetAddress><![CDATA[237 High St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CT03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~122340</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project is to characterize notions of complexity and feasibility for programs that share data and that compute with streams of data. &nbsp;The main technical tool is the use of types to design languages in which the legal programs satisfy various complexity constraints. &nbsp;The typical target is for programs to satisfy some notion of feasibility with respect to time. &nbsp;However, while this notion is well-understood in the context of finite data without sharing, it is not when either sharing is permitted or the data itself may be infinite.</p> <p><br />We have extended our prior work to describe a language in which sharing of data is permitted and are close to having a complete proof that programs in this language can be executed feasibly. &nbsp;We are also close to showing that our language is complete in the sense that for any function for which there is a feasible program, there is a program in a slight extension of our language that also computes that function.</p> <p><br />With respect to infinite data, we have extended the language for sharing to one that allows infinite data. &nbsp;Here the notion of feasibility is even more difficult to pin down, but we are close to having done so, along with a proof that programs in our language are feasible. &nbsp;This has highlighted interesting connections between feasible computation with infinite data and topics from real analysis.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/19/2017<br>      Modified by: Norman&nbsp;Danner</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project is to characterize notions of complexity and feasibility for programs that share data and that compute with streams of data.  The main technical tool is the use of types to design languages in which the legal programs satisfy various complexity constraints.  The typical target is for programs to satisfy some notion of feasibility with respect to time.  However, while this notion is well-understood in the context of finite data without sharing, it is not when either sharing is permitted or the data itself may be infinite.   We have extended our prior work to describe a language in which sharing of data is permitted and are close to having a complete proof that programs in this language can be executed feasibly.  We are also close to showing that our language is complete in the sense that for any function for which there is a feasible program, there is a program in a slight extension of our language that also computes that function.   With respect to infinite data, we have extended the language for sharing to one that allows infinite data.  Here the notion of feasibility is even more difficult to pin down, but we are close to having done so, along with a proof that programs in our language are feasible.  This has highlighted interesting connections between feasible computation with infinite data and topics from real analysis.                Last Modified: 01/19/2017       Submitted by: Norman Danner]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
