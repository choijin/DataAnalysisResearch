<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Proactive Methods in Handling Configuration Errors in Data Centers and Cloud Infrastructures</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>329320.00</AwardTotalIntnAmount>
<AwardAmount>329320</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Configuration errors (i.e., misconfiguration) are a major cause of system failures according to several studies. For example, misconfiguration has caused serious crashes and center-wide outages in a number of data centers and commercial cloud infrastructures affecting millions of customers. In addition to system down time, misconfiguration also wastes engineers' or administrators' time in troubleshooting and corrections, leading to significant maintenance and support costs.&lt;br/&gt;&lt;br/&gt;Although recent work on detecting misconfiguration has improved the situation to some degree, the fundamental root cause needs to be better addressed. Based on the insights gained from the PIs' recent empirical study on 546 real world configuration errors in commercial and open source systems, the intellectual merit of this project is to take a more fundamental approach to addressing misconfiguration problems from the root cause in a proactive, anticipatory way. This work has three objectives: (1) to improve configuration design to make them less error-prone; (2) to harden software systems to better tolerate and gracefully react to users' configuration errors; and (3) to detect hard-to-check configuration issues such as compatibility and cross-component parameter inconsistency.&lt;br/&gt;&lt;br/&gt;The broader impacts include significantly reducing the amount of system downtime in data centers, decreasing vendors' customer support cost for troubleshooting configuration issues, and planned educational, outreach, and broadening participation activities.</AbstractNarration>
<MinAmdLetterDate>09/20/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/20/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1321006</AwardID>
<Investigator>
<FirstName>Yuanyuan</FirstName>
<LastName>Zhou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yuanyuan Zhou</PI_FULL_NAME>
<EmailAddress>yyzhou@cs.ucsd.edu</EmailAddress>
<PI_PHON>8588224663</PI_PHON>
<NSF_ID>000246561</NSF_ID>
<StartDate>09/20/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930404</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~329320</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Configuration errors (i.e., misconfiguration) are a major cause for system failures according to several studies. For example, misconfiguration has caused serious crashes and center-wide outages in a number of data centers and cloud infrastructures at Microsoft Azure, Amazon EC2, and Facebook, affecting millions customers. In addition to system down time, misconfiguration also wastes engineers or administrators&rsquo; time in troubleshooting and correcting them, leading to significant maintenance and supporting cost.</p> <p>Although recent research work on detecting misconfiguration has improved the situation to some degree, the fundamental root cause really lies in software engineers&rsquo; attitude towards misconfiguration: software engineers typically take a fully responsible and active role in handling software bugs, but is much more lay-back and reluctant in dealing with misconfiguration.</p> <p>Based on the insights gained from our recent empirical study on more than 600 real world configuration errors in commercial and open source systems, this project has proposed several innovative ideas to tackle this challenge. &nbsp;First, it has observed that many configuration parameters are not used in the real world and have proposed effective ways to simplify and thereby reduce number of mistakes by system admins. &nbsp;Secondly, we also proposed solutions to harden the systems to gracefully react to misconfigurations so that system admins can fix them timely without causing significant damages. &nbsp;&nbsp;</p> <div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <p><span>We have evaluated our research ideas with both commercial storage systems and six open-source server applications. Our solution can au</span><span>tomatically infers a total of 3800 configurations constraints for more than 2500 configuration parameters. Based on these contraints, we can</span><span>&nbsp;detect 743 various misconfiguration vulnerabilities and at least 112 error-prone constraints in the latest versions of the evaluated systems. To this day, 364 vulnerabilities and 80 inconsistent con</span>straints have been confirmed or fixed by developers after we reported them. Our results have influenced the Squid Web proxy project to improve its configuration parsing library towards a more user-friendly design. &nbsp;The commercial company whose software was evaluated in our project was also motivated by our study and changed their configuration design.</p> </div> </div> </div> <p>The project has trained three Ph.D students, 2 MS students and several undergraduate computer science students. &nbsp;Two Ph.D students have joined top universities including University of Illinois, Urbana-Champaign (UIUC) and John Hopkins University, respectively, as tenure-track faculty in computer science. And the other students all joined industry.</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/25/2018<br>      Modified by: Yuanyuan&nbsp;Zhou</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Configuration errors (i.e., misconfiguration) are a major cause for system failures according to several studies. For example, misconfiguration has caused serious crashes and center-wide outages in a number of data centers and cloud infrastructures at Microsoft Azure, Amazon EC2, and Facebook, affecting millions customers. In addition to system down time, misconfiguration also wastes engineers or administrators? time in troubleshooting and correcting them, leading to significant maintenance and supporting cost.  Although recent research work on detecting misconfiguration has improved the situation to some degree, the fundamental root cause really lies in software engineers? attitude towards misconfiguration: software engineers typically take a fully responsible and active role in handling software bugs, but is much more lay-back and reluctant in dealing with misconfiguration.  Based on the insights gained from our recent empirical study on more than 600 real world configuration errors in commercial and open source systems, this project has proposed several innovative ideas to tackle this challenge.  First, it has observed that many configuration parameters are not used in the real world and have proposed effective ways to simplify and thereby reduce number of mistakes by system admins.  Secondly, we also proposed solutions to harden the systems to gracefully react to misconfigurations so that system admins can fix them timely without causing significant damages.        We have evaluated our research ideas with both commercial storage systems and six open-source server applications. Our solution can automatically infers a total of 3800 configurations constraints for more than 2500 configuration parameters. Based on these contraints, we can detect 743 various misconfiguration vulnerabilities and at least 112 error-prone constraints in the latest versions of the evaluated systems. To this day, 364 vulnerabilities and 80 inconsistent constraints have been confirmed or fixed by developers after we reported them. Our results have influenced the Squid Web proxy project to improve its configuration parsing library towards a more user-friendly design.  The commercial company whose software was evaluated in our project was also motivated by our study and changed their configuration design.     The project has trained three Ph.D students, 2 MS students and several undergraduate computer science students.  Two Ph.D students have joined top universities including University of Illinois, Urbana-Champaign (UIUC) and John Hopkins University, respectively, as tenure-track faculty in computer science. And the other students all joined industry.          Last Modified: 01/25/2018       Submitted by: Yuanyuan Zhou]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
