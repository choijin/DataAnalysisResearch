<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPS: Breakthrough: Compositional System Modeling with Interfaces (COSMOI)</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>498875.00</AwardTotalIntnAmount>
<AwardAmount>498875</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>David Corman</SignBlockName>
<PO_EMAI>dcorman@nsf.gov</PO_EMAI>
<PO_PHON>7032928754</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Design of cyber-physical systems today relies on executable models. Designers develop models, simulate them, find defects, and improve their designs before the system is built, thus greatly reducing the design costs. However, current model-based design methods lack support for model libraries (creating and exchanging models as "black boxes"), tool interoperability (allowing models to be co-simulated by multiple tools), and multi-view modeling (allowing to combine models that "live in different worlds", for instance, a control-logic model with an energy-consumption model). This project seeks to remedy this by developing a compositional modeling framework based on interfaces. Interfaces allow submodels to be treated as black boxes, exposing relevant information while hiding internal details. &lt;br/&gt;Success of the project will provide a solid theoretical foundation for compositionality in cyber-physical systems. Compositionality is a key property in system design, allowing to build systems in a scalable and modular manner. This project will enable the construction of model libraries, allowing the exchange of models developed by different teams, potentially coming from different disciplines and using different modeling languages and tools.&lt;br/&gt;&lt;br/&gt;Besides the considerable economic and societal impact of cyber-physical systems in general, the proposed project will have considerable impact on engineering and computer science education. Its focus on a rigorous and unified modeling theory will erode the boundaries between the currently separated cyber-physical system sub-disciplines that hamper competitiveness of our students. Finally, the project is strategically important for the competitiveness of the United States as it strengthens its presence in international standardization efforts for model exchange and co-simulation.</AbstractNarration>
<MinAmdLetterDate>09/16/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/16/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1329759</AwardID>
<Investigator>
<FirstName>Edward</FirstName>
<LastName>Lee</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Edward A Lee</PI_FULL_NAME>
<EmailAddress>eal@eecs.berkeley.edu</EmailAddress>
<PI_PHON>5106433728</PI_PHON>
<NSF_ID>000479285</NSF_ID>
<StartDate>09/16/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Stavros</FirstName>
<LastName>Tripakis</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stavros Tripakis</PI_FULL_NAME>
<EmailAddress>stavros@northeastern.edu</EmailAddress>
<PI_PHON>6173732461</PI_PHON>
<NSF_ID>000639710</NSF_ID>
<StartDate>09/16/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<StreetAddress2><![CDATA[1608 Fourth Street, Suite 220]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>124726725</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Berkeley]]></Name>
<CityName>Berkeley</CityName>
<StateCode>CA</StateCode>
<ZipCode>947040594</ZipCode>
<StreetAddress><![CDATA[2150 Shattuck Avenue, Suite #300]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7918</Code>
<Text>CYBER-PHYSICAL SYSTEMS (CPS)</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~498875</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our society increasingly relies on computer-controlled systems, from today's embedded systems such as computer-controlled medical devices (e.g., pacemakers) or computer-controlled automotive systems (e.g., electronic stability control), to tomorrow's cyber-physical systems such as self-driving cars or automated intersections.&nbsp; These systems are safety-critical and their malfunction can put humans at risk, so it is important to design these systems correctly. How to do this is the main question studied in this project.<br /><br />Systems are typically designed using a trial-and-error approach: (1) build a prototype system; (2) test it (sometimes while deploying it); (3) fix encountered errors; (4) repeat. This approach is both costly (building a prototype and testing it is expensive) and unsafe (it is generally impossible to know when to stop testing, and while the system is tested humans are at risk -- c.f. recent experiences with self-driving cars). This project follows instead a formal approach. Instead of building prototype systems, we build mathematical models of systems and try to prove that the system (model) is correct.&nbsp; This allows errors to be caught and fixed early in the design process.&nbsp; The act of proving correctness is called verification.<br /><br />Formal system design is hard. This project's goal has been to make it easier. The main difficulty is that formal models quickly become too large and complex to manage. As a remedy, this project developed compositional methods. Compositionality means "divide and conquer". The idea is to "break up" the modeling and verification tasks into smaller subtasks which can be handled more easily. This project developed several different compositional methods:<br /><br />(1) One way to achieve compositionality is to follow the structure of the system. Systems are usually not built monolithically. Instead they are built hierarchically. A system is a collection of subsystems. Each subsystem is a collection of subsubsystems, and so on. In this project we developed formal methods to model each (sub)system individually, and techniques to synthesize automatically a formal model of a system from the descriptions of its subsystems. We developed a novel compositional theory of modeling and proving correctness of cyber-physical systems, called the Refinement Calculus of Reactive Systems. We implemented our entire theory (all definitions and theorems) in the Isabelle theorem prover. To validate our theory, we implemented a Translator from the widespread Simulink tool, to our framework, and tested our entire toolset on state of the art benchmarks, such as Simulink automotive control models provided by Toyota.</p> <p>(2) Often, different modeling languages and tools are used to model the different parts of a system (subsystems). For example, Simulink may be used to model an embedded controller, whereas Modelica (another modeling language) may be used to model the plant that this controller controls.&nbsp; But we still need to reason about the closed-loop system, which contains both the controller and the plant, interacting with each other. One way to obtain a closed-loop model is to "manually" translate a (sub)model from one language (e.g., Simulink) to the other (e.g., Modelica). This is costly, error-prone, and not even always possible. An alternative technology is co-simulation, which allows to integrate models coming from different tools, in a single simulation environment. In this project, we advanced the state of the art in co-simulation, by studying FMI, an international co-simulation standard. We discovered FMI limitations and proposed new solutions to overcome those limitations. These solutions have been implemented in the Ptolemy modeling and simulation tool. Our ideas have also influenced the evolution of the FMI standard.<br /><br />(3) Real-world system design situations often involve many design teams (e.g., control engineers, software engineers, mechanical engineers, etc.).&nbsp; Each of these teams uses their own modeling languages and tools, to model different aspects of the system, instead of different subsystems. These aspects are also called views, and the activity is called multi-view modeling.&nbsp; The main problem in multi-view modeling is how to ensure that the different models (views) produced by the different teams are consistent with each other.&nbsp; Until recently, this problem lacked a clear, mathematical formulation. In this project we defined the problem formally, and devised techniques to solve the problem in various concrete settings.<br /><br />In terms of the NSF merit review criteria, this project has accomplished the following:</p> <p>(i) Intellectual Merit:<br /><br />This project has advanced the state of the art in system design, by developing novel formal and compositional modeling and analysis techniques. Specifically the project made fundamental contributions in three areas of system design: (1) compositional modeling and verification; (2) co-simulation; and (3) multi-view modeling.<br /><br />(ii) Broader Impacts:<br /><br />The project has trained several graduate students and postgraduate researchers. Several of the project's research topics and results have been integrated into the courses that the two co-PIs regularly teach. All results of the project have been disseminated through a large number of publications (47 in total), or through open-source software, publicly available through the project's website.</p><br> <p>            Last Modified: 11/21/2017<br>      Modified by: Stavros&nbsp;Tripakis</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Our society increasingly relies on computer-controlled systems, from today's embedded systems such as computer-controlled medical devices (e.g., pacemakers) or computer-controlled automotive systems (e.g., electronic stability control), to tomorrow's cyber-physical systems such as self-driving cars or automated intersections.  These systems are safety-critical and their malfunction can put humans at risk, so it is important to design these systems correctly. How to do this is the main question studied in this project.  Systems are typically designed using a trial-and-error approach: (1) build a prototype system; (2) test it (sometimes while deploying it); (3) fix encountered errors; (4) repeat. This approach is both costly (building a prototype and testing it is expensive) and unsafe (it is generally impossible to know when to stop testing, and while the system is tested humans are at risk -- c.f. recent experiences with self-driving cars). This project follows instead a formal approach. Instead of building prototype systems, we build mathematical models of systems and try to prove that the system (model) is correct.  This allows errors to be caught and fixed early in the design process.  The act of proving correctness is called verification.  Formal system design is hard. This project's goal has been to make it easier. The main difficulty is that formal models quickly become too large and complex to manage. As a remedy, this project developed compositional methods. Compositionality means "divide and conquer". The idea is to "break up" the modeling and verification tasks into smaller subtasks which can be handled more easily. This project developed several different compositional methods:  (1) One way to achieve compositionality is to follow the structure of the system. Systems are usually not built monolithically. Instead they are built hierarchically. A system is a collection of subsystems. Each subsystem is a collection of subsubsystems, and so on. In this project we developed formal methods to model each (sub)system individually, and techniques to synthesize automatically a formal model of a system from the descriptions of its subsystems. We developed a novel compositional theory of modeling and proving correctness of cyber-physical systems, called the Refinement Calculus of Reactive Systems. We implemented our entire theory (all definitions and theorems) in the Isabelle theorem prover. To validate our theory, we implemented a Translator from the widespread Simulink tool, to our framework, and tested our entire toolset on state of the art benchmarks, such as Simulink automotive control models provided by Toyota.  (2) Often, different modeling languages and tools are used to model the different parts of a system (subsystems). For example, Simulink may be used to model an embedded controller, whereas Modelica (another modeling language) may be used to model the plant that this controller controls.  But we still need to reason about the closed-loop system, which contains both the controller and the plant, interacting with each other. One way to obtain a closed-loop model is to "manually" translate a (sub)model from one language (e.g., Simulink) to the other (e.g., Modelica). This is costly, error-prone, and not even always possible. An alternative technology is co-simulation, which allows to integrate models coming from different tools, in a single simulation environment. In this project, we advanced the state of the art in co-simulation, by studying FMI, an international co-simulation standard. We discovered FMI limitations and proposed new solutions to overcome those limitations. These solutions have been implemented in the Ptolemy modeling and simulation tool. Our ideas have also influenced the evolution of the FMI standard.  (3) Real-world system design situations often involve many design teams (e.g., control engineers, software engineers, mechanical engineers, etc.).  Each of these teams uses their own modeling languages and tools, to model different aspects of the system, instead of different subsystems. These aspects are also called views, and the activity is called multi-view modeling.  The main problem in multi-view modeling is how to ensure that the different models (views) produced by the different teams are consistent with each other.  Until recently, this problem lacked a clear, mathematical formulation. In this project we defined the problem formally, and devised techniques to solve the problem in various concrete settings.  In terms of the NSF merit review criteria, this project has accomplished the following:  (i) Intellectual Merit:  This project has advanced the state of the art in system design, by developing novel formal and compositional modeling and analysis techniques. Specifically the project made fundamental contributions in three areas of system design: (1) compositional modeling and verification; (2) co-simulation; and (3) multi-view modeling.  (ii) Broader Impacts:  The project has trained several graduate students and postgraduate researchers. Several of the project's research topics and results have been integrated into the courses that the two co-PIs regularly teach. All results of the project have been disseminated through a large number of publications (47 in total), or through open-source software, publicly available through the project's website.       Last Modified: 11/21/2017       Submitted by: Stavros Tripakis]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
