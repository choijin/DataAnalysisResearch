<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SBIR Phase I:  Source-code recovery from machine code for security analysis and enforcement</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2013</AwardEffectiveDate>
<AwardExpirationDate>06/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>150000.00</AwardTotalIntnAmount>
<AwardAmount>150000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07070000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>IIP</Abbreviation>
<LongName>Div Of Industrial Innovation &amp; Partnersh</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Peter Atherton</SignBlockName>
<PO_EMAI>patherto@nsf.gov</PO_EMAI>
<PO_PHON>7032928772</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The innovation in this project is to develop software to recover equivalent C source-code programs from commercial off-the shelf machine-code programs compiled from any programming language, and then analyze the code for security purposes. Optional run-time checks for security enforcement can be injected in the output code. The output source-code is functional: it can be modified, recompiled, and executed as required. Because of extensive executable analyses, the recovered source-code is readily comprehensible with features like symbols, types, functions, arguments, return values, and control-flow constructs. Alternately, the mechanism can recover the intermediate representation of a well-known open-source compiler, allowing machine-code analyses with source-code compiler methods. This is a significant advancement in bridging the gap between machine-code and source-code analysis. The current prototype has been successfully evaluated with executables compiled from over two million lines of source code. Additional research is being conducted in two directions. First, methods are being devised to detect interesting features in malicious software like the underlying communication mechanism, input/output channels and information flow. These methods are enhanced by innovations in analyzing memory locations in machine code, rather than just registers, yielding greater analysis precision. Second, several hybrid methods are being explored to statically analyze obfuscated executables, optionally aided by dynamic information.&lt;br/&gt;&lt;br/&gt;The broader/commercial impact of the innovation is a dramatic improvement in the speed, efficiency and efficacy in countering cyber threats, bringing a game-changing capability in cybersecurity for both desktop and mobile platforms. President Obama recently cited cyber-threats as one of our most serious economic and national security challenges. Cyber-crime costs the US economy billions of dollars and poses a direct threat to our national infrastructure and financial institutions. The losses from theft of intellectual property alone cost American companies around $250 Billion per year. The innovation has the potential to enable orders-of-magnitude productivity improvements across the cyber security spectrum including malware analysis, exposing undesirable behavior in untrusted code, detecting vulnerabilities from proprietary software, and enforcing security.  The mechanism being developed results in a precise discovery of features and robust defense measures against the threats. It also enables modification and maintenance of legacy software whose source code has been lost. Consequently, the mechanism enables a substantially faster, automated, and more detailed analysis of cyber-threats resulting in a more robust defense capability. This ability directly contributes to minimizing losses to the US economy. Better protection of our IP and trade secrets also contributes to minimizing American job losses.</AbstractNarration>
<MinAmdLetterDate>06/17/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/17/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1315099</AwardID>
<Investigator>
<FirstName>Aparna</FirstName>
<LastName>Kotha</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Aparna Kotha</PI_FULL_NAME>
<EmailAddress>kotha.aparna@gmail.com</EmailAddress>
<PI_PHON>5416023435</PI_PHON>
<NSF_ID>000634744</NSF_ID>
<StartDate>06/17/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SecondWrite</Name>
<CityName>Bethesda</CityName>
<ZipCode>208141836</ZipCode>
<PhoneNumber>2406838966</PhoneNumber>
<StreetAddress>5802 Grosvenor Lane</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<StateCode>MD</StateCode>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MD08</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>963575498</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>SECONDWRITE LLC</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[SecondWrite]]></Name>
<CityName>Bethesda</CityName>
<StateCode>MD</StateCode>
<ZipCode>208141836</ZipCode>
<StreetAddress><![CDATA[5802 Grosvenor Lane]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MD08</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>5371</Code>
<Text>SBIR Phase I</Text>
</ProgramElement>
<ProgramReference>
<Code>5371</Code>
<Text>SMALL BUSINESS PHASE I</Text>
</ProgramReference>
<ProgramReference>
<Code>8032</Code>
<Text>Software Services and Applications</Text>
</ProgramReference>
<ProgramReference>
<Code>8033</Code>
<Text>Hardware Software Integration</Text>
</ProgramReference>
<ProgramReference>
<Code>8039</Code>
<Text>Information, Communication &amp; Computing</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~150000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="western"><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">Today, computer software is a critical component of every industry and enterprise. </span></span><span style="font-family: Palatino-Roman, serif;"><span style="font-size: x-small;">According to a recent report by Gartner, an information technology research and advisory firm, worldwide enterprise software spending is expected to reach $296 billion in 2013, amounting to 32% of IT services spending and 8% of total IT investments with an annual growth rate of 6.4%. It also quotes security and big data quality management (performance) as key drivers. In this respect, </span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">enterprises require tools to identify and fix any performance issues arising in their systems along with security tools to secure their systems from hackers. </span></span></p> <p class="western"><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">Software is broadly developed in two flavors &ndash; <em>binary code and </em></span></span><em><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">managed code</span></span></em><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">. Both kinds of software are typically developed as </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">source-code </span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">in programming languages such as </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">C, C++, JAVA </span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">and </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">.NET</span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">. In case of managed code, source-code developed in languages such as JAVA is translated to </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">bytecode </span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">using a compiler. This bytecode is executed inside another software called the </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">interpreter</span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">. On the other hand, source-code written in languages such as C, C++ is translated by a compiler into </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">binary code</span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">. Binary code executes directly on the computer and is interchangeably referred to as </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">machine code</span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">, </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">native code </span></span><span style="font-family: URWPalladioL-Roma, serif;"><span style="font-size: x-small;">or </span></span><span style="font-family: URWPalladioL-Ital, serif;"><span style="font-size: x-small;">executable code</span></span><span style="font-family: Palatino-Roman, serif;"><span style="font-size: x-small;">.</span></span></p> <p class="western"><span style="font-size: x-small; font-family: Palatino-Roman, serif;">Although many enterprise applications are written in managed code, binary code applications are prevalen...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Today, computer software is a critical component of every industry and enterprise. According to a recent report by Gartner, an information technology research and advisory firm, worldwide enterprise software spending is expected to reach $296 billion in 2013, amounting to 32% of IT services spending and 8% of total IT investments with an annual growth rate of 6.4%. It also quotes security and big data quality management (performance) as key drivers. In this respect, enterprises require tools to identify and fix any performance issues arising in their systems along with security tools to secure their systems from hackers.  Software is broadly developed in two flavors &ndash; binary code and managed code. Both kinds of software are typically developed as source-code in programming languages such as C, C++, JAVA and .NET. In case of managed code, source-code developed in languages such as JAVA is translated to bytecode using a compiler. This bytecode is executed inside another software called the interpreter. On the other hand, source-code written in languages such as C, C++ is translated by a compiler into binary code. Binary code executes directly on the computer and is interchangeably referred to as machine code, native code or executable code. Although many enterprise applications are written in managed code, binary code applications are prevalent in several important components of modern application software stack. Performance-critical and legacy applications are often developed in binary code, and are employed very frequently in finance, telecommunications, insurance, defense and aerospace sectors. Backbone components of modern software such as all database servers, web servers, messaging servers and virtual machines are nearly all written in binary code. In addition, nearly all malicious applications, such as computer viruses and worms, are binary code. The process of software development in the form of binary code poses several challenges in meeting the required goals of performance and security. Software developers keep their source code as their own intellectual property (IP). The binary code representation, available to end-users, can only be executed on machines and is not comprehensible to humans. It is also extremely hard even for a tool to understand and manipulate it. SecondWrite LLC is building software solutions that will enable enterprise IT teams in meeting their performance and security requirements of binary code software. The innovative software tools are based on our underlying patent pending technology, called binary rewriting, of updating and modifying binary code without access to source code. Specifically, the outcomes of the Phase I project are the following:    We  identified that low-overhead binary rewriting can be applied to  solve an important challenge in application performance monitoring  (APM). APM is a $2.1 billion industry which provides solutions for  identifying performance bottlenecks in user applications. However,  all existing vendors only provide solutions for monitoring managed  code applications such as JAVA or .NET. We are addressing this  existing gap by providing a novel capability of monitoring binary  code directly.     We  have made significant technical and business progress with a leading  APM vendor. We are in the final stages of negotiating an OEM deal  where our tool will be available as part of their overall  application monitoring framework. On technical front, we have  co-developed a framework to directly monitor binary code  applications. This novel tool will be made available to a set of  customers for alpha prototype testing in a Fall 2014.     Our  market discovery in the cybersecurity space revealed an important  limitation of existing security solutions that aim to detect  malware. Malware is software  written with malicious intent of causing disruption,or stealing  information, money, or identities without the consent of the owner  or subject of the data.  Sever...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
