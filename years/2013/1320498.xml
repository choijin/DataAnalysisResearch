<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small: Accurate and Computationally Efficient Predictors of Java Memory Resource Consumption</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The Java programming language is widely-used and of great commercial and economic significance. It is favored in part because it features automatic management of the computer memory resources it uses, simplifying such management for the programmer.  Memory management in Java (and other managed languages) has reached a plateau in cost and effectiveness because most current techniques are tuned based on a small number of coarse-grained measures gathered while programs run.  Substantial improvement might be gained from using more accurate estimation of current and near-future memory use to drive better memory management decisions.  This would reduce the time, memory, and energy requirements to run Java programs. This is of significance to the full range of Java applications from small embedded systems through laptops and desktops to large servers.  There is therefore an urgent need for techniques to derive better online predictors of Java memory use.&lt;br/&gt;&lt;br/&gt;The long-term goal of the research program this award will support is to substantially improve memory allocation and garbage collection effectiveness by using better online predictors to drive more sophisticated allocator and collector decisions.  The objective of this particular project is to develop machine learning techniques that induce accurate and computationally efficient predictors of characteristics of Java memory allocation that influence memory manager performance.  Examples include predicting the volume of objects that become "garbage" (can be reclaimed and reused for future allocations), as well as objects that will be in use for a long time and will not become garbage soon.  The approach is to learn models that predict memory usage based on features compiled from observable run-time events like calls to particular methods or allocations of certain objects. Data to learn models will be obtained from analysis of detailed program execution traces. Features will be selected that are both informative of memory use and computable with low space and time overheads.  Programs will then be modified to compute these features as they run, and real-time predictive models will be used to predict future memory usage as programs execute.  These predictions will be used to improve memory management performance.  This will be accomplished by, for example, improving the timing of garbage collection so that it occurs at points during program execution that result in higher memory reclamation with lower effort.</AbstractNarration>
<MinAmdLetterDate>08/12/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/12/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320498</AwardID>
<Investigator>
<FirstName>J. Eliot</FirstName>
<LastName>Moss</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>J. Eliot B Moss</PI_FULL_NAME>
<EmailAddress>moss@cs.umass.edu</EmailAddress>
<PI_PHON>4135454206</PI_PHON>
<NSF_ID>000261930</NSF_ID>
<StartDate>08/12/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Benjamin</FirstName>
<LastName>Marlin</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Benjamin M Marlin</PI_FULL_NAME>
<EmailAddress>marlin@cs.umass.edu</EmailAddress>
<PI_PHON>4135454493</PI_PHON>
<NSF_ID>000611228</NSF_ID>
<StartDate>08/12/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Massachusetts Amherst</Name>
<CityName>Hadley</CityName>
<ZipCode>010359450</ZipCode>
<PhoneNumber>4135450698</PhoneNumber>
<StreetAddress>Research Administration Building</StreetAddress>
<StreetAddress2><![CDATA[100 Venture Way, Suite 201]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>153926712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MASSACHUSETTS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>079520631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Massachusetts Amherst]]></Name>
<CityName>Amherst</CityName>
<StateCode>MA</StateCode>
<ZipCode>010039264</ZipCode>
<StreetAddress><![CDATA[140 Governors Dr]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The vast majority of modern software applications running on smart phones, desktop computers, and servers are written in computer languages where the internal working memory used by a running application is automatically managed. This means that a piece of software (called a memory manager) automatically determines when items stored in memory are no longer needed by the application, and then frees the associated memory space so it can be re-used. This process of reclaiming and reusing memory space has come to be called "garbage collection" in the programming languages community.</p> <p>The use of automatic memory management allows applications to be developed faster and at lower cost, but typically results in decreased performance along several other dimensions. First, running the memory manager requires searching the memory space for unneeded items, which results in computational overhead, slowing down the application whose memory is being managed. Second, since the memory manager cannot be run constantly, there is always some volume of memory space that is currently unneeded, but has not yet been reclaimed by the memory manager. This means that the memory footprint for a running program can be larger than is necessary at any given point in time, which reduces the number of programs that can run concurrently. This is a particular concern on resource constrained platforms like smart phones, as well as in shared resource settings like cloud computing centers.</p> <p>This project investigated the extent to which it is possible to improve the performance of memory managed computer programs, using the Java programming language as a test bed. For a variety of reasons, exactly when the memory manager runs affects the resulting time and space overheads. Running too often wastes computation. Not running often enough wastes space.&nbsp;</p> <p>The overall goal of this research was to develop ways to reduce these costs by optimizing the collection process according to an individual program's behavior. Our approach to this problem used methods from artificial intelligence and machine learning to infer patterns in program activity that could be used to inform decisions of when the collector should run to minimize total costs. However, assessing how efficient such an approach is requires knowing more about what the best possible garbage collection cost might be.</p> <p>The major outcome of this project is an after-the-fact analysis procedure that can compute what the best garbage collection cost is for a particular run of a particular program.&nbsp; Furthermore, it tells us exactly when the collector should have been run to obtain this best cost.&nbsp; The outcome is remarkable in that previously it was suspected that this would be impractical to compute, requiring one to explore every possible pattern of when to run the collector, but we found that the problem could be solved in much less time, which may make it possible to train machine learning programs to provide improved collector policies customized to the behavior of a particular program.</p> <p>We further found that for some program runs, existing simple policies perform very close to optimal, while there is useful room for improvement in a number of other cases.&nbsp; Also, we found that it is in the nature of the problem that while reductions in computer running time may not be that large (collection times typically less than 10% of total time were observed), the space savings can be substantial and thus might lead to the ability to perform more computation within a given amount of memory.</p> <p>The project also explored automated real-time detection of which phase of execution (startup, shutdown, different intermediate processing steps) a program is in while it is running.&nbsp; We developed a machine learning-based method that achieved high accuracy at low cost computational cost. The project further showed that this idea can be applied to adjust the speed of processors so as to give substantial reduction in energy consumed while balancing how long it takes to run a program. This analysis can also be used to inform garbage collection schedules by allowing collection policies to depend on inferred program phase.</p> <p>In summary, the intellectual merit of this project is in knowledge gained about improving automatic memory management for Java and similar programming languages, as well as in the development of the data analytic techniques used to derive this knowledge. The broader impacts include the potential to reduce the time, memory, and energy required to run computer programs, which may have significant impacts in resource constrained computing settings. Finally, the project provided interdisciplinary training in machine learning and programming languages for two PhD students, both of whom are well into their doctoral dissertation work.</p><br> <p>            Last Modified: 12/04/2017<br>      Modified by: J. Eliot&nbsp;B&nbsp;Moss</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The vast majority of modern software applications running on smart phones, desktop computers, and servers are written in computer languages where the internal working memory used by a running application is automatically managed. This means that a piece of software (called a memory manager) automatically determines when items stored in memory are no longer needed by the application, and then frees the associated memory space so it can be re-used. This process of reclaiming and reusing memory space has come to be called "garbage collection" in the programming languages community.  The use of automatic memory management allows applications to be developed faster and at lower cost, but typically results in decreased performance along several other dimensions. First, running the memory manager requires searching the memory space for unneeded items, which results in computational overhead, slowing down the application whose memory is being managed. Second, since the memory manager cannot be run constantly, there is always some volume of memory space that is currently unneeded, but has not yet been reclaimed by the memory manager. This means that the memory footprint for a running program can be larger than is necessary at any given point in time, which reduces the number of programs that can run concurrently. This is a particular concern on resource constrained platforms like smart phones, as well as in shared resource settings like cloud computing centers.  This project investigated the extent to which it is possible to improve the performance of memory managed computer programs, using the Java programming language as a test bed. For a variety of reasons, exactly when the memory manager runs affects the resulting time and space overheads. Running too often wastes computation. Not running often enough wastes space.   The overall goal of this research was to develop ways to reduce these costs by optimizing the collection process according to an individual program's behavior. Our approach to this problem used methods from artificial intelligence and machine learning to infer patterns in program activity that could be used to inform decisions of when the collector should run to minimize total costs. However, assessing how efficient such an approach is requires knowing more about what the best possible garbage collection cost might be.  The major outcome of this project is an after-the-fact analysis procedure that can compute what the best garbage collection cost is for a particular run of a particular program.  Furthermore, it tells us exactly when the collector should have been run to obtain this best cost.  The outcome is remarkable in that previously it was suspected that this would be impractical to compute, requiring one to explore every possible pattern of when to run the collector, but we found that the problem could be solved in much less time, which may make it possible to train machine learning programs to provide improved collector policies customized to the behavior of a particular program.  We further found that for some program runs, existing simple policies perform very close to optimal, while there is useful room for improvement in a number of other cases.  Also, we found that it is in the nature of the problem that while reductions in computer running time may not be that large (collection times typically less than 10% of total time were observed), the space savings can be substantial and thus might lead to the ability to perform more computation within a given amount of memory.  The project also explored automated real-time detection of which phase of execution (startup, shutdown, different intermediate processing steps) a program is in while it is running.  We developed a machine learning-based method that achieved high accuracy at low cost computational cost. The project further showed that this idea can be applied to adjust the speed of processors so as to give substantial reduction in energy consumed while balancing how long it takes to run a program. This analysis can also be used to inform garbage collection schedules by allowing collection policies to depend on inferred program phase.  In summary, the intellectual merit of this project is in knowledge gained about improving automatic memory management for Java and similar programming languages, as well as in the development of the data analytic techniques used to derive this knowledge. The broader impacts include the potential to reduce the time, memory, and energy required to run computer programs, which may have significant impacts in resource constrained computing settings. Finally, the project provided interdisciplinary training in machine learning and programming languages for two PhD students, both of whom are well into their doctoral dissertation work.       Last Modified: 12/04/2017       Submitted by: J. Eliot B Moss]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
