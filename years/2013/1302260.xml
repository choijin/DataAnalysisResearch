<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Medium: WasteNot: Streamlining Virtual Memory for Modern Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>749103.00</AwardTotalIntnAmount>
<AwardAmount>749103</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This proposal attacks waste in virtual memory. Virtual memory was invented in a time of scarcity (e.g., sub-MB memory) but is now deployed to a changed world with vast memory (e.g., GB to TB) where programs often don?t exploit virtual memories generality (e.g., web servers sized to not swap). At the same time, virtual memory can waste substantial execution time (on translation look aside buffer (TLB) misses) and power (accessing TLBs on each memory reference). Moreover, system extensions to support general-purpose graphics processing units &lt;br/&gt;(GP-GPUs) and virtual machine (VMM) challenge virtual memory more. &lt;br/&gt;&lt;br/&gt;The central hypothesis of this proposal is that memory is too virtual:  most workloads do not need all of the benefits of virtual memory most of the time. To this end, we seek to de-virtualize virtual memory with multiple translation mechanisms that offer better performance with less functionality so that applications pay (performance, power/energy, space, etc.) for the features they require instead of for page-based virtual memory?s full generality always. &lt;br/&gt;&lt;br/&gt;This work reduces waste in computer systems to enable continued improvements in thier cost and performance. This improvement facilitates application innovations like higher performance for big-data workloads, including graph analysis, and environmental benefits from reduced power consumption. Beyond technical advices, this work develops and disseminates tools that leverage other NSF investments, such as the open-source ?gem5? computer-system simulation system.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/14/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/26/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1302260</AwardID>
<Investigator>
<FirstName>Mark</FirstName>
<LastName>Hill</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mark D Hill</PI_FULL_NAME>
<EmailAddress>markhill@cs.wisc.edu</EmailAddress>
<PI_PHON>6082622196</PI_PHON>
<NSF_ID>000328470</NSF_ID>
<StartDate>08/14/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>David</FirstName>
<LastName>Wood</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David A Wood</PI_FULL_NAME>
<EmailAddress>david@cs.wisc.edu</EmailAddress>
<PI_PHON>6082066595</PI_PHON>
<NSF_ID>000442514</NSF_ID>
<StartDate>08/14/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Swift</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael M Swift</PI_FULL_NAME>
<EmailAddress>swift@cs.wisc.edu</EmailAddress>
<PI_PHON>6088900131</PI_PHON>
<NSF_ID>000103907</NSF_ID>
<StartDate>08/14/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>Madison</CityName>
<StateCode>WI</StateCode>
<ZipCode>537061685</ZipCode>
<StreetAddress><![CDATA[1210 W Dayton St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~236372</FUND_OBLG>
<FUND_OBLG>2014~512731</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-9d08b71c-e5b1-a27f-6767-e72b0f44a2ef">&nbsp;</span></p> <p dir="ltr"><span>Virtual memory was invented in a time of scarcity &nbsp;but is now deployed to a changed world with vast memory where programs often do not exploit virtual memory&rsquo;s generality. At the same time, virtual memory can waste substantial execution time and power looking up the physical location of data in memory. For example, some Internet servers may spend 20% of their time locating data.</span></p> <p dir="ltr"><span>This project generated two&nbsp;novel solutions to improve the efficiency of virtual memory: direct segments, which allow a fixed-size structure in the processor to store the physical location of most data for a program, and range translations, which allow efficient access to a moderate number of arbitrarily long memory regions. The project also showed how to make processors more energy efficient by optimizing how they find the locations of data in memory.</span></p> <p dir="ltr"><span>This project investigated virtual memory performance in virtualized systems that form the basis of modern cloud computing. In such systems, virtual memory can waste even more performance. Two designs with different hardware/software complexity show how to reduce these costs back to that of conventional servers with small changes, or to reduce the overhead to almost zero with more substantial changes to processors, operating systems, and applications. </span></p> <p dir="ltr"><span>Separately, this project investigated security issues arising in new processors with accelerators, such as graphics processing units (GPUs), that speed specific computations. These accelerators are increasingly common in mobile devices such as smartphones and for high-performance computing. The project generated new techniques to prevent accelerators from inappropriately accessing data or from corrupting the processor through invalid memory use.</span></p> <p><span>Combining these two efforts, research from this project showed how to provide virtual memory for GPUs. With these extensions, programs can more easily leverage the massive computational power of GPUs efficiently and greatly reduce the effort by programmers to manually manage data.</span></p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/12/2016<br>      Modified by: Michael&nbsp;M&nbsp;Swift</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239308455_gpu-tlb--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239308455_gpu-tlb--rgov-800width.jpg" title="GPU MMU"><img src="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239308455_gpu-tlb--rgov-66x44.jpg" alt="GPU MMU"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Proposed proof-of-concept GPU MMU based on x86-64.</div> <div class="imageCredit">Jason Power</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Michael&nbsp;M&nbsp;Swift</div> <div class="imageTitle">GPU MMU</div> </div> </li> <li> <a href="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239393000_bordercontrol--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239393000_bordercontrol--rgov-800width.jpg" title="Border control"><img src="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239393000_bordercontrol--rgov-66x44.jpg" alt="Border control"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Implementation of Border Control. Left shows Border Control in the system. Right shows the Border Control design with a Protection Table in memory and a Border Control Cache between the accelerator caches and the shared memory system.</div> <div class="imageCredit">Lena Olson</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Michael&nbsp;M&nbsp;Swift</div> <div class="imageTitle">Border control</div> </div> </li> <li> <a href="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239476957_direct-segment--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239476957_direct-segment--rgov-800width.jpg" title="Direct segment"><img src="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239476957_direct-segment--rgov-66x44.jpg" alt="Direct segment"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Address space layout using direct segments.</div> <div class="imageCredit">Jayneel Gandhi</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Michael&nbsp;M&nbsp;Swift</div> <div class="imageTitle">Direct segment</div> </div> </li> <li> <a href="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239587447_range-translation--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239587447_range-translation--rgov-800width.jpg" title="Range translation"><img src="/por/images/Reports/POR/2016/1302260/1302260_10267201_1481239587447_range-translation--rgov-66x44.jpg" alt="Range translation"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Range translation: an efficient representation of contiguous virtual pages mapped to contiguous physical pages.</div> <div class="imageCredit">Jayneel Gandhi</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Michael&nbsp;M&nbsp;Swift</div> <div class="imageTitle">Range translation</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   Virtual memory was invented in a time of scarcity  but is now deployed to a changed world with vast memory where programs often do not exploit virtual memory?s generality. At the same time, virtual memory can waste substantial execution time and power looking up the physical location of data in memory. For example, some Internet servers may spend 20% of their time locating data. This project generated two novel solutions to improve the efficiency of virtual memory: direct segments, which allow a fixed-size structure in the processor to store the physical location of most data for a program, and range translations, which allow efficient access to a moderate number of arbitrarily long memory regions. The project also showed how to make processors more energy efficient by optimizing how they find the locations of data in memory. This project investigated virtual memory performance in virtualized systems that form the basis of modern cloud computing. In such systems, virtual memory can waste even more performance. Two designs with different hardware/software complexity show how to reduce these costs back to that of conventional servers with small changes, or to reduce the overhead to almost zero with more substantial changes to processors, operating systems, and applications.  Separately, this project investigated security issues arising in new processors with accelerators, such as graphics processing units (GPUs), that speed specific computations. These accelerators are increasingly common in mobile devices such as smartphones and for high-performance computing. The project generated new techniques to prevent accelerators from inappropriately accessing data or from corrupting the processor through invalid memory use.  Combining these two efforts, research from this project showed how to provide virtual memory for GPUs. With these extensions, programs can more easily leverage the massive computational power of GPUs efficiently and greatly reduce the effort by programmers to manually manage data.             Last Modified: 12/12/2016       Submitted by: Michael M Swift]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
