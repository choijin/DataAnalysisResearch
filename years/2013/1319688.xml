<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Mera: Memoized Ranged Systematic Software Analyses</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2013</AwardEffectiveDate>
<AwardExpirationDate>07/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>349999.00</AwardTotalIntnAmount>
<AwardAmount>349999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>As software pervades our society and lives, failures due to software&lt;br/&gt;bugs become increasingly costly.  Scalable approaches for&lt;br/&gt;systematically checking software to find crucial bugs hold a key to&lt;br/&gt;delivering higher quality software at a lower cost.  Mera is a&lt;br/&gt;methodology to scale model checking and symbolic execution which are two&lt;br/&gt;powerful approaches for systematic software analysis and known to be&lt;br/&gt;computationally expensive.&lt;br/&gt;&lt;br/&gt;The project builds on two novel concepts: memoization, which allows&lt;br/&gt;re-using computations performed across different checks to amortize&lt;br/&gt;the cost of software analysis; and ranging, which allows distributing&lt;br/&gt;the analysis into sub-problems of lesser complexity, which can be&lt;br/&gt;solved separately and efficiently.  Mera consists of three research&lt;br/&gt;thrusts.  First, the core memoization and ranging techniques for model&lt;br/&gt;checking and symbolic execution are developed.  Second, these&lt;br/&gt;techniques are optimized in the context of different kinds of changes,&lt;br/&gt;like the program code, expected properties, or analysis search-depth&lt;br/&gt;parameters.  Third, these techniques are adapted to effectively&lt;br/&gt;utilize available resources for parallel computation using static and&lt;br/&gt;dynamic strategies, such as work stealing.  Mera will help improve&lt;br/&gt;software quality and reliability thus holding the potential to provide&lt;br/&gt;substantial economic benefits and to improve our quality of life.</AbstractNarration>
<MinAmdLetterDate>07/31/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/31/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319688</AwardID>
<Investigator>
<FirstName>Sarfraz</FirstName>
<LastName>Khurshid</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sarfraz Khurshid</PI_FULL_NAME>
<EmailAddress>khurshid@ece.utexas.edu</EmailAddress>
<PI_PHON>5124718244</PI_PHON>
<NSF_ID>000095313</NSF_ID>
<StartDate>07/31/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName/>
<StateCode>TX</StateCode>
<ZipCode>787121532</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~349999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The focus of this project was to develop novel techniques and tools for systematic testing and analysis of software systems by building effective solutions based on the well-studied and powerful methods of symbolic execution and model checking.&nbsp; Techniques and tools developed introduced new forms of incremental, compositional, and parallel analyses, embodied solutions with improved scalability and efficacy, and enabled an integrated approach to testing.&nbsp; Moreover, a certification approach that allowed validating the results of symbolic execution analysis was defined to increase the usefulness of the analysis results.&nbsp; While a key focus of the project was on checking functional correctness of a broad class of software programs, a novel application to security for side channel analysis was also introduced.&nbsp; On the broader impact side, the project supported key research and education activities that provided highly skilled training in the area of testing and verification to PhD and Masters students as well as introduction to cutting-edge methods to undergraduate students. Courses taught included classes offered to part-time Masters students who worked full-time in the software industry, thereby providing an avenue for potential technology transfer from academia to industry. The results of the project were disseminated at peer reviewed venues through publications and presentations.<br /><br /></p><br> <p>            Last Modified: 04/18/2019<br>      Modified by: Sarfraz&nbsp;Khurshid</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The focus of this project was to develop novel techniques and tools for systematic testing and analysis of software systems by building effective solutions based on the well-studied and powerful methods of symbolic execution and model checking.  Techniques and tools developed introduced new forms of incremental, compositional, and parallel analyses, embodied solutions with improved scalability and efficacy, and enabled an integrated approach to testing.  Moreover, a certification approach that allowed validating the results of symbolic execution analysis was defined to increase the usefulness of the analysis results.  While a key focus of the project was on checking functional correctness of a broad class of software programs, a novel application to security for side channel analysis was also introduced.  On the broader impact side, the project supported key research and education activities that provided highly skilled training in the area of testing and verification to PhD and Masters students as well as introduction to cutting-edge methods to undergraduate students. Courses taught included classes offered to part-time Masters students who worked full-time in the software industry, thereby providing an avenue for potential technology transfer from academia to industry. The results of the project were disseminated at peer reviewed venues through publications and presentations.         Last Modified: 04/18/2019       Submitted by: Sarfraz Khurshid]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
