<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Branch Prediction</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2013</AwardEffectiveDate>
<AwardExpirationDate>03/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>19315.00</AwardTotalIntnAmount>
<AwardAmount>19315</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hong Jiang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Microprocessors use devices called branch predictors to predict the near-term behavior of a program so that work on future instructions may begin early, reducing the amount of time the program takes to run.  Branch predictors must be highly accurate, and a small improvement in accuracy can give a large benefit for performance.  This project is a principled approach to continuing the study of branch prediction.   Several new ways to understand and improve branch prediction will be explored:&lt;br/&gt;&lt;br/&gt;1) Exploring the limits of the potential of branch prediction to improve performance by developing a model of an idealistic branch predictor given reasonable assumptions;&lt;br/&gt;&lt;br/&gt;2) Improving technologies for running computer programs on real computer systems so that these programs will have better branch prediction accuracy;&lt;br/&gt;&lt;br/&gt;3) Discovering ways of improving the communication between computer programs and computer systems such that information available to a computer program can be used to improve the accuracy of branch prediction in a computer system; and&lt;br/&gt;&lt;br/&gt;4) Working on new branch predictor designs for future computer systems, incorporating techniques from other disciplines such as machine learning, i.e., the study of how computer systems can learn by observing data.&lt;br/&gt;&lt;br/&gt;In each of these areas, technological constraints on branch prediction will be taken into account.  In particular, a branch predictor must act very quickly to deliver its prediction in time to improve performance, and it should do so in an energy-efficient way.  This research will be brought  to the classroom with a special seminar class on the interaction of research into computer systems and research on machine learning.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>03/12/2013</MinAmdLetterDate>
<MaxAmdLetterDate>03/12/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1332597</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Jimenez</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel A Jimenez</PI_FULL_NAME>
<EmailAddress>djimenez@acm.org</EmailAddress>
<PI_PHON>9798452434</PI_PHON>
<NSF_ID>000373616</NSF_ID>
<StartDate>03/12/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Texas A&amp;M Engineering Experiment Station</Name>
<CityName>College Station</CityName>
<ZipCode>778454645</ZipCode>
<PhoneNumber>9798626777</PhoneNumber>
<StreetAddress>400 Harvey Mitchell Pkwy S</StreetAddress>
<StreetAddress2><![CDATA[Suite 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX17</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>847205572</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TEXAS A&amp;M ENGINEERING EXPERIMENT STATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042915991</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Texas Engineering Experiment Station]]></Name>
<CityName>College Station</CityName>
<StateCode>TX</StateCode>
<ZipCode>778454645</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX17</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~19315</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The objective of this project was to study, understand, and improve branch prediction techniques. A branch predictor is a part of a microprocessor that enables it to process instructions quickly by predicting how a program will behave. A "branch" is an instruction a computer program uses to make a decision. For instance, a program might have a sequence of instructions that mean "if a value is greater than another value, then swap them." The instruction that decides whether the swap should be performed is a branch. By intelligently guessing the outcome of a branch with high accuracy, the following instructions can be anticipated, saving the time and energy the processor would otherwise have wasted waiting for the result. Modern microprocessors achieved roughly 95% accuracy on many programs, but increasing this percentage can yield significant improvements in performance, as each incorrectly predicted branch has a large negative impact on performance. Branch prediction has been a heavily studied topic in computer architecture because of its ability to improve performance and its relative isolation from the rest of the microprocessor, i.e., a new predictor can basically be "dropped in" without affecting the design of the rest of the processor.<br /><br />The project developed a number of branch prediction techniques primarily based on neural learning. Neural learning attempts to emulate the way biological nervous systems learn. We developed a number of enhancements to existing algorithms proposed previously by the PI. For instance, we learned that some of the inputs to the neural learning system have a higher impact on correctness than other, so we developed an algorithm to give those inputs higher priority. The implementation of this technique was enabled by combining analog computation with digital computation. While researching branch prediction techniques, we realized that the same principles used in our research could be applied to other similar problems. For instance, we successfully applied branch prediction ideas to the problem of determining whether data from the computer's memory was likely to be used soon, and use this information to drive a cache management policy.<br /><br />The results of the research were published in a variety of journals, conferences, and workshops. In computer architecture research, conference presentations are accompanied by printed proceedings of papers up to 12 pages detailing the research. Journals, conferences, and sometimes workshops are peer-reviewed to ensure quality of the research.<br /><br />The research from this project has had significant broader impacts. In 2011, we learned that predictors invented by the PI had been used in the design of branch predictors in products offered by AMD and Oracle. Several students have participated in the project. Four women students have participated in the project. Two of them have earned their doctorates in computer science while a third has recently defended her dissertation and will graduate in Summer 2014. The research has been presented at a number of mentoring events designed to encourage under-represented groups to enter graduate education in computer science.</p><br> <p>            Last Modified: 07/07/2014<br>      Modified by: Daniel&nbsp;A&nbsp;Jimenez</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The objective of this project was to study, understand, and improve branch prediction techniques. A branch predictor is a part of a microprocessor that enables it to process instructions quickly by predicting how a program will behave. A "branch" is an instruction a computer program uses to make a decision. For instance, a program might have a sequence of instructions that mean "if a value is greater than another value, then swap them." The instruction that decides whether the swap should be performed is a branch. By intelligently guessing the outcome of a branch with high accuracy, the following instructions can be anticipated, saving the time and energy the processor would otherwise have wasted waiting for the result. Modern microprocessors achieved roughly 95% accuracy on many programs, but increasing this percentage can yield significant improvements in performance, as each incorrectly predicted branch has a large negative impact on performance. Branch prediction has been a heavily studied topic in computer architecture because of its ability to improve performance and its relative isolation from the rest of the microprocessor, i.e., a new predictor can basically be "dropped in" without affecting the design of the rest of the processor.  The project developed a number of branch prediction techniques primarily based on neural learning. Neural learning attempts to emulate the way biological nervous systems learn. We developed a number of enhancements to existing algorithms proposed previously by the PI. For instance, we learned that some of the inputs to the neural learning system have a higher impact on correctness than other, so we developed an algorithm to give those inputs higher priority. The implementation of this technique was enabled by combining analog computation with digital computation. While researching branch prediction techniques, we realized that the same principles used in our research could be applied to other similar problems. For instance, we successfully applied branch prediction ideas to the problem of determining whether data from the computer's memory was likely to be used soon, and use this information to drive a cache management policy.  The results of the research were published in a variety of journals, conferences, and workshops. In computer architecture research, conference presentations are accompanied by printed proceedings of papers up to 12 pages detailing the research. Journals, conferences, and sometimes workshops are peer-reviewed to ensure quality of the research.  The research from this project has had significant broader impacts. In 2011, we learned that predictors invented by the PI had been used in the design of branch predictors in products offered by AMD and Oracle. Several students have participated in the project. Four women students have participated in the project. Two of them have earned their doctorates in computer science while a third has recently defended her dissertation and will graduate in Summer 2014. The research has been presented at a number of mentoring events designed to encourage under-represented groups to enter graduate education in computer science.       Last Modified: 07/07/2014       Submitted by: Daniel A Jimenez]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
