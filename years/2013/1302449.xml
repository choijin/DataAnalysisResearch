<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CCF: SHF: Medium: Collaborative Research: A Static and Dynamic Verification Framework for Parallel Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/15/2013</AwardEffectiveDate>
<AwardExpirationDate>03/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>399994.00</AwardTotalIntnAmount>
<AwardAmount>431994</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Human society is faced with an increasing number of problems including&lt;br/&gt;stubborn diseases and international security/climate threats. The&lt;br/&gt;computer simulations and advanced data management methods necessary to&lt;br/&gt;solving these societal problems can only be realized through increased&lt;br/&gt;use of parallel computing at all system scales, including desktops,&lt;br/&gt;servers and the cloud. Efficient large-scale parallel computing&lt;br/&gt;however requires advanced parallel programming methods. Such methods,&lt;br/&gt;unfortunately, have a greater proclivity for software bugs that&lt;br/&gt;increase cost through lost cycles on super-computers and these same&lt;br/&gt;bugs undermine confidence in simulation results.  This research&lt;br/&gt;addresses the challenge of developing parallel computing software by&lt;br/&gt;creating new scalable methods to support advanced parallel programming&lt;br/&gt;models that provide rigorous guarantees on program correctness. The&lt;br/&gt;societal impacts of this work stem from increasing reliability of&lt;br/&gt;software powering the national infrastructure, advanced educational&lt;br/&gt;methods to train future generations, and pedagogical material in the&lt;br/&gt;form of course notes and software for broad dissemination.  It also&lt;br/&gt;helps maintain the United States in a leadership situation with&lt;br/&gt;respect to the available talent pool in this area.&lt;br/&gt;&lt;br/&gt;Providing rigorous guarantees on correctness of existing parallel&lt;br/&gt;computing software requires that two classes of methods be developed,&lt;br/&gt;evaluated, and taught widely: scalable code-level (static) checking&lt;br/&gt;methods, and downstream detailed (dynamic) checking methods. This&lt;br/&gt;project develops these novel and much-needed correctness checking&lt;br/&gt;methods around the Habanero Java programming and compilation&lt;br/&gt;system. The research is to augment the system with correctness&lt;br/&gt;obligations emitted during compilation and checked at all later stages&lt;br/&gt;of translation and deployment.  A key highlight of the project's&lt;br/&gt;approach is that it allows some of the correctness obligations to be&lt;br/&gt;checked statically in the context of safe subsets of Habanero Java.&lt;br/&gt;Obligations that are not able to be statically checked, especially for&lt;br/&gt;larger subsets of the Habanero language, are marked for checking&lt;br/&gt;dynamically through novel active-testing methods. An Operational&lt;br/&gt;Semantics written in the Coq notation lends cohesion to the work by&lt;br/&gt;ensuring that the division of correctness checking between static and&lt;br/&gt;dynamic techniques is sound. In summary, this research helps advance&lt;br/&gt;the science of parallel programming in terms of rigorous correctness&lt;br/&gt;checking methods, while at the same time contributing to the broad&lt;br/&gt;practice of programming at all scales from desktop to cloud&lt;br/&gt;computing and high-end scientific simulations.</AbstractNarration>
<MinAmdLetterDate>04/11/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/04/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1302449</AwardID>
<Investigator>
<FirstName>Ganesh</FirstName>
<LastName>Gopalakrishnan</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ganesh L Gopalakrishnan</PI_FULL_NAME>
<EmailAddress>ganesh@cs.utah.edu</EmailAddress>
<PI_PHON>8015813568</PI_PHON>
<NSF_ID>000160895</NSF_ID>
<StartDate>04/11/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Utah</Name>
<CityName>SALT LAKE CITY</CityName>
<ZipCode>841128930</ZipCode>
<PhoneNumber>8015816903</PhoneNumber>
<StreetAddress>75 S 2000 E</StreetAddress>
<StreetAddress2><![CDATA[Second Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<StateCode>UT</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>UT02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009095365</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF UTAH, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009095365</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Utah]]></Name>
<CityName/>
<StateCode>UT</StateCode>
<ZipCode>841129205</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>UT02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~210469</FUND_OBLG>
<FUND_OBLG>2014~16000</FUND_OBLG>
<FUND_OBLG>2015~205525</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Parallel and concurrent programs are notorious for their complexity, and rigorous testing and verification methods are essential to ensure their correct operation. This project contributed two classes of techniques, each developed by a doctoral student. These are now described, followed by the key outcomes of this project.</p> <p><br />The first research that Dr. Aananthakrishnan established in his PhD dissertation is that combined static and dynamic analysis can improve the precision of static analyses. Each static analysis developer contributes one type of analysis pertaining to one system of abstract values such as points-to relations or value intervals. If the work of multiple static analysis writers is to be combined, today's solutions involve deep integration that makes it difficult to maintain tool modularity. Dr. Aananthakrishnan contributed a method to compose multiple static analyses through the use of analysis composers. Under his scheme, the onus of each tool writer is to provide each statican alysis tool with a standard API that supports a standard set of queries pertaining to the analysis provided by the tool. He demonstrated his technique on message-passing programs that actually exchanged data flow facts in lieu of MPI message data items.</p> <p><br />The second research direction lay the foundations for building safe and reliable distributed systems. This involves the construction of versatile analysis methods for properties such as linearizability. This work is spearheaded by Al-Mahfoudh whose PhD dissertation will be defended in 2018.</p> <p><br />By the time Al-Mahfoudh's PhD dissertation is defended, this NSFproject would have contributed two doctoral students, two MS students and one BS student to the talent pool in the area of parallel and distributed programming.&nbsp; It would also have contributed to two research tools that help the community access and reproduce our research results.&nbsp; More importantly, these tools serve as a concrete embodiment of our five years of research, allowing future parallel systems to be analyzed as well as debugged using our ideas.<br />The intellectual merits of our work are the composable static analysis methods for message-passing programs and systematic and efficient testing methods for distributed systems based on the Actor model.</p> <p><br />Broader impacts of our work are in the domains of message-passing parallel programs and in the design of distributed Actor-based software systems that will play a crucial role in autonomous systems and the Internet of Things.</p><br> <p>            Last Modified: 06/01/2018<br>      Modified by: Ganesh&nbsp;L&nbsp;Gopalakrishnan</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2018/1302449/1302449_10240657_1527832039353_ds2-tool--rgov-214x142.jpg" original="/por/images/Reports/POR/2018/1302449/1302449_10240657_1527832039353_ds2-tool--rgov-800width.jpg" title="The DS2 tool created"><img src="/por/images/Reports/POR/2018/1302449/1302449_10240657_1527832039353_ds2-tool--rgov-66x44.jpg" alt="The DS2 tool created"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The Domain-specific Distributed System Analysis Tool</div> <div class="imageCredit">Mohammed S. Al-Mahfoudh</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Ganesh&nbsp;L&nbsp;Gopalakrishnan</div> <div class="imageTitle">The DS2 tool created</div> </div> </li> <li> <a href="/por/images/Reports/POR/2018/1302449/1302449_10240657_1527832433765_fuse-system-illustration--rgov-214x142.jpg" original="/por/images/Reports/POR/2018/1302449/1302449_10240657_1527832433765_fuse-system-illustration--rgov-800width.jpg" title="ParFuse system"><img src="/por/images/Reports/POR/2018/1302449/1302449_10240657_1527832433765_fuse-system-illustration--rgov-66x44.jpg" alt="ParFuse system"></a> <div class="imageCaptionContainer"> <div class="imageCaption">ParFuse that does static + dynamic MPI analysis</div> <div class="imageCredit">Sriram Aananthakrishnan</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Ganesh&nbsp;L&nbsp;Gopalakrishnan</div> <div class="imageTitle">ParFuse system</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Parallel and concurrent programs are notorious for their complexity, and rigorous testing and verification methods are essential to ensure their correct operation. This project contributed two classes of techniques, each developed by a doctoral student. These are now described, followed by the key outcomes of this project.   The first research that Dr. Aananthakrishnan established in his PhD dissertation is that combined static and dynamic analysis can improve the precision of static analyses. Each static analysis developer contributes one type of analysis pertaining to one system of abstract values such as points-to relations or value intervals. If the work of multiple static analysis writers is to be combined, today's solutions involve deep integration that makes it difficult to maintain tool modularity. Dr. Aananthakrishnan contributed a method to compose multiple static analyses through the use of analysis composers. Under his scheme, the onus of each tool writer is to provide each statican alysis tool with a standard API that supports a standard set of queries pertaining to the analysis provided by the tool. He demonstrated his technique on message-passing programs that actually exchanged data flow facts in lieu of MPI message data items.   The second research direction lay the foundations for building safe and reliable distributed systems. This involves the construction of versatile analysis methods for properties such as linearizability. This work is spearheaded by Al-Mahfoudh whose PhD dissertation will be defended in 2018.   By the time Al-Mahfoudh's PhD dissertation is defended, this NSFproject would have contributed two doctoral students, two MS students and one BS student to the talent pool in the area of parallel and distributed programming.  It would also have contributed to two research tools that help the community access and reproduce our research results.  More importantly, these tools serve as a concrete embodiment of our five years of research, allowing future parallel systems to be analyzed as well as debugged using our ideas. The intellectual merits of our work are the composable static analysis methods for message-passing programs and systematic and efficient testing methods for distributed systems based on the Actor model.   Broader impacts of our work are in the domains of message-passing parallel programs and in the design of distributed Actor-based software systems that will play a crucial role in autonomous systems and the Internet of Things.       Last Modified: 06/01/2018       Submitted by: Ganesh L Gopalakrishnan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
