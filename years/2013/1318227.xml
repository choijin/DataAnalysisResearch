<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Havoc: Verified Compilation of Concurrent Managed Languages</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>475000.00</AwardTotalIntnAmount>
<AwardAmount>475000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The goals of the Havoc project are to provide (a) foundational results on verified compilation of important concurrency abstractions (e.g., locks, monitors, stacks, queues, hash-tables, etc.) into efficient non-blocking variants, (b) a precise memory model for reasoning about the correctness of program transformations performed by the compiler in a shared-memory concurrency programming model, along with detailed experimental validation on the impact of the model's design on compiler transformations and optimizations, and (c) a methodology to formally reason about complex concurrent interactions between application threads and managed components like modern garbage collectors. The primary artifacts of this effort will be formally certified tools, specifically, compilers, and runtime components found in modern managed languages that can be used to replace existing infrastructure, as well as new language-level memory models that are both conceptually cleaner to reason about and deploy within a verified optimizing compiler framework.  &lt;br/&gt;&lt;br/&gt;These artifacts will dramatically change the safety-critical application landscape, which increasingly contains concurrent components, relieving the need for costly manual inspection of source and binary, and enabling a richer class of optimizations.  They will greatly assist engineers in the task of constructing high-assurance, mission-critical software systems, such as avionics, medical systems, and military communications systems.&lt;br/&gt;&lt;br/&gt;The proposed research focus will be on the specification and verification of optimization passes from Java bytecodes generated from a Java application to a low-level intermediate representation (register transfer language), used in the CompcertTSO certified compiler previously developed by the PIs. In addition, the project will undertake the formalization of salient runtime components, including memory management and threads.  While patterned after the Java memory model, the memory abstraction underlying the language semantics will be carefully tailored to facilitate mechanized reasoning about program transformations and will be cognizant of the relaxed memory features of the underlying hardware.  This project combines infrastructure engineering and scientific advances in software verification.</AbstractNarration>
<MinAmdLetterDate>08/07/2013</MinAmdLetterDate>
<MaxAmdLetterDate>11/22/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1318227</AwardID>
<Investigator>
<FirstName>Sunil</FirstName>
<LastName>Prabhakar</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sunil K Prabhakar</PI_FULL_NAME>
<EmailAddress>sunil@purdue.edu</EmailAddress>
<PI_PHON>7654945736</PI_PHON>
<NSF_ID>000490800</NSF_ID>
<StartDate>09/14/2015</StartDate>
<EndDate>11/22/2016</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jan</FirstName>
<LastName>Vitek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jan Vitek</PI_FULL_NAME>
<EmailAddress>j.vitek@neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000290862</NSF_ID>
<StartDate>11/22/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jan</FirstName>
<LastName>Vitek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jan Vitek</PI_FULL_NAME>
<EmailAddress>j.vitek@neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000290862</NSF_ID>
<StartDate>10/01/2013</StartDate>
<EndDate>09/11/2014</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Suresh</FirstName>
<LastName>Jagannathan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Suresh Jagannathan</PI_FULL_NAME>
<EmailAddress>suresh@cs.purdue.edu</EmailAddress>
<PI_PHON>7654940971</PI_PHON>
<NSF_ID>000181308</NSF_ID>
<StartDate>11/22/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Gustavo</FirstName>
<LastName>Petri</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gustavo Petri</PI_FULL_NAME>
<EmailAddress>gpetri@purdue.edu</EmailAddress>
<PI_PHON>7654941055</PI_PHON>
<NSF_ID>000653846</NSF_ID>
<StartDate>01/27/2015</StartDate>
<EndDate>09/14/2015</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Gustavo</FirstName>
<LastName>Petri</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gustavo Petri</PI_FULL_NAME>
<EmailAddress>gpetri@purdue.edu</EmailAddress>
<PI_PHON>7654941055</PI_PHON>
<NSF_ID>000653846</NSF_ID>
<StartDate>09/30/2013</StartDate>
<EndDate>09/11/2014</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName/>
<StateCode>IN</StateCode>
<ZipCode>479072017</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~475000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Modern-day software applications execute on a complex software stack, comprising sophisticated libraries and managed runtime services that interact with one another using subtle (often racy) concurrency patterns.&nbsp; Precisely reasoning about application correctness in the face of this complexity requires devising new modular verification methods.&nbsp; This project explores this question by considering a verification infrastructure capable of reasoning about high-level concurrent programming applications that use managed runtime services, such as garbage collectors.&nbsp; &nbsp;Concurrency abstractions available to source programs are usually translated to sophisticated lower-level patterns that expose greater concurrency, at the expense of ease of reasoning.&nbsp; Managed services are themselves highly concurrent, and exhibit subtle interactions with source applications.&nbsp; &nbsp; A new verification methodology, along with new proof engineering principles, capable of modular verification of concurrent Java programs interacting with state-of-the-art concurrent collectors, defines the main contributions of this project.&nbsp; &nbsp;The outcome of this work paves the way for developing a full end-to-end verification pipeline for next-generation software architectures and compilers.</p> <p>There were two significant results produced under this effort.&nbsp; (1)&nbsp; A framework (i.e, proof methodology) for the verified compilation of high-level languages like Java or C\# whose intermediate representations provide support for shared-memory synchronization and automatic memory management. In this environment, the interactions between application threads and the language runtime (the garbage collector) are regulated by compiler-injected code snippets that help specify the creation, reclamation, and status of heap-allocated memory objects.&nbsp; The proof structure developed in this project</p> <p>helps to precisely relate concurrent code expressed at different abstraction levels.&nbsp; Our technique allows the compiler writer to reason compositionally about the safety of low-level concurrent code used to implement managed services. (2)&nbsp; As a significant follow-on to result (1), we developed a fully verified mechanized proof of a state-of-the-art concurrent garbage collector.&nbsp; Critical to the proof effort is the design of a new compiler intermediate representation (IR) with strong type guarantees, dedicated support for abstract concurrent data structures, and high-level control structures designed with proof engineering in mind.&nbsp; The resulting artefact supports an incremental proof methodology where annotations and invariants can be progressively enriched.&nbsp; The formalization of concurrency abstractions, compilation framework, IR, proof system, and soundness results, all given using the Coq proof assistant, and collectively defines a notable advance in the state-of-the-art of concurrent program verification.</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/16/2018<br>      Modified by: Suresh&nbsp;Jagannathan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Modern-day software applications execute on a complex software stack, comprising sophisticated libraries and managed runtime services that interact with one another using subtle (often racy) concurrency patterns.  Precisely reasoning about application correctness in the face of this complexity requires devising new modular verification methods.  This project explores this question by considering a verification infrastructure capable of reasoning about high-level concurrent programming applications that use managed runtime services, such as garbage collectors.   Concurrency abstractions available to source programs are usually translated to sophisticated lower-level patterns that expose greater concurrency, at the expense of ease of reasoning.  Managed services are themselves highly concurrent, and exhibit subtle interactions with source applications.    A new verification methodology, along with new proof engineering principles, capable of modular verification of concurrent Java programs interacting with state-of-the-art concurrent collectors, defines the main contributions of this project.   The outcome of this work paves the way for developing a full end-to-end verification pipeline for next-generation software architectures and compilers.  There were two significant results produced under this effort.  (1)  A framework (i.e, proof methodology) for the verified compilation of high-level languages like Java or C\# whose intermediate representations provide support for shared-memory synchronization and automatic memory management. In this environment, the interactions between application threads and the language runtime (the garbage collector) are regulated by compiler-injected code snippets that help specify the creation, reclamation, and status of heap-allocated memory objects.  The proof structure developed in this project  helps to precisely relate concurrent code expressed at different abstraction levels.  Our technique allows the compiler writer to reason compositionally about the safety of low-level concurrent code used to implement managed services. (2)  As a significant follow-on to result (1), we developed a fully verified mechanized proof of a state-of-the-art concurrent garbage collector.  Critical to the proof effort is the design of a new compiler intermediate representation (IR) with strong type guarantees, dedicated support for abstract concurrent data structures, and high-level control structures designed with proof engineering in mind.  The resulting artefact supports an incremental proof methodology where annotations and invariants can be progressively enriched.  The formalization of concurrency abstractions, compilation framework, IR, proof system, and soundness results, all given using the Coq proof assistant, and collectively defines a notable advance in the state-of-the-art of concurrent program verification.          Last Modified: 09/16/2018       Submitted by: Suresh Jagannathan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
