<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>RI: Small: Answer Set Programming Modulo Theories</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2013</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>315000.00</AwardTotalIntnAmount>
<AwardAmount>315000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>James Donlon</SignBlockName>
<PO_EMAI>jdonlon@nsf.gov</PO_EMAI>
<PO_PHON>7032928074</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Efficient computation of expressive nonmonotonic first-order reasoning is important for realizing robust intelligence. Answer Set Programming (ASP) is a successful nonmonotonic declarative programming paradigm, but is limited in handling first-order reasoning involving functions due to its propositional setting. Satisfiability Modulo Theories (SMT) is a successful approach to solving some specialized first-order reasoning, but is limited in handling nonmonotonic reasoning.&lt;br/&gt;&lt;br/&gt;This project aims at correcting these deficiencies by tightly integrating ASP and SMT in the framework of "Answer Set Programming Modulo Theories" (ASPMT). ASPMT will enjoy the expressiveness of the ASP modeling language while leveraging efficient constraint / theory solving methods available in SMT and other related computing paradigms. It will provide a viable approach to solving problems that requires both discrete high level reasoning and continuous low level reasoning, and will provide an effective way to handle heterogeneous knowledge and/or computation sources in a uniform framework. The project will also deliver an online computation model of the framework and its implementation.&lt;br/&gt;&lt;br/&gt;The success of the project will produce a general method of efficient computation of expressive reasoning by intelligently combining different formalisms and their implementations, and will promote cross-fertilization among the involved communities. The success of this project will have a significant impact on a wide range of domains that can benefit from a powerful declarative programming paradigm. It will provide a practically usable knowledge representation programming language and tools, which can be easily used by non-KR experts while hiding the details of various computational methods.</AbstractNarration>
<MinAmdLetterDate>08/13/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/13/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319794</AwardID>
<Investigator>
<FirstName>Joohyung</FirstName>
<LastName>Lee</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Joohyung Lee</PI_FULL_NAME>
<EmailAddress>joolee@asu.edu</EmailAddress>
<PI_PHON>4809652784</PI_PHON>
<NSF_ID>000492036</NSF_ID>
<StartDate>08/13/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Arizona State University</Name>
<CityName>TEMPE</CityName>
<ZipCode>852816011</ZipCode>
<PhoneNumber>4809655479</PhoneNumber>
<StreetAddress>ORSPA</StreetAddress>
<StreetAddress2><![CDATA[660 South Mill Avenue, Suite 310]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<StateCode>AZ</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AZ09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>943360412</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>ARIZONA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>806345658</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Arizona State University]]></Name>
<CityName>TEMPE</CityName>
<StateCode>AZ</StateCode>
<ZipCode>852816011</ZipCode>
<StreetAddress><![CDATA[ORSPA]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AZ09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7495</Code>
<Text>Robust Intelligence</Text>
</ProgramElement>
<ProgramReference>
<Code>7495</Code>
<Text>ROBUST INTELLIGENCE</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~315000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Efficient computation of expressive nonmonotonic first-order reasoning is important for realizing robust intelligence. Answer Set Programming (ASP) is a widely used nonmonotonic declarative programming paradigm that works effectively at the propositional level but is limited in handling first-order reasoning involving general functions. Satisfiability Modulo Theories (SMT) is an effective way to compute some specialized first-order reasoning but is limited in handling nonmonotonic reasoning.&nbsp;</span>&nbsp;</p> <p><span>To correct the deficiencies, the research first extended the first-order stable model semantics with &ldquo;intensional functions&rdquo;&mdash; functions via which nonmonotonicity of the stable model semantics can be expressed. Intensional functions are useful for representing inertia and the default behavior of a system and can be exploited for alleviating the grounding problem involving functional fluents (the size of ground instances become too big for numeric domains). The research investigated mathematical properties of the formalism and showed that several classical results in ASP naturally carry over to the extension. Based on the functional stable model semantics, we defined a novel framework &ldquo;Answer Set Programming Modulo Theories&rdquo; analogous to the way Satisfiability Modulo Theories (SMT) is defined. We showed that other existing approaches to integrating ASP with constraint processing and SMT can be uniformly viewed as special cases of ASPMT.&nbsp;</span></p> <p><span>We showed that a fragment of ASPMT can be reduced to SMT so that efficient SMT solvers can be used for computing expressive nonmonotonic reasoning, the idea that led to the design of an ASPMT implementation. The implementation can handle a large integer domain more effectively than standard ASP solvers and even allow real number computation that is not supported in ASP solvers.</span>&nbsp;</p> <p><span>The project also produced a high-level action language called BC+ that is based on ASPMT, which allows a concise and elaboration tolerant representation of hybrid transition systems, where discrete changes and continuous transitions co-exist. We implemented the system to compute BC+ based on the reduction to ASPMT.&nbsp;</span>&nbsp;</p> <p><span>The outcomes of the project were disseminated via several publications in journals,&nbsp; conferences and workshops, a tutorial at AAAI, one Ph.D. dissertation, four MS theses, and six software systems that were made publicly available. The students involved in the project had opportunities to learn various KR formalisms and their tradeoffs, which contributed to writing their own dissertation and theses. They had chances to present their work at several conferences.</span></p> <div><span><br /></span></div> <p>&nbsp;</p><br> <p>            Last Modified: 12/11/2017<br>      Modified by: Joohyung&nbsp;Lee</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511821566440_classifyformalisms2--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511821566440_classifyformalisms2--rgov-800width.jpg" title="ASPMT and FSM"><img src="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511821566440_classifyformalisms2--rgov-66x44.jpg" alt="ASPMT and FSM"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Classifying the formalisms</div> <div class="imageCredit">Joohyung Lee</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Joohyung&nbsp;Lee</div> <div class="imageTitle">ASPMT and FSM</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511821680950_asp-interface--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511821680950_asp-interface--rgov-800width.jpg" title="ASP as an interface language"><img src="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511821680950_asp-interface--rgov-66x44.jpg" alt="ASP as an interface language"></a> <div class="imageCaptionContainer"> <div class="imageCaption">ASP as an interface language</div> <div class="imageCredit">Joohyung Lee</div> <div class="imageSubmitted">Joohyung&nbsp;Lee</div> <div class="imageTitle">ASP as an interface language</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511845100807_aspmt-archi--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511845100807_aspmt-archi--rgov-800width.jpg" title="ASPMT System Architecture"><img src="/por/images/Reports/POR/2017/1319794/1319794_10266919_1511845100807_aspmt-archi--rgov-66x44.jpg" alt="ASPMT System Architecture"></a> <div class="imageCaptionContainer"> <div class="imageCaption">ASPMT System Architecture</div> <div class="imageCredit">Joohyung Lee</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Joohyung&nbsp;Lee</div> <div class="imageTitle">ASPMT System Architecture</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Efficient computation of expressive nonmonotonic first-order reasoning is important for realizing robust intelligence. Answer Set Programming (ASP) is a widely used nonmonotonic declarative programming paradigm that works effectively at the propositional level but is limited in handling first-order reasoning involving general functions. Satisfiability Modulo Theories (SMT) is an effective way to compute some specialized first-order reasoning but is limited in handling nonmonotonic reasoning.    To correct the deficiencies, the research first extended the first-order stable model semantics with "intensional functions"&mdash; functions via which nonmonotonicity of the stable model semantics can be expressed. Intensional functions are useful for representing inertia and the default behavior of a system and can be exploited for alleviating the grounding problem involving functional fluents (the size of ground instances become too big for numeric domains). The research investigated mathematical properties of the formalism and showed that several classical results in ASP naturally carry over to the extension. Based on the functional stable model semantics, we defined a novel framework "Answer Set Programming Modulo Theories" analogous to the way Satisfiability Modulo Theories (SMT) is defined. We showed that other existing approaches to integrating ASP with constraint processing and SMT can be uniformly viewed as special cases of ASPMT.   We showed that a fragment of ASPMT can be reduced to SMT so that efficient SMT solvers can be used for computing expressive nonmonotonic reasoning, the idea that led to the design of an ASPMT implementation. The implementation can handle a large integer domain more effectively than standard ASP solvers and even allow real number computation that is not supported in ASP solvers.   The project also produced a high-level action language called BC+ that is based on ASPMT, which allows a concise and elaboration tolerant representation of hybrid transition systems, where discrete changes and continuous transitions co-exist. We implemented the system to compute BC+ based on the reduction to ASPMT.    The outcomes of the project were disseminated via several publications in journals,  conferences and workshops, a tutorial at AAAI, one Ph.D. dissertation, four MS theses, and six software systems that were made publicly available. The students involved in the project had opportunities to learn various KR formalisms and their tradeoffs, which contributed to writing their own dissertation and theses. They had chances to present their work at several conferences.            Last Modified: 12/11/2017       Submitted by: Joohyung Lee]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
