<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Network Virtualization for OpenCloud</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>John Brassil</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This project addresses the issue of functionality placement in virtualized networks.   Functionality placement is the mapping of virtualized functions onto the network substrate and is a key part of using network virtualization to create sophisticated multitenant applications on top of virtualized network "slices".  Prior work only considered virtualizing of communications links via methodologies such as Software Defined Networking (SDN).   This project will demonstrate how one can implement network virtualization by utilizing only the edge of the physical network (which would make deployment much simpler) and how one can apply these ideas to higher-level functions (e.g., firewalls, proxy caches) and not just L2/L3 switches as are typically considered.&lt;br/&gt;&lt;br/&gt;Cloud Computing is rapidly changing the face of computing infrastructure and is a major economic driver in the technology sector. This project will benefit the cloud computing industry by informing the design of future cloud computing infrastructure and contributing prototype implementations the research community as open-source code.</AbstractNarration>
<MinAmdLetterDate>09/11/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/11/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1343947</AwardID>
<Investigator>
<FirstName>Scott</FirstName>
<LastName>Shenker</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Scott Shenker</PI_FULL_NAME>
<EmailAddress>shenker@berkeley.edu</EmailAddress>
<PI_PHON>5106433043</PI_PHON>
<NSF_ID>000241246</NSF_ID>
<StartDate>09/11/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>International Computer Science Institute</Name>
<CityName>Berkeley</CityName>
<ZipCode>947041345</ZipCode>
<PhoneNumber>5106662900</PhoneNumber>
<StreetAddress>2150 Shattuck Ave, Suite 1100</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>187909478</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>INTERNATIONAL COMPUTER SCIENCE INSTITUTE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[International Computer Science Institute]]></Name>
<CityName>Berkeley</CityName>
<StateCode>CA</StateCode>
<ZipCode>947044115</ZipCode>
<StreetAddress><![CDATA[1947 Center Street, Suite 600]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~300000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Network virtualization was (and remains) the "killer app" for Software-Defined&nbsp;</span><span>Networking (SDN). In its simplest guise, network virtualization enables network</span><span>&nbsp;</span><span>operators to control their network not by direct configuration of the actual physical</span><span>&nbsp;</span><span>network but by specifying a logical (or virtual) network that meets their desired</span><span>&nbsp;</span><span>objectives (in terms of limiting access between hosts, etc.). The network virtualization</span><span>&nbsp;</span><span>platform is responsible for &ldquo;compiling" this virtual network into the appropriate</span><span>&nbsp;</span><span>configurations for the physical network. Thus, network virtualization shields network</span><span>&nbsp;</span><span>operators from the complexity of the physical infrastructure, while still allowing them to</span><span>&nbsp;</span><span>achieve a wide range of objectives.</span><br /><br /><span>The goal of this research effort was twofold: (1) to explore how to best implement the</span><span>&nbsp;</span><span>basic network virtualization paradigm in OpenCloud, and (2) to explore how one might apply this</span><span>&nbsp;</span><span>network virtualization approach more broadly to other networking problems.</span><span>&nbsp;</span><br /><br /><span>In terms of the first goal, we identified two fundamental implementation challenges in network&nbsp;</span><span>virtualization: scaling</span><span>&nbsp;and programmability. To achieve scalability, we chose to pursue the approach&nbsp;</span><span>pioneered by Nicira and</span><span>&nbsp;</span><span>articulated in the 2012 &ldquo;Fabric&rdquo; paper (</span><span>http://yuba.stanford.edu/~casado/fabric.pdf). This</span><span>&nbsp;</span><span>approach places all</span><span>&nbsp;</span><span>nontrivial</span><span>&nbsp;</span><span>functionality at the network edge, and then</span><span>&nbsp;</span><span>uses the core to do</span><span>&nbsp;</span><span>simple edge-to-edge</span><span>&nbsp;</span><span>routing.&nbsp;</span><span>This approach scales by&nbsp;</span><span>keeping all the</span><span>&nbsp;</span><span>complexity out of the core and</span><span>&nbsp;</span><span>placing it at the edge where software can</span><span>&nbsp;</span><span>handle large</span><span>&nbsp;forwarding tables.&nbsp;</span><span>However, there are some subtleties in how one</span><span>&nbsp;</span><span>handles</span><span>&nbsp;</span><span>programmability in this form of virtualization. T</span><span>he</span><span>&nbsp;</span><span>question is whether one</span><span>&nbsp;</span><span>can support programmatic semantics for virtual</span><span>&nbsp;</span><span>switches that</span><span>&nbsp;</span><span>maintains a high degree of consistency (i.e., when one changes the</span><span>&nbsp;</span><span>virtual forwarding table, all copies of the virtual switch are updated</span><span>&nbsp;</span><span>atomically).&nbsp;</span><span>After exploring a wide</span><span>&nbsp;</span><span>range of options, we finally concluded that</span><span>&nbsp;</span><span>the performance penalty of such</span><span>&nbsp;</span><span>consistency guarantees are prohibitive.</span><span>&nbsp;</span><span>Fortunately, we found few situations where such</span><span>&nbsp;</span><span>consistency guarantees</span><span>&nbsp;are required. Thus, our conclusion for OpenCloud (born out of experimental prototyping of the various</span><span>&nbsp;</span><span>options) is</span><span>&nbsp;</span><span>that (a) OpenCloud should adopt the edge-based virtualization</span><span>&nbsp;</span><span>paradigm, but</span><span>&nbsp;</span><span>(b) not attempt</span><span>&nbsp;</span><span>to support consistency semantics on the</span><span>&nbsp;</span><span>virtual switches.&nbsp;</span></p> <div><br />In terms of our second goal, we&nbsp;identified several new areas whe...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Network virtualization was (and remains) the "killer app" for Software-Defined Networking (SDN). In its simplest guise, network virtualization enables network operators to control their network not by direct configuration of the actual physical network but by specifying a logical (or virtual) network that meets their desired objectives (in terms of limiting access between hosts, etc.). The network virtualization platform is responsible for "compiling" this virtual network into the appropriate configurations for the physical network. Thus, network virtualization shields network operators from the complexity of the physical infrastructure, while still allowing them to achieve a wide range of objectives.  The goal of this research effort was twofold: (1) to explore how to best implement the basic network virtualization paradigm in OpenCloud, and (2) to explore how one might apply this network virtualization approach more broadly to other networking problems.   In terms of the first goal, we identified two fundamental implementation challenges in network virtualization: scaling and programmability. To achieve scalability, we chose to pursue the approach pioneered by Nicira and articulated in the 2012 "Fabric" paper (http://yuba.stanford.edu/~casado/fabric.pdf). This approach places all nontrivial functionality at the network edge, and then uses the core to do simple edge-to-edge routing. This approach scales by keeping all the complexity out of the core and placing it at the edge where software can handle large forwarding tables. However, there are some subtleties in how one handles programmability in this form of virtualization. The question is whether one can support programmatic semantics for virtual switches that maintains a high degree of consistency (i.e., when one changes the virtual forwarding table, all copies of the virtual switch are updated atomically). After exploring a wide range of options, we finally concluded that the performance penalty of such consistency guarantees are prohibitive. Fortunately, we found few situations where such consistency guarantees are required. Thus, our conclusion for OpenCloud (born out of experimental prototyping of the various options) is that (a) OpenCloud should adopt the edge-based virtualization paradigm, but (b) not attempt to support consistency semantics on the virtual switches.   In terms of our second goal, we identified several new areas where network virtualization could be applied more generally. These new uses are:     Virtualization for network repair: When a link fails, routing algorithms typically initiate a global route recomputation. Sometimes this is augmented with the use of a failover route. Both of these approaches have limitations: global route recomputations take a long time, while failover routes typically only protect the network against single failures. The goal of "network repair via virtualization" is to allow route recomputation to be as local as possible, while not limited to simple single-link failure modes. The result is a method where, upon failure, one uses the previously computed routes but implements them on a virtual version of the old topology. This virtual version of the topology can be computed recursively, stopping when there is a faithful realization of the original topology. This method can be an order-of-magnitude faster than a global recomputation, while still applying to general failure cases. Virtualization for services: With the increasing prevalence of middleboxes, networks today are capable of doing far more than merely delivering packets. In fact, to realize their full potential for both supporting innovation and generating revenue, we should think of carrier networks as service-delivery platforms. This requires providing open interfaces that allow third-parties to leverage carrier-network infrastructures in building global-scale services. We have taken the first steps towards making this vision concrete by identifying a few interface...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
