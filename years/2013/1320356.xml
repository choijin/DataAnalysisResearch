<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: A Practical Data Dependence Profiler for Program Characterization and Optimization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>384143.00</AwardTotalIntnAmount>
<AwardAmount>400143</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Society relies on an ever broadening array of computer systems for productivity, communication, entertainment, safety, and health. Systems capable of processing at faster rates and with greater efficiency are necessary to sustain the pace of innovation. A key part of achieving this goal is the development of tools and techniques that make it easier to build sophisticated software with a desired set of requirements.  One aspect of these tools, the focus of this work, is data dependence profiling. A data dependence profiler (DDP) conveys to a programmer, compiler, or other program analysis tool the likelihood of a data dependence between two arbitrary memory operations while the program is running. DDPs are critical since compilers and programmers often do not know or cannot determine all such relationships simply by analyzing the source code; hence, DDPs provide important information for further optimization and tuning.&lt;br/&gt;&lt;br/&gt;This project focuses on the design of a fast practical DDP that works effectively for a wide range of applications and for a wide range of program analysis needs.  The first goal is speed: that the DDP impose only a small slowdown, the target being a factor of two.  A second goal is to maintain accuracy: bounding the uncertainty and imprecision inherent in profiling, and providing information about the accuracy with the profiler feedback. The third goal is integration of the DDP into a feedback-directed optimization framework, to explore and understand its capabilities.&lt;br/&gt;&lt;br/&gt;If the goals of the project are met, DDPs are expected to become more widely integrated into program development tools in support of existing technology and enabling new technologies that ultimately will benefit society.  Open source distribution of the tools developed by the project strengthens and extends the available open-source software infrastructure relied upon by both academia and industry.  The project integrates education with research through involvement of graduate, undergraduate, and high school students.</AbstractNarration>
<MinAmdLetterDate>09/09/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/12/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320356</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Tuck</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME>III</PI_SUFX_NAME>
<PI_FULL_NAME>James M Tuck</PI_FULL_NAME>
<EmailAddress>jtuck@ncsu.edu</EmailAddress>
<PI_PHON>9195130923</PI_PHON>
<NSF_ID>000498662</NSF_ID>
<StartDate>09/09/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2><![CDATA[Admin. III, STE 240]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[North Carolina State University]]></Name>
<CityName>Raleigh</CityName>
<StateCode>NC</StateCode>
<ZipCode>276957911</ZipCode>
<StreetAddress><![CDATA[Department of ECE, 3066 EB II, C]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~384143</FUND_OBLG>
<FUND_OBLG>2016~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p dir="ltr">Computer programs use sophisticated logic and data structures to carry out their work. &nbsp;As the program runs, it produces intermediate results that are stored in memory and re-used later when needed. &nbsp;Data dependence profiling is the problem of identifying which parts of a program depend on which data. Capturing this information efficiently and with high accuracy can be valuable feedback to programmers and automated tools that help improve software either manually or automatically. &nbsp;Conventional approaches to data dependence profiling incur high-performance overheads, making them difficult to deploy and use. This project aims to make dependence profilers practical.</p> <p dir="ltr">&nbsp;</p> <p dir="ltr">This project explored alternative designs that trade-off performance for accuracy, with the overarching goal of finding higher performance alternatives with minimal impact on accuracy. A key to achieving this result is the use of novel data structures that make it possible to evaluate the presence of dependences in bulk using an approximation without sacrificing much accuracy. Specifically, a set-based profiler based on Bloom filters was explored and developed that offers a better performance and accuracy trade-off than any other profiler we have compared against. The conventional wisdom is that dependence profiling is slow, but the results demonstrate that this need not be the case. Integration of this new approach into software development toolchains may enable far more efficient dependence profiling than in the past, opening the door to new kinds of tools that more aggressively optimize in the presence of hard-to-analyze memory dependences. The results and benefits of this technique are documented in two masters theses and in the source code that has been released on the project website and open source repository on GitHub.com.</p> <p>This project also&nbsp;<span class="gmail-gr_ gmail-gr_27 gmail-gr-alert gmail-gr_gramm gmail-gr_inline_cards gmail-gr_run_anim gmail-Grammar gmail-multiReplace">led</span>&nbsp;to the discovery of a new code optimization technique for automatic vectorization that can achieve a significant performance improvement over the state-of-the-art. The new technique enhances a vectorization algorithm known as Superword Level Parallelism (SLP).&nbsp; SLP requires detection of isomorphic instructions, that is instructions that perform the same operation, like an addition, but on different data. If such isomorphic instructions are detected, they can be grouped together into a single instruction. A key challenge of SLP is identifying which instructions should be grouped, as picking the wrong ones can lead to significant performance loss. This project discovered a new hierarchical approach&nbsp;that does a better job finding long sequences of vectorizable instructions than previous approaches. The results of this discovery were published in a peer-reviewed conference.</p> <p dir="ltr">Over the course of this project, many students were trained in the art of compiler design and optimization techniques. In total, it partially or fully supported 4 undergraduate students, 2 Ph.D. students, 1 Ph.D. thesis, 3 MS students and their theses, and 5 additional M.S.-level graduate students who volunteered or carried out independent studies associated with the project.&nbsp;</p> <p dir="ltr">&nbsp;</p><br> <p>            Last Modified: 02/01/2019<br>      Modified by: James&nbsp;M&nbsp;Tuck</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Computer programs use sophisticated logic and data structures to carry out their work.  As the program runs, it produces intermediate results that are stored in memory and re-used later when needed.  Data dependence profiling is the problem of identifying which parts of a program depend on which data. Capturing this information efficiently and with high accuracy can be valuable feedback to programmers and automated tools that help improve software either manually or automatically.  Conventional approaches to data dependence profiling incur high-performance overheads, making them difficult to deploy and use. This project aims to make dependence profilers practical.   This project explored alternative designs that trade-off performance for accuracy, with the overarching goal of finding higher performance alternatives with minimal impact on accuracy. A key to achieving this result is the use of novel data structures that make it possible to evaluate the presence of dependences in bulk using an approximation without sacrificing much accuracy. Specifically, a set-based profiler based on Bloom filters was explored and developed that offers a better performance and accuracy trade-off than any other profiler we have compared against. The conventional wisdom is that dependence profiling is slow, but the results demonstrate that this need not be the case. Integration of this new approach into software development toolchains may enable far more efficient dependence profiling than in the past, opening the door to new kinds of tools that more aggressively optimize in the presence of hard-to-analyze memory dependences. The results and benefits of this technique are documented in two masters theses and in the source code that has been released on the project website and open source repository on GitHub.com.  This project also led to the discovery of a new code optimization technique for automatic vectorization that can achieve a significant performance improvement over the state-of-the-art. The new technique enhances a vectorization algorithm known as Superword Level Parallelism (SLP).  SLP requires detection of isomorphic instructions, that is instructions that perform the same operation, like an addition, but on different data. If such isomorphic instructions are detected, they can be grouped together into a single instruction. A key challenge of SLP is identifying which instructions should be grouped, as picking the wrong ones can lead to significant performance loss. This project discovered a new hierarchical approach that does a better job finding long sequences of vectorizable instructions than previous approaches. The results of this discovery were published in a peer-reviewed conference. Over the course of this project, many students were trained in the art of compiler design and optimization techniques. In total, it partially or fully supported 4 undergraduate students, 2 Ph.D. students, 1 Ph.D. thesis, 3 MS students and their theses, and 5 additional M.S.-level graduate students who volunteered or carried out independent studies associated with the project.          Last Modified: 02/01/2019       Submitted by: James M Tuck]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
