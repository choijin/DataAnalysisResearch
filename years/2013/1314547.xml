<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: AF: Large: Collaborative Research: Parallelism without Concurrency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2013</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>1000000.00</AwardTotalIntnAmount>
<AwardAmount>1000000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The widespread deployment of parallel machines --- from multicores to supercomputers --- has made it critical to develop simple approaches to programming them.  Significant progress has been made in simplifying parallel programming by developing programming models to support parallelism without concurrency, that is, without the nondeterminacies in the logic of programs caused by the relative and nondeterministic timing of communicating processes.  Yet most parallel programs in practice are concurrent, and hence, nondeterministic, leading to code that can only be programmed and understood by experts.  This research project aims to understand how parallel computers can be made easier to use by the vast majority of programmers by developing software technology that enables deterministic parallel computing.&lt;br/&gt;&lt;br/&gt;The project takes a holistic view of the problem from the key perspectives of programming linguistics, software systems, algorithmic analysis, and absolute performance.  It acknowledges the reality that parallel programming cannot be fully deterministic at every level of abstraction.  It is pursuing three key strategies for dealing with concurrency: encapsulating concurrency so that it is hidden by layered abstractions at appropriate abstraction levels, avoiding concurrency by restructuring programs to employ deterministic approaches, and managing concurrency when it is impractical to either encapsulate or avoid concurrency completely. Among the specific techniques being studied are commutative building blocks, deterministic nonassociative reducers, deterministic pipelined parallelism, deterministic interfaces, and generalized race detection for detecting invariant races.  The project is developing open-source libraries, tools, and runtime extensions integrated into a multicore-software platform, as well as a problem-based benchmark suite to compare approaches.</AbstractNarration>
<MinAmdLetterDate>06/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/05/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1314547</AwardID>
<Investigator>
<FirstName>Charles</FirstName>
<LastName>Leiserson</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Charles E Leiserson</PI_FULL_NAME>
<EmailAddress>cel@csail.mit.edu</EmailAddress>
<PI_PHON>6172535833</PI_PHON>
<NSF_ID>000114754</NSF_ID>
<StartDate>06/26/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394301</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7934</Code>
<Text>PARAL/DISTRIBUTED ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~500000</FUND_OBLG>
<FUND_OBLG>2014~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project produced a host of parallel programming technology and advanced the techniques for coping with nondeterminism in parallel programs.&nbsp; These developments include novel parallel algorithms, parallel runtime systems, productivity tools for analyzing the correctness and performance of parallel programs, parallel compiler technology, infrastructure for software performance engineering, and a variety of new techniques for writing fast parallel software.&nbsp; As multicore processors have become ubiquitous in today's computing milieu, these developments have grown the body of highly efficient parallel-computing software and deepened our understanding of deterministic parallel programming.&nbsp; These developments have thus made significant strides towards the goal of enabling the vast majority of computer programmers, not just experts, to use multicore-computing hardware to write efficient software.</p> <p><br />The project produced many efficient parallel algorithms.&nbsp; We developed efficient parallel algorithms for graph coloring and for data-graph computations, a class of graph computations popularized by such programming systems as Galois, Pregel, GraphLab, PowerGraph, and GraphChi.&nbsp; We also developed a system called Laika which efficiently processes data-graph computations for graphs that represent physical simulations.&nbsp; We developed the AUTOGEN algorithm for discovering efficient cache-oblivious parallel recursive algorithms for dynamic programming problems.&nbsp; We developed a high-throughput system to tackle the "clusterscale" problem of brain connectomics using a single commodity multicore machine.</p> <p><br />The project advanced language, compiler, and runtime-system technology for parallel computing.&nbsp; We developed linguistics and scheduling support for &ldquo;on-the-fly&rdquo; pipeline parallelism.&nbsp; We investigated a variant of the work-stealing algorithm that we call the localized work-stealing algorithm.&nbsp; We developed a compiler intermediate representation (IR), called Tapir, that embeds fork-join parallelism into a mainstream compiler's conventional IR for serial code.&nbsp; We developed CilkCloud, a lightweight framework for managing cloud-computing resources that is designed to meet the needs of university classes.&nbsp; We developed Tensor Comprehensions, an expressive language for deep-learning frameworks that supports effective compilation for different hardware.&nbsp; We have begun to develop Open Cilk, a new open-source platform to support Cilk multithreaded programming, especially for researchers and teachers.</p> <p><br />The project investigated novel productivity tools for studying the correctness and performance of parallel programs.&nbsp; We developed tools to detect sources of nondeterministic behavior in parallel programs that use reducer hyperobjects.&nbsp; We developed a scalability profiler, called Cilkprof, that can localize scalability bottlenecks in programs.&nbsp; We studied the problem of sensitivity analysis for parallel-program scalability.&nbsp; To facilitate future tool development, we developed the CSI framework to provide comprehensive static instrumentation that a compiler can insert into a program-under-test so that dynamic-analysis tools can observe and investigate runtime behavior.<br />The project developed a variety of other novel algorithms and systems for coping with nondeterminism and parallel-program performance.&nbsp; We developed a new memory allocator, called SuperMalloc, that is more than 3 times faster than the best alternatives on the worst-case workloads.&nbsp; We introduced a remarkably simple deterministic contention-management algorithm for guaranteeing the forward progress of transactions&mdash;avoiding deadlocks, livelocks, and other anomalies.&nbsp; We investigated hardware support for scalable contended data structures, and we developed Lease/Release, a simple addition to standard directory-based MSI cache coherence protocols, allowing participants to lease memory, at the granularity of cache lines, by delaying coherence messages for a short, bounded period of time.&nbsp; We developed the Single-Time/Random (SingleR) family of policies for reissuing requests in interactive services.&nbsp; We developed an external-memory skip list that achieves write-optimized bounds.&nbsp; We investigated cache-oblivious and cache-adaptive algorithms in both theory and practice.&nbsp; For optimizing computations on sparse matrices and tensors, we developed a sampling-based algorithm called PHIL to estimate the fill of sparse matrices and tensors in any format.&nbsp; We developed a dynamic sparse graph representation called Packed Compressed Sparse Row (PCSR) to optimize computations on dynamic graphs.</p> <p><br />The research artifacts from this project have been published in major academic conferences and journals.&nbsp; The software artifacts have been made available as free, open-source projects on the Web.</p><br> <p>            Last Modified: 10/27/2018<br>      Modified by: Charles&nbsp;E&nbsp;Leiserson</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project produced a host of parallel programming technology and advanced the techniques for coping with nondeterminism in parallel programs.  These developments include novel parallel algorithms, parallel runtime systems, productivity tools for analyzing the correctness and performance of parallel programs, parallel compiler technology, infrastructure for software performance engineering, and a variety of new techniques for writing fast parallel software.  As multicore processors have become ubiquitous in today's computing milieu, these developments have grown the body of highly efficient parallel-computing software and deepened our understanding of deterministic parallel programming.  These developments have thus made significant strides towards the goal of enabling the vast majority of computer programmers, not just experts, to use multicore-computing hardware to write efficient software.   The project produced many efficient parallel algorithms.  We developed efficient parallel algorithms for graph coloring and for data-graph computations, a class of graph computations popularized by such programming systems as Galois, Pregel, GraphLab, PowerGraph, and GraphChi.  We also developed a system called Laika which efficiently processes data-graph computations for graphs that represent physical simulations.  We developed the AUTOGEN algorithm for discovering efficient cache-oblivious parallel recursive algorithms for dynamic programming problems.  We developed a high-throughput system to tackle the "clusterscale" problem of brain connectomics using a single commodity multicore machine.   The project advanced language, compiler, and runtime-system technology for parallel computing.  We developed linguistics and scheduling support for "on-the-fly" pipeline parallelism.  We investigated a variant of the work-stealing algorithm that we call the localized work-stealing algorithm.  We developed a compiler intermediate representation (IR), called Tapir, that embeds fork-join parallelism into a mainstream compiler's conventional IR for serial code.  We developed CilkCloud, a lightweight framework for managing cloud-computing resources that is designed to meet the needs of university classes.  We developed Tensor Comprehensions, an expressive language for deep-learning frameworks that supports effective compilation for different hardware.  We have begun to develop Open Cilk, a new open-source platform to support Cilk multithreaded programming, especially for researchers and teachers.   The project investigated novel productivity tools for studying the correctness and performance of parallel programs.  We developed tools to detect sources of nondeterministic behavior in parallel programs that use reducer hyperobjects.  We developed a scalability profiler, called Cilkprof, that can localize scalability bottlenecks in programs.  We studied the problem of sensitivity analysis for parallel-program scalability.  To facilitate future tool development, we developed the CSI framework to provide comprehensive static instrumentation that a compiler can insert into a program-under-test so that dynamic-analysis tools can observe and investigate runtime behavior. The project developed a variety of other novel algorithms and systems for coping with nondeterminism and parallel-program performance.  We developed a new memory allocator, called SuperMalloc, that is more than 3 times faster than the best alternatives on the worst-case workloads.  We introduced a remarkably simple deterministic contention-management algorithm for guaranteeing the forward progress of transactions&mdash;avoiding deadlocks, livelocks, and other anomalies.  We investigated hardware support for scalable contended data structures, and we developed Lease/Release, a simple addition to standard directory-based MSI cache coherence protocols, allowing participants to lease memory, at the granularity of cache lines, by delaying coherence messages for a short, bounded period of time.  We developed the Single-Time/Random (SingleR) family of policies for reissuing requests in interactive services.  We developed an external-memory skip list that achieves write-optimized bounds.  We investigated cache-oblivious and cache-adaptive algorithms in both theory and practice.  For optimizing computations on sparse matrices and tensors, we developed a sampling-based algorithm called PHIL to estimate the fill of sparse matrices and tensors in any format.  We developed a dynamic sparse graph representation called Packed Compressed Sparse Row (PCSR) to optimize computations on dynamic graphs.   The research artifacts from this project have been published in major academic conferences and journals.  The software artifacts have been made available as free, open-source projects on the Web.       Last Modified: 10/27/2018       Submitted by: Charles E Leiserson]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
