<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Abstracting Programs for Automated Debugging</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2014</AwardEffectiveDate>
<AwardExpirationDate>01/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>512734.00</AwardTotalIntnAmount>
<AwardAmount>512734</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Debugging is one of the most time consuming aspects of software development costing the economy billions of dollars annually.  Any automation that reduces the manual effort involved in debugging can have a significant impact on software productivity. An integral part of all debugging activities is the task of fault localization. Once undesired behavior is spotted in a program, the actual defect has to be identified before a fix can be developed. Most existing fault localization techniques rely on the availability of high quality test suites, which limits their applicability. One promising alternative is techniques that statically analyze the faulty program fragment and do not rely on testing. The goal of this project is to develop practical static fault localization algorithms. If such algorithms were available, they would broaden the scope of programs to which automated debugging tools can be applied and enable the creation of novel tools that have the potential to change the way in which software is developed and maintained.&lt;br/&gt;&lt;br/&gt;The main research hypothesis of this project is that practical static fault localization algorithms can be realized. To validate this hypothesis the PI will explore abstractions that conservatively over-approximate the behavior of faulty programs. The precision of these abstractions must be targeted so that the error-relevant portions of the program are preserved and the defect is precisely identified.  The hypothesis that the construction of such targeted abstractions can be automated is supported by the observation that there exists a connection between fault localization and formal verification. The proposed work will explore new techniques and algorithms that leverage this connection. These algorithms will be implemented and evaluated in a static fault localization tool that will serve as a vehicle for studying advanced automated debugging techniques.</AbstractNarration>
<MinAmdLetterDate>01/22/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/25/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1350574</AwardID>
<Investigator>
<FirstName>Thomas</FirstName>
<LastName>Wies</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Thomas Wies</PI_FULL_NAME>
<EmailAddress>tw47@nyu.edu</EmailAddress>
<PI_PHON>2129983293</PI_PHON>
<NSF_ID>000611335</NSF_ID>
<StartDate>01/22/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>New York University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100121019</ZipCode>
<PhoneNumber>2129982121</PhoneNumber>
<StreetAddress>70 WASHINGTON SQUARE S</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041968306</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NEW YORK UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041968306</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[New York University Courant Institute of Mathematical Sciences]]></Name>
<CityName>New York</CityName>
<StateCode>NY</StateCode>
<ZipCode>100121019</ZipCode>
<StreetAddress><![CDATA[251 Mercer Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1045</Code>
<Text>CAREER: FACULTY EARLY CAR DEV</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~201541</FUND_OBLG>
<FUND_OBLG>2016~100884</FUND_OBLG>
<FUND_OBLG>2017~210309</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In software development, debugging refers to the task of identifying, understanding, and eliminating programming errors in software artifacts. It is one of the most time consuming aspects of programming. Several studies have estimated that, on average, programmers spend 50% of their time on debugging, costing the global economy more than $300 billion annually. Any automation that reduces the manual effort involved in debugging can have a significant impact on software productivity and reliability.<br /><br />Preexisting automated debugging techniques have typically relied on the availability of high quality test suites, which limits their applicability. Instead, this project has focused on exploring debugging techniques that do not rely on testing but leverage recent advances in formal methods for statically analyzing and reasoning about program correctness. This has lead to a broad array of new debugging techniques including among others: (1) a technique that automatically provides explanations for concurrency errors in low-level systems code, (2) a technique that localizes type errors in high-level functional programs, and (3) a technique that automatically repairs timing-related errors in models of embedded systems. The results of this research have been published in 13 papers that have appeared in major publication venues for Computer Science research. In addition, several prototype software tools that implement the developed debugging techniques have been made publicly available under non-restrictive open source licenses. These tools aim to significantly increase the productivity of programmers by helping them to understand and fix programming errors faster.<br /><br />The project has provided training opportunities for two PhD students who conducted research related to the project. Both students have successfully graduated during the project duration and have subsequently found employment in the software industry. In addition, two master students have conducted research related to the project. This gave these students the opportunity to prepare for continuing their studies as PhD students. Finally, two postdoctoral fellows have received training as part of this project, preparing them for positions in academia and industry.<br /><br />The project has also supported the PI's long-term educational goal to help Computer Science students learn how to develop software like true engineers - namely, to design and construct systems with mathematical rigor and following a scientific approach. In particular, during the duration of this project, the PI has designed and taught two new courses on Principles of Programming Languages and Object-Oriented Programming that emphasize key aspects such as automated testing and debugging, as well as practical aspects of formal methods in software design. To further broaden the educational impact of this project, the PI has been engaged in outreach programs that aim to attract high-school students to STEM fields and encourage them to aspire a career in Computer Science, such as the yearly Courant Splash day and the NYU Girls' Science, Technology, Engineering, and Mathematics (GSTEM) Summer Program.</p><br> <p>            Last Modified: 06/08/2020<br>      Modified by: Thomas&nbsp;Wies</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In software development, debugging refers to the task of identifying, understanding, and eliminating programming errors in software artifacts. It is one of the most time consuming aspects of programming. Several studies have estimated that, on average, programmers spend 50% of their time on debugging, costing the global economy more than $300 billion annually. Any automation that reduces the manual effort involved in debugging can have a significant impact on software productivity and reliability.  Preexisting automated debugging techniques have typically relied on the availability of high quality test suites, which limits their applicability. Instead, this project has focused on exploring debugging techniques that do not rely on testing but leverage recent advances in formal methods for statically analyzing and reasoning about program correctness. This has lead to a broad array of new debugging techniques including among others: (1) a technique that automatically provides explanations for concurrency errors in low-level systems code, (2) a technique that localizes type errors in high-level functional programs, and (3) a technique that automatically repairs timing-related errors in models of embedded systems. The results of this research have been published in 13 papers that have appeared in major publication venues for Computer Science research. In addition, several prototype software tools that implement the developed debugging techniques have been made publicly available under non-restrictive open source licenses. These tools aim to significantly increase the productivity of programmers by helping them to understand and fix programming errors faster.  The project has provided training opportunities for two PhD students who conducted research related to the project. Both students have successfully graduated during the project duration and have subsequently found employment in the software industry. In addition, two master students have conducted research related to the project. This gave these students the opportunity to prepare for continuing their studies as PhD students. Finally, two postdoctoral fellows have received training as part of this project, preparing them for positions in academia and industry.  The project has also supported the PI's long-term educational goal to help Computer Science students learn how to develop software like true engineers - namely, to design and construct systems with mathematical rigor and following a scientific approach. In particular, during the duration of this project, the PI has designed and taught two new courses on Principles of Programming Languages and Object-Oriented Programming that emphasize key aspects such as automated testing and debugging, as well as practical aspects of formal methods in software design. To further broaden the educational impact of this project, the PI has been engaged in outreach programs that aim to attract high-school students to STEM fields and encourage them to aspire a career in Computer Science, such as the yearly Courant Splash day and the NYU Girls' Science, Technology, Engineering, and Mathematics (GSTEM) Summer Program.       Last Modified: 06/08/2020       Submitted by: Thomas Wies]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
