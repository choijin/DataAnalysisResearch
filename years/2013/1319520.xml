<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: High-Level Programming Languages and Environments for Scalable Graph Processing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>497840.00</AwardTotalIntnAmount>
<AwardAmount>497840</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Graphs and graph algorithms are fundamental to computer science.  Although historically they have not played a major role in traditional scientific computing, their importance is rapidly increasing with the emergence of informatics and data-centric applications.  Although many graph analysis tasks are performed sequentially today, problem sizes continue to grow,  necessitating the increasing use of parallel computing.  Parallel graph algorithms are already being written, but with great effort and limited code reuse.  A major issue in current ways of implementing parallel graph algorithms is the lack of performance portability: not only is it often required to reimplement algorithms on different platforms for the best performance, it is frequently also necessary to completely redesign them.&lt;br/&gt;&lt;br/&gt;To avoid this rewriting and thus increase scientists' productivity, this project will study domain-specific programming languages allowing graph algorithms to be expressed portably, while using compilation techniques that allow the high-level expressions to achieve performance competitive with hand-written, low-level code for these algorithms.  Domain-specific languages have already shown benefit in multiple application areas.  This project will extend their benefits further in the graph domain, including to more platforms and data representations than in the past.  In particular, the project goals include finding abstractions common to the expressions of graph applications on different platforms, as well as between different applications.  To demonstrate the effectiveness of these abstractions, the project includes the creation of prototype implementations of graph algorithms for a variety of high-performance computing platforms and the evaluation of the high-level versions of algorithms against comparable low-level versions.</AbstractNarration>
<MinAmdLetterDate>08/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/23/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319520</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Lumsdaine</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrew Lumsdaine</PI_FULL_NAME>
<EmailAddress>al75@uw.edu</EmailAddress>
<PI_PHON>2065431695</PI_PHON>
<NSF_ID>000420340</NSF_ID>
<StartDate>08/26/2013</StartDate>
<EndDate>08/23/2016</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jeremiah</FirstName>
<LastName>Willcock</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jeremiah J Willcock</PI_FULL_NAME>
<EmailAddress>jewillco@osl.iu.edu</EmailAddress>
<PI_PHON>8128553608</PI_PHON>
<NSF_ID>000559516</NSF_ID>
<StartDate>08/26/2013</StartDate>
<EndDate>09/04/2014</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Martina</FirstName>
<LastName>Barnas</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Martina M Barnas</PI_FULL_NAME>
<EmailAddress>mbarnas@indiana.edu</EmailAddress>
<PI_PHON>8128569664</PI_PHON>
<NSF_ID>000683398</NSF_ID>
<StartDate>08/23/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Indiana University</Name>
<CityName>Bloomington</CityName>
<ZipCode>474013654</ZipCode>
<PhoneNumber>3172783473</PhoneNumber>
<StreetAddress>509 E 3RD ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>006046700</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF INDIANA UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>006046700</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Indiana University]]></Name>
<CityName/>
<StateCode>IN</StateCode>
<ZipCode>474013654</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~497840</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Graphs are a powerful conceptual tool that can be used to capture complex relationships in the real world. Graphs can be used to model social networks where the entities such as the network participants are connected through relationships such as friendship. They can be used to describe knowledge in machine learning systems (graphs capture the connections and structure of knowledge). Graphs also arise in areas such as planning and operations, where many interconnected entities interact in highly connected fashion. In short, graphs are tools necessary to capture the complexity that naturally arises in science and in many aspects of everyday world.</p> <p>Many graphs that arise in modern science are massive, and they require the most powerful computers to store and compute over. The focus of traditional scientific computing has been solving systems of PDEs (and the corresponding linear algebra problems). Hardware architectures, computer systems, and software platforms have evolved together to efficiently support solving these kinds of problems. Similar attention has not been devoted to efficiently solving data analytics problems. However, the executive order that created the National Strategic Computing Initiative (NSCI) specifically calls out data analytics as one of its five objectives:&nbsp;<em>Increasing coherence between the technology base used for modeling and simulation and that used for data analytic computing.</em></p> <p>The goal of this project is to provide unifying abstraction that addresses this objective. To achieve this, we developed models for graph computation and domain-specific languages for performance-portable graph algorithms. Such abstractions allow a single algorithm specification to apply to a wide variety of platforms and data structures. The languages are high-level yet capable of performance competitive with tuned code by expressing algorithm specifications (what the algorithm computes) independently from implementation details (how the algorithm computes its results).</p> <p>Some of the outcomes of this project is the Abstract Graph Machine (AGM) framework; the GL-SIMD, Datalog, and the Gizmo domain-specific languages; the pattern-based graph algorithms specification; analysis of the impact of distributed runtimes on graph algorithms; and the active messages communication framework AM++.</p> <p>Abstract Graph Machine (AGM), is a model for designing distributed-memory parallel graph algorithms. An algorithm designed using the AGM model starts from an initial state and goes through a series of state changes. States are changed by a &ldquo;processing function&rdquo;. The processing function takes a unit of work and returns zero or more units of work. Work units generated by the processing function are ordered using a strict weak ordering relation. The strict weak ordering divides work into ordered equivalence classes. Work in an equivalence class can be executed in parallel. Work in different equivalence classes is ordered according to the order of the equivalence classes. We show how AGM can be used to derive families of algorithms from a common high-level semantic description by modifying ordering used at different levels of a distributed machine.</p> <p>GL-SIMD is based on a generalized SIMD model with loose parallel synchronization, and it provides a unified framework across single-element and whole-graph expressions of algorithms. When this new model is expressed as a generic library in C++, a single algorithm implementation can be instantiated in different ways by a standard C++ compiler to apply to different data structures and models of parallelism. We used GL-SIMD to implement Datalog for graphs, a high-level language based on logic programming. We have implemented a prototype Datalog compiler &nbsp;that targets the lower-level GL-SIMD language.</p> <p>We also considered an abstraction for expressing graph algorithms in which the vertices and edges of the graph provide locality and communication structure and graph data are represented by property maps that associate vertices and edges to arbitrary user-defined data. Operations on the graph are expressed as patterns, which allow limited traversal of the graph and modification of property maps. Traversal is implicit and is automatically computed from the pattern's access of property map values. Patterns are declarative, but they can be used in imperative algorithms by using strategies that run in epochs. Strategies are user defined programs that apply patterns in a certain way (e.g., fixed point, once, delta-stepping), including chaining patterns in an arbitrary way..</p> <p>Several software artifacts were developed in this project. These artifacts are released as open source and are available to the public under non-restrictive license. We have produced several publications on different aspects of graph computation, and we have participated in standardization and development of new ideas and software interfaces. Last but not least, this project directly supported 3 PhD students over its course who completed bulk of their graduate work under this project. Master&rsquo;s and undergraduate students were supported for shorter periods of time. The project also enabled collaboration that indirectly supported graduate and undergraduate students at other institutions.</p><br> <p>            Last Modified: 01/30/2017<br>      Modified by: Martina&nbsp;M&nbsp;Barnas</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Graphs are a powerful conceptual tool that can be used to capture complex relationships in the real world. Graphs can be used to model social networks where the entities such as the network participants are connected through relationships such as friendship. They can be used to describe knowledge in machine learning systems (graphs capture the connections and structure of knowledge). Graphs also arise in areas such as planning and operations, where many interconnected entities interact in highly connected fashion. In short, graphs are tools necessary to capture the complexity that naturally arises in science and in many aspects of everyday world.  Many graphs that arise in modern science are massive, and they require the most powerful computers to store and compute over. The focus of traditional scientific computing has been solving systems of PDEs (and the corresponding linear algebra problems). Hardware architectures, computer systems, and software platforms have evolved together to efficiently support solving these kinds of problems. Similar attention has not been devoted to efficiently solving data analytics problems. However, the executive order that created the National Strategic Computing Initiative (NSCI) specifically calls out data analytics as one of its five objectives: Increasing coherence between the technology base used for modeling and simulation and that used for data analytic computing.  The goal of this project is to provide unifying abstraction that addresses this objective. To achieve this, we developed models for graph computation and domain-specific languages for performance-portable graph algorithms. Such abstractions allow a single algorithm specification to apply to a wide variety of platforms and data structures. The languages are high-level yet capable of performance competitive with tuned code by expressing algorithm specifications (what the algorithm computes) independently from implementation details (how the algorithm computes its results).  Some of the outcomes of this project is the Abstract Graph Machine (AGM) framework; the GL-SIMD, Datalog, and the Gizmo domain-specific languages; the pattern-based graph algorithms specification; analysis of the impact of distributed runtimes on graph algorithms; and the active messages communication framework AM++.  Abstract Graph Machine (AGM), is a model for designing distributed-memory parallel graph algorithms. An algorithm designed using the AGM model starts from an initial state and goes through a series of state changes. States are changed by a "processing function". The processing function takes a unit of work and returns zero or more units of work. Work units generated by the processing function are ordered using a strict weak ordering relation. The strict weak ordering divides work into ordered equivalence classes. Work in an equivalence class can be executed in parallel. Work in different equivalence classes is ordered according to the order of the equivalence classes. We show how AGM can be used to derive families of algorithms from a common high-level semantic description by modifying ordering used at different levels of a distributed machine.  GL-SIMD is based on a generalized SIMD model with loose parallel synchronization, and it provides a unified framework across single-element and whole-graph expressions of algorithms. When this new model is expressed as a generic library in C++, a single algorithm implementation can be instantiated in different ways by a standard C++ compiler to apply to different data structures and models of parallelism. We used GL-SIMD to implement Datalog for graphs, a high-level language based on logic programming. We have implemented a prototype Datalog compiler  that targets the lower-level GL-SIMD language.  We also considered an abstraction for expressing graph algorithms in which the vertices and edges of the graph provide locality and communication structure and graph data are represented by property maps that associate vertices and edges to arbitrary user-defined data. Operations on the graph are expressed as patterns, which allow limited traversal of the graph and modification of property maps. Traversal is implicit and is automatically computed from the pattern's access of property map values. Patterns are declarative, but they can be used in imperative algorithms by using strategies that run in epochs. Strategies are user defined programs that apply patterns in a certain way (e.g., fixed point, once, delta-stepping), including chaining patterns in an arbitrary way..  Several software artifacts were developed in this project. These artifacts are released as open source and are available to the public under non-restrictive license. We have produced several publications on different aspects of graph computation, and we have participated in standardization and development of new ideas and software interfaces. Last but not least, this project directly supported 3 PhD students over its course who completed bulk of their graduate work under this project. Master?s and undergraduate students were supported for shorter periods of time. The project also enabled collaboration that indirectly supported graduate and undergraduate students at other institutions.       Last Modified: 01/30/2017       Submitted by: Martina M Barnas]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
