<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: A principled compiler for functional logic languages</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2013</AwardEffectiveDate>
<AwardExpirationDate>10/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>118907.00</AwardTotalIntnAmount>
<AwardAmount>118907</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Functional logic languages seamlessly integrate the most appealing features of the functional and the logic paradigms: independence from evaluation order, higher-order functions, and polymorphic typing from the functional paradigm, and evaluation with partial information (logic variables), constraint solving, and non-deterministic search for solutions from the logic paradigm.  Unfortunately, compiling a language with this rich combination of features is a difficult problem.  Code generators of current compilers for functional logic languages are complicated ad-hoc modules that, with two exceptions, do not even attempt to address in a disciplined way the correctness of the generated code or relate its performance to that of the source code.  The exceptions state the correctness in a very weak, double negative form: no result of a source program is not producible by the object program.&lt;br/&gt;&lt;br/&gt;This project is for the design and implementation of a disciplined compiler for the functional logic language Curry. The generated code will be abstract and easily mappable to common programming languages and hardware architectures, and will be formally defined and proved correct.  In particular, every result of a source program will be produced by the object program.  The steps executed by the generated code will be closely related to the needed steps in a formal model of the source code. This will ensure that program executions will be more predictable and as efficient as theoretically possible. The code produced by the research will be available to the research community as part of a modern compiler for Curry.</AbstractNarration>
<MinAmdLetterDate>08/06/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/06/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1317249</AwardID>
<Investigator>
<FirstName>Sergio</FirstName>
<LastName>Antoy</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sergio Antoy</PI_FULL_NAME>
<EmailAddress>antoy@cs.pdx.edu</EmailAddress>
<PI_PHON>5037253009</PI_PHON>
<NSF_ID>000466980</NSF_ID>
<StartDate>08/06/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Portland State University</Name>
<CityName>Portland</CityName>
<ZipCode>972070751</ZipCode>
<PhoneNumber>5037259900</PhoneNumber>
<StreetAddress>1600 SW 4th Ave</StreetAddress>
<StreetAddress2><![CDATA[Attn: Sponsored Projects Admin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052226800</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PORTLAND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052226800</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Portland State University]]></Name>
<CityName/>
<StateCode>OR</StateCode>
<ZipCode>972070751</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~118907</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The research intends to produce a compiler for the functional logic language Curry.&nbsp; The compiler is based on a relatively simple abstract compilation scheme that is provably correct. The binary code generated according to this scheme inspires more confidence and is less likely to be flawed than ad-hoc code.<br /><br />The bulk of the compiler is operational.&nbsp; A preliminary version is freely available at https://github.com/andyjost/Sprite-3/wiki/ .&nbsp; The compiler has some known limitations.&nbsp; Work is under way to remove any limitation.&nbsp; A comparison with the two mainstream compilers of Curry, Pakcs and Kics2, shows a competitive performance with a marked advantage for non-deterministic computations.&nbsp; A crucial aspect addressed by the abstract compilation scheme underlying the code generation is the operational completeness of computations --- if an expression has a result, this result eventually will be produced (given sufficient computational resources.)&nbsp; The implementation shows this operational completeness on a set of targeted examples.&nbsp; Any other compiler of Curry currently available is known to be incomplete and fails to produce results on some examples.<br /><br />The compiler is the subject of a dissertation whose proposal was successfully defended by Andy Jost at Portland State University.&nbsp; The dissertation is estimated to be completed within the next 12 to 15 months.&nbsp; Several publications focus on the compiler architecture, its theoretical foundations and specific aspects.&nbsp; Other publications were partly motivated by work on the compiler.&nbsp; A simplified version of the abstract compilation scheme at the core of this research has become a part of a graduate course on functional logic programming offered at Portland State.<br /><br /></p><br> <p>            Last Modified: 01/10/2018<br>      Modified by: Sergio&nbsp;Antoy</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The research intends to produce a compiler for the functional logic language Curry.  The compiler is based on a relatively simple abstract compilation scheme that is provably correct. The binary code generated according to this scheme inspires more confidence and is less likely to be flawed than ad-hoc code.  The bulk of the compiler is operational.  A preliminary version is freely available at https://github.com/andyjost/Sprite-3/wiki/ .  The compiler has some known limitations.  Work is under way to remove any limitation.  A comparison with the two mainstream compilers of Curry, Pakcs and Kics2, shows a competitive performance with a marked advantage for non-deterministic computations.  A crucial aspect addressed by the abstract compilation scheme underlying the code generation is the operational completeness of computations --- if an expression has a result, this result eventually will be produced (given sufficient computational resources.)  The implementation shows this operational completeness on a set of targeted examples.  Any other compiler of Curry currently available is known to be incomplete and fails to produce results on some examples.  The compiler is the subject of a dissertation whose proposal was successfully defended by Andy Jost at Portland State University.  The dissertation is estimated to be completed within the next 12 to 15 months.  Several publications focus on the compiler architecture, its theoretical foundations and specific aspects.  Other publications were partly motivated by work on the compiler.  A simplified version of the abstract compilation scheme at the core of this research has become a part of a graduate course on functional logic programming offered at Portland State.         Last Modified: 01/10/2018       Submitted by: Sergio Antoy]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
