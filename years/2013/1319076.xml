<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: XCap: Practical Capabilities and Least Authority for Virtualized Environments</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>499912.00</AwardTotalIntnAmount>
<AwardAmount>499912</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern software systems inherit their architecture, software development methodology, and security model from time-sharing operating systems developed four decades ago. Desktop, server, cloud, and even industrial control systems rely on a large stack of commercial off-the-shelf software that runs on top of a monolithic operating system kernel.  Each application runs with the full set of privileges of some user, has access to the entire file space of that user, and can access the complete interface of a complex operating system kernel, and a number of privileged systems components. The security model exposed by existing software systems is fundamentally too weak; it fails to provide adequate isolation between computations.&lt;br/&gt;&lt;br/&gt;XCap is a secure environment for least-authority execution of applications and system services. Unmodified, untrusted, off-the-shelf applications, running on untrusted operating systems, are isolated by a virtual machine monitor. XCap builds on two principles: strong isolation and secure collaboration. XCap's default -- a share nothing environment -- is augmented by a capability access control model: a clean and general abstraction, enabling fine-grained delegation of rights in a flexible and manageable way. In XCap, capabilities serve as a general foundation for constructing least privilege services out of existing components of the traditional operating system stack. XCap maximizes the principle of least authority: it redesigns common operating system services in such a way that the authority of individual applications and services is minimized.  Each component possesses the smallest subset of rights required to accomplish its task.</AbstractNarration>
<MinAmdLetterDate>08/19/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/19/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319076</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Regehr</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John D Regehr</PI_FULL_NAME>
<EmailAddress>regehr@cs.utah.edu</EmailAddress>
<PI_PHON>8015859086</PI_PHON>
<NSF_ID>000310362</NSF_ID>
<StartDate>08/19/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Anton</FirstName>
<LastName>Burtsev</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Anton Burtsev</PI_FULL_NAME>
<EmailAddress>aburtsev@uci.edu</EmailAddress>
<PI_PHON>5016810819</PI_PHON>
<NSF_ID>000637182</NSF_ID>
<StartDate>08/19/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Utah</Name>
<CityName>SALT LAKE CITY</CityName>
<ZipCode>841128930</ZipCode>
<PhoneNumber>8015816903</PhoneNumber>
<StreetAddress>75 S 2000 E</StreetAddress>
<StreetAddress2><![CDATA[Second Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<StateCode>UT</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>UT02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009095365</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF UTAH, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009095365</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Utah]]></Name>
<CityName>Salt Lake City</CityName>
<StateCode>UT</StateCode>
<ZipCode>841128930</ZipCode>
<StreetAddress><![CDATA[75 South 2000 East]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Utah</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>UT02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~499912</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The XCap project has developed a new operating system architecture in which acommodity operating system is composed as a collection of isolated domains ontop of a capability-enabled hypervisor. Today, the monolithic architecture isthe main factor undermining security of commodity operating system kernels.Lack of isolation across kernel subsystems often allows attackers to takecontrol over the entire machine with a single kernel vulnerability. Even afterdecades of effort to make monolithic kernels more secure, over a hundredserious kernel vulnerabilities are still reported every year. Modern kernelsneed isolation as a practical means of confining the effects of individualattacks. Historically, isolation inside the kernel was prohibitively slow.Moreover, the complexity of a modern kernel prevents a trivial decompositioneffort.</p> <p>XCap demonstrated that despite all odds isolation can become a part of a modernkernel. XCap developed novel infrastructure required to execute kernelsubsystems in isolation: 1) a capability-enabled hypervisor to run isolatedkernel modules side by side with the rest of the monolithic kernel, 2) aninterface definition language (IDL) to specify interfaces between isolateddomains, and generate code for crossing domain boundaries, 3) the fastest todayinter-process communication mechanism that allow us to cross boundaries ofisolated domains with an overhead of less than 160ns (384 CPU cycles), 4) acomposable asynchronous runtime that allows us to seamlessly dispatch a newlightweight thread of execution while waiting for reply from another domain,and 5) a new object capability model that allows executing isolated subsystemswith minimal subset of rights.</p><br> <p>            Last Modified: 01/26/2018<br>      Modified by: John&nbsp;D&nbsp;Regehr</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The XCap project has developed a new operating system architecture in which acommodity operating system is composed as a collection of isolated domains ontop of a capability-enabled hypervisor. Today, the monolithic architecture isthe main factor undermining security of commodity operating system kernels.Lack of isolation across kernel subsystems often allows attackers to takecontrol over the entire machine with a single kernel vulnerability. Even afterdecades of effort to make monolithic kernels more secure, over a hundredserious kernel vulnerabilities are still reported every year. Modern kernelsneed isolation as a practical means of confining the effects of individualattacks. Historically, isolation inside the kernel was prohibitively slow.Moreover, the complexity of a modern kernel prevents a trivial decompositioneffort.  XCap demonstrated that despite all odds isolation can become a part of a modernkernel. XCap developed novel infrastructure required to execute kernelsubsystems in isolation: 1) a capability-enabled hypervisor to run isolatedkernel modules side by side with the rest of the monolithic kernel, 2) aninterface definition language (IDL) to specify interfaces between isolateddomains, and generate code for crossing domain boundaries, 3) the fastest todayinter-process communication mechanism that allow us to cross boundaries ofisolated domains with an overhead of less than 160ns (384 CPU cycles), 4) acomposable asynchronous runtime that allows us to seamlessly dispatch a newlightweight thread of execution while waiting for reply from another domain,and 5) a new object capability model that allows executing isolated subsystemswith minimal subset of rights.       Last Modified: 01/26/2018       Submitted by: John D Regehr]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
