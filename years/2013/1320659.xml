<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>NeTS: Small: Flange: A Domain Specific Language for Network</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>298292.00</AwardTotalIntnAmount>
<AwardAmount>298292</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>John Brassil</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>An increasing amount of software depends on the network, and at the same time networks themselves are becoming more programmable via technologies like OpenFlow, opening a wide range of opportunities both for network efficiencies and in-network computation. While new programming models seek to make network reconfiguration easier, none provide tools to solve the joint problem of software-controlled routing and placement of in-network computational services.   This project will design and build a domain specific language (DSL), called Flange, for managing services in networks.  The project's approach marshalls configurable forwarding and computing devices in the network, with pervasive monitoring to support service adaptation.  The project includes building and releasing a prototype compiler, runtime, system and front-ends that enable Flange programming both with dedicated syntax (standalone DSL) and embedded in host languages.  &lt;br/&gt;&lt;br/&gt;The success criteria for this project is that a network administrator using the prototype is able to set a new service (e.g.  video-transcoding) using less than a page of Flange code. Using the same mechanism, a network engineer should be able to launch a persistent function that monitors network conditions and responds to saturation by redirecting traffic to an alternate path. The novelty of the project is twofold. First, the semantic foundation at the root of the project treats both hardware and software aspects of networks uniformly, as constituting a single process network. For example, the project models forwarding as an in-the-network service, while considering it in the same light as other potentially instantiated services in the network such as transcoding or compression. Second, the Flange language will provide novel global view programming abstractions for large networks. Flange programs will be able to inspect network entities, aggregate information, signal and respond to events, all without reference to their own place of execution (which is often physically distributed).  &lt;br/&gt;&lt;br/&gt;The work proposed here stands to impact network operational efficiency and flexibility for national science-focused cyberinfrastructure as well as in commercial applications, where the economic impact of networked computing is clear. In addition, the design decisions the underly Flange are pedagogically relevant and will be presented in courses taught by the PIs.</AbstractNarration>
<MinAmdLetterDate>08/21/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/21/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320659</AwardID>
<Investigator>
<FirstName>Douglas</FirstName>
<LastName>Swany</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME>Dr.</PI_SUFX_NAME>
<PI_FULL_NAME>Douglas M Swany</PI_FULL_NAME>
<EmailAddress>swany@iu.edu</EmailAddress>
<PI_PHON>8128567795</PI_PHON>
<NSF_ID>000347755</NSF_ID>
<StartDate>08/21/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Ryan</FirstName>
<LastName>Newton</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ryan R Newton</PI_FULL_NAME>
<EmailAddress>rrnewton@purdue.edu</EmailAddress>
<PI_PHON>8122696190</PI_PHON>
<NSF_ID>000596232</NSF_ID>
<StartDate>08/21/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Indiana University</Name>
<CityName>Bloomington</CityName>
<ZipCode>474013654</ZipCode>
<PhoneNumber>3172783473</PhoneNumber>
<StreetAddress>509 E 3RD ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>006046700</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF INDIANA UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>006046700</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Indiana University]]></Name>
<CityName>Bloomington</CityName>
<StateCode>IN</StateCode>
<ZipCode>474013654</ZipCode>
<StreetAddress><![CDATA[509 E 3RD ST]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~298292</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project centers around the design of a declarative network programming language called Flange. Flange is designed to represent network flows and is aimed at flow-based configu- ration of network forwarding, network functions and network services. Flange provides for network resource configuration with abstract graph primitives in a concise but descriptive grammar.</p> <p>The Flange language and compiler use a combination of set theory, graph theory, and composable assertions to generate network paths. Paths may permit, restrict, or mutate data flows between two or more nodes on the network. These paths may contain any combination&nbsp; of restrictions on the path behavior, including the inclusion of virtual network functions. Generated paths, in the form of candidate flow sets, can be composed into flow compositions which must all validate or fail as a single entity.&nbsp; Meanwhile, a runtime system maintains a&nbsp; record of the current configuration of the network, as well as previously defined programs; adding and removing configurations as needed to achieve the desired network state.</p> <p>Generating flows on network graphs is done with a modified iterative form of breadth-first search such that multiple candidate flow combinations can be attempted without reproducing previous failed results. This workflow allows Flange to quickly respond to new requests and install new flows while preserving a valid state in the network.</p> <p>The Flange runtime utilizes topology information from our Unified Network Information Service (UNIS), which has agents that learn topology via a variety of sources including OpenFlow controllers, LLDP, SNMP and&nbsp; Traceroute.&nbsp; The&nbsp; Flange&nbsp; compiler&nbsp; and&nbsp; runtime has various backends to that can generate network configuration modifications including our XSP network controller, OpenFlow and the emerging P4 standard.</p> <p>The end result of this work is a language and runtime that can generate configuration for a variety of scenarios including dynamic bandwidth allocation, distributed storage, and security policy in ScienceDMZ environments. This work is being used in other NSF-funded activities in these areas.</p><br> <p>            Last Modified: 06/20/2018<br>      Modified by: Douglas&nbsp;M&nbsp;Swany</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project centers around the design of a declarative network programming language called Flange. Flange is designed to represent network flows and is aimed at flow-based configu- ration of network forwarding, network functions and network services. Flange provides for network resource configuration with abstract graph primitives in a concise but descriptive grammar.  The Flange language and compiler use a combination of set theory, graph theory, and composable assertions to generate network paths. Paths may permit, restrict, or mutate data flows between two or more nodes on the network. These paths may contain any combination  of restrictions on the path behavior, including the inclusion of virtual network functions. Generated paths, in the form of candidate flow sets, can be composed into flow compositions which must all validate or fail as a single entity.  Meanwhile, a runtime system maintains a  record of the current configuration of the network, as well as previously defined programs; adding and removing configurations as needed to achieve the desired network state.  Generating flows on network graphs is done with a modified iterative form of breadth-first search such that multiple candidate flow combinations can be attempted without reproducing previous failed results. This workflow allows Flange to quickly respond to new requests and install new flows while preserving a valid state in the network.  The Flange runtime utilizes topology information from our Unified Network Information Service (UNIS), which has agents that learn topology via a variety of sources including OpenFlow controllers, LLDP, SNMP and  Traceroute.  The  Flange  compiler  and  runtime has various backends to that can generate network configuration modifications including our XSP network controller, OpenFlow and the emerging P4 standard.  The end result of this work is a language and runtime that can generate configuration for a variety of scenarios including dynamic bandwidth allocation, distributed storage, and security policy in ScienceDMZ environments. This work is being used in other NSF-funded activities in these areas.       Last Modified: 06/20/2018       Submitted by: Douglas M Swany]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
