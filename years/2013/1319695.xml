<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: LeakDroid: Exposing Leaks and Jank in Android Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>465133.00</AwardTotalIntnAmount>
<AwardAmount>465133</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Android software is widely used in smartphones, tablets, and various&lt;br/&gt;other devices. In devices with limited resources, an application that&lt;br/&gt;consumes too many resources can lead to slowdowns, crashes, and&lt;br/&gt;negative user experience. Software defects related to leaking of&lt;br/&gt;resources are widespread and varied, but there does not exist a&lt;br/&gt;comprehensive strategy for testing and debugging of such leaks.&lt;br/&gt;Another common problem in Android software is when an application&lt;br/&gt;takes too long to respond to a user action, in which case it is&lt;br/&gt;perceived as sluggish and of low quality. There do not exist testing&lt;br/&gt;techniques or tools for exposing the underlying software defects&lt;br/&gt;leading to poor responsiveness.&lt;br/&gt;&lt;br/&gt;Resource leaks and poor responsiveness can have severe effects on&lt;br/&gt;software reliability, performance, and marketplace success. This&lt;br/&gt;project develops LeakDroid, a novel approach and toolset for testing&lt;br/&gt;and debugging of such defects. Static code analyses are used to&lt;br/&gt;extract precise GUI models of Android applications; such analyses are&lt;br/&gt;essential for many algorithms for program understanding, optimization,&lt;br/&gt;testing, and debugging. Next, GUI tests are generated based on common&lt;br/&gt;leak patterns, through sequences of GUI events that should not lead to&lt;br/&gt;increases in resource usage. Poor responsiveness is exposed with tests&lt;br/&gt;that introduce delays at chosen code locations. Debugging techniques&lt;br/&gt;are then employed to find leaking data structures and poor&lt;br/&gt;responsiveness operations, as well as the corresponding defective&lt;br/&gt;code. These contributions advance the state of the art in the&lt;br/&gt;important area of analysis, testing, and debugging for Android&lt;br/&gt;software. When these advances and tools become part of software&lt;br/&gt;development practices, they would result in lower costs and increased&lt;br/&gt;quality applications for millions of users of mobile devices. The&lt;br/&gt;educational efforts of the project develop the skills of the next&lt;br/&gt;generation of creators of mobile software</AbstractNarration>
<MinAmdLetterDate>06/27/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/27/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319695</AwardID>
<Investigator>
<FirstName>Atanas</FirstName>
<LastName>Rountev</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Atanas Rountev</PI_FULL_NAME>
<EmailAddress>rountev@cse.ohio-state.edu</EmailAddress>
<PI_PHON>6142927203</PI_PHON>
<NSF_ID>000191396</NSF_ID>
<StartDate>06/27/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888735</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1960 Kenny Road]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>832127323</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001964634</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName>Columbus</CityName>
<StateCode>OH</StateCode>
<ZipCode>432101277</ZipCode>
<StreetAddress><![CDATA[395 Dreese Labs, 2015 Neil Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~465133</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Android software is widely used in smartphones, tablets, and various other devices. In devices with limited resources, an application that consumes too many resources can lead to slowdowns, crashes, and negative user experience. Software defects related to leaking of resources are widespread and varied. Another common problem in Android software is when an application takes too long to respond to a user action, in which case it is perceived as sluggish and of low quality.</p> <p>The high-level goal of this project is to improve the testing and debugging of Android software, with emphasis on leak and responsiveness defects. We developed novel software analysis approaches for construction of graphical user interfaces (GUI) models of Android apps. Based on these GUI models, we developed testing requirements and techniques for automated test generation to expose resource leaks and responsiveness defects. This project has produced 7 peer-reviewed publications (with over 160 citations), 2 Ph.D. dissertations, and 3 publicly-available software tools, one of which has been considered for use by researchers in 20 universities.</p> <p>The main outcomes of this project are as follows. (1) The first program analysis to model the detailed semantics of Android apps and their GUIs, including GUI widgets, their hierarchical structure, their corresponding event handlers, and the GUI changes due to the execution of these event handlers. This analysis can be used as a starting point for automated test generation and for program analysis of leak defects. (2) A test generation strategy which considers cycles in this model and automatically generates and executes test cases to cover these cycles and expose leaks. This approach reduces the human effort to find performance bugs in Android apps. (3) A new approach to find sluggishness problems in Android apps, by generating test cases to trigger expensive operations and by artificially making them more expensive in order to create a performance profile. This work allows a programmer to understand better the sources of poor app responsiveness and to improve the app user's experience. (4) A software analysis approach to identify leaks of device sensors due to developer's mistakes in resource management. This approach can help reduce the battery usage for the mobile device. (5) A testing framework to execute software tests for Android wearable devices (e.g., smartwatches), in order to allow systematic testing and higher quality of apps for such devices.</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/16/2017<br>      Modified by: Atanas&nbsp;Rountev</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Android software is widely used in smartphones, tablets, and various other devices. In devices with limited resources, an application that consumes too many resources can lead to slowdowns, crashes, and negative user experience. Software defects related to leaking of resources are widespread and varied. Another common problem in Android software is when an application takes too long to respond to a user action, in which case it is perceived as sluggish and of low quality.  The high-level goal of this project is to improve the testing and debugging of Android software, with emphasis on leak and responsiveness defects. We developed novel software analysis approaches for construction of graphical user interfaces (GUI) models of Android apps. Based on these GUI models, we developed testing requirements and techniques for automated test generation to expose resource leaks and responsiveness defects. This project has produced 7 peer-reviewed publications (with over 160 citations), 2 Ph.D. dissertations, and 3 publicly-available software tools, one of which has been considered for use by researchers in 20 universities.  The main outcomes of this project are as follows. (1) The first program analysis to model the detailed semantics of Android apps and their GUIs, including GUI widgets, their hierarchical structure, their corresponding event handlers, and the GUI changes due to the execution of these event handlers. This analysis can be used as a starting point for automated test generation and for program analysis of leak defects. (2) A test generation strategy which considers cycles in this model and automatically generates and executes test cases to cover these cycles and expose leaks. This approach reduces the human effort to find performance bugs in Android apps. (3) A new approach to find sluggishness problems in Android apps, by generating test cases to trigger expensive operations and by artificially making them more expensive in order to create a performance profile. This work allows a programmer to understand better the sources of poor app responsiveness and to improve the app user's experience. (4) A software analysis approach to identify leaks of device sensors due to developer's mistakes in resource management. This approach can help reduce the battery usage for the mobile device. (5) A testing framework to execute software tests for Android wearable devices (e.g., smartwatches), in order to allow systematic testing and higher quality of apps for such devices.          Last Modified: 10/16/2017       Submitted by: Atanas Rountev]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
