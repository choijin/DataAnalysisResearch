<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Contract Inference for Polyglot Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>384339.00</AwardTotalIntnAmount>
<AwardAmount>384339</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software engineers use various "programming languages" to write the software that runs on our computers, smart phones, cars, and other devices.  Modern software is a complex mix of pieces written in many different languages.  But cross-language communication is difficult and error-prone, for humans and machines alike.  The PI's research will ease the burden of developers working across multiple programming languages by automatically generating the "glue" that sticks different fragments together, which will let developers work in more modern, safe, high-level languages while still benefiting from the large existing investment in older, unsafe, low-level code.  The result will be faster, cheaper development by productive programmers, leading to more trustworthy software to benefit society as a whole.&lt;br/&gt;&lt;br/&gt;Specifically, the PI will use a variety of static program analyses to address three recurring challenges of multi-language software development: disallowed values, resource management, and error reporting.  Disallowed values, such as unexpected NULL pointers, are a form of API misuse that can lead to failures or undefined behaviors.  By identifying these and trapping them in high-level code before they reach low-level libraries, the PI's research will allow safer execution and improved failure diagnostics.  Resource management requires uncovering the subtle, sometimes quirky rules by which low-level libraries track memory, file descriptors, and other resources.  Static analyses to recover resource management models will let these be managed automatically by the improved mechanisms (e.g., garbage collectors) available in high-level code.  Lastly, error reporting analysis will identify ad hoc error propagation mechanisms (such as returned error codes) used in low-level libraries and map these to the structured high-level mechanisms (such as exceptions) that high-level application developers expect.  The net effect of these will be improved library bindings that let high-level programmers do their jobs more efficiently, introducing fewer bugs, creating tomorrow's great software for all of us to rely upon.</AbstractNarration>
<MinAmdLetterDate>08/07/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1318489</AwardID>
<Investigator>
<FirstName>Benjamin</FirstName>
<LastName>Liblit</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Benjamin R Liblit</PI_FULL_NAME>
<EmailAddress>liblit@cs.wisc.edu</EmailAddress>
<PI_PHON>6082626617</PI_PHON>
<NSF_ID>000203014</NSF_ID>
<StartDate>08/07/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>Madison</CityName>
<StateCode>WI</StateCode>
<ZipCode>537061685</ZipCode>
<StreetAddress><![CDATA[1210 W Dayton St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~384339</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Programs written in multiple languages are known as&nbsp;<em>polyglot programs</em>. In part due to the proliferation of new and productive high-level programming languages, these programs are becoming more common in environments that must interoperate with existing systems. Polyglot programs must manage resource lifetimes across language boundaries. Resource lifetime management bugs can lead to leaks and crashes, which are more difficult to debug in polyglot programs than monoglot programs. We presented analyses to automatically infer the ownership semantics of C libraries. The results of these analyses can be used to generate bindings to C libraries that intelligently manage resources, to check the correctness of polyglot programs, and to document the interfaces of C libraries. While these analyses are unsound and incomplete, we demonstrated that they significantly reduce the manual annotation burden for a suite of fifteen open source libraries.</p> <p><span>Simultaneous use of multiple programming languages (</span><em>polyglot programming</em><span>) assists in creating efficient, coherent, modern programs in the face of legacy code. However, manually creating bindings to low-level languages like C is tedious and error-prone. We offered relief in the form of an automated suite of analyses, designed to enhance the quality of automatically produced bindings. These analyses recover high-level array length information that is missing from C's type system. We emit annotations in the style of GObject-Introspection, which produces bindings from annotations on function signatures. We annotate each array argument as terminated by a special sentinel value, fixed-length, or of length determined by another argument. These properties help produce more idiomatic, efficient bindings. We correctly annotated at least 70% of all arrays with these length types, and our results were comparable to those produced by human annotators, but took far less time to produce.</span></p><br> <p>            Last Modified: 11/23/2019<br>      Modified by: Benjamin&nbsp;R&nbsp;Liblit</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Programs written in multiple languages are known as polyglot programs. In part due to the proliferation of new and productive high-level programming languages, these programs are becoming more common in environments that must interoperate with existing systems. Polyglot programs must manage resource lifetimes across language boundaries. Resource lifetime management bugs can lead to leaks and crashes, which are more difficult to debug in polyglot programs than monoglot programs. We presented analyses to automatically infer the ownership semantics of C libraries. The results of these analyses can be used to generate bindings to C libraries that intelligently manage resources, to check the correctness of polyglot programs, and to document the interfaces of C libraries. While these analyses are unsound and incomplete, we demonstrated that they significantly reduce the manual annotation burden for a suite of fifteen open source libraries.  Simultaneous use of multiple programming languages (polyglot programming) assists in creating efficient, coherent, modern programs in the face of legacy code. However, manually creating bindings to low-level languages like C is tedious and error-prone. We offered relief in the form of an automated suite of analyses, designed to enhance the quality of automatically produced bindings. These analyses recover high-level array length information that is missing from C's type system. We emit annotations in the style of GObject-Introspection, which produces bindings from annotations on function signatures. We annotate each array argument as terminated by a special sentinel value, fixed-length, or of length determined by another argument. These properties help produce more idiomatic, efficient bindings. We correctly annotated at least 70% of all arrays with these length types, and our results were comparable to those produced by human annotators, but took far less time to produce.       Last Modified: 11/23/2019       Submitted by: Benjamin R Liblit]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
