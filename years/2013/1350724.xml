<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: iProvenance: Integrating Data Provenance with Software Traceability</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2014</AwardEffectiveDate>
<AwardExpirationDate>01/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>630697.00</AwardTotalIntnAmount>
<AwardAmount>645097</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Alan Sussman</SignBlockName>
<PO_EMAI>alasussm@nsf.gov</PO_EMAI>
<PO_PHON>7032927563</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Scientific research is increasingly data-driven -- hypotheses, simulations, and models, which shape our understanding of the world, are formulated based on observed data.  In order to make valid inferences from these observations, researchers are finding that they also need to understand data provenance, which is the origin and context of formation of the data.  To tackle the increasing amounts of data, scientists rely on many different software programs (both homegrown and commercial) to collect, process, and analyze data.  While the eScience community has made strides toward supporting data provenance, understanding the software that manipulates the data is a key research area that has largely been unexplored.&lt;br/&gt;Meanwhile, in software engineering, a concept related to provenance known as software traceability plays a key role in understanding source code.  Traceability enables engineers to link source code to various pieces of documentation to answer questions such as "Why is this code used?" and "What tests were executed on the code?"  Software traceability also facilitates other development tasks, such as debugging, determining software quality, and ascertaining the impact of a change.&lt;br/&gt;This CAREER Award project focuses on the crucial interplay between data and software in eScience by using a conceptual framework, iProvenance, that integrates data provenance with software traceability and is grounded in a holistic examination of provenance challenges.   iProvenance provides the ability to model and capture software-centric and data-centric information in tandem, create provenance methods that holistically address challenges similar to those in software traceability, and develop powerful yet accessible automated provenance software for scientists in various domains.&lt;br/&gt;The approach is beneficial to every scientific field that engages in eScience and data provenance.  The results of the research also have the potential to transform the management of provenance in industries with large amounts of digital records, including electronic health records and clinical trials.  Finally, the educational activities interwoven with research activities will not only equip future computer science professionals with knowledge in data provenance techniques and methods, but these activities will also provide curriculum and educational materials that can be used at other institutions.</AbstractNarration>
<MinAmdLetterDate>02/06/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/01/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1350724</AwardID>
<Investigator>
<FirstName>Hazeline</FirstName>
<LastName>Asuncion</LastName>
<PI_MID_INIT>U</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Hazeline U Asuncion</PI_FULL_NAME>
<EmailAddress>hazeline@u.washington.edu</EmailAddress>
<PI_PHON>4253525403</PI_PHON>
<NSF_ID>000573395</NSF_ID>
<StartDate>02/06/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington Bothell]]></Name>
<CityName>Bothell</CityName>
<StateCode>WA</StateCode>
<ZipCode>980118246</ZipCode>
<StreetAddress><![CDATA[18115 campus Way NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1045</Code>
<Text>CAREER: FACULTY EARLY CAR DEV</Text>
</ProgramElement>
<ProgramElement>
<Code>7361</Code>
<Text>EDUCATION AND WORKFORCE</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~630697</FUND_OBLG>
<FUND_OBLG>2016~14400</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong><em>Intellectual Merit: </em></strong>Since more scientific studies are conducted using computational resources to run experiments and perform scientific analyses, understanding the sources or history of datasets (i.e., its provenance) is crucial to determine whether results are reliable.&nbsp; A goal of iProvenance research is to investigate how to integrate information about the data processing units (i.e., software) to provide a better understanding of data provenance.&nbsp;&nbsp;&nbsp;</p> <p>In software engineering, a related concept of provenance, software traceability, plays a key role in understanding source code.&nbsp; Software traceability enables a development team to capture traceability links between various files during a software development lifecycle.&nbsp; These traceability links connect related information between heterogeneous files to answer questions like &ldquo;Why is this code used?&rdquo;, &ldquo;What tests were executed?&rdquo; Not only do traceability links aid in understanding source code, they also facilitate tasks such as debugging and ascertaining the impact of a change.</p> <p>Data provenance and software traceability have generally been studied independently of each other.&nbsp; A premise of iProvenance is an investigation of both areas will not only advance the state of the art of each discipline, but the fusion of ideas from both fields will provide novel techniques that will enhance the understanding of data provenance through insights into the software used.&nbsp; Here are the results of iProvenance thus far:</p> <p>Result#1: By using recording adapters on version control systems, we can seamlessly connect a specific software version to input data, parameters, meta-parameters, software executable, events and errors during a simulation run, and simulation output.&nbsp; We used neural network simulations as a testbed, as the quantity of neuroscience data and complexity of its analysis is high.&nbsp; One needs to integrate various anatomical, physiological, and functional components of nervous systems to better understand how they contribute to organisms' behaviors.&nbsp; We tracked all simulation-related data, events of simulation runs on GPUs, and specific versions of software used in each run [1].</p> <p>Result#2: By using version control commit records as the focus of traceability, we can connect specific code changes to reasons for changes.&nbsp; If we join this result with Result#1, these reasons for software changes can be connected to experiment- or simulation-related files, enabling researchers to understand why an experiment design or a simulation logic changed and their impact on an output.&nbsp;</p> <p>We used software traceability to automatically extract reasons from available documentation and connect them with each other to provide a more complete view of the reasons for change.&nbsp; We define reasons as insights into a code change, as these may not be complete explanations, but clues to be connected with other clues. &nbsp;We also leverage version control systems to connect extracted reasons with actual changes in the code (package, file, class, method, and line levels) [2].</p> <p>Result#3: By following the flow of data in layered systems, we can connect software-related files such as source code, configuration files, and scripts located on different machines.&nbsp; This ability to find related files facilitates software reuse, even across different teams of researchers, as long as they know which type of data needs to be processed or analyzed [3].</p> <p>Result#4: By using a software traceability concept of supporting user customization, customizing provenance can limit the size of captured provenance while increasing its understandability. &nbsp;In climate research where climate analyses are run on distributed computing, we provide different levels of customization for provenance capture, from no user intervention to user-specified rich metadata (e.g., can add notes about an algorithm) [4].&nbsp; In agent-based modeling in distributed computing, we enabled users to specify level of detail to capture provenance, which specific agents to track in which locations, and to start and stop provenance capture [5, 6]. &nbsp;In both contexts, we can answer provenance queries related to climate analysis and agent-based models.</p> <p>Result#5: By using various machine learning, natural language processing, and artificial intelligence techniques, we can recover provenance of web objects, including software and data. We used a multi-level funneling technique to determine provenance of these objects [7].</p> <p>[1]M.Stiber, F.Kawasaki, D.Davis, H.Asuncion, J.Lee, D.Boyer. BrainGrid+Workbench: High-Performance/High-Quality Neural Simulation, IJCNN2017.</p> <p>[2]N.Dave, R.P.da Silva, D.Drobesh, P.Upreti, W.Erdly, H.Asuncion. Connecting Source Code Changes with Reasons, eKNOW2018.</p> <p>[3]M.Daubal, N.Duncan, D.Davis, H.Asuncion, Tracing Domain Data Concepts in Layered Applications, SEKE2014.</p> <p>[4]B.Yasutake, N.Simonson, J.Woodring, N.Duncan, W.Pfeffer, H.Asuncion, M.Fukuda, E.Salathe, Supporting Provenance in Climate Science Research eKNOW2015</p> <p>[5]D.Davis, J.Featherston, M.Fukuda, H.Asuncion. Data Provenance for Multi-Agent Models, eScience2017.</p> <p>[6]D.Davis, J.Featherston, H.Vo, M.Fukuda, H.Asuncion. Data Provenance for Agent-Based Models in a Distributed Memory, MDPI Informatics 2018.</p> <p>[7]S.Vasudevan, W.Pfeffer, D.Davis, H.Asuncion. Improving Data Provenance Reconstruction via a Multi-Level Funneling Approach, eScience2016.</p> <p><strong><em>Broader Impacts: </em></strong>The iProvenance can facilitate scientific progress, as researchers no longer need to redo their analyses or experiments to verify their results.&nbsp; More broadly, iProvenance will also benefit any industry that manages digital data and needs to understand its provenance.</p><br> <p>            Last Modified: 06/25/2019<br>      Modified by: Hazeline&nbsp;U&nbsp;Asuncion</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Intellectual Merit: Since more scientific studies are conducted using computational resources to run experiments and perform scientific analyses, understanding the sources or history of datasets (i.e., its provenance) is crucial to determine whether results are reliable.  A goal of iProvenance research is to investigate how to integrate information about the data processing units (i.e., software) to provide a better understanding of data provenance.     In software engineering, a related concept of provenance, software traceability, plays a key role in understanding source code.  Software traceability enables a development team to capture traceability links between various files during a software development lifecycle.  These traceability links connect related information between heterogeneous files to answer questions like "Why is this code used?", "What tests were executed?" Not only do traceability links aid in understanding source code, they also facilitate tasks such as debugging and ascertaining the impact of a change.  Data provenance and software traceability have generally been studied independently of each other.  A premise of iProvenance is an investigation of both areas will not only advance the state of the art of each discipline, but the fusion of ideas from both fields will provide novel techniques that will enhance the understanding of data provenance through insights into the software used.  Here are the results of iProvenance thus far:  Result#1: By using recording adapters on version control systems, we can seamlessly connect a specific software version to input data, parameters, meta-parameters, software executable, events and errors during a simulation run, and simulation output.  We used neural network simulations as a testbed, as the quantity of neuroscience data and complexity of its analysis is high.  One needs to integrate various anatomical, physiological, and functional components of nervous systems to better understand how they contribute to organisms' behaviors.  We tracked all simulation-related data, events of simulation runs on GPUs, and specific versions of software used in each run [1].  Result#2: By using version control commit records as the focus of traceability, we can connect specific code changes to reasons for changes.  If we join this result with Result#1, these reasons for software changes can be connected to experiment- or simulation-related files, enabling researchers to understand why an experiment design or a simulation logic changed and their impact on an output.   We used software traceability to automatically extract reasons from available documentation and connect them with each other to provide a more complete view of the reasons for change.  We define reasons as insights into a code change, as these may not be complete explanations, but clues to be connected with other clues.  We also leverage version control systems to connect extracted reasons with actual changes in the code (package, file, class, method, and line levels) [2].  Result#3: By following the flow of data in layered systems, we can connect software-related files such as source code, configuration files, and scripts located on different machines.  This ability to find related files facilitates software reuse, even across different teams of researchers, as long as they know which type of data needs to be processed or analyzed [3].  Result#4: By using a software traceability concept of supporting user customization, customizing provenance can limit the size of captured provenance while increasing its understandability.  In climate research where climate analyses are run on distributed computing, we provide different levels of customization for provenance capture, from no user intervention to user-specified rich metadata (e.g., can add notes about an algorithm) [4].  In agent-based modeling in distributed computing, we enabled users to specify level of detail to capture provenance, which specific agents to track in which locations, and to start and stop provenance capture [5, 6].  In both contexts, we can answer provenance queries related to climate analysis and agent-based models.  Result#5: By using various machine learning, natural language processing, and artificial intelligence techniques, we can recover provenance of web objects, including software and data. We used a multi-level funneling technique to determine provenance of these objects [7].  [1]M.Stiber, F.Kawasaki, D.Davis, H.Asuncion, J.Lee, D.Boyer. BrainGrid+Workbench: High-Performance/High-Quality Neural Simulation, IJCNN2017.  [2]N.Dave, R.P.da Silva, D.Drobesh, P.Upreti, W.Erdly, H.Asuncion. Connecting Source Code Changes with Reasons, eKNOW2018.  [3]M.Daubal, N.Duncan, D.Davis, H.Asuncion, Tracing Domain Data Concepts in Layered Applications, SEKE2014.  [4]B.Yasutake, N.Simonson, J.Woodring, N.Duncan, W.Pfeffer, H.Asuncion, M.Fukuda, E.Salathe, Supporting Provenance in Climate Science Research eKNOW2015  [5]D.Davis, J.Featherston, M.Fukuda, H.Asuncion. Data Provenance for Multi-Agent Models, eScience2017.  [6]D.Davis, J.Featherston, H.Vo, M.Fukuda, H.Asuncion. Data Provenance for Agent-Based Models in a Distributed Memory, MDPI Informatics 2018.  [7]S.Vasudevan, W.Pfeffer, D.Davis, H.Asuncion. Improving Data Provenance Reconstruction via a Multi-Level Funneling Approach, eScience2016.  Broader Impacts: The iProvenance can facilitate scientific progress, as researchers no longer need to redo their analyses or experiments to verify their results.  More broadly, iProvenance will also benefit any industry that manages digital data and needs to understand its provenance.       Last Modified: 06/25/2019       Submitted by: Hazeline U Asuncion]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
