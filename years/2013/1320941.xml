<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small: Software-Driven Hardware Resiliency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Moore's law continues to provide abundant devices on chip, but they are increasingly subject to failures from many sources. The hardware reliability problem is expected to be pervasive, affecting markets from embedded systems to high performance computing. There is an urgent need for research to address this problem with extremely low overheads in area, performance, and power (precluding traditional redundancy based solutions). Recently, researchers have proposed a software-driven hardware reliability solution that handles only the device faults that become visible to software and cause anomalous software behavior. This line of work has been quite successful in detecting most faults at extremely low cost. Unfortunately, some hardware faults escape detection by the proposed anomaly monitors, resulting in silent data corruption or SDC. These remaining few SDCs have been the Achilles heel of the software-driven hardware resiliency approach and a hindrance to widespread adoption. The proposed research seeks to overcome this obstacle. &lt;br/&gt;  &lt;br/&gt;The research includes methodological innovations that can determine application sites vulnerable to SDCs within a practical workflow and resiliency solution that uses this information to develop low cost detection and recovery techniques to mitigate the impact of SDCs.  It builds on a recent resiliency analysis tool developed by the Principle Investigator's group called Relyzer. The key insight is that instead of trying to determine the outcome of each fault site, Relyzer can seek to determine which application sites will produce equivalent outcomes. This enables pruning a large number of sites and focusing on fault injections for just one site per equivalence class, resulting in significant reduction in resiliency evaluation time. In addition to providing a list of SDC vulnerable instructions, Relyzer also provides a wealth of information on why they are vulnerable. This motivates the use of inexpensive application-specific detectors that exploit this information. However, Relyzer has several limitations in speed, accuracy, and generality, precluding its use in a practical workflow. This research will first develop new techniques to address these limitations and to implement them in a tool. Second, this research will explore systematic techniques to develop practical resiliency solutions that exploit the wealth of fault-propagation information exposed by Relyzer. It will develop systematic low-cost detection and recovery techniques, with quantifiable tradeoffs between resiliency and performance overheads, that can be incorporated in a practical workflow for real applications. If successful, this work will address a key challenge in meeting the expectations of Moore's law performance for a wide variety of societal advances. Besides the research benefits, it will provide a concrete tool for practical full application resiliency analysis and will also train graduate students.</AbstractNarration>
<MinAmdLetterDate>07/30/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/30/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320941</AwardID>
<Investigator>
<FirstName>Sarita</FirstName>
<LastName>Adve</LastName>
<PI_MID_INIT>V</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sarita V Adve</PI_FULL_NAME>
<EmailAddress>sadve@cs.uiuc.edu</EmailAddress>
<PI_PHON>2173338461</PI_PHON>
<NSF_ID>000232935</NSF_ID>
<StartDate>07/30/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Intellectual Merit: As Moore's law comes to an end, hardware is increasingly susceptible to errors. Conventional techniques to improve hardware reliabilty involved redundancy, which is expensive. This project concerns cheaper software-driven solutions to the hardware reliabilty problem.</p> <p>Our previous work built Relyzer, a first of a kind tool that can precisely and accurately identify the impact of a single bit error in an architectural register in any instruction of an application. While Relyzer is orders of magnitude faster than what was previously possible, it is still slow for practical use.</p> <p>We developed a collection of techniques that together significantly speed up Relyzer's resiliency analysis while also increasing the accuracy of such analysis. Further, our new tools enable predicting the impact of a hardware error on the quality of the application output, enabling combining the emerging field of approximate computing with hardware resiliency in a principled way. The end goal of this line of work is to incorporate software resliiency to hardware errors in the standard software design and test workflow.</p> <p>Specifically, we developed the following. (1) We developed Ganges, a technique to speedup resiliency analysis that identifies when an error simulation reaches a state that has been seen before, thereby removing the need for further simulation. (2) We developed Approxilyzer, a tool that builds on Relyzer to, for the first time, predict the impact on output quality of all single bit errors in registers at the instruction level. This enables focusing resiliency solutions only on errors that have an unacceptable impact on output quality. It allows trading off output quality (approximation) with resources in a principled way.&nbsp; (3) We developed Minotaur that brings to bear techniques developed in the software testing literature for the problem of software resilience to hardware errors. Minotaur significantly improves the performance of resiliency analysis of Approxilyzer and also succeeds in identifying more silent data corruptions than Approxilyzer. (4) We performed a study of the impact of software approximations on the resiliency of the software to hardware errors for a state-of-the-art video summarization application and approximations.</p> <p>We released the Approxilyzer tool. This tool consists of some proprietary software and works on SPARC ISA. We have therefore developed a version on a fully open source infrastructure with the more common x86 ISA and expect to release it shortly.</p> <p>Broader Impact: Two PhD students have been trained on this project. They have given many presentations, published papers on their work, and done industry internships related to this work. One of them is female. Both are expected to graduate soon. One undergraduate student working on the project joined the MS program and completed his MS thesis on this project. We have collaborated with IBM and Nvidia on this work. These collaborations are ongoing although the impact on real products remains to be seen. The PI has been involved in many activities to make our community more diverse and inclusive, including chairing CRA's mentoring workshops and speaking at&nbsp; a CRA-W mentoring workshop for junior researchers.</p><br> <p>            Last Modified: 07/26/2018<br>      Modified by: Sarita&nbsp;V&nbsp;Adve</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Intellectual Merit: As Moore's law comes to an end, hardware is increasingly susceptible to errors. Conventional techniques to improve hardware reliabilty involved redundancy, which is expensive. This project concerns cheaper software-driven solutions to the hardware reliabilty problem.  Our previous work built Relyzer, a first of a kind tool that can precisely and accurately identify the impact of a single bit error in an architectural register in any instruction of an application. While Relyzer is orders of magnitude faster than what was previously possible, it is still slow for practical use.  We developed a collection of techniques that together significantly speed up Relyzer's resiliency analysis while also increasing the accuracy of such analysis. Further, our new tools enable predicting the impact of a hardware error on the quality of the application output, enabling combining the emerging field of approximate computing with hardware resiliency in a principled way. The end goal of this line of work is to incorporate software resliiency to hardware errors in the standard software design and test workflow.  Specifically, we developed the following. (1) We developed Ganges, a technique to speedup resiliency analysis that identifies when an error simulation reaches a state that has been seen before, thereby removing the need for further simulation. (2) We developed Approxilyzer, a tool that builds on Relyzer to, for the first time, predict the impact on output quality of all single bit errors in registers at the instruction level. This enables focusing resiliency solutions only on errors that have an unacceptable impact on output quality. It allows trading off output quality (approximation) with resources in a principled way.  (3) We developed Minotaur that brings to bear techniques developed in the software testing literature for the problem of software resilience to hardware errors. Minotaur significantly improves the performance of resiliency analysis of Approxilyzer and also succeeds in identifying more silent data corruptions than Approxilyzer. (4) We performed a study of the impact of software approximations on the resiliency of the software to hardware errors for a state-of-the-art video summarization application and approximations.  We released the Approxilyzer tool. This tool consists of some proprietary software and works on SPARC ISA. We have therefore developed a version on a fully open source infrastructure with the more common x86 ISA and expect to release it shortly.  Broader Impact: Two PhD students have been trained on this project. They have given many presentations, published papers on their work, and done industry internships related to this work. One of them is female. Both are expected to graduate soon. One undergraduate student working on the project joined the MS program and completed his MS thesis on this project. We have collaborated with IBM and Nvidia on this work. These collaborations are ongoing although the impact on real products remains to be seen. The PI has been involved in many activities to make our community more diverse and inclusive, including chairing CRA's mentoring workshops and speaking at  a CRA-W mentoring workshop for junior researchers.       Last Modified: 07/26/2018       Submitted by: Sarita V Adve]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
