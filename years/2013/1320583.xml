<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Integrating separation logic and SMT for better heap verification</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Heap-allocated pointer structures are a common source of software errors. In particular, pointer safety errors, like memory leaks and dereferencing null or dangling pointers, often cause programs to fail or leave them vulnerable to be exploited by malware.  Tools that are able to detect such errors at compile time have long been considered impractical because they scale badly to large programs.  This has started to change recently with the advent of verification tools based on separation logic (SL), which scale to software components of industrial size.  The aim of this project is to increase the degree of automation, precision, and soundness of today's SL-based verification tools and broaden the scope of tools that could use separation logic. Because heap-allocated data structures are among the most difficult software constructs to reason about, this work has the potential to make a significant impact on the reliability of software.&lt;br/&gt;&lt;br/&gt;SL-based tools depend on theorem provers for separation logic to automatically discharge proof obligations concerned with properties about pointer structures. Today's tools implement tailor-made provers for this task. However, the analysis of real-world programs involves reasoning about other data types including, for instance, integers, arrays, and bit-vectors. To cope with this, existing separation logic tools make simplifying (and in general unsound) assumptions, rely on interactive help from the user, or implement ad-hoc and incomplete extensions of their tailor-made provers. The PIs will investigate a more systematic approach towards combined reasoning about heap and other data types by integrating an SL theorem prover into a satisfiability modulo theories (SMT) solver. This research is motivated by the observation that reasoning about separation logic fragments can be reduced entirely to reasoning in decidable first-order theories that fit well into the SMT framework. Modern SMT solvers implement decision procedures for many first-order theories that are relevant in program verification, such as linear arithmetic, arrays, and bit-vectors. A reduction to first-order logic enables a seamless combination of separation logic with these theories. Moreover, SMT solvers are already an integral part in the tool chain of many existing verification tools. These tools could directly benefit from an integrated SL prover. In addition, we expect that specific capabilities added to the SMT solver as a result of the project will be useful to a broad set of SMT users.</AbstractNarration>
<MinAmdLetterDate>06/14/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/14/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320583</AwardID>
<Investigator>
<FirstName>Clark</FirstName>
<LastName>Barrett</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Clark Barrett</PI_FULL_NAME>
<EmailAddress>barrett@cs.stanford.edu</EmailAddress>
<PI_PHON>6507360822</PI_PHON>
<NSF_ID>000423674</NSF_ID>
<StartDate>06/14/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Thomas</FirstName>
<LastName>Wies</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Thomas Wies</PI_FULL_NAME>
<EmailAddress>tw47@nyu.edu</EmailAddress>
<PI_PHON>2129983293</PI_PHON>
<NSF_ID>000611335</NSF_ID>
<StartDate>06/14/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>New York University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100121019</ZipCode>
<PhoneNumber>2129982121</PhoneNumber>
<StreetAddress>70 WASHINGTON SQUARE S</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041968306</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NEW YORK UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041968306</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[New York University]]></Name>
<CityName>New York</CityName>
<StateCode>NY</StateCode>
<ZipCode>100121110</ZipCode>
<StreetAddress><![CDATA[251 Mercer Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">The world depends more and more each day on software. There are innumerable examples of critical systems that have failed due to software errors. Heap-allocated pointer structures are a common source of software errors. In particular, pointer safety errors, like memory leaks and dereferencing null or dangling pointers, often cause programs to fail or leave them vulnerable to being exploited by malware. Tools that are able to detect such errors at compile time have long been considered impractical because they scale poorly for large programs. This has started to change recently with the advent of verification tools based on separation logic (SL), which scale to software components of industrial size. The research conducted in this project has provided theoretical and practical foundations for techniques that increase the degree of automation, precision, and soundness of SL-based verification tools and that broaden the scope of tools that can use separation logic. The results of this research have been published in 11 papers that have appeared in major publication venues.</span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">Because heap-allocated data structures are among the most difficult software constructs to reason about, this work has made a significant impact on the reliability of software. For example, the PIs have evaluated the developed techniques by applying them to the verification of low-level systems code, thereby increasing the reliability of these software artifacts. </span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">In addition, PIs maintain a repository of software tools and benchmarks that have been developed during the course of this project. These are publicly available under non-restrictive open source licenses. This includes the source code and benchmarks for the verification tools GRASShopper and Cascade as well as the the Satisfiability Modulo Theories (SMT) solver CVC4. CVC4 and GRASShopper have been successfully built upon by other researchers in academia and industry (e.g. Microsoft and Google), who use the technology developed in this project in other verification tool-building efforts. The Cascade tool won several prizes in the memory safety category of the yearly Software Verification Competition.</span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">Several of the verification benchmarks that the PIs have developed in the course of this project have been reused by other researchers in the separation logic community. In addition, the project contributed more than 800 SMT benchmarks that have been generated by the GRASShopper tool to the SMT-LIB benchmark suite. These benchmarks play a major role in evaluating SMT solvers and driving their development. Several SMT researchers have already started improving their solvers in response to the new benchmark suite we have created.</span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">The project has provided training opportunities for four PhD students who conducted research related to the project. Three of these students have successfully graduated during the project duration and have subsequently found employment in research institutes and the software industry. The fourth student has made considerable progress towards completing his thesis. In addition, one master student, one undergraduate student, and one high-school student have gained research experience by contributing to this project. Three of the involved students are female, underlining the PIs continued efforts to increase the gender diversity in Computer Science research. The high-school student contributed during her participation in the NYU Girls' Science, Technology, Engineering, and Mathematics (GSTEM) Summer Program for which one of the PIs has served as a mentor.</span></p><br> <p>            Last Modified: 11/30/2017<br>      Modified by: Thomas&nbsp;Wies</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The world depends more and more each day on software. There are innumerable examples of critical systems that have failed due to software errors. Heap-allocated pointer structures are a common source of software errors. In particular, pointer safety errors, like memory leaks and dereferencing null or dangling pointers, often cause programs to fail or leave them vulnerable to being exploited by malware. Tools that are able to detect such errors at compile time have long been considered impractical because they scale poorly for large programs. This has started to change recently with the advent of verification tools based on separation logic (SL), which scale to software components of industrial size. The research conducted in this project has provided theoretical and practical foundations for techniques that increase the degree of automation, precision, and soundness of SL-based verification tools and that broaden the scope of tools that can use separation logic. The results of this research have been published in 11 papers that have appeared in major publication venues.  Because heap-allocated data structures are among the most difficult software constructs to reason about, this work has made a significant impact on the reliability of software. For example, the PIs have evaluated the developed techniques by applying them to the verification of low-level systems code, thereby increasing the reliability of these software artifacts.   In addition, PIs maintain a repository of software tools and benchmarks that have been developed during the course of this project. These are publicly available under non-restrictive open source licenses. This includes the source code and benchmarks for the verification tools GRASShopper and Cascade as well as the the Satisfiability Modulo Theories (SMT) solver CVC4. CVC4 and GRASShopper have been successfully built upon by other researchers in academia and industry (e.g. Microsoft and Google), who use the technology developed in this project in other verification tool-building efforts. The Cascade tool won several prizes in the memory safety category of the yearly Software Verification Competition.  Several of the verification benchmarks that the PIs have developed in the course of this project have been reused by other researchers in the separation logic community. In addition, the project contributed more than 800 SMT benchmarks that have been generated by the GRASShopper tool to the SMT-LIB benchmark suite. These benchmarks play a major role in evaluating SMT solvers and driving their development. Several SMT researchers have already started improving their solvers in response to the new benchmark suite we have created.  The project has provided training opportunities for four PhD students who conducted research related to the project. Three of these students have successfully graduated during the project duration and have subsequently found employment in research institutes and the software industry. The fourth student has made considerable progress towards completing his thesis. In addition, one master student, one undergraduate student, and one high-school student have gained research experience by contributing to this project. Three of the involved students are female, underlining the PIs continued efforts to increase the gender diversity in Computer Science research. The high-school student contributed during her participation in the NYU Girls' Science, Technology, Engineering, and Mathematics (GSTEM) Summer Program for which one of the PIs has served as a mentor.       Last Modified: 11/30/2017       Submitted by: Thomas Wies]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
