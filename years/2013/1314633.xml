<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: AF: Large: Collaborative Research: Parallelism without Concurrency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2013</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>424805.00</AwardTotalIntnAmount>
<AwardAmount>424805</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The widespread deployment of parallel machines --- from multicores to supercomputers --- has made it critical to develop simple approaches to programming them.  Significant progress has been made in simplifying parallel programming by developing programming models to support parallelism without concurrency, that is, without the nondeterminacies in the logic of programs caused by the relative and nondeterministic timing of communicating processes.  Yet most parallel programs in practice are concurrent, and hence, nondeterministic, leading to code that can only be programmed and understood by experts.  This research project aims to understand how parallel computers can be made easier to use by the vast majority of programmers by developing software technology that enables deterministic parallel computing.&lt;br/&gt;&lt;br/&gt;The project takes a holistic view of the problem from the key perspectives of programming linguistics, software systems, algorithmic analysis, and absolute performance.  It acknowledges the reality that parallel programming cannot be fully deterministic at every level of abstraction.  It is pursuing three key strategies for dealing with concurrency: encapsulating concurrency so that it is hidden by layered abstractions at appropriate abstraction levels, avoiding concurrency by restructuring programs to employ deterministic approaches, and managing concurrency when it is impractical to either encapsulate or avoid concurrency completely. Among the specific techniques being studied are commutative building blocks, deterministic nonassociative reducers, deterministic pipelined parallelism, deterministic interfaces, and generalized race detection for detecting invariant races.  The project is developing open-source libraries, tools, and runtime extensions integrated into a multicore-software platform, as well as a problem-based benchmark suite to compare approaches.</AbstractNarration>
<MinAmdLetterDate>06/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/05/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1314633</AwardID>
<Investigator>
<FirstName>Jeremy</FirstName>
<LastName>Fineman</LastName>
<PI_MID_INIT>T</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jeremy T Fineman</PI_FULL_NAME>
<EmailAddress>jfineman@cs.georgetown.edu</EmailAddress>
<PI_PHON>2026875141</PI_PHON>
<NSF_ID>000610554</NSF_ID>
<StartDate>06/26/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgetown University</Name>
<CityName>Washington</CityName>
<ZipCode>200571789</ZipCode>
<PhoneNumber>2026250100</PhoneNumber>
<StreetAddress>37th &amp; O St N W</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>District of Columbia</StateName>
<StateCode>DC</StateCode>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>DC00</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049515844</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGETOWN UNIVERSITY (THE)</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049515844</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgetown University]]></Name>
<CityName>Washington</CityName>
<StateCode>DC</StateCode>
<ZipCode>200571789</ZipCode>
<StreetAddress><![CDATA[37th & O St NW]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>District of Columbia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>DC00</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7934</Code>
<Text>PARAL/DISTRIBUTED ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~214488</FUND_OBLG>
<FUND_OBLG>2014~210317</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The Parlay research project takes a broad view toward enabling   deterministic parallelism, or parallelism without concurrency. The  project studies four key strategies for dealing  with concurrency:  encapsulating concurrency so that it is hidden by  abstractions at  appropriate abstraction levels, avoiding  concurrency by restructuring  programs to employ deterministic  approaches, managing concurrency when  it is impractical to either  encapsulate or avoid concurrency  completely, and applying tools to debug and uncover concurrency  violations.</p> <p>The main outcomes of the project are:</p> <p>1) A  study of a "priority update" operation as a useful  primitive for  limiting write contention in parallel and concurrent  programs, and in  particular to support deterministic parallelism. Experiment results  indicate that priority update can be incorporated into many  algorithms/applications, often in a way that leads to deterministic  executions, and that they are more efficient than other primitives.</p> <p>2)  Proofs that simple deterministic algorithms are highly parallel.  Specifically, this project investigates straightforward parallelizations  of certain iterative, sequential algorithms. Once an ordering of  iterates is fixed, the parallel algorthms are deterministic, achieving  the same results as a sequential execution. The algorithms are  accompanied by both experimental validation and theorems proving that,  for most input orderings, the straightforward parallel algorithm are  both efficient and highly parallel.</p> <p>3) A runtime scheduler,  called BATCHER, that encapsulates the concurrency of data structure  operations through the novel approach of implicit batching. Coping with  concurrency in a data structure is challenging, and hence most  concurrent data structures are very complex. Through scheduling  techniques, BATCHER controls concurrent accesses to the data structure,  thereby allowing programmers to instead implement much simpler,  non-concurrent batched versions.</p> <p>4) Several new "determinacy  race" detectors. Two data accesses are said to be logically parallel if  they may be reordered with respect to each other by the scheduler. If at  least one such access is a write/update, then a determinacy race  occurs. Determinacy races lead to nondeterministic program behavior, and  as such they are often concurrency bugs in the program. Race detectors  are tools for uncovering these bugs. The project outcomes include several new  race-detection algorithms and implementations. Specifically, the project includes analyses and implementations of (i) race detectors that are provably efficient for  several forms of parallelism, and (ii) a race detector that is efficient  even when executed in parallel.</p><br> <p>            Last Modified: 09/28/2018<br>      Modified by: Jeremy&nbsp;T&nbsp;Fineman</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The Parlay research project takes a broad view toward enabling   deterministic parallelism, or parallelism without concurrency. The  project studies four key strategies for dealing  with concurrency:  encapsulating concurrency so that it is hidden by  abstractions at  appropriate abstraction levels, avoiding  concurrency by restructuring  programs to employ deterministic  approaches, managing concurrency when  it is impractical to either  encapsulate or avoid concurrency  completely, and applying tools to debug and uncover concurrency  violations.  The main outcomes of the project are:  1) A  study of a "priority update" operation as a useful  primitive for  limiting write contention in parallel and concurrent  programs, and in  particular to support deterministic parallelism. Experiment results  indicate that priority update can be incorporated into many  algorithms/applications, often in a way that leads to deterministic  executions, and that they are more efficient than other primitives.  2)  Proofs that simple deterministic algorithms are highly parallel.  Specifically, this project investigates straightforward parallelizations  of certain iterative, sequential algorithms. Once an ordering of  iterates is fixed, the parallel algorthms are deterministic, achieving  the same results as a sequential execution. The algorithms are  accompanied by both experimental validation and theorems proving that,  for most input orderings, the straightforward parallel algorithm are  both efficient and highly parallel.  3) A runtime scheduler,  called BATCHER, that encapsulates the concurrency of data structure  operations through the novel approach of implicit batching. Coping with  concurrency in a data structure is challenging, and hence most  concurrent data structures are very complex. Through scheduling  techniques, BATCHER controls concurrent accesses to the data structure,  thereby allowing programmers to instead implement much simpler,  non-concurrent batched versions.  4) Several new "determinacy  race" detectors. Two data accesses are said to be logically parallel if  they may be reordered with respect to each other by the scheduler. If at  least one such access is a write/update, then a determinacy race  occurs. Determinacy races lead to nondeterministic program behavior, and  as such they are often concurrency bugs in the program. Race detectors  are tools for uncovering these bugs. The project outcomes include several new  race-detection algorithms and implementations. Specifically, the project includes analyses and implementations of (i) race detectors that are provably efficient for  several forms of parallelism, and (ii) a race detector that is efficient  even when executed in parallel.       Last Modified: 09/28/2018       Submitted by: Jeremy T Fineman]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
