<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small:  Reverse Engineering Variability Implementations</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>400797.00</AwardTotalIntnAmount>
<AwardAmount>419522</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Variability in software systems is very common and important to tailor&lt;br/&gt;the system to user needs and to use the system flexibly in different&lt;br/&gt;contexts without developing a new system from scratch for each context.&lt;br/&gt;For example, embedded systems with resource constraints,&lt;br/&gt;high-performance optimizations, and end-user customizable systems all&lt;br/&gt;exploit variability. However variability in software systems creates a&lt;br/&gt;fundamental tension between (a) reuse and (b) development and&lt;br/&gt;maintenance costs. On the one hand, planning variability upfront enables&lt;br/&gt;systematic  reuse and promises to significantly reduce development&lt;br/&gt;effort, costs, and time to market. On the other hand, variability&lt;br/&gt;requires an upfront investment and causes long-term maintenance costs,&lt;br/&gt;because variations give rise to an exponential number of configurations&lt;br/&gt;  with potentially intricate interactions. Especially if introduced in&lt;br/&gt;an ad-hoc fashion and not managed  appropriately, variability can&lt;br/&gt;increase maintenance costs to a level that outweighs the expected&lt;br/&gt;benefits.  This research develops and integrates reverse-engineering&lt;br/&gt;techniques for variability to lower upfront investments for variability&lt;br/&gt;and to reduce the costs of long-term maintenance caused by accidental&lt;br/&gt;complexity of existing ad-hoc variability implementations.&lt;br/&gt;&lt;br/&gt;This project revisits how variable and reusable software is implemented&lt;br/&gt;by encouraging lightweight and incremental implementation mechanisms and&lt;br/&gt;providing migration mechanisms for all ad-hoc legacy implementations&lt;br/&gt;common in practice, including conditional compilation (#ifdef),&lt;br/&gt;branches, clones, textual  patches, command-line parameters, and&lt;br/&gt;plug-ins.  It integrates research from different communities, including&lt;br/&gt;product- line analysis, static analysis, refactoring, concern location,&lt;br/&gt;and architecture  recovery toward a common goal of reverse engineering&lt;br/&gt;variability implementations . This  integration will allow scaling&lt;br/&gt;research and practice of analyzing and migrating variability from core&lt;br/&gt;calculi  to real-world systems of the size and complexity of the Linux&lt;br/&gt;kernel.</AbstractNarration>
<MinAmdLetterDate>06/24/2013</MinAmdLetterDate>
<MaxAmdLetterDate>03/31/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1318808</AwardID>
<Investigator>
<FirstName>Christian</FirstName>
<LastName>Kastner</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christian Kastner</PI_FULL_NAME>
<EmailAddress>kaestner@cmu.edu</EmailAddress>
<PI_PHON>4122689527</PI_PHON>
<NSF_ID>000634835</NSF_ID>
<StartDate>06/24/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133890</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~400797</FUND_OBLG>
<FUND_OBLG>2015~9200</FUND_OBLG>
<FUND_OBLG>2017~9525</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-c5eb11a5-1d1a-af3f-8be8-38ea199b114a"> <p dir="ltr"><span>Variability in software systems is very common and important to tailor the system to user needs and to use the system flexibly in different contexts without developing a new system from scratch for each context. For example, embedded systems with resource constraints, high-performance optimizations, and end-user customizable systems all exploit variability. However variability in software systems creates a fundamental tension between (a) reuse and (b) development and maintenance costs. Especially if introduced in an ad-hoc fashion and not managed appropriately, variability can increase maintenance costs to a level that outweighs the expected benefits. This research developed and integrated reverse-engineering techniques for variability to lower upfront investments for variability and to reduce the costs of long-term maintenance caused by accidental complexity of existing ad-hoc variability implementations.</span></p> <br /> <p dir="ltr"><span>This research developed reverse engineering techniques to recover and understand variability implementations. It focused on multiple forms of variability implementations that are common in practice and easy to use initially but known to cause long-term maintenance costs.</span></p> <br /> <p dir="ltr"><span>First, this research developed an infrastructure to detect which code fragments are affected by load-time configuration options, such as command-line parameters and configuration files. While load-time options are easy to use, loaded and propagated with normal programming language constructs, developers quickly run into challenges understanding how the larger implementation may depend on these options and how options interact (these difficulties were also confirmed in a study as part of this research). This research developed a technique, based on static taint tracking, to track load-time configuration options to where they are used in the program and shows results to developers in terms of a configuration map. The research exploits insights about how configuration options are used in practice, which differs from normal program variables and simplifies the analysis. An evaluation shows that the system can accurately track configuration options and their values and provide insights into the variability of a system. A variant of this approach was also used to support understanding and migrating variability in build systems.</span></p> <br /> <p dir="ltr"><span>Second, this research extracted configuration constraints among configuration options from technical artifacts. In a nutshell, it identifies heuristics and technical constraints that can identify when two options should not be used together or when multiple options have dependencies. Extracting these constraints provides useful insights and documentation for both developers and users of the system. An evaluation showed that a significant number of constraints that developers previously documented manually could be recovered with this approach.</span></p> <br /> <p dir="ltr"><span>Third, this research developed technique to discover features within projects that develop variability through clown-and-own strategies. Clone-and-own is the industry term for developing variants of a system by copying and modifying a previous system without tracking of changes across variants. Again as other ad-hoc techniques, clone and own is easy and cheap in the short term, but leads to significant potential long-term maintenance costs. This research used static dependency graphs, community detection mechanisms, and information-retrieval techniques to identify and label features within changes in a copied system, thus allowing developers to monitor multiple copies and quickly gain an overview of their evolution, aggregated in terms of cohesive labeled changes rather than low-level differences. An evaluation shows that the system is effective in identifying features and provides new insights to developers about developments in variants of a project.</span></p> <br /> <p dir="ltr"><span>Overall, this research contributed to understanding and reverse engineering various common variability-implementation techniques that often cause significant complexities in the development and maintenance process. These results have been broadly disseminated in research publications. These techniques contribute to lowering costs in common software engineering techniques, disseminate good practices of variability use, and allow developers to make better development decisions and better scale the development of complex systems.</span></p> <div><span><br /></span></div> </span></p> <p>&nbsp;</p><br> <p>            Last Modified: 12/03/2017<br>      Modified by: Christian&nbsp;Kastner</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Variability in software systems is very common and important to tailor the system to user needs and to use the system flexibly in different contexts without developing a new system from scratch for each context. For example, embedded systems with resource constraints, high-performance optimizations, and end-user customizable systems all exploit variability. However variability in software systems creates a fundamental tension between (a) reuse and (b) development and maintenance costs. Especially if introduced in an ad-hoc fashion and not managed appropriately, variability can increase maintenance costs to a level that outweighs the expected benefits. This research developed and integrated reverse-engineering techniques for variability to lower upfront investments for variability and to reduce the costs of long-term maintenance caused by accidental complexity of existing ad-hoc variability implementations.   This research developed reverse engineering techniques to recover and understand variability implementations. It focused on multiple forms of variability implementations that are common in practice and easy to use initially but known to cause long-term maintenance costs.   First, this research developed an infrastructure to detect which code fragments are affected by load-time configuration options, such as command-line parameters and configuration files. While load-time options are easy to use, loaded and propagated with normal programming language constructs, developers quickly run into challenges understanding how the larger implementation may depend on these options and how options interact (these difficulties were also confirmed in a study as part of this research). This research developed a technique, based on static taint tracking, to track load-time configuration options to where they are used in the program and shows results to developers in terms of a configuration map. The research exploits insights about how configuration options are used in practice, which differs from normal program variables and simplifies the analysis. An evaluation shows that the system can accurately track configuration options and their values and provide insights into the variability of a system. A variant of this approach was also used to support understanding and migrating variability in build systems.   Second, this research extracted configuration constraints among configuration options from technical artifacts. In a nutshell, it identifies heuristics and technical constraints that can identify when two options should not be used together or when multiple options have dependencies. Extracting these constraints provides useful insights and documentation for both developers and users of the system. An evaluation showed that a significant number of constraints that developers previously documented manually could be recovered with this approach.   Third, this research developed technique to discover features within projects that develop variability through clown-and-own strategies. Clone-and-own is the industry term for developing variants of a system by copying and modifying a previous system without tracking of changes across variants. Again as other ad-hoc techniques, clone and own is easy and cheap in the short term, but leads to significant potential long-term maintenance costs. This research used static dependency graphs, community detection mechanisms, and information-retrieval techniques to identify and label features within changes in a copied system, thus allowing developers to monitor multiple copies and quickly gain an overview of their evolution, aggregated in terms of cohesive labeled changes rather than low-level differences. An evaluation shows that the system is effective in identifying features and provides new insights to developers about developments in variants of a project.   Overall, this research contributed to understanding and reverse engineering various common variability-implementation techniques that often cause significant complexities in the development and maintenance process. These results have been broadly disseminated in research publications. These techniques contribute to lowering costs in common software engineering techniques, disseminate good practices of variability use, and allow developers to make better development decisions and better scale the development of complex systems.             Last Modified: 12/03/2017       Submitted by: Christian Kastner]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
