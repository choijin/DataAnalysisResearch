<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TTP: Medium: Crowd Sourcing Annotations</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>962190.00</AwardTotalIntnAmount>
<AwardAmount>978190</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Kevin Thompson</SignBlockName>
<PO_EMAI>kthompso@nsf.gov</PO_EMAI>
<PO_PHON>7032924220</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Both sound software verification techniques and heuristic software&lt;br/&gt;flaw-finding tools benefit from the presence of software annotations&lt;br/&gt;that describe the behavior of software components. Function summaries&lt;br/&gt;(in the form of logical annotations) allow modular checking of software&lt;br/&gt;and more precise reasoning. However, such annotations are difficult to&lt;br/&gt;write and not commonly produced by software developers, despite their&lt;br/&gt;benefits to static analysis.&lt;br/&gt;&lt;br/&gt;The Crowdsourcing Annotations project will address this deficiency by&lt;br/&gt;encouraging software-community-based crowd-sourced generation of&lt;br/&gt;annotations.  This effort will be supported by tools that generate, use,&lt;br/&gt;and translate the annotations; the results of annotation efforts will be&lt;br/&gt;shared through openly available repositories. We will also use pilot&lt;br/&gt;projects to demonstrate and encourage the use of annotations and static&lt;br/&gt;analysis. The project will leverage and interact with the Software Assurance Marketplace (SWAMP)&lt;br/&gt;project's collection of static analysis tools and example software. Some&lt;br/&gt;of the technical challenges are developing uniform styles and languages&lt;br/&gt;for annotations, reliably validating crowd-sourced submissions, merging&lt;br/&gt;annotations and the corresponding source code, version control, and&lt;br/&gt;integration with typical software development environments. The social&lt;br/&gt;challenges are also important: designing and implementing a&lt;br/&gt;crowd-sourcing infrastructure in a way that enhances and motivates&lt;br/&gt;community and individual technical and social benefits.</AbstractNarration>
<MinAmdLetterDate>09/17/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/19/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1314674</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Cok</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME>Dr.</PI_SUFX_NAME>
<PI_FULL_NAME>David Cok</PI_FULL_NAME>
<EmailAddress>davidcok24@gmail.com</EmailAddress>
<PI_PHON>6072737340</PI_PHON>
<NSF_ID>000635590</NSF_ID>
<StartDate>09/17/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>GRAMMATECH, INC.</Name>
<CityName>ITHACA</CityName>
<ZipCode>148503250</ZipCode>
<PhoneNumber>6072737340</PhoneNumber>
<StreetAddress>531 Esty STREET</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY23</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>603978321</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GRAMMATECH, INC.</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[GRAMMATECH, INC.]]></Name>
<CityName>Ithaca</CityName>
<StateCode>NY</StateCode>
<ZipCode>148503250</ZipCode>
<StreetAddress><![CDATA[531 Esty Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY23</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~962190</FUND_OBLG>
<FUND_OBLG>2015~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Safe software does what it is supposed to; secure software does <em>only</em> what it is supposed to and does not have extra (malicious) functionality. Modern software is complex and includes many components written by the software&rsquo;s authors and many libraries that are written by other people. To effectively automatically check that the software is safe and secure requires expressing the intent of the software in machine-readable language, known as annotations or specifications. Even modern commercial tools that do not require the tool user to write such specifications internally have proprietary models of all relevant library routines.</p> <p>This project improved the state of models (specifications) for commonly used libraries. We assessed and documented the current state of practice on a public web-site, annotationsforall.org. We found that the current state of tools was not mature enough for industrial use and that this was an impediment to widespread interest in writing library specifications. Consequently, in addition to library specification writing and testing, we also improved the underlying tools and generated tutorial material about using automated tools for checking the safety and security of software.</p> <p>Our work focused on programs in C, with specifications in the ANSI-C Specification Language (ACSL) and the Frama-C checking tool, and on programs in Java, with specifications in the Java Modeling Language (JML) and the OpenJML checking tool.</p> <p>The outcomes of the project are these:</p> <p>(a) assessment of the use, appropriate workflows, and impediments to use of formal specifications in support of software verification, including connections to proprietary specifications and the usefulness of annotations for identifying historical bugs in public software;<br />(b) documenting on a public web-site (annotationsforall.org) the languages and tools that support semi-automated verification;<br />(c) improved tools, in particular the Frama-C tool suite and OpenJML, in the form of improved functionality, additional test, bug reports, and improved documentation;<br />(d) improved library specifications in ACSL and JML usable by those tools, including test suites that exercise those specifications;<br />(e) improvements and corrections to the logical underpinnings and semantics of the specification languages through organized discussions at conferences, workshops and in on-line discussion groups;<br />(f) publicly available publications, technical reports, public web-sites, tutorials and book material documenting the results of the project;<br />(g) advice, review and support to undergraduate and graduate projects at various universities that build on these tools and specification languages;<br />and (h) transition to industrial use through separately contracted research to apply the improved tools to checking the security and safety of in-use industrial software.</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/02/2017<br>      Modified by: David&nbsp;Cok</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Safe software does what it is supposed to; secure software does only what it is supposed to and does not have extra (malicious) functionality. Modern software is complex and includes many components written by the software?s authors and many libraries that are written by other people. To effectively automatically check that the software is safe and secure requires expressing the intent of the software in machine-readable language, known as annotations or specifications. Even modern commercial tools that do not require the tool user to write such specifications internally have proprietary models of all relevant library routines.  This project improved the state of models (specifications) for commonly used libraries. We assessed and documented the current state of practice on a public web-site, annotationsforall.org. We found that the current state of tools was not mature enough for industrial use and that this was an impediment to widespread interest in writing library specifications. Consequently, in addition to library specification writing and testing, we also improved the underlying tools and generated tutorial material about using automated tools for checking the safety and security of software.  Our work focused on programs in C, with specifications in the ANSI-C Specification Language (ACSL) and the Frama-C checking tool, and on programs in Java, with specifications in the Java Modeling Language (JML) and the OpenJML checking tool.  The outcomes of the project are these:  (a) assessment of the use, appropriate workflows, and impediments to use of formal specifications in support of software verification, including connections to proprietary specifications and the usefulness of annotations for identifying historical bugs in public software; (b) documenting on a public web-site (annotationsforall.org) the languages and tools that support semi-automated verification; (c) improved tools, in particular the Frama-C tool suite and OpenJML, in the form of improved functionality, additional test, bug reports, and improved documentation; (d) improved library specifications in ACSL and JML usable by those tools, including test suites that exercise those specifications; (e) improvements and corrections to the logical underpinnings and semantics of the specification languages through organized discussions at conferences, workshops and in on-line discussion groups; (f) publicly available publications, technical reports, public web-sites, tutorials and book material documenting the results of the project; (g) advice, review and support to undergraduate and graduate projects at various universities that build on these tools and specification languages; and (h) transition to industrial use through separately contracted research to apply the improved tools to checking the security and safety of in-use industrial software.          Last Modified: 10/02/2017       Submitted by: David Cok]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
