<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Small: Enabling Declarative Querying and Analytics over Large Dynamic Information Networks</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In this project, we are building a graph data management system and a suite of tools aimed at supporting real-time, historical, and analytics queries over very large, dynamic, heterogeneous, and noisy information networks. Examples of such information networks include social networks, communication networks, financial transaction networks, citation networks, gene regulatory networks, disease transmission networks, ecological food networks, sensor networks, social contact graphs, and many more. Network data is most naturally represented as a graph, with nodes representing the entities and edges denoting the interactions between them. There is, however, a lack of established data management systems that provide declarative frameworks for querying and analysing such graph-structured data, especially very large volumes of heterogeneous, complex-structured, and rapidly changing data. &lt;br/&gt;&lt;br/&gt;In this project, we are developing a set of formalisms that include: (a) a declarative query language for graph data, (b) a declarative framework for specifying complex, iterative network analysis tasks like entity resolution, link prediction, etc., and (c) a general-purpose neighborhood-centric distributed programming framework. Our declarative interfaces and the programming framework are based on "Datalog", a well-established database query language, providing the users or the analysts a consistent abstraction of the graph data to specify their queries or tasks. &lt;br/&gt;&lt;br/&gt;We are designing a suite of techniques, algorithms, and index data structures, to efficiently store large volumes of time-evolving graph data, and to execute queries and analysis tasks over it. We are addressing the challenges in minimizing network communication overhead during distributed computation through designing new partitioning and adaptive replication techniques. We are also developing a compression-based approach to minimize the resources needed for graph processing, and a framework for extrapolating missing historical information to enable querying over incomplete historical traces. &lt;br/&gt;&lt;br/&gt;Managing and reasoning about graph data is increasingly becoming crucial in many real-world application domains including social media, e-science, disease epidemics, and financial markets, to name a few. The frameworks and tools that we are developing make it easier and more intuitive for domain experts and analysts to process, analyze, and extract insights from large volumes of dynamic time-evolving graph data. Our system enables temporal evolutionary analytics over very large historical traces, and continuous and real-time analytics over highly dynamic graphs, thus enabling a rich class of applications that would not have been possible before. The declarative frameworks and the query language that we are developing have the potential to transform and streamline the highly fragmented research area of graph query processing and analytics. This project provides research opportunities for graduate and undergraduate students, and is aligned with several undergraduate and graduate courses offered by the PI. For further information, see the project web site at: http://www.cs.umd.edu/~amol/GrDB</AbstractNarration>
<MinAmdLetterDate>08/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/14/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319432</AwardID>
<Investigator>
<FirstName>Amol</FirstName>
<LastName>Deshpande</LastName>
<PI_MID_INIT>V</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Amol V Deshpande</PI_FULL_NAME>
<EmailAddress>amol@cs.umd.edu</EmailAddress>
<PI_PHON>3014056269</PI_PHON>
<NSF_ID>000486255</NSF_ID>
<StartDate>08/26/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Maryland, College Park</Name>
<CityName>College Park</CityName>
<ZipCode>207425141</ZipCode>
<PhoneNumber>3014056269</PhoneNumber>
<StreetAddress>3112 LEE BLDG 7809 Regents Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<StateCode>MD</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MD05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>790934285</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MARYLAND, COLLEGE PARK</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003256088</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Maryland, College Park]]></Name>
<CityName>College Park</CityName>
<StateCode>MD</StateCode>
<ZipCode>207425141</ZipCode>
<StreetAddress><![CDATA[3112 LEE BLDG 7809 Regents Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MD05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~347246</FUND_OBLG>
<FUND_OBLG>2014~152754</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This NSF-funded project was motivated by the observation that "information networks" or "graph-structured data" have become ubiquitous and widespread over the last two decades, because of an increasing interest in modeling and exploring the "interconnections" between "entities" being modeled or analyzed. Examples of such data include social networks, communication networks, financial transaction networks, citation networks, gene regulatory networks, disease transmission networks, ecological food networks, sensor networks, social contact graphs, and many more.<br />However, lack of a general-purpose graph data management system that supports declarative querying and complex analytics at different abstraction levels has led researchers in those domains to build their own tools and techniques; this has resulted not only in significant duplication of work but, more importantly, it has often taken the focus away from analyzing the data and gaining insights from it.<br /><br />The goal of this project was to investigate and address the challenges in building such a graph data management system and a suite of tools aimed at supporting real-time and historical querying and analytics over very large, dynamic, heterogeneous, and noisy graphs. Our aim was to support both "one-time" and "continuous" queries over the current state of the graph, as well as queries that need to access historical states of the graph for "temporal evolutionary analysis" and "comparative analysis". We also planned to develop a set of formalisms including "declarative interfaces" for querying and specifying analysis tasks, and a general-purpose "neighborhood-centric programming framework", to provide the users or the analysts a consistent abstraction of the graph data to specify their queries or tasks.<br /><br />The key outcomes of the project can be summarized as follows. (a) We developed a Datalog-based framework for declaratively specifying iterative complex graph transformation tasks; examples of such tasks include a variety of graph cleaning tasks like entity resolution, link prediction, and collective classification. (b) We developed tools for managing and querying very large historical network traces; we also built a toolkit that supports temporal analytics over such traces on top of Apache Spark, a general-purpose cluster-computing framework. (c) We developed techniques for efficiently supporting stream reasoning and querying tasks that can handle highly dynamic information networks, in a distributed fashion. (d) We developed a distributed programming framework, called "NScale", to support a large variety of analysis tasks on very large graphs in a distributed fashion; our framework generalizes various previous distributed programming frameworks like Pregel and Giraph and outperforms them by orders-of-magnitude on many complex graph analysis tasks. (e) We designed a preliminary prototype of an end-to-end graph analysis framework, called "GraphGen", that sits atop a relational database management system, and supports graph querying/analytics through defining graphs as transformations over underlying relational datasets (as GraphViews) and specifying queries or analytics on those graphs using either a high-level language or Java programs against a simple graph API.<br /><br />The major results from this project were published in leading conferences and journals in the field of Databases, and were the subject of several invited talks and a tutorial. More details about the project, and the publications that resulted from it, can be found at: http://www.cs.umd.edu/~amol/DBGroup/graphs.html.</p><br> <p>            Last Modified: 01/01/2018<br>      Modified by: Amol&nbsp;V&nbsp;Deshpande</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This NSF-funded project was motivated by the observation that "information networks" or "graph-structured data" have become ubiquitous and widespread over the last two decades, because of an increasing interest in modeling and exploring the "interconnections" between "entities" being modeled or analyzed. Examples of such data include social networks, communication networks, financial transaction networks, citation networks, gene regulatory networks, disease transmission networks, ecological food networks, sensor networks, social contact graphs, and many more. However, lack of a general-purpose graph data management system that supports declarative querying and complex analytics at different abstraction levels has led researchers in those domains to build their own tools and techniques; this has resulted not only in significant duplication of work but, more importantly, it has often taken the focus away from analyzing the data and gaining insights from it.  The goal of this project was to investigate and address the challenges in building such a graph data management system and a suite of tools aimed at supporting real-time and historical querying and analytics over very large, dynamic, heterogeneous, and noisy graphs. Our aim was to support both "one-time" and "continuous" queries over the current state of the graph, as well as queries that need to access historical states of the graph for "temporal evolutionary analysis" and "comparative analysis". We also planned to develop a set of formalisms including "declarative interfaces" for querying and specifying analysis tasks, and a general-purpose "neighborhood-centric programming framework", to provide the users or the analysts a consistent abstraction of the graph data to specify their queries or tasks.  The key outcomes of the project can be summarized as follows. (a) We developed a Datalog-based framework for declaratively specifying iterative complex graph transformation tasks; examples of such tasks include a variety of graph cleaning tasks like entity resolution, link prediction, and collective classification. (b) We developed tools for managing and querying very large historical network traces; we also built a toolkit that supports temporal analytics over such traces on top of Apache Spark, a general-purpose cluster-computing framework. (c) We developed techniques for efficiently supporting stream reasoning and querying tasks that can handle highly dynamic information networks, in a distributed fashion. (d) We developed a distributed programming framework, called "NScale", to support a large variety of analysis tasks on very large graphs in a distributed fashion; our framework generalizes various previous distributed programming frameworks like Pregel and Giraph and outperforms them by orders-of-magnitude on many complex graph analysis tasks. (e) We designed a preliminary prototype of an end-to-end graph analysis framework, called "GraphGen", that sits atop a relational database management system, and supports graph querying/analytics through defining graphs as transformations over underlying relational datasets (as GraphViews) and specifying queries or analytics on those graphs using either a high-level language or Java programs against a simple graph API.  The major results from this project were published in leading conferences and journals in the field of Databases, and were the subject of several invited talks and a tutorial. More details about the project, and the publications that resulted from it, can be found at: http://www.cs.umd.edu/~amol/DBGroup/graphs.html.       Last Modified: 01/01/2018       Submitted by: Amol V Deshpande]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
