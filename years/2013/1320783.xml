<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: BugX: In-house Debugging of Field Failures to Improve Software Quality</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>434999.00</AwardTotalIntnAmount>
<AwardAmount>434999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A recent survey conducted among developers of the Apache, Eclipse, and&lt;br/&gt;Mozilla projects showed that the ability to recreate field&lt;br/&gt;failures--failures of the software that occur after deployment, on&lt;br/&gt;user machines--is considered of fundamental importance when&lt;br/&gt;investigating bug reports. Unfortunately, the information typically&lt;br/&gt;contained in a bug report, such as memory dumps or call stacks, is&lt;br/&gt;usually insufficient for recreating the problem. Even more advanced&lt;br/&gt;approaches for gathering field data and help in-house debugging tend&lt;br/&gt;to provide too little information to developers and to be therefore&lt;br/&gt;ineffective.&lt;br/&gt;&lt;br/&gt;The overall goal of this project is to improve the state of the art by&lt;br/&gt;allowing, supporting, and partially automating, actual in-house&lt;br/&gt;debugging of field failures. Specifically, this research will develop&lt;br/&gt;novel techniques and tools that let developers reproduce, analyze, and&lt;br/&gt;understand, in-house, failures observed in the field. Given a field&lt;br/&gt;failure, the developed techniques will (1) collect a suitable set of&lt;br/&gt;data about the failure on the user machine, (2) generate one or more&lt;br/&gt;inputs that can be executed against the failing application and result&lt;br/&gt;in a failure analogous to the one observed, and (3) provide hints on&lt;br/&gt;the root causes of the failure and possible fixes for these causes. To&lt;br/&gt;achieve this goal, the research will combine static and dynamic&lt;br/&gt;program analysis techniques and leverage and extend techniques for&lt;br/&gt;testing deployed software, input generation and anonymization, and&lt;br/&gt;software debugging. If successful, this research will provide&lt;br/&gt;unprecedented advantages to developers by allowing them to debug field&lt;br/&gt;failures in the same way in which they debug in-house ones, which will&lt;br/&gt;improve software quality and benefit all segments of society that&lt;br/&gt;depend on software. Furthermore, the project will develop and make&lt;br/&gt;available to the broader scientific community educational materials&lt;br/&gt;that incorporate research findings, tools that implement the&lt;br/&gt;techniques developed within the project, and samples of the software&lt;br/&gt;benchmarks used in empirical evaluations. The availability of&lt;br/&gt;curriculum materials, tools, infrastructure, and benchmarks will&lt;br/&gt;advance knowledge, enable additional research in the area, and&lt;br/&gt;ultimately further benefit society.</AbstractNarration>
<MinAmdLetterDate>06/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/26/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320783</AwardID>
<Investigator>
<FirstName>Alessandro</FirstName>
<LastName>Orso</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Alessandro Orso</PI_FULL_NAME>
<EmailAddress>orso@cc.gatech.edu</EmailAddress>
<PI_PHON>4043852066</PI_PHON>
<NSF_ID>000489660</NSF_ID>
<StartDate>06/26/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>097394084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGIA TECH RESEARCH CORPORATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>097394084</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgia Institute of Technology]]></Name>
<CityName>Atlanta</CityName>
<StateCode>GA</StateCode>
<ZipCode>303320002</ZipCode>
<StreetAddress><![CDATA[225 North Ave NW]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~434999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software debugging is a human-intensive activity responsible for much of the cost of software development and maintenance. Existing approaches for automated debugging can help lower this cost but have limitations that hinder their effectiveness and applicability. This project aimed to overcome these limitations by developing a family of debugging techniques that (1) target realistic debugging scenarios, in which faults can involve multiple statements and manifest themselves only in specific contexts, (2) apply advanced static and dynamic analysis techniques to automatically reduce the amount of both statements and inputs that developers must examine when investigating a failure, (3) leverage information collected from the field to increase the relevance and effectiveness of the debugging process. To accomplish the goal of the project, we developed several new testing and debugging techniques, which are summarized in the rest of this report.</p> <p><strong>Techniques for reproducing, debugging, and repairing software failures that occur on user machines, after the software has been deployed</strong>. A survey conducted among developers of the Apache, Eclipse, and Mozilla projects revealed that most developers consider information on how to reproduce failures to be the most valuable and difficult to obtain piece of information in a bug report. To address this problem, we first developed techniques that, given an observed field failure, can provide developers with test inputs that result in a failure analogous to the failure that the user experienced. We then extended these techniques by adding to them support for automated debugging and bug understanding, so as to further help developers identify the root causes of field failures. Finally, we went beyond locating and understanding failure causes by developing automated repair techniques that can provide developers with hints on how a given bug may be repaired.</p> <p><strong>Techniques for helping developers debug more efficiently and effectively</strong>. Countless approaches have been proposed over the years to help developers decrease the cost and complexity of software debugging. Although some of these techniques have been shown to be useful, they tend to make strong, often unrealistic assumptions on how developers behave when debugging. In the context of this project, we addressed this issue by first studying the limitations of existing approaches and then developing techniques that follow the way in which debugging is typically performed, while automating significant parts of it. In particular, given a failure, our techniques use static and dynamic analyses to (1) formulate hypotheses on the possible causes of such failure and (2) generate intuitive queries for the developers based on these hypotheses. The answers to these queries can then help refuse or refine these hypotheses until the cause of the failure being investigated is found.</p> <p><strong>Techniques for supporting testing and debugging of mobile apps</strong>. In addition to developing techniques that can improve software debugging in general, in this project we also defined techniques that specifically target testing and debugging of mobile (Android) apps. Specifically, we developed techniques that allows for recording, encoding, and running platform independent test cases, so as to facilitate regression testing and debugging. We also developed techniques based on differential analysis that can automatically identify inconsistencies in the way an app behaves on different devices and report to developers these inconsistencies and their causes.</p> <p><strong>Broader impact of this research:</strong> In addition to disseminating the results of this research through publications, public presentations, and integration into the curriculum, we made freely available to researchers and practitioners tools, data, and experiment infrastructure developed within the project, which will help further dissemination and enable future research. More generally, by advancing the state of the art in the areas of software testing and debugging, this research helped and will help developers build more reliable software systems, ultimately increasing the overall quality of our software infrastructure and providing benefits to all segments of society that depend on software.</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/10/2018<br>      Modified by: Alessandro&nbsp;Orso</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software debugging is a human-intensive activity responsible for much of the cost of software development and maintenance. Existing approaches for automated debugging can help lower this cost but have limitations that hinder their effectiveness and applicability. This project aimed to overcome these limitations by developing a family of debugging techniques that (1) target realistic debugging scenarios, in which faults can involve multiple statements and manifest themselves only in specific contexts, (2) apply advanced static and dynamic analysis techniques to automatically reduce the amount of both statements and inputs that developers must examine when investigating a failure, (3) leverage information collected from the field to increase the relevance and effectiveness of the debugging process. To accomplish the goal of the project, we developed several new testing and debugging techniques, which are summarized in the rest of this report.  Techniques for reproducing, debugging, and repairing software failures that occur on user machines, after the software has been deployed. A survey conducted among developers of the Apache, Eclipse, and Mozilla projects revealed that most developers consider information on how to reproduce failures to be the most valuable and difficult to obtain piece of information in a bug report. To address this problem, we first developed techniques that, given an observed field failure, can provide developers with test inputs that result in a failure analogous to the failure that the user experienced. We then extended these techniques by adding to them support for automated debugging and bug understanding, so as to further help developers identify the root causes of field failures. Finally, we went beyond locating and understanding failure causes by developing automated repair techniques that can provide developers with hints on how a given bug may be repaired.  Techniques for helping developers debug more efficiently and effectively. Countless approaches have been proposed over the years to help developers decrease the cost and complexity of software debugging. Although some of these techniques have been shown to be useful, they tend to make strong, often unrealistic assumptions on how developers behave when debugging. In the context of this project, we addressed this issue by first studying the limitations of existing approaches and then developing techniques that follow the way in which debugging is typically performed, while automating significant parts of it. In particular, given a failure, our techniques use static and dynamic analyses to (1) formulate hypotheses on the possible causes of such failure and (2) generate intuitive queries for the developers based on these hypotheses. The answers to these queries can then help refuse or refine these hypotheses until the cause of the failure being investigated is found.  Techniques for supporting testing and debugging of mobile apps. In addition to developing techniques that can improve software debugging in general, in this project we also defined techniques that specifically target testing and debugging of mobile (Android) apps. Specifically, we developed techniques that allows for recording, encoding, and running platform independent test cases, so as to facilitate regression testing and debugging. We also developed techniques based on differential analysis that can automatically identify inconsistencies in the way an app behaves on different devices and report to developers these inconsistencies and their causes.  Broader impact of this research: In addition to disseminating the results of this research through publications, public presentations, and integration into the curriculum, we made freely available to researchers and practitioners tools, data, and experiment infrastructure developed within the project, which will help further dissemination and enable future research. More generally, by advancing the state of the art in the areas of software testing and debugging, this research helped and will help developers build more reliable software systems, ultimately increasing the overall quality of our software infrastructure and providing benefits to all segments of society that depend on software.          Last Modified: 05/10/2018       Submitted by: Alessandro Orso]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
