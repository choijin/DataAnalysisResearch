<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Specifying, Checking, and Analyzing Applications Built with Dynamic Language Frameworks</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>412714.00</AwardTotalIntnAmount>
<AwardAmount>412714</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The last several decades have seen tremendous progress in building program analysis tools to detect bugs early in the software development process. Unfortunately, existing tools neglect an increasingly important category of software systems: those written using frameworks in dynamic languages. Such frameworks are very popular today, e.g., many of the most popular sites on the web are built using them. While the expressiveness, flexibility, and power of dynamic language frameworks have encouraged their rapid and widespread adoption, those features also defeat existing program analysis techniques. This research aims to address this problem by developing practical tools and techniques for detecting and preventing errors early during software development that uses dynamic language frameworks. This research will improve our ability to correctly and rapidly build many important software systems, including those relied upon every day.&lt;br/&gt;&lt;br/&gt;There are three main components of the project. First, this research will develop specifications to describe the high-level semantic properties of interest. The target dynamic language framework will be Ruby on Rails, one of the most popular web development frameworks today. Specifications to be explored include the Ruby on Rails analogs to type- and memory-safety; specifications supporting domain-specific languages; and specifications that are extensible to application-specific properties. Second, this research will develop a novel run-time wrapping and checking system to perform program analysis while a program is executing.  The resulting system will check program properties later than a typical static analysis, but significantly earlier than the last-moment dynamic checks that are the only option today. Finally, this research will explore ways to deploy symbolic execution to amplify run-time property checking even further. The developed technology will be evaluated on open-source Ruby on Rails applications. It is expected that the techniques developed can be applied to many other dynamic language frameworks as well.</AbstractNarration>
<MinAmdLetterDate>08/07/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/07/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319666</AwardID>
<Investigator>
<FirstName>Jeffrey</FirstName>
<LastName>Foster</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jeffrey S Foster</PI_FULL_NAME>
<EmailAddress>jfoster@cs.tufts.edu</EmailAddress>
<PI_PHON>6176272225</PI_PHON>
<NSF_ID>000095036</NSF_ID>
<StartDate>08/07/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Maryland, College Park</Name>
<CityName>College Park</CityName>
<ZipCode>207425141</ZipCode>
<PhoneNumber>3014056269</PhoneNumber>
<StreetAddress>3112 LEE BLDG 7809 Regents Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<StateCode>MD</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MD05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>790934285</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MARYLAND, COLLEGE PARK</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003256088</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Maryland College Park]]></Name>
<CityName>College Park</CityName>
<StateCode>MD</StateCode>
<ZipCode>207425141</ZipCode>
<StreetAddress><![CDATA[3112 Lee Bldg]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MD05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~412714</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>There has been tremendous success over the last 30 years in developing program analysis tools and techniques to find bugs early during software development. However, much of the research neglects a widespread, increasingly popular class of software: systems built on top of frameworks and written in dynamic languages.</p> <p>The major focus of this project was on developing a static type checking system for Ruby---a dynamic language---and more specifically, Ruby on Rails---a popular web application development framework for Ruby. Type checking works by analyzing program source code ahead of time to look for type errors, which are a particular class of bugs. By bringing type checking to Ruby, we hope to help programmers detect and eliminate such bugs early in the software development lifecycle.</p> <p>We developed RDL, a new system that brings both type checking and contracts---dynamically checked program properties---to Ruby. In RDL, types are specified by "annotations" that are actually run-time calls that store type information in a global table. Later on during run time, RDL can statically type check a method body against the types in that table. This design provides a highly effective tradeoff between purely dynamic and purely static type checking. On the one hand, metaprogramming code---which is common in Ruby on Rails, and creates classes and methods on-the-fly during program execution---is very challenging to analyze statically. But, in our experience, it is easy to create type annotations at run time for metaprogramming-generated code, and thus RDL can successfully type check code written using Ruby on Rails and similar frameworks. On the other hand, by statically analyzing whole method bodies, RDL catches type errors earlier than a purely dynamic system, and RDL can soundly reason about all possible execution paths within type checked methods.</p> <p>We have released RDL as an open source tool and advertised it to the Ruby community. We hope that many Ruby programmers, including those that professionally develop code with Ruby, will adopt RDL.</p> <p>In addition to our core work on type checking, we also developed two other related systems. First, we developed a prototype incremental computation system, which allows programs to recompute an output efficiently based on an input change. We believe incremental computation will prove useful to reasoning about dynamic languages. Second, we developed a system for exploring software configuration spaces. We believe this system could be useful for testing framework-based software.</p><br> <p>            Last Modified: 10/29/2017<br>      Modified by: Jeffrey&nbsp;S&nbsp;Foster</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ There has been tremendous success over the last 30 years in developing program analysis tools and techniques to find bugs early during software development. However, much of the research neglects a widespread, increasingly popular class of software: systems built on top of frameworks and written in dynamic languages.  The major focus of this project was on developing a static type checking system for Ruby---a dynamic language---and more specifically, Ruby on Rails---a popular web application development framework for Ruby. Type checking works by analyzing program source code ahead of time to look for type errors, which are a particular class of bugs. By bringing type checking to Ruby, we hope to help programmers detect and eliminate such bugs early in the software development lifecycle.  We developed RDL, a new system that brings both type checking and contracts---dynamically checked program properties---to Ruby. In RDL, types are specified by "annotations" that are actually run-time calls that store type information in a global table. Later on during run time, RDL can statically type check a method body against the types in that table. This design provides a highly effective tradeoff between purely dynamic and purely static type checking. On the one hand, metaprogramming code---which is common in Ruby on Rails, and creates classes and methods on-the-fly during program execution---is very challenging to analyze statically. But, in our experience, it is easy to create type annotations at run time for metaprogramming-generated code, and thus RDL can successfully type check code written using Ruby on Rails and similar frameworks. On the other hand, by statically analyzing whole method bodies, RDL catches type errors earlier than a purely dynamic system, and RDL can soundly reason about all possible execution paths within type checked methods.  We have released RDL as an open source tool and advertised it to the Ruby community. We hope that many Ruby programmers, including those that professionally develop code with Ruby, will adopt RDL.  In addition to our core work on type checking, we also developed two other related systems. First, we developed a prototype incremental computation system, which allows programs to recompute an output efficiently based on an input change. We believe incremental computation will prove useful to reasoning about dynamic languages. Second, we developed a system for exploring software configuration spaces. We believe this system could be useful for testing framework-based software.       Last Modified: 10/29/2017       Submitted by: Jeffrey S Foster]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
