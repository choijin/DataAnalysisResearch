<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>NeTS: Small: Liquid Networking</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Darleen Fisher</SignBlockName>
<PO_EMAI>dlfisher@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>One of the major advances in information technology infrastructures in the past decade is the use of server virtualization technology.  By decoupling the server software from the underlying physical hardware, virtualization helped open up new business models and bring about more efficient computing infrastructures.  With virtualization, (virtual) servers are freely able to be started and stopped on demand, and, through live VM migration, even change physical servers at run time without affecting the operating system or applications running on those servers.  This dynamic repositioning of servers is used to consolidate servers to save energy, balance load, perform planned maintenance, and optimize user performance (among other benefits).  The network, unfortunately, is still tied to the physical resources.&lt;br/&gt;&lt;br/&gt;This research project introduces liquid networking, which provides the ability to morph a network dynamically, much like migration provided dynamic morphing in the server space.   Supporting this raises many challenging research questions that this research project will address.  First, understanding how to provide primitives that efficiently transform the network without affecting the correct operation of the network is an important research challenge. Through implementation of multiple applications, a deep understanding of the limitations and capabilities of liquid networking will be explored. With it, new algorithms and tools will need to be developed. Second, understanding the impact future network technology has on liquid networking, namely software-defined networking, and the impact liquid networking will have on future networking technology is an equally important challenge that will be addressed.&lt;br/&gt;&lt;br/&gt;Broader Impacts: This project will open up an entirely new set of possibilities in the management of a computing infrastructure. With a liquid network, networks will have greater flexibility, lower IT costs, and better security. Additional important broader impacts for society resulting from this project are expected to include enhancing the curriculum of advanced graduate systems courses and enabling undergraduate students, underrepresented minorities and women to participate in the project through programs such as the Discovery Learning Apprentice (DLA) program run by the college of engineering at the University of Colorado, and the Colorado Diversity Initiative.</AbstractNarration>
<MinAmdLetterDate>08/30/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/30/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320389</AwardID>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Keller</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME>PhD</PI_SUFX_NAME>
<PI_FULL_NAME>Eric Keller</PI_FULL_NAME>
<EmailAddress>eric.keller@colorado.edu</EmailAddress>
<PI_PHON>3034927327</PI_PHON>
<NSF_ID>000601292</NSF_ID>
<StartDate>08/30/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Boulder</Name>
<CityName>Boulder</CityName>
<ZipCode>803031058</ZipCode>
<PhoneNumber>3034926221</PhoneNumber>
<StreetAddress>3100 Marine Street, Room 481</StreetAddress>
<StreetAddress2><![CDATA[572 UCB]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>007431505</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF COLORADO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007431505</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Colorado at Boulder]]></Name>
<CityName>Boulder</CityName>
<StateCode>CO</StateCode>
<ZipCode>803090572</ZipCode>
<StreetAddress><![CDATA[3100 Marine Street Room 479]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this proposal was to provide network operators with the tools to simplify management by leveraging an untapped potential in virtual networks &ndash; the dynamic movement of network devices.&nbsp; Toward that goal, we introduced <strong>liquid networking, </strong>which enables the network to dynamically morph, analogous to how live VM migration enabled dynamic morphing in the server space.</p> <p>As a first step for designing a correct network migration system, we developed a definition for transparency to mean that arbitrary tenant applications must continue to operate correctly despite the migration of virtual machines and switches.&nbsp; As in any network, these components can only make limited observations about the underlying network: (a) VMs observe packets they receive, (b) the controller can observe events (e.g., topology changes and packets the switch directs to the controller), and (c) the controller may query traffic statistics from the switches.&nbsp; To prevent disruptions during migration while being efficient we developed a "clone" algorithm to efficiently achieve transparency. Specifically, multiple clones of a virtual switch may run simultaneously, while still forwarding and measuring traffic correctly, even across changes to the rules.</p> <p>Demonstrating the power of this new primitive, we introduced a novel use case &ndash; data center defrag.&nbsp; In dynamic cloud environments, where tenants can come and go, and expand and contract, fragmentation of resources for that tenant occurs.&nbsp; This results in a reduction of performance for that tenant, and a reduction in efficient usage of resources for the cloud provider.&nbsp; We proposed a new network management primitive &ndash; network defragmentation &ndash; and a set of defragmentation heuristics to materialize it, which we demonstrate through the use of extensive simulations of typical cloud workloads and topologies, both improves network resource usage and network performance.</p> <p>Noting that middleboxes form a significant portion of a network, we extended liquid networking beyond virtual machines and OpenFlow switches, to also include middleboxes.&nbsp; The challenge here is dealing with the state contained in the middleboxes.&nbsp; Previous approaches leveraged state migration to enable elasticity, but were still left with problems such as downtime and only working for planned events (limiting agility).&nbsp; In response, we innovated a new architecture (Stateless Network Functions) that moves the state typically stored within a middlebox to a remote data store and demonstrated that we can achieve zero-packet loss when scaling or failing over, while not sacrificing any throughput in comparison to existing software based middleboxes. This new architecture gets to the root of the state management problem.</p> <p>In summary, we successfully enabled a dynamic network infrastructure based on migration primitives.&nbsp; With this, we are one step closer to a highly agile infrastructure across compute, network, and storage.&nbsp;&nbsp;</p><br> <p>            Last Modified: 01/15/2018<br>      Modified by: Eric&nbsp;Keller</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this proposal was to provide network operators with the tools to simplify management by leveraging an untapped potential in virtual networks &ndash; the dynamic movement of network devices.  Toward that goal, we introduced liquid networking, which enables the network to dynamically morph, analogous to how live VM migration enabled dynamic morphing in the server space.  As a first step for designing a correct network migration system, we developed a definition for transparency to mean that arbitrary tenant applications must continue to operate correctly despite the migration of virtual machines and switches.  As in any network, these components can only make limited observations about the underlying network: (a) VMs observe packets they receive, (b) the controller can observe events (e.g., topology changes and packets the switch directs to the controller), and (c) the controller may query traffic statistics from the switches.  To prevent disruptions during migration while being efficient we developed a "clone" algorithm to efficiently achieve transparency. Specifically, multiple clones of a virtual switch may run simultaneously, while still forwarding and measuring traffic correctly, even across changes to the rules.  Demonstrating the power of this new primitive, we introduced a novel use case &ndash; data center defrag.  In dynamic cloud environments, where tenants can come and go, and expand and contract, fragmentation of resources for that tenant occurs.  This results in a reduction of performance for that tenant, and a reduction in efficient usage of resources for the cloud provider.  We proposed a new network management primitive &ndash; network defragmentation &ndash; and a set of defragmentation heuristics to materialize it, which we demonstrate through the use of extensive simulations of typical cloud workloads and topologies, both improves network resource usage and network performance.  Noting that middleboxes form a significant portion of a network, we extended liquid networking beyond virtual machines and OpenFlow switches, to also include middleboxes.  The challenge here is dealing with the state contained in the middleboxes.  Previous approaches leveraged state migration to enable elasticity, but were still left with problems such as downtime and only working for planned events (limiting agility).  In response, we innovated a new architecture (Stateless Network Functions) that moves the state typically stored within a middlebox to a remote data store and demonstrated that we can achieve zero-packet loss when scaling or failing over, while not sacrificing any throughput in comparison to existing software based middleboxes. This new architecture gets to the root of the state management problem.  In summary, we successfully enabled a dynamic network infrastructure based on migration primitives.  With this, we are one step closer to a highly agile infrastructure across compute, network, and storage.         Last Modified: 01/15/2018       Submitted by: Eric Keller]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
