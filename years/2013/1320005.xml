<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: A Node OS for High-Performance Cloud Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>498299.00</AwardTotalIntnAmount>
<AwardAmount>498299</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project encompasses design, implementation, and experimental evaluation of an operating system (OS) targeted specifically for compute nodes in "cloud" data centers.  Cloud computing offers a chance to rethink OS design, as the goal is not a desktop system but rather an efficient building block for large clusters that support networked applications. The proposed OS acts as a "dumb" node in a cluster, taking commands from an external cluster manager and handing out resources to applications as appropriate. This, plus the use of relatively few devices and no graphical user interface, means it need only support a small fraction of traditional OS features. Instead the focus is on high performance with many cores, performance isolation, remote control, and tiers of service. &lt;br/&gt;&lt;br/&gt;The operating system mechanisms explored in this project have potential to improve data center efficiency, both by improving single-node efficiency, and by making it easier to leverage underutilized nodes for batch processing and large-scale data analysis without hindering latency-sensitive applications. For greater impact, the project will release the source code of the developed OS as free, open-source software. An earlier version of the operating system that focused on enabling many-core parallelism has already been released. The new OS has potential uses for education as well for exploring higher-level cluster OS ideas. In addition, the principal investigator will leverage Berkeley's SUPERB program to bring in underrepresented undergraduate students for an 8-week summer research experience.</AbstractNarration>
<MinAmdLetterDate>08/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/26/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320005</AwardID>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Brewer</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eric A Brewer</PI_FULL_NAME>
<EmailAddress>brewer@berkeley.edu</EmailAddress>
<PI_PHON>4154979046</PI_PHON>
<NSF_ID>000452332</NSF_ID>
<StartDate>08/26/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<StreetAddress2><![CDATA[1608 Fourth Street, Suite 220]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>124726725</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Berkeley]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>947045940</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~498299</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Traditionally, operating systems were designed around chips that had relatively few cores, and the primary job was to multiplex processes onto these few cores.&nbsp; Modern chips can have more than 100 cores and thus there is an opportunity for a new style of operating system (OS) that can expose these cores more directly and enable true parallelism by space-partitioning the cores in addition to the traditional approach of time slicing them.</p> <p>We developed a new open-source OS called Akaros that implements this approach and we were able to release several versions and demonstrate the benefits of focusing on cores in this way.</p> <p>One big advantage is that thread scheduling can be easily optimized for each application: it can time-slice its cores however it likes and independent from other application running on nearby cores.</p> <p>A second advantage is that this approach enables lightweight virtual machines.&nbsp; A space-partitioned set of cores can be thought of a as a "virtual multiprocessor" since that set is fully dedicated to the VM and exhibits true parallelism, which also using all of the support for virtualization built into modern instruction sets.</p> <p>Although the new OS is a research prototype, it can run real applications and we were ablt to demonstrate both performance benefits and the value of lightweight VMs.&nbsp; &nbsp;We were also able to release a 64-bit OS after starting with a 32-bit version.</p> <p>The details and source code are availagle at:&nbsp;https://akaros.org</p><br> <p>            Last Modified: 04/19/2021<br>      Modified by: Eric&nbsp;A&nbsp;Brewer</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Traditionally, operating systems were designed around chips that had relatively few cores, and the primary job was to multiplex processes onto these few cores.  Modern chips can have more than 100 cores and thus there is an opportunity for a new style of operating system (OS) that can expose these cores more directly and enable true parallelism by space-partitioning the cores in addition to the traditional approach of time slicing them.  We developed a new open-source OS called Akaros that implements this approach and we were able to release several versions and demonstrate the benefits of focusing on cores in this way.  One big advantage is that thread scheduling can be easily optimized for each application: it can time-slice its cores however it likes and independent from other application running on nearby cores.  A second advantage is that this approach enables lightweight virtual machines.  A space-partitioned set of cores can be thought of a as a "virtual multiprocessor" since that set is fully dedicated to the VM and exhibits true parallelism, which also using all of the support for virtualization built into modern instruction sets.  Although the new OS is a research prototype, it can run real applications and we were ablt to demonstrate both performance benefits and the value of lightweight VMs.   We were also able to release a 64-bit OS after starting with a 32-bit version.  The details and source code are availagle at: https://akaros.org       Last Modified: 04/19/2021       Submitted by: Eric A Brewer]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
