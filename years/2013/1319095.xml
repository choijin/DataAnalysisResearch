<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Collaborative Research: Transparent and Energy-Efficient Speculation on NUMA Architectures for Embedded Multiprocessor Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>424700.00</AwardTotalIntnAmount>
<AwardAmount>431700</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>High-end embedded systems are turning to multicore architectures to meet the performance, and performance/Watt, demands required for their applications.  Moreover, as the demand for more compute-intensive capabilities for embedded systems increases, these multicore architectures will evolve into many-core systems for improved performance or performance/area/Watt.  These systems are often organized as cluster-based Non-Uniform Memory Access (NUMA) architectures that provide the programmer with a shared-memory abstraction.  That is, simple cores are grouped into clusters sharing local interconnection and memory and these clusters are then replicated and interconnected using a scalable network-on-chip medium.  This project investigates one of the principal challenges presented by these emerging NUMA architectures for embedded systems: providing efficient, energy-effective, and convenient mechanisms for synchronization and communication. In particular, it proposes new solutions based on hardware support for speculative synchronization, and software support to make such speculation transparent.  Important metrics for measuring the effectiveness of the solutions include throughput, ease of use, system energy consumption, and architectural simplicity.&lt;br/&gt; &lt;br/&gt;Embedded systems are becoming ubiquitous over a broad range of applications, including smart phones, automotive systems, security, and other ambient intelligence systems.  Increasing computational demands have led to more sophisticated products and therefore increased challenges in meeting tight design constraints, particularly throughput/Watt.  Improvements to the way these systems communicate and synchronize data can have a substantial impact in terms of improved functionality, utility, and durability. The project is an international collaboration that combines PI expertise in Network-on-Chip architectures, embedded system design, and memory synchronization.  Broader impacts of the proposal include new course development, outreach to graduate and undergraduate women and under-represented minorities, and student exchanges between international institutions.</AbstractNarration>
<MinAmdLetterDate>09/12/2013</MinAmdLetterDate>
<MaxAmdLetterDate>04/13/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319095</AwardID>
<Investigator>
<FirstName>Ruth</FirstName>
<LastName>Bahar</LastName>
<PI_MID_INIT>I</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ruth I Bahar</PI_FULL_NAME>
<EmailAddress>iris_bahar@brown.edu</EmailAddress>
<PI_PHON>4018631430</PI_PHON>
<NSF_ID>000405249</NSF_ID>
<StartDate>09/12/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brown University</Name>
<CityName>Providence</CityName>
<ZipCode>029129002</ZipCode>
<PhoneNumber>4018632777</PhoneNumber>
<StreetAddress>BOX 1929</StreetAddress>
<StreetAddress2><![CDATA[350 Eddy Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<StateCode>RI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>RI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001785542</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BROWN UNIVERSITY IN PROVIDENCE IN THE STATE OF RHODE ISLAND AND PROVIDENCE PLANTATIONS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001785542</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Brown University]]></Name>
<CityName>Providence</CityName>
<StateCode>RI</StateCode>
<ZipCode>029129002</ZipCode>
<StreetAddress><![CDATA[182 Hope Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>RI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7298</Code>
<Text>International Research Collab</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>5920</Code>
<Text>ITALY</Text>
</ProgramReference>
<ProgramReference>
<Code>5979</Code>
<Text>Europe and Eurasia</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~424700</FUND_OBLG>
<FUND_OBLG>2015~7000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The principal objective of this project is to investigate how speculative hardware can improve energy consumption for applications in high-end multi-core embedded systems. Embedded systems, even high-end systems, will still be resource-constrained, so specialized hardware will play an important (but not exclusive) role in the synchronization mechanisms we develop.</p> <p>Many-core embedded systems often opt for a simple memory structure in place of standard caches that are managed by hardware and require cache-coherence. Hardware transactional memory is a speculative form of synchronization, which may be used instead of conventional lock-based approaches for simpler programmability and better performance. Traditionally, hardware transactional memory relies on the underlying cache-coherence protocol to synchronize memory accessesamong cores. The lack of cache coherence in these embedded system architectures adds new challenges and requires newly designed hardware speculation approach.</p> <p>We designed a new Hardware Transactional Memory (HTM) scheme for a many-core embedded architecture that does not rely on an underlying cache coherence protocol to manage read/write memory conflicts. Since embeddedsystems are resource-constrained, our transactional memory design relies on specialized yet lightweight hardware that is distrubuted throughout the memory system.&nbsp; We show that Hardware transactional memory can be implemented efficiently for many-coreembedded platforms, even if the system does not have an underlying cachecoherencyprotocol. Our HTM scheme can achieve significant performance andenergy improvements over traditional lock-based schemes.</p> <p>Memory allocation is a pervasive and critically important operation in mult-processor systems. Conventional dynamic memory managers are typically not compatible with hardware transactional memory. As a result, memory allocation/deallocation calls to must take place outside transactions, complicating programming, and requiring static over-allocation of memory.&nbsp; We explored a way of making memory allocation more transaction-friendly.&nbsp;&nbsp;We successfully implemented a robust and flexible HW/SW scheme that allows memory to be allocated dynamically within a many-core embedded system architecture.&nbsp; Specifically, we developed thrifty-malloc, a transaction-friendly dynamic memory manager. Thrifty-malloc is easy to deploy and configure for non-expert programmers, yet provides good performance with low memory overhead for highly-parallel embedded applications running on many-core architectures. Our results demonstrate that our solutionallowed more than 2 times execution speedup on certain applications, and could alsoreduce the pressure on the heap by nearly half, compared to allocating memory outsideof transactions.</p> <p>Operating at the lowest possible voltage has many advantages for power and energy ofa system. However, dynamic fluctuations may cause the system to experience faultsdue to timing errors when operating at the &ldquo;critical operating point&rdquo; (COP).&nbsp; We explored the use of our HTM framework as a means for enabling error recovery for systems running at the COP.&nbsp;&nbsp;Our error-recovery scheme integrates hardware and software to monitor for errors, dynamically adjusts the COP, and utilizes HTM for lightweight checkpointing and rollbackfor error recovery. We also extended this work to handle sporadic errors, which are less frequent.&nbsp;&nbsp;Using our HTM infrastructure to facilitate full recovery from timing-induced errors is clean and simple and can offer over 50% energy savings compared to using conservative voltage margins.&nbsp;</p><br> <p>            Last Modified: 12/07/2017<br>      Modified by: Ruth&nbsp;I&nbsp;Bahar</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512620527163_Architecture--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512620527163_Architecture--rgov-800width.jpg" title="The PULP System-on-Chip Architecture"><img src="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512620527163_Architecture--rgov-66x44.jpg" alt="The PULP System-on-Chip Architecture"></a> <div class="imageCaptionContainer"> <div class="imageCaption">PULP is a scalable parallel computing fabric that includes a parametric number of processing elements (PEs) consisting of an optimized RISC microarchitecture. To avoid memory coherency overheads private data caches are replaced by a shared, multi-banked tightlycoupled data memory (TCD.M)</div> <div class="imageCredit">Dimitra Papagiannopoulou, Andrea Marongiu, Tali Moreshet, Maurice Herlihy, R. Iris Bahar, ?Edge-TM:  Exploiting Transactional Memory for Error Tolerance and Energy Efficiency,? ACM Transactions on Embedded Computing Systems (TECS). Oct. 2017</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Ruth&nbsp;I&nbsp;Bahar</div> <div class="imageTitle">The PULP System-on-Chip Architecture</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512622732086_Thrifty-malloc-flow--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512622732086_Thrifty-malloc-flow--rgov-800width.jpg" title="The memory allocation flow inside a transaction"><img src="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512622732086_Thrifty-malloc-flow--rgov-66x44.jpg" alt="The memory allocation flow inside a transaction"></a> <div class="imageCaptionContainer"> <div class="imageCaption">We choose to build a special software primitiveon top of START TRANSACTION(), whichwe indicate as a dedicated transaction.  It is responsible for reallocating more memory before re-executing the transaction.</div> <div class="imageCredit">T. Carle, et al., "Thrify-malloc:  A HW/SW Codesign for the Dynamic Management of Hardware Transactional Memory in Embedded Multicore Systems," CASES, Oct., 2016</div> <div class="imageSubmitted">Ruth&nbsp;I&nbsp;Bahar</div> <div class="imageTitle">The memory allocation flow inside a transaction</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512659251608_Architecture-new--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512659251608_Architecture-new--rgov-800width.jpg" title="Extensions to the PULP cluster for error detection."><img src="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512659251608_Architecture-new--rgov-66x44.jpg" alt="Extensions to the PULP cluster for error detection."></a> <div class="imageCaptionContainer"> <div class="imageCaption">We assume that each core is equipped with runtime error-detection circuitry, such as error-detection sequential (EDS).  When the EDS detects an error, it generates an interrupt to the core that implements the HTM rollback mechanism.</div> <div class="imageCredit">Dimitra Papagiannopoulou, Andrea Marongiu, Tali Moreshet, Maurice Herlihy, R. Iris Bahar, ?Edge-TM:  Exploiting Transactional Memory for Error Tolerance and Energy Efficiency,? ACM Transactions on Embedded Computing Systems (TECS). Oct. 2017</div> <div class="imageSubmitted">Ruth&nbsp;I&nbsp;Bahar</div> <div class="imageTitle">Extensions to the PULP cluster for error detection.</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512660409600_Distributed-logs--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512660409600_Distributed-logs--rgov-800width.jpg" title="Distributed per-address log scheme for M banks and N cores."><img src="/por/images/Reports/POR/2017/1319095/1319095_10279276_1512660409600_Distributed-logs--rgov-66x44.jpg" alt="Distributed per-address log scheme for M banks and N cores."></a> <div class="imageCaptionContainer"> <div class="imageCaption">Distributed per-address logs are used to save backups of the original values of data that are written during transactions, so that they can be recovered in case of aborts.  Each bank's Transaction Support Modules (TSM) monitors transactional accesses to the bank and manages the cores' logs.</div> <div class="imageCredit">Dimitra Papagiannopouou, Tali Moreshet, R. Iris Bahar, Andrea Morongiou, Luca Benini, Maurice Herlihy, ?Speculative Synchronization for Coherence-free Embedded NUMA Architectures,? International Conference on Embedded Computer Systems:  Architectures, Modeling and Simulation (SAMOS), July 2014</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Ruth&nbsp;I&nbsp;Bahar</div> <div class="imageTitle">Distributed per-address log scheme for M banks and N cores.</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The principal objective of this project is to investigate how speculative hardware can improve energy consumption for applications in high-end multi-core embedded systems. Embedded systems, even high-end systems, will still be resource-constrained, so specialized hardware will play an important (but not exclusive) role in the synchronization mechanisms we develop.  Many-core embedded systems often opt for a simple memory structure in place of standard caches that are managed by hardware and require cache-coherence. Hardware transactional memory is a speculative form of synchronization, which may be used instead of conventional lock-based approaches for simpler programmability and better performance. Traditionally, hardware transactional memory relies on the underlying cache-coherence protocol to synchronize memory accessesamong cores. The lack of cache coherence in these embedded system architectures adds new challenges and requires newly designed hardware speculation approach.  We designed a new Hardware Transactional Memory (HTM) scheme for a many-core embedded architecture that does not rely on an underlying cache coherence protocol to manage read/write memory conflicts. Since embeddedsystems are resource-constrained, our transactional memory design relies on specialized yet lightweight hardware that is distrubuted throughout the memory system.  We show that Hardware transactional memory can be implemented efficiently for many-coreembedded platforms, even if the system does not have an underlying cachecoherencyprotocol. Our HTM scheme can achieve significant performance andenergy improvements over traditional lock-based schemes.  Memory allocation is a pervasive and critically important operation in mult-processor systems. Conventional dynamic memory managers are typically not compatible with hardware transactional memory. As a result, memory allocation/deallocation calls to must take place outside transactions, complicating programming, and requiring static over-allocation of memory.  We explored a way of making memory allocation more transaction-friendly.  We successfully implemented a robust and flexible HW/SW scheme that allows memory to be allocated dynamically within a many-core embedded system architecture.  Specifically, we developed thrifty-malloc, a transaction-friendly dynamic memory manager. Thrifty-malloc is easy to deploy and configure for non-expert programmers, yet provides good performance with low memory overhead for highly-parallel embedded applications running on many-core architectures. Our results demonstrate that our solutionallowed more than 2 times execution speedup on certain applications, and could alsoreduce the pressure on the heap by nearly half, compared to allocating memory outsideof transactions.  Operating at the lowest possible voltage has many advantages for power and energy ofa system. However, dynamic fluctuations may cause the system to experience faultsdue to timing errors when operating at the "critical operating point" (COP).  We explored the use of our HTM framework as a means for enabling error recovery for systems running at the COP.  Our error-recovery scheme integrates hardware and software to monitor for errors, dynamically adjusts the COP, and utilizes HTM for lightweight checkpointing and rollbackfor error recovery. We also extended this work to handle sporadic errors, which are less frequent.  Using our HTM infrastructure to facilitate full recovery from timing-induced errors is clean and simple and can offer over 50% energy savings compared to using conservative voltage margins.        Last Modified: 12/07/2017       Submitted by: Ruth I Bahar]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
