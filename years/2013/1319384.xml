<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Inference and Checking of Context-sensitive Pluggable Types</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>315058.00</AwardTotalIntnAmount>
<AwardAmount>315058</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Pluggable types allow programmers to extend a language's type system to enhance program correctness and program security. Unfortunately, pluggable types require annotations in the program, and therefore, place a burden on programmers. This annotation burden is one reason why pluggable types have not been widely adopted in practice. This project will develop techniques that will allow programmers to realize the benefits of pluggable types without incurring the annotation burden. One concrete application (and thrust of the project) tackles security and privacy of Android apps.&lt;br/&gt;&lt;br/&gt;Pluggable types will become more important, as JSR 308 (Type Annotation Specification) becomes part of Java 8 in 2014. The PI has developed a framework for inference and checking of context-sensitive pluggable types. The framework is instantiated to nontrivial systems and has inferred and checked close to a million lines of Java code in a modular and compositional manner. The key innovations in the framework are (i) support for context sensitivity, which allows instantiation to precise type systems such as Purity and Ownership, and (ii) a scalable inference engine, which allows type inference with zero or very small number of programmer annotations. The key insight is that viewpoint adaptation, a concept from Universe types, elegantly enables context sensitivity, both in the specification of the type system and in the type inference analysis. The project will advance the framework towards applications in concurrency, sustainable computing and security. Notably, the project will leverage the framework towards modular and compositional information flow analysis for Android; this will help address standing issues such as (i) the large Android library, and (ii) implicit information flow.</AbstractNarration>
<MinAmdLetterDate>07/29/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319384</AwardID>
<Investigator>
<FirstName>Ana</FirstName>
<LastName>Milanova</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ana Milanova</PI_FULL_NAME>
<EmailAddress>milanova@cs.rpi.edu</EmailAddress>
<PI_PHON>5182766887</PI_PHON>
<NSF_ID>000200571</NSF_ID>
<StartDate>07/29/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Rensselaer Polytechnic Institute</Name>
<CityName>Troy</CityName>
<ZipCode>121803522</ZipCode>
<PhoneNumber>5182766000</PhoneNumber>
<StreetAddress>110 8TH ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY20</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002430742</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RENSSELAER POLYTECHNIC INSTITUTE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002430742</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[rensselaer Polytechnic Institute]]></Name>
<CityName>Troy</CityName>
<StateCode>NY</StateCode>
<ZipCode>121803522</ZipCode>
<StreetAddress><![CDATA[110 8th Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY20</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~315058</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Static types (e.g., List&lt;Integer&gt;, boolean) play important roles in programming languages and software development. They provide program documentation and improve program correctness and robustness by catching errors early (i.e., before program execution). Many programming languages, including Java, and C++ benefit from static types. Other languages, e.g., Python and JavaScript are dynamically typed, which facilitates initial prototyping, but forgoes important advantages of static types.&nbsp;</p> <p>In terms of intellectual merits, this project has developed a framework for the inference and checking of pluggable types. The framework enables specifying a type system that checks certain property (e.g., a secret value never flows to a public output, or a read-only reference is never modified).&nbsp; Given a program as input, the framework &ldquo;plugs in&rdquo; the type system, infers appropriate type annotations, and either asserts that the property holds, or reports a violation of the property. A type system can be &ldquo;plugged in&rdquo; on top of a statically-typed or a dynamically-typed program. The project has explored multiple applications of the framework for pluggable types, and has developed new type systems as instantiations of the framework. Applications include ownership type inference, a longstanding problem in the ownership types community. Another application is taint analysis for Android; our pluggable types based approach, significantly different from other approaches to taint analysis of Android, revealed hundreds of privacy leaks in popular Android apps.</p> <p>In terms of broader impacts, the project has produced open source software (our framework and type systems are publicly available) and new graduate-level courses (most recently, the PI has developed a course on Program Analysis at Rensselaer based in part on the outcomes of this project). The project has supported 3 PhD students, among them one female and one African American.</p> <p>In summary, this project developed a framework for pluggable types, and applied the framework in different domains such as Android security and computation outsourcing. This work paved the way for our new project on computation outsourcing, funded by the NSF Secure and Trustworthy Computing (SaTC) program. The project resulted in approximately 14 conference publications, and has supported, fully or in part, three PhD students (two have graduated and one is expected to graduate in 2020).</p><br> <p>            Last Modified: 12/08/2019<br>      Modified by: Ana&nbsp;Milanova</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Static types (e.g., List&lt;Integer&gt;, boolean) play important roles in programming languages and software development. They provide program documentation and improve program correctness and robustness by catching errors early (i.e., before program execution). Many programming languages, including Java, and C++ benefit from static types. Other languages, e.g., Python and JavaScript are dynamically typed, which facilitates initial prototyping, but forgoes important advantages of static types.   In terms of intellectual merits, this project has developed a framework for the inference and checking of pluggable types. The framework enables specifying a type system that checks certain property (e.g., a secret value never flows to a public output, or a read-only reference is never modified).  Given a program as input, the framework "plugs in" the type system, infers appropriate type annotations, and either asserts that the property holds, or reports a violation of the property. A type system can be "plugged in" on top of a statically-typed or a dynamically-typed program. The project has explored multiple applications of the framework for pluggable types, and has developed new type systems as instantiations of the framework. Applications include ownership type inference, a longstanding problem in the ownership types community. Another application is taint analysis for Android; our pluggable types based approach, significantly different from other approaches to taint analysis of Android, revealed hundreds of privacy leaks in popular Android apps.  In terms of broader impacts, the project has produced open source software (our framework and type systems are publicly available) and new graduate-level courses (most recently, the PI has developed a course on Program Analysis at Rensselaer based in part on the outcomes of this project). The project has supported 3 PhD students, among them one female and one African American.  In summary, this project developed a framework for pluggable types, and applied the framework in different domains such as Android security and computation outsourcing. This work paved the way for our new project on computation outsourcing, funded by the NSF Secure and Trustworthy Computing (SaTC) program. The project resulted in approximately 14 conference publications, and has supported, fully or in part, three PhD students (two have graduated and one is expected to graduate in 2020).       Last Modified: 12/08/2019       Submitted by: Ana Milanova]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
