<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Collaborative Research:   FRP for Real</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>850000.00</AwardTotalIntnAmount>
<AwardAmount>866000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Functional Reactive Programming, or FRP, is a declarative programming paradigm based on two fundamental abstractions: a continuous (functional) modeling of time-varying behaviors, and a discrete (reactive) calculus of user and process interaction.  FRP provides a novel and effective approach to solving problems in which there is a combination of both continuous and discrete entities such as found in computer animation, robotics, control systems, GUIs, and interactive multimedia.  FRP?s broader impact is seen in its adoption by several other research projects, and its use in several applications different from those at Yale.  The proposed work will strengthen these existing projects, and further broaden the applicability of FRP.  The proposed improvements in implementation will make FRP more suitable for compute-intensive applications, such as interactive 3D graphics and real-time audio processing.  It will also benefit the modeling and simulation community, which often uses declarative approaches to specifying and solving problems.&lt;br/&gt; &lt;br/&gt;Previous research at Yale helped to establish the foundations of FRP, and demonstrated its utility in several application domains.  Despite this preliminary success, more work is needed to make "FRP for real."  That is, to develop a system that facilitates writing natural and concise descriptions of reactive behaviors, responds well enough to satisfy most common real-time constraints, reifies real-world objects as first-class signal functions, runs efficiently through program optimization and parallel execution on multicore architectures, and has been validated in a real-world application domain, specifically audio signal processing.  The proposed research will advance the overall FRP methodology in three areas: Language Design (type system extensions to capture resource constraints, a redesign of the mediation between the discrete and continuous, and a better syntax to capture the essence of FRP); Language Implementation (program optimizations, multicore execution, asynchronous sub-processes); and Validation and Testing (with a focus on real-time audio signal processing).</AbstractNarration>
<MinAmdLetterDate>09/17/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/19/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1302327</AwardID>
<Investigator>
<FirstName>Paul</FirstName>
<LastName>Hudak</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Paul Hudak</PI_FULL_NAME>
<EmailAddress>paul.hudak@yale.edu</EmailAddress>
<PI_PHON>2034324715</PI_PHON>
<NSF_ID>000227990</NSF_ID>
<StartDate>09/17/2013</StartDate>
<EndDate>06/19/2015</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Ruzica</FirstName>
<LastName>Piskac</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ruzica Piskac</PI_FULL_NAME>
<EmailAddress>ruzica.piskac@yale.edu</EmailAddress>
<PI_PHON>2034328001</PI_PHON>
<NSF_ID>000655841</NSF_ID>
<StartDate>06/19/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Yale University</Name>
<CityName>New Haven</CityName>
<ZipCode>065208327</ZipCode>
<PhoneNumber>2037854689</PhoneNumber>
<StreetAddress>Office of Sponsored Projects</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 208327]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CT03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>043207562</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>YALE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>043207562</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Yale University]]></Name>
<CityName>New Haven</CityName>
<StateCode>CT</StateCode>
<ZipCode>065208047</ZipCode>
<StreetAddress><![CDATA[47 College Street Suite 203]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CT03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~850000</FUND_OBLG>
<FUND_OBLG>2015~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software is continuously interacting with the world around us,<br />modeling the many complexities of reactive systems our world. In order<br />to build this type of software reliably, programmers require tools and<br />languages, such as Functional Reactive Programming, that are designed<br />specifically for such reactive systems. Functional Reactive<br />Programming, or FRP, is a declarative programming paradigm based on<br />two fundamental abstractions: a continuous (functional) modeling of<br />time-varying behaviors, and a discrete (reactive) calculus of user and<br />process interaction.<br /><br />Without formal foundations for reactive programming, software will<br />continue to fail in the spectacular ways that costs both capital and<br />human lives. Because FRP is a critical direction in the development of<br />modern reactive systems, this work has made a significant impact on<br />the future of safe reactive systems design.<br /><br />In order to improve the language design of FRP, the work done on this<br />grant introduced a new specification language, called Temporal Stream<br />Logic, that can be used to describe reactive systems. We used Temporal<br />Stream Logic to synthesize complex systems that were previously<br />out-of-scope for existing tools, such as an autonomous vehicle<br />controller that is formally guaranteed to correctly implement the<br />specified driving behavior.<br /><br />This project also explored the use of Temporal Stream Logic to<br />synthesize FRP code that can be run on an FPGA - significantly<br />improving the runtime performance of FRP systems. In order to further<br />improve the performance of FRP program code, this project additionally<br />looked to various type systems and language design extensions. In<br />particular, the work of this project helped to better support<br />asynchrony in FRP, as well as take better advantage of optimizations<br />such as Causal Commutative Arrows.<br /><br />One of the application domains this project focused on was computer<br />music - a notoriously challenging domain for reactive systems, which<br />requires continuous and discrete interactions to be processed in real<br />time. This project built the open source computer music library,<br />Euterpea, as well as began the first exploration of programming by<br />example for digital signal processing.<br /><br />These results have been published in papers that have appeared in<br />major publication venues (PLDI, CAV, OOPSLA, ICFP). In addition this<br />work has also resulted in the publication of a textbook on FRP "The<br />Haskell School of Music: From Signals to Symphonies". Results from<br />this project has additionally been presented in a number of colloquium<br />and symposium speaking events.<br /><br />In addition, we maintain a repository of software tools and benchmarks<br />that have been developed during the course of this project. These are<br />publicly available under non-restrictive open source licenses. Moreover, <br />we provide a synthesis tool chain to automatically generate FRP program<br />from specifications in this language.<br /><br />Several of the synthesis benchmarks that we have developed during this<br />project are being reused by other researchers in the reactive<br />synthesis community. In addition, we contributed our benchmarks that<br />were generated by our FRP synthesis tool to the SYNT benchmark<br />suite. These benchmarks play a major role in evaluating reactive<br />synthesis tools and driving their development.<br /><br />The project has provided training opportunities for three PhD students<br />and two postdoctoral students who conducted research related to the<br />project. Two of these PhD students have successfully graduated during<br />the project duration and have subsequently found employment in<br />research institutes and the software industry. The third PhD student<br />is on track to complete his thesis shortly.<br /><br />Eight undergraduates and four high school students have gained<br />research experience by contributing to this project. Six of these<br />undergraduates completed REUs with funding from this grant, and two<br />completed senior projects as extensions of this project's work. Three<br />of these undergraduates were females, underscoring the PI's commitment<br />to increasing the diversity in computer science through this<br />project. We have published a paper based on these interactions<br />specifically addressing pedagogical techniques of involving more<br />undergraduates in computer science research.</p><br> <p>            Last Modified: 01/09/2020<br>      Modified by: Ruzica&nbsp;Piskac</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software is continuously interacting with the world around us, modeling the many complexities of reactive systems our world. In order to build this type of software reliably, programmers require tools and languages, such as Functional Reactive Programming, that are designed specifically for such reactive systems. Functional Reactive Programming, or FRP, is a declarative programming paradigm based on two fundamental abstractions: a continuous (functional) modeling of time-varying behaviors, and a discrete (reactive) calculus of user and process interaction.  Without formal foundations for reactive programming, software will continue to fail in the spectacular ways that costs both capital and human lives. Because FRP is a critical direction in the development of modern reactive systems, this work has made a significant impact on the future of safe reactive systems design.  In order to improve the language design of FRP, the work done on this grant introduced a new specification language, called Temporal Stream Logic, that can be used to describe reactive systems. We used Temporal Stream Logic to synthesize complex systems that were previously out-of-scope for existing tools, such as an autonomous vehicle controller that is formally guaranteed to correctly implement the specified driving behavior.  This project also explored the use of Temporal Stream Logic to synthesize FRP code that can be run on an FPGA - significantly improving the runtime performance of FRP systems. In order to further improve the performance of FRP program code, this project additionally looked to various type systems and language design extensions. In particular, the work of this project helped to better support asynchrony in FRP, as well as take better advantage of optimizations such as Causal Commutative Arrows.  One of the application domains this project focused on was computer music - a notoriously challenging domain for reactive systems, which requires continuous and discrete interactions to be processed in real time. This project built the open source computer music library, Euterpea, as well as began the first exploration of programming by example for digital signal processing.  These results have been published in papers that have appeared in major publication venues (PLDI, CAV, OOPSLA, ICFP). In addition this work has also resulted in the publication of a textbook on FRP "The Haskell School of Music: From Signals to Symphonies". Results from this project has additionally been presented in a number of colloquium and symposium speaking events.  In addition, we maintain a repository of software tools and benchmarks that have been developed during the course of this project. These are publicly available under non-restrictive open source licenses. Moreover,  we provide a synthesis tool chain to automatically generate FRP program from specifications in this language.  Several of the synthesis benchmarks that we have developed during this project are being reused by other researchers in the reactive synthesis community. In addition, we contributed our benchmarks that were generated by our FRP synthesis tool to the SYNT benchmark suite. These benchmarks play a major role in evaluating reactive synthesis tools and driving their development.  The project has provided training opportunities for three PhD students and two postdoctoral students who conducted research related to the project. Two of these PhD students have successfully graduated during the project duration and have subsequently found employment in research institutes and the software industry. The third PhD student is on track to complete his thesis shortly.  Eight undergraduates and four high school students have gained research experience by contributing to this project. Six of these undergraduates completed REUs with funding from this grant, and two completed senior projects as extensions of this project's work. Three of these undergraduates were females, underscoring the PI's commitment to increasing the diversity in computer science through this project. We have published a paper based on these interactions specifically addressing pedagogical techniques of involving more undergraduates in computer science research.       Last Modified: 01/09/2020       Submitted by: Ruzica Piskac]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
