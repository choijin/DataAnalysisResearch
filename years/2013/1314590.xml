<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: AF: Large: Collaborative Research: Parallelism without Concurrency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2013</AwardEffectiveDate>
<AwardExpirationDate>06/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>999458.00</AwardTotalIntnAmount>
<AwardAmount>999458</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The widespread deployment of parallel machines --- from multicores to supercomputers --- has made it critical to develop simple approaches to programming them.  Significant progress has been made in simplifying parallel programming by developing programming models to support parallelism without concurrency, that is, without the nondeterminacies in the logic of programs caused by the relative and nondeterministic timing of communicating processes.  Yet most parallel programs in practice are concurrent, and hence, nondeterministic, leading to code that can only be programmed and understood by experts.  This research project aims to understand how parallel computers can be made easier to use by the vast majority of programmers by developing software technology that enables deterministic parallel computing.&lt;br/&gt;&lt;br/&gt;The project takes a holistic view of the problem from the key perspectives of programming linguistics, software systems, algorithmic analysis, and absolute performance.  It acknowledges the reality that parallel programming cannot be fully deterministic at every level of abstraction.  It is pursuing three key strategies for dealing with concurrency: encapsulating concurrency so that it is hidden by layered abstractions at appropriate abstraction levels, avoiding concurrency by restructuring programs to employ deterministic approaches, and managing concurrency when it is impractical to either encapsulate or avoid concurrency completely. Among the specific techniques being studied are commutative building blocks, deterministic nonassociative reducers, deterministic pipelined parallelism, deterministic interfaces, and generalized race detection for detecting invariant races.  The project is developing open-source libraries, tools, and runtime extensions integrated into a multicore-software platform, as well as a problem-based benchmark suite to compare approaches.</AbstractNarration>
<MinAmdLetterDate>06/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/11/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1314590</AwardID>
<Investigator>
<FirstName>Guy</FirstName>
<LastName>Blelloch</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Guy E Blelloch</PI_FULL_NAME>
<EmailAddress>guyb@cs.cmu.edu</EmailAddress>
<PI_PHON>4122686245</PI_PHON>
<NSF_ID>000196851</NSF_ID>
<StartDate>06/26/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133890</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7934</Code>
<Text>PARAL/DISTRIBUTED ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~499843</FUND_OBLG>
<FUND_OBLG>2014~499615</FUND_OBLG>
<FUND_OBLG>2015~0</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The high-level goal of the project was simplify the process of developing efficient parallel algorithms that run on modern multicore machines. &nbsp;We had noted that there are many issues that can make developing parallel algorithms more complicated than tradition sequential algorithms. &nbsp;One of the most challenging is that parallel/concurrent algorithms can be non-deterministic, returning different results, or running in different orders at different times. &nbsp;This can make it difficult to reason about, compose, debug, and reuse parallel algorithms. &nbsp;The focus of this grant work was on developing techniques that make programming parallel algorithms deterministic. &nbsp;The grant was joint with MIT. &nbsp;This summary focuses on the CMU portion, although some is in common.<br />To this end we developed several general techniques and many parallel algorithms based on them. &nbsp;For almost all of these we developed both theoretical results in terms of analyzing the algorithms, and practical techniques as well as code. &nbsp;One technique we developed was an approach to analyze the dependence structure of sequential algorithms to be able to show that they are in fact parallel, if false dependences are ignored. &nbsp;Based on this approach we developed efficient and simple parallel algorithms for several problems including maximum independent set, maximum matching, random permutations, tree contraction, list contraction, sorting, graph connectivity, Delaunay triangulation, fixed-dimension linear programming, nearest neighbors, and strongly connected components in a graph. &nbsp; Importantly all these algorithms are deterministic since they do the same deterministic operations as performed by the sequential algorithm.We published several papers on this topic and our code is available on github.<br />Another line of research pursued by the grant was on deterministic data structures for maintaining balanced search trees. &nbsp;Most previous work had been on parallel search trees has been on highly non-deterministic concurrent search trees. &nbsp;In this work we developed purely functional (no side effects) trees and developed efficient algorithms for a wide set of operations on such trees, including multi-insertion, intersection, union, difference, map, reduce, range queries, filter and many more. &nbsp;All operations are fully deterministic---e.g. always returning the same output trees when applied to the same input trees. &nbsp;We also support augmentation on the trees that allow keeping aggregates. &nbsp;We developed both theoretical bounds on the cost of the operations and implemented all the ideas. &nbsp;We have released the implementation as the PAM library which is available on github. &nbsp;We published four papers on the topic.<br />Finally we spent significant effort developing interfaces for efficiently developing parallel graph algorithms. &nbsp;This work started with developing Ligra (Light-weight Graph interface), and then continued with developing a version that supports compressed graphs (Ligra++), extending it to support bucketing (Julienne) and dynamic graph updates. &nbsp;Ligra has been widely used and cited. &nbsp;Using the interfaces and our other parallel tools we have developed over 20 different parallel graph algorithms and made them available as part of the Graph-Based-Benchmark-Suite (GBBS). &nbsp;In many cases our algorithms are the fastest available for multicore machines, and in some cases any machine. &nbsp; &nbsp; In all cases we have theoretical bounds on their costs. &nbsp; &nbsp;Although not all algorithms are fully deterministic, the non-determinism is encapsulated.<br />In addition to the research we developed course material for an undergraduate course we teach on parallel algorithms, we ran two tutorials on materials developed in the grant (Ligra and PAM),we published over 20 papers, trained several students, and three students at CMU got PhDs at least partially funded by the grant (one who won the ACM Dissertation Award). &nbsp; The research has had broad impact in developing techniques and code that are now being used elsewhere. &nbsp; &nbsp;The intellectual merrit includes the specific methods developed, and many ideas used in the algorithms.</p><br> <p>            Last Modified: 07/28/2020<br>      Modified by: Guy&nbsp;E&nbsp;Blelloch</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The high-level goal of the project was simplify the process of developing efficient parallel algorithms that run on modern multicore machines.  We had noted that there are many issues that can make developing parallel algorithms more complicated than tradition sequential algorithms.  One of the most challenging is that parallel/concurrent algorithms can be non-deterministic, returning different results, or running in different orders at different times.  This can make it difficult to reason about, compose, debug, and reuse parallel algorithms.  The focus of this grant work was on developing techniques that make programming parallel algorithms deterministic.  The grant was joint with MIT.  This summary focuses on the CMU portion, although some is in common. To this end we developed several general techniques and many parallel algorithms based on them.  For almost all of these we developed both theoretical results in terms of analyzing the algorithms, and practical techniques as well as code.  One technique we developed was an approach to analyze the dependence structure of sequential algorithms to be able to show that they are in fact parallel, if false dependences are ignored.  Based on this approach we developed efficient and simple parallel algorithms for several problems including maximum independent set, maximum matching, random permutations, tree contraction, list contraction, sorting, graph connectivity, Delaunay triangulation, fixed-dimension linear programming, nearest neighbors, and strongly connected components in a graph.   Importantly all these algorithms are deterministic since they do the same deterministic operations as performed by the sequential algorithm.We published several papers on this topic and our code is available on github. Another line of research pursued by the grant was on deterministic data structures for maintaining balanced search trees.  Most previous work had been on parallel search trees has been on highly non-deterministic concurrent search trees.  In this work we developed purely functional (no side effects) trees and developed efficient algorithms for a wide set of operations on such trees, including multi-insertion, intersection, union, difference, map, reduce, range queries, filter and many more.  All operations are fully deterministic---e.g. always returning the same output trees when applied to the same input trees.  We also support augmentation on the trees that allow keeping aggregates.  We developed both theoretical bounds on the cost of the operations and implemented all the ideas.  We have released the implementation as the PAM library which is available on github.  We published four papers on the topic. Finally we spent significant effort developing interfaces for efficiently developing parallel graph algorithms.  This work started with developing Ligra (Light-weight Graph interface), and then continued with developing a version that supports compressed graphs (Ligra++), extending it to support bucketing (Julienne) and dynamic graph updates.  Ligra has been widely used and cited.  Using the interfaces and our other parallel tools we have developed over 20 different parallel graph algorithms and made them available as part of the Graph-Based-Benchmark-Suite (GBBS).  In many cases our algorithms are the fastest available for multicore machines, and in some cases any machine.     In all cases we have theoretical bounds on their costs.    Although not all algorithms are fully deterministic, the non-determinism is encapsulated. In addition to the research we developed course material for an undergraduate course we teach on parallel algorithms, we ran two tutorials on materials developed in the grant (Ligra and PAM),we published over 20 papers, trained several students, and three students at CMU got PhDs at least partially funded by the grant (one who won the ACM Dissertation Award).   The research has had broad impact in developing techniques and code that are now being used elsewhere.    The intellectual merrit includes the specific methods developed, and many ideas used in the algorithms.       Last Modified: 07/28/2020       Submitted by: Guy E Blelloch]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
