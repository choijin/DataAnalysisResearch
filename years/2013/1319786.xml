<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: CDSChecker: Model-Checking Concurrent Data Structures under the C11/C++11 Memory Model</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>399997.00</AwardTotalIntnAmount>
<AwardAmount>399997</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Society has long relied on increasing computing power to drive&lt;br/&gt;technological development. Continuing this trend in the multi-core era&lt;br/&gt;will require a large scale migration to parallel software.  As an&lt;br/&gt;acknowledgment of the new importance of parallelism in software&lt;br/&gt;development, the 2011 C and C++ standards extended C and C++ with&lt;br/&gt;language support for low-level atomic operations to allow developers&lt;br/&gt;to write portable efficient concurrent data structures.&lt;br/&gt;Unfortunately, implementing concurrent data structures is extremely&lt;br/&gt;difficult to do correctly. Despite the difficulties, we expect that&lt;br/&gt;the potential performance benefits will lure many developers, both&lt;br/&gt;experts and others, to attempt to develop customized concurrent data&lt;br/&gt;structures.  Without tool support, this will inevitably lead to&lt;br/&gt;potentially costly failures in deployed software.&lt;br/&gt;&lt;br/&gt;This project will explore techniques for efficiently model checking&lt;br/&gt;concurrent data structures under the C/C++ memory model and support&lt;br/&gt;for developers to effectively use a model checker for testing and&lt;br/&gt;debugging code. These techniques will be implemented in the form of a&lt;br/&gt;concurrent data structure checking tool, CDSChecker, that will be&lt;br/&gt;developed by the this project.  The project will develop efficient&lt;br/&gt;model-checking techniques for the C/C++ memory model, explore how to&lt;br/&gt;specify the correct behavior of concurrent data structures, explore&lt;br/&gt;how to support testing and debugging of concurrent code, and explore&lt;br/&gt;how to effectively communicate information about concurrency bugs to&lt;br/&gt;developers.</AbstractNarration>
<MinAmdLetterDate>07/31/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/31/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319786</AwardID>
<Investigator>
<FirstName>Brian</FirstName>
<LastName>Demsky</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Brian C Demsky</PI_FULL_NAME>
<EmailAddress>bdemsky@uci.edu</EmailAddress>
<PI_PHON>9498240356</PI_PHON>
<NSF_ID>000399342</NSF_ID>
<StartDate>07/31/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926970001</ZipCode>
<StreetAddress><![CDATA[4213 Engineering Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~399997</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>With the wide-scale deployment of multi-core processors, software developers must write parallel software to realize the benefits of continued improvements in microprocessors. Many developers in industry have adopted a parallel programming model that uses threads to parallelize computation and concurrent data structures to coordinate and share data between threads.&nbsp;&nbsp;Recently, standardization committees extended the C and C++ language standards with support for low-level atomic operations which allow experts to craft efficient concurrent data structures that avoid the overheads of locks.&nbsp;&nbsp;The accompanying memory model provides for memory operations with weaker semantics than sequential consistency; however, using these weak atomic operations is extremely challenging, as developers must carefully reason about often subtle memory model semantics to ensure correctness.</p> <p>&nbsp;</p> <p>The project has developed new tools and techniques for exhaustively exploring the legal executions of C/C++ concurrent data structures on unit tests.&nbsp;&nbsp;The project has developed a model checking tool,&nbsp;&nbsp;CDSChecker, that has been used by both practitioners and other researchers.&nbsp;&nbsp;The CDSChecker tool helps developers find and fix difficult to expose bugs during testing instead of allowing these bugs to slip into deployed settings where will be more expensive to correct and introduce failures into critical systems that potentially incur additional costs.&nbsp;&nbsp;Several research groups have developed tools using the CDSChecker infrastructure.&nbsp;&nbsp;The project has developed a new, more scalable approach to testing concurrent software that leverages SAT solvers to avoid exploring many similar executions.&nbsp;&nbsp;It implemented this approach for both the the TSO and SC memory models in the SATCheck tool.&nbsp;&nbsp;The project has explored changes to language memory models that eliminate problematic behaviors and showed that these changes introduce minimal runtime overheads on an existing processor.&nbsp;&nbsp;These changes make it possible to develop more efficient tool support for using atomic operations and make it easier for developers to reason about code.&nbsp;&nbsp;The project has developed tools for helping developers implement data structures under the C/C++ memory model and then to specify and test those data structures.</p> <p>&nbsp;</p> <p>The broader impacts of the research includes improving the reliability of concurrent software and improving the productivity of developers who write concurrent software.&nbsp;&nbsp;Work done as part of this project has influence the C/C++ standard committee.&nbsp;&nbsp;Software developed by this project has been made freely available.&nbsp;&nbsp;Both practitioners and other researchers have used software developed by this project.&nbsp;&nbsp;The project has helped develop national software resources by mentoring MS and PhD students and undergraduate students.</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/09/2019<br>      Modified by: Brian&nbsp;C&nbsp;Demsky</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ With the wide-scale deployment of multi-core processors, software developers must write parallel software to realize the benefits of continued improvements in microprocessors. Many developers in industry have adopted a parallel programming model that uses threads to parallelize computation and concurrent data structures to coordinate and share data between threads.  Recently, standardization committees extended the C and C++ language standards with support for low-level atomic operations which allow experts to craft efficient concurrent data structures that avoid the overheads of locks.  The accompanying memory model provides for memory operations with weaker semantics than sequential consistency; however, using these weak atomic operations is extremely challenging, as developers must carefully reason about often subtle memory model semantics to ensure correctness.     The project has developed new tools and techniques for exhaustively exploring the legal executions of C/C++ concurrent data structures on unit tests.  The project has developed a model checking tool,  CDSChecker, that has been used by both practitioners and other researchers.  The CDSChecker tool helps developers find and fix difficult to expose bugs during testing instead of allowing these bugs to slip into deployed settings where will be more expensive to correct and introduce failures into critical systems that potentially incur additional costs.  Several research groups have developed tools using the CDSChecker infrastructure.  The project has developed a new, more scalable approach to testing concurrent software that leverages SAT solvers to avoid exploring many similar executions.  It implemented this approach for both the the TSO and SC memory models in the SATCheck tool.  The project has explored changes to language memory models that eliminate problematic behaviors and showed that these changes introduce minimal runtime overheads on an existing processor.  These changes make it possible to develop more efficient tool support for using atomic operations and make it easier for developers to reason about code.  The project has developed tools for helping developers implement data structures under the C/C++ memory model and then to specify and test those data structures.     The broader impacts of the research includes improving the reliability of concurrent software and improving the productivity of developers who write concurrent software.  Work done as part of this project has influence the C/C++ standard committee.  Software developed by this project has been made freely available.  Both practitioners and other researchers have used software developed by this project.  The project has helped develop national software resources by mentoring MS and PhD students and undergraduate students.          Last Modified: 01/09/2019       Submitted by: Brian C Demsky]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
