<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Towards Obfuscation-Resilient Software Plagiarism Detection</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2013</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software plagiarism is an act of reusing someone else's code, in whole or in part, into one own program in a way violating the terms of original license. Along with the rapid developing software industry and the burst of open source projects, software plagiarism has become a very serious threat to Intellectual Property Protection and the "healthiness" of the open-source-embracing software industry. Meanwhile, software plagiarism (and what is called app repackaging) has become an even more common phenomenon in the mobile app markets for monetary profit or propagation of malware by inserting malicious payloads into the original apps. To address this threat, computer-aided, automated plagiarism detection tools should play a major role. However, existing plagiarism detection schemes are not resilient to code obfuscation, and often they can be defeated by (in most cases rather simple) code-obfuscation-based counter-detection tools which are freely available.&lt;br/&gt;&lt;br/&gt;In this project, the software plagiarism detection problem is studied in a systematic way. The proposed plagiarism detection methods for PC applications leverage program logic and longest semantically-equivalent-basic-block subsequences. They are capable of detecting partial program plagiarism and also provide formal guarantee on obfuscation resilience. The proposed method for mobile apps exploits user interface for plagiarism detection, and this unique design angle empowers it to defeat various code obfuscation techniques. Our proposed research will significantly deter the intention or practice of software plagiarism. It will not only serve as a useful tool in collecting strong plagiarism evidences for lawsuits related to intellectual property, but also promote a more healthy and trustworthy sharing environment for the open source community and for the mobile app markets. Broader impact will also result from the education and dissemination initiatives.</AbstractNarration>
<MinAmdLetterDate>06/24/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320605</AwardID>
<Investigator>
<FirstName>Peng</FirstName>
<LastName>Liu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Peng Liu</PI_FULL_NAME>
<EmailAddress>pliu@ist.psu.edu</EmailAddress>
<PI_PHON>8148630641</PI_PHON>
<NSF_ID>000240285</NSF_ID>
<StartDate>06/24/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sencun</FirstName>
<LastName>Zhu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sencun Zhu</PI_FULL_NAME>
<EmailAddress>szhu@cse.psu.edu</EmailAddress>
<PI_PHON>8148650995</PI_PHON>
<NSF_ID>000240350</NSF_ID>
<StartDate>06/24/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Dinghao</FirstName>
<LastName>Wu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Dinghao Wu</PI_FULL_NAME>
<EmailAddress>dwu@ist.psu.edu</EmailAddress>
<PI_PHON>8148651372</PI_PHON>
<NSF_ID>000555271</NSF_ID>
<StartDate>06/24/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Pennsylvania State Univ University Park</Name>
<CityName>University Park</CityName>
<ZipCode>168021503</ZipCode>
<PhoneNumber>8148651372</PhoneNumber>
<StreetAddress>201 Old Main</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003403953</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PENNSYLVANIA STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003403953</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Pennsylvania State Univ University Park]]></Name>
<CityName>University Park</CityName>
<StateCode>PA</StateCode>
<ZipCode>168021503</ZipCode>
<StreetAddress><![CDATA[201 Old Main]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Software plagiarism is an act of reusing someone else's code, in whole or in part, into one's own programin a way violating the terms of original license. Along with the rapid developing software industry and the burst of open source projects, software plagiarism has become a very serious threat to Intellectual PropertyProtection and the "healthiness" of the open-source-embracing software industry. Meanwhile, software plagiarism (or called app repackaging)&nbsp;has become an even more common phenomenon in the mobile app markets for monetary profit or propagation of malware by inserting malicious&nbsp;payloads into the original apps. To address this threat, computer-aided, automated plagiarism detection tools should play a major role.However, existing plagiarism detection schemes are not resilient to code obfuscation, and often they can be defeated by(in most cases rather simple) code-obfuscation-based counter-detection tools which are freely available.</span></p> <p><span>In this project, the PIs studied the software plagiarism detection problem in a systematic way. Specifically, we have achieved the following major outcomes.&nbsp;</span></p> <p><span>(1) Plagiarism detection on traditional platforms. A fundamental research problem in software plagiarism detection is to measure the similarity of two programs, based on software birthmark, which is some type of inherent features of programs. Such birthmark should be easy to extract (for performance reason) and hard to change (for accuracy reason). Example birthmarks include static features of code, dynamic behavior or others. Our research has made significant contributions on finding efficient and robust software birthmarks. Specifically, we defined and evaluated multiple types of birthmarks, including runtime values, program logic and longest semantically-equivalent-basic-block subsequences. They are capable of detecting partial program plagiarism and also provide formal guarantee on obfuscation resilience. </span><span>&nbsp;</span></p> <p><span>(2) Plagiarism detection on mobile platform. </span><span>A</span><span>s mobile applications are user-interaction oriented, repackaged apps almost always keep the graphic user interface (GUI) of the original apps to make themselves attractive and deceptive. Therefore, we proposed an effective repackaging detection scheme based on a new birthmark, where the structure of GUI between two apps is measured and compared for similarity. This unique design perspective empowers us to defeat various code&nbsp;obfuscation techniques. Moreover, we designed a semantics-based scheme which extracts input-output states of core functions in an app and then compare function and app similarity. We also proposed the concept of &ldquo;repackaging proof&rdquo;, where repackaged apps will fail to execute successfully, and designed some novel techniques to build a reliable and stealthy repackage-proofing capability into Android apps. Finally, we developed novel techniques to unpack android apps that are packed and obfuscated.</span></p> <p><span>(3) Code obfuscation. We also extended our research by studying the obfuscation problem itself in greater depth, from both attack and detection angles. Specifically, we proposed a logic-oriented opaque predicate detection scheme for obfuscated binary code, with GitHub open source code release. We also introduced translingual obfuscation, a new software obfuscation scheme which makes programs obscure. </span></p> <p><span>(4</span><span>)</span><span> </span><span>Malware analysis. </span><span>We have developed a novel technique for detecting cryptographic algorithm functions implemented in obfuscated code, based on bit-precise symbolic loop mapping. These techniques can have some broader applications such as malware behavior analysis.&nbsp;</span></p> <p><span>The tools resulted from our work can be readily adopted by the commercial sector to solve real-world challenging problems related to program analysis, malware analysis, and code theft. &nbsp;For example, our technique for cryptographic function detection in obfuscated binaries can be applied to detect&nbsp;infamous crypto-ransomware that encrypts victim&rsquo;s computer documents until a ransom is paid.&nbsp;</span></p> <p>&nbsp;</p><br> <p>            Last Modified: 07/26/2017<br>      Modified by: Sencun&nbsp;Zhu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software plagiarism is an act of reusing someone else's code, in whole or in part, into one's own programin a way violating the terms of original license. Along with the rapid developing software industry and the burst of open source projects, software plagiarism has become a very serious threat to Intellectual PropertyProtection and the "healthiness" of the open-source-embracing software industry. Meanwhile, software plagiarism (or called app repackaging) has become an even more common phenomenon in the mobile app markets for monetary profit or propagation of malware by inserting malicious payloads into the original apps. To address this threat, computer-aided, automated plagiarism detection tools should play a major role.However, existing plagiarism detection schemes are not resilient to code obfuscation, and often they can be defeated by(in most cases rather simple) code-obfuscation-based counter-detection tools which are freely available.  In this project, the PIs studied the software plagiarism detection problem in a systematic way. Specifically, we have achieved the following major outcomes.   (1) Plagiarism detection on traditional platforms. A fundamental research problem in software plagiarism detection is to measure the similarity of two programs, based on software birthmark, which is some type of inherent features of programs. Such birthmark should be easy to extract (for performance reason) and hard to change (for accuracy reason). Example birthmarks include static features of code, dynamic behavior or others. Our research has made significant contributions on finding efficient and robust software birthmarks. Specifically, we defined and evaluated multiple types of birthmarks, including runtime values, program logic and longest semantically-equivalent-basic-block subsequences. They are capable of detecting partial program plagiarism and also provide formal guarantee on obfuscation resilience.    (2) Plagiarism detection on mobile platform. As mobile applications are user-interaction oriented, repackaged apps almost always keep the graphic user interface (GUI) of the original apps to make themselves attractive and deceptive. Therefore, we proposed an effective repackaging detection scheme based on a new birthmark, where the structure of GUI between two apps is measured and compared for similarity. This unique design perspective empowers us to defeat various code obfuscation techniques. Moreover, we designed a semantics-based scheme which extracts input-output states of core functions in an app and then compare function and app similarity. We also proposed the concept of "repackaging proof", where repackaged apps will fail to execute successfully, and designed some novel techniques to build a reliable and stealthy repackage-proofing capability into Android apps. Finally, we developed novel techniques to unpack android apps that are packed and obfuscated.  (3) Code obfuscation. We also extended our research by studying the obfuscation problem itself in greater depth, from both attack and detection angles. Specifically, we proposed a logic-oriented opaque predicate detection scheme for obfuscated binary code, with GitHub open source code release. We also introduced translingual obfuscation, a new software obfuscation scheme which makes programs obscure.   (4) Malware analysis. We have developed a novel technique for detecting cryptographic algorithm functions implemented in obfuscated code, based on bit-precise symbolic loop mapping. These techniques can have some broader applications such as malware behavior analysis.   The tools resulted from our work can be readily adopted by the commercial sector to solve real-world challenging problems related to program analysis, malware analysis, and code theft.  For example, our technique for cryptographic function detection in obfuscated binaries can be applied to detect infamous crypto-ransomware that encrypts victim?s computer documents until a ransom is paid.           Last Modified: 07/26/2017       Submitted by: Sencun Zhu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
