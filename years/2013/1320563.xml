<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Languages and Abstraction for Dynamic Big Data</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>444096.00</AwardTotalIntnAmount>
<AwardAmount>456896</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The analysis of large datasets using computers, a.k.a., big data analytics, is emerging as an important tool in many fields, such as science and discovery, technology, health care, and commerce. The data sets used in such applications are usually dynamic: they change over time as new data becomes available.  Such dynamic changes are often small, requiring similarly small but potentially important updates, because new information can be crucial in detecting a pattern or an anomaly.  For example, the Internet or a social network changes dynamically as new web pages become available, new links are added, or existing links are removed.  As a result of such dynamic changes, two clusters of previously disconnected web sites can become connected by the addition of a single link, indicating for example, an important news item or a security breach.  Unfortunately, in many existing big-data systems, absorbing new information involves making one or more passes over the entire dataset.  Such batch processing of dynamic data results in slow updates, as well as inefficiencies in the utilization of resources such as hardware and energy, by (unnecessarily) performing many subcomputations that are unaffected by changes.  This project aims to lay the groundwork for the programming languages and software systems that can support the development of such applications in the real world. The work has the potential to transform the way the programmers express computations on dynamically changing big data sets, make it possible to derive new information and knowledge from big dynamic data sets by computing with them responsively and efficiently, and transform the way that we teach the design, analysis, and implementations of computations operating for dynamic data sets.  The project also includes the development of undergraduate lectures on parallelism.&lt;br/&gt;&lt;br/&gt;The project aims to enable the user to express the dynamism in large data sets implicitly, without concerning themselves with how exactly the results will be updated when the data changes, e.g., which data depends on which other data, which data may need to be updated, which dependencies need to be reconstructed.  Starting with an implicitly dynamic program, a software system automatically and efficiently constructs a record of the computed results and updates it as the dataset changes.  To achieve this goal, the project develops abstractions, programming languages, compilers, and run-time systems. Concretely, we expect three sets of contributions: novel, powerful abstractions and cost models for writing programs that operate on dynamically changing large datasets, programming language support in the form of compilers and run-time systems for realizing such abstractions on practical hardware, and efficient algorithms and implementations, to be used to evaluate the proposed and future work.</AbstractNarration>
<MinAmdLetterDate>08/09/2013</MinAmdLetterDate>
<MaxAmdLetterDate>03/20/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1320563</AwardID>
<Investigator>
<FirstName>Umut</FirstName>
<LastName>Acar</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Umut Acar</PI_FULL_NAME>
<EmailAddress>umut@cs.cmu.edu</EmailAddress>
<PI_PHON>4122689527</PI_PHON>
<NSF_ID>000636864</NSF_ID>
<StartDate>08/09/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName/>
<StateCode>PA</StateCode>
<ZipCode>152133890</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~444096</FUND_OBLG>
<FUND_OBLG>2014~12800</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project has developed programming languages, algorithms, and software for supporting parallel programs that can respond to dynamically changing data.&nbsp; Although such data sets are common, e.g., many large data sets, change dynamically over time, there is relatively little work on taking advantage of their properties.&nbsp; The project's goal was to broaden the scope of parallel computing to include applications that operate on such dynamically changing data sets.</p> <p>Concrete contributions include 1) extensions to self-adjusting computation for making it applicable to large data sets; 2) an extension of the broadly used pThreads framework that allows programs written with pThreads to automatically propagate changes to their data; 3) a cost-semantics for determining the time that it would be required for a program to automatically respond to changes to its data; 4) parallel scheduling algorithms that allows blocking operations, which interact with the user, to proceed without occupying the processor; 5) an extension to the Standard ML language that support the expression of such parallel interactive programs, 6) a cost semantics for reasoning about parallel programs that can predict the responsiveness of tasks within a computation, 7) an empirical framework and benchmarks for evaluating the efficiency and performance of the proposed techniques, algorithms, and implementations.&nbsp; These outcomes have been reported in papers&nbsp; published at venues such as PLDI, ASPLAS, SPAA, ICFP, and ESOP.&nbsp;</p> <p>In addition to papers and research artifiacts, the project supported the development of a compiler and run-time system for parallel extension of the Standard ML language.&nbsp; This language and the compiler has been integrated into undergraduate education for the purpose of teaching parallel algorithms to undergraduate students.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/28/2017<br>      Modified by: Umut&nbsp;Acar</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project has developed programming languages, algorithms, and software for supporting parallel programs that can respond to dynamically changing data.  Although such data sets are common, e.g., many large data sets, change dynamically over time, there is relatively little work on taking advantage of their properties.  The project's goal was to broaden the scope of parallel computing to include applications that operate on such dynamically changing data sets.  Concrete contributions include 1) extensions to self-adjusting computation for making it applicable to large data sets; 2) an extension of the broadly used pThreads framework that allows programs written with pThreads to automatically propagate changes to their data; 3) a cost-semantics for determining the time that it would be required for a program to automatically respond to changes to its data; 4) parallel scheduling algorithms that allows blocking operations, which interact with the user, to proceed without occupying the processor; 5) an extension to the Standard ML language that support the expression of such parallel interactive programs, 6) a cost semantics for reasoning about parallel programs that can predict the responsiveness of tasks within a computation, 7) an empirical framework and benchmarks for evaluating the efficiency and performance of the proposed techniques, algorithms, and implementations.  These outcomes have been reported in papers  published at venues such as PLDI, ASPLAS, SPAA, ICFP, and ESOP.   In addition to papers and research artifiacts, the project supported the development of a compiler and run-time system for parallel extension of the Standard ML language.  This language and the compiler has been integrated into undergraduate education for the purpose of teaching parallel algorithms to undergraduate students.                Last Modified: 11/28/2017       Submitted by: Umut Acar]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
