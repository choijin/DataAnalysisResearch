<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: FP: Program Synthesis for Low-Power Spatial Architectures</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>749879.00</AwardTotalIntnAmount>
<AwardAmount>765879</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>New computing applications require dramatic increases in the energy efficiency of processors.  These applications include personal health monitoring with wearable body sensors and data processing onboard tiny robotic rescue helicopters.  Energy efficiency allows such applications to run on small batteries, thus achieving the necessary small form factor.  Until recently, energy efficiency was achieved by shrinking transistors.  While the Moore's Law still keeps shrinking transistors, the smaller transistors are no longer significantly more energy efficient than large ones.  As a result, the quest for energy efficiency has shifted from transistor fabrication to designing software and hardware that work well together.  Among key questions is how minimalistic can hardware be without affecting the productivity of programming that hardware.  Minimalistic hardware would not burn energy on tasks that support programmability, so investigating how to compile programs for minimalistic hardware is of increased interest.&lt;br/&gt;&lt;br/&gt;Traditionally, hardware complexity has been hidden under a programming model and a compiler. The less heroic the compiler, the more likely was the technology to succeed (c.f., CUDA's widespread adoption).  Unfortunately, a simple compiler breaks down on hardware without programmability features such as caches.  This proposal investigates extending the compiler with a synthesizer, which has the power to search a space of alternative programs.  The design decision to rely on search frees the compiler writer from having to develop a (deterministic) compilation algorithm.  As a case study, this project addresses the programmability question through a programming framework for a spatial ultra-low-power processor design.  The framework includes a programming model and a synthesis-aided compiler tool chain.  The programming model develops a solver-aided domain specific language (SDSL) that includes constructs for partitioning programs across processor cores.  The SDLS is implemented on the Rosette framework for SDSL construction.</AbstractNarration>
<MinAmdLetterDate>09/23/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/03/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1337415</AwardID>
<Investigator>
<FirstName>George</FirstName>
<LastName>Necula</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>George C Necula</PI_FULL_NAME>
<EmailAddress>necula@cs.berkeley.edu</EmailAddress>
<PI_PHON>5106431481</PI_PHON>
<NSF_ID>000215459</NSF_ID>
<StartDate>09/03/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Rastislav</FirstName>
<LastName>Bodik</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rastislav Bodik</PI_FULL_NAME>
<EmailAddress>bodik@uw.edu</EmailAddress>
<PI_PHON>5104993346</PI_PHON>
<NSF_ID>000207383</NSF_ID>
<StartDate>09/23/2013</StartDate>
<EndDate>09/03/2015</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Emina</FirstName>
<LastName>Torlak</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Emina Torlak</PI_FULL_NAME>
<EmailAddress>emina@cs.washington.edu</EmailAddress>
<PI_PHON>2066160733</PI_PHON>
<NSF_ID>000642956</NSF_ID>
<StartDate>09/23/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<StreetAddress2><![CDATA[1608 Fourth Street, Suite 220]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>124726725</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Berkeley]]></Name>
<CityName>Berkeley</CityName>
<StateCode>CA</StateCode>
<ZipCode>947201776</ZipCode>
<StreetAddress><![CDATA[773 Soda Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8283</Code>
<Text>Exploiting Parallel&amp;Scalabilty</Text>
</ProgramElement>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~749879</FUND_OBLG>
<FUND_OBLG>2015~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-652cb54d-aac8-de8c-9a29-578dab059523"> <p dir="ltr"><span>Project Details</span></p> <p dir="ltr"><span>We have designed, built, evaluated, disseminated several programmer tools built on these ideas. These tools are described below, along with their applications related to XPS. </span></p> <br /> <p dir="ltr"><span>Rosette:</span><span> &nbsp;</span><a href="https://emina.github.io/rosette/"><span>Rosette</span></a><span> is a solver-aided programming language that extends </span><a href="http://racket-lang.org/"><span>Racket</span></a><span> with language constructs for program synthesis, verification, and more. To verify or synthesize code, Rosette compiles it to logical constraints solved with off-the-shelf </span><a href="http://smtlib.cs.uiowa.edu/"><span>SMT</span></a><span> solvers. By combining virtualized access to solvers with Racket&rsquo;s metaprogramming, Rosette makes it easy to develop synthesis and verification tools for new languages. You simply write an interpreter for your language in Rosette, and you get the tools for free! &nbsp;We used Rosette to develop the four tools mentioned below. </span></p> <br /> <p dir="ltr"><span>Chlorophyll: </span><a href="http://pl.eecs.berkeley.edu/projects/chlorophyll/"><span>Chlorophyll</span></a><span> is a synthesis-aided compiler for ultra-low-power spatial architectures. The primary goal of the Chlorophyll effort is to develop a new method for constructing compilers that are expected to perform non-traditional optimizations, such code partitioning and code generation for stack-based instruction set architectures (ISAs). &nbsp;The goal was to produce compilers that generate high-efficiency code while producing these compilers rapidly. &nbsp;</span></p> <br /> <p dir="ltr"><span>GreenThumb: </span><a href="http://pl.eecs.berkeley.edu/projects/greenthumb/"><span>GreenThumb</span></a><span> is a framework for building superoptimizers. A superoptimizer is a special kind of synthesizer that generates optimal sequences of instructions by searching all possible sequences of instructions. &nbsp;GreenThumb was designed to be portable to new target ISAs. The framework provides an efficient cooperative search strategy that combines unique properties of superoptimization algorithms, namely symbolic, stochastic, and enumerative algorithms. &nbsp;Additionally, GreenThumb executes parallel instances of these algorithms, making them communicate their results. Among the alternative strategies is our new enumerative search technique, called LENS, that rapidly prunes away invalid candidate programs by applying selective refinement and bidirectional search.</span></p> <br /> <p dir="ltr"><span>MemSynth: </span><span>MemSynth is the first system for automatic synthesis of axiomatic memory model specifications from litmus tests. MemSynth provides an expressive language for specifying the axioms that define a class of memory models, sketching a memory model specification within that class, and writing litmus tests for the desired model. Its synthesis engine takes the axioms, sketch, and tests as input, and searches for a memory model (if any) that gives the desired outcomes on all tests. The MemSynth engine is an optimized deep embedding of bounded relational logic in Rosette, and solves complex synthesis queries intractable to existing solvers. This design also enables MemSynth to solve novel queries, such as a uniqueness check to discover ambiguities in memory model specifications.</span></p> <br /> <p dir="ltr"><span>Ferrite:</span><span> </span><span>We developed crash-consistency models, analogous to memory consistency models, which describe the behavior of a file system across crashes. </span><a href="http://sandcat.cs.washington.edu/ferrite/"><span>Ferrite</span></a><span> is a toolkit for validating those models against real file system implementations. We develop a crash-consistency model for ext4, and use Ferrite to demonstrate unintuitive crash behaviors of the ext4 implementation. To demonstrate the utility of crash-consistency models to application writers, we use our models to prototype proof-of-concept verification and synthesis tools, as well as new library interfaces for crash-safe applications.</span></p> <br /> <p dir="ltr"><span>Floem: </span><span>Floem is a programming system for NIC-accelerated network applications. Offloading data center applications to programmable NICs is becoming increasingly popular because of both performance and energy benefits. Collaborating with networking and system researchers at the University of Washington, we designed a programming model that facilitates design space explorations by introducing convenient constructs for programmers to map computation to hardware resources (i.e., a CPU and a NIC), parallelize program components, and restructure the program to enable lock-free communication when possible. To ease programming across the CPU-NIC boundary, the language hides packet marshaling under an illusion of shared address space, and the runtime hides complicated DMA access optimization details under the abstraction of coherent shared memory tailored to implementing concurrent queues. </span></p> <br /> <p dir="ltr"><span>Broader Impacts</span></p> <p dir="ltr"><span>Our project has had impacts beyond the project itself. Several PhD students and one undergraduate researchers worked on the project and through their involvement obtained access to an interdisciplinary array projects that span formal methods, parallel programming, low-power computing, networking, and language design. They were also exposed to co-advising with advisors from a variety of disciplines within the broader area of programming systems. </span></p> <br /> <p dir="ltr"><span>In the private sector, the GreenThumb generator of super-optimizers was transferred to Reservoir Labs, for a proprietary high-performance architecture and to a small consulting company who works with customers needing highly optimized code kernels.</span></p> <br /> <p dir="ltr"><span>And in the medical field, Rosette was used to verify correctness of an proton therapy radiation machine at the University of Washington. </span></p> <br /> <p dir="ltr"><span>We released five different open-source software: Rosette, Chlorophyll, GreenThumb, MemSynth, Ferrite. </span></p> <div><span><br /></span></div> </span></p> <p>&nbsp;</p><br> <p>            Last Modified: 12/30/2017<br>      Modified by: Emina&nbsp;Torlak</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Project Details We have designed, built, evaluated, disseminated several programmer tools built on these ideas. These tools are described below, along with their applications related to XPS.    Rosette:  Rosette is a solver-aided programming language that extends Racket with language constructs for program synthesis, verification, and more. To verify or synthesize code, Rosette compiles it to logical constraints solved with off-the-shelf SMT solvers. By combining virtualized access to solvers with Racket?s metaprogramming, Rosette makes it easy to develop synthesis and verification tools for new languages. You simply write an interpreter for your language in Rosette, and you get the tools for free!  We used Rosette to develop the four tools mentioned below.    Chlorophyll: Chlorophyll is a synthesis-aided compiler for ultra-low-power spatial architectures. The primary goal of the Chlorophyll effort is to develop a new method for constructing compilers that are expected to perform non-traditional optimizations, such code partitioning and code generation for stack-based instruction set architectures (ISAs).  The goal was to produce compilers that generate high-efficiency code while producing these compilers rapidly.     GreenThumb: GreenThumb is a framework for building superoptimizers. A superoptimizer is a special kind of synthesizer that generates optimal sequences of instructions by searching all possible sequences of instructions.  GreenThumb was designed to be portable to new target ISAs. The framework provides an efficient cooperative search strategy that combines unique properties of superoptimization algorithms, namely symbolic, stochastic, and enumerative algorithms.  Additionally, GreenThumb executes parallel instances of these algorithms, making them communicate their results. Among the alternative strategies is our new enumerative search technique, called LENS, that rapidly prunes away invalid candidate programs by applying selective refinement and bidirectional search.   MemSynth: MemSynth is the first system for automatic synthesis of axiomatic memory model specifications from litmus tests. MemSynth provides an expressive language for specifying the axioms that define a class of memory models, sketching a memory model specification within that class, and writing litmus tests for the desired model. Its synthesis engine takes the axioms, sketch, and tests as input, and searches for a memory model (if any) that gives the desired outcomes on all tests. The MemSynth engine is an optimized deep embedding of bounded relational logic in Rosette, and solves complex synthesis queries intractable to existing solvers. This design also enables MemSynth to solve novel queries, such as a uniqueness check to discover ambiguities in memory model specifications.   Ferrite: We developed crash-consistency models, analogous to memory consistency models, which describe the behavior of a file system across crashes. Ferrite is a toolkit for validating those models against real file system implementations. We develop a crash-consistency model for ext4, and use Ferrite to demonstrate unintuitive crash behaviors of the ext4 implementation. To demonstrate the utility of crash-consistency models to application writers, we use our models to prototype proof-of-concept verification and synthesis tools, as well as new library interfaces for crash-safe applications.   Floem: Floem is a programming system for NIC-accelerated network applications. Offloading data center applications to programmable NICs is becoming increasingly popular because of both performance and energy benefits. Collaborating with networking and system researchers at the University of Washington, we designed a programming model that facilitates design space explorations by introducing convenient constructs for programmers to map computation to hardware resources (i.e., a CPU and a NIC), parallelize program components, and restructure the program to enable lock-free communication when possible. To ease programming across the CPU-NIC boundary, the language hides packet marshaling under an illusion of shared address space, and the runtime hides complicated DMA access optimization details under the abstraction of coherent shared memory tailored to implementing concurrent queues.    Broader Impacts Our project has had impacts beyond the project itself. Several PhD students and one undergraduate researchers worked on the project and through their involvement obtained access to an interdisciplinary array projects that span formal methods, parallel programming, low-power computing, networking, and language design. They were also exposed to co-advising with advisors from a variety of disciplines within the broader area of programming systems.    In the private sector, the GreenThumb generator of super-optimizers was transferred to Reservoir Labs, for a proprietary high-performance architecture and to a small consulting company who works with customers needing highly optimized code kernels.   And in the medical field, Rosette was used to verify correctness of an proton therapy radiation machine at the University of Washington.    We released five different open-source software: Rosette, Chlorophyll, GreenThumb, MemSynth, Ferrite.              Last Modified: 12/30/2017       Submitted by: Emina Torlak]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
