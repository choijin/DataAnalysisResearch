<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative research:Complexity and feasibility for programs over coinductively-defined data</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>120000.00</AwardTotalIntnAmount>
<AwardAmount>120000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The typical tools of complexity theory and algorithms tend to be biased toward low-level models of computation that refer directly to bit-level representations of data.  But when programming in the large, there are layers upon layers of abstraction over any low-level details, and a key feature of modern programming is the ability to compose different abstractions without regard to such details.  Compositionality has yielded very reliable software development methodologies, in large part because the tools developed for reasoning about program correctness have developed alongside these notions of abstraction.  However, tools for reasoning about complexity have not kept pace.  The big picture of the principle investigators' research program is to develop techniques for compositional reasoning about complexity, thereby allowing for reasoning about run-time cost in all its facets of large-scale programming with methods similar to those so successfully deployed for reasoning about correctness.  The research project funded by this grant concentrates on characterizing sensible notions of feasibility for programs that use coninductively-defined data such as streams (a program that produces or processes streaming media is just the right model to have in mind) and more generally quantifying, in a machine-checkable manner, resource usage for such programs.&lt;br/&gt;&lt;br/&gt;Although feasibility has been well-studied in the context of finite structures, extensions to potentially infinite data structures such as streams have been somewhat piecemeal.  One facet of this research project is to develop principled notions of feasibility in this setting.  To do so, the PIs will extend tools such as logic and programming language formalisms that have previously been used to give resource-free characterizations of complexity classes for finite structures.  Such tools are already more closely tied to a compositional view of programming, and they give a jumping-off point for analyzing notions of cost in domains where the very definition of resource usage may not be so obvious.  One such tool that they developed in previous work is a framework for compositional cost analysis of higher-order programs.  This time-complexity semantics is essentially a translation of target-language programs into a domain of complexities, which encode information about evaluation and usage cost.  The translation can be automated, and so this framework not only provides a tool for reasoning compositionally about cost, but provides machine-checkable assertions about the cost of target programs.</AbstractNarration>
<MinAmdLetterDate>07/31/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/31/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319769</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Royer</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James Royer</PI_FULL_NAME>
<EmailAddress>jsroyer@syr.edu</EmailAddress>
<PI_PHON>3154431028</PI_PHON>
<NSF_ID>000235756</NSF_ID>
<StartDate>07/31/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Syracuse University</Name>
<CityName>SYRACUSE</CityName>
<ZipCode>132441200</ZipCode>
<PhoneNumber>3154432807</PhoneNumber>
<StreetAddress>OFFICE OF SPONSORED PROGRAMS</StreetAddress>
<StreetAddress2><![CDATA[211 Lyman Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY24</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002257350</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>SYRACUSE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002257350</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Syracuse University]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>132444100</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY24</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~120000</FUND_OBLG>
</Award>
</rootTag>
