<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: RUI: Generating High Quality Trace Links through Intelligent Composition of Tracing Features</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2013</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>499241.00</AwardTotalIntnAmount>
<AwardAmount>529383</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software traceability serves a critical role in ensuring that software systems operate correctly. It is used to support a wide variety of software engineering activities such as change management, compliance verification, and safety analysis. Unfortunately current practices fall far short of delivering cost-effective traceability, primarily because creating and managing trace links in large and/or complex systems is time-consuming, arduous, and error-prone. These problems were highlighted in a recent report entitled 'Critical Code: Software Producibility for Defense' commissioned by the Department of Defense. The report stressed the need for the research community to develop cost-effective and accurate traceability solutions.  While state of the art tracing techniques offer significant promise for reducing the cost and effort of tracing, they fall short of meeting industrial needs primarily because the quality of the generated links is imprecise. This work will investigate ways to integrate techniques from feature modeling, product line development, artificial intelligence and machine learning to deliver a dynamically configurable trace infrastructure.  The framework will then be used to investigate and integrate a broad set of novel tracing techniques which are expected to significantly improve the quality of generated trace links.&lt;br/&gt;&lt;br/&gt;The results of the project will contribute towards the development of software intensive systems, especially safety-critical ones in which traceability is mandatory. Technology transfer will be facilitated by delivering solutions on the TraceLab platform, disseminated via the Center of Excellence for Software Traceability (CoEST.org) and through training materials targeted at industrial users. Ongoing research opportunities will be provided for a diverse group of undergraduate and graduate students, and pedagogical materials will be developed and made publicly available for use in a variety of courses on requirements engineering, software engineering and software architecture.</AbstractNarration>
<MinAmdLetterDate>06/25/2013</MinAmdLetterDate>
<MaxAmdLetterDate>05/29/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319680</AwardID>
<Investigator>
<FirstName>Jane</FirstName>
<LastName>Huang</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jane L Huang</PI_FULL_NAME>
<EmailAddress>JaneClelandHuang@nd.edu</EmailAddress>
<PI_PHON>7082072712</PI_PHON>
<NSF_ID>000304869</NSF_ID>
<StartDate>06/25/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>DePaul University</Name>
<CityName>Chicago</CityName>
<ZipCode>606042287</ZipCode>
<PhoneNumber>3123627388</PhoneNumber>
<StreetAddress>1 East Jackson Boulevard</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>045694130</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DE PAUL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>045694130</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[DePaul University]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606042301</ZipCode>
<StreetAddress><![CDATA[243 S. Wabash Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9229</Code>
<Text>RES IN UNDERGRAD INST-RESEARCH</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~499241</FUND_OBLG>
<FUND_OBLG>2014~15071</FUND_OBLG>
<FUND_OBLG>2015~15071</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software intensive systems permeate our society and are entrusted with the lives of everyday people. For example, a person using a pacemaker trusts that it will provide an electrical pulse if the heart rhythm becomes abnormal; a driver crossing the railway tracks on the way to work trusts that the signaling system will issue warnings and close the gates when a train is approaching, and an employee depositing her paycheck into the bank trusts that her bank balance and financial transactions will be accurately maintained.&nbsp; Software traceability is described by the Center of Excellence for Software Traceability as &ldquo;the ability to interrelate any uniquely identifiable software engineering artifact to any other, maintain required links over time, and use the resulting network to answer questions of both the software product and its development process&rdquo;.&nbsp; It is essential in safety-critical software intensive systems, where it provides support for activities such as safety-assurance, change impact analysis, and compliance verification.&nbsp; Despite its importance, many organizations fail to establish and maintain adequate trace links, primarily because the task of trace link creation and maintenance is extremely costly and arduous to perform.</p> <p>Over the past decade, researchers have developed diverse algorithms for automating the construction of trace links.&nbsp; These algorithms can be combined and configured in different ways to increase the accuracy of the generated trace links. &nbsp;The work conducted under this grant investigated techniques for discovering high-performing combinations and configurations of tracing algorithms for individual projects and artifacts.</p> <p>The first major study used an AI approach known as a Genetic Algorithm (GA) to perform an intelligent search through the space of possible configurations.&nbsp; The GA was trained on an initial set of trace links for each project.&nbsp; All available tracing algorithms were modeled as features, capturing their dependencies and constraints.&nbsp;&nbsp; The GA searched intelligently through the set of features, evaluating each targeted configuration to determine how accurately it performed with respect to the set of known links.&nbsp; These results were used by the GA to guide it through different parts of the search space in order to find a high-performing configuration.&nbsp; The approach was applied against six different software projects, and in all cases, use of the GA returned far higher accuracy than that achieved using non-configured approaches.&nbsp; The study demonstrated the importance of customizing trace engines for each project and showed GAs to be a viable solution.</p> <p>The second major study focused on the &ldquo;cold-start&rdquo; problem which occurs when no existing training set of trace links is available.&nbsp; Twenty different datasets consisting of software artifacts and trace links were collected including several from industrial sources.&nbsp; Project characteristics such as size, textual attributes, project type, and artifact type were then used to create a profile of each project.&nbsp; For each project, the previously developed GA was used to identify a high-performing configuration. &nbsp;Recommender system technologies were then leveraged to match new projects to their closest profiles and to select the associated configuration.&nbsp; The work identified a best-of-breed configuration, which served as a configuration for current cold-start problems.&nbsp; Additional datasets are being collected and added to the profile so that the recommender system can be progressively refined over time.</p> <p>The final study explored a new family of tracing techniques, designed to bridge the semantic gap that exists across different software artifacts.&nbsp; &nbsp;This gap occurs when related artifacts contain few common terms, and as a result, tracing algorithms fail to establish connections.&nbsp; The problem was addressed through use of ontology to capture domain-specific synonyms, hyponyms, homonyms and other concepts and through application of deep learning techniques.&nbsp; In experiments conducted using three project datasets, both approaches significantly improved the accuracy of the generated trace.&nbsp; However, both approaches introduce new challenges.&nbsp; The first requires the construction of a domain-specific ontology and heuristics for reasoning across the ontology; while the second requires large collections of domain artifacts and trace links for training purposes.&nbsp;</p> <p>In addition to technical advances, the project provided opportunities for training post-doctoral researchers, as well as graduate and undergraduate students.&nbsp; Tools were developed which are now being deployed and evaluated in industrial projects.</p> <p>In summary, the work conducted under this grant has led to advances in configuring tracing solutions, and has provided techniques and tools that lay the foundations for delivering semantic-techniques which will enable more accurate trace links to be automatically created.&nbsp;</p><br> <p>            Last Modified: 11/01/2017<br>      Modified by: Jane&nbsp;L&nbsp;Huang</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509290833463_AlgorithmCustomization--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509290833463_AlgorithmCustomization--rgov-800width.jpg" title="Trace Creation Algorithm Customization Process"><img src="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509290833463_AlgorithmCustomization--rgov-66x44.jpg" alt="Trace Creation Algorithm Customization Process"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The customization process involves (1) an engine for generating trace links, (2) a configurator for selecting features and parameters for the trace engine, (3) diverse tracing algorithms, and (4) a predictor model for use in 'cold-start' scenarios where training is not possible.</div> <div class="imageCredit">Jane Cleland-Huang</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Jane&nbsp;L&nbsp;Huang</div> <div class="imageTitle">Trace Creation Algorithm Customization Process</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509293830734_FM3--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509293830734_FM3--rgov-800width.jpg" title="Fig. 2: Feature model depicting trace algorithms and features and their configurations"><img src="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509293830734_FM3--rgov-66x44.jpg" alt="Fig. 2: Feature model depicting trace algorithms and features and their configurations"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Tracing features included preprocessors, post-processors, and core algorithms -- all of which could be combined and configured in different ways.  The feature model provides a formal approach for specifying dependencies and constraints between features.</div> <div class="imageCredit">Jane Cleland-Huang</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Jane&nbsp;L&nbsp;Huang</div> <div class="imageTitle">Fig. 2: Feature model depicting trace algorithms and features and their configurations</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509535008437_PCCurve--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509535008437_PCCurve--rgov-800width.jpg" title="Precision-Recall Curve"><img src="/por/images/Reports/POR/2017/1319680/1319680_10254083_1509535008437_PCCurve--rgov-66x44.jpg" alt="Precision-Recall Curve"></a> <div class="imageCaptionContainer"> <div class="imageCaption">This graph shows the accuracy (measured using precision and recall) achieved through use of the Tracing Network (i.e., Deep Learning) compared to non-semantic approaches such as VSM and LSI.  It further shows that accuracy increased when a larger training set was used.</div> <div class="imageCredit">Jin L.C. Guo</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Jane&nbsp;L&nbsp;Huang</div> <div class="imageTitle">Precision-Recall Curve</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software intensive systems permeate our society and are entrusted with the lives of everyday people. For example, a person using a pacemaker trusts that it will provide an electrical pulse if the heart rhythm becomes abnormal; a driver crossing the railway tracks on the way to work trusts that the signaling system will issue warnings and close the gates when a train is approaching, and an employee depositing her paycheck into the bank trusts that her bank balance and financial transactions will be accurately maintained.  Software traceability is described by the Center of Excellence for Software Traceability as "the ability to interrelate any uniquely identifiable software engineering artifact to any other, maintain required links over time, and use the resulting network to answer questions of both the software product and its development process".  It is essential in safety-critical software intensive systems, where it provides support for activities such as safety-assurance, change impact analysis, and compliance verification.  Despite its importance, many organizations fail to establish and maintain adequate trace links, primarily because the task of trace link creation and maintenance is extremely costly and arduous to perform.  Over the past decade, researchers have developed diverse algorithms for automating the construction of trace links.  These algorithms can be combined and configured in different ways to increase the accuracy of the generated trace links.  The work conducted under this grant investigated techniques for discovering high-performing combinations and configurations of tracing algorithms for individual projects and artifacts.  The first major study used an AI approach known as a Genetic Algorithm (GA) to perform an intelligent search through the space of possible configurations.  The GA was trained on an initial set of trace links for each project.  All available tracing algorithms were modeled as features, capturing their dependencies and constraints.   The GA searched intelligently through the set of features, evaluating each targeted configuration to determine how accurately it performed with respect to the set of known links.  These results were used by the GA to guide it through different parts of the search space in order to find a high-performing configuration.  The approach was applied against six different software projects, and in all cases, use of the GA returned far higher accuracy than that achieved using non-configured approaches.  The study demonstrated the importance of customizing trace engines for each project and showed GAs to be a viable solution.  The second major study focused on the "cold-start" problem which occurs when no existing training set of trace links is available.  Twenty different datasets consisting of software artifacts and trace links were collected including several from industrial sources.  Project characteristics such as size, textual attributes, project type, and artifact type were then used to create a profile of each project.  For each project, the previously developed GA was used to identify a high-performing configuration.  Recommender system technologies were then leveraged to match new projects to their closest profiles and to select the associated configuration.  The work identified a best-of-breed configuration, which served as a configuration for current cold-start problems.  Additional datasets are being collected and added to the profile so that the recommender system can be progressively refined over time.  The final study explored a new family of tracing techniques, designed to bridge the semantic gap that exists across different software artifacts.   This gap occurs when related artifacts contain few common terms, and as a result, tracing algorithms fail to establish connections.  The problem was addressed through use of ontology to capture domain-specific synonyms, hyponyms, homonyms and other concepts and through application of deep learning techniques.  In experiments conducted using three project datasets, both approaches significantly improved the accuracy of the generated trace.  However, both approaches introduce new challenges.  The first requires the construction of a domain-specific ontology and heuristics for reasoning across the ontology; while the second requires large collections of domain artifacts and trace links for training purposes.   In addition to technical advances, the project provided opportunities for training post-doctoral researchers, as well as graduate and undergraduate students.  Tools were developed which are now being deployed and evaluated in industrial projects.  In summary, the work conducted under this grant has led to advances in configuring tracing solutions, and has provided techniques and tools that lay the foundations for delivering semantic-techniques which will enable more accurate trace links to be automatically created.        Last Modified: 11/01/2017       Submitted by: Jane L Huang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
