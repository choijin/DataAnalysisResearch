<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Dynamic Abstractions for Verification</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Verification is currently a major bottleneck in the design of the&lt;br/&gt;hardware and software systems society depends on. Design errors&lt;br/&gt;can lead to recalls, software crashes, cyber attacks, and even&lt;br/&gt;the loss of life.  A fundamental approach for identifying and&lt;br/&gt;fixing design errors is to use formal verification, which checks&lt;br/&gt;whether a set of system properties holds across all possible&lt;br/&gt;system behaviors.  Unfortunately, current algorithms suffer from&lt;br/&gt;poor scalability and cannot be directly applied to modern&lt;br/&gt;designs. This drawback is currently addressed with the use of&lt;br/&gt;manual abstractions that in essence hide irrelevant&lt;br/&gt;implementation details, thereby reducing the size of formulas to&lt;br/&gt;be analyzed.  Besides the manual effort involved, another&lt;br/&gt;disadvantage of this approach is that it is very hard to&lt;br/&gt;guarantee that an abstraction is correct. The goal of the proposed&lt;br/&gt;research is to develop efficient methods for algorithmically&lt;br/&gt;building provably correct abstractions, thereby drastically&lt;br/&gt;improving the scalability of formal verification algorithms.&lt;br/&gt;&lt;br/&gt;Our approach to finding correct abstractions is based on the&lt;br/&gt;following three ideas.  First, building an abstraction that is&lt;br/&gt;correct in a small subspace of the search space is easy. Second,&lt;br/&gt;one can stitch together abstractions found for subspaces to&lt;br/&gt;produce an abstraction for the entire subspace explored so far.&lt;br/&gt;Third, abstractions built for explored subspaces may hold in many&lt;br/&gt;subspaces that have not been visited yet. This re-usability of&lt;br/&gt;abstractions makes our approach extremely powerful in identifying&lt;br/&gt;irrelevant parts of formulas.  From a theoretical point of view,&lt;br/&gt;the proposed research will lead to a better understanding of&lt;br/&gt;abstractions and to the development of new formal verification&lt;br/&gt;algorithms. From a practical point of view, it will result in the&lt;br/&gt;creation of various kinds of tools including SAT-solvers and&lt;br/&gt; model checkers that will boost the scalability of formal&lt;br/&gt;verification.</AbstractNarration>
<MinAmdLetterDate>06/21/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/21/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319580</AwardID>
<Investigator>
<FirstName>Panagiotis</FirstName>
<LastName>Manolios</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Panagiotis Manolios</PI_FULL_NAME>
<EmailAddress>pete@ccs.neu.edu</EmailAddress>
<PI_PHON>6173733694</PI_PHON>
<NSF_ID>000186555</NSF_ID>
<StartDate>06/21/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Evgueni</FirstName>
<LastName>Goldberg</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Evgueni Goldberg</PI_FULL_NAME>
<EmailAddress>eigold@ccs.neu.edu</EmailAddress>
<PI_PHON>6173735600</PI_PHON>
<NSF_ID>000555208</NSF_ID>
<StartDate>06/21/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northeastern University</Name>
<CityName>BOSTON</CityName>
<ZipCode>021155005</ZipCode>
<PhoneNumber>6173733004</PhoneNumber>
<StreetAddress>360 HUNTINGTON AVE</StreetAddress>
<StreetAddress2><![CDATA[177-500]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001423631</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHEASTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001423631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northeastern University]]></Name>
<CityName>Boston</CityName>
<StateCode>MA</StateCode>
<ZipCode>021155005</ZipCode>
<StreetAddress><![CDATA[360 Huntington Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramElement>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Society crucially depends on hardware and software behaving correctly. Formal methods provide a foundational way to ensure correctness, as they allow us to use computer algorithms to reason about computational systems in a mathematically rigorous way. One of the major challenges in the area is that formal methods are difficult to apply to industrial designs. This is primarily due to scalability problems.&nbsp; As part of this project, we designed and developed scalable, structure-aware algorithms for analyzing the kinds of formulas that arise during formal verification. This includes large propositional formulas that arise in the design of circuits, in artificial intelligence applications, in scheduling applications, in test case generation applications and in the analysis of programs. Also included are formulas with quantifiers and formulas over very expressive logics that can be used to model arbitrary computation and whose decision problems are undecidable. We also developed tools based on these algorithms and evaluated the tools to analyze their effectiveness. Our algorithms construct abstractions that drastically simplify the verification task. These abstractions are dynamic, meaning that they change over time and depend on part of the design being verified. The techniques developed contribute a new fundamentally different class of tools for extending the reach of formal methods algorithms, thereby directly affecting software and hardware verification, as well as the verification of safety-critical systems.</p><br> <p>            Last Modified: 04/15/2018<br>      Modified by: Panagiotis&nbsp;Manolios</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Society crucially depends on hardware and software behaving correctly. Formal methods provide a foundational way to ensure correctness, as they allow us to use computer algorithms to reason about computational systems in a mathematically rigorous way. One of the major challenges in the area is that formal methods are difficult to apply to industrial designs. This is primarily due to scalability problems.  As part of this project, we designed and developed scalable, structure-aware algorithms for analyzing the kinds of formulas that arise during formal verification. This includes large propositional formulas that arise in the design of circuits, in artificial intelligence applications, in scheduling applications, in test case generation applications and in the analysis of programs. Also included are formulas with quantifiers and formulas over very expressive logics that can be used to model arbitrary computation and whose decision problems are undecidable. We also developed tools based on these algorithms and evaluated the tools to analyze their effectiveness. Our algorithms construct abstractions that drastically simplify the verification task. These abstractions are dynamic, meaning that they change over time and depend on part of the design being verified. The techniques developed contribute a new fundamentally different class of tools for extending the reach of formal methods algorithms, thereby directly affecting software and hardware verification, as well as the verification of safety-critical systems.       Last Modified: 04/15/2018       Submitted by: Panagiotis Manolios]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
