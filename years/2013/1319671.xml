<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: VeriQ: Formal Quantitative Software Verification in Realistic Application Scenarios</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2013</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>449721.00</AwardTotalIntnAmount>
<AwardAmount>449721</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The goal of the VeriQ project is to develop techniques for the formal&lt;br/&gt;verification of quantitative properties of software.  Every program&lt;br/&gt;requires a certain amount of resources such as memory, power, and&lt;br/&gt;processor cycles to perform its task.  A proof that the resources&lt;br/&gt;provided by the hardware of the system are sufficient to safely&lt;br/&gt;execute a program should be the first step in the verification of that&lt;br/&gt;program.  In addition to the verification of such resource-usage&lt;br/&gt;bounds, there are a vast number of domain-specific quantitative&lt;br/&gt;properties that are crucial for the correctness of software.  Finally,&lt;br/&gt;reasoning about quantities can simplify the verification of&lt;br/&gt;non-quantitative properties such as termination.  By advancing the&lt;br/&gt;state-of-the art in quantitative verification, VeriQ facilitates the&lt;br/&gt;development of reliable, efficient and predictable software systems.&lt;br/&gt;&lt;br/&gt;The investigators focus on three technical goals that are among the&lt;br/&gt;most important problems in the field of quantitative verification.&lt;br/&gt;First, they develop an automatic and compositional resource analysis&lt;br/&gt;for programs that are written in high-level languages with garbage&lt;br/&gt;collection, side effects, and higher-order functions.  Second, they&lt;br/&gt;apply the techniques from resource analysis for high-level languages&lt;br/&gt;to simplify the reasoning about quantitative properties of realistic&lt;br/&gt;system code with concurrent execution and advanced control flow.&lt;br/&gt;Third, they investigate the relationship between quantitative&lt;br/&gt;properties and liveness properties with the goal of utilizing&lt;br/&gt;quantitative reasoning techniques in correctness proofs of software&lt;br/&gt;verification.</AbstractNarration>
<MinAmdLetterDate>07/12/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/24/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319671</AwardID>
<Investigator>
<FirstName>Zhong</FirstName>
<LastName>Shao</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zhong Shao</PI_FULL_NAME>
<EmailAddress>zhong.shao@yale.edu</EmailAddress>
<PI_PHON>2034326828</PI_PHON>
<NSF_ID>000201856</NSF_ID>
<StartDate>07/12/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jan</FirstName>
<LastName>Hoffmann</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jan Hoffmann</PI_FULL_NAME>
<EmailAddress>jhoffmann@cmu.edu</EmailAddress>
<PI_PHON>4122686309</PI_PHON>
<NSF_ID>000636870</NSF_ID>
<StartDate>07/12/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Yale University</Name>
<CityName>New Haven</CityName>
<ZipCode>065208327</ZipCode>
<PhoneNumber>2037854689</PhoneNumber>
<StreetAddress>Office of Sponsored Projects</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 208327]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CT03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>043207562</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>YALE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>043207562</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Yale University]]></Name>
<CityName>New Haven</CityName>
<StateCode>CT</StateCode>
<ZipCode>065208285</ZipCode>
<StreetAddress><![CDATA[51 Prospect Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CT03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~449721</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A growing research community proposes formal verification as a mathematical technique to enable software engineers to build reliable, efficient and predictable software systems. The VeriQ project funded by this research grant focuses on the verification of quantitative properties of software.&nbsp; Every program requires resources such as memory, power, and processor cycles to perform its task. A precise understanding of the resource-usage characteristics of a program is necessary to produce correct and secure software. The research performed for VeriQ focused not only on advancing understanding but on precisely describing and formally proving quantitative characteristics of programs.</p> <p>Under this research grant, PIs Shao and Hoffmann and their team at Yale University (and also Carnegie Mellon University) have significantly advanced the state-of-the-art in quantitative verification to formally reason about quantitative properties of software in realistic application scenarios.</p> <p>A major outcome of their work is a set of modular and certified solutions to the resource-bound problem. This problem consists in finding bounds on the resource requirements of a program. To prove the practicality of their approach, the PIs implement multiple systems with automation support and evaluate them on examples and benchmarks against state-of-the-art tools.&nbsp; First, their systems are compositional, allowing to split the resource analysis of a program in smaller units. Second, the design they propose enables modular implementations split in orthogonal components, making the systems more easily adaptable to new languages and new automation techniques. Third, their systems allow modular use of automation by providing a unified setting in which automatically-derived proofs can be combined with manual reasoning.</p> <p>To provide the highest confidence level for the inferences made in their resource-analysis systems, they use machine-checkable certificates. The certificates produced contain a theorem asserting the validity of the bounds inferred with respect to resource-aware semantics of the language. They are free from any assumptions and checkable without modifications by the Coq proof assistant.</p> <p>VeriQ research was highly visible and influential. It contributed to 14 peer-reviewed publications in conference proceedings and journals; including 6 publications at the prestigious programming language conferences POPL and PLDI. It also added to the development of the certified operating-system kernel CertiKOS and resulted in the design and implementation of the prototype resource analysis tools Resource Aware ML and C4B. Moreover, VeriQ predated the DARPA program Space/Time Analysis for Cybersecurity (STAC), shared many of its goals and created synergies. Finally, VeriQ research was incorporated into the graduate course "Resource Analysis" taught at Carnegie Mellon University and has supported graduate students at Yale University and Carnegie Mellon.</p> <p>In summary, the foundational work on quantitative verification resulted in the following outstanding research successes. 1) The development of the first technique that can automatically verify stack-space bounds for C programs. 2) The technology transfer of automatic amortized resource analysis from functional to imperative programs and the successful use of the resulting tool C4B to identify space/time vulnerabilities in the DARPA STAC program. 3) The development of a tool for identifying and eliminating the security risk of side channels in software.&nbsp; VeriQ research is also used in multiple follow-up projects, including the analysis of probabilistic programs, resource guarantees in verified system software, and resource-aware program synthesis.</p><br> <p>            Last Modified: 09/16/2018<br>      Modified by: Zhong&nbsp;Shao</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A growing research community proposes formal verification as a mathematical technique to enable software engineers to build reliable, efficient and predictable software systems. The VeriQ project funded by this research grant focuses on the verification of quantitative properties of software.  Every program requires resources such as memory, power, and processor cycles to perform its task. A precise understanding of the resource-usage characteristics of a program is necessary to produce correct and secure software. The research performed for VeriQ focused not only on advancing understanding but on precisely describing and formally proving quantitative characteristics of programs.  Under this research grant, PIs Shao and Hoffmann and their team at Yale University (and also Carnegie Mellon University) have significantly advanced the state-of-the-art in quantitative verification to formally reason about quantitative properties of software in realistic application scenarios.  A major outcome of their work is a set of modular and certified solutions to the resource-bound problem. This problem consists in finding bounds on the resource requirements of a program. To prove the practicality of their approach, the PIs implement multiple systems with automation support and evaluate them on examples and benchmarks against state-of-the-art tools.  First, their systems are compositional, allowing to split the resource analysis of a program in smaller units. Second, the design they propose enables modular implementations split in orthogonal components, making the systems more easily adaptable to new languages and new automation techniques. Third, their systems allow modular use of automation by providing a unified setting in which automatically-derived proofs can be combined with manual reasoning.  To provide the highest confidence level for the inferences made in their resource-analysis systems, they use machine-checkable certificates. The certificates produced contain a theorem asserting the validity of the bounds inferred with respect to resource-aware semantics of the language. They are free from any assumptions and checkable without modifications by the Coq proof assistant.  VeriQ research was highly visible and influential. It contributed to 14 peer-reviewed publications in conference proceedings and journals; including 6 publications at the prestigious programming language conferences POPL and PLDI. It also added to the development of the certified operating-system kernel CertiKOS and resulted in the design and implementation of the prototype resource analysis tools Resource Aware ML and C4B. Moreover, VeriQ predated the DARPA program Space/Time Analysis for Cybersecurity (STAC), shared many of its goals and created synergies. Finally, VeriQ research was incorporated into the graduate course "Resource Analysis" taught at Carnegie Mellon University and has supported graduate students at Yale University and Carnegie Mellon.  In summary, the foundational work on quantitative verification resulted in the following outstanding research successes. 1) The development of the first technique that can automatically verify stack-space bounds for C programs. 2) The technology transfer of automatic amortized resource analysis from functional to imperative programs and the successful use of the resulting tool C4B to identify space/time vulnerabilities in the DARPA STAC program. 3) The development of a tool for identifying and eliminating the security risk of side channels in software.  VeriQ research is also used in multiple follow-up projects, including the analysis of probabilistic programs, resource guarantees in verified system software, and resource-aware program synthesis.       Last Modified: 09/16/2018       Submitted by: Zhong Shao]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
