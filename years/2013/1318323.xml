<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Collaborative: Discovering Software Vulnerabilities through Interactive Static Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>249854.00</AwardTotalIntnAmount>
<AwardAmount>249854</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software development is a complex and manual process, in part because typical software programs contain more than hundreds of thousands lines of computer code. If software programmers fail to perform critical checks in that code, such as making sure a user is authorized to update an account, serious security compromises ensue. Indeed, vulnerable software is one of the leading causes of cyber security problems.  Checking for security problems is very expensive because it requires examining computer code for security mistakes, and such a process requires significant manual effort. This research project aims at developing an interactive help system to warn software programmers about potential security mistakes, similar to the way modern word processors warn writers of spelling and grammar errors. This is likely lead to new functions for software development tools that will significantly reduce security vulnerabilities in software.&lt;br/&gt; &lt;br/&gt;The research is based on the concept of interactive static analysis, a novel mixed-initiative paradigm for interacting with programmers to aid in the detection and prevention of security vulnerabilities. Static analysis is seamlessly integrated into the development environment in such a way that programmers are not required to learn additional programming language and analysis concepts beyond the use of the development environment. Static analysis is performed in the context of development, allowing programmers to utilize and influence such analysis during their program construction. The goals of this research are to bring programmers into the security loop, improving their ability to detect, understand, and prevent vulnerabilities; and utilize the programmer's contextual knowledge to drive customized static analysis, detecting software vulnerabilities that are difficult to detect using current static analysis techniques.</AbstractNarration>
<MinAmdLetterDate>09/13/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/13/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1318323</AwardID>
<Investigator>
<FirstName>Emerson</FirstName>
<LastName>Murphy-Hill</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Emerson R Murphy-Hill</PI_FULL_NAME>
<EmailAddress>emerson@csc.ncsu.edu</EmailAddress>
<PI_PHON>9195152444</PI_PHON>
<NSF_ID>000578912</NSF_ID>
<StartDate>09/13/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2><![CDATA[Admin. III, STE 240]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[North Carolina State University]]></Name>
<CityName/>
<StateCode>NC</StateCode>
<ZipCode>276958206</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~249854</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-3f0bb53a-7fff-9abf-145e-8f18779ce524"> <p dir="ltr"><span>Software vulnerabilities are one of the root causes of security problems that impact consumers. These vulnerabilities are introduced into application source code by software developers. Many organizations employ application security experts who use a variety of tools to detect security vulnerabilities in software. As part of this project, we studied these experts, and our results highlight that separating security from development adds communication overhead and barriers. And finding and fixing security vulnerabilities so late in the software lifecycle can result in costly delays and expense, and an increased likelihood that applications are not adequately secure. Improving application security will involve a combination of organizational processes to incentivize and support developers in focusing on security issues earlier, developer training to give them more concrete and actionable knowledge and motivation, and tools for both developers and application security experts that reduce the effort of using their tools.</span></p> <br /> <p dir="ltr"><span>Our primary contribution is to demonstrate a new approach called interactive static analysis, focused on helping software developers detect and fix security vulnerabilities earlier in the software lifecycle. Interactive static analysis places security warnings alongside the code that developers write, providing explanations and semi-automated fixes for security vulnerabilities. The approach can increase the awareness of security vulnerabilities and the practice of secure programming techniques among developers. We also utilize the programmer&rsquo;s knowledge of the code to help to customize the analysis, detecting additional vulnerabilities beyond the capabilities of existing tools. To that end, we implemented and evaluated interactive static analysis within a prototype tool called ASIDE, Application Security in the IDE.</span></p> <br /> <p dir="ltr"><span>ASIDE is an Eclipse plug-in for the Java and PHP languages, identifying vulnerabilities due to lack of input validation, output encoding, SQL injection, and access control issues. We evaluated ASIDE on multiple open source applications, demonstrating its effectiveness in detecting vulnerabilities and finding multiple new vulnerabilities. Our results highlighted the limitations of fully automated techniques, emphasizing the potential benefits of our more interactive tool requiring human input. Our user study demonstrated that developers with a variety of backgrounds can use the tool successfully, and appreciate its capabilities. One of the challenges we found that developers face using interactive static analysis is knowing whether they make the correct decisions within the tool to successfully fix the vulnerability. We examined two different methods to address this issue.</span></p> <br /> <p dir="ltr"><span>We also cataloged developers' defect resolution strategies, organized by the information need each that strategy addresses. For example, to understand how to implement a fix, developers strategically surveyed multiple sources of information, including the web, the tool&rsquo;s notification, and other modules in the code. We also described the common assumptions that undermined those strategies. To help facilitate these strategies, we designed and implemented a prototype tool, Flower, that supports structural program navigation while maintaining a minimalistic interface. We also evaluated a Just-in-Time Static Analysis technique, which introduces a layered approach to analyzing programs incrementally. The idea here is that some program analysis tools output can be presented early before analysis completes, then can provide more results later. We generalized our results by conducting an evaluation of three security-oriented static analysis tools. Using advanced usability techniques, we identify several issues that detract from the usability of static analysis tools. The issues we identified range from workflows that do not support developers to interface features that do not scale. We make these preliminary findings actionable by outlining how our results can be used to improve the state-of-the-art in static analysis tool interfaces.</span></p> <br /> <p dir="ltr"><span>Our research demonstrates the impact and uses of a new paradigm of vulnerability detection &nbsp;&ndash; interactive static analysis, which can be incorporated into commercial static analysis tools. The evaluation results of each of our tools can inform a wide range of security tool developers with guidelines for creating tools aimed helping software developers prevent software vulnerabilities, in turn, reducing the security risks of users of those applications.</span></p> </span></p><br> <p>            Last Modified: 01/03/2019<br>      Modified by: Emerson&nbsp;R&nbsp;Murphy-Hill</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Software vulnerabilities are one of the root causes of security problems that impact consumers. These vulnerabilities are introduced into application source code by software developers. Many organizations employ application security experts who use a variety of tools to detect security vulnerabilities in software. As part of this project, we studied these experts, and our results highlight that separating security from development adds communication overhead and barriers. And finding and fixing security vulnerabilities so late in the software lifecycle can result in costly delays and expense, and an increased likelihood that applications are not adequately secure. Improving application security will involve a combination of organizational processes to incentivize and support developers in focusing on security issues earlier, developer training to give them more concrete and actionable knowledge and motivation, and tools for both developers and application security experts that reduce the effort of using their tools.   Our primary contribution is to demonstrate a new approach called interactive static analysis, focused on helping software developers detect and fix security vulnerabilities earlier in the software lifecycle. Interactive static analysis places security warnings alongside the code that developers write, providing explanations and semi-automated fixes for security vulnerabilities. The approach can increase the awareness of security vulnerabilities and the practice of secure programming techniques among developers. We also utilize the programmer?s knowledge of the code to help to customize the analysis, detecting additional vulnerabilities beyond the capabilities of existing tools. To that end, we implemented and evaluated interactive static analysis within a prototype tool called ASIDE, Application Security in the IDE.   ASIDE is an Eclipse plug-in for the Java and PHP languages, identifying vulnerabilities due to lack of input validation, output encoding, SQL injection, and access control issues. We evaluated ASIDE on multiple open source applications, demonstrating its effectiveness in detecting vulnerabilities and finding multiple new vulnerabilities. Our results highlighted the limitations of fully automated techniques, emphasizing the potential benefits of our more interactive tool requiring human input. Our user study demonstrated that developers with a variety of backgrounds can use the tool successfully, and appreciate its capabilities. One of the challenges we found that developers face using interactive static analysis is knowing whether they make the correct decisions within the tool to successfully fix the vulnerability. We examined two different methods to address this issue.   We also cataloged developers' defect resolution strategies, organized by the information need each that strategy addresses. For example, to understand how to implement a fix, developers strategically surveyed multiple sources of information, including the web, the tool?s notification, and other modules in the code. We also described the common assumptions that undermined those strategies. To help facilitate these strategies, we designed and implemented a prototype tool, Flower, that supports structural program navigation while maintaining a minimalistic interface. We also evaluated a Just-in-Time Static Analysis technique, which introduces a layered approach to analyzing programs incrementally. The idea here is that some program analysis tools output can be presented early before analysis completes, then can provide more results later. We generalized our results by conducting an evaluation of three security-oriented static analysis tools. Using advanced usability techniques, we identify several issues that detract from the usability of static analysis tools. The issues we identified range from workflows that do not support developers to interface features that do not scale. We make these preliminary findings actionable by outlining how our results can be used to improve the state-of-the-art in static analysis tool interfaces.   Our research demonstrates the impact and uses of a new paradigm of vulnerability detection  &ndash; interactive static analysis, which can be incorporated into commercial static analysis tools. The evaluation results of each of our tools can inform a wide range of security tool developers with guidelines for creating tools aimed helping software developers prevent software vulnerabilities, in turn, reducing the security risks of users of those applications.        Last Modified: 01/03/2019       Submitted by: Emerson R Murphy-Hill]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
