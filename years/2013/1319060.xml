<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Static Analysis for Safe Browser Addons</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>499875.00</AwardTotalIntnAmount>
<AwardAmount>499875</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This research project helps secure the privacy of web browser users. It specifically targets the browser addon framework, which allows third-party developers to extend the browser's functionality. These addons are written in JavaScript and have extraordinary privileges and access to sensitive user information. Therefore, vetting third-party addons to prevent malicious or accidental security violations is critical. However, the current vetting process for browser addons is manual and ad-hoc, making this process both tedious and error-prone. The goal of this research project is to enhance and automate addon vetting by using static analysis for JavaScript to enforce formal security policies.&lt;br/&gt;&lt;br/&gt;The approach taken by this project is three-fold: (1) design formal security policies to provide provable guarantees; (2) create a provably-sound static security analysis for JavaScript-based browser addons; and (3) develop new tools for explaining security problems in addon code so that third-party developers can revise insecure add ons to eliminate vulnerabilities. This work benefits society as a whole by giving people assurance that their sensitive information is being treated securely. The work also benefits academia and industry by providing the first-ever provably-sound JavaScript static analysis for browser addons. The techniques that are developed will advance understanding of how to usefully analyze dynamic languages such as JavaScript, and the analysis framework itself will enhance research infrastructure by providing a platform for researchers to develop static analyses for JavaScript.</AbstractNarration>
<MinAmdLetterDate>07/16/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/16/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319060</AwardID>
<Investigator>
<FirstName>Ben</FirstName>
<LastName>Hardekopf</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ben Hardekopf</PI_FULL_NAME>
<EmailAddress>benh@cs.ucsb.edu</EmailAddress>
<PI_PHON>8056175129</PI_PHON>
<NSF_ID>000549385</NSF_ID>
<StartDate>07/16/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Barbara</Name>
<CityName>Santa Barbara</CityName>
<ZipCode>931062050</ZipCode>
<PhoneNumber>8058934188</PhoneNumber>
<StreetAddress>Office of Research</StreetAddress>
<StreetAddress2><![CDATA[Rm 3227 Cheadle Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA24</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>094878394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SANTA BARBARA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Santa Barbara]]></Name>
<CityName>santa Barbara</CityName>
<StateCode>CA</StateCode>
<ZipCode>931065110</ZipCode>
<StreetAddress><![CDATA[University of California]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA24</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~499875</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A significant portion of modern life takes place online: financial transactions, medical records, shopping, entertainment, etc. Most of this content is accessed via web browsers. Modern web-browsers offer the ability to extend browser behavior with user-installed addons (also called extensions), written in JavaScript by third-party developers. These addons are a rich source of security vulnerabilities: they have much higher privileges than client-side JavaScript programs, and they are not subject to the sandboxing and other security restrictions that exist for client-side programs. There are a number of such security vulnerabilities that have been found in the wild, either bad actors (i.e., intentionally malicious addons) or that take advantage of poorly-secured addons. Official addon repositories (maintained by the various browser providers, such as Mozilla and Google) must vet addons to ensure that they are trustworthy. The current addon vetting process employs volunteers who manually inspect addon code. Addons are submitted daily and range in size from tens to hundreds of thousands of lines of code; previously-accepted addons are updated frequently and must be re-vetted; and rejected addons are revised and resubmitted. This review process is tedious, difficult, and error-prone.</p> <p><br />The goal of this project is to help secure the privacy and integrity of web browsers and their users, by helping to ensure that browser addons are secure and non-malicious using efficient automated techniques that detect bad addons with high confidence. The main technology we employ is static analysis of JavaScript code, a technique that automatically examines the addon to determine whether it can display any bad behaviors. JavaScript analysis is notoriously difficult, and this project required us to advance the state of the art in static analysis in a number of ways. Along the way, we have also investigated complementary software engineering methods that can help us secure addons in different ways.</p> <p><br />JAVASCRIPT ANALYSIS. We have formalized the semantics of JavaScript, meaning that we have produced a detailed mathematical description of how JavaScript programs behave. Based on that semantics, we were able to produce the first provably-sound JavaScript static analysis. Up to this point, it was an open questions whether a sound, sufficiently precise JavaScript analysis was even possible. We answered this question in the affirmative by building a novel addon security analysis on top of the provably sound static analysis engine and applying it to real-world browser addons with excellent results. In addition, we developed a new form of incremental analysis to greatly speed up analysis of addons that are constantly being changed and updated; this is the first instance of incremental analysis for JavaScript.</p> <p><br />TESTING ANALYSES. While our analysis could be proven sound on paper, an important question is whether our actual implementation of the analysis conforms to our formal model; i.e., did we implement the analysis correctly? To help us gain confidence in our implementation, we developed two new forms of testing for static analysis. One method we developed is based on language fuzzing, i.e., automatically generating correct JavaScript programs that we could run our analysis on and confirm that we get the correct result; using this method we could automatically test our analysis on millions of JavaScript programs. Another method we developed is to use symbolic execution to, effectively, run many test cases at the same time; this allows testing to efficiently cover much more of the possible testing space. These results are relevant and important for all types of static analysis because static analyses are notoriously difficult to test and the existing testing methodologies are not very advanced.</p> <p><br />CLONE DETECTION. While working on our JavaScript analysis, we also managed to investigate new techniques for clone detection, i.e., automatically discovering code that has been copied and pasted from elsewhere (thus the two code fragments are 'clones' of each other). First we developed a new approach for cross-language clone detection, an area that is becoming increasingly important as libraries and frameworks are implemented in multiple languages. Using this technique, for example, allows us to detect when code in one language has been updated with a bug fix but that fix was not propagated to the identical code on another language (a real-world problem that we were able to detect in real software). In addition, we developed a new technique for semantic clone detection, that is, code fragments that behave similarly even though they may look very different.</p> <p>All of these results advance the current state of the art and are directly applicable to the original problem of securing browser addons and improving the privacy and integrity of web browsers and their users.</p><br> <p>            Last Modified: 12/30/2018<br>      Modified by: Ben&nbsp;Hardekopf</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A significant portion of modern life takes place online: financial transactions, medical records, shopping, entertainment, etc. Most of this content is accessed via web browsers. Modern web-browsers offer the ability to extend browser behavior with user-installed addons (also called extensions), written in JavaScript by third-party developers. These addons are a rich source of security vulnerabilities: they have much higher privileges than client-side JavaScript programs, and they are not subject to the sandboxing and other security restrictions that exist for client-side programs. There are a number of such security vulnerabilities that have been found in the wild, either bad actors (i.e., intentionally malicious addons) or that take advantage of poorly-secured addons. Official addon repositories (maintained by the various browser providers, such as Mozilla and Google) must vet addons to ensure that they are trustworthy. The current addon vetting process employs volunteers who manually inspect addon code. Addons are submitted daily and range in size from tens to hundreds of thousands of lines of code; previously-accepted addons are updated frequently and must be re-vetted; and rejected addons are revised and resubmitted. This review process is tedious, difficult, and error-prone.   The goal of this project is to help secure the privacy and integrity of web browsers and their users, by helping to ensure that browser addons are secure and non-malicious using efficient automated techniques that detect bad addons with high confidence. The main technology we employ is static analysis of JavaScript code, a technique that automatically examines the addon to determine whether it can display any bad behaviors. JavaScript analysis is notoriously difficult, and this project required us to advance the state of the art in static analysis in a number of ways. Along the way, we have also investigated complementary software engineering methods that can help us secure addons in different ways.   JAVASCRIPT ANALYSIS. We have formalized the semantics of JavaScript, meaning that we have produced a detailed mathematical description of how JavaScript programs behave. Based on that semantics, we were able to produce the first provably-sound JavaScript static analysis. Up to this point, it was an open questions whether a sound, sufficiently precise JavaScript analysis was even possible. We answered this question in the affirmative by building a novel addon security analysis on top of the provably sound static analysis engine and applying it to real-world browser addons with excellent results. In addition, we developed a new form of incremental analysis to greatly speed up analysis of addons that are constantly being changed and updated; this is the first instance of incremental analysis for JavaScript.   TESTING ANALYSES. While our analysis could be proven sound on paper, an important question is whether our actual implementation of the analysis conforms to our formal model; i.e., did we implement the analysis correctly? To help us gain confidence in our implementation, we developed two new forms of testing for static analysis. One method we developed is based on language fuzzing, i.e., automatically generating correct JavaScript programs that we could run our analysis on and confirm that we get the correct result; using this method we could automatically test our analysis on millions of JavaScript programs. Another method we developed is to use symbolic execution to, effectively, run many test cases at the same time; this allows testing to efficiently cover much more of the possible testing space. These results are relevant and important for all types of static analysis because static analyses are notoriously difficult to test and the existing testing methodologies are not very advanced.   CLONE DETECTION. While working on our JavaScript analysis, we also managed to investigate new techniques for clone detection, i.e., automatically discovering code that has been copied and pasted from elsewhere (thus the two code fragments are 'clones' of each other). First we developed a new approach for cross-language clone detection, an area that is becoming increasingly important as libraries and frameworks are implemented in multiple languages. Using this technique, for example, allows us to detect when code in one language has been updated with a bug fix but that fix was not propagated to the identical code on another language (a real-world problem that we were able to detect in real software). In addition, we developed a new technique for semantic clone detection, that is, code fragments that behave similarly even though they may look very different.  All of these results advance the current state of the art and are directly applicable to the original problem of securing browser addons and improving the privacy and integrity of web browsers and their users.       Last Modified: 12/30/2018       Submitted by: Ben Hardekopf]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
