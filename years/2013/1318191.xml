<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: VeriF-OPT, a Verification Framework for Optimizations and Program Transformations</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>466000.00</AwardTotalIntnAmount>
<AwardAmount>466000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The modern world runs on software, and software runs on compilers, programs that bridge the gap between human-readable high-level programming languages and the low-level machine code that computers execute. Every year, millions of dollars and countless hours of effort go into ensuring that software is correct and reliable. However, the bulk of this analysis is applied at the high level, leaving the compiler as a potential weak link in the verification chain. Errors in a compiler are particularly insidious because they are difficult to isolate and reproduce, and potentially affect every program processed by that compiler.  The VeriF-OPT project aims to make it feasible to verify compilers by providing a user-friendly and reusable framework for constructing rigorous mathematical proofs of compiler correctness, thus removing a source of error that potentially undermines the verification of high-level programs.&lt;br/&gt;&lt;br/&gt;The VeriF-OPT project will use formal methods tools, including the Isabelle proof assistant and the K Framework for programming language specification, to develop a general, reusable framework for specifying and verifying compilers for any language, lowering the high barrier to entry for compiler verification. The framework will be designed to work particularly well for optimizations for parallel programs, which are often more complex and poorly understood than their sequential counterparts.  The core components of the framework are a domain-specific language for the specification of program transformations, an executable semantics for this language that allows compiler designers to test and refine their designs before committing to verification, and a formal semantics for the language that serves as the basis for proofs of correctness.  Every verification in VeriF-OPT will produce code fragments, lemmas, and other intermediate results that, thanks to the modular design of the framework, can be reused in future projects. By helping compiler designers, testers, and verifiers work together to create compilers with strong guarantees of correctness, the project will raise the standard for software reliability and help prevent costly and dangerous failures due to undetected and unexpected bugs.</AbstractNarration>
<MinAmdLetterDate>06/27/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/27/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1318191</AwardID>
<Investigator>
<FirstName>Elsa</FirstName>
<LastName>Gunter</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Elsa Gunter</PI_FULL_NAME>
<EmailAddress>egunter@cs.uiuc.edu</EmailAddress>
<PI_PHON>2172656118</PI_PHON>
<NSF_ID>000101665</NSF_ID>
<StartDate>06/27/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Grigore</FirstName>
<LastName>Rosu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Grigore Rosu</PI_FULL_NAME>
<EmailAddress>grosu@illinois.edu</EmailAddress>
<PI_PHON>2172447431</PI_PHON>
<NSF_ID>000488532</NSF_ID>
<StartDate>06/27/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>CHAMPAIGN</CityName>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress><![CDATA[1901 SOUTH FIRST ST.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~466000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>One of the most fundamental problems in programming is that of compiler correctness. &nbsp;Suppose we have a source program, written in &nbsp;a human-friendly programming language, where that program has some desirable property, such as safety or correctness. &nbsp;After the program has been compiled (translated) into a low-level language, such as machine code for some specific computer architecture, does it still have that property? &nbsp;To guarantee this, we need to know that the compiler's translation is faithful to the intended meaning of the original language in which the program was written. &nbsp;Unfortunately, compiler errors do exist, including ones that effect program outcomes and they are particularly insidious because they are difficult to isolate, may be externally noticeable in only a few select cases, potentially affect every program processed by that compiler, and are both more likely to occur and more difficult to detect when dealing with parallel programs. &nbsp;Finding such errors requires considerable effort to detect and resolve. &nbsp;The phases of a compiler where it tries to improve the efficiency of the original program (compiler optimizations) are extremely important for modern computing, but also are particularly error-prone, especially when compiling code to be run with pieces running simultaneously on multiple computer processors (parallel programs).</p> <p>Our contribution to the solution of this problem is a framework for <span>verifying</span> that compiler optimizations preserve the desired functional behavior of code. &nbsp;This framework has two <span>foci</span>. The first is the expression and validation of compiler optimizations. &nbsp;Did the optimization produce the translated program expected? The second is the expression and proof of correctness the optimization. &nbsp;Does the optimization always produce translated programs that behave as the original programs were designed to? &nbsp;For the first part, our framework provides an expressive language for the specification of optimizations and program transformations; semantics (meaning) for this language in an interactive theorem prover, providing a basis for formal reasoning about optimizations; and a means for directly executing optimizations expressed in this specification language, allowing compiler designers to test and refine their designs before investing in the labor-intensive process of verification. &nbsp;For the second, our framework integrates an existing system for the executable specification of programming languages (i.e. you can run code in the language directly using the language specification) with the same interactive theorem prover. &nbsp;This second part allows the compiler writer to formally prove that the optimizations specified in the first part do not alter the meaning of the programs they translate.</p> <p>Using this system, we have been able to prove that a collection of elementary, local optimizations for a commonly used compiler framework preserve a broad collection of program properties. We have further shown that composing these elementary optimization in our framework maintains the preservation of these program properties. &nbsp;As a proof-of-concept, we have expressed relatively complex optimizations such as loop peeling and partial redundant code elimination as a composition of these elementary local optimizations, and derived correctness properties of the complex optimizations as a direct consequence of the correctness properties of the elementary ones.</p> <p>Part of the impact of this project was the contribution to the technical training of students for the workforce. &nbsp;One graduate student completed his PhD while supported by this grant, and now has a position in an assistant professor at an American research university, where he continues to teach and train graduate students in the area of this grant. &nbsp;Two additional graduate students, one of whom is a female, have been funded, and were between half a year and two years away from completing their <span>PhDs</span> on work related to this grant at the end of this grant. &nbsp;One post-doc received partial summer funding on this grant. &nbsp;He has subsequently taken a position as a research assistant professor at an American research university. &nbsp;Three graduate students, including one female, did projects as a part of their <span>Master's</span> degrees using the tools built in the project. &nbsp;Five undergraduate students, including two females, wrote <span>bachelor's</span> theses based on projects using the tools and theories developed in this project, including the design, development, testing and verification of basic program transformations.</p> <p>This Project Outcomes Report for the General Public is displayed verbatim as submitted by the Principal Investigator (PI) for this award. Any opinions, findings, and conclusions or recommendations expressed in this Report are those of the PI and do not necessarily reflect the views of the National Science Foundation; NSF has not approved or endorsed its content.</p> <p>&nbsp;</p><br> <p>            Last Modified: 06/02/2019<br>      Modified by: Elsa&nbsp;Gunter</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ One of the most fundamental problems in programming is that of compiler correctness.  Suppose we have a source program, written in  a human-friendly programming language, where that program has some desirable property, such as safety or correctness.  After the program has been compiled (translated) into a low-level language, such as machine code for some specific computer architecture, does it still have that property?  To guarantee this, we need to know that the compiler's translation is faithful to the intended meaning of the original language in which the program was written.  Unfortunately, compiler errors do exist, including ones that effect program outcomes and they are particularly insidious because they are difficult to isolate, may be externally noticeable in only a few select cases, potentially affect every program processed by that compiler, and are both more likely to occur and more difficult to detect when dealing with parallel programs.  Finding such errors requires considerable effort to detect and resolve.  The phases of a compiler where it tries to improve the efficiency of the original program (compiler optimizations) are extremely important for modern computing, but also are particularly error-prone, especially when compiling code to be run with pieces running simultaneously on multiple computer processors (parallel programs).  Our contribution to the solution of this problem is a framework for verifying that compiler optimizations preserve the desired functional behavior of code.  This framework has two foci. The first is the expression and validation of compiler optimizations.  Did the optimization produce the translated program expected? The second is the expression and proof of correctness the optimization.  Does the optimization always produce translated programs that behave as the original programs were designed to?  For the first part, our framework provides an expressive language for the specification of optimizations and program transformations; semantics (meaning) for this language in an interactive theorem prover, providing a basis for formal reasoning about optimizations; and a means for directly executing optimizations expressed in this specification language, allowing compiler designers to test and refine their designs before investing in the labor-intensive process of verification.  For the second, our framework integrates an existing system for the executable specification of programming languages (i.e. you can run code in the language directly using the language specification) with the same interactive theorem prover.  This second part allows the compiler writer to formally prove that the optimizations specified in the first part do not alter the meaning of the programs they translate.  Using this system, we have been able to prove that a collection of elementary, local optimizations for a commonly used compiler framework preserve a broad collection of program properties. We have further shown that composing these elementary optimization in our framework maintains the preservation of these program properties.  As a proof-of-concept, we have expressed relatively complex optimizations such as loop peeling and partial redundant code elimination as a composition of these elementary local optimizations, and derived correctness properties of the complex optimizations as a direct consequence of the correctness properties of the elementary ones.  Part of the impact of this project was the contribution to the technical training of students for the workforce.  One graduate student completed his PhD while supported by this grant, and now has a position in an assistant professor at an American research university, where he continues to teach and train graduate students in the area of this grant.  Two additional graduate students, one of whom is a female, have been funded, and were between half a year and two years away from completing their PhDs on work related to this grant at the end of this grant.  One post-doc received partial summer funding on this grant.  He has subsequently taken a position as a research assistant professor at an American research university.  Three graduate students, including one female, did projects as a part of their Master's degrees using the tools built in the project.  Five undergraduate students, including two females, wrote bachelor's theses based on projects using the tools and theories developed in this project, including the design, development, testing and verification of basic program transformations.  This Project Outcomes Report for the General Public is displayed verbatim as submitted by the Principal Investigator (PI) for this award. Any opinions, findings, and conclusions or recommendations expressed in this Report are those of the PI and do not necessarily reflect the views of the National Science Foundation; NSF has not approved or endorsed its content.          Last Modified: 06/02/2019       Submitted by: Elsa Gunter]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
