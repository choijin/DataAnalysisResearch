<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Collaborative: Similary-Based Program Analyses for Eliminating Vulnerabilities</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2013</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The security of critical information infrastructures depends upon effective techniques to detect vulnerabilities commonly exploited by malicious attacks. Due to poor coding practices or human error, a known vulnerability discovered and patched in one code location may often exist in many other unpatched code locations, either in the same code base or other code bases. Furthermore, patches are often error-prone, resulting in new vulnerabilities. This project develops practical techniques for detecting code-level similarity to prevent such vulnerabilities. It has the potential to help build a more reliable and secure information system infrastructure, which will have tremendous economical impact on society because of our growing reliance on information technologies.&lt;br/&gt;&lt;br/&gt;In particular, the project aims to develop practical techniques for similarity-based testing and analysis to detect unpatched vulnerable code and validate patches to the detected vulnerable code at both the source code and binary levels. To this end, it focuses on three main technical directions: (1) developing techniques for detecting source-level vulnerabilities by adapting and refining an industrial-strength tool, (2) developing capabilities of detecting binary-level vulnerabilities by extending preliminary work on detecting code clones in binaries, and (3) supporting patch validation and repair by developing methodologies and techniques to validate software patches and help produce correct, secure patches. This project helps discover new techniques for source- and binary-level vulnerability analysis and gain better understandings of the fundamental and practical challenges for building highly secure and reliable software.</AbstractNarration>
<MinAmdLetterDate>07/18/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/18/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319187</AwardID>
<Investigator>
<FirstName>Zhendong</FirstName>
<LastName>Su</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zhendong Su</PI_FULL_NAME>
<EmailAddress>su@cs.ucdavis.edu</EmailAddress>
<PI_PHON>5307545376</PI_PHON>
<NSF_ID>000336300</NSF_ID>
<StartDate>07/18/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Davis</Name>
<CityName>Davis</CityName>
<ZipCode>956186134</ZipCode>
<PhoneNumber>5307547700</PhoneNumber>
<StreetAddress>OR/Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1850 Research Park Dr., Ste 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>047120084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, DAVIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Davis]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>956165294</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>For the duration of this NSF project, we, the principal investigatorand graduate students, have introduced and developed practical testingand analysis techniques to detect defects and validate patches atsource and binary levels, and effectively recover from program runtimefailures. This project has helped discover new analysis and runtimerecovery techniques, and helped gain better understandings of thefundamental and practical challenges for building highly secure andreliable software. The conducted research and educational activitieshave advanced the state-of-the-art in improving software security andreliability, and helped train next generation researchers andengineers. More specifically,</p> <p>- We have developed a hybrid semantic and syntactic technique toward&nbsp; binary similarity detection. This unique combination effectively&nbsp; balances precision and recall. It works on stripped binaries, and is&nbsp; robust against compiler optimizations and fine-grained, detecting&nbsp; similarity at the granularity of functions.&nbsp;</p> <p>- We have developed the forced execution concept of binaries for&nbsp; control flow reconstruction and engineered an effective binary&nbsp; analysis system. It explores different execution paths inside&nbsp; binaries by systematically forcing branch outcomes. It has been&nbsp; applied to construct control flow graphs and call graphs for&nbsp; unknown binaries and to expose behaviors of malware.</p> <p>- We have developed a novel, guided differential testing technique to&nbsp; validate real-world certificate validation code. We leverage easily&nbsp; accessible Internet certificates as seed certificates and diversify&nbsp; them by adapting Markov Chain Monte Carlo sampling. The technique is&nbsp; practical and effective for helping improve the robustness of&nbsp; SSL/TLS implementations.</p> <p>- We have developed a hybrid dataflow testing framework for more&nbsp; effective software testing. Our framework is based on dynamic&nbsp; symbolic execution and reachability checking in software model&nbsp; checking, yielding a practical hybrid dataflow testing technique&nbsp; that combines the two approaches' respective strengths.</p> <p>- We have developed an effective, low-overhead technique to&nbsp; automatically repair program crashes by extracting and modeling&nbsp; similar crashes, and using how similar failures are handled to&nbsp; repair and recover from crashes.&nbsp; We applied it to effectively&nbsp; recover from a majority of 52 real-world bugs.</p> <p>- We have developed an effective guided approach to perform stochastic&nbsp; model-based testing on Android apps, and evaluated it on open-source&nbsp; apps and thousands of popular apps from the Google Play store, and&nbsp; detected several thousands previously unknown and unique crashes in&nbsp; these apps. We continue our testing efforts to help app developers&nbsp; build higher-quality apps.</p> <p>- We have disseminated our research results through publications in&nbsp; top outlets such as highly-competitive conferences, tool&nbsp; distributions and research exchanges.</p> <p>- We have successfully trained the next generation computer scientists&nbsp; through postdoctoral scholar and graduate student advising, and&nbsp; engineers through undergraduate and graduate level education.</p><br> <p>            Last Modified: 11/10/2017<br>      Modified by: Zhendong&nbsp;Su</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ For the duration of this NSF project, we, the principal investigatorand graduate students, have introduced and developed practical testingand analysis techniques to detect defects and validate patches atsource and binary levels, and effectively recover from program runtimefailures. This project has helped discover new analysis and runtimerecovery techniques, and helped gain better understandings of thefundamental and practical challenges for building highly secure andreliable software. The conducted research and educational activitieshave advanced the state-of-the-art in improving software security andreliability, and helped train next generation researchers andengineers. More specifically,  - We have developed a hybrid semantic and syntactic technique toward  binary similarity detection. This unique combination effectively  balances precision and recall. It works on stripped binaries, and is  robust against compiler optimizations and fine-grained, detecting  similarity at the granularity of functions.   - We have developed the forced execution concept of binaries for  control flow reconstruction and engineered an effective binary  analysis system. It explores different execution paths inside  binaries by systematically forcing branch outcomes. It has been  applied to construct control flow graphs and call graphs for  unknown binaries and to expose behaviors of malware.  - We have developed a novel, guided differential testing technique to  validate real-world certificate validation code. We leverage easily  accessible Internet certificates as seed certificates and diversify  them by adapting Markov Chain Monte Carlo sampling. The technique is  practical and effective for helping improve the robustness of  SSL/TLS implementations.  - We have developed a hybrid dataflow testing framework for more  effective software testing. Our framework is based on dynamic  symbolic execution and reachability checking in software model  checking, yielding a practical hybrid dataflow testing technique  that combines the two approaches' respective strengths.  - We have developed an effective, low-overhead technique to  automatically repair program crashes by extracting and modeling  similar crashes, and using how similar failures are handled to  repair and recover from crashes.  We applied it to effectively  recover from a majority of 52 real-world bugs.  - We have developed an effective guided approach to perform stochastic  model-based testing on Android apps, and evaluated it on open-source  apps and thousands of popular apps from the Google Play store, and  detected several thousands previously unknown and unique crashes in  these apps. We continue our testing efforts to help app developers  build higher-quality apps.  - We have disseminated our research results through publications in  top outlets such as highly-competitive conferences, tool  distributions and research exchanges.  - We have successfully trained the next generation computer scientists  through postdoctoral scholar and graduate student advising, and  engineers through undergraduate and graduate level education.       Last Modified: 11/10/2017       Submitted by: Zhendong Su]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
