<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: CLCCA: Enhancing the Programmability of Heterogeneous Manycore Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>749995.00</AwardTotalIntnAmount>
<AwardAmount>749995</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>As computing devices are used to solve increasingly complex and diverse problems with ever-increasing multidimensional data-sets, programmers are tasked with writing high-performance and energy-efficient code. To run this code, processor vendors are adopting heterogeneous systems, where conventional general-purpose cores are integrated with accelerators like graphics processing units (GPUs), cryptographic accelerators, database accelerators, and video encoders/decoders. To ensure the widespread adoption of these systems, it is essential that their programming models are effective and easy to use. Unfortunately, current programming models for these systems are challenging, requiring the programmer to explicitly allocate, manage, and marshal memory back and forth between cores and accelerators. As a result, software is often error-prone and buggy, and suffers overheads from data replication and movement. As future systems incorporate increasing levels of heterogeneity, this problem will worsen.&lt;br/&gt;&lt;br/&gt;This proposal develops unified address spaces for cores and accelerators, which is a key part of an effective programming model. A unified address space (in both virtual and physical addresses) increases system programmability because: (1) programmers need not manually allocate and manage their data movement between hundreds of heterogeneous compute units; (2) the system automatically allocates, replicates, and migrates data among heterogeneous components as execution shifts; (3) these systems support new algorithms that require simultaneous core and accelerator access to common data structures (e.g., producer-consumer programs where CPUs and GPUs communicate through software task queues); (4) programs are now more portable across systems with alternate memory hierarchies. This work studies mechanisms to support these benefits (while maintaining high performance and low power) by developing novel hardware (e.g., new memory controllers, Translation Lookaside Buffer augmentations, shootdown mechanisms) and operating system (OS) support (e.g., new OS memory allocation mechanisms and support for page allocation, replication, and migration on heterogeneous systems and memory).</AbstractNarration>
<MinAmdLetterDate>08/09/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/09/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1337147</AwardID>
<Investigator>
<FirstName>Ricardo</FirstName>
<LastName>Bianchini</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ricardo Bianchini</PI_FULL_NAME>
<EmailAddress>ricardob@cs.rutgers.edu</EmailAddress>
<PI_PHON>7324452768</PI_PHON>
<NSF_ID>000120851</NSF_ID>
<StartDate>08/09/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Abhishek</FirstName>
<LastName>Bhattacharjee</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Abhishek Bhattacharjee</PI_FULL_NAME>
<EmailAddress>abhishek.bhattacharjee@yale.edu</EmailAddress>
<PI_PHON>2034326403</PI_PHON>
<NSF_ID>000580469</NSF_ID>
<StartDate>08/09/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Rutgers University New Brunswick</Name>
<CityName>Piscataway</CityName>
<ZipCode>088543925</ZipCode>
<PhoneNumber>8489320150</PhoneNumber>
<StreetAddress>33 Knightsbridge Road</StreetAddress>
<StreetAddress2><![CDATA[2nd Floor East Wing]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NJ06</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001912864</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RUTGERS, THE STATE UNIVERSITY OF NEW JERSEY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001912864</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Rutgers University New Brunswick]]></Name>
<CityName>Piscataway</CityName>
<StateCode>NJ</StateCode>
<ZipCode>088548072</ZipCode>
<StreetAddress><![CDATA[110 Frelinghuysen Road]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NJ06</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8283</Code>
<Text>Exploiting Parallel&amp;Scalabilty</Text>
</ProgramElement>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~749995</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Intellectual Merit: This project advanced the state of art in the design of emerging heterogeneous computer systems. These are systems that are heterogeneous in processing elements and in devices used to realize the memory system. Programming such systems is challenging because of the complexity that the heterogeneity imposes. This project considered how to build low-overhead architectural/OS abstractions to balance the efficiency benefits of specialization with programming abstractions that make these systems usable in practice. Key contributions were: (1) hardware and software mechanisms to implement address translation for GPUs and throughput-oriented accelerators efficiently (i.e., via higher-reach TLBs and faster page table walks); (2) software support to enable faster data copies among heterogeneous memory devices; (3) design of abstractions that permit direct invocation of OS systems services from accelerators; and (4) integrating support in emerging memory technologies to enable faster memory forensics. The overall impact of these contributions is to help realize efficient systems that are able to extract the benefits of extreme heterogeneity while remaining programmable and easy-to-use.</p> <p>Broader Impacts: Beyond the advacement of scientific inquiry, this project also led to the training of several graduate students in the research of extremely heterogeneous systems, with a focus on hardware design, OS design, formal methods (to verify the correctness of the proposed designs), and systems security. The graduate students had to learn how to not only advance academic inquiry with this work but also how to transition these studies to impact real products -- specifically, some of the software developed in this project was upstreamed into the Linux kernel and other parts of it are now hosted under the Radeon Open Compute platform for ultrascale computing. Additionally, several of the studies lead to collaborations with industry. Additionally, research lessons from this work were integrated into undergraduate and graduate coursework. Some of these undergraduates pursued class projects based on this work.&nbsp;</p><br> <p>            Last Modified: 10/30/2018<br>      Modified by: Abhishek&nbsp;Bhattacharjee</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Intellectual Merit: This project advanced the state of art in the design of emerging heterogeneous computer systems. These are systems that are heterogeneous in processing elements and in devices used to realize the memory system. Programming such systems is challenging because of the complexity that the heterogeneity imposes. This project considered how to build low-overhead architectural/OS abstractions to balance the efficiency benefits of specialization with programming abstractions that make these systems usable in practice. Key contributions were: (1) hardware and software mechanisms to implement address translation for GPUs and throughput-oriented accelerators efficiently (i.e., via higher-reach TLBs and faster page table walks); (2) software support to enable faster data copies among heterogeneous memory devices; (3) design of abstractions that permit direct invocation of OS systems services from accelerators; and (4) integrating support in emerging memory technologies to enable faster memory forensics. The overall impact of these contributions is to help realize efficient systems that are able to extract the benefits of extreme heterogeneity while remaining programmable and easy-to-use.  Broader Impacts: Beyond the advacement of scientific inquiry, this project also led to the training of several graduate students in the research of extremely heterogeneous systems, with a focus on hardware design, OS design, formal methods (to verify the correctness of the proposed designs), and systems security. The graduate students had to learn how to not only advance academic inquiry with this work but also how to transition these studies to impact real products -- specifically, some of the software developed in this project was upstreamed into the Linux kernel and other parts of it are now hosted under the Radeon Open Compute platform for ultrascale computing. Additionally, several of the studies lead to collaborations with industry. Additionally, research lessons from this work were integrated into undergraduate and graduate coursework. Some of these undergraduates pursued class projects based on this work.        Last Modified: 10/30/2018       Submitted by: Abhishek Bhattacharjee]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
