<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: FP: Real-Time Scheduling of Parallel Tasks</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>749950.00</AwardTotalIntnAmount>
<AwardAmount>765950</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Tasks which must complete by specific deadlines (known as real-time tasks) appear in many systems where computers interact with humans or the physical environment such as autonomous vehicles, traffic management, robotics, industrial process management, video surveillance, radar tracking, and hybrid structural testing. With a growing number of application domains where this kind of interaction occurs, there is an increasing need for systems that can run complex tasks within stringent timing constraints. In a separate, but related trend, processor clock speeds have largely stagnated, and most modern computers are parallel computers with multiple cores or processors on each platform. Both to keep up with the demands of emerging embedded systems, and to exploit the capacity of multicore computers effectively, real-time applications must harness parallelism more effectively than has been possible to date.  This research will enable these important applications by conducting both theoretical and empirical research on how to implement and execute parallel real-time tasks efficiently.&lt;br/&gt;&lt;br/&gt;This research intends to develop provably good algorithms for parallel real-time tasks.  These algorithms must provide guarantees of both correctness and performance. The research focuses on three specific directions: (1) Scheduling foundations: Design and analysis of efficient scheduling algorithms for parallel real time tasks that take the complex characteristics of modern parallel platforms into consideration.  (2) Synchronization mechanisms: Design of effective synchronization techniques in order to allow coordination and resource sharing between different tasks as well as different threads of the same parallel task.  (3) Concurrency platform: Implementation of a modular and extensible concurrency platform for real-time parallel tasks that will be used to develop, test and validate the scheduling and synchronization mechanisms required to run these tasks.  This platform will be made available under a maximally permissible open source license to practitioners who wish to parallelize their real-time applications or to extend the platform itself to validate their own scheduling solutions.</AbstractNarration>
<MinAmdLetterDate>08/24/2013</MinAmdLetterDate>
<MaxAmdLetterDate>05/20/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1337218</AwardID>
<Investigator>
<FirstName>Christopher</FirstName>
<LastName>Gill</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christopher Gill</PI_FULL_NAME>
<EmailAddress>cdgill@cse.wustl.edu</EmailAddress>
<PI_PHON>3149357538</PI_PHON>
<NSF_ID>000418929</NSF_ID>
<StartDate>08/24/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Chenyang</FirstName>
<LastName>Lu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Chenyang Lu</PI_FULL_NAME>
<EmailAddress>lu@cse.wustl.edu</EmailAddress>
<PI_PHON>3149354855</PI_PHON>
<NSF_ID>000243191</NSF_ID>
<StartDate>08/24/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Kunal</FirstName>
<LastName>Agrawal</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kunal Agrawal</PI_FULL_NAME>
<EmailAddress>kunal@cse.wustl.edu</EmailAddress>
<PI_PHON>3149354838</PI_PHON>
<NSF_ID>000555177</NSF_ID>
<StartDate>08/24/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Washington University</Name>
<CityName>Saint Louis</CityName>
<ZipCode>631304862</ZipCode>
<PhoneNumber>3147474134</PhoneNumber>
<StreetAddress>CAMPUS BOX 1054</StreetAddress>
<StreetAddress2><![CDATA[1 Brookings Drive]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Missouri</StateName>
<StateCode>MO</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MO01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>068552207</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>WASHINGTON UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>068552207</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Washington University]]></Name>
<CityName>Saint Louis</CityName>
<StateCode>MO</StateCode>
<ZipCode>631304899</ZipCode>
<StreetAddress><![CDATA[One Brookings Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Missouri</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MO01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7934</Code>
<Text>PARAL/DISTRIBUTED ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~749950</FUND_OBLG>
<FUND_OBLG>2014~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Computers have been used in safety critical applications such as avionics, industrial systems and automotives for decades. In many of these applications, timing is crucial --- tasks must complete by their deadlines to ensure safety for humans and equipment.&nbsp; Traditionally such applications have used single core machines and most theoretical and systems work for these applications assumes that tasks are sequential programs.&nbsp;&nbsp;</p> <p>Two developments have shattered this status quo.&nbsp; First, most chip manufacturors now manufacture multicore chips and multiprocessor machines in order to deal with the end of Denard scaling.&nbsp; Second, many modern safety critical applications are computationally intensive and can not be completed on a single core while satisfying the timing requirements of these applications.&nbsp; To deal with these developments, it is essential to develop fundamentals that allow us to use parallel tasks within safety critical applications.&nbsp;&nbsp;</p> <p>This project took critical first steps towards developing theoretical and systems foundations for such parallel real-time tasks.&nbsp; Within theoretical work, this project showed tight upper and lower bounds on the efficiency of traditional real-time schedulers such as global earliest deadline first and global fixed priority schedulers.&nbsp; In addition, a more theoretically and practically efficient scheduler --- called federated scheduler --- was developed.&nbsp; In addition, the project also explored mixed-criticality scheduling approaches --- under this model, the same platform is shared by both safety-critical tasks and other less critical tasks.&nbsp; Under typical circumstances, the scheduler must guarantee that all tasks meet their deadlines.&nbsp; However, under overload situations, the less critical tasks may be dropped in order to guarantee correctness of safety-critical tasks.&nbsp;&nbsp;</p> <p>Under systems work, this project explored mechanisms and policies that can be efficiently implemented for parallel real-time tasks.&nbsp; Real-time versions of parallel programming platforms such as OpenMP and Cilk were developed.&nbsp; The project also evaluated the advantages and disadvantages of different centralized and distributed scheduling approaches.&nbsp;&nbsp;</p> <p>The potential broader impacts of this project are many.&nbsp; Some of the systems developed by this project are being used by civial and mechanical engineers to perform testing of earthquake resilient structures.&nbsp; More broadly, real-time systems are used widely within safety critical infrastructure and much of this research is applicable in most of these applications.&nbsp; The theoretical and systems work in this project provides an underpinning to further explore how these systems can be made more efficient and scalable.&nbsp;&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 03/10/2020<br>      Modified by: Kunal&nbsp;Agrawal</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Computers have been used in safety critical applications such as avionics, industrial systems and automotives for decades. In many of these applications, timing is crucial --- tasks must complete by their deadlines to ensure safety for humans and equipment.  Traditionally such applications have used single core machines and most theoretical and systems work for these applications assumes that tasks are sequential programs.    Two developments have shattered this status quo.  First, most chip manufacturors now manufacture multicore chips and multiprocessor machines in order to deal with the end of Denard scaling.  Second, many modern safety critical applications are computationally intensive and can not be completed on a single core while satisfying the timing requirements of these applications.  To deal with these developments, it is essential to develop fundamentals that allow us to use parallel tasks within safety critical applications.    This project took critical first steps towards developing theoretical and systems foundations for such parallel real-time tasks.  Within theoretical work, this project showed tight upper and lower bounds on the efficiency of traditional real-time schedulers such as global earliest deadline first and global fixed priority schedulers.  In addition, a more theoretically and practically efficient scheduler --- called federated scheduler --- was developed.  In addition, the project also explored mixed-criticality scheduling approaches --- under this model, the same platform is shared by both safety-critical tasks and other less critical tasks.  Under typical circumstances, the scheduler must guarantee that all tasks meet their deadlines.  However, under overload situations, the less critical tasks may be dropped in order to guarantee correctness of safety-critical tasks.    Under systems work, this project explored mechanisms and policies that can be efficiently implemented for parallel real-time tasks.  Real-time versions of parallel programming platforms such as OpenMP and Cilk were developed.  The project also evaluated the advantages and disadvantages of different centralized and distributed scheduling approaches.    The potential broader impacts of this project are many.  Some of the systems developed by this project are being used by civial and mechanical engineers to perform testing of earthquake resilient structures.  More broadly, real-time systems are used widely within safety critical infrastructure and much of this research is applicable in most of these applications.  The theoretical and systems work in this project provides an underpinning to further explore how these systems can be made more efficient and scalable.                     Last Modified: 03/10/2020       Submitted by: Kunal Agrawal]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
