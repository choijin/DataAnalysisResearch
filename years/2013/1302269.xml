<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Medium:Overcoming the Intuition Wall: Automatic Graphical Analysis of Programs to Discover and Program New Computer Architectures</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2013</AwardEffectiveDate>
<AwardExpirationDate>12/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>400654.00</AwardTotalIntnAmount>
<AwardAmount>400654</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>tao li</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Workload characterization is central to development of new computer architectures. The rise of the mobile-cloud paradigm has increased the diversity and rate at which applications are created thus challenging computer architects' ability to build optimized systems for them. In the past, architects have been able to examine software codes of interest (often through slow laborious manual inspection if necessary) when releases were far and few in between to derive intuition necessary to make architectural and microarchitectural discoveries. But this method does not scale to emerging applications that are literally hammered out in the hundreds by the day. Further, new languages and platforms have behaviors that are quite different from legacy codes and there is an urgent need for intuition on these applications. Without new methods to characterize emerging workloads, computer architects risk running into an intuition wall. This risk might prove calamitous if unmitigated, given the added reliance on (micro)architects to develop more energy efficient designs to compensate for the losses due to slowdowns in Dennard's scaling.&lt;br/&gt;&lt;br/&gt;Advances in machine learning provide an opportunity to overcome the intuition wall. In the last decade there have been many major advances in machine learning on graphs motivated by need/benefits of mining behaviors in social networks and enabled by cheap commodity computing. In this project, the PIs plan to leverage these advances to discover and program new computer architectures. By viewing program execution as a graph, clustering these graphs, and mining them for similarities, the PIs plan to discover new behaviors that architects and microarchitects can use to develop new on-chip acceleration structures. The PIs also plan to study how legacy code can semi-automatically be converted to execute on the architectures with the new accelerators.</AbstractNarration>
<MinAmdLetterDate>09/09/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/09/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1302269</AwardID>
<Investigator>
<FirstName>Gail</FirstName>
<LastName>Kaiser</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gail E Kaiser</PI_FULL_NAME>
<EmailAddress>kaiser@cs.columbia.edu</EmailAddress>
<PI_PHON>2129397081</PI_PHON>
<NSF_ID>000094973</NSF_ID>
<StartDate>09/09/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Tony</FirstName>
<LastName>Jebara</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tony Jebara</PI_FULL_NAME>
<EmailAddress>jebara@cs.columbia.edu</EmailAddress>
<PI_PHON>2129397079</PI_PHON>
<NSF_ID>000093679</NSF_ID>
<StartDate>09/09/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>L</FirstName>
<LastName>Sethumadhavan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>L Sethumadhavan</PI_FULL_NAME>
<EmailAddress>simha@cs.columbia.edu</EmailAddress>
<PI_PHON>2129397062</PI_PHON>
<NSF_ID>000502420</NSF_ID>
<StartDate>09/09/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049179401</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049179401</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>100277003</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7484</Code>
<Text>IIS Special Projects</Text>
</ProgramElement>
<ProgramElement>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~400654</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Designing and optimizing computer systems require deep understanding of the underlying system behavior. Historically many important observations that led to the development of essential hardware and software optimizations were driven by empirical observations about program behavior. &nbsp;As such this project was aimed at discovering new phenomenon across and, within programs, in large code bases. There were two significant outcomes:</p> <p><br />[1] We discovered and reported an interesting property of program structures by viewing dynamic program execution as a changing network. By analyzing the communication network created as a result of dynamic program execution, we found that communication patterns follow heavy-tailed distributions. In other words, a few instructions have consumers that are orders of magnitude larger than most instructions in a program. Surprisingly, these heavy-tailed distributions follow the iconic power law previously seen in man-made and natural networks. We provide empirical measurements based on the SPEC CPU2006 benchmarks to validate our findings as well as perform semantic analysis of the source code to reveal the causes of such behavior.</p> <p><br />[2] Detecting "similar code" is useful for many software and hardware engineering tasks. State-of-the-art tools and techniques can be used to detect code with similar syntactic and/or semantic features, statically (code clones) and or dynamically (simions). The dynamic methods operate at a coarse granularity of program inputs and outputs while for many software and hardware engineering tasks a finer grained view is more useful.</p> <p><br />We proposed the term "code relatives" to refer to code with similar execution behavior at a fine granularity. After introducing the concept of code relatives to the community, we then developed a new approach, DyCLINK, to detect code relatives within and across codebases.</p> <p>DyCLINK records instruction-level traces from sample executions, organizes the traces into instruction-level dynamic dependence graphs, and employs our specialized subgraph matching algorithm to efficiently compare the executions of candidate code relatives.</p> <p>In our experiments, DyCLINK analyzed 422+ million prospective subgraph matches in only 43 minutes. We compared DyCLINK to one static code clone detector from the community and to our implementation of a dynamic simion detector. The results show that DyCLINK effectively detects code relatives with a reasonable analysis time.</p> <p>A secondary goal has been to investigate graph matching algorithms that represent programs as graphs and then find matchings between pairs of graphs to determine how similar a given pair of programs can potentially be. This involves algorithms that estimate a graph structure from a program by observing its dynamic behavior as well as graphs that find correspondences between pairs of programs. It also involves finding synchronized correspondences between a multitude of graphs so that the matchings are consistent beyond pairwise estimates. We made progress on graph matching algorithms which was published as it resulted in significant improvements in the computer vision domain (although the technique did not help with program graphs which were the focus of this proposal).</p> <p><br />The interdisciplinary nature of the team helped bring together advances and applications in three different fields: Machine Learning, Software Engineering and Computer Architecture. The funding for the proposal has resulted in follow NSF proposals to further research on these topics.</p><br> <p>            Last Modified: 04/05/2017<br>      Modified by: L&nbsp;Sethumadhavan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Designing and optimizing computer systems require deep understanding of the underlying system behavior. Historically many important observations that led to the development of essential hardware and software optimizations were driven by empirical observations about program behavior.  As such this project was aimed at discovering new phenomenon across and, within programs, in large code bases. There were two significant outcomes:   [1] We discovered and reported an interesting property of program structures by viewing dynamic program execution as a changing network. By analyzing the communication network created as a result of dynamic program execution, we found that communication patterns follow heavy-tailed distributions. In other words, a few instructions have consumers that are orders of magnitude larger than most instructions in a program. Surprisingly, these heavy-tailed distributions follow the iconic power law previously seen in man-made and natural networks. We provide empirical measurements based on the SPEC CPU2006 benchmarks to validate our findings as well as perform semantic analysis of the source code to reveal the causes of such behavior.   [2] Detecting "similar code" is useful for many software and hardware engineering tasks. State-of-the-art tools and techniques can be used to detect code with similar syntactic and/or semantic features, statically (code clones) and or dynamically (simions). The dynamic methods operate at a coarse granularity of program inputs and outputs while for many software and hardware engineering tasks a finer grained view is more useful.   We proposed the term "code relatives" to refer to code with similar execution behavior at a fine granularity. After introducing the concept of code relatives to the community, we then developed a new approach, DyCLINK, to detect code relatives within and across codebases.  DyCLINK records instruction-level traces from sample executions, organizes the traces into instruction-level dynamic dependence graphs, and employs our specialized subgraph matching algorithm to efficiently compare the executions of candidate code relatives.  In our experiments, DyCLINK analyzed 422+ million prospective subgraph matches in only 43 minutes. We compared DyCLINK to one static code clone detector from the community and to our implementation of a dynamic simion detector. The results show that DyCLINK effectively detects code relatives with a reasonable analysis time.  A secondary goal has been to investigate graph matching algorithms that represent programs as graphs and then find matchings between pairs of graphs to determine how similar a given pair of programs can potentially be. This involves algorithms that estimate a graph structure from a program by observing its dynamic behavior as well as graphs that find correspondences between pairs of programs. It also involves finding synchronized correspondences between a multitude of graphs so that the matchings are consistent beyond pairwise estimates. We made progress on graph matching algorithms which was published as it resulted in significant improvements in the computer vision domain (although the technique did not help with program graphs which were the focus of this proposal).   The interdisciplinary nature of the team helped bring together advances and applications in three different fields: Machine Learning, Software Engineering and Computer Architecture. The funding for the proposal has resulted in follow NSF proposals to further research on these topics.       Last Modified: 04/05/2017       Submitted by: L Sethumadhavan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
