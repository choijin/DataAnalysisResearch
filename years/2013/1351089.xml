<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: New Abstractions for Sensitive Data Management in Modern Operating Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2014</AwardEffectiveDate>
<AwardExpirationDate>01/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>499999.00</AwardTotalIntnAmount>
<AwardAmount>499999</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Indrajit Ray</SignBlockName>
<PO_EMAI>iray@nsf.gov</PO_EMAI>
<PO_PHON>7032925387</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The evolution of data storage in modern operating systems (OSes) brings challenges for fine-grained data protection. While traditional OSes offer simple, relatively low-level data abstractions -- files and directories -- modern operating systems, including Android and iOS, embed much higher-level abstractions, such as relational databases and object-relational models. The new abstractions complicate file structures and access patterns, greatly challenging existing protection systems, such as encrypted file systems, deniable file systems, antiviruses, and anomaly detectors, which, fallen behind the times, continue to operate at file level.&lt;br/&gt;&lt;br/&gt;In this project, we are investigating new data protection abstractions that are better attuned to modern OSes. One example is a logical data object (LDO). An LDO corresponds to an application-specific resource -- such as an email, a document, or a bank account -- and includes all the data related to it, no matter how or where it is persisted (e.g., rows in databases, objects in object-relational models, files in the file system, etc.). Protection systems use LDOs to acquire rich semantics about the data to refine their effectiveness. Using LDOs, we are building HideIt, a fine-grained object hiding system that lets users select, through the familiar UIs of their unmodified applications, arbitrary objects -- such as individual emails, documents, bank accounts -- and hide or unhide them. By creating new, convenient protection abstractions, and teaching students and the broader community about them, we hope to promote a responsible approach to data management, in which users manage their data carefully, minimizing its exposure to attacks.</AbstractNarration>
<MinAmdLetterDate>01/30/2014</MinAmdLetterDate>
<MaxAmdLetterDate>03/23/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1351089</AwardID>
<Investigator>
<FirstName>Roxana</FirstName>
<LastName>Geambasu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Roxana Geambasu</PI_FULL_NAME>
<EmailAddress>roxana@cs.columbia.edu</EmailAddress>
<PI_PHON>2128546851</PI_PHON>
<NSF_ID>000602293</NSF_ID>
<StartDate>01/30/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049179401</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049179401</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>100277003</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~110659</FUND_OBLG>
<FUND_OBLG>2015~97154</FUND_OBLG>
<FUND_OBLG>2016~99721</FUND_OBLG>
<FUND_OBLG>2017~102359</FUND_OBLG>
<FUND_OBLG>2018~90106</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <p>Intellectual Merit:</p> <p><span>My project&nbsp;</span>revisits decades' old protection abstractions from operating systems (OSes), which have become unfit for emerging data-driven workloads. Traditional protection units -- such as files, directories, or database tables -- fail to support the data access and sharing patterns common in ML ecosystems.&nbsp; This leads some companies to adopt either too loose, wide-access data policies (e.g., all engineers and processes within the company get access to all user data), or too restrictive, siloing policies (e.g., the data from service X is beyond reach for any engineer or process outside X's scope).&nbsp; Neither extreme is preferable: the former can resultin wide exposure to hackers or snooping employees; the latter can disable potentiallyvaluable uses of the data.</p> </div> </div> </div> <div class="page" title="Page 5"> <div class="layoutArea"> <div class="column"> <p><span>I hypothesize that the most appropriate protection abstraction for ML is not files/directories/tables, but rather&nbsp;</span><em>ML models</em><span>, and particularly </span><em>feature models</em><span>. Most ML predictive models are not built directly on the raw data, but on features that encode, aggregate, and otherwise transform the raw data to make learning on it more efficient. These features, such as embeddings, covariates, and various statistical aggregates, are often shared across teams in big companies through company-wide feature stores. I thus developed the notion of a </span><em>private feature model</em><span>, a new abstraction for protected data access and sharing for ML ecosystems. A private feature model is one that is </span><span>learned incrementally </span><span>over historical data, made </span><span>differentially private (DP)&nbsp;</span><span>to bound leakage of the data through its parameters, and made </span><span>broadly accessible </span><span>within the company so engineers can use it to improve their service, ideally in lieu of accessing, and thus exposing, historical raw data.</span></p> <p><span>My team and I developed, evaluated, and published </span><em>Pyramid </em>(<a title="Pyramid SP" href="https://roxanageambasu.github.io/publications/oakland2017pyramid.pdf">paper</a>,&nbsp;<a title="Pyramid" href="https://roxanageambasu.github.io/publications/spmagazine2018pyramid.pdf">paper</a>)<span>, a system that implements a special case of this abstraction based on a feature model called </span><em>count featurization</em><span>. Count featurization, a frequently used method for scaling ML to very large datasets, replaces the features of an example with the probability of its label, conditioned on feature values. For instance, for a movie rating, </span><span>userId </span><span>becomes </span><span>P</span><span>(</span><span>rating</span><span>|</span><span>userId</span><span>)</span><span>. Because the new features are low dimension, predictive models trained on them require much less data to fit. Pyramid constructs count tables to compute these probabilities over historical data and stores them with DP in company-wide feature stores. From there, they can be accessed by all engineers and incorporated as part of predictive models to reduce the amount and timeframe of the raw data to which the models need access. Using multiple workloads, including a production workload from Microsoft, we show that predictive models need access to 2-3 orders of magnitude less raw data when training with DP counts versus when training without the counts, while sacrificing 2-4% in accuracy. This reduces exposure of raw data&nbsp;</span><span>by a corresponding 2-3 orders of magnitude. </span></p> <p><span>My team and I then enhanced Pyramid to support arbitrary feature models, including embeddings and latent variable models. Doing so raises substantial technical challenges because each feature model exposes a different privacy-accuracy tradeoff when made DP, complicating the design of a uniform abstraction and system. I addressed these challenges using a combination of new DP theory extensions and systems techniques for resource allocation to manage the privacy resource judiciously and enforce both a user-level global privacy guarantee and accuracy service-level agreements for all private feature models (<a title="Sage" href="https://roxanageambasu.github.io/publications/sosp2019sage-with-appendix.pdf">paper</a>).</span></p> <p><span>Beyond ML workloads, I have also worked on new protection abstractions for mobile workloads (<a title="Pebbles" href="https://roxanageambasu.github.io/publications/osdi2014pebbles.pdf">paper</a>,&nbsp;<a title="CleanOS" href="https://roxanageambasu.github.io/publications/osdi2012cleanos.pdf">paper</a>). A similar mismatch between traditional protection abstractions and the needs of emerging workloads occurs in mobile devices. While traditional OSes provide low-level storage abstractions -- files and directories -- mobile OSes embed higher-level abstractions, such as relational databases or object-</span>relational models. Despite the change in abstraction, many crucial protection systems, such as encryption or deniable systems, continue to operate at file level, which renders them ineffective since files are both too fine- and too coarse-grained for effective protection. My team and I introduced a new and more meaningful abstraction for protecting data in mobile OSes: <em>logical data objects</em>. These correspond to user-relevant objects, such as emails, documents, and bank accounts. I developed <em>CleanOS, </em>a modified Android that provides logical data objects as abstractions to let protection tools operate at a level more relevant to the user, such as encrypting, hiding, or properly deleting emails, documents, or bank accounts along with all pieces of related data.</p> <div class="page" title="Page 6"> <div class="layoutArea"> <div class="column"> <p>Broader Impacts:</p> <p>My work provides critical missing tools needed by data-driven systems to safeguard the increasing amounts of sensitive information they collect.&nbsp; I have disseminated my insights widely by: making code available; giving numerous research and mentoring talks; organizing learning workshops for underrepresented groups; giving interviews to media outlets to introduce the public to emerging privacy threats and solutions.&nbsp; Finally, I added to the Columbia University curriculum three major courses on the design and implementation of large-scale distributed and private systems (<a title="DS1" href="https://columbia.github.io/ds1-class/">link</a>, <a title="DS2" href="https://columbia.github.io/ds2-class/">link</a>, <a title="Private Systems" href="https://columbia.github.io/private-systems-class/">link</a>).</p> </div> </div> </div> </div> </div> </div><br> <p>            Last Modified: 08/01/2020<br>      Modified by: Roxana&nbsp;Geambasu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    Intellectual Merit:  My project revisits decades' old protection abstractions from operating systems (OSes), which have become unfit for emerging data-driven workloads. Traditional protection units -- such as files, directories, or database tables -- fail to support the data access and sharing patterns common in ML ecosystems.  This leads some companies to adopt either too loose, wide-access data policies (e.g., all engineers and processes within the company get access to all user data), or too restrictive, siloing policies (e.g., the data from service X is beyond reach for any engineer or process outside X's scope).  Neither extreme is preferable: the former can resultin wide exposure to hackers or snooping employees; the latter can disable potentiallyvaluable uses of the data.        I hypothesize that the most appropriate protection abstraction for ML is not files/directories/tables, but rather ML models, and particularly feature models. Most ML predictive models are not built directly on the raw data, but on features that encode, aggregate, and otherwise transform the raw data to make learning on it more efficient. These features, such as embeddings, covariates, and various statistical aggregates, are often shared across teams in big companies through company-wide feature stores. I thus developed the notion of a private feature model, a new abstraction for protected data access and sharing for ML ecosystems. A private feature model is one that is learned incrementally over historical data, made differentially private (DP) to bound leakage of the data through its parameters, and made broadly accessible within the company so engineers can use it to improve their service, ideally in lieu of accessing, and thus exposing, historical raw data.  My team and I developed, evaluated, and published Pyramid (paper, paper), a system that implements a special case of this abstraction based on a feature model called count featurization. Count featurization, a frequently used method for scaling ML to very large datasets, replaces the features of an example with the probability of its label, conditioned on feature values. For instance, for a movie rating, userId becomes P(rating|userId). Because the new features are low dimension, predictive models trained on them require much less data to fit. Pyramid constructs count tables to compute these probabilities over historical data and stores them with DP in company-wide feature stores. From there, they can be accessed by all engineers and incorporated as part of predictive models to reduce the amount and timeframe of the raw data to which the models need access. Using multiple workloads, including a production workload from Microsoft, we show that predictive models need access to 2-3 orders of magnitude less raw data when training with DP counts versus when training without the counts, while sacrificing 2-4% in accuracy. This reduces exposure of raw data by a corresponding 2-3 orders of magnitude.   My team and I then enhanced Pyramid to support arbitrary feature models, including embeddings and latent variable models. Doing so raises substantial technical challenges because each feature model exposes a different privacy-accuracy tradeoff when made DP, complicating the design of a uniform abstraction and system. I addressed these challenges using a combination of new DP theory extensions and systems techniques for resource allocation to manage the privacy resource judiciously and enforce both a user-level global privacy guarantee and accuracy service-level agreements for all private feature models (paper).  Beyond ML workloads, I have also worked on new protection abstractions for mobile workloads (paper, paper). A similar mismatch between traditional protection abstractions and the needs of emerging workloads occurs in mobile devices. While traditional OSes provide low-level storage abstractions -- files and directories -- mobile OSes embed higher-level abstractions, such as relational databases or object-relational models. Despite the change in abstraction, many crucial protection systems, such as encryption or deniable systems, continue to operate at file level, which renders them ineffective since files are both too fine- and too coarse-grained for effective protection. My team and I introduced a new and more meaningful abstraction for protecting data in mobile OSes: logical data objects. These correspond to user-relevant objects, such as emails, documents, and bank accounts. I developed CleanOS, a modified Android that provides logical data objects as abstractions to let protection tools operate at a level more relevant to the user, such as encrypting, hiding, or properly deleting emails, documents, or bank accounts along with all pieces of related data.     Broader Impacts:  My work provides critical missing tools needed by data-driven systems to safeguard the increasing amounts of sensitive information they collect.  I have disseminated my insights widely by: making code available; giving numerous research and mentoring talks; organizing learning workshops for underrepresented groups; giving interviews to media outlets to introduce the public to emerging privacy threats and solutions.  Finally, I added to the Columbia University curriculum three major courses on the design and implementation of large-scale distributed and private systems (link, link, link).             Last Modified: 08/01/2020       Submitted by: Roxana Geambasu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
