<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Collaborative Research: Information Foraging Theory: From Scientific Principles to Engineering Practice</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>582982.00</AwardTotalIntnAmount>
<AwardAmount>612982</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern software systems are notoriously large and complex, often made up of hundreds and thousands of interconnected modules, and lines of source code that can number in the millions. Consequently, software developers waste a considerable portion of their time trying to find and get to information in that code. To address this problem, this research project will investigate a scientific theory to describe how developers go about seeking this information. The project will then use the expanded theory to identify ways of helping developers to more efficiently find information, and in the process, increase their productivity. This contribution will in turn be put to practical use by providing to builders of today?s software tools new practical ways to apply this scientific theory to their tools, so as to reduce the effort required in today?s software development projects.&lt;br/&gt;&lt;br/&gt;In particular, this project will (1) expand Information Foraging Theory to describe how learning affects developers? navigation through code and related artifacts, (2) generate theory-grounded design patterns explaining how to design tools that aid developers?&lt;br/&gt;information foraging, (3) develop a design method enabling tool builders to apply these patterns, and (4) evaluate the validity and effectiveness of (1)-(3). Broader impacts will include (a) helping with teaching and learning for software tool builders, professional software developers, graduate students, undergraduates and high schoolers, (b) broadening participation of students from underrepresented groups, (c) producing publicly available infrastructure consisting of design patterns and training materials,&lt;br/&gt;(d) disseminating results via publications, software, and workshops, and (e) providing a scientific foundation for future efforts aimed at training developers and designing tools for their use.</AbstractNarration>
<MinAmdLetterDate>08/13/2013</MinAmdLetterDate>
<MaxAmdLetterDate>04/10/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1302113</AwardID>
<Investigator>
<FirstName>Margaret</FirstName>
<LastName>Burnett</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Margaret M Burnett</PI_FULL_NAME>
<EmailAddress>burnett@eecs.oregonstate.edu</EmailAddress>
<PI_PHON>5417372539</PI_PHON>
<NSF_ID>000308026</NSF_ID>
<StartDate>08/13/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Christopher</FirstName>
<LastName>Scaffidi</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christopher P Scaffidi</PI_FULL_NAME>
<EmailAddress>cscaffid@eecs.oregonstate.edu</EmailAddress>
<PI_PHON>5417375572</PI_PHON>
<NSF_ID>000534638</NSF_ID>
<StartDate>08/13/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Oregon State University</Name>
<CityName>Corvallis</CityName>
<ZipCode>973318507</ZipCode>
<PhoneNumber>5417374933</PhoneNumber>
<StreetAddress>OREGON STATE UNIVERSITY</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>053599908</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OREGON STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053599908</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Oregon State University]]></Name>
<CityName>Corvallis</CityName>
<StateCode>OR</StateCode>
<ZipCode>973312140</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~582982</FUND_OBLG>
<FUND_OBLG>2014~14000</FUND_OBLG>
<FUND_OBLG>2015~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-d0f56e8d-6e93-2837-c062-50462c8d0fb6"> </span></p> <p><span id="docs-internal-guid-d0f56e8d-6e95-913b-6506-602d3d63b199">&nbsp;</span></p> <p dir="ltr"><span>In recent years, software engineering research has emerged investigating the cost, needs, and support of software navigation during maintenance, with interesting empirical results and a variety of tools resulting. Many of these tools have been demonstrated to be useful, but it is difficult to extract generalizable principles from them, because they lack a connective theoretical basis. Scientific theory provides the principles that enable (software) engineering to move beyond the levels of an individual engineer&rsquo;s intuitions and experiences. Thus, in the context of engineering of software engineering tools, this project has established theory-grounded foundations that will allow even those tool builders who lack intuition or experience determining human needs to create tools that are genuinely effective for their intended audience. </span></p> <p>&nbsp;</p> <p dir="ltr"><span>Proceeding in three stages, this work has harnessed a theory called Information Foraging Theory (IFT) to bring such scientific principles to the researchers and tool builders who create software tools. First, we have expanded IFT&rsquo;s scientific foundation to include how learning affects developers&rsquo; navigation through code and related artifacts, resulting in a computational model that can accurately describe and predict where programmers may forage for information during software development. Second, drawing upon a literature survey as well as contributions from members of the software engineering community, we established a catalog of over 30 design patterns elucidating how IFT can be used to guide the design of tools that aid in information foraging during software development. Third, and finally, we established and validated a design method (with supporting code library) for helping tool designers as they apply these IFT-grounded design patterns. </span></p> <p>&nbsp;</p> <p dir="ltr"><span>Overall, the work has led to the publication of 7 peer reviewed publications and theses, the training of 19 students in research (at the graduate, undergraduate, and high-school levels), and the dissemination of our results to over 100 people at companies that design programming tools for software developers. We anticipate that these results will benefit society by showing how tool builders can use theory to produce effective tools that genuinely support developers&rsquo; work on information-intensive software engineering tasks. The contributions of this work therefore stand to transform the way tool builders create these tools for developers.</span></p> <div><span><br /></span></div> <p>&nbsp;</p> <p dir="ltr">&nbsp;</p><br> <p>            Last Modified: 10/31/2017<br>      Modified by: Christopher&nbsp;P&nbsp;Scaffidi</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[      In recent years, software engineering research has emerged investigating the cost, needs, and support of software navigation during maintenance, with interesting empirical results and a variety of tools resulting. Many of these tools have been demonstrated to be useful, but it is difficult to extract generalizable principles from them, because they lack a connective theoretical basis. Scientific theory provides the principles that enable (software) engineering to move beyond the levels of an individual engineer?s intuitions and experiences. Thus, in the context of engineering of software engineering tools, this project has established theory-grounded foundations that will allow even those tool builders who lack intuition or experience determining human needs to create tools that are genuinely effective for their intended audience.     Proceeding in three stages, this work has harnessed a theory called Information Foraging Theory (IFT) to bring such scientific principles to the researchers and tool builders who create software tools. First, we have expanded IFT?s scientific foundation to include how learning affects developers? navigation through code and related artifacts, resulting in a computational model that can accurately describe and predict where programmers may forage for information during software development. Second, drawing upon a literature survey as well as contributions from members of the software engineering community, we established a catalog of over 30 design patterns elucidating how IFT can be used to guide the design of tools that aid in information foraging during software development. Third, and finally, we established and validated a design method (with supporting code library) for helping tool designers as they apply these IFT-grounded design patterns.     Overall, the work has led to the publication of 7 peer reviewed publications and theses, the training of 19 students in research (at the graduate, undergraduate, and high-school levels), and the dissemination of our results to over 100 people at companies that design programming tools for software developers. We anticipate that these results will benefit society by showing how tool builders can use theory to produce effective tools that genuinely support developers? work on information-intensive software engineering tasks. The contributions of this work therefore stand to transform the way tool builders create these tools for developers.              Last Modified: 10/31/2017       Submitted by: Christopher P Scaffidi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
