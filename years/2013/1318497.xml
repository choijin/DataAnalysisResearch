<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: New Directions in Field Programmable Gate Arrays (FPGA) Security</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>432214.00</AwardTotalIntnAmount>
<AwardAmount>432214</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Field-programmable gate arrays (FPGAs) represent an important computing infrastructure which must be protected from attackers. They are used in a wide variety of applications, including networking routers, satellites, military equipment, and automobiles, among others.  The storage of FPGA programming information in memory external to the device creates a natural security weakness which, to date, has primarily been addressed via bitstream encryption. Recent work has shown that bitstream encryption is not impervious to attack and, with sufficient effort, the logical function of some or all of an FPGA design can be determined from a bitstream. This work systematically investigates advanced attacks on FPGA designs and, more importantly, develops sound countermeasures against FPGA design manipulations by determined attackers. To eliminate weaknesses, FPGA security is addressed from a new angle: the use of hardware obfuscation to make the true functionality of an FPGA design nearly indecipherable even if the entire logic-level design can be determined by bitstream reverse engineering. These questions are addressed by first developing a series of search-based computer-aided design tools which can identify security primitives (e.g. crypto primitives) in FPGA design logic-level netlists. As a result of this work, a series of automated tools which allow FPGA circuit designers to obscure the functionality of their subcircuits will be developed. These tools will make malicious design modification significantly more difficult or impossible.</AbstractNarration>
<MinAmdLetterDate>09/09/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/09/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1318497</AwardID>
<Investigator>
<FirstName>Christof</FirstName>
<LastName>Paar</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christof Paar</PI_FULL_NAME>
<EmailAddress>christof.paar@rub.de</EmailAddress>
<PI_PHON>4133413565</PI_PHON>
<NSF_ID>000324536</NSF_ID>
<StartDate>09/09/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Russell</FirstName>
<LastName>Tessier</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Russell Tessier</PI_FULL_NAME>
<EmailAddress>tessier@ecs.umass.edu</EmailAddress>
<PI_PHON>4135450160</PI_PHON>
<NSF_ID>000109921</NSF_ID>
<StartDate>09/09/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Massachusetts Amherst</Name>
<CityName>Hadley</CityName>
<ZipCode>010359450</ZipCode>
<PhoneNumber>4135450698</PhoneNumber>
<StreetAddress>Research Administration Building</StreetAddress>
<StreetAddress2><![CDATA[100 Venture Way, Suite 201]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>153926712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MASSACHUSETTS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>079520631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Massachusetts Amherst]]></Name>
<CityName>Amherst</CityName>
<StateCode>MA</StateCode>
<ZipCode>010039284</ZipCode>
<StreetAddress><![CDATA[Knowles Engineering Bldg]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~432214</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project examined increasing the security of computer chips called field programmable gate arrays (FPGAs). The chips can implement different types of circuits at different times. With one set of programming information, an FPGA could operate like a microprocessor. With another set, the device could operate like a computer interface chip. The programming information used to give an FPGA its function is called a "bitstream".</p> <p>Unfortunately, since FPGAs can potentially implement any type of circuit, it makes them vulnerable to attacks by hackers. If a bad person changes the bitstream, the chip could perform malicious activities. Most FPGA bitstreams are protected by encryption, a mathematical approach to scramble the programming information so an outside attacker can't change it.&nbsp;</p> <p>In this project we showed that is some cases, encryption circuits in an FPGA can be located and modified. To enhance protection, we developed ways to hide (obscure) the function of these circuits inside the FPGA to make them harder to detect. Some of these techniques involved modifying the circuits after the bitstream was loaded into the FPGA device.&nbsp;</p> <p>Microprocessor circuits are often implemented in FPGAs. In another part of the project we showed that it is possible to use hardware circuits to obscure the operation of software code. An external observer is unable to determine software operation simply by examining the software instructions stored in computer memory. We used mathematical techniques to show that reverse engineering the processor operation was impossible.&nbsp;</p> <p>Our work has been published in leading technical journals (IEEE/ACM Transactions) and in the proceedings of leading conferences. Two PhD students and three Masters students have been trained as part of the work. The students now have full-time positions in industry in the US. These broader impacts have a positive effect on society and they have increased the security of computer systems that contain FPGAs.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/08/2017<br>      Modified by: Russell&nbsp;Tessier</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project examined increasing the security of computer chips called field programmable gate arrays (FPGAs). The chips can implement different types of circuits at different times. With one set of programming information, an FPGA could operate like a microprocessor. With another set, the device could operate like a computer interface chip. The programming information used to give an FPGA its function is called a "bitstream".  Unfortunately, since FPGAs can potentially implement any type of circuit, it makes them vulnerable to attacks by hackers. If a bad person changes the bitstream, the chip could perform malicious activities. Most FPGA bitstreams are protected by encryption, a mathematical approach to scramble the programming information so an outside attacker can't change it.   In this project we showed that is some cases, encryption circuits in an FPGA can be located and modified. To enhance protection, we developed ways to hide (obscure) the function of these circuits inside the FPGA to make them harder to detect. Some of these techniques involved modifying the circuits after the bitstream was loaded into the FPGA device.   Microprocessor circuits are often implemented in FPGAs. In another part of the project we showed that it is possible to use hardware circuits to obscure the operation of software code. An external observer is unable to determine software operation simply by examining the software instructions stored in computer memory. We used mathematical techniques to show that reverse engineering the processor operation was impossible.   Our work has been published in leading technical journals (IEEE/ACM Transactions) and in the proceedings of leading conferences. Two PhD students and three Masters students have been trained as part of the work. The students now have full-time positions in industry in the US. These broader impacts have a positive effect on society and they have increased the security of computer systems that contain FPGAs.             Last Modified: 10/08/2017       Submitted by: Russell Tessier]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
