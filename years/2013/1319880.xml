<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CIF: Small: Rich Type Inference for Functional Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>457000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The correctness of computer software often relies on its adherence to application-specific invariants during the course of its execution. These invariants are complex, often involving relationships between many different parts of the system, and implicit, often never formally expressed in the text of the program. Violating these invariants, however, leads to numerous bugs and security holes. As a result, programmers employ static type systems to capture these invariants and enable the use of automated tools to check that they are maintained.  Algorithms for type inference allow complex types to remain implicit, easing software development and maintenance, while still readily available for documentation and enforcement. &lt;br/&gt;&lt;br/&gt;While recent type system extensions greatly enrich the expressiveness of statically typed languages, type inference algorithms have not kept pace. This research evaluates the integration of SMT (Satisfiability Modulo Theory) solvers into the type inference algorithm of an industrial-strength functional programming language. In particular, in collaboration with researchers at Microsoft Research Cambridge, it extends the type inference algorithm of the Glasgow Haskell Compiler (GHC).  GHC is a mature, open source, Haskell Compiler that is gaining popularity in industry due to its rich type system. The project also includes education and outreach components in the form of an advanced undergraduate/masters level course and in the direct support of Ph.D. students.</AbstractNarration>
<MinAmdLetterDate>08/07/2013</MinAmdLetterDate>
<MaxAmdLetterDate>05/14/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319880</AwardID>
<Investigator>
<FirstName>Stephanie</FirstName>
<LastName>Weirich</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephanie C Weirich</PI_FULL_NAME>
<EmailAddress>sweirich@cis.upenn.edu</EmailAddress>
<PI_PHON>2155732821</PI_PHON>
<NSF_ID>000368211</NSF_ID>
<StartDate>08/07/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<StreetAddress2><![CDATA[3451 Walnut St, 5th Flr Franklin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042250712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042250712</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Pennsylvania]]></Name>
<CityName>Philadelphia</CityName>
<StateCode>PA</StateCode>
<ZipCode>191046207</ZipCode>
<StreetAddress><![CDATA[3451 Walnut Street, P-221]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~450000</FUND_OBLG>
<FUND_OBLG>2015~7000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>This project considered extensions to the design of the typed, functional&nbsp;</span><span>programming language Haskell, as implemented by the Glasgow Haskell Compiler&nbsp;</span><span>(GHC). This compiler, GHC, is an open-source, freely available,</span><span>industrial-strength compiler. Although it is a often used as a vehicle for&nbsp;</span><span>research in programming language design, this compiler is used in industry by&nbsp;</span><span>thousands of developers from around the world.</span></p> <p><span><br /></span><span>The goal of this project is to explore the expressiveness of type inference&nbsp;</span><span>with the goal of increasing the reasoning available to programmers as they&nbsp;</span><span>develop their programs. In particular, this project focuses on "type-level</span><span>computation" an advanced feature of Haskell that allows developers to</span><span>"program" the compile-time checks made by GHC. This feature increases the&nbsp;</span><span>stability of software systems by allowing developers to catch bugs earlier in&nbsp;</span><span>the software process.</span></p> <p><span><br /></span><span>This project produced multiple extensions to the GHC compiler, which were&nbsp;</span><span>released as part of the main implementation. It has described and analyzed&nbsp;</span><span>these extension in multiple publications, which directly extend our&nbsp;</span><span>understanding of the capabilities of advanced type systems with respect to&nbsp;</span><span>type-level computation and its interaction with type inference. This&nbsp;</span><span>understanding derives from a variety of sources: the theoretical study of the&nbsp;</span><span>meta-properties of the extensions, the experimental study of implementation&nbsp;</span><span>themselves, and the experience with numerous application of these techniques&nbsp;</span><span>for a variety of purposes.</span></p> <p><span><br /></span><span>The broader impacts of this work include impacts in industry and education.&nbsp;</span><span>First, because GHC is an open source compiler, the results of this work are&nbsp;</span><span>directly available to software developers. To ensure technology transfer,&nbsp;</span><span>project members have made sustained efforts to connect to industrial Haskell&nbsp;</span><span>users through multiple presentations at developer conferences and&nbsp;</span><span>participation in the GHC steering committee.&nbsp; Secondly, this project has&nbsp;</span><span>contributed to education: directly supporting the education of Penn PhD&nbsp;</span><span>students and indirectly through outreach. One dissertation, partially&nbsp;</span><span>supported by this award, was recognized with an award from SIGPLAN, the</span><span>research association for programming languages. Project members also&nbsp;</span><span>contributed in mentoring the next generation of researchers in the field of&nbsp;</span><span>programming language design, through organizing and speaking at PLMW, a&nbsp;</span><span>mentoring workshop for students and early-career researchers.</span></p><br> <p>            Last Modified: 11/19/2018<br>      Modified by: Stephanie&nbsp;C&nbsp;Weirich</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project considered extensions to the design of the typed, functional programming language Haskell, as implemented by the Glasgow Haskell Compiler (GHC). This compiler, GHC, is an open-source, freely available,industrial-strength compiler. Although it is a often used as a vehicle for research in programming language design, this compiler is used in industry by thousands of developers from around the world.   The goal of this project is to explore the expressiveness of type inference with the goal of increasing the reasoning available to programmers as they develop their programs. In particular, this project focuses on "type-levelcomputation" an advanced feature of Haskell that allows developers to"program" the compile-time checks made by GHC. This feature increases the stability of software systems by allowing developers to catch bugs earlier in the software process.   This project produced multiple extensions to the GHC compiler, which were released as part of the main implementation. It has described and analyzed these extension in multiple publications, which directly extend our understanding of the capabilities of advanced type systems with respect to type-level computation and its interaction with type inference. This understanding derives from a variety of sources: the theoretical study of the meta-properties of the extensions, the experimental study of implementation themselves, and the experience with numerous application of these techniques for a variety of purposes.   The broader impacts of this work include impacts in industry and education. First, because GHC is an open source compiler, the results of this work are directly available to software developers. To ensure technology transfer, project members have made sustained efforts to connect to industrial Haskell users through multiple presentations at developer conferences and participation in the GHC steering committee.  Secondly, this project has contributed to education: directly supporting the education of Penn PhD students and indirectly through outreach. One dissertation, partially supported by this award, was recognized with an award from SIGPLAN, theresearch association for programming languages. Project members also contributed in mentoring the next generation of researchers in the field of programming language design, through organizing and speaking at PLMW, a mentoring workshop for students and early-career researchers.       Last Modified: 11/19/2018       Submitted by: Stephanie C Weirich]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
