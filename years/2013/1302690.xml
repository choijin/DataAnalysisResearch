<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Medium: Collaborative Research: Scaling Machine Learning to Massive Datasets---A Logic Based Approach</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>333000.00</AwardTotalIntnAmount>
<AwardAmount>333000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Machine learning (ML) algorithms have become ubiquitous across applications as diverse as science, engineering, business, finance, education and healthcare. However, development of ML software that can scale to massive datasets and that are also easy-to-use remains a challenge in part due to the fact that developing an ML tool currently requires the implementation of a deep software stack, from the actual runtime (i.e., how an ML algorithm is executed) to the API exposed to the users.&lt;br/&gt;&lt;br/&gt;This  project aims to develop DeML, a system to support the authoring and execution of ML tools. Specifically, DeML would allow ML algorithms to be formulated in the form of a declarative query over the training dataset. DeML  optimizes the execution of the query over a computing platform (e.g., Amazon EC2 or SQL Azure), taking into account the characteristics of the algorithm, the data, and the available computational resources. Adoption of DeML would greatly reduce the effort required to develop scalable implementations of ML algorithms. The project is organized around three thrusts: (i) Development of a declarative query language, based on extensions of Datalog; (ii) Analysis of runtime of DeML queries; (iii) Optimization of dataflow of DeML queries based on the characteristics of data sources and the capabilities of the underlying execution platform. The resulting open source DeML prototype implementation will be made freely available to the community through the project web page at: http://deml.cs.ucla.edu.&lt;br/&gt;&lt;br/&gt;The availability of the DeML could greatly lower the effort needed to author scalable implementations of ML algorithms for analysis of massive datasets, which in turn would increase the availability of such tools to the broader community. Experience gained by implementing and deploying ML algorithms at scale over modern cloud-computing platforms, could help inform critical design choices in the development of future cloud computing platforms for big data analytics, and hence impact a broad range of scientific, engineering, national security, healthcare and business applications of big data analytics. The project offers enhanced opportunities for research-based advanced training of graduate and undergraduate students, including members of groups that are currently under-represented in computer science, in databases, machine learning, and cloud computing.</AbstractNarration>
<MinAmdLetterDate>07/26/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/25/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1302690</AwardID>
<Investigator>
<FirstName>Neoklis</FirstName>
<LastName>Polyzotis</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Neoklis Polyzotis</PI_FULL_NAME>
<EmailAddress>alkis.polyzotis@gmail.com</EmailAddress>
<PI_PHON>4084290111</PI_PHON>
<NSF_ID>000340492</NSF_ID>
<StartDate>07/26/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Cruz</Name>
<CityName>Santa Cruz</CityName>
<ZipCode>950641077</ZipCode>
<PhoneNumber>8314595278</PhoneNumber>
<StreetAddress>1156 High Street</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA20</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>125084723</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SANTA CRUZ</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Santa Cruz]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>950641077</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA20</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~255709</FUND_OBLG>
<FUND_OBLG>2014~77291</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>The project targeted fundamental research in the application of declarative techniques (inspired by several years of research and practice in the field of database systems) in the development of tools and algorithms for machine learning at scale. In this direction, we focused on machine-learning algorithms based on stochastic coordinate descent and in particular we investigated how we can improve their performance for big data using&nbsp;</span>techniques inspired by columnar database systems. Whereas typical parallel implementations of machine learning algorithms perform repeated parallel scans on row-organized data (basically, the features of the training examples), our approach employs a column-based organization that yields several benefits: it is much better suited for coordinate-descent algorithms; it offers for better compression of the data; and, it revealed opportunities to further optimize the algorithm by taking advantage of the column-at-a-time processing. Specifically, we first analyze the weight-update rules for parallel stochastic coordinate descent and show that the rules can be approximated with the use of split functions, which allow "simulating" data scans with little computational overhead. We prove that such split functions exist for specific classes of loss functions which include logistic loss. We then show how to leverage this theoretical result in a parallel implementation of coordinate descent, where each worker node processes its shard of a column to compute a set of split functions, communicates these functions to the controller, and the latter uses them to do weight updates through simulated scans over the data. We couple this design with efficient data structures in the worker and the master, and with a method to columnarize the data on-the-fly so that each worker can compute its split functions efficiently. This approach results in significant savings per worker and enables better scale-out with the number of workers. We performed extensive experimental studies to evaluate the performance of this scheme in different environments, including a deployment of the algorithm in the EC2 cloud. Our experiments show that our parallel algorithm with split functions consistently outperform common baselines, yielding 2x in total wall time and up to 10x in machine-time in the EC2 setup, without compromising on the quality of trained model.&nbsp;</p><br> <p>            Last Modified: 06/08/2018<br>      Modified by: Neoklis&nbsp;Polyzotis</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The project targeted fundamental research in the application of declarative techniques (inspired by several years of research and practice in the field of database systems) in the development of tools and algorithms for machine learning at scale. In this direction, we focused on machine-learning algorithms based on stochastic coordinate descent and in particular we investigated how we can improve their performance for big data using techniques inspired by columnar database systems. Whereas typical parallel implementations of machine learning algorithms perform repeated parallel scans on row-organized data (basically, the features of the training examples), our approach employs a column-based organization that yields several benefits: it is much better suited for coordinate-descent algorithms; it offers for better compression of the data; and, it revealed opportunities to further optimize the algorithm by taking advantage of the column-at-a-time processing. Specifically, we first analyze the weight-update rules for parallel stochastic coordinate descent and show that the rules can be approximated with the use of split functions, which allow "simulating" data scans with little computational overhead. We prove that such split functions exist for specific classes of loss functions which include logistic loss. We then show how to leverage this theoretical result in a parallel implementation of coordinate descent, where each worker node processes its shard of a column to compute a set of split functions, communicates these functions to the controller, and the latter uses them to do weight updates through simulated scans over the data. We couple this design with efficient data structures in the worker and the master, and with a method to columnarize the data on-the-fly so that each worker can compute its split functions efficiently. This approach results in significant savings per worker and enables better scale-out with the number of workers. We performed extensive experimental studies to evaluate the performance of this scheme in different environments, including a deployment of the algorithm in the EC2 cloud. Our experiments show that our parallel algorithm with split functions consistently outperform common baselines, yielding 2x in total wall time and up to 10x in machine-time in the EC2 setup, without compromising on the quality of trained model.        Last Modified: 06/08/2018       Submitted by: Neoklis Polyzotis]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
