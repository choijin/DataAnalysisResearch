<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF:Small: Derandomization and Lower Bounds</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>399999.00</AwardTotalIntnAmount>
<AwardAmount>399999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computation is omnipresent in society, and randomness plays an important role, both as a liability and as a commodity. In particular, the ability to flip fair coins seems surprisingly useful in a plethora of computational settings, and a central line of research in the theory of computing tries to determine its actual power. In that context researchers develop deterministic simulations of randomized processes that are as efficient as possible. The canonical approach entails the construction of pseudo-random generators, which are efficient deterministic procedures that stretch a short random coin flip sequence to a much longer sequence that still looks random to the process under investigation. The driving question of the project is whether this canonical approach is omnipotent or whether there exist better ways to obtain deterministic simulations.&lt;br/&gt;&lt;br/&gt;The project focuses on the relationships between derandomization, pseudo-random generators, and lower bounds. The existence of efficient pseudo-random generators is known to be equivalent to certain types of circuit lower bounds (which remain open). There are also a number of results showing that derandomization implies circuit lower bounds of some sort, but the lower bounds are typically not strong enough so as to imply back the same derandomization. A major thrust of the project is to establish equivalences between circuit lower bounds and derandomization, implying that canonical derandomization through pseudo-random generators is omnipotent.&lt;br/&gt;&lt;br/&gt;The PI and his coworkers have developed a framework for deriving such results, and intend to apply it to large classes of randomized processes, including efficient decision procedures and efficient verification processes known as Arthur-Merlin games. The main focus lies on the standard notion of derandomization, in which the simulation needs to be correct everywhere, but the PI will as well consider weaker notions in which the deterministic simulation is allowed to err on some inputs.&lt;br/&gt;&lt;br/&gt;Apart from furthering our knowledge about the power of randomness in computation, the project aims to provide graduate training on that topic and in the broader area of computational complexity.</AbstractNarration>
<MinAmdLetterDate>09/05/2013</MinAmdLetterDate>
<MaxAmdLetterDate>09/05/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1319822</AwardID>
<Investigator>
<FirstName>Dieter</FirstName>
<LastName>van Melkebeek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Dieter van Melkebeek</PI_FULL_NAME>
<EmailAddress>dieter@cs.wisc.edu</EmailAddress>
<PI_PHON>6082624196</PI_PHON>
<NSF_ID>000295926</NSF_ID>
<StartDate>09/05/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>Madison</CityName>
<StateCode>WI</StateCode>
<ZipCode>537061685</ZipCode>
<StreetAddress><![CDATA[1210 W Dayton St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7927</Code>
<Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7927</Code>
<Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~399999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The <strong>intellectual merits</strong> of this project deal with the power of randomness in computation: Can randomness be eliminated without increasing the required run time by much?</p> <p>The question is intricately related to the existence of explicit hard computational problems. This is because whether a sequene of numbers looks random to a computing device, depends on the power of that device. On the one hand, if a sequence of numbers looks random, it should be computationally hard to predict the next number given the previous numbers in the sequence. On the other hand, given an explicit hard computational problem, one can try and use it to construct a sequence of numbers that&nbsp;has a definite pattern but nevertheless looks random to the device as the device does not have the computational power needed to discern the pattern. The process that generates such a sequence is known as a pseudorandom generator. If it exists, it allows one to efficiently derandomize the device, i.e., deterministically simulate randomized processes on the device with a small overhead in computational resources.</p> <p>The project establishes an equivalence between hardness and derandomization in the context of verification procedures known as Arthur-Merlin protocols. The result implies that if derandomization is possible at all in that setting, then it can be done in a canonical way that is oblivious to the procotol, namely via a pseudo-random generator based on an explicit hard computational problem. The question whether derandomization is actually possible in that setting remains open.&nbsp;</p> <p><strong>Broader impacts</strong> of the project include the training of five graduate students and the organization of reading groups with about fifteen participants. Another broader impact is the development of lecture notes on derandomization.</p><br> <p>            Last Modified: 01/14/2019<br>      Modified by: Dieter&nbsp;Van Melkebeek</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The intellectual merits of this project deal with the power of randomness in computation: Can randomness be eliminated without increasing the required run time by much?  The question is intricately related to the existence of explicit hard computational problems. This is because whether a sequene of numbers looks random to a computing device, depends on the power of that device. On the one hand, if a sequence of numbers looks random, it should be computationally hard to predict the next number given the previous numbers in the sequence. On the other hand, given an explicit hard computational problem, one can try and use it to construct a sequence of numbers that has a definite pattern but nevertheless looks random to the device as the device does not have the computational power needed to discern the pattern. The process that generates such a sequence is known as a pseudorandom generator. If it exists, it allows one to efficiently derandomize the device, i.e., deterministically simulate randomized processes on the device with a small overhead in computational resources.  The project establishes an equivalence between hardness and derandomization in the context of verification procedures known as Arthur-Merlin protocols. The result implies that if derandomization is possible at all in that setting, then it can be done in a canonical way that is oblivious to the procotol, namely via a pseudo-random generator based on an explicit hard computational problem. The question whether derandomization is actually possible in that setting remains open.   Broader impacts of the project include the training of five graduate students and the organization of reading groups with about fifteen participants. Another broader impact is the development of lecture notes on derandomization.       Last Modified: 01/14/2019       Submitted by: Dieter Van Melkebeek]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
