<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>BOGOR : A Model Checking Framework for Dynamic Software</AwardTitle>
<AwardEffectiveDate>09/01/2004</AwardEffectiveDate>
<AwardExpirationDate>05/31/2006</AwardExpirationDate>
<AwardTotalIntnAmount>3925.00</AwardTotalIntnAmount>
<AwardAmount>176074</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010500</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCR-0306607&lt;br/&gt;Matthew B. Dwyer&lt;br/&gt;Kansas State University&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Model checking is emerging as a popular technology for reasoning about behavior properties of a wide variety of software artifacts including: requirements models, architectural descriptions, designs, implementations, and process models.  The complexity of model checking is well-known, yet cost-effective analyses have been achieved by exploiting semantic properties of specific software artifacts.  Adapting a model checking tool to exploit this kind of "domain knowledge" often requires in-depth knowledge of the tool's implementation.  We believe that with appropriate tool support, domain experts will be able to develop efficient model  hecking-based analyses for a variety of software models.&lt;br/&gt;&lt;br/&gt;To explore this hypothesis, our project is developing BOGOR, a model checking framework with an extensible input language for defining domain-specific constructs and a modular interface design to ease the optimization of domain-specific state-space encodings, reductions and search algorithms.  We will use BOGOR to investigate the degree to which customization of model checking algorithms can yield improved&lt;br/&gt;scalability.  Specifically, we will adapt BOGOR to reason about event-driven component-based design models and to reason about multi-threaded Java programs.  We will evaluate the ease with which&lt;br/&gt;domain information can be incorporated into the framework and the space/time improvements that can be achieved by exploiting that information.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/24/2004</MinAmdLetterDate>
<MaxAmdLetterDate>08/24/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0444167</AwardID>
<Investigator>
<FirstName>Matthew</FirstName>
<LastName>Dwyer</LastName>
<EmailAddress>md3cn@virginia.edu</EmailAddress>
<StartDate>08/24/2004</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Nebraska-Lincoln</Name>
<CityName>Lincoln</CityName>
<ZipCode>685031435</ZipCode>
<PhoneNumber>4024723171</PhoneNumber>
<StreetAddress>151 Prem S. Paul Research Center</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Nebraska</StateName>
<StateCode>NE</StateCode>
</Institution>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code/>
<Text/>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
