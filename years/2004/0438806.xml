<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SoD: Algorithmic Differentiation of Functional Programs</AwardTitle>
<AwardEffectiveDate>05/01/2005</AwardEffectiveDate>
<AwardExpirationDate>04/30/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>420000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCF-0438806&lt;br/&gt;Jeffrey Mark Siskind&lt;br/&gt;Purdue University&lt;br/&gt;Algorithmic Differentiation of Functional Programs&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Automatic Differentiation (AD) is an established enterprise that seeks to take the derivatives of functions specified as imperative programs through symbolic manipulation rather than finite differencing.  A framework for applying AD techniques to modern functional-programming languages, instead of imperative&lt;br/&gt;programs, will be investigated.  This framework will treat AD operators as higher-order functions that map function objects to function objects.  These operators will be compositional and will apply to more general functions than the maps between real vectors to which traditional AD transformations are limited.  This framework offers several advantages:&lt;br/&gt;&lt;br/&gt;- a callee can perform the necessary AD rather than insisting that callers   provide appropriately transformed functions, making it practical to   compositionally build an efficient library of functions based on derivatives &lt;br/&gt;- higher-order derivatives can be constructed naturally, without special   mechanisms&lt;br/&gt;- gradients can be taken through processes that themselves involve AD-based   optimization or approximate iterate-to-fixedpoint operators such as PDE   solvers&lt;br/&gt;&lt;br/&gt;The proposed work will have broad impact in such diverse fields as engineering design, scientific computing, and machine learning, where researchers regularly need to take derivatives of complex programs.  It has intellectual merit as it offers a novel synthesis of the differential calculus with the lambda calculus.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>02/14/2005</MinAmdLetterDate>
<MaxAmdLetterDate>03/09/2010</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0438806</AwardID>
<Investigator>
<FirstName>Jeffrey</FirstName>
<LastName>Siskind</LastName>
<EmailAddress>qobi@purdue.edu</EmailAddress>
<StartDate>02/14/2005</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7372</Code>
<Text>ITR-SCIENCE OF DESIGN</Text>
</ProgramElement>
<ProgramReference>
<Code>1658</Code>
<Text>SOFTWARE</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
