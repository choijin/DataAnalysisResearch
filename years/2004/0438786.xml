<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SoD: A Generative Model of Feature Interactions</AwardTitle>
<AwardEffectiveDate>12/15/2004</AwardEffectiveDate>
<AwardExpirationDate>11/30/2008</AwardExpirationDate>
<AwardTotalIntnAmount>414713.00</AwardTotalIntnAmount>
<AwardAmount>414713</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>0438786&lt;br/&gt;Don Batory&lt;br/&gt;U of Texas Austin&lt;br/&gt;&lt;br/&gt;A Generative Model of Feature Interactions&lt;br/&gt;&lt;br/&gt;This research extends work in the area of Generative Programming, which explains how programs in a domain are designed from features. A generative programming model is both constructive and predictive because it tells us how to synthesize programs in a domain with particular properties. A program's design can be specified as a base program plus a set of features, which are units of program functionality. Programs consisting of features can be formalized mathematically as an algebra with suitable composition operators. Research in generative programming shows that evaluation of algebraic expressions synthesizes the target program, and expression optimization optimizes the program's design. &lt;br/&gt;&lt;br/&gt;Feature interaction occurs when one or more features modify or influence another feature. We focus on interactions that are static and structural: how a feature influences (or changes) the source code of another feature. Our research contributes to a Science of Design by showing how feature interactions obey algebraic laws that lead to highly structured programs that are amenable to synthesis, optimization, and evolution. We will demonstrate practical applications of our work: (1) refactoring Java legacy applications into feature-based designs (so that features can be more easily added and removed), and (2) realizing a form of on-demand modularization, where a query specifies a particular concern and our theory tells us how to extract software that satisfies that query.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>12/13/2004</MinAmdLetterDate>
<MaxAmdLetterDate>12/13/2004</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0438786</AwardID>
<Investigator>
<FirstName>Don</FirstName>
<LastName>Batory</LastName>
<EmailAddress>batory@cs.utexas.edu</EmailAddress>
<StartDate>12/13/2004</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7372</Code>
<Text>ITR-SCIENCE OF DESIGN</Text>
</ProgramElement>
<ProgramReference>
<Code>1658</Code>
<Text>SOFTWARE</Text>
</ProgramReference>
<ProgramReference>
<Code>7372</Code>
<Text>ITR-SCIENCE OF DESIGN</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
