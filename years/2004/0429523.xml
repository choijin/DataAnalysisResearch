<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Optimal recoding of binary numbers for cryptographic operations</AwardTitle>
<AwardEffectiveDate>08/01/2004</AwardEffectiveDate>
<AwardExpirationDate>07/31/2007</AwardExpirationDate>
<AwardAmount>156000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Chitaranjan Das</SignBlockName>
</ProgramOfficer>
<AbstractNarration>0429523  &lt;br/&gt;Rajendra S. Katti&lt;br/&gt;North Dakota State University Fargo&lt;br/&gt;&lt;br/&gt;Algorithms to recode a binary number into a signed binary number (such numbers have &lt;br/&gt;digits {0,1,-1}) will be developed by the proposed work. The main advantage of the &lt;br/&gt;algorithms  developed  is  that  they  examine  the  binary  numbers  from  left-to-right.  The &lt;br/&gt;algorithms must result in minimal joint weight to reduce the number of operations in the &lt;br/&gt;multi-exponentiation operation used in cryptography. Developing such  algorithms for &lt;br/&gt;more than one integer has never been done before. In fact this was considered as a hard &lt;br/&gt;problem  in  the  literature.  The  PI  developed  a  left-to-right  recoding  algorithm  for  two &lt;br/&gt;integers that resulted in minimal joint weight. This resulted in a solution to a problem that &lt;br/&gt;had been an open problem since 2001. Extending this to the general case  of N integers &lt;br/&gt;will be considered. This extension is no trivial task because the only known solution to &lt;br/&gt;minimal  joint  weight  recoding  of  N  integers  examines  the  integers  from  right-to-left. &lt;br/&gt;Examining the integers from left-to-right makes the algorithm compatible with Shamir.s &lt;br/&gt;left-to-right multi-exponentiation method. This leads to less memory requirement for &lt;br/&gt;multi-exponentiation, which is very important in memory-constrained systems like smart &lt;br/&gt;cards. Other extensions like recoding for  sliding window methods of multi-&lt;br/&gt;exponentiation will also be considered. In this case the algorithms developed, other than &lt;br/&gt;being left-to-right will also maximize the length  of zeros between windows. This again &lt;br/&gt;results  in  decreasing  memory  requirement  while  increasing  the  speed  of  multi-&lt;br/&gt;exponentiation. Recoding with other digit sets like {0,1,-1,3,-3} will also be considered. &lt;br/&gt;Recodings developed by the proposed project are useful in cases where group inversion is &lt;br/&gt;very fast. Such groups include the elliptic curve group, groups of rational divisor classes &lt;br/&gt;of hyperelliptic curves, trace zero varieties and XTR subgroups.  &lt;br/&gt; &lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/26/2004</MinAmdLetterDate>
<MaxAmdLetterDate>04/15/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0429523</AwardID>
<Investigator>
<FirstName>Rajendra</FirstName>
<LastName>Katti</LastName>
<EmailAddress>rajkatti@uw.edu</EmailAddress>
<StartDate>07/26/2004</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Dakota State University Fargo</Name>
<CityName>FARGO</CityName>
<ZipCode>581086050</ZipCode>
<PhoneNumber>7012318045</PhoneNumber>
<StreetAddress>Dept 4000 - PO Box 6050</StreetAddress>
<CountryName>United States</CountryName>
<StateName>North Dakota</StateName>
<StateCode>ND</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4715</Code>
<Text>COMPUTER SYSTEMS ARCHITECTURE</Text>
</ProgramElement>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
