<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:     Formal Methods for Behavioral Subclassing and Callbacks</AwardTitle>
<AwardEffectiveDate>09/01/2004</AwardEffectiveDate>
<AwardExpirationDate>08/31/2007</AwardExpirationDate>
<AwardTotalIntnAmount>119999.00</AwardTotalIntnAmount>
<AwardAmount>119999</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Proposals 0429894/Naumann 0429567/Leavens&lt;br/&gt;&lt;br/&gt;Collaborative Research:&lt;br/&gt;Formal Methods for Behavioral Subclassing and Callbacks&lt;br/&gt;&lt;br/&gt;David A. Naumann and Gary T. Leavens&lt;br/&gt;&lt;br/&gt;For evolvability, scalability, and productivity, software systems must be composed of extensible components. Features of object-oriented programming languages such as inheritance and dynamic dispatch, and&lt;br/&gt;techniques like callbacks and downcalls, are crucial but they invert the usual layering of abstractions.  Aliasing among objects is crucial for efficiency but can breach encapsulation boundaries.  Yet abstraction&lt;br/&gt;and encapsulation are necessary to separately validate individual components.&lt;br/&gt;&lt;br/&gt;This project will advance the theory of specification, development, and verification for object-oriented software, focusing on behavioral subclassing, alias confinement, and callbacks.  Core features of the&lt;br/&gt;Java Modeling Language (JML) for behavioral interface specification will be studied, using a confinement discipline to control aliasing and model programs to specify callbacks.  The ideas will be presented&lt;br/&gt;in a cogent, simple, and robust theory, to facilitate applications by tools, comparison between alternative proposals for specification notations and proof rules, and teaching.  The theory will be encoded&lt;br/&gt;in a theorem prover and key results machine-checked.&lt;br/&gt;&lt;br/&gt;This project will provide theoretical guidance for the designers of programming and specification languages.  The results will also help clarify and improve techniques used in practice.  Direct application is expected in projects based on JML and in work by our Brazilian collaborators.</AbstractNarration>
<MinAmdLetterDate>08/12/2004</MinAmdLetterDate>
<MaxAmdLetterDate>06/01/2005</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0429567</AwardID>
<Investigator>
<FirstName>Gary</FirstName>
<LastName>Leavens</LastName>
<EmailAddress>leavens@cs.ucf.edu</EmailAddress>
<StartDate>08/12/2004</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
