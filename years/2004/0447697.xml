<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:    Clamp - Language Support for C-Level Abstraction, Modularity, and Portability</AwardTitle>
<AwardEffectiveDate>09/15/2005</AwardEffectiveDate>
<AwardExpirationDate>08/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>CCF-0447697&lt;br/&gt;Dan Grossman&lt;br/&gt;University of Washington&lt;br/&gt;&lt;br/&gt;CAREER: Clamp: Language Support for C-Level Abstraction, Modularity,    and Portability&lt;br/&gt;&lt;br/&gt;This research involves the design, implementation, and evaluation of new programming-language technologies (in a new language called "Clamp") for modular and portable low-level software.  The goal is to provide a&lt;br/&gt;language for programmers that allows for machine-specific assumptions where necessary and a powerful system for ensuring such assumptions are never made implicitly.  Doing so should make it easier to build&lt;br/&gt;robust software infrastructure and detect defects early in the software-development process.  Automated support for checking low-level invariants should also make it easier to teach reliable-software idioms to students and professionals.  Key technical difficulties in providing a safe-but-convenient low-level language are support for alias analysis (determining when program expressions refer to the same memory) and compile-time arithmetic (reasoning about the possible results of a numeric computation).  Therefore, the Clamp infrastructure is intended to make it easy to use different approaches to these problems with minimal change to the Clamp implementation.</AbstractNarration>
<MinAmdLetterDate>03/07/2005</MinAmdLetterDate>
<MaxAmdLetterDate>08/01/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0447697</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Grossman</LastName>
<EmailAddress>djg@cs.washington.edu</EmailAddress>
<StartDate>03/07/2005</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>2880</Code>
<Text>SOFTWARE ENGINEERING AND LANGU</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
