<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Efficient Model Checking of Concurrent and Dynamic Software</AwardTitle>
<AwardEffectiveDate>10/01/2004</AwardEffectiveDate>
<AwardExpirationDate>09/30/2009</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>320000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Software correctness is essential to avoid costly or catastrophic&lt;br/&gt;failures in modern safety-critical systems, such as the ones relied&lt;br/&gt;upon by NASA.  Model checking is a verification technique that checks&lt;br/&gt;the correctness of a system by exhaustively exploring all of its&lt;br/&gt;possible behaviors.  It has proven successful in the development of&lt;br/&gt;hardware designs and is used by Intel and other major hardware&lt;br/&gt;companies. Before model checking can significantly improve the&lt;br/&gt;reliability of mission critical software, a number of basic research&lt;br/&gt;problems must be addressed. The extraordinary complexity of real&lt;br/&gt;systems results in an explosion in the possible behaviors that need to&lt;br/&gt;be checked.  The techniques devised to mitigate this problem for&lt;br/&gt;hardware can also be applied to software; however, some of the most&lt;br/&gt;successful ones, such as symbolic model checking, have proven&lt;br/&gt;difficult to apply in this new domain. &lt;br/&gt;&lt;br/&gt;The primary direction of this research is to adapt these techniques to&lt;br/&gt;the task of checking concurrent software.  Fundamental changes to the&lt;br/&gt;algorithms are required due to the different characteristics of&lt;br/&gt;hardware and software systems. Modern software systems are often&lt;br/&gt;developed using object-oriented languages, such as C++ and Java. While&lt;br/&gt;object-oriented languages ease the design phase, they introduce&lt;br/&gt;additional challenges for verification. One important characteristic&lt;br/&gt;of modern object-oriented software designs is the dynamic creation of&lt;br/&gt;threads and objects. This research aims at leveraging existing&lt;br/&gt;techniques, such as the partial-order reduction and symbolic model&lt;br/&gt;checking, by extending them to address this challenge.</AbstractNarration>
<MinAmdLetterDate>09/14/2004</MinAmdLetterDate>
<MaxAmdLetterDate>07/24/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0429120</AwardID>
<Investigator>
<FirstName>Edmund</FirstName>
<LastName>Clarke</LastName>
<EmailAddress>emc@cs.cmu.edu</EmailAddress>
<StartDate>09/14/2004</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7214</Code>
<Text>HIGHLY DEPENDABLE COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
