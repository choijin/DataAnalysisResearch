<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Architecture-based Run-time Fault Diagnosis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Systems today must cope with failures induced by many factors outside the control of the organization producing the software: faults in infrastructure and components developed by third-parties, unpredictable loads, and variable resources. Modern systems must therefore take increasing responsibility for problem detection and repair at runtime. Effective fault detection and repair could be greatly enhanced by run-time fault diagnosis and localization -- the ability to identify the source of problem so that appropriate actions can be taken either by a human operator or automated mechanisms to repair the system. &lt;br/&gt;&lt;br/&gt;In this research we are developing new foundations for run-time fault diagnosis and localization. To do this we are extending and synthesizing recent advances in two areas. The first is the use of architecture models for monitoring a system at run-time. The second is the use of spectrum-based reasoning for fault localization (SFL). SFL is a lightweight technique that takes as its input a form of trace abstraction and produces a list of likely fault candidates, ordered by probability of being the true fault explanation. It has been used with impressive results during design time but thus far has not been exploited at runtime in the context of architecture-based monitoring and diagnosis. &lt;br/&gt;&lt;br/&gt;This research will improve the trustworthiness and robustness of modern software systems by providing new techniques for diagnosing faults while a system is running, thereby providing an improved basis for fault detection and resolution.</AbstractNarration>
<MinAmdLetterDate>08/03/2011</MinAmdLetterDate>
<MaxAmdLetterDate>08/03/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116848</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Garlan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David Garlan</PI_FULL_NAME>
<EmailAddress>garlan@cs.cmu.edu</EmailAddress>
<PI_PHON>4122685056</PI_PHON>
<NSF_ID>000437302</NSF_ID>
<StartDate>08/03/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Robustness, or the ability to continue operation in the presence of faults, is an increasingly important concern for trustworthy software systems. Software is involved in the day-to-day operation of most aspects of society, for example in managing business processes, critical infrastructure, financial transactions and transport and factory automation. While methods for designing software have been helpful in improving confidence in that software, systems today must cope with failures induced by a variety of factors largely outside the control of the organization producing the software, e.g., faults in infrastructure on which the system runs and components provided by third-parties, unpredictable loads, and varying resources. Systems must therefore take increasing responsibility for their own problem detection and repair while they operate (i.e., at run time).</p> <p>Fault detection and repair could be greatly enhanced by run-time fault diagnosis and localization: i.e., the ability to identify the source of a problem so that appropriate actions can be taken either by a human operator or automated mechanisms to repair the system. Run-time diagnosis for today&rsquo;s complex systems, however, is particularly challenging. First, the presence of concurrency (where many computations are happening in the system at the same time) makes it difficult to identify which of many possible computations might have caused a problem. Second, reliance on middleware for distribution, and more generally the use of components and infrastructure produced by many organizations, means that in many cases code for all parts of the system is not available. Third, in many systems problems may be intermittent, caused by transient faults or variability in loads. Fourth many &ldquo;faults&rdquo; that we care about are reflected by violation of a system&rsquo;s qualities such as how long it takes to respond, or the cost to operate, rather than by a direct failure such as a server or system crash. Such &ldquo;softer&rdquo; faults are more difficult to detect. Consequently, while fault diagnosis has been studied extensively for both hardware and software systems as a development-time activity, the ability to do this at run time for complex systems has remained an elusive goal.</p> <p>In this project, we addressed the challenges of providing run-time fault diagnosis and localization along the following thrusts:</p> <p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We adapted a fault localization algorithm that has previously been used during testing for use at run time. This involved developing techniques for (a) specifying and monitoring behaviors in a running system using an event processing approach that abstracts system level events to architecture level behaviors, (b) determining an optimal window of observations that would allow us to have high confidence in the results of the fault localization algorithm, which uses statistical analysis and therefore requires a number of observations, (c) detecting behavior failures, that include soft faults in addition to outright failure, to handle the failure to meet certain quality standards or service level agreements.</p> <p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We developed formal models that allow us to reason about the sufficiency of information for diagnosis that allow the algorithm to work in real systems. Specifically, we developed (a) an unobservability theory that allows us to set thresholds to provide information about parts of the system that we cannot observe at run time (for example, parts of the system that are provided by third parties or are critical to the operation of the system) and (b) a theory of probe placement that allows us to reason about the optimal set of probes or monitors that need to be inserted into a system to still allow us to diagnose and repair problems</p> <p>We applied our theories to a number of case studies, including softwar...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Robustness, or the ability to continue operation in the presence of faults, is an increasingly important concern for trustworthy software systems. Software is involved in the day-to-day operation of most aspects of society, for example in managing business processes, critical infrastructure, financial transactions and transport and factory automation. While methods for designing software have been helpful in improving confidence in that software, systems today must cope with failures induced by a variety of factors largely outside the control of the organization producing the software, e.g., faults in infrastructure on which the system runs and components provided by third-parties, unpredictable loads, and varying resources. Systems must therefore take increasing responsibility for their own problem detection and repair while they operate (i.e., at run time).  Fault detection and repair could be greatly enhanced by run-time fault diagnosis and localization: i.e., the ability to identify the source of a problem so that appropriate actions can be taken either by a human operator or automated mechanisms to repair the system. Run-time diagnosis for todayÃ†s complex systems, however, is particularly challenging. First, the presence of concurrency (where many computations are happening in the system at the same time) makes it difficult to identify which of many possible computations might have caused a problem. Second, reliance on middleware for distribution, and more generally the use of components and infrastructure produced by many organizations, means that in many cases code for all parts of the system is not available. Third, in many systems problems may be intermittent, caused by transient faults or variability in loads. Fourth many "faults" that we care about are reflected by violation of a systemÃ†s qualities such as how long it takes to respond, or the cost to operate, rather than by a direct failure such as a server or system crash. Such "softer" faults are more difficult to detect. Consequently, while fault diagnosis has been studied extensively for both hardware and software systems as a development-time activity, the ability to do this at run time for complex systems has remained an elusive goal.  In this project, we addressed the challenges of providing run-time fault diagnosis and localization along the following thrusts:  -       We adapted a fault localization algorithm that has previously been used during testing for use at run time. This involved developing techniques for (a) specifying and monitoring behaviors in a running system using an event processing approach that abstracts system level events to architecture level behaviors, (b) determining an optimal window of observations that would allow us to have high confidence in the results of the fault localization algorithm, which uses statistical analysis and therefore requires a number of observations, (c) detecting behavior failures, that include soft faults in addition to outright failure, to handle the failure to meet certain quality standards or service level agreements.  -       We developed formal models that allow us to reason about the sufficiency of information for diagnosis that allow the algorithm to work in real systems. Specifically, we developed (a) an unobservability theory that allows us to set thresholds to provide information about parts of the system that we cannot observe at run time (for example, parts of the system that are provided by third parties or are critical to the operation of the system) and (b) a theory of probe placement that allows us to reason about the optimal set of probes or monitors that need to be inserted into a system to still allow us to diagnose and repair problems  We applied our theories to a number of case studies, including software that controls a computer chip fabrication factory, and web-based technology that is deployed on the cloud. We were able to localize errors happening in real time in a system with many co...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
