<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Holistic System Solutions for Empowering Parallel Programmers</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/01/2012</AwardEffectiveDate>
<AwardExpirationDate>03/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>538671.00</AwardTotalIntnAmount>
<AwardAmount>538671</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The central vision of this project is to bring parallel programming, which continues to be a daunting task to this day even for experts, to mainstream programmers. The fundamental challenge is that the concurrency semantics defined by memory models of popular parallel languages are too weak. This project is investigating solutions that span from processors to languages to enable stronger memory consistency models starting with sequential consistency, but goes far further in achieving much stronger concurrency semantics such as determinism at the language-level. The end goal is to find solutions that provide the best of both worlds: sequential semantics and parallel performance. A set of correctness and performance enhancing tools that exploit the stronger concurrency semantics are also being developed.&lt;br/&gt;&lt;br/&gt;Advances in computing have relied on the exponential growth in processor performance. Unfortunately, unlike in the past, successive generations of processors can no longer improve sequential performance because of technology constraints. The burden has shifted to software developers who must now evolve to take advantage of parallelism in multi-core processors. Unfortunately, parallel programming continues to be a daunting task to this day even for experts. This project is developing solutions that can bring parallel programming to mainstream programmers by dramatically simplifying the process of developing, debugging, and maintaining parallel software.  Programmer productivity tools developed as part of this research will be directly beneficial to students, software developers and researchers. By involving colleagues in industry, this project could serve as a catalyst to bring the software and processor industry together to solve a problem that is common to both: enabling mainstream programmers to take advantage of multi-core architectures.</AbstractNarration>
<MinAmdLetterDate>03/26/2012</MinAmdLetterDate>
<MaxAmdLetterDate>09/03/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1149773</AwardID>
<Investigator>
<FirstName>Satish</FirstName>
<LastName>Narayanasamy</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Satish Narayanasamy</PI_FULL_NAME>
<EmailAddress>nsatish@eecs.umich.edu</EmailAddress>
<PI_PHON>8584010455</PI_PHON>
<NSF_ID>000083847</NSF_ID>
<StartDate>03/26/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Regents of the University of Michigan - Ann Arbor</Name>
<CityName>Ann Arbor</CityName>
<ZipCode>481091274</ZipCode>
<PhoneNumber>7347636438</PhoneNumber>
<StreetAddress>3003 South State St. Room 1062</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI12</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>073133571</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF MICHIGAN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>073133571</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Michigan Ann Arbor]]></Name>
<CityName>Ann Arbor</CityName>
<StateCode>MI</StateCode>
<ZipCode>481091271</ZipCode>
<StreetAddress><![CDATA[3003 South State St. Room 1062]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~312279</FUND_OBLG>
<FUND_OBLG>2015~226392</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>This project made significant advancements that can help bring parallel programming to the masses. It developed efficient solutions for enabling strong concurrency semantics and several programmer productivity tools for reasoning about concurrent executions.</span></p> <p><span>At the heart of concurrency semantics is the memory model. A memory model defines the set of possible orders in which memory operations from different threads can interleave and the possible values a read can return. Even this fundamental property is not cleanly defined in the memory models of popular languages such as C++ and Java, and remains a topic for active debate. Sequential consistency (SC) is widely recognized as a strong concurrency semantics that is intuitive for programmers. This project provided strong evidence that SC can be guaranteed at the language-level for only a small performance overhead (~2%). An LLVM-based SC-preserving open-source compiler was released to the public. The project also showed that simple extensions to commodity processors, including accelerators such as GPUs, can significantly lower the overhead of fences and enable SC in practice.</span></p> <p><span>This project also developed novel program analysis methods and tools for analyzing and debugging executions of concurrent programs. Ability to deterministically replay a concurrent execution can significantly help a programmer understand and debug. However, recording non-determinism due to data-races incurred significant performance overhead. This project used profile-based static analysis named Chimera to produce a practically feasible low-overhead recording solution. This project also extended the capabilities of a dynamic data-race detector to efficiently reason about asynchronous concurrency in mobile and web applications.&nbsp;</span></p> <p>&nbsp;</p><br> <p>            Last Modified: 08/16/2018<br>      Modified by: Satish&nbsp;Narayanasamy</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project made significant advancements that can help bring parallel programming to the masses. It developed efficient solutions for enabling strong concurrency semantics and several programmer productivity tools for reasoning about concurrent executions.  At the heart of concurrency semantics is the memory model. A memory model defines the set of possible orders in which memory operations from different threads can interleave and the possible values a read can return. Even this fundamental property is not cleanly defined in the memory models of popular languages such as C++ and Java, and remains a topic for active debate. Sequential consistency (SC) is widely recognized as a strong concurrency semantics that is intuitive for programmers. This project provided strong evidence that SC can be guaranteed at the language-level for only a small performance overhead (~2%). An LLVM-based SC-preserving open-source compiler was released to the public. The project also showed that simple extensions to commodity processors, including accelerators such as GPUs, can significantly lower the overhead of fences and enable SC in practice.  This project also developed novel program analysis methods and tools for analyzing and debugging executions of concurrent programs. Ability to deterministically replay a concurrent execution can significantly help a programmer understand and debug. However, recording non-determinism due to data-races incurred significant performance overhead. This project used profile-based static analysis named Chimera to produce a practically feasible low-overhead recording solution. This project also extended the capabilities of a dynamic data-race detector to efficiently reason about asynchronous concurrency in mobile and web applications.           Last Modified: 08/16/2018       Submitted by: Satish Narayanasamy]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
