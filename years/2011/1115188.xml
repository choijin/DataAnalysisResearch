<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Small: Query Compilation on Probabilistic Databases</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Frank Olken</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The goal of probabilistic databases is to manage large databases where the data is uncertain. Applications include Web-scale information extraction, RFID systems, scientific data management, biomedical data integration, business intelligence, data cleaning, approximate schema mappings, and data deduplication. Despite the huge demand and the intense recent research on probabilistic databases, no robust probabilistic database systems exist to date. The reason is that the probabilistic inference problem is, in general, intractable. Fortunately, in databases there are two distinct inputs to the probabilistic inference problem: the query and the database instance. This has led recently to the discovery of safe queries, which are queries that can be evaluated efficiently on any input database, and to new probabilistic inference algorithms that exploit the structure of the query. However, unsafe queries remain a major challenge in probabilistic databases.&lt;br/&gt;&lt;br/&gt;This project studies novel algorithms for evaluating unsafe queries on probabilistic database, with guaranteed performance. It uses a novel approach, query compilation, which translates the query into one of four targets: OBDDs, FBDDs, d-DNNFs, and circuits using inclusion/exclusion nodes. The project pursues two thrusts: (1) It develops instance-dependent compilation techniques that significantly extend the reach of instance-independent techniques used in safe queries. (2) It develops approximate query compilation techniques , which always run efficiently, even on intractable query, instance pairs, by sacrificing accuracy. These algorithms are conservative, in the sense that they return correct probabilities in all cases when the input query, instance pair is tractable.&lt;br/&gt;&lt;br/&gt;The Intellectual Merit of this project consists of new techniques for compiling queries into one of four compilation targets, OBDD, FBDD, d-DNNF, and inclusion/exclusion-based inference, using both exact inference (without performance guarantees), and approximate inference (with performance guarantees). It expands our understanding of probabilistic inference, and leads to practical approaches for probabilistic database engines. As Broader Impact, the project benefits a large class of applications that require general purpose management of uncertain data, ranging from large-scale information extraction systems, to scientific data management, to business intelligence. The project gradually incorporates topics from probabilistic data into into a curriculum for graduate level education; query compilation is already discussed in the PI's book on Probabilistic Databases ( http://dx.doi.org/10.2200/S00362ED1V01Y201105DTM016), a graduate-level textbook.&lt;br/&gt;&lt;br/&gt;For further information see the project web site at the URL: http://www.cs.washington.edu/homes/suciu/project-querycompilation.html</AbstractNarration>
<MinAmdLetterDate>08/05/2011</MinAmdLetterDate>
<MaxAmdLetterDate>08/05/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1115188</AwardID>
<Investigator>
<FirstName>Dan</FirstName>
<LastName>Suciu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Dan Suciu</PI_FULL_NAME>
<EmailAddress>suciu@cs.washington.edu</EmailAddress>
<PI_PHON>2066851934</PI_PHON>
<NSF_ID>000218785</NSF_ID>
<StartDate>08/05/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington]]></Name>
<CityName>Seattle</CityName>
<StateCode>WA</StateCode>
<ZipCode>981950001</ZipCode>
<StreetAddress><![CDATA[4333 Brooklyn Ave NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project has studied novel algorithms and fundamental limitations for probabilistic inference over large datasets, also called Probabilistic Databases. &nbsp;Queries over databases are often expressed in a high level query languages, like SQL, and probabilistic inference can be done either by grounding the high level query (compilation), or by performing inference directly on the high level query (lifted inference). &nbsp;The major outcomes where:<br />1. A new and simple technique for converting complex probabilistic spaces into tuple-independent spaces. &nbsp;This techniques, called MarkovViews, converts a Markov Logic Network into tuple-independent probabilistic tables plus a set of hard constraints. &nbsp;As a consequence, complex probabilistic inference tasks can be converted into Weighted Model Counting (WMC)<br />2. The project has demonstrated fundamental limitations of grounded approaches to WMC over lifted inference. &nbsp;It is well understood that grounded WMC algorithms correspond to formula compilation: the project has described a simple algorithm to convert any Decision-DNNF's (the state of the art knowledge compilation target of all modern WMC algorithms) into an FBDD, which are much simpler circuits with a wealth of lower bounds published in the literature.<br />3. Concretely, the project has found a large class of high-level formulas (e.g. SQL queries), for which probabilistic inference can be done very efficiently using lifted inference, but where any modern WMC algorithm would take exponential time on the grounding of that formula.<br />4. The project has designed a new algorithm for computing queries with negation, showing that resolution is sometimes critical for doing probabilistic inference in polynomial time.<br />5. The project has also settled a long-standing open problem, called consistent query answering, which can be state as follows: given a database that has key violations, and each key value has some probability of being the correct value, and given a query over such database, find all answers whose probability is 1.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/06/2015<br>      Modified by: Dan&nbsp;Suciu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project has studied novel algorithms and fundamental limitations for probabilistic inference over large datasets, also called Probabilistic Databases.  Queries over databases are often expressed in a high level query languages, like SQL, and probabilistic inference can be done either by grounding the high level query (compilation), or by performing inference directly on the high level query (lifted inference).  The major outcomes where: 1. A new and simple technique for converting complex probabilistic spaces into tuple-independent spaces.  This techniques, called MarkovViews, converts a Markov Logic Network into tuple-independent probabilistic tables plus a set of hard constraints.  As a consequence, complex probabilistic inference tasks can be converted into Weighted Model Counting (WMC) 2. The project has demonstrated fundamental limitations of grounded approaches to WMC over lifted inference.  It is well understood that grounded WMC algorithms correspond to formula compilation: the project has described a simple algorithm to convert any Decision-DNNF's (the state of the art knowledge compilation target of all modern WMC algorithms) into an FBDD, which are much simpler circuits with a wealth of lower bounds published in the literature. 3. Concretely, the project has found a large class of high-level formulas (e.g. SQL queries), for which probabilistic inference can be done very efficiently using lifted inference, but where any modern WMC algorithm would take exponential time on the grounding of that formula. 4. The project has designed a new algorithm for computing queries with negation, showing that resolution is sometimes critical for doing probabilistic inference in polynomial time. 5. The project has also settled a long-standing open problem, called consistent query answering, which can be state as follows: given a database that has key violations, and each key value has some probability of being the correct value, and given a query over such database, find all answers whose probability is 1.             Last Modified: 08/06/2015       Submitted by: Dan Suciu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
