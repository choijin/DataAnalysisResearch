<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Locating and Explaining Faults in Concurrent Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>01/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>490496.00</AwardTotalIntnAmount>
<AwardAmount>490496</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The rapid adoption of multicore and manycore processors in every class of computing systems---from mobile handheld devices to high-end data center servers---is increasing our dependence on concurrent software. However, defects in concurrent programs are notoriously difficult for developers to detect and diagnose, because concurrent behavior is fundamentally harder to reason about than sequential behavior. Major software vendors report the tangible negative impacts on software development from concurrent faults, such as reduced development productivity or inadequate concurrency training and tools, along with the significant impact on end-users from defective software. The goal of this research project is to help developers of concurrent software find and understand defects quickly.&lt;br/&gt;&lt;br/&gt;The research will employ novel approaches that combine testing and dynamic analysis with automated post-mortem statistical analysis of thread interactions. Dynamic analysis reduces false positive fault reports, and statistical data analysis exploits the inherent non-determinism of concurrent execution to produce informative prioritized rankings of candidate faults. The resulting techniques will greatly improve debugging productivity by helping the developer to hone in on the most likely causes of program the resulting techniques and tools will be transformative, and will automate fault-localization for concurrent software. The results of the research will have broader impacts on the state-of-the-art in concurrent software practice, research, and education. The research will prepare globally competitive students in the emerging area of concurrent software and parallel thinking, along with providing intellectual bridges between students in software engineering and in computational science and engineering, and advance diversity goals. Additionally, successes in improving fault-localization techniques for concurrent software will lead to improvements in software quality and, thus, benefit all segments of society that depend on software.</AbstractNarration>
<MinAmdLetterDate>07/20/2011</MinAmdLetterDate>
<MaxAmdLetterDate>12/11/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116210</AwardID>
<Investigator>
<FirstName>Mary</FirstName>
<LastName>Harrold</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mary J Harrold</PI_FULL_NAME>
<EmailAddress>harrold@cc.gatech.edu</EmailAddress>
<PI_PHON>4043850612</PI_PHON>
<NSF_ID>000248827</NSF_ID>
<StartDate>07/20/2011</StartDate>
<EndDate>12/11/2013</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>Vuduc</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Richard W Vuduc</PI_FULL_NAME>
<EmailAddress>richie@cc.gatech.edu</EmailAddress>
<PI_PHON>5103017014</PI_PHON>
<NSF_ID>000080331</NSF_ID>
<StartDate>12/11/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>Vuduc</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Richard W Vuduc</PI_FULL_NAME>
<EmailAddress>richie@cc.gatech.edu</EmailAddress>
<PI_PHON>5103017014</PI_PHON>
<NSF_ID>000080331</NSF_ID>
<StartDate>07/20/2011</StartDate>
<EndDate>12/11/2013</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>097394084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGIA TECH RESEARCH CORPORATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>097394084</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgia Institute of Technology]]></Name>
<CityName>Atlanta</CityName>
<StateCode>GA</StateCode>
<ZipCode>303320002</ZipCode>
<StreetAddress><![CDATA[225 NORTH AVE NW]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~490496</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project considered the problem of how to help developers of <em>concurrent software</em> find and understand defects, or "software bugs," quickly and easily. Concurrent software is software that involves many simultaneously running tasks. When such software fails, developers typically find it much harder to pinpoint exactly what went wrong or what piece of code is to blame than they would otherwise, that is, had there been just one ("sequential") software task running one step at a time.</p> <p>To address this problem, this project produced <em>new research techniques</em>, prototyped in actual developer tools, as well as <em>a user study</em> to understand the effectiveness of these techniques.</p> <p>With respect to new techniques, the main contributions are new automated methods to pinpoint faulty code. The methods start with automated testing and data collection from both successful and unsuccessful program runs; they then use statistical analysis to try to narrow down the regions of the program most likely to be involved in the failing runs. These methods differ in how much information about the program, or "program context," they consider for the analysis and subsequently present to the developer. Intuitively, one expects that using more context should produce more useful results and also help the developer more.</p> <p>It is this last claim that makes the user study of this project important: if it's really the case that more context is better, then developers who use the tools that exploit and then present more context information <em>should</em> find the bug more easily and more quickly. But the findings of our user study show the story is not so simple. Instead, whether context helps depends on the type of fault. In particular, context information really only helps developers when the bug is relatively more complex; for easier bugs, the less sophisticated techniques can work much better than the more complex ones. It's a case of "more is not necessarily better."</p> <p>Additionally, even though the results show when specific techniques might help developers find a bug and understand how it happened, none of the proposed techniques were very effective at helping developers figure out how to <em>fix</em> the bug! At first glance, this statement may seem paradoxical: why doesn't understanding an error imply the knowledge to fix it? This question remains open:&nbsp;<em>the user study raises a host of new questions about what techniques might help developers not just find and understand bugs, but also fix them.</em></p> <p>Perhaps an overarching meta-lesson of this project is that the development of new techniques in the area of concurrent software testing and debugging ought to be accompanied by an evaluation on actual end-user developers. It is the hope of this project's team that future work will adopt such methodologies since the ultimate impact of any new method will be limited by the extent to which the users it affects can really make use of it.</p><br> <p>            Last Modified: 06/18/2016<br>      Modified by: Richard&nbsp;W&nbsp;Vuduc</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project considered the problem of how to help developers of concurrent software find and understand defects, or "software bugs," quickly and easily. Concurrent software is software that involves many simultaneously running tasks. When such software fails, developers typically find it much harder to pinpoint exactly what went wrong or what piece of code is to blame than they would otherwise, that is, had there been just one ("sequential") software task running one step at a time.  To address this problem, this project produced new research techniques, prototyped in actual developer tools, as well as a user study to understand the effectiveness of these techniques.  With respect to new techniques, the main contributions are new automated methods to pinpoint faulty code. The methods start with automated testing and data collection from both successful and unsuccessful program runs; they then use statistical analysis to try to narrow down the regions of the program most likely to be involved in the failing runs. These methods differ in how much information about the program, or "program context," they consider for the analysis and subsequently present to the developer. Intuitively, one expects that using more context should produce more useful results and also help the developer more.  It is this last claim that makes the user study of this project important: if it's really the case that more context is better, then developers who use the tools that exploit and then present more context information should find the bug more easily and more quickly. But the findings of our user study show the story is not so simple. Instead, whether context helps depends on the type of fault. In particular, context information really only helps developers when the bug is relatively more complex; for easier bugs, the less sophisticated techniques can work much better than the more complex ones. It's a case of "more is not necessarily better."  Additionally, even though the results show when specific techniques might help developers find a bug and understand how it happened, none of the proposed techniques were very effective at helping developers figure out how to fix the bug! At first glance, this statement may seem paradoxical: why doesn't understanding an error imply the knowledge to fix it? This question remains open: the user study raises a host of new questions about what techniques might help developers not just find and understand bugs, but also fix them.  Perhaps an overarching meta-lesson of this project is that the development of new techniques in the area of concurrent software testing and debugging ought to be accompanied by an evaluation on actual end-user developers. It is the hope of this project's team that future work will adopt such methodologies since the ultimate impact of any new method will be limited by the extent to which the users it affects can really make use of it.       Last Modified: 06/18/2016       Submitted by: Richard W Vuduc]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
