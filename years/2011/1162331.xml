<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Collaborative Research: Specification and Mathematics Engineering for the Verified Software End-Game</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2012</AwardEffectiveDate>
<AwardExpirationDate>06/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>476066.00</AwardTotalIntnAmount>
<AwardAmount>476066</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software is remarkably important to modern life.  The correct and secure behavior of software that controls nearly all major machines and communications systems, from aircraft and cars to medical records and financial transactions, is mission-critical and often can be a matter of life and death.  The current industry-standard method for assessing correctness of software, known as "software testing", is not foolproof.  This research project will combine the interdisciplinary expertise of the investigators in software engineering and mathematical logic to support a paradigm shift toward "verified software": programs that have been entirely and mechanically proved, using formal mathematical logic, to be correct relative to full behavioral specifications of what they are supposed to do and what they are not supposed to do.  Given the broad benefits of correct software to society and its impact on national competitiveness, a strong U.S. presence in verified software research and education must be a national priority.&lt;br/&gt;&lt;br/&gt;While transition of research ideas to practice will take time, the idea of a verifying compiler for sequential, object-based software is tantalizingly close to reality.  In what can be properly described as the "end game", extensive empirical studies of Verification Conditions (VCs) for correct software already have been undertaken.  VCs are assertions that establish that a program is correct if and only if they can be proved.  It has been observed that when VCs are not provable mechanically, the obstacles lie in proving VCs that are "obvious" to mathematicians, and in engineering specifications and supporting mathematics so they lead to VCs that are also "obvious" to automated provers.  The expected results of this project are programming language- and tool-independent improvements in automated software verification that will be widely applicable.  Another key project goal is integration of new concepts and tools supporting verified software into undergraduate and graduate Computer Science courses.  These efforts will contribute to development of a superior next-generation software engineering workforce.</AbstractNarration>
<MinAmdLetterDate>06/20/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/20/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1162331</AwardID>
<Investigator>
<FirstName>Bruce</FirstName>
<LastName>Weide</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bruce W Weide</PI_FULL_NAME>
<EmailAddress>weide.1@osu.edu</EmailAddress>
<PI_PHON>6142921517</PI_PHON>
<NSF_ID>000279349</NSF_ID>
<StartDate>06/20/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Harvey</FirstName>
<LastName>Friedman</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Harvey M Friedman</PI_FULL_NAME>
<EmailAddress>friedman@math.ohio-state.edu</EmailAddress>
<PI_PHON>6142929079</PI_PHON>
<NSF_ID>000312906</NSF_ID>
<StartDate>06/20/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888735</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1960 Kenny Road]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>832127323</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001964634</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName>Columbus</CityName>
<StateCode>OH</StateCode>
<ZipCode>432101277</ZipCode>
<StreetAddress><![CDATA[2015 Neil Ave.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~476066</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A recent grand-challenge problem for the computer science research community has been to develop a "verifying compiler". &nbsp;The idea is that there must be two separate descriptions of each piece of software: a mathematical specification describing <em>what</em> it should (and should not) do, and a program text describing <em>how</em> that behavior should be achieved by the computer. &nbsp;A verifying compiler is software that essentially has to decide whether these two descriptions agree before it can declare the program text to be "correct" for the given specification. &nbsp;It does this by <em>automatically constructing a mathematical proof</em> that the two descriptions agree.</p> <p>The importance of verified-as-correct software to U.S. national security and infrastructure is apparent. &nbsp;The critical and growing role of correct software to our society at large, where medical images are interpreted and transportation systems are controlled by software, cannot be overstated. &nbsp;In addition, most so-called "security" problems with software are actually the result of "hackers" taking advantage of routine software defects that could have been detected and prevented by a verifying compiler.</p> <p>The intellectual merit of the project's outcomes lies primarily in overcoming the difficulties of developing correct software in the first place, of proving mathematically that it is correct given arbitrary resources including human intelligence, and of making the latter process practical by replacing the human intelligence seemingly required for the proof by a fully automated process done in software (i.e., a verifying compiler). &nbsp;This project's primary technical outcomes include advances in the mathematical foundations underlying a verifying compiler for a research programming language (Resolve) with features very similar to those widely used in commercial practice (e.g., Java, C#); a set of mathematical specification techniques that, when followed, make it easier for the verifying compiler to prove, without human involvement in the proof process, that software is correct; and a suite of &nbsp;software tools that permit well-designed software systems of essentially arbitrary size to be automatically proved correct, one software component at a time (i.e., a verifying compiler).</p> <p>The broader impacts of the project's outcomes lie primarily in how our research on these problems has affected education for future computer scientists. &nbsp;For over 20 years, undergraduate computer science majors at Ohio State have learned how to use mathematical specifications of the intended behavior of software in order to say exactly what that software is supposed to do (and not do). &nbsp;Dozens of software components in Java that were developed as research prototypes during this project have recently made their way into the classroom, where over 1000 students per year are learning from these examples and related assignments the principles underlying "software design for verification". &nbsp;As these students graduate and take industry positions, their good habits of software design and leadership abilities should help make large categories of the software defects we see today a thing of the past.</p><br> <p>            Last Modified: 09/01/2016<br>      Modified by: Bruce&nbsp;W&nbsp;Weide</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A recent grand-challenge problem for the computer science research community has been to develop a "verifying compiler".  The idea is that there must be two separate descriptions of each piece of software: a mathematical specification describing what it should (and should not) do, and a program text describing how that behavior should be achieved by the computer.  A verifying compiler is software that essentially has to decide whether these two descriptions agree before it can declare the program text to be "correct" for the given specification.  It does this by automatically constructing a mathematical proof that the two descriptions agree.  The importance of verified-as-correct software to U.S. national security and infrastructure is apparent.  The critical and growing role of correct software to our society at large, where medical images are interpreted and transportation systems are controlled by software, cannot be overstated.  In addition, most so-called "security" problems with software are actually the result of "hackers" taking advantage of routine software defects that could have been detected and prevented by a verifying compiler.  The intellectual merit of the project's outcomes lies primarily in overcoming the difficulties of developing correct software in the first place, of proving mathematically that it is correct given arbitrary resources including human intelligence, and of making the latter process practical by replacing the human intelligence seemingly required for the proof by a fully automated process done in software (i.e., a verifying compiler).  This project's primary technical outcomes include advances in the mathematical foundations underlying a verifying compiler for a research programming language (Resolve) with features very similar to those widely used in commercial practice (e.g., Java, C#); a set of mathematical specification techniques that, when followed, make it easier for the verifying compiler to prove, without human involvement in the proof process, that software is correct; and a suite of  software tools that permit well-designed software systems of essentially arbitrary size to be automatically proved correct, one software component at a time (i.e., a verifying compiler).  The broader impacts of the project's outcomes lie primarily in how our research on these problems has affected education for future computer scientists.  For over 20 years, undergraduate computer science majors at Ohio State have learned how to use mathematical specifications of the intended behavior of software in order to say exactly what that software is supposed to do (and not do).  Dozens of software components in Java that were developed as research prototypes during this project have recently made their way into the classroom, where over 1000 students per year are learning from these examples and related assignments the principles underlying "software design for verification".  As these students graduate and take industry positions, their good habits of software design and leadership abilities should help make large categories of the software defects we see today a thing of the past.       Last Modified: 09/01/2016       Submitted by: Bruce W Weide]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
