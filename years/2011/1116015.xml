<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  Collaborative Research:  A Systematic Approach to Multicore Parallel CAD</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>210000.00</AwardTotalIntnAmount>
<AwardAmount>210000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project aims at a systematic approach that integrates multi-level IC design automation &lt;br/&gt;flow by leveraging the parallel computational power in current and upcoming multi-core/many-core &lt;br/&gt;processors. The main challenge in this approach is to provide responsive high-level design decisions &lt;br/&gt;while incurring the massive computational cost of lower-level design algorithms. Fortunately, recent &lt;br/&gt;trends in processor architectures provide a solution. Compared with traditional uniprocessor systems, &lt;br/&gt;emerging multi-core/many-core microprocessors have far more computational power but limited global &lt;br/&gt;memory access capabilities. Parallel computational power may make it possible to break &lt;br/&gt;the boundaries of the existing IC design hierarchy and to vertically integrate the IC optimization fow. &lt;br/&gt;The potential benefits of an integrated solution are significant - accurate high-level design decisions &lt;br/&gt;become possible as low-level design details are derived concurrently, and low-level designs can also &lt;br/&gt;greatly benefit from high-quality high-level decisions. Together, an efficient and high-quality design flow &lt;br/&gt;becomes feasible, making design closure faster, thus saving time and reducing costs.&lt;br/&gt;&lt;br/&gt;The proposed work has the potential to overcome the key limitations of existing hierarchical IC CAD &lt;br/&gt;technologies and enable new IC design automation solutions, which in turn can benefit the IC and &lt;br/&gt;semiconductor industry. The PIs will work together with their industrial collaborators to develop and&lt;br/&gt;commercialize the proposed work. The project will have beneficial impact on education.&lt;br/&gt;The PIs intend to educate the next generation of software developers and practicing engineers &lt;br/&gt;in the design and innovation of IC design automation and parallel computing.</AbstractNarration>
<MinAmdLetterDate>07/06/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/06/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116015</AwardID>
<Investigator>
<FirstName>Li</FirstName>
<LastName>Shang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Li Shang</PI_FULL_NAME>
<EmailAddress>li.shang@colorado.edu</EmailAddress>
<PI_PHON>3034928785</PI_PHON>
<NSF_ID>000193244</NSF_ID>
<StartDate>07/06/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Boulder</Name>
<CityName>Boulder</CityName>
<ZipCode>803031058</ZipCode>
<PhoneNumber>3034926221</PhoneNumber>
<StreetAddress>3100 Marine Street, Room 481</StreetAddress>
<StreetAddress2><![CDATA[572 UCB]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>007431505</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF COLORADO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007431505</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Colorado at Boulder]]></Name>
<CityName>Boulder</CityName>
<StateCode>CO</StateCode>
<ZipCode>803031058</ZipCode>
<StreetAddress><![CDATA[3100 Marine Street, Room 481]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~210000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project aims to develop parallel program technologies to tackle the increasing computational complexity across the IC design and optimization flow. It leverages the fast-growing computing power of multi-core and many-core microprocessors, as well as emerging big data computational software platform. Throughout the course of the project, our research has focused on parallel CAD algorithm design and optimization, parallel programming using concurrent programming language, and distributed data management for scalable parallel data processing. The project can benefit the IC and semiconductor industry, as well as educate the next generation of software developers and practicing engineers in the design and innovation of IC design automation and parallel computing.&nbsp;</p> <p>&nbsp;</p> <p>Our research has focused on parallel programming model research. We propose a methodology to explore concurrency via nondeterministic transactional algorithm design, and to program them on multicore processors for CAD applications. We apply the proposed methodology to the min-cost flow problem which has been identified as the key problem in many design optimizations. A concurrent algorithm and its implementation on multicore processors for min-cost flow have been developed based on the methodology. Our study shows that, compared to sequential algorithm design, an average of 2.52X and a maximum of 3.01X of speedup can be achieved.</p> <p>&nbsp;</p> <p>We have investigated the problem of mapping and scheduling a synchronous data flow graph onto a multi-core platform. A two-level heuristic algorithm has been developed to solve this problem on multi-core processor. The experimental results show that our two-level heuristic algorithm achieves near-optimal solution compared with the enumeration algorithm, and achieves 38.8% less buffer usage on average, compared with the greedy algorithm.&nbsp;</p> <p>&nbsp;</p> <p>We have developed parallel-friendly algorithms for the cell-type selection problem in modern high-performance low-power designs. We provide techniques to address the diffculties that the traditional continuous approaches encountered when applied to real life designs. The proposed algorithm is&nbsp;parallel-friendly in nature and has the potential to significantly accelerate cell-type selection on many-core systems.</p> <p>&nbsp;</p> <p>We have developed a new linear max K-min classifier for 2-class classification problem. To address the high computational complexity problem for large data set, we transform the optimization objective function into a linear programming problem. We next extend the proposed work to the general maximum K-min based classification problem. Our study shows that, the classification performance of the proposed classifiers is competitive with Hinge Loss classifiers.</p> <p>We have studied parallel CAD programming using concurrent programming languages. We adopt Go, a concurrent programing language, which has been widely used in cloud backend parallel programming and data processing. We have designed and implemented the proposed linear max K-means classifier using Go. Our study shows that, for concurrency optimization algorithms, Go offers comparable single-thread computational efficiency and superb scalability. Go also offers superior ease-of-programming advantages for massively concurrent algorithm design and implementation.</p> <p>Data access has been a key performance limitation for parallel algorithms with massive-scale dataset. Specifically, fetching data on-the-fly from disks introduces significant performance penalty. To tackle this problem, we have investigated how to use Memcached to build a unified in-memory data management layer to support parallel CAD algorithm design. Our study shows that, the Memcached approach offers comparable per-data item access efficiency and superior parallel scalability over conventional in-memory pointer based app...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project aims to develop parallel program technologies to tackle the increasing computational complexity across the IC design and optimization flow. It leverages the fast-growing computing power of multi-core and many-core microprocessors, as well as emerging big data computational software platform. Throughout the course of the project, our research has focused on parallel CAD algorithm design and optimization, parallel programming using concurrent programming language, and distributed data management for scalable parallel data processing. The project can benefit the IC and semiconductor industry, as well as educate the next generation of software developers and practicing engineers in the design and innovation of IC design automation and parallel computing.      Our research has focused on parallel programming model research. We propose a methodology to explore concurrency via nondeterministic transactional algorithm design, and to program them on multicore processors for CAD applications. We apply the proposed methodology to the min-cost flow problem which has been identified as the key problem in many design optimizations. A concurrent algorithm and its implementation on multicore processors for min-cost flow have been developed based on the methodology. Our study shows that, compared to sequential algorithm design, an average of 2.52X and a maximum of 3.01X of speedup can be achieved.     We have investigated the problem of mapping and scheduling a synchronous data flow graph onto a multi-core platform. A two-level heuristic algorithm has been developed to solve this problem on multi-core processor. The experimental results show that our two-level heuristic algorithm achieves near-optimal solution compared with the enumeration algorithm, and achieves 38.8% less buffer usage on average, compared with the greedy algorithm.      We have developed parallel-friendly algorithms for the cell-type selection problem in modern high-performance low-power designs. We provide techniques to address the diffculties that the traditional continuous approaches encountered when applied to real life designs. The proposed algorithm is parallel-friendly in nature and has the potential to significantly accelerate cell-type selection on many-core systems.     We have developed a new linear max K-min classifier for 2-class classification problem. To address the high computational complexity problem for large data set, we transform the optimization objective function into a linear programming problem. We next extend the proposed work to the general maximum K-min based classification problem. Our study shows that, the classification performance of the proposed classifiers is competitive with Hinge Loss classifiers.  We have studied parallel CAD programming using concurrent programming languages. We adopt Go, a concurrent programing language, which has been widely used in cloud backend parallel programming and data processing. We have designed and implemented the proposed linear max K-means classifier using Go. Our study shows that, for concurrency optimization algorithms, Go offers comparable single-thread computational efficiency and superb scalability. Go also offers superior ease-of-programming advantages for massively concurrent algorithm design and implementation.  Data access has been a key performance limitation for parallel algorithms with massive-scale dataset. Specifically, fetching data on-the-fly from disks introduces significant performance penalty. To tackle this problem, we have investigated how to use Memcached to build a unified in-memory data management layer to support parallel CAD algorithm design. Our study shows that, the Memcached approach offers comparable per-data item access efficiency and superior parallel scalability over conventional in-memory pointer based approach.  We have explored Spark based in-memory parallel processing infrastructure. Leveraging SparkÆs resilient distributed dataset, we have implemented para...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
