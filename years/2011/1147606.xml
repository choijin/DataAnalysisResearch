<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: : Best Practices and Models for Sustainability for Robust Cyberinfrastructure Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>296637.00</AwardTotalIntnAmount>
<AwardAmount>296637</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Daniel Katz</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The NSF Software Infrastructure for Sustained Innovation (SI2) program solicitation states that software is "central to NSF's vision of a Cyberinfrastructure Framework for 21st Century Science and Engineering (CIF21)," and goes on to emphasize that in general software is essential to computational and data-enabled science. Indeed, the SI2 program is one vehicle by which the NSF hopes to enable sustained and well supported software providing services and functionality needed by the US science and engineering community. This yearlong study of cyberinfrastructure projects will identify best practices in the development, deployment, and support of robust cyberinfrastructure software. &lt;br/&gt;&lt;br/&gt;Through a combination of detailed case studies and surveys of software producers and users, the investigators will identify best practices for the process of moving software from a "discovery" process to well maintained and sustainable infrastructure for 21st century science and engineering, focusing in particular on the following: Given a piece of software that provides interesting capabilities and a community that wants to use (and possibly contribute to the further development of) that software, what steps are necessary to transform that software from "interesting tool" to "robust and widely used element of national infrastructure, contributing to the NSF vision for CIF21" - ands then support and maintain that tool sustainably? This research will lead to greater availability of widely usable software tools and curriculum materials, increasing the quality of education in computer science, computational science, and STEM disciplines.</AbstractNarration>
<MinAmdLetterDate>08/25/2011</MinAmdLetterDate>
<MaxAmdLetterDate>08/25/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1147606</AwardID>
<Investigator>
<FirstName>Craig</FirstName>
<LastName>Stewart</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Craig A Stewart</PI_FULL_NAME>
<EmailAddress>stewart@iu.edu</EmailAddress>
<PI_PHON>8128554240</PI_PHON>
<NSF_ID>000188281</NSF_ID>
<StartDate>08/25/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Von</FirstName>
<LastName>Welch</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Von S Welch</PI_FULL_NAME>
<EmailAddress>vwelch@iu.edu</EmailAddress>
<PI_PHON>8128560363</PI_PHON>
<NSF_ID>000290743</NSF_ID>
<StartDate>08/25/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Wernert</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eric A Wernert</PI_FULL_NAME>
<EmailAddress>ewernert@indiana.edu</EmailAddress>
<PI_PHON>8128564911</PI_PHON>
<NSF_ID>000343517</NSF_ID>
<StartDate>08/25/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>Knepper</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Richard Knepper</PI_FULL_NAME>
<EmailAddress>rich.knepper@cornell.edu</EmailAddress>
<PI_PHON>8123610690</PI_PHON>
<NSF_ID>000596780</NSF_ID>
<StartDate>08/25/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Indiana University</Name>
<CityName>Bloomington</CityName>
<ZipCode>474013654</ZipCode>
<PhoneNumber>3172783473</PhoneNumber>
<StreetAddress>509 E 3RD ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>006046700</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF INDIANA UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>006046700</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Indiana University]]></Name>
<CityName>Bloomington</CityName>
<StateCode>IN</StateCode>
<ZipCode>474082671</ZipCode>
<StreetAddress><![CDATA[2719 E. 10th Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~296637</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Scientific researchers in the US depend on many kinds of very specialized software &ndash; so specialized that the size of the user market makes it impossible to support commercial software packages in most areas. (Statistical, mathematical, and engineering software are the exceptional areas where there are several commercial software packages operated by private companies). Much software used by scientific researchers and engineers is produced by the scientific community, and released to the community with a license that makes it free to use and modify. The idea behind such &lsquo;open source&rsquo; software is that it enables the scientific community to have software that it needs even if it is not possible to sustain a private company producing and supporting such software.</p> <p>&nbsp;</p> <p>The National Science Foundation (NSF) supports the creation of many open source scientific software packages. The purpose of this particular study was to determine what factors lead to a particular open source software package being sustained over time, so that the scientific community and the NSF can identify and adopt strategies that will allow such software to be sustained and usable over a long period of time. This should enable the community and the federal government to reduce the amount of time and money invested in reinventing new versions of software functions that already exist, and to improve software that has already been made and is being used now.</p> <p>&nbsp;</p> <p>The first step in our research was to survey researchers funded by the NSF, to understand the factors that are important to them when selecting software to use in their research.&nbsp; A random sample of 5,000 individuals, drawn from a list of NSF researchers who received funding between 2007 and 2011 were invited to take part in a survey about software. The factors most important to researchers were:</p> <p>1) Capabilities and features of a software product are the most important factors to consider when adopting a software package</p> <p>2) Total cost of ownership (purchase and annual license maintenance fees)</p> <p>3) Long-term availability</p> <p>4) Reliability and maturity</p> <p>5) Initial purchase cost of the software</p> <p>&nbsp;</p> <p>We also asked researchers to identify the software they used most often and depended upon the most. Based on this list, and input from many leaders in the scientific computing community, we decided to do case studies of a number of successful software projects that had been maintained over several years. We investigated a number of factors related to software creation, maintenance, and how software projects were organized, looking particularly at software products that had managed to sustain themselves over a long period of time. What we discovered was that all of the software projects that were successful over a long period of time employed good software engineering practices: such software projects had definitive software repositories; where the definitive copies of software code was kept; software was well documented; there were good practices for ensuring that the code itself was re-usable, using criteria established by government agencies for code reusability.</p> <p>&nbsp;</p> <p>In our study of software projects that had been well maintained and sustained over time, what really stood out was that successful projects &ndash; ones that had lasted over a number of years and were important to the scientific community &ndash; had leadership that was deeply committed to continuing the development and sustaining the software. This factor was the one that seems to have distinguished many successful projects from those that were not successful over a long period of time. This finding echoes the standard wisdom one hears from venture capitalists when they are asked about investing in a company. Venture capitalists will often say that the fate of a startup...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Scientific researchers in the US depend on many kinds of very specialized software &ndash; so specialized that the size of the user market makes it impossible to support commercial software packages in most areas. (Statistical, mathematical, and engineering software are the exceptional areas where there are several commercial software packages operated by private companies). Much software used by scientific researchers and engineers is produced by the scientific community, and released to the community with a license that makes it free to use and modify. The idea behind such æopen sourceÆ software is that it enables the scientific community to have software that it needs even if it is not possible to sustain a private company producing and supporting such software.     The National Science Foundation (NSF) supports the creation of many open source scientific software packages. The purpose of this particular study was to determine what factors lead to a particular open source software package being sustained over time, so that the scientific community and the NSF can identify and adopt strategies that will allow such software to be sustained and usable over a long period of time. This should enable the community and the federal government to reduce the amount of time and money invested in reinventing new versions of software functions that already exist, and to improve software that has already been made and is being used now.     The first step in our research was to survey researchers funded by the NSF, to understand the factors that are important to them when selecting software to use in their research.  A random sample of 5,000 individuals, drawn from a list of NSF researchers who received funding between 2007 and 2011 were invited to take part in a survey about software. The factors most important to researchers were:  1) Capabilities and features of a software product are the most important factors to consider when adopting a software package  2) Total cost of ownership (purchase and annual license maintenance fees)  3) Long-term availability  4) Reliability and maturity  5) Initial purchase cost of the software     We also asked researchers to identify the software they used most often and depended upon the most. Based on this list, and input from many leaders in the scientific computing community, we decided to do case studies of a number of successful software projects that had been maintained over several years. We investigated a number of factors related to software creation, maintenance, and how software projects were organized, looking particularly at software products that had managed to sustain themselves over a long period of time. What we discovered was that all of the software projects that were successful over a long period of time employed good software engineering practices: such software projects had definitive software repositories; where the definitive copies of software code was kept; software was well documented; there were good practices for ensuring that the code itself was re-usable, using criteria established by government agencies for code reusability.     In our study of software projects that had been well maintained and sustained over time, what really stood out was that successful projects &ndash; ones that had lasted over a number of years and were important to the scientific community &ndash; had leadership that was deeply committed to continuing the development and sustaining the software. This factor was the one that seems to have distinguished many successful projects from those that were not successful over a long period of time. This finding echoes the standard wisdom one hears from venture capitalists when they are asked about investing in a company. Venture capitalists will often say that the fate of a startup company in the long run depends more on the quality of the Chief Executive Officer than the quality of the companyÆs product. This is a fairly similar finding: the details of s...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
