<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Quest: A Real-Time Operating System for Multicore Processors</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>399999.00</AwardTotalIntnAmount>
<AwardAmount>399999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anita La Salle</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Multicore processors are becoming ubiquitous among high-end servers, personal computers, mobile phones and embedded devices. While these processors can provide higher performance at lower power than single-core architectures, they pose significant challenges for system designers. This is particularly true in real-time embedded systems, such as in avionic and automotive control, manufacturing, and healthcare. In these systems, tasks often have critical timing requirements, with deadlines that must be met to avoid potentially catastrophic outcomes. Providing timing guarantees on multicore processors is made difficult by contention for shared on-chip caches and memory bus bandwidth, and other factors such as hardware interrupts, instruction pipelines and simultaneous multithreading that affect predictability.&lt;br/&gt;&lt;br/&gt;This project focuses on the design of a real-time operating system that addresses micro-architectural resource contention and enforces predictable behavior on multicore processors.  This system called ?Quest? is centered around time as a first class resource, guaranteeing real-time shares of computational resources among all tasks, including interrupts and application threads.  Using hardware performance counters available on modern processors, this project implements a real-time performance monitoring subsystem to influence resource management.&lt;br/&gt;&lt;br/&gt;An additional aspect of this work focuses on the use of hardware sandboxing techniques to guarantee the system is not compromised by ill-written software, such as drivers or services implemented by third party developers.  This is especially relevant given the complexity of modern software systems that cannot easily be verified to behave correctly using only static methods.  As part of the development of Quest, hardware virtualization capabilities are investigated to enforce heightened software reliability, in particular, techniques for isolating software components of a system, while ensuring predictability, &lt;br/&gt;&lt;br/&gt;The outcomes of this work will impact the design of systems software on multicore processors. A greater understanding of hardware features to improve or ease the construction of software systems is gained, especially those with safety-critical requirements.  Investigations into system predictability and safety will help prevent potentially disastrous outcomes for mission-critical tasks. This work could lead to more robust systems that avoid costs of failure in terms of loss of lives, equipment, or money. The Quest software will be shared among the research community and used in courses involving operating systems.</AbstractNarration>
<MinAmdLetterDate>08/08/2011</MinAmdLetterDate>
<MaxAmdLetterDate>08/08/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1117025</AwardID>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>West</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Richard West</PI_FULL_NAME>
<EmailAddress>richwest@cs.bu.edu</EmailAddress>
<PI_PHON>6173532065</PI_PHON>
<NSF_ID>000211081</NSF_ID>
<StartDate>08/08/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Trustees of Boston University</Name>
<CityName>BOSTON</CityName>
<ZipCode>022151300</ZipCode>
<PhoneNumber>6173534365</PhoneNumber>
<StreetAddress>881 COMMONWEALTH AVE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049435266</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF BOSTON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049435266</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Trustees of Boston University]]></Name>
<CityName>BOSTON</CityName>
<StateCode>MA</StateCode>
<ZipCode>022151300</ZipCode>
<StreetAddress><![CDATA[881 COMMONWEALTH AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~399999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The primary outcome of this project is the development of a real-time<br />operating system for multicore processors, called Quest. The Quest software is<br />open-source and has been used in education to teach operating systems<br />courses. It has also been used in research at Boston University and other<br />institutions around the world. Quest has been developed for x86 multicore<br />platforms, and exploits hardware performance counters to infer<br />micro-architectural resource usage. For example, cache occupancy predictions<br />can be used to influence the co-scheduling of tasks to avoid contention and,<br />hence, variability in execution times due to increased cache misses.&nbsp; <br /><br />This project has also focused on the study of abstractions to enforce temporal<br />isolation between tasks and system events such as interrupts. Interrupts have<br />traditionally caused problems in real-time systems. Interrupts do not always<br />occur at predictable times and their handling consumes CPU time that delays<br />the execution of other tasks. This project has led to the development of<br />real-time scheduling techniques that integrate the management of both<br />conventional tasks and interrupts. The resultant scheduling sub-system is part<br />of Quest's unique virtual CPU (VCPU) scheduling framework. <br /><br />Other outcomes include the study and development of hardware techniques,<br />including machine virtualization, to isolate system software components in<br />separate protection domains. The idea here is to partition a system into<br />logically distinct components so that faults or compromises to one component<br />do not adversely affect other parts of the system. This has resulted in the<br />early developments of Quest-V, a separation kernel that uses hardware<br />virtualization features such as extended page tables, to form a chip-level<br />distributed system. Studies have shown this approach is more robust to<br />software faults than a conventional symmetric multiprocessing system built<br />with a single system image. Quest-V forms the basis of a secure and<br />predictable system, which we hope to continue to study in further research.<br /><br />Early developments of Quest-V have focused on techniques to ensure efficient<br />resource management. Studies have shown how machine virtualization can be used<br />to partition physical resources amongst separate guest domains without the<br />traditional overheads of a virtual machine monitor, or hypervisor. Quest-V<br />avoids the need for a complex hypervisor to multiplex machine resources<br />amongst guests and, hence, separate software components. Instead the guest<br />"sandbox" domains perform their own scheduling and resource management on the<br />subset of processing cores, physical memory and I/O devices for which they have<br />been granted access. This makes the entire system highly efficient. Although<br />in its early stages of development, Quest-V is one of the world's first<br />real-time chip-level separation kernels that uses hardware virtualization to<br />isolate software components. To show its efficiency, we have implemented a<br />Linux front-end in one sandbox domain, while supporting real-time Quest back-end<br />services in separate domains. Real-time communication channels have been<br />designed to allow separate components in different sandbox domains to exchange<br />data predictably. <br /><br />Quest(-V) has attracted industry interest, and we are currently developing the<br />system for use on numerous embedded computing platforms. These have thus far<br />centered around the x86 architecture, such as the Intel Galileo, Edison and<br />Minnowboard. We hope to provide the basis for a safe, secure and predictable<br />embedded system for multicore platforms in many areas of computing, on both x86<br />and other other architectural platforms.<br /><br />Su...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The primary outcome of this project is the development of a real-time operating system for multicore processors, called Quest. The Quest software is open-source and has been used in education to teach operating systems courses. It has also been used in research at Boston University and other institutions around the world. Quest has been developed for x86 multicore platforms, and exploits hardware performance counters to infer micro-architectural resource usage. For example, cache occupancy predictions can be used to influence the co-scheduling of tasks to avoid contention and, hence, variability in execution times due to increased cache misses.    This project has also focused on the study of abstractions to enforce temporal isolation between tasks and system events such as interrupts. Interrupts have traditionally caused problems in real-time systems. Interrupts do not always occur at predictable times and their handling consumes CPU time that delays the execution of other tasks. This project has led to the development of real-time scheduling techniques that integrate the management of both conventional tasks and interrupts. The resultant scheduling sub-system is part of Quest's unique virtual CPU (VCPU) scheduling framework.   Other outcomes include the study and development of hardware techniques, including machine virtualization, to isolate system software components in separate protection domains. The idea here is to partition a system into logically distinct components so that faults or compromises to one component do not adversely affect other parts of the system. This has resulted in the early developments of Quest-V, a separation kernel that uses hardware virtualization features such as extended page tables, to form a chip-level distributed system. Studies have shown this approach is more robust to software faults than a conventional symmetric multiprocessing system built with a single system image. Quest-V forms the basis of a secure and predictable system, which we hope to continue to study in further research.  Early developments of Quest-V have focused on techniques to ensure efficient resource management. Studies have shown how machine virtualization can be used to partition physical resources amongst separate guest domains without the traditional overheads of a virtual machine monitor, or hypervisor. Quest-V avoids the need for a complex hypervisor to multiplex machine resources amongst guests and, hence, separate software components. Instead the guest "sandbox" domains perform their own scheduling and resource management on the subset of processing cores, physical memory and I/O devices for which they have been granted access. This makes the entire system highly efficient. Although in its early stages of development, Quest-V is one of the world's first real-time chip-level separation kernels that uses hardware virtualization to isolate software components. To show its efficiency, we have implemented a Linux front-end in one sandbox domain, while supporting real-time Quest back-end services in separate domains. Real-time communication channels have been designed to allow separate components in different sandbox domains to exchange data predictably.   Quest(-V) has attracted industry interest, and we are currently developing the system for use on numerous embedded computing platforms. These have thus far centered around the x86 architecture, such as the Intel Galileo, Edison and Minnowboard. We hope to provide the basis for a safe, secure and predictable embedded system for multicore platforms in many areas of computing, on both x86 and other other architectural platforms.  Support for this project has led to the completion of one PhD, and significant progress for several others. Software artifacts have formed the basis for research projects involving both graduate and undergraduate students. The PI has worked not only with PhD and Masters students on topics related to this project but also undergraduates involv...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
