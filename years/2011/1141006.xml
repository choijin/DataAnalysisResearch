<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: Teaching Multicore and Many-Core Programming at a Higher Level of Abstraction</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2012</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>89942.00</AwardTotalIntnAmount>
<AwardAmount>89942</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Stephanie August</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The project is addressing the need to train Computer Science undergraduate students in programming computer systems with multiple execution cores. Virtually all computer systems today have multiple cores and the trend is to have increasing numbers of cores, increasing the complexity of effectively using such computers. This project is exploring structured higher-level approaches, which begins with decomposing problems into widely known computational patterns and using higher-level tools to create programs. The work is drawing upon recent research techniques on pattern programming and bringing these techniques into the undergraduate curriculum. The educational materials are being developed at two universities, University of North Carolina Charlotte and University of North Carolina Wilmington and are being taught across the state of North Carolina on a televideo network reaching all the state universities and many private universities. &lt;br/&gt;&lt;br/&gt;By design, this project is involving two principal universities, one comprehensive university with a strong undergraduate commitment (University of North Carolina Wilmington) and one research-oriented school (University of North Carolina Charlotte) and many other institutions through televideo distance learning. Two minority-serving institutions, North Carolina Agricultural and Technical State University and Winston-Salem State University, are directly participating in the study. Two workshops are being presented for educators, one in Charlotte North Carolina and one in Washington DC at the headquarters of the Southeastern Universities Research Association (SURA).</AbstractNarration>
<MinAmdLetterDate>04/26/2012</MinAmdLetterDate>
<MaxAmdLetterDate>04/26/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1141006</AwardID>
<Investigator>
<FirstName>Anthony</FirstName>
<LastName>Wilkinson</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Anthony B Wilkinson</PI_FULL_NAME>
<EmailAddress>abw@uncc.edu</EmailAddress>
<PI_PHON>7046878381</PI_PHON>
<NSF_ID>000123487</NSF_ID>
<StartDate>04/26/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of North Carolina at Charlotte</Name>
<CityName>CHARLOTTE</CityName>
<ZipCode>282230001</ZipCode>
<PhoneNumber>7046871888</PhoneNumber>
<StreetAddress>9201 University City Boulevard</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC12</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>066300096</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NORTH CAROLINA AT CHARLOTTE, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of North Carolina at Charlotte]]></Name>
<CityName>CHARLOTTE</CityName>
<StateCode>NC</StateCode>
<ZipCode>282230001</ZipCode>
<StreetAddress><![CDATA[9201 University City Boulevard]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>7513</Code>
<Text>TUES-Type 1 Project</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0412</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~89942</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This collaborative project between the University of North Carolina Charlotte (UNC-Charlotte) and the University of North Carolina Wilmington (UNC-Wilmington) addresses the need to train undergraduate Computer Science and Engineering students in using multiple computers and processors collectively (&ldquo;parallel programming&rdquo;). The approach taken in the project uses parallel design patterns, which are well-established computational solutions to problems. We have created design pattern software that enables students to develop complex parallel programs without the need to implement low-level code for the patterns. Three higher-level pattern programming tools have been developed for teaching parallel programming called Paraguin, Seeds, and Suzaku. The design pattern approach has a number of advantages over traditional parallel programming including the promotion of well-structured and maintainable program designs and avoidance of low-level parallel programming. Coursework materials have been developed for undergraduate parallel programming courses. The software tools and educational materials have been used in a course broadcast across North Carolina several times using the NCREN distance learning televideo network and also locally at UNC-Charlotte (physical lecture course and an on-line version). Regional and national workshops have been conducted at UNC-Charlotte, SURA headquarters at Washington DC, and the <em>SIGCSE Technical Symposium on Computer Science Education</em> in Denver Colorado to train educators on using the parallel design pattern approach.<br /><br />During the project period (2012-2016), almost 500 students took our pattern-based parallel programming course at six universities across North Carolina. More than 20 students undertook individual projects on pattern programming. All of these students are well-positioned to continue developing parallel software in businesses and industry. In addition, 42 educators from across the country attended our training workshops. These educators were instructed on how to use our pattern programming techniques and tools in their own classes. The results of the work have been published in several papers including at the<em> SIGCSE Technical Symposium on Computer Science Education</em> in 2013 and the<em> IEEE International Parallel and Distributed Processing Symposium</em> in 2013, 2014, and 2016. All our materials are freely available for educational use at the web site: http://coit-grid01.uncc.edu/PatternProgProject.html.<br /><br />A key outcome of this project was completing a well-rounded classroom-tested pattern programming framework with many features capable of creating parallel programming patterns.&nbsp; The major outcome that resulted was the development and testing of tools to assist students with writing correct and sophisticated parallel algorithms. In the first year, students reported a greater comfort with using the low-level tools over our higher-level tools. With improvements made to the tools and the teaching materials, this result was reversed in the next offering. In the final offering, student reported comparable comfort levels using all tools. So we were able to make improvements to the tools that resulted in students preferring the high-level tools over the low-level tools and improvements to our teaching methods resulted in improvement in the comfort level by the students of the low-level tools.<br /><br /><strong>Intellectual Merit.</strong> All computers nowadays consist of multiple processor cores to achieve higher performance. To harness these computers more effectively, one has to write programs that execute at the same time on the individual processor cores, so-called &ldquo;parallel programming.&rdquo; Parallel programming has been around for many years but has recently taken on a wider significance with introduction of computers systems with multiple processor cores. Still, most teaching follows a traditional path of low-level programming although the programming problems now faced by programmers are complex. Our project moves away from the low-level approach. In our work, the student programmer begins with decomposing the problem into a well-established computational pattern and then uses our higher-level tools to create the parallel program. This approach does not require learning the complex low-level parallel programming libraries typically taught in parallel programming classes although one can learn the low level methods first in more advanced classes. The work draws upon recent research results on pattern programming and brings these techniques into the undergraduate curriculum to simplify parallel programming and enable computations to be constructed in a structured way.<br /><br /><strong>Broader Impacts.</strong> By design, this project involves two principal universities, one comprehensive university with a strong undergraduate commitment (UNC-Wilmington) and one research-oriented school (UNC-Charlotte). Other institutions have collaborated by allowing their students to take our course through a televideo distance learning network that reaches universities across North Carolina. One-day regional and national workshops have been conducted to train CS educators on the pattern approach to broaden the impact further. A conference workshop was also conducted directly reaching educators at that conference. Although we have focused on training undergraduate Computer Science and Engineering students, the materials could also be assimilated by students in all STEM disciplines without too much programming experience since pattern programming hides low-level programming. The long-term vision is that pattern-based and higher-level structured parallel programming will lead to how STEM students learn parallel based computational thinking and it will make parallel programming easier and more productive.</p><br> <p>            Last Modified: 08/30/2016<br>      Modified by: Anthony&nbsp;B&nbsp;Wilkinson</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This collaborative project between the University of North Carolina Charlotte (UNC-Charlotte) and the University of North Carolina Wilmington (UNC-Wilmington) addresses the need to train undergraduate Computer Science and Engineering students in using multiple computers and processors collectively ("parallel programming"). The approach taken in the project uses parallel design patterns, which are well-established computational solutions to problems. We have created design pattern software that enables students to develop complex parallel programs without the need to implement low-level code for the patterns. Three higher-level pattern programming tools have been developed for teaching parallel programming called Paraguin, Seeds, and Suzaku. The design pattern approach has a number of advantages over traditional parallel programming including the promotion of well-structured and maintainable program designs and avoidance of low-level parallel programming. Coursework materials have been developed for undergraduate parallel programming courses. The software tools and educational materials have been used in a course broadcast across North Carolina several times using the NCREN distance learning televideo network and also locally at UNC-Charlotte (physical lecture course and an on-line version). Regional and national workshops have been conducted at UNC-Charlotte, SURA headquarters at Washington DC, and the SIGCSE Technical Symposium on Computer Science Education in Denver Colorado to train educators on using the parallel design pattern approach.  During the project period (2012-2016), almost 500 students took our pattern-based parallel programming course at six universities across North Carolina. More than 20 students undertook individual projects on pattern programming. All of these students are well-positioned to continue developing parallel software in businesses and industry. In addition, 42 educators from across the country attended our training workshops. These educators were instructed on how to use our pattern programming techniques and tools in their own classes. The results of the work have been published in several papers including at the SIGCSE Technical Symposium on Computer Science Education in 2013 and the IEEE International Parallel and Distributed Processing Symposium in 2013, 2014, and 2016. All our materials are freely available for educational use at the web site: http://coit-grid01.uncc.edu/PatternProgProject.html.  A key outcome of this project was completing a well-rounded classroom-tested pattern programming framework with many features capable of creating parallel programming patterns.  The major outcome that resulted was the development and testing of tools to assist students with writing correct and sophisticated parallel algorithms. In the first year, students reported a greater comfort with using the low-level tools over our higher-level tools. With improvements made to the tools and the teaching materials, this result was reversed in the next offering. In the final offering, student reported comparable comfort levels using all tools. So we were able to make improvements to the tools that resulted in students preferring the high-level tools over the low-level tools and improvements to our teaching methods resulted in improvement in the comfort level by the students of the low-level tools.  Intellectual Merit. All computers nowadays consist of multiple processor cores to achieve higher performance. To harness these computers more effectively, one has to write programs that execute at the same time on the individual processor cores, so-called "parallel programming." Parallel programming has been around for many years but has recently taken on a wider significance with introduction of computers systems with multiple processor cores. Still, most teaching follows a traditional path of low-level programming although the programming problems now faced by programmers are complex. Our project moves away from the low-level approach. In our work, the student programmer begins with decomposing the problem into a well-established computational pattern and then uses our higher-level tools to create the parallel program. This approach does not require learning the complex low-level parallel programming libraries typically taught in parallel programming classes although one can learn the low level methods first in more advanced classes. The work draws upon recent research results on pattern programming and brings these techniques into the undergraduate curriculum to simplify parallel programming and enable computations to be constructed in a structured way.  Broader Impacts. By design, this project involves two principal universities, one comprehensive university with a strong undergraduate commitment (UNC-Wilmington) and one research-oriented school (UNC-Charlotte). Other institutions have collaborated by allowing their students to take our course through a televideo distance learning network that reaches universities across North Carolina. One-day regional and national workshops have been conducted to train CS educators on the pattern approach to broaden the impact further. A conference workshop was also conducted directly reaching educators at that conference. Although we have focused on training undergraduate Computer Science and Engineering students, the materials could also be assimilated by students in all STEM disciplines without too much programming experience since pattern programming hides low-level programming. The long-term vision is that pattern-based and higher-level structured parallel programming will lead to how STEM students learn parallel based computational thinking and it will make parallel programming easier and more productive.       Last Modified: 08/30/2016       Submitted by: Anthony B Wilkinson]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
