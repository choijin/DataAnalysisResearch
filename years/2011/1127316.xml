<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SDCI Net: UD* - A UDT-Based Application Suite for High Performance Data Transport</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>1499533.00</AwardTotalIntnAmount>
<AwardAmount>1499533</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Kevin Thompson</SignBlockName>
<PO_EMAI>kthompso@nsf.gov</PO_EMAI>
<PO_PHON>7032924220</PO_PHON>
</ProgramOfficer>
<AbstractNarration>UDP-based Data Transfer (UDT) is a data transport protocol that is available as an open source software library.  UDT was designed to support transferring large datasets over wide area high performance networks.  TCP is often times ineffective in these situations. With UDT, users can send data from disk-to-disk at over 9Gb/s over a 10Gb/s wide area network. In addition, UDT has also been used for moving data across firewalls with UPD hole punching and for maintaining a very large number of connections.  The latter is useful for applications such as data intensive computing. TCP does not work well in either of these situations.  UDT is also configurable so that users can plug in customized control algorithms appropriate for specialized network topologies or applications.&lt;br/&gt;The goal of the UD* Project is to make UDT a standard protocol for scientific data transfer and to facilitate the use of UDT by the scientific research community.  Although there have been many proposed solutions to address the TCP inefficiency problem, many users today still experience trouble when moving large datasets.  The UD* project has three components.&lt;br/&gt;&lt;br/&gt;The first component is to make UDT more accessible by developing a web-based front end to UDT and by integrating UDT into standard utilities that are used for moving datasets, such as rsync. The second component is to provide network and software engineering support to the UDT Community, including providing technical assistance to interested users, improving documentation, responding to queries in mailing lists and blogs, creating tutorial materials, running workshops, and related activities. The UD* Project also provides direct technical support to three communities of NSF-supported scientists: i) the various scientists making use of the Open Cloud Consortium?s Open Science Data Cloud; ii) biologists using Bio-mirror?s various mirror sites; iii) and scientists moving large datasets over 40G and 100G networks that connect to the StarLight Facility in Chicago. The third component is to develop two new versions of UDT.  UDT5 will include features to support data intensive computing applications and data center scale computing applications.  UDX will be designed to scale to 40GE and 100GE wide area networks.&lt;br/&gt;&lt;br/&gt;Intellectual merit. The number and output capacity of scientific instruments, sensors and other devices are growing at the rate of Moore?s Law.  Large datasets and high performance networks are becoming increasingly common, yet there are still fundamental problems transporting large datasets over wide area high performance networks. This problem can be addressed in part by building and supporting a UDT Community and enhancing UDT to provide specific support for emerging applications, such as data intensive computing applications and applications over 40G and 100G wide area networks.&lt;br/&gt;&lt;br/&gt;Broader Impact.  Technology for transporting, storing, visualizing, and sharing multiple terabyte datasets is broadly important for a large number of scientific and defense applications, including climate modeling, simulation, and homeland defense applications.  UD* can have a direct transformative impact on any discipline that requires working with very large datasets.  The UD* Project develops tutorials, supports a UDT Users Group, and teaches one day workshops on UD* to broaden the number of users that can use UDT for transporting large datasets.</AbstractNarration>
<MinAmdLetterDate>08/09/2011</MinAmdLetterDate>
<MaxAmdLetterDate>08/09/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1127316</AwardID>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Grossman</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert L Grossman</PI_FULL_NAME>
<EmailAddress>robert.grossman@uchicago.edu</EmailAddress>
<PI_PHON>7738344669</PI_PHON>
<NSF_ID>000278293</NSF_ID>
<StartDate>08/09/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606372612</ZipCode>
<PhoneNumber>7737028669</PhoneNumber>
<StreetAddress>6054 South Drexel Avenue</StreetAddress>
<StreetAddress2><![CDATA[Suite 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005421136</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CHICAGO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005421136</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Chicago]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>606371428</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7683</Code>
<Text>SOFTWARE DEVELOPEMENT FOR CI</Text>
</ProgramElement>
<ProgramReference>
<Code>7683</Code>
<Text>SOFTWARE DEVELOPEMENT FOR CI</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~1499533</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>During the project, we developed, prototyped, tested with users several different applications to simplify the transfer of large datasets over wide area high performance networks using the UDT library.&nbsp; UDT is a high performance data transport protocol that is based upon the UDP Internet protocol instead of the more common TCP Internet protocol.&nbsp; In practice, applications using UDT can transport data over wide area networks with significantly higher performance than when using TCP.&nbsp;</p> <p>At the beginning of the project, UDT was available only as a library.&nbsp; For this reason, its use was limited since a programmer had to integrate the library with any application that required it.&nbsp; The goal of this project was to develop applications around UDT so that UDT could be more widely deployed.&nbsp; One of the more useful of the applications developed was an open source application called parcel that is available on&nbsp;github.com/LabAdvComp/parcel.</p> <p>With large datasets becoming more and more common, the problem of developing effective technologies that can be easily deployed for moving large datasets over wide area high performance networks is of growing importance.</p> <p>A common use case for using a high performance data transport utility like UDT is when a client on a local machine wants to download a large file on remote server and the local LAN containing the client and the remote LAN containing the server are connected by a wide area high performance network.</p> <p>The basic idea with parcel is to install a proxy on a local LAN and a proxy on the remote LAN and for the two proxies to communicate via UDT.&nbsp; Communication between the client on the local LAN is via TCP, and communication between the remote LAN and the server is via TCP.&nbsp;&nbsp; With this approach, common tools, such as scp, netcat, and wget can be used with parcel on the LAN.</p> <p>As an example, over a 10 Gbps wide area network connecting a server in Chicago and a client in Taiwan, a 344 GB file averaged 464 Mbps for a single flow using parcel with TCP and 1936 Mbps using Parcel with UDT.&nbsp; The effective bandwidth obtained in practice depends upon many factors, including: the read speed of the source disk, the write speed of the target disk, the speed of the network, the congestion on the network, the packet loss of the network, and whether encryption is enabled.</p> <p>As another example, an application developed in the project called udpipe transferred data at 42.08 Gpbs over a wide area 60 G network (3 x 20G) connecting Chicago and Oakland, CA.</p> <p>A common problem with using a UDP application like parcel is that UDP is blocked and only TCP connections are allowed, or that the non-standard ports required by parcel are blocked.&nbsp;&nbsp; For this reason, parcel also supports a mode that uses multiple TCP connections to connect the local and remote proxy servers.&nbsp; With this design, a user is ensured of being able to transfer a file, and if UDP traffic is permitted and the ports required by parcel are open, the higher performance possible with parcel can be achieved.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/30/2015<br>      Modified by: Robert&nbsp;L&nbsp;Grossman</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ During the project, we developed, prototyped, tested with users several different applications to simplify the transfer of large datasets over wide area high performance networks using the UDT library.  UDT is a high performance data transport protocol that is based upon the UDP Internet protocol instead of the more common TCP Internet protocol.  In practice, applications using UDT can transport data over wide area networks with significantly higher performance than when using TCP.   At the beginning of the project, UDT was available only as a library.  For this reason, its use was limited since a programmer had to integrate the library with any application that required it.  The goal of this project was to develop applications around UDT so that UDT could be more widely deployed.  One of the more useful of the applications developed was an open source application called parcel that is available on github.com/LabAdvComp/parcel.  With large datasets becoming more and more common, the problem of developing effective technologies that can be easily deployed for moving large datasets over wide area high performance networks is of growing importance.  A common use case for using a high performance data transport utility like UDT is when a client on a local machine wants to download a large file on remote server and the local LAN containing the client and the remote LAN containing the server are connected by a wide area high performance network.  The basic idea with parcel is to install a proxy on a local LAN and a proxy on the remote LAN and for the two proxies to communicate via UDT.  Communication between the client on the local LAN is via TCP, and communication between the remote LAN and the server is via TCP.   With this approach, common tools, such as scp, netcat, and wget can be used with parcel on the LAN.  As an example, over a 10 Gbps wide area network connecting a server in Chicago and a client in Taiwan, a 344 GB file averaged 464 Mbps for a single flow using parcel with TCP and 1936 Mbps using Parcel with UDT.  The effective bandwidth obtained in practice depends upon many factors, including: the read speed of the source disk, the write speed of the target disk, the speed of the network, the congestion on the network, the packet loss of the network, and whether encryption is enabled.  As another example, an application developed in the project called udpipe transferred data at 42.08 Gpbs over a wide area 60 G network (3 x 20G) connecting Chicago and Oakland, CA.  A common problem with using a UDP application like parcel is that UDP is blocked and only TCP connections are allowed, or that the non-standard ports required by parcel are blocked.   For this reason, parcel also supports a mode that uses multiple TCP connections to connect the local and remote proxy servers.  With this design, a user is ensured of being able to transfer a file, and if UDP traffic is permitted and the ports required by parcel are open, the higher performance possible with parcel can be achieved.             Last Modified: 11/30/2015       Submitted by: Robert L Grossman]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
