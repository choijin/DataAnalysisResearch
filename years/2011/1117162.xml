<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: CSR: Small: Fine-Grained Modularity and Reuse of VM Components</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>499867.00</AwardTotalIntnAmount>
<AwardAmount>499867</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Much of today's information infrastructure makes use of virtual&lt;br/&gt;machines (VMs). For example, consumer devices typically contain VMs&lt;br/&gt;for Java, JavaScript, and Flash. VMs are often well suited to roll out&lt;br/&gt;new capabilities to a broad range of target devices, which is why new&lt;br/&gt;VMs are being created all the time. Unfortunately, most VMs today are&lt;br/&gt;created from scratch, in spite of the fact that they are broadly&lt;br/&gt;similar. This is a considerable waste of programmer time and money.&lt;br/&gt;The goal of this project is to make creating VMs simpler, by creating&lt;br/&gt;a "toolbox" of components from which new VMs can be constructed&lt;br/&gt;easily.&lt;br/&gt;&lt;br/&gt;The technical challenge is to create building blocks that can be put&lt;br/&gt;together to work as well as the custom-crafted VMs of today. In many&lt;br/&gt;cases, VM performance is critical. For example, on mobile devices, a&lt;br/&gt;slower VM might force us to run the processor at a higher speed,&lt;br/&gt;leading to faster battery depletion. This research promises that &lt;br/&gt;one may one day be able to create a competitively&lt;br/&gt;performing VM for Java, JavaScript and Flash in which some parts are&lt;br/&gt;shared, so that the total size is much smaller than three separate&lt;br/&gt;VMs. This is important for resource-constrained devices such as&lt;br/&gt;mobile phones. Re-using components rather than reinventing the wheel&lt;br/&gt;each time would reduce the entry cost for new languages. Sharing&lt;br/&gt;components would also lead to pooling of debugging resources, reducing&lt;br/&gt;errors and thereby leading to a safer and more stable computing&lt;br/&gt;infrastructure.</AbstractNarration>
<MinAmdLetterDate>07/27/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/27/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1117162</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Franz</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael Franz</PI_FULL_NAME>
<EmailAddress>franz@uci.edu</EmailAddress>
<PI_PHON>9498386816</PI_PHON>
<NSF_ID>000162759</NSF_ID>
<StartDate>07/27/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926977600</ZipCode>
<StreetAddress><![CDATA[160 Aldrich Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~499867</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 1"> <div class="section"> <div class="layoutArea"> <div class="column"> <p><span>Our project had the goal of developing the components of a modular virtual machine / language runtime that will make it easier for designers of programming languages, particularly dynamic languages, to get high-performing implementations off the ground. In the current state of the art, the up-front investment required to build a high- performance language runtime is so great that only a small fraction of deserving programming languages ever gain implementations beyond a simple interpreter.&nbsp;</span></p> </div> </div> </div> </div> <div class="page" title="Page 2"> <div class="section"> <div class="layoutArea"> <div class="column"> <p><span>We largely succeeded in bringing down the effort required for making a dynamically typed programming language perform well. Of particular significance is</span>&nbsp;a new technique "Iterator Peeling" that leads to significant speedups of programming languages such as Python. We believe that it will be broadly adopted by language implementors.</p> <p>We have also made significant progress on optimizing information-flow tracking for programming languages that support certain kinds of security type systems. Information-flow tracking could solve many of the security problems that plague current web browsers, but current browsers do not support this feature because it has too much runtime overhead. The new techniques that we have developed under this award make information-flow tracking substantially more efficient, making it practical to incorporate them directly into web browsers. If this were adopted by browser vendors, it would lead to an altogether safer web browsing experience for everyone.</p> </div> </div> </div> </div><br> <p>            Last Modified: 10/30/2014<br>      Modified by: Michael&nbsp;Franz</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[     Our project had the goal of developing the components of a modular virtual machine / language runtime that will make it easier for designers of programming languages, particularly dynamic languages, to get high-performing implementations off the ground. In the current state of the art, the up-front investment required to build a high- performance language runtime is so great that only a small fraction of deserving programming languages ever gain implementations beyond a simple interpreter.           We largely succeeded in bringing down the effort required for making a dynamically typed programming language perform well. Of particular significance is a new technique "Iterator Peeling" that leads to significant speedups of programming languages such as Python. We believe that it will be broadly adopted by language implementors.  We have also made significant progress on optimizing information-flow tracking for programming languages that support certain kinds of security type systems. Information-flow tracking could solve many of the security problems that plague current web browsers, but current browsers do not support this feature because it has too much runtime overhead. The new techniques that we have developed under this award make information-flow tracking substantially more efficient, making it practical to incorporate them directly into web browsers. If this were adopted by browser vendors, it would lead to an altogether safer web browsing experience for everyone.           Last Modified: 10/30/2014       Submitted by: Michael Franz]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
