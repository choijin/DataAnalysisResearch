<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Improving the Applicability of Haskell-Hosted Semi-Formal Models to High Assurance Development</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>495750.00</AwardTotalIntnAmount>
<AwardAmount>527750</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In engineering practice, models are&lt;br/&gt;an essential part of understanding how to build complex systems. In&lt;br/&gt;this project, high-level models and efficient implementations of&lt;br/&gt;computer systems will be developed side-by-side under a single&lt;br/&gt;framework that bridges the gap between them using a high degree of&lt;br/&gt;automation. This is possible due to the use of a modern functional&lt;br/&gt;language for both the model and implementation, and the deployment of&lt;br/&gt;a new and powerful general-purpose and semi-automatic refinement technology.&lt;br/&gt;&lt;br/&gt;The functional language Haskell has already enjoyed considerable&lt;br/&gt;success as a platform for high-level modeling of complex systems with&lt;br/&gt;its mathematical-style syntax, state-of-the-art type system, and&lt;br/&gt;powerful abstraction mechanisms.&lt;br/&gt;In this project, Haskell will be used to express a semi-formal&lt;br/&gt;model and an efficient implementation, taking the form of two distinct&lt;br/&gt;expressions of computation with the same mathematical foundation.&lt;br/&gt;The project develops tools and methodologies that use transformations like&lt;br/&gt;the worker/wrapper transformation to construct links between these models&lt;br/&gt;and implementations, lowering the cost of the development of&lt;br/&gt;high-assurance software and hardware components in application&lt;br/&gt;areas like security kernels and critical control systems.&lt;br/&gt;Lowering the cost of linking semi-formal specifications and models to&lt;br/&gt;real implementations will have considerable&lt;br/&gt;impact. For example, Evaluation Assurance Level (EAL) 5 and 6 of the&lt;br/&gt;Common Criteria call for semi-formal methods to construct such links,&lt;br/&gt;and this project addresses keys part of this requirement.</AbstractNarration>
<MinAmdLetterDate>07/27/2011</MinAmdLetterDate>
<MaxAmdLetterDate>05/20/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1117569</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Gill</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrew Gill</PI_FULL_NAME>
<EmailAddress>andygill@ku.edu</EmailAddress>
<PI_PHON>7858648819</PI_PHON>
<NSF_ID>000516934</NSF_ID>
<StartDate>07/27/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Kansas Center for Research Inc</Name>
<CityName>Lawrence</CityName>
<ZipCode>660457552</ZipCode>
<PhoneNumber>7858643441</PhoneNumber>
<StreetAddress>2385 IRVING HILL RD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Kansas</StateName>
<StateCode>KS</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>KS02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>076248616</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF KANSAS CENTER FOR RESEARCH, INC.</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007180078</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Kansas Center for Research Inc]]></Name>
<CityName>Lawrence</CityName>
<StateCode>KS</StateCode>
<ZipCode>660457552</ZipCode>
<StreetAddress><![CDATA[2385 IRVING HILL RD]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Kansas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>KS02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~495750</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<FUND_OBLG>2013~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In engineering practice, models are an essential part of understanding how to build complex systems. In this investigation, we constructed a tool we called HERMIT, which mechanized the connections between a specific class of software models, and their programmatic counterparts. We have used HERMIT on a number of case studies, pushing the state-of-the-art in semi-formal mathematical reasoning for software development.</p> <p>Functional programming is a promising approach to writing programs which are both correct and efficient. Functional programming is based on the idea of using mathematical functions to construct programs. With effort, it is possible to establish a connection between a model written in a functional language, and a fast implementation, via program transformation.</p> <p>HERMIT is a software artifact that fits in the gap between mathematically formal tools for reasoning about programs, and informal techniques such as pen-and-paper derivations. HERMIT attached to the popular Glasgow Haskell compiler, the premier compiler for the lazy functional language Haskell, providing new tools and techniques for mechanizing reasoning and program transformations. This architecture allowed HERMIT to be the first system capable of directly reasoning about the full Haskell language.</p> <p>Intellectual Merit</p> <p>Using HERMIT, we completed five case studies that connected models with implementations. These included verifying that specific critical properties of a software library hold in the given cases, running efficient simulations of cellular automata, and mechanizing a proof of program correctness. Further, two case studies improved the state-of-the-art in optimized implementations, resulting in a solution to an open problem in optimization, and providing a way to write more expressive programs without compromising the speed of the final program.</p> <p>Broader Impacts</p> <p>This project resulted in 11 peer-reviewed publications, one PhD dissertation, and one MS thesis. The project also supported one postdoctoral researcher. HERMIT has also been used by a number of other researchers, as a basis for prototyping advanced optimizations and compiler enhancements.</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/14/2015<br>      Modified by: Andrew&nbsp;Gill</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In engineering practice, models are an essential part of understanding how to build complex systems. In this investigation, we constructed a tool we called HERMIT, which mechanized the connections between a specific class of software models, and their programmatic counterparts. We have used HERMIT on a number of case studies, pushing the state-of-the-art in semi-formal mathematical reasoning for software development.  Functional programming is a promising approach to writing programs which are both correct and efficient. Functional programming is based on the idea of using mathematical functions to construct programs. With effort, it is possible to establish a connection between a model written in a functional language, and a fast implementation, via program transformation.  HERMIT is a software artifact that fits in the gap between mathematically formal tools for reasoning about programs, and informal techniques such as pen-and-paper derivations. HERMIT attached to the popular Glasgow Haskell compiler, the premier compiler for the lazy functional language Haskell, providing new tools and techniques for mechanizing reasoning and program transformations. This architecture allowed HERMIT to be the first system capable of directly reasoning about the full Haskell language.  Intellectual Merit  Using HERMIT, we completed five case studies that connected models with implementations. These included verifying that specific critical properties of a software library hold in the given cases, running efficient simulations of cellular automata, and mechanizing a proof of program correctness. Further, two case studies improved the state-of-the-art in optimized implementations, resulting in a solution to an open problem in optimization, and providing a way to write more expressive programs without compromising the speed of the final program.  Broader Impacts  This project resulted in 11 peer-reviewed publications, one PhD dissertation, and one MS thesis. The project also supported one postdoctoral researcher. HERMIT has also been used by a number of other researchers, as a basis for prototyping advanced optimizations and compiler enhancements.          Last Modified: 12/14/2015       Submitted by: Andrew Gill]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
