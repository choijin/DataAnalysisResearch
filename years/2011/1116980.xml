<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Automating the Detection of Architectural Degradation in Software Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>196245.00</AwardTotalIntnAmount>
<AwardAmount>196245</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Over time, software systems architecture eventually deviates from the original designers intent and degrades through unplanned introduction of changes that invalidate original design decisions. Architectural degradation increases the cost of making new modifications and decreases systems reliability, until engineers are no longer able to effectively evolve the system. At that point, the systems actual architecture may have to be recovered from the implementation artifacts, but this is a time-consuming and error-prone process, and leaves critical issues unresolved: the problems caused by architectural degradation will likely be obfuscated by the systems many elements and their interrelationships, thus risking further degradation.&lt;br/&gt; &lt;br/&gt;This collaborative project aims at pinpointing locations in software systems architecture that reflect architectural degradation. The proposed research comprises four integrated research tasks: (1) Develop a catalog of commonly occurring symptoms of degradation. (2) Develop an architecture recovery technique that automatically extracts both systems major building blocks and the concerns that influence, drive, and interact with these building blocks. (3) Devise a technique for formally capturing the recovered architectural design decisions, their involving concerns, and the identified causes of degradation. (4) Devise a suite of techniques that leverage the catalog to automatically identify system-specific instances of degradation.  As a result, this project will have a potential for broad impact by providing a rigorous, scientific basis for software engineers to streamline the currently prohibitively expensive and error-prone system maintenance and evolution tasks.</AbstractNarration>
<MinAmdLetterDate>06/30/2011</MinAmdLetterDate>
<MaxAmdLetterDate>06/30/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116980</AwardID>
<Investigator>
<FirstName>Yuanfang</FirstName>
<LastName>Cai</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yuanfang Cai</PI_FULL_NAME>
<EmailAddress>yfcai@cs.drexel.edu</EmailAddress>
<PI_PHON>2158952000</PI_PHON>
<NSF_ID>000244198</NSF_ID>
<StartDate>06/30/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Drexel University</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191021119</ZipCode>
<PhoneNumber>2158956342</PhoneNumber>
<StreetAddress>1505 Race St, 10th Floor</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002604817</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DREXEL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002604817</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Drexel University]]></Name>
<CityName>Philadelphia</CityName>
<StateCode>PA</StateCode>
<ZipCode>191021119</ZipCode>
<StreetAddress><![CDATA[1505 Race St, 10th Floor]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~196245</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Towards our objective of detecting and preventing software architecture degradation, we investigated the architecture and evolution of hundreds of open source and commercial systems, and identified a suite of recurring architecture problems that occur in most complex systems and incur high maintenance costs, which we call Hotspot Patterns. These novel hotspot patterns, such as Unstable Interface and Implicit Cross-module Dependency, are defined based on Baldwin and Clark&rsquo;s design rule theory, and calculated using our new architecture model, Design Rule Spaces (DRSpaces), providing a rigorous, scientific basis to address currently prohibitively expensive and error-prone system maintenance and evolution tasks. <br /><br />Our approach is novel first because we distinguish different architectural roles of source files into Design Rules and Modules, and extract multiple design spaces from a complex system to significantly reduce the complexity one has to tackle at a time. Second, we identify hotspot patterns from the combination of evolution history and architecture information, so that high-maintenance architectural issues can be pinpointed. Most importantly, the identified patterns not only reveal which and how many files are involved in an architecture issue, they also provide hints about the specific architecture problems that connect multiple files and cause errors to propagate among them, that is, the root causes of high bug-proneness and change-proneness. We have evaluated these hotspot patterns using hundreds of software systems, and verified that files involved in hotspot patterns have incurred significantly higher maintenance effort than average files, and the error-proneness and change-proneness of a file increase exponentially with the number of hotspot patterns it involves.&nbsp;&nbsp; <br /><br />We have implemented the detection of these hotspot patterns into our toolset, Titan, which has been disseminated&nbsp; to multiple universities and industrial organizations. We have conducted detailed hotspot analysis of large-scale systems within several multinational corporations. Their architect and developers confirmed that our hotspot detector discovered architecture problems that are the root causes of&nbsp; major maintenance difficulties, and these problems are not identifiable by other existing techniques.</p> <p><br />We have published the results of this research in the following papers: <br /><br />(1) Martin Naedele, Hong-Mei Chen, Rick Kazman, Yuanfang Cai, Lu Xiao, Carlos V. A. Silva:<br />Manufacturing execution systems: A vision for managing software development. Journal of Systems and Software 101: 59-68 (2015)<br /><br />(2) Everton T. Guimar&atilde;es, Alessandro F. Garcia, Yuanfang Cai: Architecture-sensitive heuristics for prioritizing critical code anomalies. MODULARITY 2015: 68-80 <br /><br />(3) Rick Kazman, Yuanfang Cai, Ran Mo, Qiong Feng, Lu Xiao, Serge Haziyev, Volodymyr Fedak, Andriy Shapochka: A Case Study in Locating the Architectural Roots of Technical Debt. ICSE (2) 2015: 179-188<br /><br />(4) Ehsan Kouroshfar, Mehdi Mirakhorli, Hamid Bagheri, Lu Xiao, Sam Malek, Yuanfang Cai: A Study on the Role of Software Architecture in the Evolution and Quality of Software. MSR 2015: 246-257<br /><br />(5) Ran Mo, Yuanfang Cai, Rick Kazman, Lu Xiao: Hotspot Patterns: The Formal Definition and Automatic Detection of Architecture Smells. WICSA 2015: 51-60<br /><br /><br /></p><br> <p>            Last Modified: 10/31/2015<br>      Modified by: Yuanfang&nbsp;Cai</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Towards our objective of detecting and preventing software architecture degradation, we investigated the architecture and evolution of hundreds of open source and commercial systems, and identified a suite of recurring architecture problems that occur in most complex systems and incur high maintenance costs, which we call Hotspot Patterns. These novel hotspot patterns, such as Unstable Interface and Implicit Cross-module Dependency, are defined based on Baldwin and ClarkÃ†s design rule theory, and calculated using our new architecture model, Design Rule Spaces (DRSpaces), providing a rigorous, scientific basis to address currently prohibitively expensive and error-prone system maintenance and evolution tasks.   Our approach is novel first because we distinguish different architectural roles of source files into Design Rules and Modules, and extract multiple design spaces from a complex system to significantly reduce the complexity one has to tackle at a time. Second, we identify hotspot patterns from the combination of evolution history and architecture information, so that high-maintenance architectural issues can be pinpointed. Most importantly, the identified patterns not only reveal which and how many files are involved in an architecture issue, they also provide hints about the specific architecture problems that connect multiple files and cause errors to propagate among them, that is, the root causes of high bug-proneness and change-proneness. We have evaluated these hotspot patterns using hundreds of software systems, and verified that files involved in hotspot patterns have incurred significantly higher maintenance effort than average files, and the error-proneness and change-proneness of a file increase exponentially with the number of hotspot patterns it involves.     We have implemented the detection of these hotspot patterns into our toolset, Titan, which has been disseminated  to multiple universities and industrial organizations. We have conducted detailed hotspot analysis of large-scale systems within several multinational corporations. Their architect and developers confirmed that our hotspot detector discovered architecture problems that are the root causes of  major maintenance difficulties, and these problems are not identifiable by other existing techniques.   We have published the results of this research in the following papers:   (1) Martin Naedele, Hong-Mei Chen, Rick Kazman, Yuanfang Cai, Lu Xiao, Carlos V. A. Silva: Manufacturing execution systems: A vision for managing software development. Journal of Systems and Software 101: 59-68 (2015)  (2) Everton T. Guimar&atilde;es, Alessandro F. Garcia, Yuanfang Cai: Architecture-sensitive heuristics for prioritizing critical code anomalies. MODULARITY 2015: 68-80   (3) Rick Kazman, Yuanfang Cai, Ran Mo, Qiong Feng, Lu Xiao, Serge Haziyev, Volodymyr Fedak, Andriy Shapochka: A Case Study in Locating the Architectural Roots of Technical Debt. ICSE (2) 2015: 179-188  (4) Ehsan Kouroshfar, Mehdi Mirakhorli, Hamid Bagheri, Lu Xiao, Sam Malek, Yuanfang Cai: A Study on the Role of Software Architecture in the Evolution and Quality of Software. MSR 2015: 246-257  (5) Ran Mo, Yuanfang Cai, Rick Kazman, Lu Xiao: Hotspot Patterns: The Formal Definition and Automatic Detection of Architecture Smells. WICSA 2015: 51-60          Last Modified: 10/31/2015       Submitted by: Yuanfang Cai]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
