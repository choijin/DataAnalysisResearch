<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: RacePro: Automatically Detecting API Races in Deployed Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>800000.00</AwardTotalIntnAmount>
<AwardAmount>800000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>While races in multithreaded programs have drawn huge attention from the&lt;br/&gt;research community, little has been done for API races, a class&lt;br/&gt;of errors as dangerous and as difficult to debug as traditional thread&lt;br/&gt;races.  An API race occurs when multiple activities, whether they be&lt;br/&gt;threads or processes, access a shared resource via an application&lt;br/&gt;programming interface (API) without proper synchronization.  Detecting&lt;br/&gt;API races is an important and difficult problem as existing race&lt;br/&gt;detectors are unlikely to work well with API races. &lt;br/&gt;&lt;br/&gt;Software reliability increasingly affects everyone, whether or not&lt;br/&gt;they personally use computers.  This research studies and&lt;br/&gt;automatically detects for the first time an important class of races&lt;br/&gt;that has a significant impact on software reliability.  The study&lt;br/&gt;quantitatively demonstrates how API races are numerous, difficult to&lt;br/&gt;debug, and a real threat to software reliability.  To address this&lt;br/&gt;problem, this research is developing RacePro, a new system to&lt;br/&gt;automatically detect API races in deployed systems.  RacePro checks&lt;br/&gt;deployed systems in-vivo by recording live executions then&lt;br/&gt;deterministically replay and check them later.  This approach&lt;br/&gt;increases checking coverage beyond the configurations or executions&lt;br/&gt;covered by software vendors or beta testing sites.  RacePro records&lt;br/&gt;multiple processes and threads, detects races in the recording among &lt;br/&gt;API methods that may concurrently access shared objects, then explores&lt;br/&gt;different execution orderings of such API methods to determine which races&lt;br/&gt;are harmful and result in failures.  Technologies developed will help&lt;br/&gt;application developers detect insidious software defects, enabling &lt;br/&gt;more robust, reliable, and secure software infrastructure.</AbstractNarration>
<MinAmdLetterDate>08/29/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/29/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1162021</AwardID>
<Investigator>
<FirstName>Jason</FirstName>
<LastName>Nieh</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jason Nieh</PI_FULL_NAME>
<EmailAddress>nieh@cs.columbia.edu</EmailAddress>
<PI_PHON>2129397160</PI_PHON>
<NSF_ID>000304769</NSF_ID>
<StartDate>08/29/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Junfeng</FirstName>
<LastName>Yang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Junfeng Yang</PI_FULL_NAME>
<EmailAddress>junfeng@cs.columbia.edu</EmailAddress>
<PI_PHON>2128546851</PI_PHON>
<NSF_ID>000509381</NSF_ID>
<StartDate>08/29/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049179401</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049179401</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>100276902</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>2878</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~800000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Software reliability increasingly affects everyone, whether or not&nbsp;</span>they personally use computers.&nbsp; This research studied and automatically detected for the first time a class of errors that has a&nbsp;significant impact on software reliability, API races. &nbsp;An API race occurs when multiple activities, whether they be threads or processes, access a shared resource via an application programming interface (API) without proper synchronization. &nbsp;We show that API races are numerous, difficult to debug, &nbsp;and a real threat to software reliability. &nbsp;We have further studied the evolution of APIs and their possible races to understand how new API abstractions are forming. &nbsp;We address the API race problem by developing new techniques to automatically detect API races in deployed systems. &nbsp;Our approach checks deployed systems in-vivo by recording live executions then deterministically replaying and checking them later, including reordering the replayed execution as needed to detect races. &nbsp;We have also developed techniques to ensure that applications use storage system APIs correctly without concurrency errors, such as data loss errors caused by a concurrent crash. &nbsp;We have also generalized techniques we have developed for race detection which can be used in other ways to improve software reliability. &nbsp;Technologies developed can help application developers detect insidious software defects, enabling more robust, reliable, and secure software infrastructure.&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/14/2017<br>      Modified by: Jason&nbsp;Nieh</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software reliability increasingly affects everyone, whether or not they personally use computers.  This research studied and automatically detected for the first time a class of errors that has a significant impact on software reliability, API races.  An API race occurs when multiple activities, whether they be threads or processes, access a shared resource via an application programming interface (API) without proper synchronization.  We show that API races are numerous, difficult to debug,  and a real threat to software reliability.  We have further studied the evolution of APIs and their possible races to understand how new API abstractions are forming.  We address the API race problem by developing new techniques to automatically detect API races in deployed systems.  Our approach checks deployed systems in-vivo by recording live executions then deterministically replaying and checking them later, including reordering the replayed execution as needed to detect races.  We have also developed techniques to ensure that applications use storage system APIs correctly without concurrency errors, such as data loss errors caused by a concurrent crash.  We have also generalized techniques we have developed for race detection which can be used in other ways to improve software reliability.  Technologies developed can help application developers detect insidious software defects, enabling more robust, reliable, and secure software infrastructure.              Last Modified: 10/14/2017       Submitted by: Jason Nieh]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
