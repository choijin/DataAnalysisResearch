<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSE: A Unified Software Environment to Best Utilize Cache and Memory Systems on Multicores</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2012</AwardEffectiveDate>
<AwardExpirationDate>05/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Robert Beverly</SignBlockName>
<PO_EMAI>rbeverly@nsf.gov</PO_EMAI>
<PO_PHON>7032927068</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project further develops and maintains a set of system and application software to benefit application users of multicores by providing a unified software environment where multicore system utilities can be easily used as common functions in various applications. The project consists of the following three tasks. First, we further improve our cache-partitioning OS utility, and make efforts to add two other critical system utilities: (1) Multicore buffer cache management to prevent the shared cache from thrashing and pollution; (2) multicore-aware synchronization lock management to effectively make process assignments such  that the co-running processes would minimize bandwidth consumption within a multicore chip and cross multiple multicore chips.  Second, we continue our efforts to develop a software runtime library that enables programmers to explicitly manage and optimize the shared cache usage and memory accesses by allocating proper cache space and memory modules for different data sets of different processes.  Finally, we provide a unified software environment for application users. With a set of easy interface functions, the users can access both middleware runtime library and the system utilities without a requirement of knowing architectural and system details. &lt;br/&gt;&lt;br/&gt;The broader and transformative impact of the project can be significant: (1) Our software will provide effective and accessible solutions for significant performance improvement in multicores for a large scope of application community. (2) Gaining the insights into system interactions among applications, OS, and multicore architecture, we will provide valuable guidance for designs and implementations of application software. (3) The software is online with a maintenance for a public, wide, and sustained usage, which will directly impact open source software, and contribute to application users. (4) The research and software development of the project will train both undergraduate and graduate students for their future technical innovations in academia and industries.</AbstractNarration>
<MinAmdLetterDate>06/22/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/22/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1147522</AwardID>
<Investigator>
<FirstName>Xiaodong</FirstName>
<LastName>Zhang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Xiaodong Zhang</PI_FULL_NAME>
<EmailAddress>zhang@cse.ohio-state.edu</EmailAddress>
<PI_PHON>6142922770</PI_PHON>
<NSF_ID>000416471</NSF_ID>
<StartDate>06/22/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888735</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1960 Kenny Road]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>832127323</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001964634</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName/>
<StateCode>OH</StateCode>
<ZipCode>432101063</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>1640</Code>
<Text>INFORMATION TECHNOLOGY RESEARC</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<ProgramReference>
<Code>8005</Code>
<Text>Scientific Software Elements</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Multicore processors have become commodity platforms everywhere for&nbsp;different types&nbsp;applications ranging from high performance scientific computing to large scale data management. One performance issue&nbsp;is strucctrually caused by access contention in the last level shared caches&nbsp;as multiple threads run in the system. This&nbsp;contention increasaes&nbsp;the access latency for each thread and&nbsp;degrade execution&nbsp;performance&nbsp;for all the running programs.&nbsp;We have&nbsp;made several research efforts to address the multicore memory performance.</p> <p>(1) &nbsp;&nbsp;&nbsp;&nbsp;We have designed a system facility called ULCC (User Level Cache Control) to provide a software runtime library for users&nbsp;to directly control the cache allocation. The&nbsp;software&nbsp;has been open sourced for a public usage, which has been frequently downloaded and used by both academia and industries.</p> <p>(2) Work stealing is an effective approach for parallel programing for best resource utilization. However, the existing software does not work well in multicore processors. We have developed a new work-stealing scheduler called BWS (Balanced Work Stealing), and implemented the scheduler based on open source Cilk++, and shown its high effectiveness.</p> <p>(3) We look into the last level cache issues caused by buffer cache accesses, and propose a&nbsp;new buffer cache called&nbsp;SRM-buffer (Selected Region Mapping&nbsp;Buffer).&nbsp;We have implemented it into Linux lernel and show its&nbsp;significant improvement for multicore processors. &nbsp;</p> <p>In addtion to above research efforts, we have also developed an open source GPU based database system, whcih is&nbsp;has been used widely by both academia and industries.</p> <p>Besides open source software development, we have&nbsp;presented and published our research findings in the top&nbsp;computer science venues, including EuroSys, PPoPP,&nbsp;&nbsp;and VLDB. &nbsp;</p><br> <p>            Last Modified: 08/30/2017<br>      Modified by: Xiaodong&nbsp;Zhang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Multicore processors have become commodity platforms everywhere for different types applications ranging from high performance scientific computing to large scale data management. One performance issue is strucctrually caused by access contention in the last level shared caches as multiple threads run in the system. This contention increasaes the access latency for each thread and degrade execution performance for all the running programs. We have made several research efforts to address the multicore memory performance.  (1)     We have designed a system facility called ULCC (User Level Cache Control) to provide a software runtime library for users to directly control the cache allocation. The software has been open sourced for a public usage, which has been frequently downloaded and used by both academia and industries.  (2) Work stealing is an effective approach for parallel programing for best resource utilization. However, the existing software does not work well in multicore processors. We have developed a new work-stealing scheduler called BWS (Balanced Work Stealing), and implemented the scheduler based on open source Cilk++, and shown its high effectiveness.  (3) We look into the last level cache issues caused by buffer cache accesses, and propose a new buffer cache called SRM-buffer (Selected Region Mapping Buffer). We have implemented it into Linux lernel and show its significant improvement for multicore processors.    In addtion to above research efforts, we have also developed an open source GPU based database system, whcih is has been used widely by both academia and industries.  Besides open source software development, we have presented and published our research findings in the top computer science venues, including EuroSys, PPoPP,  and VLDB.         Last Modified: 08/30/2017       Submitted by: Xiaodong Zhang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
