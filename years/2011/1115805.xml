<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Stork Data Scheduler for Azure</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/15/2011</AwardEffectiveDate>
<AwardExpirationDate>03/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>97122.00</AwardTotalIntnAmount>
<AwardAmount>97122</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project will further develop and enhance the Stork Data Scheduler to support Azure cloud computing environment, and to mitigate the end-to-end data handling bottleneck in data-intensive cloud computing applications. Stork data scheduler has been very actively used in many data-intensive application areas including coastal hazard prediction and storm surge modeling; oil flow and reservoir uncertainty analysis; numerical relativity and black hole collisions; educational video processing and behavioral assessment; digital sky imaging; and multiscale computational fluid dynamics. Making Stork available on the Azure environment will enable this already existing user base to easily migrate to the Azure Cloud Computing platform as well as other Azure application groups benefiting from the large-scale data handling capabilities of Stork.&lt;br/&gt;&lt;br/&gt;The Stork Data Scheduler for Azure will make a distinctive contribution to cloud computing community because it focuses on planning, scheduling, monitoring and management of data placement tasks and application-level end-to-end optimization of networked I/O for petascale data-intensive applications. Unlike existing approaches, it will treat data resources and the tasks related to data access and movement as first class entities just like computational resources and compute tasks, and not simply the side effect of computation. Stork data scheduler for Azure will provide enhanced functionality for cloud computing such as data aggregation and connection caching; peer-to-peer and streamed data management; early error detection, classification, and recovery in data transfers; scheduled storage management; optimal protocol tuning; and end-to-end performance prediction services. The Stork data scheduler for Azure will dramatically change how domain scientists perform their research by rapidly facilitating sharing of large amounts of data in cloud computing environments.</AbstractNarration>
<MinAmdLetterDate>04/13/2011</MinAmdLetterDate>
<MaxAmdLetterDate>04/13/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1115805</AwardID>
<Investigator>
<FirstName>Tevfik</FirstName>
<LastName>Kosar</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tevfik Kosar</PI_FULL_NAME>
<EmailAddress>tkosar@buffalo.edu</EmailAddress>
<PI_PHON>7166452323</PI_PHON>
<NSF_ID>000581942</NSF_ID>
<StartDate>04/13/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Buffalo</Name>
<CityName>Buffalo</CityName>
<ZipCode>142282567</ZipCode>
<PhoneNumber>7166452634</PhoneNumber>
<StreetAddress>520 Lee Entrance</StreetAddress>
<StreetAddress2><![CDATA[Suite 211]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>26</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY26</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>038633251</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020657151</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SUNY at Buffalo]]></Name>
<CityName>Buffalo</CityName>
<StateCode>NY</StateCode>
<ZipCode>142282567</ZipCode>
<StreetAddress><![CDATA[520 Lee Entrance]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>26</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY26</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7231</Code>
<Text>CYBERINFRASTRUCTURE</Text>
</ProgramElement>
<ProgramElement>
<Code>8010</Code>
<Text>Computing in the Cloud</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>8010</Code>
<Text>Computing in the Cloud</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~97122</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Stork data Scheduler is ported to&nbsp;work on the Windows-based systems and on the Azure Cloud Computing Environment. This will allow&nbsp;Azure users be able to immediately start using a broad range of Stork data management capabilities.&nbsp;</p> <p>We have implemented several inter-protocol translation modules as part of Stork Azure and started using them in real data transfers. Stork Azure can act as a negotiating system between different data storage systems/protocols and Azure. The modularity of Stork allows users to insert a plug-in to support their favorite storage system, protocol, or middleware easily. Stork can currently interact with data transfer protocols such as FTP, GridFTP, HTTP, SCP, SMTP, BITTORENT; and data storage systems such as RODS. Stork maintains a library of pluggable 'data placement' modules, which get executed by data placement job requests coming to Stork. &nbsp;</p> <p>Thin clients were implemented for the cloud hosted Stork Azure services (inclsuing a web interface, and a smartphone android app). These interfaces use the REST API to access Stork Azure services. The users are able to submit, manage, and monitor their data transfer tasks submitted to Stork Azure via these thin clients, which is very convenient.&nbsp;</p> <p>End-to-end data transfer throughput prediction models were implemented for Windows Azure. Using these prediction models, we are now able to provide a cloud-hosted 'data transfer completion time estimation service' as a SaaS. This estimation service will allow data movement operations to be scheduled in advance with a preferred &nbsp; time constraint given by the user, stating the earliest start time and desired latest completion time. This will allow users and higher level meta-schedulers to use data placement as a service where they can plan ahead and reserve the time period for their data movement operations between Azure and external storage systems. This service will &nbsp; eliminate possible long delays in completion of a transfer operation and increase utilization of Azure by giving an opportunity to provision the required network and storage resources in advance.</p> <p>We have analyzed various factors that affect the end-to-end data transfer throughput in wide-area distributed environments, such as number of parallel streams, CPU speed, and disk I/O speed. We have shown the effects of CPU-, disk-, and network-level parallelism in removing the bottlenecks one-by-one and increasing the end-to-end data transfer throughput.&nbsp;</p> <p>We have developed models and algorithms to set the best values for the application-level transfer tuning parameters such as pipelining, parallelism and concurrency. The tests conducted over high-speed networking and cloud testbeds show that our algorithms outperform the most popular data transfer tools like Globus-url-copy, Globus Online, and UDT in majority of the cases.</p> <div class="tinyMCEContent"> <p>The Stork Data Scheduler for Azure makes a distinctive contribution to cloud computing environments because it focuses on planning, scheduling, monitoring and management of data placement tasks and application-level end-to-end optimization of networked I/O for petascale data-intensive applications. Unlike existing approaches, it treats data resources and the tasks related to data access and movement as first class entities just like computational resources and compute tasks, and not simply the side effect of computation. Stork data scheduler for Azure provides enhanced functionality for cloud computing such as data aggregation and connection caching, peer-to-peer and streamed data management; early error detection, classification, and recovery in data transfers; scheduled storage management; optimal protocol tuning; and end-to-end performance prediction services.</p> </div> <p>Stork data scheduler has been very actively used in many application areas including coastal hazard ...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Stork data Scheduler is ported to work on the Windows-based systems and on the Azure Cloud Computing Environment. This will allow Azure users be able to immediately start using a broad range of Stork data management capabilities.   We have implemented several inter-protocol translation modules as part of Stork Azure and started using them in real data transfers. Stork Azure can act as a negotiating system between different data storage systems/protocols and Azure. The modularity of Stork allows users to insert a plug-in to support their favorite storage system, protocol, or middleware easily. Stork can currently interact with data transfer protocols such as FTP, GridFTP, HTTP, SCP, SMTP, BITTORENT; and data storage systems such as RODS. Stork maintains a library of pluggable 'data placement' modules, which get executed by data placement job requests coming to Stork.    Thin clients were implemented for the cloud hosted Stork Azure services (inclsuing a web interface, and a smartphone android app). These interfaces use the REST API to access Stork Azure services. The users are able to submit, manage, and monitor their data transfer tasks submitted to Stork Azure via these thin clients, which is very convenient.   End-to-end data transfer throughput prediction models were implemented for Windows Azure. Using these prediction models, we are now able to provide a cloud-hosted 'data transfer completion time estimation service' as a SaaS. This estimation service will allow data movement operations to be scheduled in advance with a preferred   time constraint given by the user, stating the earliest start time and desired latest completion time. This will allow users and higher level meta-schedulers to use data placement as a service where they can plan ahead and reserve the time period for their data movement operations between Azure and external storage systems. This service will   eliminate possible long delays in completion of a transfer operation and increase utilization of Azure by giving an opportunity to provision the required network and storage resources in advance.  We have analyzed various factors that affect the end-to-end data transfer throughput in wide-area distributed environments, such as number of parallel streams, CPU speed, and disk I/O speed. We have shown the effects of CPU-, disk-, and network-level parallelism in removing the bottlenecks one-by-one and increasing the end-to-end data transfer throughput.   We have developed models and algorithms to set the best values for the application-level transfer tuning parameters such as pipelining, parallelism and concurrency. The tests conducted over high-speed networking and cloud testbeds show that our algorithms outperform the most popular data transfer tools like Globus-url-copy, Globus Online, and UDT in majority of the cases.   The Stork Data Scheduler for Azure makes a distinctive contribution to cloud computing environments because it focuses on planning, scheduling, monitoring and management of data placement tasks and application-level end-to-end optimization of networked I/O for petascale data-intensive applications. Unlike existing approaches, it treats data resources and the tasks related to data access and movement as first class entities just like computational resources and compute tasks, and not simply the side effect of computation. Stork data scheduler for Azure provides enhanced functionality for cloud computing such as data aggregation and connection caching, peer-to-peer and streamed data management; early error detection, classification, and recovery in data transfers; scheduled storage management; optimal protocol tuning; and end-to-end performance prediction services.   Stork data scheduler has been very actively used in many application areas including coastal hazard prediction and storm surge modeling; oil flow and reservoir uncertainty analysis; numerical relativity and black hole collisions; educational video processing and behavioral asse...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
