<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Provably Good Concurrency Platforms for Streaming Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2012</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>422852.00</AwardTotalIntnAmount>
<AwardAmount>455852</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rahul Shah</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Most of the today's computers are parallel machines.  For example, multicore processors&lt;br/&gt;on personal computers and cell phones, graphics processors, cloud&lt;br/&gt;computers, and clusters all have more than one processing unit.  &lt;br/&gt;Many modern applications are data intensive; examples include digital signal processing, audio and video&lt;br/&gt;processing, networking, scientific and biological computations.&lt;br/&gt;Streaming is an increasingly popular paradigm for applications that process &lt;br/&gt;large amounts of data in parallel.  A streaming concurrency platform is responsible for&lt;br/&gt;correctly and efficiently executing streaming applications on a given parallel machine.&lt;br/&gt;&lt;br/&gt;The goal of this research is to design streaming concurrency platforms&lt;br/&gt;that provide guarantees of forward progress and efficiency.  This&lt;br/&gt;research will fundamentally advance the technology by addressing &lt;br/&gt;the following important questions: &lt;br/&gt;(1) How to guarantee that applications will make forward progress (not&lt;br/&gt;deadlock)?  &lt;br/&gt;(2) How to guarantee that the streaming applications will run efficiently&lt;br/&gt;on modern parallel machines with deep and complex memory hierarchies?&lt;br/&gt;and&lt;br/&gt;(3) How to support more general and expressive streaming models while&lt;br/&gt;still providing correctness and performance guarantees? &lt;br/&gt;&lt;br/&gt;In modern machines cache locality can have a significant impact on&lt;br/&gt;performance.  This research has the potential to make fundamental&lt;br/&gt;contributions to both design and analysis techniques for steaming&lt;br/&gt;schedulers that guarantee good cache performance to streaming applications.&lt;br/&gt;This work will enable programmers to express a larger class of applications more&lt;br/&gt;easily in the streaming model.  While this research project is a primarily theoretical undertaking&lt;br/&gt;aimed towards designing algorithms and proving asymptotic bounds on&lt;br/&gt;their performance, the overall goal is to enable practical and&lt;br/&gt;efficient concurrency platforms that can run high-performance,&lt;br/&gt;high-throughput streaming computations on real parallel machines.&lt;br/&gt;Therefore, one of the primary objectives will be to design low overhead&lt;br/&gt;and simple algorithms that can be implemented in production-level&lt;br/&gt;streaming concurrency platforms.</AbstractNarration>
<MinAmdLetterDate>02/15/2012</MinAmdLetterDate>
<MaxAmdLetterDate>07/07/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1150036</AwardID>
<Investigator>
<FirstName>Kunal</FirstName>
<LastName>Agrawal</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kunal Agrawal</PI_FULL_NAME>
<EmailAddress>kunal@cse.wustl.edu</EmailAddress>
<PI_PHON>3149354838</PI_PHON>
<NSF_ID>000555177</NSF_ID>
<StartDate>02/15/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Washington University</Name>
<CityName>Saint Louis</CityName>
<ZipCode>631304862</ZipCode>
<PhoneNumber>3147474134</PhoneNumber>
<StreetAddress>CAMPUS BOX 1054</StreetAddress>
<StreetAddress2><![CDATA[1 Brookings Drive]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Missouri</StateName>
<StateCode>MO</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MO01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>068552207</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>WASHINGTON UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>068552207</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Washington University]]></Name>
<CityName>St. Louis</CityName>
<StateCode>MO</StateCode>
<ZipCode>631304899</ZipCode>
<StreetAddress><![CDATA[One Brookings Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Missouri</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MO01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7934</Code>
<Text>PARAL/DISTRIBUTED ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>8232</Code>
<Text>SEES Fellows</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~69493</FUND_OBLG>
<FUND_OBLG>2013~71426</FUND_OBLG>
<FUND_OBLG>2014~136083</FUND_OBLG>
<FUND_OBLG>2015~101430</FUND_OBLG>
<FUND_OBLG>2016~77420</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this proposal was to develop scheduling algorithms for streaming applications.&nbsp; A streaming application can be represented as a graph where nodes are computation modules and the edges are channels connecting the modules. The modules send data<span class="s1">&nbsp;</span>to each other via these channels.&nbsp; Once a streaming application has been written, it must be scheduled on a particular parallel machine.&nbsp; The focus in this project was on developing provably good algorithms that are easy to implement and efficient in practice.&nbsp; The broad outcomes of the project were:</p> <p>1. Development of scheduling strategies for on both homogenous and heterogenous parallel platforms.&nbsp; Homogenous platforms are those where all processors run at the same speed while heterogenous platforms are those where they don't.&nbsp; One result was&nbsp; that if a streaming application has replicable modules, scheduling on homogeous platforms can be done optimally, while scheduling on heterogenous platforms is harder.&nbsp;&nbsp;</p> <p>2.&nbsp; Development of cache-conscious algorithms which considered both the computation and the delay due to caching when making load balancing decisions.&nbsp; In addition, locality and cache conscious algorithms for scheduling task graph program were also developed.</p> <p>3.&nbsp; Development of deadlock avoidance strategies for streaming programs with filtering.&nbsp; Streaming applications that employ filtering modules are common, but have data dependent rates on channels.&nbsp; This can lead to deadlocks.&nbsp; Deadlock avoidance algrorithms developed in this project use dummy messages on channels to guarantee deadlock freedom even in the presence of arbitrary filtering.</p> <p>4.&nbsp; Development of race-detection and record and replay tools for dynamic multithreaded programs.&nbsp; Parallel programs can be difficult to debug due to inherent non-determinism which makes it difficult to reproduce bugs.&nbsp; These tools allow programmers to debug their programs more efficiently.</p> <p>Overall, this project led to over a dozen publications, supported a PhD student and involved multiple undergraduate researchers in its activities both during the summer through the REU program and during the term as independent study participants.</p><br> <p>            Last Modified: 12/27/2018<br>      Modified by: Kunal&nbsp;Agrawal</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this proposal was to develop scheduling algorithms for streaming applications.  A streaming application can be represented as a graph where nodes are computation modules and the edges are channels connecting the modules. The modules send data to each other via these channels.  Once a streaming application has been written, it must be scheduled on a particular parallel machine.  The focus in this project was on developing provably good algorithms that are easy to implement and efficient in practice.  The broad outcomes of the project were:  1. Development of scheduling strategies for on both homogenous and heterogenous parallel platforms.  Homogenous platforms are those where all processors run at the same speed while heterogenous platforms are those where they don't.  One result was  that if a streaming application has replicable modules, scheduling on homogeous platforms can be done optimally, while scheduling on heterogenous platforms is harder.    2.  Development of cache-conscious algorithms which considered both the computation and the delay due to caching when making load balancing decisions.  In addition, locality and cache conscious algorithms for scheduling task graph program were also developed.  3.  Development of deadlock avoidance strategies for streaming programs with filtering.  Streaming applications that employ filtering modules are common, but have data dependent rates on channels.  This can lead to deadlocks.  Deadlock avoidance algrorithms developed in this project use dummy messages on channels to guarantee deadlock freedom even in the presence of arbitrary filtering.  4.  Development of race-detection and record and replay tools for dynamic multithreaded programs.  Parallel programs can be difficult to debug due to inherent non-determinism which makes it difficult to reproduce bugs.  These tools allow programmers to debug their programs more efficiently.  Overall, this project led to over a dozen publications, supported a PhD student and involved multiple undergraduate researchers in its activities both during the summer through the REU program and during the term as independent study participants.       Last Modified: 12/27/2018       Submitted by: Kunal Agrawal]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
