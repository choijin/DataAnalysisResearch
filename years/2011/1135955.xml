<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CPS: Medium: Collaborative Research: Credible Autocoding and Verification of Embedded Software (CrAVES)</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>570000.00</AwardTotalIntnAmount>
<AwardAmount>570000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>David Corman</SignBlockName>
<PO_EMAI>dcorman@nsf.gov</PO_EMAI>
<PO_PHON>7032928754</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The CrAVES project seeks to lay down intellectual foundations for credible autocoding of embedded systems, by which graphical control system specifications that satisfy given open-loop and closed-loop properties are automatically transformed into source code guaranteed to satisfy the same properties. The goal is that the correctness of these codes can be easily and independently verified by dedicated proof checking systems. During the autocoding process, the properties of control system specifications are transformed into proven assertions explicitly written in the resulting source code. Thus CrAVES aims at transforming the extensive safety and reliability analyses conducted by control system engineers, such as those based on Lyapunov theory, into rigorous, embedded analyses of the corresponding software implementations. CrAVES comes as a useful complement to current static software analysis methods, which it leverages to develop independent verification systems.&lt;br/&gt;&lt;br/&gt;Computers and computer programs used to manage documents and spreadsheets. They now also interact with physical artifacts (airplanes, power plants, automobile brakes and robotic surgeons), to create Cyber-Physical Systems. Software means complexity and bugs - bugs which can cause real tragedy, far beyond the frozen screens we associate with system crashes on our current PCs. Software autocoding is becoming the de facto recommended practice for many safety-critical applications. CrAVES aims to evolve this towards higher standards of quality and reduced design times and costs. Rigorous, mathematical arguments supporting safety-critical functionalities are the cornerstone of CrAVES. Collaborative programs involving high-school teachers will encourage the transmission of this message to STEM education in high-schools through university programs designed for that purpose.</AbstractNarration>
<MinAmdLetterDate>09/07/2011</MinAmdLetterDate>
<MaxAmdLetterDate>09/07/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1135955</AwardID>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Feron</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eric M Feron</PI_FULL_NAME>
<EmailAddress>feron@gatech.edu</EmailAddress>
<PI_PHON>4048943062</PI_PHON>
<NSF_ID>000490509</NSF_ID>
<StartDate>09/07/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>097394084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGIA TECH RESEARCH CORPORATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>097394084</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgia Institute of Technology]]></Name>
<CityName>Atlanta</CityName>
<StateCode>GA</StateCode>
<ZipCode>303320002</ZipCode>
<StreetAddress><![CDATA[225 North Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>1640</Code>
<Text>INFORMATION TECHNOLOGY RESEARC</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7752</Code>
<Text>CDI NON SOLICITED RESEARCH</Text>
</ProgramReference>
<ProgramReference>
<Code>7918</Code>
<Text>CYBER-PHYSICAL SYSTEMS (CPS)</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~570000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Embedded software interacts in real-time with physical artifacts, such as a car, an aircraft, or a medical device, to create highly capable, but also complex and potentially dangerous systems. Embedded software is often described as safety-critical, because even its first operational execution can result in catastrophic consequences. It is therefore necessary to develop and use the safest possible software development processes so as to make sure that no human-made software error causes malfunction of the cyber-physical systems thus created.</p> <p>Credible autocoding was developed by a team of researchers at Georgia Tech and Carnegie-Mellon  University under NSF support to enable the capacity for a cyber-physical system development team to formally validate its product against its functional properties throughout the software development cycle. Here, &ldquo;formally&rdquo; means rigorous mathematical arguments form the basis upon which the validation exercise rests.</p> <p>An open-source, prototype credible autocoding tool, named Gene-Auto+, was written and evaluated against a number of number of real-life examples, including an educational control system, a jet engine, and an aircraft. Namely, Gene-Auto+ takes high-level system specifications, such as those expressed in Simulink or other graphical languages, together with their semantics <em>expressed in the same graphical language</em>, and translates them into a source code, together with the system's semantics <em>expressed in the same computer language. </em>An verification tool was independently developed to check the autocoded source code against the translated semantics. It was successfully used to discover hidden malfunctions in the autocoding base used to perform this research.</p> <p>The ultimate goal of credible autocoding will be reached when it will be able to rigorously keep track of the system&rsquo;s functional semantics throughout the entire software development and implementation process, from the development of the requirements to the hardware-in the loop testing. When credible autocoding reaches this level of maturity, it will allow industry to considerably reduce costly software validation tests.</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/28/2015<br>      Modified by: Eric&nbsp;M&nbsp;Feron</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Embedded software interacts in real-time with physical artifacts, such as a car, an aircraft, or a medical device, to create highly capable, but also complex and potentially dangerous systems. Embedded software is often described as safety-critical, because even its first operational execution can result in catastrophic consequences. It is therefore necessary to develop and use the safest possible software development processes so as to make sure that no human-made software error causes malfunction of the cyber-physical systems thus created.  Credible autocoding was developed by a team of researchers at Georgia Tech and Carnegie-Mellon  University under NSF support to enable the capacity for a cyber-physical system development team to formally validate its product against its functional properties throughout the software development cycle. Here, "formally" means rigorous mathematical arguments form the basis upon which the validation exercise rests.  An open-source, prototype credible autocoding tool, named Gene-Auto+, was written and evaluated against a number of number of real-life examples, including an educational control system, a jet engine, and an aircraft. Namely, Gene-Auto+ takes high-level system specifications, such as those expressed in Simulink or other graphical languages, together with their semantics expressed in the same graphical language, and translates them into a source code, together with the system's semantics expressed in the same computer language. An verification tool was independently developed to check the autocoded source code against the translated semantics. It was successfully used to discover hidden malfunctions in the autocoding base used to perform this research.  The ultimate goal of credible autocoding will be reached when it will be able to rigorously keep track of the systemÃ†s functional semantics throughout the entire software development and implementation process, from the development of the requirements to the hardware-in the loop testing. When credible autocoding reaches this level of maturity, it will allow industry to considerably reduce costly software validation tests.          Last Modified: 09/28/2015       Submitted by: Eric M Feron]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
