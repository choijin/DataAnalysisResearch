<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Foundations and Applications of Higher-Dimensional Directed Type Theory</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>499965.00</AwardTotalIntnAmount>
<AwardAmount>542965</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A central objective for computer science is to develop methods for building&lt;br/&gt;reliable and maintainable software.  The most important technique for ensuring&lt;br/&gt;these properties is abstraction, the decomposition of a system into separable&lt;br/&gt;and reusable components.  The theory of abstraction in programming is called&lt;br/&gt;type theory.  A type is a specification of the behavior of a software component;&lt;br/&gt;type checking ensures that programs obey these specifications.  This ensures&lt;br/&gt;that components can be modified or replaced without fear of disrupting the&lt;br/&gt;behavior of other components.  By supporting the expression and enforcement of&lt;br/&gt;component behaviors, type theory integrates programming with verification, the&lt;br/&gt;process of ensuring compliance with specifications.  All modern programming&lt;br/&gt;languages and development methodologies are based on, or draw inspiration from,&lt;br/&gt;type theory.  The broad goal of this project is to extend the capabilities of&lt;br/&gt;type theory to a wider range of properties, and to use type theory to facilitate&lt;br/&gt;the development of reliable software.&lt;br/&gt;&lt;br/&gt;Specifically, the research will develop the theory of higher-dimensional type&lt;br/&gt;theory, and explore its application to generic programming, a technique&lt;br/&gt;for generating programs from their specifications.  Higher-dimensional&lt;br/&gt;type theory draws on recent advances in category theory and algebraic&lt;br/&gt;topology that emphasize the algebraic structure of relations between&lt;br/&gt;programs, and relations between such relations, in direct analogy with&lt;br/&gt;the higher-dimensional structure of topological spaces.  In this setting&lt;br/&gt;dependent families of types must respect the algebraic structure of such&lt;br/&gt;relations, and in doing so, they implicitly provide transformations that&lt;br/&gt;correspond to generic programs whose behavior is determined by their&lt;br/&gt;type.  More broadly, the project will apply ideas from category theory&lt;br/&gt;and topology to improve software development, and apply ideas from type&lt;br/&gt;theory to facilitate computer-verified proofs of mathematical theorems.</AbstractNarration>
<MinAmdLetterDate>07/18/2011</MinAmdLetterDate>
<MaxAmdLetterDate>06/06/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116703</AwardID>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Harper</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert W Harper</PI_FULL_NAME>
<EmailAddress>rwh@cs.cmu.edu</EmailAddress>
<PI_PHON>4122683675</PI_PHON>
<NSF_ID>000113062</NSF_ID>
<StartDate>07/18/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~499965</FUND_OBLG>
<FUND_OBLG>2012~35000</FUND_OBLG>
<FUND_OBLG>2014~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project is an investigation of type theory, a unified language for expressing&nbsp;programs and proofs. The language of type theory provides the means to specify&nbsp;and verify the behavior of programs, an important aspect of ensuring software&nbsp;correctness, and to state and prove theorems in various areas of mathematics.&nbsp;By unifying the concepts of program and proof, on the one hand, and&nbsp;specification and theorem, on the other, type theory integrates computer science&nbsp;and mathematics in a manner not achieved by other approaches to formal&nbsp;verification of programs or mechanical checking of mathematical proofs. &nbsp;Moreover, there are three principal implementations of type theory (NuPRL, Agda,&nbsp;and Coq) that support the practical mechanization of program and proof&nbsp;development. Thus, type theory is not only a theoretical formalism, but also a&nbsp;practical tool that extends the capabilities of computer scientists and&nbsp;mathematicians to include convenient computer assistance.</p> <p>The focus of this project is on the extension of type theory to account for the<br />higher-dimensional structure of types, which reflects a "geometric" or<br />"topological" aspect of types that has only recently been recognized and<br />developed by the present project. This recognition established connections with&nbsp;a branch of mathematics, called homotopy theory, that has led to exciting new&nbsp;developments that continue to be pursued. The emphasis of the present project&nbsp;is on the application of this newly discovered connection to practical<br />programming problems. In particular it has contributed to the mechanization of<br />a body of homotopy theory using the Agda proof assistant, and has applied<br />concepts of higher-dimensional type theory to the practical problem of revision<br />control in software development.</p> <p>The project has supported the education and research of three Ph.D students, two undergraduate students, including one master's thesis, and two post-doctoral fellows.</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/03/2015<br>      Modified by: Robert&nbsp;W&nbsp;Harper</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project is an investigation of type theory, a unified language for expressing programs and proofs. The language of type theory provides the means to specify and verify the behavior of programs, an important aspect of ensuring software correctness, and to state and prove theorems in various areas of mathematics. By unifying the concepts of program and proof, on the one hand, and specification and theorem, on the other, type theory integrates computer science and mathematics in a manner not achieved by other approaches to formal verification of programs or mechanical checking of mathematical proofs.  Moreover, there are three principal implementations of type theory (NuPRL, Agda, and Coq) that support the practical mechanization of program and proof development. Thus, type theory is not only a theoretical formalism, but also a practical tool that extends the capabilities of computer scientists and mathematicians to include convenient computer assistance.  The focus of this project is on the extension of type theory to account for the higher-dimensional structure of types, which reflects a "geometric" or "topological" aspect of types that has only recently been recognized and developed by the present project. This recognition established connections with a branch of mathematics, called homotopy theory, that has led to exciting new developments that continue to be pursued. The emphasis of the present project is on the application of this newly discovered connection to practical programming problems. In particular it has contributed to the mechanization of a body of homotopy theory using the Agda proof assistant, and has applied concepts of higher-dimensional type theory to the practical problem of revision control in software development.  The project has supported the education and research of three Ph.D students, two undergraduate students, including one master's thesis, and two post-doctoral fellows.          Last Modified: 08/03/2015       Submitted by: Robert W Harper]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
