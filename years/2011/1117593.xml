<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Automating the Detection of Architectural Degradation in Software Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>299135</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Over time, a software system's architecture eventually deviates from the original designer's intent and degrades through unplanned introduction of changes that invalidate original design decisions. Architectural degradation increases the cost of making new modifications and decreases a system?s reliability, until engineers are no longer able to effectively evolve the system. At that point, the system's actual architecture may have to be recovered from the implementation artifacts, but this is a time-consuming and error-prone process, and leaves critical issues unresolved: the problems caused by architectural degradation will likely be obfuscated by the system?s many elements and their interrelationships, thus risking further degradation.&lt;br/&gt; &lt;br/&gt;This collaborative project aims at pinpointing locations in a software system's architecture that reflect architectural degradation. The proposed research comprises four integrated research tasks: (1) Develop a catalog of commonly occurring symptoms of degradation. (2) Develop an architecture recovery technique that automatically extracts both a system's major building blocks and the concerns that influence, drive, and interact with these building blocks. (3) Devise a technique for formally capturing the recovered architectural design decisions, their involving concerns, and the identified causes of degradation. (4) Devise a suite of techniques that leverage the catalog to automatically identify system-specific instances of degradation.  As a result, this project will have a potential for broad impact by providing a rigorous, scientific basis for software engineers to streamline the currently prohibitively expensive and error-prone system maintenance and evolution tasks.</AbstractNarration>
<MinAmdLetterDate>06/30/2011</MinAmdLetterDate>
<MaxAmdLetterDate>12/19/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1117593</AwardID>
<Investigator>
<FirstName>Nenad</FirstName>
<LastName>Medvidovic</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nenad Medvidovic</PI_FULL_NAME>
<EmailAddress>neno@usc.edu</EmailAddress>
<PI_PHON>2137405579</PI_PHON>
<NSF_ID>000485161</NSF_ID>
<StartDate>06/30/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900890001</ZipCode>
<StreetAddress><![CDATA[University Park]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA37</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~250000</FUND_OBLG>
<FUND_OBLG>2015~49135</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software systems continuously evolve. It has been widely documented that engineers tend to make decisions about system changes without careful consideration of the impact of those changes on the system&rsquo;s architecture. As a result, the architecture of a software system will eventually deviate from the original intent, resulting in architectural drift (unplanned expansion of the architecture) and erosion (invalidation of existing architectural design decisions). In turn, architectural drift and erosion make new modifications to a system increasingly time consuming and costly, while the system&rsquo;s reliability steadily decreases over time. Engineers typically devise patches to deal with the discovered problems&rsquo; symptoms, without understanding their actual causes. The ultimate risk is that the system&rsquo;s design will eventually be &ldquo;broken&rdquo; beyond the engineers&rsquo; ability to patch it further. At that point, the engineers may attempt to recover the architecture from the system&rsquo;s implementation artifacts and &ldquo;reset&rdquo; the process. Even if the architecture can be recovered, which is usually a time-consuming and error-prone process in itself, a critical issue remains: just because an explicit representation of the architecture is available again, the problems caused by architectural drift and erosion will likely be obfuscated by the system&rsquo;s many elements and their interrelationships. As a result, even after all this effort, the engineers will not be any closer to understanding which parts of the system need to be reengineered, and drift and erosion may occur again in the next round of evolution.</p> <p>This collaborative project aimed to pinpoint locations in a system's architectural model that reflect possible architectural drift and erosion. The conducted work comprised four integrated research tasks: (1) We developed a catalogue of commonly occurring architectural design decisions that result in drift and erosion (commonly referred to as architectural degradation or decay); such design decisions will typically negatively impact system lifecycle properties, such as understandability, testability, extensibility, and reusability. (2) We developed a novel architecture recovery technique that automatically extracts both the major building blocks of a system, such as the processing, data, and connecting elements, as well as the system concerns that influence, drive, and interact with these building blocks. (3) We devised a novel technique for formally capturing the recovered architectural design decisions, their involving concerns, as well as the identified causes of drift and erosion. (4) We devised multiple algorithms that leverage the catalogue of generic causes of architectural decay to automatically identify the system-specific instances of decay based on their formalized representations.&nbsp; In doing so, the project helped to provide a rigorous, scientific basis for software practitioners to streamline the extremely expensive and error-prone system maintenance and evolution efforts.</p> <p>The above four research tasks have been embodied in an automated software tool, called ARCADE (which stands for &ldquo;architecture recovery, change, and decay evaluator&rdquo;), that allows large-scale analysis of existing software systems, and tracking of their patterns of architectural change and decay over time. This tool, the first of its kind, has already been adopted for use in several universities around the world, as well as at least one industrial organization.</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/10/2015<br>      Modified by: Nenad&nbsp;Medvidovic</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div ...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software systems continuously evolve. It has been widely documented that engineers tend to make decisions about system changes without careful consideration of the impact of those changes on the systemÆs architecture. As a result, the architecture of a software system will eventually deviate from the original intent, resulting in architectural drift (unplanned expansion of the architecture) and erosion (invalidation of existing architectural design decisions). In turn, architectural drift and erosion make new modifications to a system increasingly time consuming and costly, while the systemÆs reliability steadily decreases over time. Engineers typically devise patches to deal with the discovered problemsÆ symptoms, without understanding their actual causes. The ultimate risk is that the systemÆs design will eventually be "broken" beyond the engineersÆ ability to patch it further. At that point, the engineers may attempt to recover the architecture from the systemÆs implementation artifacts and "reset" the process. Even if the architecture can be recovered, which is usually a time-consuming and error-prone process in itself, a critical issue remains: just because an explicit representation of the architecture is available again, the problems caused by architectural drift and erosion will likely be obfuscated by the systemÆs many elements and their interrelationships. As a result, even after all this effort, the engineers will not be any closer to understanding which parts of the system need to be reengineered, and drift and erosion may occur again in the next round of evolution.  This collaborative project aimed to pinpoint locations in a system's architectural model that reflect possible architectural drift and erosion. The conducted work comprised four integrated research tasks: (1) We developed a catalogue of commonly occurring architectural design decisions that result in drift and erosion (commonly referred to as architectural degradation or decay); such design decisions will typically negatively impact system lifecycle properties, such as understandability, testability, extensibility, and reusability. (2) We developed a novel architecture recovery technique that automatically extracts both the major building blocks of a system, such as the processing, data, and connecting elements, as well as the system concerns that influence, drive, and interact with these building blocks. (3) We devised a novel technique for formally capturing the recovered architectural design decisions, their involving concerns, as well as the identified causes of drift and erosion. (4) We devised multiple algorithms that leverage the catalogue of generic causes of architectural decay to automatically identify the system-specific instances of decay based on their formalized representations.  In doing so, the project helped to provide a rigorous, scientific basis for software practitioners to streamline the extremely expensive and error-prone system maintenance and evolution efforts.  The above four research tasks have been embodied in an automated software tool, called ARCADE (which stands for "architecture recovery, change, and decay evaluator"), that allows large-scale analysis of existing software systems, and tracking of their patterns of architectural change and decay over time. This tool, the first of its kind, has already been adopted for use in several universities around the world, as well as at least one industrial organization.          Last Modified: 08/10/2015       Submitted by: Nenad Medvidovic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
