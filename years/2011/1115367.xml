<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Commodity Processors with Mainframe Reliability</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2011</AwardEffectiveDate>
<AwardExpirationDate>06/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>420000.00</AwardTotalIntnAmount>
<AwardAmount>420000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>tao li</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The goal of this project is to create multicore computer processors&lt;br/&gt;with near-mainframe reliability at commodity costs, where the primary&lt;br/&gt;costs are additional hardware and additional power consumption. Should&lt;br/&gt;this project achieve these goals, it would transform computing.&lt;br/&gt;Reliable processors would no longer be a niche product; instead, they&lt;br/&gt;would be the commodity products used in desktops, laptops,&lt;br/&gt;smartphones, etc.&lt;br/&gt;&lt;br/&gt;The research thrusts in this project include error detection, error&lt;br/&gt;recovery, diagnosis of permanent faults, and self-repair for&lt;br/&gt;tolerating permanent faults.  The end result of this project will be a&lt;br/&gt;hardware prototype of a low-cost, reliable multicore processor.&lt;br/&gt;Building an artifact is a vital part of this project for two&lt;br/&gt;reasons. First, a primary project goal is to keep power and area costs&lt;br/&gt;low, and these costs cannot be accurately determined using high-level&lt;br/&gt;simulation. Second, to transfer this technology to industry and&lt;br/&gt;transform the industry, the chip makers must be convinced that the&lt;br/&gt;solutions are viable.  Chip makers have historically been&lt;br/&gt;hesitant to accept ideas that have not been built, not least because&lt;br/&gt;important issues can be hidden in a high-level simulator.</AbstractNarration>
<MinAmdLetterDate>06/10/2011</MinAmdLetterDate>
<MaxAmdLetterDate>06/10/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1115367</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Sorin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel Sorin</PI_FULL_NAME>
<EmailAddress>sorin@ee.duke.edu</EmailAddress>
<PI_PHON>9196843030</PI_PHON>
<NSF_ID>000280417</NSF_ID>
<StartDate>06/10/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Duke University</Name>
<CityName>Durham</CityName>
<ZipCode>277054010</ZipCode>
<PhoneNumber>9196843030</PhoneNumber>
<StreetAddress>2200 W. Main St, Suite 710</StreetAddress>
<StreetAddress2><![CDATA[Erwin Square]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>044387793</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DUKE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>044387793</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Duke University]]></Name>
<CityName>Durham</CityName>
<StateCode>NC</StateCode>
<ZipCode>277054010</ZipCode>
<StreetAddress><![CDATA[2200 W. Main St, Suite 710]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~420000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project was to provide highly reliable computers at<br />low cost.&nbsp; The project studied both mechanisms for improving the<br />reliability of specific components, as well as studying how to<br />integrate these mechanisms into a holistic solution for a complete<br />processor.<br /><br />1) Mechanisms for Specific Components<br /><br />We developed a new, low-cost mechanism for detecting errors in<br />general-purpose processor cores.&nbsp; This scheme, called Nostradamus,<br />uses a small amount of hardware and power to detect when a fault<br />causes a processor core to operate incorrectly.<br /><br />We developed new, low-cost mechanisms for detecting errors in graphics<br />processors, including their cores and their memory systems.&nbsp; Graphics<br />processors, which did not used to need reliability, are now being used<br />for scientific computations and other purposes which require<br />reliability.<br /><br />We developed what is, to the best of our knowledge, the first<br />complete, low-cost scheme for detecting errors in the hardware that<br />performs floating point arithmetic in processors.<br /><br />In conjunction with colleagues in the area of information encoding, we<br />developed new schemes for extending the lifetime of memory<br />technologies that are write-limited (can only be written so many times<br />before failing).&nbsp; These technologies include the widely-used Flash<br />(e.g., in solid-state drives, smartphones, cameras, etc.), as well as<br />phase-change memory.<br /><br />2) A Holistic Implementation of a Reliable Processor<br /><br />We started with an open-source general-purpose processor core, and we<br />used it as the building block of a multicore processor that we<br />designed and implemented.&nbsp; We added a complete memory system,<br />including cache coherence, and we implemented this baseline processor<br />on a prototyping board with a field-programmable gate array (FPGA), a<br />chip that can be reconfigured to implement a desired design.&nbsp; We then<br />augmented this baseline processor with our mechanisms for detecting<br />errors and recovering from them when they are detected.&nbsp; The results<br />were very exciting, in that the processor could detect a large<br />majority of errors that we injected, and the costs of our fault<br />tolerance mechanisms were small.</p><br> <p>            Last Modified: 07/06/2015<br>      Modified by: Daniel&nbsp;Sorin</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project was to provide highly reliable computers at low cost.  The project studied both mechanisms for improving the reliability of specific components, as well as studying how to integrate these mechanisms into a holistic solution for a complete processor.  1) Mechanisms for Specific Components  We developed a new, low-cost mechanism for detecting errors in general-purpose processor cores.  This scheme, called Nostradamus, uses a small amount of hardware and power to detect when a fault causes a processor core to operate incorrectly.  We developed new, low-cost mechanisms for detecting errors in graphics processors, including their cores and their memory systems.  Graphics processors, which did not used to need reliability, are now being used for scientific computations and other purposes which require reliability.  We developed what is, to the best of our knowledge, the first complete, low-cost scheme for detecting errors in the hardware that performs floating point arithmetic in processors.  In conjunction with colleagues in the area of information encoding, we developed new schemes for extending the lifetime of memory technologies that are write-limited (can only be written so many times before failing).  These technologies include the widely-used Flash (e.g., in solid-state drives, smartphones, cameras, etc.), as well as phase-change memory.  2) A Holistic Implementation of a Reliable Processor  We started with an open-source general-purpose processor core, and we used it as the building block of a multicore processor that we designed and implemented.  We added a complete memory system, including cache coherence, and we implemented this baseline processor on a prototyping board with a field-programmable gate array (FPGA), a chip that can be reconfigured to implement a desired design.  We then augmented this baseline processor with our mechanisms for detecting errors and recovering from them when they are detected.  The results were very exciting, in that the processor could detect a large majority of errors that we injected, and the costs of our fault tolerance mechanisms were small.       Last Modified: 07/06/2015       Submitted by: Daniel Sorin]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
