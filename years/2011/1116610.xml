<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Integrating Compiler and Architecture Design to Boost Timing Speculation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>493399.00</AwardTotalIntnAmount>
<AwardAmount>501349</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project examines the art and science of co-designing compilers and hardware for circuit-level timing speculation thereby enabling reliable, high-performance computer systems. Timing speculation, an exciting, forward-looking hardware design alternative, allows designers to abandon pessimistic design guidelines and consequently extract more performance from the silicon. Unfortunately, timing speculation has been under-served by contemporary compiler technologies. This research develops novel design paradigms that allow the compiler and architecture to be jointly optimized to build highly effective timing speculative systems, a significant industrial and societal benefit. Outreach efforts motivate students to pursue graduate study in computer science and engineering. &lt;br/&gt;&lt;br/&gt;Given the promise of timing speculation but the prevailing downward focus of existing work, targeted code generation addresses neglected portions of the system stack and offers enticing possibilities.  This research develops timing-aware compilation that applies instruction-level error rate models to analyze and optimize instruction sequences. By generating binaries specifically targeted for timing speculation, the compiler aims to significantly reduce incidence of timing errors which demand dynamic correction. This extends the reach of timing speculation by reducing recovery cost. This allows systems to operate at higher clock frequencies or enables better energy-efficiency through lower supply voltages. The research develops compact timing error rate models through machine learning techniques and determines how existing flow analysis present in modern compilers could be used to drive these error rate models. The compiler extends existing code optimizations to include the estimated impact of timing errors generated during analysis phases. The compiler technology is being used to examine new design paradigms for integrated timing speculative systems which include co-designed and co-optimized architectures and compilers.</AbstractNarration>
<MinAmdLetterDate>07/13/2011</MinAmdLetterDate>
<MaxAmdLetterDate>05/17/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116610</AwardID>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Findler</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert Findler</PI_FULL_NAME>
<EmailAddress>robby@northwestern.edu</EmailAddress>
<PI_PHON>7737024029</PI_PHON>
<NSF_ID>000150535</NSF_ID>
<StartDate>07/13/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Russell</FirstName>
<LastName>Joseph</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Russell E Joseph</PI_FULL_NAME>
<EmailAddress>rjoseph@eecs.northwestern.edu</EmailAddress>
<PI_PHON>8474913061</PI_PHON>
<NSF_ID>000478134</NSF_ID>
<StartDate>07/13/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northwestern University</Name>
<CityName>Chicago</CityName>
<ZipCode>606114579</ZipCode>
<PhoneNumber>3125037955</PhoneNumber>
<StreetAddress>750 N. Lake Shore Drive</StreetAddress>
<StreetAddress2><![CDATA[Rubloff 7th Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>160079455</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHWESTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005436803</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northwestern University]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606114579</ZipCode>
<StreetAddress><![CDATA[750 N. Lake Shore Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~493399</FUND_OBLG>
<FUND_OBLG>2013~7950</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The overall goal of this project was to develop novel co-design methodologies that allow the compiler and microarchitecture to exploit circuit-level timing patterns.</p> <p><span id="docs-internal-guid-6db3d39d-e026-dcde-c0cb-7d67bcc734a6"> <p dir="ltr"><span>Over the course of the research, this project demonstrated that systems designed from the ground up to tolerate timing errors and exploit gate-level timing characteristics can achieve improved performance and energy-efficiency. </span></p> <p dir="ltr"><strong>Compiler Optimizations</strong></p> <p dir="ltr"><span>The project proposed and evaluated a number of compiler optimizations that can improve the performance and energy efficiency of a timing speculative processor. The results show that code generated by the compiler can have a significant impact on the error rate of the processor and with knowledge of which instruction patterns are most litkely to trigger errors, the compiler can generate optimized code that will reduce most of the timing errors. We specifically, examined branch rerouting, profile guided padding, and a few simple peep-hole optimizations. Of these approaches, branch-rerouting and profile guided padding have the most pronounced impact.</span></p> <p dir="ltr"><strong>Supporting Caches At Low Voltages</strong></p> <p dir="ltr"><span>While this project focused primarily on improving the performance of processor logic through co-design of the compiler and microrachitecture, we discovered caches cannot be completely ignored lest they become bottlenecks. We investigated several approaches to improving the reliability of both first-level and last-level caches. Keeping in the theme of coordinated hardware/software management, we found that static code transformations can enhance voltage scaling of the L1 instruction cache and dynamic intra-block locality awareness can achieve similar benefits for the L1 data cache. For last-level caches, this project showed that low-voltage operation can be improved by combining variable-strength &nbsp;error-correcting codes (ECC) with data compression.</span></p> <p dir="ltr"><strong>Exploiting Timing Slack in A Non-Speculative Manner</strong></p> <p dir="ltr"><span>An unexpected finding of this project is that it is possible to extend many of the basic ideas to work in a non-speculative way. Specifically, some design time analysis of the circuits can uncover timing properties that can be understood by the compiler. These typically take the shape of instruction patterns that can possibly trigger timing errors. The compiler can then annotate the binary to alert the hardware of trouble. When coupled with fast voltage scaling, it is possible to achieve significant energy reduction.</span></p> <p dir="ltr"><span><br /></span></p> </span></p> <p><strong>Training and Outreach</strong></p> <p><span id="docs-internal-guid-6db3d39d-e00a-80b9-9d34-7a7c0755a4dd"><span>While working on this project, Giang Hoang completed his PhD dissertation titled "Compiler Support for Timing Speculative Architectures". He was trained in ASIC design flow and can successfully design and analyze relatively complex digital designs from RTL to gate-level. He developed a good knowledge of compiler backends and can implement them a number of code transformations.</span></span></p> <p><span id="docs-internal-guid-6db3d39d-e00a-c0af-ef3a-95046c3cf265">&nbsp;</span></p> <p dir="ltr"><span>As active participants in this project, Chao Yan, Yuanbo Fan, and Feng Lu trained in tools and techniques relevant to computer architecture research. This has served them well as they complete their PhD studies.</span></p> <div>As part of the outreach efforts of this project, research findings from this proposal were disseminated to underrepresented groups to increase engagement in computer systems research. Two specific examples:</div> <p>&nbsp;</p> <p><span id="docs-internal-guid-6db3d39d-e00a-f351-044e-86e37ee8e259"> </span></p> <ul> <li dir="ltr"> <p dir="ltr"><span>In August 2012, Russ Joseph (PI) hosted the 3rd installment of the Computer Architecture Summer School, a discipline specific mentoring workshop (DSW) that contributes to career development for women and underrepresented minority graduate students in computer architecture. Research content from the this project was featured in a panel session on cross domain research. </span></p> </li> <li dir="ltr"><span>In March 2013, Russ Joseph (PI) gave a distinguished lecture at the Department of Computer Science at University of Central Florida. The seminar was sponsored by CRA as part of its Distinguished Lecture Series. The content of the talk drew heavily from this research project and focused on the potential benefits of co-design the system (compiler, microarchitecture) for timing speculation.</span></li> </ul> <p>&nbsp;</p> <p><span><span><br /></span></span></p><br> <p>            Last Modified: 12/08/2016<br>      Modified by: Russell&nbsp;E&nbsp;Joseph</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The overall goal of this project was to develop novel co-design methodologies that allow the compiler and microarchitecture to exploit circuit-level timing patterns.   Over the course of the research, this project demonstrated that systems designed from the ground up to tolerate timing errors and exploit gate-level timing characteristics can achieve improved performance and energy-efficiency.  Compiler Optimizations The project proposed and evaluated a number of compiler optimizations that can improve the performance and energy efficiency of a timing speculative processor. The results show that code generated by the compiler can have a significant impact on the error rate of the processor and with knowledge of which instruction patterns are most litkely to trigger errors, the compiler can generate optimized code that will reduce most of the timing errors. We specifically, examined branch rerouting, profile guided padding, and a few simple peep-hole optimizations. Of these approaches, branch-rerouting and profile guided padding have the most pronounced impact. Supporting Caches At Low Voltages While this project focused primarily on improving the performance of processor logic through co-design of the compiler and microrachitecture, we discovered caches cannot be completely ignored lest they become bottlenecks. We investigated several approaches to improving the reliability of both first-level and last-level caches. Keeping in the theme of coordinated hardware/software management, we found that static code transformations can enhance voltage scaling of the L1 instruction cache and dynamic intra-block locality awareness can achieve similar benefits for the L1 data cache. For last-level caches, this project showed that low-voltage operation can be improved by combining variable-strength  error-correcting codes (ECC) with data compression. Exploiting Timing Slack in A Non-Speculative Manner An unexpected finding of this project is that it is possible to extend many of the basic ideas to work in a non-speculative way. Specifically, some design time analysis of the circuits can uncover timing properties that can be understood by the compiler. These typically take the shape of instruction patterns that can possibly trigger timing errors. The compiler can then annotate the binary to alert the hardware of trouble. When coupled with fast voltage scaling, it is possible to achieve significant energy reduction.     Training and Outreach  While working on this project, Giang Hoang completed his PhD dissertation titled "Compiler Support for Timing Speculative Architectures". He was trained in ASIC design flow and can successfully design and analyze relatively complex digital designs from RTL to gate-level. He developed a good knowledge of compiler backends and can implement them a number of code transformations.    As active participants in this project, Chao Yan, Yuanbo Fan, and Feng Lu trained in tools and techniques relevant to computer architecture research. This has served them well as they complete their PhD studies. As part of the outreach efforts of this project, research findings from this proposal were disseminated to underrepresented groups to increase engagement in computer systems research. Two specific examples:         In August 2012, Russ Joseph (PI) hosted the 3rd installment of the Computer Architecture Summer School, a discipline specific mentoring workshop (DSW) that contributes to career development for women and underrepresented minority graduate students in computer architecture. Research content from the this project was featured in a panel session on cross domain research.   In March 2013, Russ Joseph (PI) gave a distinguished lecture at the Department of Computer Science at University of Central Florida. The seminar was sponsored by CRA as part of its Distinguished Lecture Series. The content of the talk drew heavily from this research project and focused on the potential benefits of co-design the system (compiler, microarchitecture) for timing speculation.              Last Modified: 12/08/2016       Submitted by: Russell E Joseph]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
