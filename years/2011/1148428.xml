<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:  SI2-SSE: Correctness Verification Tools for Extreme Scale Hybrid Concurrency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2012</AwardEffectiveDate>
<AwardExpirationDate>05/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>44346.00</AwardTotalIntnAmount>
<AwardAmount>44346</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rudolf Eigenmann</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>High Performance Computing is strategically important to national competitiveness.  Advances in computational capabilities involve the use of unprecedented levels of parallelism: programming methods that involve billions of concurrent activities.  Multiple styles of concurrency involving shared and distributed memory programming (?hybrid?) are necessary. Unfortunately, such programs are very difficult to debug using existing methods. This project develops formal (mathematically based) verification tools that can debug hybrid concurrent programs with very high certainty of bug elimination, while consuming only modest computational resources for verification.  &lt;br/&gt;&lt;br/&gt;The project develops execution-based tools that eliminate search over semantically equivalent alternative schedules as well as solver-based techniques that eliminate classes of bugs over single runs. Scalable methods based on non-determinism classification and heuristic execution-space reduction are also being developed. &lt;br/&gt;&lt;br/&gt;Expected results include: (1) development of tools based on formal algorithmic techniques that verify large-scale hybrid programs; (2) amalgamation of incisive bug-hunting methods developed at other research organizations within formally based tools developed in our group; (3) incorporation of our verification tools and techniques within popular tool-integration frameworks; (4) large-scale case studies handled using our tools; and (5) training of undergraduate and graduate students on these advanced verification methods, building the talent pool vital to continued progress in high performance computing with applications to science and engineering, energy/sustainability, and homeland security.</AbstractNarration>
<MinAmdLetterDate>06/19/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/19/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1148428</AwardID>
<Investigator>
<FirstName>Rajeev</FirstName>
<LastName>Thakur</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rajeev S Thakur</PI_FULL_NAME>
<EmailAddress>thakur@anl.gov</EmailAddress>
<PI_PHON>6302527847</PI_PHON>
<NSF_ID>000120835</NSF_ID>
<StartDate>06/19/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606372612</ZipCode>
<PhoneNumber>7737028669</PhoneNumber>
<StreetAddress>6054 South Drexel Avenue</StreetAddress>
<StreetAddress2><![CDATA[Suite 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005421136</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CHICAGO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005421136</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[The University of Chicago]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606371433</ZipCode>
<StreetAddress><![CDATA[5735 South Ellis]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<ProgramReference>
<Code>8005</Code>
<Text>Scientific Software Elements</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~44346</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This was a collaborative project together with the University of Utah. The overall objective of this collaborative project was to develop tools and techniques for verification of large-scale parallel programs, particularly those that use multiple concurrency models (hybrid programming).&nbsp; The role of the University of Utah group was to develop the formal verification techniques and tools based on them. The role of our group was to provide interesting test cases that could benefit from formal verification, such as parallel programs and algorithms as well as parts of the widely used MPICH implementation of MPI, which is developed by our group.<br /><br />Since MPICH is too large a piece of software to be verified in its entirety by a tool, we selected one particular kernel in MPICH that gets widely exercised in practice, namely the multiple-writer, single-reader receive queues in the Nemesis communication layer that is at the heart of MPICH. These queues are implemented in a lock-free manner using assembly-level operations, and the code is complex enough to need verification by a tool to ensure that there are no race conditions. Since our collaborators were also interested in developing tools to model the new concurrency features in the recently released C11/C++11 language standards, we translated the implementation of the lock-free queuing algorithm from using assembly operations to using the new C11 atomic operations and memory model constructs and provided this code to the Utah group for verification. This work has also led to a new collaboration between the Utah group and experts on C11 memory models from University College London and Cambridge University.<br /><br />We also collaborated with the Utah group on a tool that helps users to quickly detect the root cause of bugs in large-scale parallel codes. This tool, called CSTG, provides a new approach to collect and coalesce stack traces in MPI and threaded programs, leading to an efficient summary display of salient system control flow differences in a graphical form. CSTG has been released and is available as open-source software.<br /><br />We collaborated with colleagues at Universities of Utah, Delaware, and Nebraska on the development of an intermediate representation, called CIVL, for verification of programs written in multiple parallel programming languages/paradigms, such as MPI, OpenMP, OpenCL, CUDA, or combinations thereof. These programs can be translated to CIVL, and only the CIVL representation needs to be verified.<br /><br /></p><br> <p>            Last Modified: 08/18/2014<br>      Modified by: Rajeev&nbsp;S&nbsp;Thakur</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This was a collaborative project together with the University of Utah. The overall objective of this collaborative project was to develop tools and techniques for verification of large-scale parallel programs, particularly those that use multiple concurrency models (hybrid programming).  The role of the University of Utah group was to develop the formal verification techniques and tools based on them. The role of our group was to provide interesting test cases that could benefit from formal verification, such as parallel programs and algorithms as well as parts of the widely used MPICH implementation of MPI, which is developed by our group.  Since MPICH is too large a piece of software to be verified in its entirety by a tool, we selected one particular kernel in MPICH that gets widely exercised in practice, namely the multiple-writer, single-reader receive queues in the Nemesis communication layer that is at the heart of MPICH. These queues are implemented in a lock-free manner using assembly-level operations, and the code is complex enough to need verification by a tool to ensure that there are no race conditions. Since our collaborators were also interested in developing tools to model the new concurrency features in the recently released C11/C++11 language standards, we translated the implementation of the lock-free queuing algorithm from using assembly operations to using the new C11 atomic operations and memory model constructs and provided this code to the Utah group for verification. This work has also led to a new collaboration between the Utah group and experts on C11 memory models from University College London and Cambridge University.  We also collaborated with the Utah group on a tool that helps users to quickly detect the root cause of bugs in large-scale parallel codes. This tool, called CSTG, provides a new approach to collect and coalesce stack traces in MPI and threaded programs, leading to an efficient summary display of salient system control flow differences in a graphical form. CSTG has been released and is available as open-source software.  We collaborated with colleagues at Universities of Utah, Delaware, and Nebraska on the development of an intermediate representation, called CIVL, for verification of programs written in multiple parallel programming languages/paradigms, such as MPI, OpenMP, OpenCL, CUDA, or combinations thereof. These programs can be translated to CIVL, and only the CIVL representation needs to be verified.         Last Modified: 08/18/2014       Submitted by: Rajeev S Thakur]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
