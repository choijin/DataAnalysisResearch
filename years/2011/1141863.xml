<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: From Devlopment Tools to Secure Web Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>228175.00</AwardTotalIntnAmount>
<AwardAmount>260175</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Web Application Frameworks, such as Google Web Toolkit (GWT) and Rails are being widely used nowadays because of numerous advantages they offer their users.  A growing concern is whether such tools introduce security vulnerabilities during the translations they perform.  Translation validation is an approach that allows one to verify the correctness of a translation rather than that of a translator.  The input to translation validation is a source and target code (before and after translation), and the output is a set of verification conditions (VCs) that establish the semantic correctness of the translation.  The VCs are automatically generated and can be charged to independent theorem provers.  Translations validations had been successfully applied to optimizing compilers and to backward compatibility of microcode. &lt;br/&gt;&lt;br/&gt;The work is a preliminary feasibility study of applying translation validation to verifying that frameworks do not introduce security vulnerabilities. The focus is GWT's translations from Java into JavaScript.  The project's goal is to develop automatic tools that given a source and target code, as well as a suitably encoded list of security vulnerabilities, automatically generates VCs that, in aggregate, prove that the target does not have any of the security vulnerabilities from the list that do not exist in the source code. &lt;br/&gt;&lt;br/&gt;A successful completion of this feasibility study will allow for the development of methodologies and tools for automatic and formal proofs that frameworks do not introduce security vulnerabilities that will be of interest to web developers as well as to industry.</AbstractNarration>
<MinAmdLetterDate>08/17/2011</MinAmdLetterDate>
<MaxAmdLetterDate>05/30/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1141863</AwardID>
<Investigator>
<FirstName>Lenore</FirstName>
<LastName>Zuck</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Lenore D Zuck</PI_FULL_NAME>
<EmailAddress>lenore@cs.uic.edu</EmailAddress>
<PI_PHON>3123551339</PI_PHON>
<NSF_ID>000118794</NSF_ID>
<StartDate>08/17/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>V. N.</FirstName>
<LastName>Venkatakrishnan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>V. N. Venkatakrishnan</PI_FULL_NAME>
<EmailAddress>venkat@uic.edu</EmailAddress>
<PI_PHON>3129969406</PI_PHON>
<NSF_ID>000150699</NSF_ID>
<StartDate>08/17/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606124305</ZipCode>
<PhoneNumber>3129962862</PhoneNumber>
<StreetAddress>809 S. Marshfield Avenue</StreetAddress>
<StreetAddress2><![CDATA[MB 502, M/C 551]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>098987217</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606077053</ZipCode>
<StreetAddress><![CDATA[851 South Morgan St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1668</Code>
<Text>CYBERCORPS: SCHLAR FOR SER</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0412</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~228175</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<FUND_OBLG>2013~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our findings answer two questions. &nbsp;First, to what extent do existing, industrial-grade web development frameworks eliminate security vulnerabilities from web applications? &nbsp;The short answer is ``very little". &nbsp;Second, how can we either augment existing frameworks or design new frameworks to automatically eliminate security vulnerabilities? &nbsp;</p> <p><br />Existing Industrial Frameworks<br />We explored two different web development frameworks chosen because of their popularity and the general perception that they were designed to help developers build secure web applications: the Google Web Toolkit (GWT) and Ruby on Rails (RoR) . &nbsp; We discovered is that frameworks today usually automate simple tasks that have little impact on the security of the web application. &nbsp;They effectively save the developer (a sometimes significant amount of) typing but provide no help in terms of avoiding well-known security vulnerabilities on the web, &nbsp;e.g., SQL injection or cross-site scripting. &nbsp;In summary, GWT makes it easier for developers to build applications because it provides the illusion of a single programming language for the client and server. &nbsp;Arguably, GWT applications are more secure because developers can more quickly build their application and have more time and energy to harden it against well-known attacks, but the framework itself offers no help in ensuring applications are free from common web application vulnerabilities. &nbsp;</p> <p><br />RoR exemplifies the Model-View-Controller (MVC) approach to web application development. &nbsp;Models represent the application's data and protects that data against inconsistency. &nbsp;Roughly, the Models of a web application correspond to the tables in the back-end database. &nbsp;Views display the application's data in different ways and correspond to the web pages of an application. &nbsp;Controllers dictate how user requests change the Models (the database) and how those requests are responded to with Views (web pages).</p> <p><br />Unlike GWT, which endeavors to provide a single programming language for the entire application, RoR utilizes different languages for different components of the application. &nbsp;Models and Controllers are both written in Ruby, and Views are written in a number of languages: Ruby, HTML, CoffeeScript, JavaScript. &nbsp;And unlike GWT, which encourages the developer to think of the web application as a single Java program, RoR requires the developer to constantly think about the separation of the client and server as well as how they will be communicating. &nbsp;There is built-in support to simplify AJAX requests; however, the developer must insert that AJAX-specific code.</p> <p><br />RoR provides developers i a plethora of cookie-cutter solutions to common problems, an underlying programming language that encompasses some of the most tried and true ideas for dynamic programming languages from the past 50 years, and a rich library of web-specific algorithms. &nbsp;It is a framework designed specifically for web application development, has a vibrant ecosystem, and is open source. &nbsp;Rails applications are not innately secure; rather, Rails provides developers with a number of basic routines known to mitigate security attacks effectively. &nbsp;These routines must be applied appropriately and consistently or else security vulnerabilities will exist. &nbsp;In short, the RoR Security Guide &nbsp;provides a great deal of helpful and practical information about avoiding security vulnerabilities but leaves it to the developer to follow that advice.</p> <p>Having found that industrial frameworks provide few if any security guarantees, we decided to both extend an existing framework and create a new framework that by construction would eliminate common security vulnerabilities in web applications. &nbsp; In the first thrust of this project, we aimed to i...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Our findings answer two questions.  First, to what extent do existing, industrial-grade web development frameworks eliminate security vulnerabilities from web applications?  The short answer is ``very little".  Second, how can we either augment existing frameworks or design new frameworks to automatically eliminate security vulnerabilities?     Existing Industrial Frameworks We explored two different web development frameworks chosen because of their popularity and the general perception that they were designed to help developers build secure web applications: the Google Web Toolkit (GWT) and Ruby on Rails (RoR) .   We discovered is that frameworks today usually automate simple tasks that have little impact on the security of the web application.  They effectively save the developer (a sometimes significant amount of) typing but provide no help in terms of avoiding well-known security vulnerabilities on the web,  e.g., SQL injection or cross-site scripting.  In summary, GWT makes it easier for developers to build applications because it provides the illusion of a single programming language for the client and server.  Arguably, GWT applications are more secure because developers can more quickly build their application and have more time and energy to harden it against well-known attacks, but the framework itself offers no help in ensuring applications are free from common web application vulnerabilities.     RoR exemplifies the Model-View-Controller (MVC) approach to web application development.  Models represent the application's data and protects that data against inconsistency.  Roughly, the Models of a web application correspond to the tables in the back-end database.  Views display the application's data in different ways and correspond to the web pages of an application.  Controllers dictate how user requests change the Models (the database) and how those requests are responded to with Views (web pages).   Unlike GWT, which endeavors to provide a single programming language for the entire application, RoR utilizes different languages for different components of the application.  Models and Controllers are both written in Ruby, and Views are written in a number of languages: Ruby, HTML, CoffeeScript, JavaScript.  And unlike GWT, which encourages the developer to think of the web application as a single Java program, RoR requires the developer to constantly think about the separation of the client and server as well as how they will be communicating.  There is built-in support to simplify AJAX requests; however, the developer must insert that AJAX-specific code.   RoR provides developers i a plethora of cookie-cutter solutions to common problems, an underlying programming language that encompasses some of the most tried and true ideas for dynamic programming languages from the past 50 years, and a rich library of web-specific algorithms.  It is a framework designed specifically for web application development, has a vibrant ecosystem, and is open source.  Rails applications are not innately secure; rather, Rails provides developers with a number of basic routines known to mitigate security attacks effectively.  These routines must be applied appropriately and consistently or else security vulnerabilities will exist.  In short, the RoR Security Guide  provides a great deal of helpful and practical information about avoiding security vulnerabilities but leaves it to the developer to follow that advice.  Having found that industrial frameworks provide few if any security guarantees, we decided to both extend an existing framework and create a new framework that by construction would eliminate common security vulnerabilities in web applications.   In the first thrust of this project, we aimed to improve the security of the Ruby on Rails web development framework by adding mechanisms that would enable strong security guarantees for one particular class of vulnerabilities.  In the second thrust of the project, we designed and ...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
