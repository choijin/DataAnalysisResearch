<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SDCI Sec: New Software Platforms for Supporting Network-wide Detection of Code Injection Attacks</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>01/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>800000.00</AwardTotalIntnAmount>
<AwardAmount>1148611</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Robert Beverly</SignBlockName>
<PO_EMAI>rbeverly@nsf.gov</PO_EMAI>
<PO_PHON>7032927068</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In recent years, code-injection attacks have become one of the most&lt;br/&gt;common forms of attack on modern computer systems.  At a high level,&lt;br/&gt;code-injection attacks on network services (e.g. file sharing and&lt;br/&gt;webservers) and client-based programs (e.g., browsers and document&lt;br/&gt;viewers) enable redirection of the flow of execution in the vulnerable&lt;br/&gt;program to arbitrary code, called shellcode, which is provided as part&lt;br/&gt;of the attack. The injected code often enables unauthorized control of&lt;br/&gt;system resources, applications, and data. The key to detecting these&lt;br/&gt;attacks lies in accurately discovering the presence of the shellcode&lt;br/&gt;being injected into the vulnerable program.&lt;br/&gt;&lt;br/&gt;The intent of this research is to design, implement, and deploy a new&lt;br/&gt;framework, called ShellOS, that continuously analyzes network streams&lt;br/&gt;or program buffers to detect the presence of executable code that may&lt;br/&gt;be harmful.  The proposed approach addresses the shortcomings of&lt;br/&gt;current dynamic analysis techniques that use software-based CPU&lt;br/&gt;emulation for detecting shellcode. Unlike previous approaches, this approach takes&lt;br/&gt;advantage of hardware virtualization to allow for more efficient and&lt;br/&gt;accurate inspection of buffers by directly executing instruction&lt;br/&gt;sequences on the CPU. In doing so, this project enables more scalable&lt;br/&gt;techniques for protecting cyberinfrastructure against code injection&lt;br/&gt;attacks. Where possible, the project also plans to release anonymized forms of&lt;br/&gt;detected attacks. The availability of such data can play a significant&lt;br/&gt;role in fostering collaboration and ensuring U.S. technical leadership&lt;br/&gt;in network security research.  The tools created as part of this&lt;br/&gt;project will be made available to the broader research community under&lt;br/&gt;an open source license.</AbstractNarration>
<MinAmdLetterDate>07/25/2011</MinAmdLetterDate>
<MaxAmdLetterDate>05/27/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1127361</AwardID>
<Investigator>
<FirstName>Montek</FirstName>
<LastName>Singh</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Montek Singh</PI_FULL_NAME>
<EmailAddress>montek@cs.unc.edu</EmailAddress>
<PI_PHON>9195906132</PI_PHON>
<NSF_ID>000183775</NSF_ID>
<StartDate>07/25/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Fabian</FirstName>
<LastName>Monrose</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Fabian N Monrose</PI_FULL_NAME>
<EmailAddress>fabian@cs.unc.edu</EmailAddress>
<PI_PHON>9195906063</PI_PHON>
<NSF_ID>000482610</NSF_ID>
<StartDate>07/25/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Scott</FirstName>
<LastName>Coull</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Scott Coull</PI_FULL_NAME>
<EmailAddress>scott.coull@redjack.com</EmailAddress>
<PI_PHON>8603029249</PI_PHON>
<NSF_ID>000587159</NSF_ID>
<StartDate>07/25/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of North Carolina at Chapel Hill</Name>
<CityName>CHAPEL HILL</CityName>
<ZipCode>275991350</ZipCode>
<PhoneNumber>9199663411</PhoneNumber>
<StreetAddress>104 AIRPORT DR STE 2200</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>608195277</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of North Carolina at Chapel Hill]]></Name>
<CityName>Chapel Hill</CityName>
<StateCode>NC</StateCode>
<ZipCode>275993175</ZipCode>
<StreetAddress><![CDATA[Dept of CS, CB 3175, Brooks Bld]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8027</Code>
<Text>Cybersecurity Innovation</Text>
</ProgramElement>
<ProgramElement>
<Code>N618</Code>
<Text/>
</ProgramElement>
<ProgramElement>
<Code>O232</Code>
<Text/>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~800000</FUND_OBLG>
<FUND_OBLG>2014~46119</FUND_OBLG>
<FUND_OBLG>2015~302492</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goals of this project were to design, implement, and deploy techniques for detecting code injection and code reuse attacks. &nbsp;At a high level, such attacks on network services (e.g., file sharing, webserver) and client-based programs (e.g., a browser, a document viewer) enable redirection of the flow of execution in the vulnerable program to arbitrary code that often enables unauthorized control of system resources, applications, and data. &nbsp;One prominent and contemporary example of such an attack is the use of popular, cross-platform document formats, to help compromise a wide variety of systems. &nbsp;These infected files are often spread via targeted e-mails and so-called drive-by downloads from malicious websites, where the infected files are executed without the user's knowledge. &nbsp;The key to detecting these attacks lies in accurately discovering the presence of the malicious payloads that lurks within.<br /><br />To that end, we leveraged hardware virtualization to enable efficientand accurate inspection of buffers (be that application memory contents or payloads of network packets) by directly executing instruction sequences on the CPU. Our framework and its associated components allowed security analysts to detect and analyze attacks at a scale and level of detail that was not possible with other tools and techniques. &nbsp;Our techniques were evaluated on a large campus network environment, and the outcomes were routinely used to improve the security posture of the network. In 2015, the research under this award was successfully moved out of the lab as part of the Department of Homeland Security (DHS) Science and Technology Directorate&rsquo;s (S&amp;T) Homeland Security Advanced Research Projects Agency transition to practice (TTP) program. Each year, the TTP program selects promising cybersecurity technologies developed with federal funding to incorporate into the 36-month transition-to-market program.</p><br> <p>            Last Modified: 05/10/2017<br>      Modified by: Fabian&nbsp;N&nbsp;Monrose</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goals of this project were to design, implement, and deploy techniques for detecting code injection and code reuse attacks.  At a high level, such attacks on network services (e.g., file sharing, webserver) and client-based programs (e.g., a browser, a document viewer) enable redirection of the flow of execution in the vulnerable program to arbitrary code that often enables unauthorized control of system resources, applications, and data.  One prominent and contemporary example of such an attack is the use of popular, cross-platform document formats, to help compromise a wide variety of systems.  These infected files are often spread via targeted e-mails and so-called drive-by downloads from malicious websites, where the infected files are executed without the user's knowledge.  The key to detecting these attacks lies in accurately discovering the presence of the malicious payloads that lurks within.  To that end, we leveraged hardware virtualization to enable efficientand accurate inspection of buffers (be that application memory contents or payloads of network packets) by directly executing instruction sequences on the CPU. Our framework and its associated components allowed security analysts to detect and analyze attacks at a scale and level of detail that was not possible with other tools and techniques.  Our techniques were evaluated on a large campus network environment, and the outcomes were routinely used to improve the security posture of the network. In 2015, the research under this award was successfully moved out of the lab as part of the Department of Homeland Security (DHS) Science and Technology Directorate?s (S&amp;T) Homeland Security Advanced Research Projects Agency transition to practice (TTP) program. Each year, the TTP program selects promising cybersecurity technologies developed with federal funding to incorporate into the 36-month transition-to-market program.       Last Modified: 05/10/2017       Submitted by: Fabian N Monrose]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
