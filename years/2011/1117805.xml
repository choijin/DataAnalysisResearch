<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: LOOM: a Language and System for Bypassing and Diagnosing Concurrency Errors</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>266000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anita La Salle</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This project addresses programming challenges posed by the new trend in multicore computing.&lt;br/&gt;&lt;br/&gt;Multithreaded programs are difficult to write, test, and debug. They often contain numerous insidious concurrency errors, including data races, atomicity violations, and order violations, which we broadly define to be races. A good deal of prior research has focused on race detection.  However, little progress has been made to help developers fix races because existing systems for fixing races work only with a small, fixed set of race patterns and, for the most part, do not work with simple order violations, a common type of concurrency errors.&lt;br/&gt;&lt;br/&gt;The research objective of this project, LOOM: a Language and System for Bypassing and Diagnosing Concurrency Errors, is to create effective systems and technologies to help developers fix races.  A preliminary study revealed a key challenge yet to be addressed on fixing races that is, how to help developers immediately protect deployed programs from known races.  Even with the correct diagnosis of a race, fixing this race in a deployed program is complicated and time consuming. This delay leaves large vulnerability windows potentially compromising reliability and security.&lt;br/&gt;&lt;br/&gt;To address these challenges, the LOOM project is creating an intuitive, expressive synchronization language and a system called LOOM for bypassing races in live programs.  The language enables developers to write declarative, succinct execution filters to describe their synchronization intents on code.  To fix races, LOOM installs these filters in live programs for immediate protection against races, until a software update is available and the program can be restarted.&lt;br/&gt;&lt;br/&gt;The greatest impact of this project will be a new, effective language and system and novel technologies to improve the reliability of multithreaded program, benefiting business, government, and individuals.</AbstractNarration>
<MinAmdLetterDate>08/19/2011</MinAmdLetterDate>
<MaxAmdLetterDate>05/31/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1117805</AwardID>
<Investigator>
<FirstName>Junfeng</FirstName>
<LastName>Yang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Junfeng Yang</PI_FULL_NAME>
<EmailAddress>junfeng@cs.columbia.edu</EmailAddress>
<PI_PHON>2128546851</PI_PHON>
<NSF_ID>000509381</NSF_ID>
<StartDate>08/19/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049179401</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049179401</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName>NEW YORK</CityName>
<StateCode>NY</StateCode>
<ZipCode>100276902</ZipCode>
<StreetAddress><![CDATA[2960 Broadway]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~250000</FUND_OBLG>
<FUND_OBLG>2013~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Two trends make multithreaded programs increasingly critical. The first is a hardware trend:&nbsp;the rise of multicore. For years, single-threaded code enjoyed automatic speedup as computer&nbsp;architects steadilymade single-coremultiprocessors faster. Recently, however, this &ldquo;free lunch is over&rdquo;:&nbsp;power and wire-delay constraints have forced microprocessors into multicore designs, and adding&nbsp;more cores does not automatically speed up single-threaded code.</p> <p>The second is a software trend: the coming storm of cloud computing. More and more users get&nbsp;online, requesting ever richer and more powerful &mdash;and thus computation intensive&mdash; services. This massive&nbsp;computation is increasingly shifted from the &ldquo;wimpy,&rdquo; battery-backed devices into the servers in the&nbsp;cloud. An extreme example is Google&rsquo;s Chrome OS, which provides only a web-browser interface to&nbsp;users and outsources almost all computation to the cloud. To cope with this massive computation, virtually&nbsp;all services today employ threads to increase performance, and likely they will in the foreseeable future.</p> <p>Unfortunately, despite our increasing reliance on multithreaded programs, they remain difficult&nbsp;to write, test, and debug, much more difficult than sequential programs. This difficulty leads&nbsp;to numerous insidious concurrency errors in many widespread multithreaded programs. These&nbsp;errors include data races, atomicity violations, and order violations, which we broadly define to be&nbsp;races. These races may cause &ldquo;mere&rdquo; application crashes, or worse, silent data corruptions, or even worse,&nbsp;deaths and the Northeast blackout in 2003. Multithreaded programs are the most widespread parallel&nbsp;programs, yetmany luminaries in computing consider parallel programming one of the top challenges&nbsp;facing computer science. Quoting John Hennessy: &ldquo;when we start talking about parallelism and ease of&nbsp;use of truly parallel computers, we&rsquo;re talking about a problem that&rsquo;s as hard as any that computer science has faced.&rdquo;&nbsp;</p> <p>To improve the reliability of multithreaded programs, a plethora of prior research has focused on race&nbsp;detection. However, detection of a race is only half of the battle. Developers&nbsp;must still diagnose the race reports to distill harmful races from false or benign ones. Moreover, developers&nbsp;must still fix the races.</p> <p>When it comes to race fix and diagnosis, developers are the bona fide solution. Unfortunately, little has&nbsp;been done to help developers fix and diagnose races. Existing race fix and diagnosis systems&nbsp;aim for full automation, an extremely challenging problem. To simplify the problem, existing systems&nbsp;unsurprisingly have to restrict themselves to a small, fixed set of race patterns, which cannot be extended&nbsp;by the rich domain knowledge of developers. Perhaps the most &ldquo;outrageous&rdquo; example is that, these tools&nbsp;do not work with order violations as simple as &ldquo;statement e1 must happen before statement e2 but the&nbsp;code fails to enforce so,&rdquo; because we do not yet have good automated detectors for these order violations.</p> <p>The research objective of this proposal is to&nbsp;<strong>create effective systems and technologies to help developers fix and&nbsp;</strong><strong>diagnose races</strong>. In our preliminary work, we have studied the fix and&nbsp;diagnosis process of real races and identified two key challenges yet to&nbsp;be addressed. First, how to help developers immediately protect&nbsp;<strong>deployed</strong>&nbsp;programs from known races? Even with the correct&nbsp;diagnosis of a race, fixing this race in a deployed program can still take&nbsp;long. This delay leaves large vulnerability windows, compromising reliability&nbsp;and potentially security. Second...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Two trends make multithreaded programs increasingly critical. The first is a hardware trend: the rise of multicore. For years, single-threaded code enjoyed automatic speedup as computer architects steadilymade single-coremultiprocessors faster. Recently, however, this "free lunch is over": power and wire-delay constraints have forced microprocessors into multicore designs, and adding more cores does not automatically speed up single-threaded code.  The second is a software trend: the coming storm of cloud computing. More and more users get online, requesting ever richer and more powerful &mdash;and thus computation intensive&mdash; services. This massive computation is increasingly shifted from the "wimpy," battery-backed devices into the servers in the cloud. An extreme example is GoogleÆs Chrome OS, which provides only a web-browser interface to users and outsources almost all computation to the cloud. To cope with this massive computation, virtually all services today employ threads to increase performance, and likely they will in the foreseeable future.  Unfortunately, despite our increasing reliance on multithreaded programs, they remain difficult to write, test, and debug, much more difficult than sequential programs. This difficulty leads to numerous insidious concurrency errors in many widespread multithreaded programs. These errors include data races, atomicity violations, and order violations, which we broadly define to be races. These races may cause "mere" application crashes, or worse, silent data corruptions, or even worse, deaths and the Northeast blackout in 2003. Multithreaded programs are the most widespread parallel programs, yetmany luminaries in computing consider parallel programming one of the top challenges facing computer science. Quoting John Hennessy: "when we start talking about parallelism and ease of use of truly parallel computers, weÆre talking about a problem thatÆs as hard as any that computer science has faced."   To improve the reliability of multithreaded programs, a plethora of prior research has focused on race detection. However, detection of a race is only half of the battle. Developers must still diagnose the race reports to distill harmful races from false or benign ones. Moreover, developers must still fix the races.  When it comes to race fix and diagnosis, developers are the bona fide solution. Unfortunately, little has been done to help developers fix and diagnose races. Existing race fix and diagnosis systems aim for full automation, an extremely challenging problem. To simplify the problem, existing systems unsurprisingly have to restrict themselves to a small, fixed set of race patterns, which cannot be extended by the rich domain knowledge of developers. Perhaps the most "outrageous" example is that, these tools do not work with order violations as simple as "statement e1 must happen before statement e2 but the code fails to enforce so," because we do not yet have good automated detectors for these order violations.  The research objective of this proposal is to create effective systems and technologies to help developers fix and diagnose races. In our preliminary work, we have studied the fix and diagnosis process of real races and identified two key challenges yet to be addressed. First, how to help developers immediately protect deployed programs from known races? Even with the correct diagnosis of a race, fixing this race in a deployed program can still take long. This delay leaves large vulnerability windows, compromising reliability and potentially security. Second, how to help developers create the thread interleavings they want to test? When diagnosing a race or validating a "race fix," developers often knows what thread interleavings may trigger the race. Unfortunately, they have no effective ways of forcing these interleavings, and often resort to strenuous, slow, and error-prone manual methods.  To fully achieve our goal, we have gone from "soup to nuts" in buildin...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
