<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Statistical Memory Monitoring in Hardware for Security and Performance</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/15/2011</AwardEffectiveDate>
<AwardExpirationDate>06/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>420000.00</AwardTotalIntnAmount>
<AwardAmount>420000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project applies statistical sampling techniques to detect deviation from normal or desired behavior for a variety of applications, ranging from security problems such as phase-change memory (PCM) wear leveling and intrusion detection to performance problems such as multicore communication, data migration, and locality optimizations. Existing performance monitoring and measurement techniques are insuf&amp;#64257;cient for our applications for a variety of reasons. Many depend upon the OS which (1) may be compromised and hence be unsuitable for security-related monitoring, and (2) tracks data at page granularity whereas memory hierarchy performance often needs monitoring at the block granularity.  To avoid these limitations, this project designs a monitoring architecture for statistically sampling memory access patterns. Brute-force monitoring would require large, frequently-searched hardware structures that increase complexity and power, whereas sampling enables much smaller structures that are searched at low rates, incurring far less overhead. In general, sampling loses accuracy or requires a large number of samples (and large hardware structures) if the monitored behavior exhibits high standard deviation. Our key insight is that we can bound the standard deviation of the behavior within the region of interest to the application, thereby allowing accurate and low-overhead sampling. Our key intellectual merit is to show that statistical sampling and performance monitoring can unify the aims of disparate applications and enable monitoring with high accuracy and low overhead. The broader impacts include paving the way for robust statistics-based performance monitoring in future computer systems and for research and education efforts that combine statistics and computer architecture.</AbstractNarration>
<MinAmdLetterDate>07/13/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/13/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1117726</AwardID>
<Investigator>
<FirstName>T.</FirstName>
<LastName>Vijaykumar</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>T. N Vijaykumar</PI_FULL_NAME>
<EmailAddress>vijay@ecn.purdue.edu</EmailAddress>
<PI_PHON>7654940592</PI_PHON>
<NSF_ID>000337724</NSF_ID>
<StartDate>07/13/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Vijay</FirstName>
<LastName>Pai</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Vijay S Pai</PI_FULL_NAME>
<EmailAddress>vpai@purdue.edu</EmailAddress>
<PI_PHON>7654966610</PI_PHON>
<NSF_ID>000184842</NSF_ID>
<StartDate>07/13/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[Young Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~420000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project targets applying sound statistical techniques, as opposed to ad hoc heuristics, to computer system performance and security. To this end, we &nbsp;have proposed several novel schemes: (1)&nbsp;<span>For Phase Change Memory wear leveling, &nbsp;which can be a security issue due to malicious wear inducement, we have proposed a statistically-sound wear leveling scheme. Our approach, called statistical wear leveling (SWL), which randomizes address-to-frame mapping on the basis of the estimated overwrite rates instead of write rates. SWL achieves both lower common-case write overhead and lower hardware overhead, and similar,&nbsp; high common-case lifetime as compared to the previous schemes while achieving reasonable worst-case lifetime. &nbsp;<span>Previous work, called Security Refresh, incurs either high write overhead of 50% or more in the common case (single level), or high hardware overhead of a set of logic for every 2 MB (two level) while achieving about 25 months of worst-case lifetime. In contrast, SWL achieves low write overhead of less than 0.15%, and similar, high lifetime of thousands of years in the common case; SWL trades off higher write overhead of 400% and lower yet reasonable lifetime of more than 6 months in the worst case to achieve low hardware overhead of a set of logic and a 13-entry sampling buffer for every 2 GB. &nbsp;</span></span>(2) We have applied statistical techniques (such as segmented regression) to model the performance of disks and created a tool called DiskMod. DiskMod integrates with the SimICS architectural simulation platform with little cost or configuration complexity and is able to provide performance estimates comparable to, and often better than, more detailed physical-level models that have been proposed previously. (3) Our new strategies for shared-cache partitioning in multithreaded applications yields substantial benefits in performance improvements for applications that otherwise use cache inefficiently. The main reason for this inefficiency is that all of their threads are simultaneously in "flat regions" of the reuse distance curve, where any small increase or reduction in way allocation will have no significant impact on cache misses. Even though these applications are balanced among threads, a better strategy is to temporally imbalance the partitioning among threads so that one thread pushes beyond the next reuse distance knee while the others are not affected much. Fairness is maintained by preferring threads in round-robin order. (4)&nbsp;We have also used queuing theory for multicore power saving.Lowering core clock frequency reduces power allowing more cores to be active (i.e., higher throughput) for a given total power budget. However, single-thread performance worsens due to lower frequency. To address this issue, we employ queuing theory to show that the higher throughput reduces queuing delays and offsets the slower clock speed to maintain single-thread performance. (5) &nbsp;We have&nbsp;applied statistical sampling techniques to reduce communication and data movement by approximating in &nbsp;MapReduce without missing rare keys. Many MapReduce problems lend themselves to approximation (e.g., averaging, ranking, other statistics). Previous work on approximation in MapReduce can miss keys, which can cause unbounded error. We employ a novel distributed, stratified, online sampling to avoid rare keys. &nbsp;Previous database work has done stratified offline sampling, but such offline step &nbsp;means that the entire tuple space must be read to construct the samples prior to performing the computation. In MapReduce problems, which are often concerned with large-scale analytics of a data set rather than repeated queries over the same data, the cost of constructing the samples offline cannot be amortized, so these approaches are not appropriate. We have devised a novel telescoping algorithm for suc...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project targets applying sound statistical techniques, as opposed to ad hoc heuristics, to computer system performance and security. To this end, we  have proposed several novel schemes: (1) For Phase Change Memory wear leveling,  which can be a security issue due to malicious wear inducement, we have proposed a statistically-sound wear leveling scheme. Our approach, called statistical wear leveling (SWL), which randomizes address-to-frame mapping on the basis of the estimated overwrite rates instead of write rates. SWL achieves both lower common-case write overhead and lower hardware overhead, and similar,  high common-case lifetime as compared to the previous schemes while achieving reasonable worst-case lifetime.  Previous work, called Security Refresh, incurs either high write overhead of 50% or more in the common case (single level), or high hardware overhead of a set of logic for every 2 MB (two level) while achieving about 25 months of worst-case lifetime. In contrast, SWL achieves low write overhead of less than 0.15%, and similar, high lifetime of thousands of years in the common case; SWL trades off higher write overhead of 400% and lower yet reasonable lifetime of more than 6 months in the worst case to achieve low hardware overhead of a set of logic and a 13-entry sampling buffer for every 2 GB.  (2) We have applied statistical techniques (such as segmented regression) to model the performance of disks and created a tool called DiskMod. DiskMod integrates with the SimICS architectural simulation platform with little cost or configuration complexity and is able to provide performance estimates comparable to, and often better than, more detailed physical-level models that have been proposed previously. (3) Our new strategies for shared-cache partitioning in multithreaded applications yields substantial benefits in performance improvements for applications that otherwise use cache inefficiently. The main reason for this inefficiency is that all of their threads are simultaneously in "flat regions" of the reuse distance curve, where any small increase or reduction in way allocation will have no significant impact on cache misses. Even though these applications are balanced among threads, a better strategy is to temporally imbalance the partitioning among threads so that one thread pushes beyond the next reuse distance knee while the others are not affected much. Fairness is maintained by preferring threads in round-robin order. (4) We have also used queuing theory for multicore power saving.Lowering core clock frequency reduces power allowing more cores to be active (i.e., higher throughput) for a given total power budget. However, single-thread performance worsens due to lower frequency. To address this issue, we employ queuing theory to show that the higher throughput reduces queuing delays and offsets the slower clock speed to maintain single-thread performance. (5)  We have applied statistical sampling techniques to reduce communication and data movement by approximating in  MapReduce without missing rare keys. Many MapReduce problems lend themselves to approximation (e.g., averaging, ranking, other statistics). Previous work on approximation in MapReduce can miss keys, which can cause unbounded error. We employ a novel distributed, stratified, online sampling to avoid rare keys.  Previous database work has done stratified offline sampling, but such offline step  means that the entire tuple space must be read to construct the samples prior to performing the computation. In MapReduce problems, which are often concerned with large-scale analytics of a data set rather than repeated queries over the same data, the cost of constructing the samples offline cannot be amortized, so these approaches are not appropriate. We have devised a novel telescoping algorithm for such sampling. Our approach achieves 50% better performance than the baseline MapReduce (without approximation) without missing rare keys and with erro...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
