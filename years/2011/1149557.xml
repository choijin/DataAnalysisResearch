<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:An Introspective Architecture for Manycore Performance and Power Debugging</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/15/2012</AwardEffectiveDate>
<AwardExpirationDate>02/28/2018</AwardExpirationDate>
<AwardTotalIntnAmount>400157.00</AwardTotalIntnAmount>
<AwardAmount>400157</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Yuanyuan Yang</SignBlockName>
<PO_EMAI>yyang@nsf.gov</PO_EMAI>
<PO_PHON>7032928067</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Rapid advances in transistor technology combined with innovations in computer architecture have led to manycore processors, which can deliver significantly higher software performance. Getting scalable performance (for example, eight times speedup in program execution time on an eight-core processor) is a challenging task even for experienced software developers. This is because parallel programs can suffer from performance problems that either do not exist in sequential applications or that are aggravated by parallel execution. Also, power consumption of manycore applications is a crucial factor limiting their widespread adoption. Unfortunately, analyzing manycore applications for performance and power using just software tools presents challenges due to programs written in multiple languages and source files, libraries in binary-only form, and so on.  An efficient hardware-software framework, that can offer insight into performance and power profiles of software execution and subsequently facilitate remediation mechanisms to overcome the observed program bottlenecks, would be a valuable step toward realizing the promise of manycore computing. &lt;br/&gt;&lt;br/&gt;This research project explores a transformative hardware-software cooperative solution, where the software receives an introspective look into the hardware behavior and dynamically deploys remediation mechanisms to boost performance and lower the power consumption in manycore applications. This hardware-software approach is drastically different from the conventional hardware-level optimization techniques that can no longer automatically guarantee performance scalability, given the increasing diversity and complexity of manycore applications. The outcomes of this project can be used both in software development and education to more precisely understand the manycore application behavior. On a broader level, this introspective framework can boost programmer productivity by offering fast and more accurate feedback about the program execution, and effectively improving the software development cycle.</AbstractNarration>
<MinAmdLetterDate>03/07/2012</MinAmdLetterDate>
<MaxAmdLetterDate>03/10/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1149557</AwardID>
<Investigator>
<FirstName>Guru Prasadh</FirstName>
<LastName>Venkataramani</LastName>
<PI_MID_INIT>V</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Guru Prasadh V Venkataramani</PI_FULL_NAME>
<EmailAddress>guruv@gwu.edu</EmailAddress>
<PI_PHON>2029942980</PI_PHON>
<NSF_ID>000580837</NSF_ID>
<StartDate>03/07/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>George Washington University</Name>
<CityName>Washington</CityName>
<ZipCode>200520086</ZipCode>
<PhoneNumber>2029940728</PhoneNumber>
<StreetAddress>1922 F Street NW</StreetAddress>
<StreetAddress2><![CDATA[4th Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>District of Columbia</StateName>
<StateCode>DC</StateCode>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>DC00</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>043990498</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGE WASHINGTON UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>043990498</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[George Washington University]]></Name>
<CityName>Washington</CityName>
<StateCode>DC</StateCode>
<ZipCode>200520058</ZipCode>
<StreetAddress><![CDATA[801 22nd St NW Suite 607]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>District of Columbia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>DC00</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~76678</FUND_OBLG>
<FUND_OBLG>2013~78289</FUND_OBLG>
<FUND_OBLG>2014~79964</FUND_OBLG>
<FUND_OBLG>2015~81707</FUND_OBLG>
<FUND_OBLG>2016~83519</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Realizing the full potential of many-core based computer architectures has challenges arising from complex microarchitectures, memory hierarchy, core heterogeneity and so on. Such factors limit software-only or hardware-only mechanisms from delivering any clear insight into the application runtime behavior. Therefore, a solution that would permeate hardware-software space is necessary to effectively understand the manycore application behavior.</p> <p>&nbsp;</p> <p>To summarily address the performance and power debugging issues arising from manycore hardware and the associated software, there is need for a feedback-driven architecture that offers introspection into the processing cores, help software stack learn of the bottlenecks on-the-fly, and adjust the system depending on the runtime environment. Such an introspective architecture could also significantly reduce programmers&rsquo; efforts and nurture easier code portability across systems.</p> <p>&nbsp;</p> <p>Simultaneously, proper protection (security) techniques are a natural requirement to any hardware investment. Security flaws can work against the vast benefits that the introspective architecture has to offer. Therefore, it is necessary to understand the security implications of manycore hardware.</p> <p>&nbsp;</p> <p>In this project, the PI (Guru Prasadh Venkataramani) has addressed the three central aspects that make the multicore and manycore hardware user-friendly, namely performance, power and security. The introspective architecture design in this project incorporates hardware components to facilitate these three goals and improve the usability of manycore hardware.</p> <p>&nbsp;</p> <p>As a first step, the PI began to investigate how to design features that helps programmers and users harness the performance potential of manycore hardware. The PI&rsquo;s research team proposed a programmer-centric definition of false sharing cache misses (that are unique to multicore hardware and are simply an artifact of a cache line sharing multiple data items), and explored the hardware design space for low-cost and efficient detection of such cache misses.</p> <p>&nbsp;</p> <p>For second step, the PI and his research group began to extensively study the need to understand and balance power between individual cores in multicore environment. The project produced Watts-inside, a hardware-software cooperative framework that pinpoints the highest power consuming regions of program code with hardware support and through use of causation probability principles. This facilitates the programmer to easily address the power consumption of applications through rewriting his/her code. The research subsequently proposed enDebug, an automated energy debugging framework that utilizes artificial selection genetic programming to generate energy optimizing program mutants while preserving functional accuracy. This helps reduce the programmer efforts in rewriting his/her code for better energy efficiency.</p> <p>&nbsp;</p> <p>In order to understand energy optimization in large-scale computer systems such as server farms, the PI&rsquo;s research group investigated the use of low power states and frequency scaling (that are already supported by processor microarchitecture), and proposed algorithms to intelligently orchestrate them to further boost energy savings, especially during phases of low server utilization.</p> <p>&nbsp;</p> <p>As a third step, the PI has investigated the security aspects of multicore and manycore hardware. Information leakage is a fast growing concern among computer users exacerbated by the presence of shared processor hardware resources. The PI&rsquo;s research team identified and studied a new vulnerability exposed by an oft-used performance feature, namely cache coherence protocols. The study highlighted how an adversary could cleverly manipulate the shared cache blocks between two applications and force them to be in specific cache coherence states. This setup is exploited to illegitimately communicate sensitive user information to spy processes. The PI&rsquo;s group has proposed CC-Hunter, a novel micro-architectural framework to detect the presence of timing channels on shared processor hardware such as functional units and caches.</p> <p>&nbsp;</p> <p>The PI has integrated this research with educational initiatives by engaging students at George Washington University in this research. Also, the research outcomes of this project were integrated into the GWU undergraduate and graduate courses on computer architecture in the form of course projects, readings and lectures. The PI has also improved the course structure in undergraduate-level computer organization and graduate-level computer architecture courses by infusing more content on concepts relating to power, energy and computer security.</p><br> <p>            Last Modified: 04/23/2018<br>      Modified by: Guru Prasadh&nbsp;V&nbsp;Venkataramani</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Realizing the full potential of many-core based computer architectures has challenges arising from complex microarchitectures, memory hierarchy, core heterogeneity and so on. Such factors limit software-only or hardware-only mechanisms from delivering any clear insight into the application runtime behavior. Therefore, a solution that would permeate hardware-software space is necessary to effectively understand the manycore application behavior.     To summarily address the performance and power debugging issues arising from manycore hardware and the associated software, there is need for a feedback-driven architecture that offers introspection into the processing cores, help software stack learn of the bottlenecks on-the-fly, and adjust the system depending on the runtime environment. Such an introspective architecture could also significantly reduce programmers? efforts and nurture easier code portability across systems.     Simultaneously, proper protection (security) techniques are a natural requirement to any hardware investment. Security flaws can work against the vast benefits that the introspective architecture has to offer. Therefore, it is necessary to understand the security implications of manycore hardware.     In this project, the PI (Guru Prasadh Venkataramani) has addressed the three central aspects that make the multicore and manycore hardware user-friendly, namely performance, power and security. The introspective architecture design in this project incorporates hardware components to facilitate these three goals and improve the usability of manycore hardware.     As a first step, the PI began to investigate how to design features that helps programmers and users harness the performance potential of manycore hardware. The PI?s research team proposed a programmer-centric definition of false sharing cache misses (that are unique to multicore hardware and are simply an artifact of a cache line sharing multiple data items), and explored the hardware design space for low-cost and efficient detection of such cache misses.     For second step, the PI and his research group began to extensively study the need to understand and balance power between individual cores in multicore environment. The project produced Watts-inside, a hardware-software cooperative framework that pinpoints the highest power consuming regions of program code with hardware support and through use of causation probability principles. This facilitates the programmer to easily address the power consumption of applications through rewriting his/her code. The research subsequently proposed enDebug, an automated energy debugging framework that utilizes artificial selection genetic programming to generate energy optimizing program mutants while preserving functional accuracy. This helps reduce the programmer efforts in rewriting his/her code for better energy efficiency.     In order to understand energy optimization in large-scale computer systems such as server farms, the PI?s research group investigated the use of low power states and frequency scaling (that are already supported by processor microarchitecture), and proposed algorithms to intelligently orchestrate them to further boost energy savings, especially during phases of low server utilization.     As a third step, the PI has investigated the security aspects of multicore and manycore hardware. Information leakage is a fast growing concern among computer users exacerbated by the presence of shared processor hardware resources. The PI?s research team identified and studied a new vulnerability exposed by an oft-used performance feature, namely cache coherence protocols. The study highlighted how an adversary could cleverly manipulate the shared cache blocks between two applications and force them to be in specific cache coherence states. This setup is exploited to illegitimately communicate sensitive user information to spy processes. The PI?s group has proposed CC-Hunter, a novel micro-architectural framework to detect the presence of timing channels on shared processor hardware such as functional units and caches.     The PI has integrated this research with educational initiatives by engaging students at George Washington University in this research. Also, the research outcomes of this project were integrated into the GWU undergraduate and graduate courses on computer architecture in the form of course projects, readings and lectures. The PI has also improved the course structure in undergraduate-level computer organization and graduate-level computer architecture courses by infusing more content on concepts relating to power, energy and computer security.       Last Modified: 04/23/2018       Submitted by: Guru Prasadh V Venkataramani]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
