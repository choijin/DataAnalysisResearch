<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Small: Parallel Similarity Comparison and Duplicate Detection with Incremental Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>499732.00</AwardTotalIntnAmount>
<AwardAmount>515732</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Maria Zemankova</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>All-pairs similarity comparison is one of the core algorithms in many data-intensive mining and search applications such as near duplicate detection among  web pages, spam detection, advertisement click analysis,  similar news/fresh content grouping, and  recommendation for  similar product purchases and search queries. Conducting similarity search on large datasets is time consuming  and becomes more challenging when data are being updated continuously. It is important to develop high performance algorithms and software to meet the increasing speed demands in many consumer and business applications using similarity computation. &lt;br/&gt;&lt;br/&gt;This project studies efficient and cost-effective parallel algorithms when data are being updated periodically or dynamically. Techniques for partitioning data and balancing computation on a cluster of machines are developed to optimize input/output operations, communication, and computing resource usage. As data are often updated continuously, leveraging previously computed results to handle updated data can eliminate a large amount of unnecessary operations and speedup the entire computation process by an order of magnitude. The project develops efficient software on a cluster of machines. The project starts with incremental duplicate detection for web data analysis and search, and continues to work on similarity comparison in several other applications. Performance of developed software is evaluated in those applications.&lt;br/&gt;&lt;br/&gt;This research has the potential to develop fully-optimized solutions with significantly reduced cost and increased speed for a variety of big data applications that perform similarity analysis. Developed software will be made available for application developers or data engineers to conduct large-scale computation without involving the complexity of managing parallelism. The project web site (http://www.cs.ucsb.edu/projects/psc/) is used for dissemination of results. The educational plan contains research mentoring, undergraduate and graduate instruction improvement, and outreach activities such as working with high school students.</AbstractNarration>
<MinAmdLetterDate>08/18/2011</MinAmdLetterDate>
<MaxAmdLetterDate>03/20/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1118106</AwardID>
<Investigator>
<FirstName>Tao</FirstName>
<LastName>Yang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tao Yang</PI_FULL_NAME>
<EmailAddress>tyang@cs.ucsb.edu</EmailAddress>
<PI_PHON>8057055606</PI_PHON>
<NSF_ID>000202471</NSF_ID>
<StartDate>08/18/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Barbara</Name>
<CityName>Santa Barbara</CityName>
<ZipCode>931062050</ZipCode>
<PhoneNumber>8058934188</PhoneNumber>
<StreetAddress>Office of Research</StreetAddress>
<StreetAddress2><![CDATA[Rm 3227 Cheadle Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA24</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>094878394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SANTA BARBARA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Santa Barbara]]></Name>
<CityName>Santa Barbara</CityName>
<StateCode>CA</StateCode>
<ZipCode>931062050</ZipCode>
<StreetAddress><![CDATA[Office of Research]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA24</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~499732</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project investigates efficient parallel algorithms and distributed&nbsp;system support for similarity-based data-intensive computing. It starts with near duplicate &nbsp;detection for web data analysis and search, and continues to work on similarity computing in several applications and develop efficient parallel software on a cluster of machines.&nbsp;</p> <p>One of key problems studied is &nbsp;time-consuming all-pairs similarity search used in many web search and data mining applications, and this project has developed &nbsp;a scalable two-stage parallel method called Partition-based Similarity Search. The first stage is to partition the dataset and group potentially similar vectors. The second stage is to run a set of parallel tasks where each task compares a partition of vectors with other candidate partitions. Static partitioning is employed to detect unnecessary comparisons and accomplish &nbsp;early elimination of useless I/O and data communication. Because of data sparsity, accessing irregular feature vectors residing in memory hierarchy during runtime partition comparison incurs significant overhead. The proposed technique optimizes data traversal with a cache-conscious layout to reduce the execution time through size-controlled data splitting and vector coalescing, and provides an analysis to guide the optimal choice for parameter setting. The evaluation results show that the proposed approach leads to one or two orders of magnitude of performance improvement. &nbsp;This project has further considered incremental similarity computing, approximation with locality-sensitive hashing, &nbsp;and &nbsp;mitigating load imbalance &nbsp;among parallel machines caused by the variation in partition sizes and irregular dissimilarity relationship in a large dataset. &nbsp;&nbsp;This project has developed a two-step load balancing algorithm &nbsp;for similarity search and analyzed the optimality and competitiveness of the proposed algorithm.</p> <p>The second problem studied is incremental near duplicate detection for web search engines and other data intensive applications. An offline approach to remove redundant content can be important for reducing the engine&rsquo;s cost, but it is challenging to &nbsp;scale such an approach for a large data set which is updated continuously. This project develops &nbsp;a scalable approach with parallel clustering that detects and removes near duplicates incrementally when processing billions of web pages. The parallel clustering scheme is supported by a two-tier architecture for detecting and managing near duplicate groups with incremental computing and multidimensional data mapping. The evaluation shows that removing redundant content in an offline system significantly reduces the overall engine cost while sustaining relevancy quality. Incremental update of duplicate groups greatly speeds up computing time and processing throughput while multidimensional mapping offers a flexibility in improving load balancing and processing throughput efficiency.</p> <p>The third problem studied is incremental duplicate data detection in cloud virtual machine (VM) backup. Full source-side deduplication with fingerprint comparison can remove redundant content and reduce network traffic in a 1:10 to 1:20 ratio, but such an operation is expensive in terms of memory and computing resources and can affect other co-located services. This project has developed &nbsp;a fast VM-centric backup service with a tradeoff for a competitive deduplication efficiency while using small computing resources. The design consideration includes the exploitation of popular duplicates following &nbsp;a zipf-like distribution, and VM-centric file system block management for the increased VM snapshot availability. The project has further developed source-side collaborative deduplication when frequent virtual machine snapshot backup is required in a large-scale cloud cluster. The key idea is to separate duplicate detection from the actual storage backup instead of using inline deduplication, and partition global index and duplicate detection requests among machines with buffering control for minimal memory usage.</p> <p>More information including software prototype for all-pairs similarity search can be found in the project web site http://www.cs.ucsb.edu/projects/psc/. &nbsp;</p><br> <p>            Last Modified: 09/20/2016<br>      Modified by: Tao&nbsp;Yang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project investigates efficient parallel algorithms and distributed system support for similarity-based data-intensive computing. It starts with near duplicate  detection for web data analysis and search, and continues to work on similarity computing in several applications and develop efficient parallel software on a cluster of machines.   One of key problems studied is  time-consuming all-pairs similarity search used in many web search and data mining applications, and this project has developed  a scalable two-stage parallel method called Partition-based Similarity Search. The first stage is to partition the dataset and group potentially similar vectors. The second stage is to run a set of parallel tasks where each task compares a partition of vectors with other candidate partitions. Static partitioning is employed to detect unnecessary comparisons and accomplish  early elimination of useless I/O and data communication. Because of data sparsity, accessing irregular feature vectors residing in memory hierarchy during runtime partition comparison incurs significant overhead. The proposed technique optimizes data traversal with a cache-conscious layout to reduce the execution time through size-controlled data splitting and vector coalescing, and provides an analysis to guide the optimal choice for parameter setting. The evaluation results show that the proposed approach leads to one or two orders of magnitude of performance improvement.  This project has further considered incremental similarity computing, approximation with locality-sensitive hashing,  and  mitigating load imbalance  among parallel machines caused by the variation in partition sizes and irregular dissimilarity relationship in a large dataset.   This project has developed a two-step load balancing algorithm  for similarity search and analyzed the optimality and competitiveness of the proposed algorithm.  The second problem studied is incremental near duplicate detection for web search engines and other data intensive applications. An offline approach to remove redundant content can be important for reducing the engine?s cost, but it is challenging to  scale such an approach for a large data set which is updated continuously. This project develops  a scalable approach with parallel clustering that detects and removes near duplicates incrementally when processing billions of web pages. The parallel clustering scheme is supported by a two-tier architecture for detecting and managing near duplicate groups with incremental computing and multidimensional data mapping. The evaluation shows that removing redundant content in an offline system significantly reduces the overall engine cost while sustaining relevancy quality. Incremental update of duplicate groups greatly speeds up computing time and processing throughput while multidimensional mapping offers a flexibility in improving load balancing and processing throughput efficiency.  The third problem studied is incremental duplicate data detection in cloud virtual machine (VM) backup. Full source-side deduplication with fingerprint comparison can remove redundant content and reduce network traffic in a 1:10 to 1:20 ratio, but such an operation is expensive in terms of memory and computing resources and can affect other co-located services. This project has developed  a fast VM-centric backup service with a tradeoff for a competitive deduplication efficiency while using small computing resources. The design consideration includes the exploitation of popular duplicates following  a zipf-like distribution, and VM-centric file system block management for the increased VM snapshot availability. The project has further developed source-side collaborative deduplication when frequent virtual machine snapshot backup is required in a large-scale cloud cluster. The key idea is to separate duplicate detection from the actual storage backup instead of using inline deduplication, and partition global index and duplicate detection requests among machines with buffering control for minimal memory usage.  More information including software prototype for all-pairs similarity search can be found in the project web site http://www.cs.ucsb.edu/projects/psc/.         Last Modified: 09/20/2016       Submitted by: Tao Yang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
