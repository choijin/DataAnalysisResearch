<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TC: Small: Towards Customer-Centric Utility Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>488024.00</AwardTotalIntnAmount>
<AwardAmount>488024</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Ralph Wachter</SignBlockName>
<PO_EMAI>rwachter@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In this project, we are exploring the association between computing tasks (jobs) and the computing resources assigned to run those jobs to improve the ability to deploy tasks to satisfy security requirements.  Historically, the owners of the computing tasks also owned their computing resources, so they configured their resources to run their tasks efficiently and securely.  However, configuring tasks to run securely has become so complex that the key knowledge is now distributed among several parties: cloud vendors configure host systems, OS distributors configure cloud instances, customers configure their application programs and network policies.  The goal is to be able to collect this expertise into a single model to reason about how to deploy computing tasks to satisfy their security requirements.  To do this, we are integrating the myriad of integrity measurement mechanisms into a comprehensive integrity measurement framework to enable reasoning about the satisfaction of a computing task's data security from installation to completion.  Using this model, we are building a customer-centric utility computing service to choose an assignment of resources for computing tasks that satisfies data security requirements.  When a customer deploys a computing task via such a service, the service will construct integrity-verified channels to her running jobs, which are secure communication channels that guarantee that the data sender adheres to a data security policy.  Using such services, customers will be able to deploy computing jobs among cloud resources managed by several parties, while assuring that their data security requirements are satisfied automatically.</AbstractNarration>
<MinAmdLetterDate>08/18/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/23/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1117692</AwardID>
<Investigator>
<FirstName>Trent</FirstName>
<LastName>Jaeger</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Trent Jaeger</PI_FULL_NAME>
<EmailAddress>tjaeger@cse.psu.edu</EmailAddress>
<PI_PHON>8148651042</PI_PHON>
<NSF_ID>000465544</NSF_ID>
<StartDate>08/18/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Pennsylvania State Univ University Park</Name>
<CityName>University Park</CityName>
<ZipCode>168021503</ZipCode>
<PhoneNumber>8148651372</PhoneNumber>
<StreetAddress>201 Old Main</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003403953</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PENNSYLVANIA STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003403953</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Pennsylvania State Univ University Park]]></Name>
<CityName>University Park</CityName>
<StateCode>PA</StateCode>
<ZipCode>168021503</ZipCode>
<StreetAddress><![CDATA[201 Old Main]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~171552</FUND_OBLG>
<FUND_OBLG>2012~316472</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>The major goal of this project was to make cloud computing platforms&nbsp;</span>capable of enforcing customer-focused protection of their cloud computations by leveraging trusted computing hardware and mandatory access control.&nbsp; The major focus of the project was to enable verifiable, remote management of customers' cloud instances, which motivated two research threads described below. Other project efforts examined OS introspection mechanisms, introspection properties to enforce, and intrusion detection mechanisms for distributed cloud platforms.</p> <p>The project produced two Ph.D. graduates directly and was instrumental for two further Ph.D. graduates and one current Ph.D. student.&nbsp; The project enabled the development of education materials on cloud computing used in workshops, remote courses, and Penn State computer science courses. The developed mechanisms described below have been integrated into an open-source version of the OpenStack cloud platform available from github.</p> <div><span> <p><span>In the first research thread, we explored methods for cloud vendors to&nbsp;</span>enable their customers to monitor their IaaS cloud instances remotely for a wide variety of security requirements without impacting the security of the cloud platform.&nbsp; To achieve this goal, we define Integrity Verification Proxies (IVPs), a cloud computing primitive that uses hardware-based, trusted computing technology to bootstrap VM introspection features configurable by customers for their VMs. Customers and their clients use IVPs to setup secure communication channels to cloud instances that bind integrity requirements checked via VM introspection to the channels, called Integrity Verification Channels (IVCs).&nbsp; IVCs guarantee that all data received via an IVC are from cloud instances that satisfy the monitored integrity requirements (e.g., see TRUST 2012 paper, "Verifying System Integrity by Proxy").</p> <p><span>&nbsp;</span>In the second research thread, we examine how to deploy cloud platforms securely as a distributed set of independent cloud services. We find that the current state of IaaS cloud computing architectures is similar to that of host OS security circa 1999, as described in the paper "Inevitable Failure: The Flawed Trust Assumption."&nbsp; Mutually trusting, fully-privileged services enable adversaries to leverage one vulnerability to compromise any cloud customers' instances.&nbsp; To reduce the risk from cloud service vulnerabilities, we propose two approaches.</p> <p><span>First, we propose the CloudArmor enforcement mechanism for OpenStack&nbsp;</span>to restrict the system calls invoked when cloud services execute customers' cloud operations over their compute instances.&nbsp; When a cloud customer submits an operation, CloudArmor instantiates a state machine policy that limits the sequences of system calls and their argument values to restrict adversary options for attack (e.g., see IEEE Cloud 2015, "CloudArmor: Protecting Cloud Commands from Compromised Cloud Services").</p> <p><span>&nbsp;</span>Second, we also propose the Pileus enforcement mechanism to restrict cloud services executing customer operations to information flow policies.&nbsp; Pileus spawns cloud services for each customer operation dynamically with only the customers' rights, schedules new services to cloud nodes to minimize interaction with other customers, controls how cloud nodes may propagate authority over customer resources, and governs the execution of cloud services using decentralized information flow control (DIFC) (e.g., see ACSAC 2016, "Pileus: Protecting User Resources from Vulnerable Cloud Services").</p> <br /></span></div> <p>&nbsp;</p><br> <p>            Last Modified: 11/23/2016<br>      Modified by: Trent&nbsp;Jaeger</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2016/1117692/1117692_10123739_1479926896932_design-overview--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1117692/1117692_10123739_1479926896932_design-overview--rgov-800width.jpg" title="Pileus Design Overview"><img src="/por/images/Reports/POR/2016/1117692/1117692_10123739_1479926896932_design-overview--rgov-66x44.jpg" alt="Pileus Design Overview"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Pileus overview. The Pileus Initiator computes access policiesfor executing cloud customers' operations. The Pileus OwnershipRegistry schedules cloud nodes to run cloud services, limiting theoperation's TCB. Pileus Daemons spawn cloud services and DIFC Kernels govern cloud service execution.</div> <div class="imageCredit">Yuqiong Sun, Giuseppe Petracca, Xinyang Ge, and Trent Jaeger</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Trent&nbsp;Jaeger</div> <div class="imageTitle">Pileus Design Overview</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The major goal of this project was to make cloud computing platforms capable of enforcing customer-focused protection of their cloud computations by leveraging trusted computing hardware and mandatory access control.  The major focus of the project was to enable verifiable, remote management of customers' cloud instances, which motivated two research threads described below. Other project efforts examined OS introspection mechanisms, introspection properties to enforce, and intrusion detection mechanisms for distributed cloud platforms.  The project produced two Ph.D. graduates directly and was instrumental for two further Ph.D. graduates and one current Ph.D. student.  The project enabled the development of education materials on cloud computing used in workshops, remote courses, and Penn State computer science courses. The developed mechanisms described below have been integrated into an open-source version of the OpenStack cloud platform available from github.   In the first research thread, we explored methods for cloud vendors to enable their customers to monitor their IaaS cloud instances remotely for a wide variety of security requirements without impacting the security of the cloud platform.  To achieve this goal, we define Integrity Verification Proxies (IVPs), a cloud computing primitive that uses hardware-based, trusted computing technology to bootstrap VM introspection features configurable by customers for their VMs. Customers and their clients use IVPs to setup secure communication channels to cloud instances that bind integrity requirements checked via VM introspection to the channels, called Integrity Verification Channels (IVCs).  IVCs guarantee that all data received via an IVC are from cloud instances that satisfy the monitored integrity requirements (e.g., see TRUST 2012 paper, "Verifying System Integrity by Proxy").   In the second research thread, we examine how to deploy cloud platforms securely as a distributed set of independent cloud services. We find that the current state of IaaS cloud computing architectures is similar to that of host OS security circa 1999, as described in the paper "Inevitable Failure: The Flawed Trust Assumption."  Mutually trusting, fully-privileged services enable adversaries to leverage one vulnerability to compromise any cloud customers' instances.  To reduce the risk from cloud service vulnerabilities, we propose two approaches.  First, we propose the CloudArmor enforcement mechanism for OpenStack to restrict the system calls invoked when cloud services execute customers' cloud operations over their compute instances.  When a cloud customer submits an operation, CloudArmor instantiates a state machine policy that limits the sequences of system calls and their argument values to restrict adversary options for attack (e.g., see IEEE Cloud 2015, "CloudArmor: Protecting Cloud Commands from Compromised Cloud Services").   Second, we also propose the Pileus enforcement mechanism to restrict cloud services executing customer operations to information flow policies.  Pileus spawns cloud services for each customer operation dynamically with only the customers' rights, schedules new services to cloud nodes to minimize interaction with other customers, controls how cloud nodes may propagate authority over customer resources, and governs the execution of cloud services using decentralized information flow control (DIFC) (e.g., see ACSAC 2016, "Pileus: Protecting User Resources from Vulnerable Cloud Services").            Last Modified: 11/23/2016       Submitted by: Trent Jaeger]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
