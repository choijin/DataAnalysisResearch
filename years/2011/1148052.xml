<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSI:  Collaborative Research:   A Glass Box Approach to Enabling Open, Deep Interactions in the HPC Toolchain</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2012</AwardEffectiveDate>
<AwardExpirationDate>12/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>926666.00</AwardTotalIntnAmount>
<AwardAmount>926666</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rajiv Ramnath</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Parallel computing has entered the mainstream with increasingly large multicore processors and powerful accelerator devices. These compute engines, coupled with tighter integration of faster interconnection fabrics, are drivers for the next-generation high end computing (HEC) machines. However, the computing potential of HEC machines is delivered only through productive parallel program development and efficient parallel execution. This project enables application developers to improve performance on future HEC machines for their scientific and engineering processes. This project challenges the current model for parallel application development via "black box" tools and services. Instead, the project offers an open, transparent software infrastructure -- a Glass Box system -- for creating and tuning large-scale, parallel applications.  `Opening up' the tools and services used to create and evaluate peta- and exa-scale codes involves developing interfaces and methods that make tool-internal information and available for new performance management services that improve developer productivity and code efficiency.&lt;br/&gt;&lt;br/&gt;The project will explore the information that can be shared 'across the software stack'.  Methods will be developed for analyzing program information, performance data and tool knowledge. The resulting Glass Box system will allow developers to better assess the performance of their parallel codes.  Tool creators can use the performance data to create new analysis and optimization techniques. System developers can also better manage multicore and machine resources at runtime, using JIT compilation and binary code editing to exploit the evolving hardware.  Working with the `Keeneland' NSF Track II machine and our industry partners, the project will create new performance monitoring tools, compiler methods and system-level resource management techniques. The effort is driven by the large-scale codes running on today's petascale machines.  Its broader impact is derived from the interactions with technology developers and application scientists as well as from its base in three universities with diverse student populations.</AbstractNarration>
<MinAmdLetterDate>05/29/2012</MinAmdLetterDate>
<MaxAmdLetterDate>09/09/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1148052</AwardID>
<Investigator>
<FirstName>Barbara</FirstName>
<LastName>Chapman</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Barbara Chapman</PI_FULL_NAME>
<EmailAddress>barbara.chapman@stonybrook.edu</EmailAddress>
<PI_PHON>6316322351</PI_PHON>
<NSF_ID>000306370</NSF_ID>
<StartDate>05/29/2012</StartDate>
<EndDate>09/09/2016</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Edgar</FirstName>
<LastName>Gabriel</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Edgar Gabriel</PI_FULL_NAME>
<EmailAddress>gabriel@cs.uh.edu</EmailAddress>
<PI_PHON>7137433857</PI_PHON>
<NSF_ID>000316336</NSF_ID>
<StartDate>09/09/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Edgar</FirstName>
<LastName>Gabriel</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Edgar Gabriel</PI_FULL_NAME>
<EmailAddress>gabriel@cs.uh.edu</EmailAddress>
<PI_PHON>7137433857</PI_PHON>
<NSF_ID>000316336</NSF_ID>
<StartDate>05/29/2012</StartDate>
<EndDate>09/09/2016</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Houston</Name>
<CityName>Houston</CityName>
<ZipCode>772042015</ZipCode>
<PhoneNumber>7137435773</PhoneNumber>
<StreetAddress>4800 Calhoun Boulevard</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>036837920</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF HOUSTON SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042916627</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Houston]]></Name>
<CityName/>
<StateCode>TX</StateCode>
<ZipCode>772042015</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<ProgramReference>
<Code>8009</Code>
<Text>Scientifc Software Integration</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~926666</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The main goals of the project were to investigate methods, techniques, heuristics and software solutions for integrating information from different stages of software construction, execution, and evaluation. This integration of information is crucial to gain better performance on the exascale machines. A typical High Performance Computing (HPC) application development cycle consists of four steps. In the first step, a research problem is written as a&nbsp;<em>program</em>&nbsp;in a human-readable programming language such as C, C++, and FORTRAN. The parallelism in the program is exposed using different parallel programming models such as MPI and OpenMP. In the second step, the program is compiled using a compiler that transfers the program into the machine codes. In the third step, the machine codes are run on a single or multiple machines using one or more runtime libraries that provide support for parallel execution.&nbsp;In the fourth step, the software performance is measured, analyzed&nbsp;by one or more tools in an effort to improve performance.&nbsp;This cycle is repeated number of times to improve the performance of the program. In order to pin point the main performance bottleneck and to find a solution for that performance issue, the information at each step should be gather and integrated. This information gather will give a user a true picture of the program. In this project, we investigated ways to increase information sharing between these phases.</p> <p>In the project, we closely worked with our colleagues at the University of Oregon and the Georgia Institute of Technology. We developed new methods for providing interactions between the different steps of software development cycle. We developed a new strategy to help scale program instrumentation using the OpenUH compiler. We developed new OpenMP runtime APIs for OMPT profiling framework. The APIs can be used to collect runtime information for OpenMP applications. We showed that the OMPT framework has the ability to detect unique patterns that can be used to build a quality detection model for false sharing in OpenMP programs. We also showed that these patterns could be useful for many optimization problems. We developed a framework the can select the best configurations for a given OpenMP kernel at runtime. We tested the framework for power constrained OpenMP applications. We also improved the ADCL auto-tuning library for collective communication operations using the GlassBox framework, and gained important insights into impact and limitation of point-to-point performance on the performance of collective operations.</p> <p>We have published our results in academic journals and presented our results at related conferences.&nbsp; We have also shared our development with the scientific communities at national research labs and industrial research labs.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 03/15/2017<br>      Modified by: Edgar&nbsp;Gabriel</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The main goals of the project were to investigate methods, techniques, heuristics and software solutions for integrating information from different stages of software construction, execution, and evaluation. This integration of information is crucial to gain better performance on the exascale machines. A typical High Performance Computing (HPC) application development cycle consists of four steps. In the first step, a research problem is written as a program in a human-readable programming language such as C, C++, and FORTRAN. The parallelism in the program is exposed using different parallel programming models such as MPI and OpenMP. In the second step, the program is compiled using a compiler that transfers the program into the machine codes. In the third step, the machine codes are run on a single or multiple machines using one or more runtime libraries that provide support for parallel execution. In the fourth step, the software performance is measured, analyzed by one or more tools in an effort to improve performance. This cycle is repeated number of times to improve the performance of the program. In order to pin point the main performance bottleneck and to find a solution for that performance issue, the information at each step should be gather and integrated. This information gather will give a user a true picture of the program. In this project, we investigated ways to increase information sharing between these phases.  In the project, we closely worked with our colleagues at the University of Oregon and the Georgia Institute of Technology. We developed new methods for providing interactions between the different steps of software development cycle. We developed a new strategy to help scale program instrumentation using the OpenUH compiler. We developed new OpenMP runtime APIs for OMPT profiling framework. The APIs can be used to collect runtime information for OpenMP applications. We showed that the OMPT framework has the ability to detect unique patterns that can be used to build a quality detection model for false sharing in OpenMP programs. We also showed that these patterns could be useful for many optimization problems. We developed a framework the can select the best configurations for a given OpenMP kernel at runtime. We tested the framework for power constrained OpenMP applications. We also improved the ADCL auto-tuning library for collective communication operations using the GlassBox framework, and gained important insights into impact and limitation of point-to-point performance on the performance of collective operations.  We have published our results in academic journals and presented our results at related conferences.  We have also shared our development with the scientific communities at national research labs and industrial research labs.                Last Modified: 03/15/2017       Submitted by: Edgar Gabriel]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
