<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SDCI Sec: Traffic modeling and generation with custom fidelity for cyber security experimentation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>800000.00</AwardTotalIntnAmount>
<AwardAmount>971095</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Robert Beverly</SignBlockName>
<PO_EMAI>rbeverly@nsf.gov</PO_EMAI>
<PO_PHON>7032927068</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Traffic generation plays an integral part of cyber-security defense testing in &lt;br/&gt;network testbeds. Generating just any traffic is easy, but generating realistic traffic &lt;br/&gt;is hard. The key reason for this is that "realistic" means different things to different &lt;br/&gt;people. The definition of realism depends on the use of the traffic in testing, but &lt;br/&gt;all existing traffic generators have a fixed definition of realism that users cannot &lt;br/&gt;change. &lt;br/&gt;&lt;br/&gt;This project will build a traffic generator whose definition of realism can be fully &lt;br/&gt;specified by a user. The generator will consist of three modules: (1) a module that mines values for &lt;br/&gt;user-specified dimensions from traffic logs, (2) a module that generates random &lt;br/&gt;traffic that fits the model mined in the previous step, (3) a module that replays &lt;br/&gt;traffic from a log so that it exactly matches the logged traffic along the user-&lt;br/&gt;specified dimensions.&lt;br/&gt;&lt;br/&gt;Intellectual Merit: The key novelty of this approach lies in the customizable &lt;br/&gt;definition of realism that the generator will support. By allowing users to specify &lt;br/&gt;their own reality dimensions this project's traffic generation tool will be generic &lt;br/&gt;enough to meet the evaluation needs of any cyber security researcher. Further, &lt;br/&gt;integration of the traffic generation from models and traffic replay in a single &lt;br/&gt;tool is novel; existing tools support only one of these generation approaches. &lt;br/&gt;Finally, the tool will support traffic generation at application, transport or &lt;br/&gt;network level while existing tools support it only at one select level.&lt;br/&gt;&lt;br/&gt;Broader Impact: The proposed work will advance cyber-security defense &lt;br/&gt;research by supporting rigorous and realistic evaluation of its products. It will do &lt;br/&gt;that by both fitting researchers' needs and by being extremely portable and &lt;br/&gt;easy to deploy and use. Because users will be able to customize the definition of &lt;br/&gt;realism as they desire, the evaluation will properly stress the cyber-security &lt;br/&gt;defenses and its results will be predictive of the defenses performance in real &lt;br/&gt;deployment. The traffic generator's capabilities to both generate traffic from &lt;br/&gt;learned models and to replay it from network logs enable a wide range of &lt;br/&gt;testing strategies and support thorough exploration of problem space. Better &lt;br/&gt;evaluation strategies will lead to better cyber-security defenses.  The project will &lt;br/&gt;integrate our traffic generator with the DETER testbed for cyber security &lt;br/&gt;experimentation. All software will also  be released as open-source under the &lt;br/&gt;GNU GPL v3 license.</AbstractNarration>
<MinAmdLetterDate>07/18/2011</MinAmdLetterDate>
<MaxAmdLetterDate>09/05/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1127388</AwardID>
<Investigator>
<FirstName>Jelena</FirstName>
<LastName>Mirkovic</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jelena Mirkovic</PI_FULL_NAME>
<EmailAddress>mirkovic@isi.edu</EmailAddress>
<PI_PHON>3104489170</PI_PHON>
<NSF_ID>000487322</NSF_ID>
<StartDate>07/18/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>902926611</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA33</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1668</Code>
<Text>CYBERCORPS: SCHLAR FOR SER</Text>
</ProgramElement>
<ProgramElement>
<Code>7231</Code>
<Text>CYBERINFRASTRUCTURE</Text>
</ProgramElement>
<ProgramElement>
<Code>7477</Code>
<Text>CI-TEAM</Text>
</ProgramElement>
<ProgramElement>
<Code>8027</Code>
<Text>Cybersecurity Innovation</Text>
</ProgramElement>
<ProgramReference>
<Code>1668</Code>
<Text>CYBERCORPS: SCHLAR FOR SER</Text>
</ProgramReference>
<ProgramReference>
<Code>7477</Code>
<Text>CI-TEAM</Text>
</ProgramReference>
<ProgramReference>
<Code>7683</Code>
<Text>SOFTWARE DEVELOPEMENT FOR CI</Text>
</ProgramReference>
<ProgramReference>
<Code>8027</Code>
<Text>Cyber Secur - Cyberinfrastruc</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0412</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~800000</FUND_OBLG>
<FUND_OBLG>2012~171095</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>The LegoTG Project looked to address the important question of "How should we design a traffic generator to meet a wide-range of needs?". The end product of the LegoTG Project is a framework for custom traffic generation. The key novelty of LegoTG is giving the user the ability to define what realism means for her experiment---specifically the traffic features that matter in her experiment and how these features are expressed. Like a children's building block set, LegoTG offers users modular blocks which can be customized and combined in different ways to provide custom generation.</span></p> <p>Traffic generation plays an integral part in networking research and cyber-security defense for stress-testing and validation of network systems. Naive uses of tools and poor testing can lead to misleading and outright wrong conclusions. The LegoTG project has a broad impact on cyber-security defense and network system testing by supporting rigorous, repeatable and realistic evaluation through customizable traffic generation that can meet a large range of experiment needs.<br /><br />Traffic generation is not just creating and sending packets on a wire, but often includes a range of activities including routing of generated traffic, traffic modulation in the network via drops and delays, and packet consumption at the receiver. Previous approaches to traffic generation all suffer from two major drawbacks: (1) A fixed traffic blueprint&mdash;a fixed set of traffic features and their models, which cannot satisfy a broad range of user needs, and (2) a monolithic, large code base, which users find very hard to modify for their needs.</p> <p>LegoTG accomplishes flexible traffic generation through decomposing generation into modular parts. By separating out feature selection (the traffic features such as connection counts, IP variation or burstiness), feature models (how these traffic features are expressed) and realizers (the actual generation of packets during an experiment), LegoTG allows users to customize traffic at each step, and combine tools as needed.</p> <p>The LegoTG framework is easily extensible. Any tool related to traffic generation can be added to the LegoTG framework by defining a single-file wrapper which defines how LegoTG should interface (install, configure and run) the tool. Through easy extension, the LegoTG framework can grow to meet new needs.</p> <p>In addition to providing easy customizability, LegoTG also provides a straightforward way of sharing experiment definitions. This promotes reuse and repeatability in network experiments. Through a single configuration file, LegoTG captures the details of which tools were used in the process of traffic generation and how these tools were installed, configured and run. This supports: (1) easy repetition of experiments on the same hardware configuration (e.g., the same testbed), (2) easy porting of experiments to different configurations (different testbeds, different topologies), (3) variations of experiments where one set of traffic modules (e.g., applications generating traffic, shapers in the network, etc.) are replaced with other modules.</p> <p>LegoTG is publicly available at&nbsp;http://steel.isi.edu/Projects/legoTG/</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/31/2015<br>      Modified by: Jelena&nbsp;Mirkovic</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2015/1127388/1127388_10110037_1441047259374_dec...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The LegoTG Project looked to address the important question of "How should we design a traffic generator to meet a wide-range of needs?". The end product of the LegoTG Project is a framework for custom traffic generation. The key novelty of LegoTG is giving the user the ability to define what realism means for her experiment---specifically the traffic features that matter in her experiment and how these features are expressed. Like a children's building block set, LegoTG offers users modular blocks which can be customized and combined in different ways to provide custom generation.  Traffic generation plays an integral part in networking research and cyber-security defense for stress-testing and validation of network systems. Naive uses of tools and poor testing can lead to misleading and outright wrong conclusions. The LegoTG project has a broad impact on cyber-security defense and network system testing by supporting rigorous, repeatable and realistic evaluation through customizable traffic generation that can meet a large range of experiment needs.  Traffic generation is not just creating and sending packets on a wire, but often includes a range of activities including routing of generated traffic, traffic modulation in the network via drops and delays, and packet consumption at the receiver. Previous approaches to traffic generation all suffer from two major drawbacks: (1) A fixed traffic blueprint&mdash;a fixed set of traffic features and their models, which cannot satisfy a broad range of user needs, and (2) a monolithic, large code base, which users find very hard to modify for their needs.  LegoTG accomplishes flexible traffic generation through decomposing generation into modular parts. By separating out feature selection (the traffic features such as connection counts, IP variation or burstiness), feature models (how these traffic features are expressed) and realizers (the actual generation of packets during an experiment), LegoTG allows users to customize traffic at each step, and combine tools as needed.  The LegoTG framework is easily extensible. Any tool related to traffic generation can be added to the LegoTG framework by defining a single-file wrapper which defines how LegoTG should interface (install, configure and run) the tool. Through easy extension, the LegoTG framework can grow to meet new needs.  In addition to providing easy customizability, LegoTG also provides a straightforward way of sharing experiment definitions. This promotes reuse and repeatability in network experiments. Through a single configuration file, LegoTG captures the details of which tools were used in the process of traffic generation and how these tools were installed, configured and run. This supports: (1) easy repetition of experiments on the same hardware configuration (e.g., the same testbed), (2) easy porting of experiments to different configurations (different testbeds, different topologies), (3) variations of experiments where one set of traffic modules (e.g., applications generating traffic, shapers in the network, etc.) are replaced with other modules.  LegoTG is publicly available at http://steel.isi.edu/Projects/legoTG/          Last Modified: 08/31/2015       Submitted by: Jelena Mirkovic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
