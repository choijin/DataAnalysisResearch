<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: User Studies to Improve Novice Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>271561.00</AwardTotalIntnAmount>
<AwardAmount>287561</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The project will conduct a series of user studies to investigate the effectiveness of error reporting with novice programming students. The studies will focus on how students understand error messages, the effectiveness of source-code highlighting, and the impact of language syntax on how students process errors.  The PIs will instrument a programming environment to collect fine-grained data on how students respond to errors.  Such scientific user studies, particularly at a fine-grained level, are rare in this context; the methodologies and tools developed for this project will be applicable to future studies. Study results will be used to improve programming environments for novice programmers with regards to interfaces for reporting errors and linguistic choices regarding syntax and type systems.  Findings will identify principles for others who design new programming tools for novices.  Results will be disseminated through the DrRacket environment, which is in wide use in introductory computing courses in universities, high schools, and after-school programs for middle school students.</AbstractNarration>
<MinAmdLetterDate>08/18/2011</MinAmdLetterDate>
<MaxAmdLetterDate>05/07/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116539</AwardID>
<Investigator>
<FirstName>Kathryn</FirstName>
<LastName>Fisler</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kathryn Fisler</PI_FULL_NAME>
<EmailAddress>kathryn_fisler@brown.edu</EmailAddress>
<PI_PHON>4018637600</PI_PHON>
<NSF_ID>000131380</NSF_ID>
<StartDate>08/18/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Shriram</FirstName>
<LastName>Krishnamurthi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Shriram Krishnamurthi</PI_FULL_NAME>
<EmailAddress>sk+17@cs.brown.edu</EmailAddress>
<PI_PHON>4018637722</PI_PHON>
<NSF_ID>000280993</NSF_ID>
<StartDate>08/18/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Ryan</FirstName>
<LastName>Baker</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ryan Baker</PI_FULL_NAME>
<EmailAddress>ryanshaunbaker@gmail.com</EmailAddress>
<PI_PHON>2155732990</PI_PHON>
<NSF_ID>000620525</NSF_ID>
<StartDate>08/18/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Worcester Polytechnic Institute</Name>
<CityName>WORCESTER</CityName>
<ZipCode>016092247</ZipCode>
<PhoneNumber>5088315000</PhoneNumber>
<StreetAddress>100 INSTITUTE RD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041508581</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>WORCESTER POLYTECHNIC INSTITUTE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041508581</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Worcester Polytechnic Institute]]></Name>
<CityName>WORCESTER</CityName>
<StateCode>MA</StateCode>
<ZipCode>016092247</ZipCode>
<StreetAddress><![CDATA[100 INSTITUTE RD]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~271561</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project explored various user-facing issues in learning programming.</p> <p>One key thrust of the project was looking at effective displays of error messages. An "error message" is the report that a programmer receives in response to a mistake made when attempting to write or run a program. Mistakes can take many forms: the program may have a typo in the notation, be missing an expected part of the program text, have additional notation that the computer doesn't understand, or try to perform a nonsensical computation while executing (among others). In each case, the tool in which the programmer is writing the program must report the problem to the user, ideally in a way that helps the programmer identify and fix the underlying problem.</p> <p>In prior work, we had gathered data on what changes students made to programs upon receiving error messages and analyzed whether the students' actions were productive or meaningful. We conducted our studies in DrRacket, a popular programming tool for novice programmers that had been explicitly designed to support novices, particularly through its error messages. We identified several shortcomings in those messages. This project began as a followup to that initial work, seeking to design, deploy, and test alternative error-message presentation formats.</p> <p>We designed a new set of principles for wording and displaying error messages. &nbsp;Roughly, (a) we worded the messages to include direct references to each part of the code that mattered to the error, (b) we used different colored highlights to match each reference with the corresponding code fragment. Earlier error message displays (in DrRacket and others) would at most highlight one part of code that was relevant to an error, without necessarily explaining the connection between the highlight and the textual message display. The new system provided many more connections between the text and the code. The images included with this report show examples of the new display.</p> <p>We built the new interface into programming environments for two different languages: WeScheme (supporting a subset of Racket) and code.pyret.org (supporting Pyret). &nbsp;WeScheme is the programming software for the Bootstrap curriculum, a widely-deployed module that integrates computing into algebra classes for 7th-10th graders. &nbsp;The students and teachers who use it are typically entirely new to computing. &nbsp;Pyret is also used in educational contexts, though currently with students more at the collegiate level. The broader impact of this work arises from using our results in these educational contexts. Both efforts required significant tool engineering; that work was a key component of our work on this project.</p> <p>In applying the error-message principles to two different languages with different syntaxes, we identified some challenges to creating more informative error messages. &nbsp;Ideally, error messages leverage information about the context in which the error is discovered. &nbsp;Racket and Pyret programs can provide different degrees of context given the ways in which their respective syntactic styles are typically processed (parsed, in technical terms). &nbsp;Thus while our principles were language agnostic, the language itself can make the principles more or less valuable in certain kinds of examples.</p> <p>Technical and logistical challenges delayed replication of the original "how-users-edit" studies that inspired this work. &nbsp;However, we have observed hundreds of teachers during Bootstrap training workshops and surveyed teachers who had worked with each of the original (DrRacket-like) and new error displays in WeScheme. &nbsp;We often see teachers using the visual elements of the new interface design, pointing back and forth between highlights in textual messages and corresponding highlights in code as we talk them through issues with their code. &nbsp;We have asked teachers whether the use of multiple colors makes the display too visually busy; many reported not noticing the additional colors at all. &nbsp;Many have given positive anecdotes from using the new interface in their classes. Pilot studies with college students showed that students could map between text and code more easily with the new format; only a small fraction of participants expresssed concerned about too many colors.</p> <p>This project has thus resulted in a new set of principles for designing error message displays, insights from the implementation of these princples in two different languages with significantly different styles of syntax, and pilot studies with both college students and teachers that suggest that this new interfaces makes certain information more available. Forthcoming studies will take the next step of checking whether the new design helps people correct errors more effectively. Another angle of this project, which is described in the formal award report, studied the role of peer review in helping students identify logical and stylistic weaknesses in code and tests, as these sorts of issues fall outside compiler-based error-message technologies.</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/28/2016<br>      Modified by: Kathi&nbsp;Fisler</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475069091338_wescheme-cond-syntax-multicolor--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475069091338_wescheme-cond-syntax-multicolor--rgov-800width.jpg" title="WeScheme multi-colored error example"><img src="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475069091338_wescheme-cond-syntax-multicolor--rgov-66x44.jpg" alt="WeScheme multi-colored error example"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Example of the new highlighting strategy, using the same program as shown in the DrRacket sample.</div> <div class="imageCredit">PLT Research Team</div> <div class="imagePermisssions">Royalty-free (unrestricted use)</div> <div class="imageSubmitted">Kathi&nbsp;Fisler</div> <div class="imageTitle">WeScheme multi-colored error example</div> </div> </li> <li> <a href="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475069284733_pyret-multi-colored-arity-mismatch--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475069284733_pyret-multi-colored-arity-mismatch--rgov-800width.jpg" title="Pyret multicolored error example"><img src="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475069284733_pyret-multi-colored-arity-mismatch--rgov-66x44.jpg" alt="Pyret multicolored error example"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The new multicolored highlighting strategy on a Pyret program.  This program contains a function call whose number of arguments is inconsistent with the function's definition.</div> <div class="imageCredit">PLT Research Team</div> <div class="imagePermisssions">Royalty-free (unrestricted use)</div> <div class="imageSubmitted">Kathi&nbsp;Fisler</div> <div class="imageTitle">Pyret multicolored error example</div> </div> </li> <li> <a href="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475062653621_drracket-cond-syntax-monocolor--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475062653621_drracket-cond-syntax-monocolor--rgov-800width.jpg" title="DrRacket monochrome error example"><img src="/por/images/Reports/POR/2016/1116539/1116539_10123743_1475062653621_drracket-cond-syntax-monocolor--rgov-66x44.jpg" alt="DrRacket monochrome error example"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Sample error message (in DrRacket) from before we started this project. The single highlight flags only part of the code involved in the error.  This example shows a syntax error.</div> <div class="imageCredit">PLT Research Team</div> <div class="imageSubmitted">Kathi&nbsp;Fisler</div> <div class="imageTitle">DrRacket monochrome error example</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project explored various user-facing issues in learning programming.  One key thrust of the project was looking at effective displays of error messages. An "error message" is the report that a programmer receives in response to a mistake made when attempting to write or run a program. Mistakes can take many forms: the program may have a typo in the notation, be missing an expected part of the program text, have additional notation that the computer doesn't understand, or try to perform a nonsensical computation while executing (among others). In each case, the tool in which the programmer is writing the program must report the problem to the user, ideally in a way that helps the programmer identify and fix the underlying problem.  In prior work, we had gathered data on what changes students made to programs upon receiving error messages and analyzed whether the students' actions were productive or meaningful. We conducted our studies in DrRacket, a popular programming tool for novice programmers that had been explicitly designed to support novices, particularly through its error messages. We identified several shortcomings in those messages. This project began as a followup to that initial work, seeking to design, deploy, and test alternative error-message presentation formats.  We designed a new set of principles for wording and displaying error messages.  Roughly, (a) we worded the messages to include direct references to each part of the code that mattered to the error, (b) we used different colored highlights to match each reference with the corresponding code fragment. Earlier error message displays (in DrRacket and others) would at most highlight one part of code that was relevant to an error, without necessarily explaining the connection between the highlight and the textual message display. The new system provided many more connections between the text and the code. The images included with this report show examples of the new display.  We built the new interface into programming environments for two different languages: WeScheme (supporting a subset of Racket) and code.pyret.org (supporting Pyret).  WeScheme is the programming software for the Bootstrap curriculum, a widely-deployed module that integrates computing into algebra classes for 7th-10th graders.  The students and teachers who use it are typically entirely new to computing.  Pyret is also used in educational contexts, though currently with students more at the collegiate level. The broader impact of this work arises from using our results in these educational contexts. Both efforts required significant tool engineering; that work was a key component of our work on this project.  In applying the error-message principles to two different languages with different syntaxes, we identified some challenges to creating more informative error messages.  Ideally, error messages leverage information about the context in which the error is discovered.  Racket and Pyret programs can provide different degrees of context given the ways in which their respective syntactic styles are typically processed (parsed, in technical terms).  Thus while our principles were language agnostic, the language itself can make the principles more or less valuable in certain kinds of examples.  Technical and logistical challenges delayed replication of the original "how-users-edit" studies that inspired this work.  However, we have observed hundreds of teachers during Bootstrap training workshops and surveyed teachers who had worked with each of the original (DrRacket-like) and new error displays in WeScheme.  We often see teachers using the visual elements of the new interface design, pointing back and forth between highlights in textual messages and corresponding highlights in code as we talk them through issues with their code.  We have asked teachers whether the use of multiple colors makes the display too visually busy; many reported not noticing the additional colors at all.  Many have given positive anecdotes from using the new interface in their classes. Pilot studies with college students showed that students could map between text and code more easily with the new format; only a small fraction of participants expresssed concerned about too many colors.  This project has thus resulted in a new set of principles for designing error message displays, insights from the implementation of these princples in two different languages with significantly different styles of syntax, and pilot studies with both college students and teachers that suggest that this new interfaces makes certain information more available. Forthcoming studies will take the next step of checking whether the new design helps people correct errors more effectively. Another angle of this project, which is described in the formal award report, studied the role of peer review in helping students identify logical and stylistic weaknesses in code and tests, as these sorts of issues fall outside compiler-based error-message technologies.          Last Modified: 09/28/2016       Submitted by: Kathi Fisler]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
