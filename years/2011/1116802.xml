<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: HotBench: An Optimization Workbench for Hotspots</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The last decades have seen an enormous growth in the performance capabilities of computing platforms. One important driver in the computing revolution was productivity enabled by higher-level languages and software engineering methods that allow building and maintaining complex software systems. However, unable to fully utilize modern computer systems, software built that way can under-perform by several orders of magnitude on top-end workstations. With CPU frequency scaling coming to a halt and the switch to multicores, high-end systems become increasingly energy-constrained. In addition, as more computing is becoming mobile, inefficiency directly translates into wasted energy and shorter battery life, and ultimately, less usefulness.&lt;br/&gt;&lt;br/&gt;Today, high efficiency is mostly achieved through heroic human programming by a small number of experts. This research studies how to go beyond this unsustainable situation and how to make a high level of efficiency accessible to average programmers across a wide range of platforms and algorithms. The Hot Bench system developed in his research provides interactive optimization capabilities for the generation of highly efficient programs, for both average and expert users. It includes a comprehensive library of optimization strategies for targeting various kinds of algorithms, data structures, and target platforms. Expert users can add optimization strategies, target new instruction sets, or add new output languages. Less experienced programmers can learn how optimization works and how complicated architectures are programmed. The system is designed to be extensible to virtually any program type and target hardware, and to be able to encode all the necessary optimization methods and tricks. Hot Bench is in spirit similar to computer algebra/mathematics systems like Matlab, Maple, or Mathematical, and interactive theorem proves, applying their concept to hotspot tuning.</AbstractNarration>
<MinAmdLetterDate>07/19/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/19/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116802</AwardID>
<Investigator>
<FirstName>Franz</FirstName>
<LastName>Franchetti</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Franz Franchetti</PI_FULL_NAME>
<EmailAddress>franzf@ece.cmu.edu</EmailAddress>
<PI_PHON>4122688746</PI_PHON>
<NSF_ID>000209896</NSF_ID>
<StartDate>07/19/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The key outcome for this project is that we were able to show the applicability of HotBench to help performance engineers who implement and optimize computational science codes to perform optimizations that are well outside the capabilities of other automatic or semi-automatic tools like compilers and code restructurers. In fact, some of these optimizations are global and so complicated that a human trying to implement them by hand most likely would not succeed. However, a human telling the tool the right strategy, and then the tool automatically implementing the strategy is possible and leads to productivity and performance gains.</p> <p>We summarize a number of examples where HotBench was successfully applied.</p> <p><strong>Power System Solvers:</strong> In collaboration with the CPS project we optimized the fast decoupled power flow (FDPF), which is a widely used load flow algorithm for AC load flow analysis and contingency calculation. Together with optimized data structure, SIMD and multicore parallelization, the performance of the Monte Carlo PLF solver is sped up by up to 50x over a standard C baseline on an Intel Core i7 quadcore CPU.</p> <p><strong>Stencil kernels:</strong> Stencil computations are at the core of applications in many domains such as computational electromagnetics, image processing, and partial differential equation solvers used in a variety of scientific and engineering applications. We worked with Sadayappan&rsquo;s team at Ohio State University to include a HotBench-based code synthesis backend into the Pluto and PrimeTile framework, to provide backend code optimization that is not done in Pluto/PrimeTile as of now.</p> <p><strong>Graph Algorithms:</strong> A core realization of this project is that for graph algorithms to be efficient on current multicore processors, memory access needs to be managed and reordered well beyond what current memory controllers are capable of doing.</p> <p><strong>Matrix kernels: </strong>We were able to demonstrate that with a synthesis tool like HotBench it is possible to generate the innermost matrix kernels needed in optimized BLAS libraries like OpenBLAS or BLIS. These generated kernels are as fast as the best hand-tuned kernels, and run almost at machine peak.</p> <p><strong>Application optimization: </strong>We used HotBench in collaboration with the DOD HPC Modernization Project &ldquo;Spectral Method for Elasto-Viscoplastic Full-Field Deformation as a Test Bed for Testing New Approaches to High Performance Computing&rdquo; and in collaboration with the ONETEP quantum chemistry code (the Order-N Electronic Total Energy Package) to optimize core kernels<br />Interval arithmetic: In collaboration with the DARPA HACMS project &ldquo;High Assurance SPIRAL&rdquo; we were developing code synthesis capabilities for interval arithmetic. Properly implemented interval arithmetic allows for absolute guarantees that the final true result over the real numbers is in the resulting interval as computed by the program.</p><br> <p>            Last Modified: 08/23/2016<br>      Modified by: Franz&nbsp;Franchetti</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The key outcome for this project is that we were able to show the applicability of HotBench to help performance engineers who implement and optimize computational science codes to perform optimizations that are well outside the capabilities of other automatic or semi-automatic tools like compilers and code restructurers. In fact, some of these optimizations are global and so complicated that a human trying to implement them by hand most likely would not succeed. However, a human telling the tool the right strategy, and then the tool automatically implementing the strategy is possible and leads to productivity and performance gains.  We summarize a number of examples where HotBench was successfully applied.  Power System Solvers: In collaboration with the CPS project we optimized the fast decoupled power flow (FDPF), which is a widely used load flow algorithm for AC load flow analysis and contingency calculation. Together with optimized data structure, SIMD and multicore parallelization, the performance of the Monte Carlo PLF solver is sped up by up to 50x over a standard C baseline on an Intel Core i7 quadcore CPU.  Stencil kernels: Stencil computations are at the core of applications in many domains such as computational electromagnetics, image processing, and partial differential equation solvers used in a variety of scientific and engineering applications. We worked with Sadayappan?s team at Ohio State University to include a HotBench-based code synthesis backend into the Pluto and PrimeTile framework, to provide backend code optimization that is not done in Pluto/PrimeTile as of now.  Graph Algorithms: A core realization of this project is that for graph algorithms to be efficient on current multicore processors, memory access needs to be managed and reordered well beyond what current memory controllers are capable of doing.  Matrix kernels: We were able to demonstrate that with a synthesis tool like HotBench it is possible to generate the innermost matrix kernels needed in optimized BLAS libraries like OpenBLAS or BLIS. These generated kernels are as fast as the best hand-tuned kernels, and run almost at machine peak.  Application optimization: We used HotBench in collaboration with the DOD HPC Modernization Project "Spectral Method for Elasto-Viscoplastic Full-Field Deformation as a Test Bed for Testing New Approaches to High Performance Computing" and in collaboration with the ONETEP quantum chemistry code (the Order-N Electronic Total Energy Package) to optimize core kernels Interval arithmetic: In collaboration with the DARPA HACMS project "High Assurance SPIRAL" we were developing code synthesis capabilities for interval arithmetic. Properly implemented interval arithmetic allows for absolute guarantees that the final true result over the real numbers is in the resulting interval as computed by the program.       Last Modified: 08/23/2016       Submitted by: Franz Franchetti]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
