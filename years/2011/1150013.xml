<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:Toward a locality-enhancing transformation framework for irregular programs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2012</AwardEffectiveDate>
<AwardExpirationDate>01/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>418786.00</AwardTotalIntnAmount>
<AwardAmount>418786</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Many domains in computer science, from data-mining to simulation to computational biology, focus heavily on irregular applications, which deal with complex algorithms that manipulate complex data structures. For example, to analyze large data sets, point correlation - a data mining algorithm - organizes data in a tree-like structure that is then manipulated to extract trends and patterns. As such algorithms become more pervasive, and, more importantly, the data sets they are applied to become much larger, writing high performance irregular applications has become critically important. However, the complexity of irregular algorithms makes writing high-performance applications very difficult: simple expressions of the algorithms do not perform well, and high-performance implementations are difficult to express. An attractive solution is to develop a set of tools that could take a simple expression of an algorithm and automatically transform the program into a higher performing version. This project aims to develop automated, robust and generally-applicable performance-enhancing techniques and transformations for irregular programs.&lt;br/&gt;&lt;br/&gt;The chief obstacle to identifying and performing performance-enhancing transformations on irregular programs is the apparent lack of principles that unify irregular applications. However, this research argues that there are, indeed, such principles that can guide the development of transformations. By leveraging high-level structural properties of irregular algorithms, it is possible to automatically transform irregular programs to significantly improve their performance. This project pursues a set of interlocking efforts to build a framework to (i) analyze irregular programs, (ii) identify profitable and legal transformations, (iii) automatically restructure programs according to those transformations, and then (iv) tune the performance of the transformed applications to best fit the target execution platform.</AbstractNarration>
<MinAmdLetterDate>01/06/2012</MinAmdLetterDate>
<MaxAmdLetterDate>04/12/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1150013</AwardID>
<Investigator>
<FirstName>Milind</FirstName>
<LastName>Kulkarni</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Milind Kulkarni</PI_FULL_NAME>
<EmailAddress>milind@purdue.edu</EmailAddress>
<PI_PHON>7654941742</PI_PHON>
<NSF_ID>000549148</NSF_ID>
<StartDate>01/06/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName/>
<StateCode>IN</StateCode>
<ZipCode>479072035</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1045</Code>
<Text>CAREER: FACULTY EARLY CAR DEV</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~156915</FUND_OBLG>
<FUND_OBLG>2013~83531</FUND_OBLG>
<FUND_OBLG>2015~87208</FUND_OBLG>
<FUND_OBLG>2016~91132</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Many applications that drive the modern world, in fields ranging from data mining to machine learning to graphics to computational genomics, are irregular: rather than behaving in predictable manners and working with simple data structures like arrays, they behave in complex, unpredictable ways and operate over complicated data structures like trees and graphs. Most advances in the realm of compiler optimizations focus on the predictable applications rather than these emerging irregular applications. This project looked at bringing together a set of techniques to optimize irregular applications and hence improve their performance, allowing them to be deployed on larger data sets and deliver results faster.</p> <p><br />This project developed a series of new program transformations that apply to irregular applications like ray tracers and nearest neighbor classifiers that operate over tree data structures. These transformations -- point blocking, traversal splicing, traversal fusion, recursion twisting -- represented the first generally applicable transformations for these types of applications, generalizing the hand-written and hand-tuned optimizations that programmers had used in the past. These transformations delivered substantial performance improvements on a wide range of applications -- up to 10x in the best cases -- and often out-performed hand-tuned implementations despite being more generic and more automatic.</p> <p><br />This project then took those transformations and showed how they could be used to map complex applications to complex hardware, including graphics processing units (GPUs) and vector units. The optimizations enabled by this project led to the first general strategies for putting tree-based applications on GPUs and vector units, leading to speedups of up to 100x when combining all the optimizations. The project also showed how the transformations create program structures that allow irregular applications to be executed in a distributed manner, automatically scaling these applications up to hundreds of processors.</p> <p><br />Being able to automatically optimize programs does not help if there is no guarantee that the new program is still correct -- that it produces the same result as the original program. Compiler analyses have struggled for decades to find ways of proving that transformations on irregular programs are sound, tackling only relatively simple transformations. This project yielded several key results in this space. First, it produced the first general dependence test for scheduling transformations of tree based programs, providing an analysis that could tell whether restructuring transformations like point blocking and traversal splicing were sound. Second, it produced the first test for fusing together general traversals of trees -- this test automates the kind of careful hand tuning that, say, web browser engineers perform to speed up the rendering of web pages. Finally, this project developed the first dependence analysis framework that supports multiple transformations and provides a general dependence test to check whether any transformation on a recursive, irregular program is safe.</p> <p><br />The results of this project have made their way into applications in other domains. For example, the GPU transformations developed by this project have been used to speed up a state-of-the-art astrophysics simulation platform by 4-5x. The benchmarks developed as part of the experimental platform for this project have been used by external groups to drive their research. This project has led to the release of several open-source transformation and analysis frameworks. The results of this project have appeared in 15 peer-reviewed workshops and conferences.</p><br> <p>            Last Modified: 07/18/2018<br>      Modified by: Milind&nbsp;Kulkarni</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Many applications that drive the modern world, in fields ranging from data mining to machine learning to graphics to computational genomics, are irregular: rather than behaving in predictable manners and working with simple data structures like arrays, they behave in complex, unpredictable ways and operate over complicated data structures like trees and graphs. Most advances in the realm of compiler optimizations focus on the predictable applications rather than these emerging irregular applications. This project looked at bringing together a set of techniques to optimize irregular applications and hence improve their performance, allowing them to be deployed on larger data sets and deliver results faster.   This project developed a series of new program transformations that apply to irregular applications like ray tracers and nearest neighbor classifiers that operate over tree data structures. These transformations -- point blocking, traversal splicing, traversal fusion, recursion twisting -- represented the first generally applicable transformations for these types of applications, generalizing the hand-written and hand-tuned optimizations that programmers had used in the past. These transformations delivered substantial performance improvements on a wide range of applications -- up to 10x in the best cases -- and often out-performed hand-tuned implementations despite being more generic and more automatic.   This project then took those transformations and showed how they could be used to map complex applications to complex hardware, including graphics processing units (GPUs) and vector units. The optimizations enabled by this project led to the first general strategies for putting tree-based applications on GPUs and vector units, leading to speedups of up to 100x when combining all the optimizations. The project also showed how the transformations create program structures that allow irregular applications to be executed in a distributed manner, automatically scaling these applications up to hundreds of processors.   Being able to automatically optimize programs does not help if there is no guarantee that the new program is still correct -- that it produces the same result as the original program. Compiler analyses have struggled for decades to find ways of proving that transformations on irregular programs are sound, tackling only relatively simple transformations. This project yielded several key results in this space. First, it produced the first general dependence test for scheduling transformations of tree based programs, providing an analysis that could tell whether restructuring transformations like point blocking and traversal splicing were sound. Second, it produced the first test for fusing together general traversals of trees -- this test automates the kind of careful hand tuning that, say, web browser engineers perform to speed up the rendering of web pages. Finally, this project developed the first dependence analysis framework that supports multiple transformations and provides a general dependence test to check whether any transformation on a recursive, irregular program is safe.   The results of this project have made their way into applications in other domains. For example, the GPU transformations developed by this project have been used to speed up a state-of-the-art astrophysics simulation platform by 4-5x. The benchmarks developed as part of the experimental platform for this project have been used by external groups to drive their research. This project has led to the release of several open-source transformation and analysis frameworks. The results of this project have appeared in 15 peer-reviewed workshops and conferences.       Last Modified: 07/18/2018       Submitted by: Milind Kulkarni]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
