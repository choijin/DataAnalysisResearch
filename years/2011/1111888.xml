<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Large: Collaborative Research: PXGL: Cyberinfrastructure for Scalable Graph Execution</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>1100000.00</AwardTotalIntnAmount>
<AwardAmount>1100000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The most powerful computing systems in the world have historically been dedicated to solving scientific problems. Until recently, the computations performed by these systems have typically been simulations of various physical phenomena. However, a new paradigm for scientific discovery has been steadily rising in importance, namely, data-intensive science, which focuses sophisticated analysis techniques on the enormous (and ever increasing) amounts of data being produced in scientific, commercial, and social endeavors. Important research based on data-intensive science include areas as diverse as knowledge discovery, bioinformatics, proteomics and genomics, data mining and search, electronic design automation, computer vision, and Internet routing. Unfortunately, the computational approaches needed for data-intensive science differ markedly from those that have been so effective for simulation-based supercomputing. To enable and facilitate efficient execution of data-intensive scientific problems, this project will develop a comprehensive hardware and software supercomputing system for data-intensive science.&lt;br/&gt;&lt;br/&gt;Graph algorithms and data structures are fundamental to data-intensive computations and, consequently, this project is focused on providing fundamental, new understandings of the basics of large-scale graph processing and how to build scalable systems to efficiently solve large-scale graph problems. In particular, this work will characterize processing overheads and the limits of graph processing scalability, develop performance models that properly capture graph algorithms, define the (co-design) process for developing graph-specific hardware, and experimentally verify our approach with a prototype execution environment. Key capabilities of our system include: a novel fine-grained parallel programming model, a scalable library of graph algorithms and data structures, a graph-optimized core architecture, and a scalable graph execution platform. The project will also address the programming challenges involved in constructing scalable and reliable software for data-intensive problems.</AbstractNarration>
<MinAmdLetterDate>08/10/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1111888</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Lumsdaine</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrew Lumsdaine</PI_FULL_NAME>
<EmailAddress>al75@uw.edu</EmailAddress>
<PI_PHON>2065431695</PI_PHON>
<NSF_ID>000420340</NSF_ID>
<StartDate>08/10/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Indiana University</Name>
<CityName>Bloomington</CityName>
<ZipCode>474013654</ZipCode>
<PhoneNumber>3172783473</PhoneNumber>
<StreetAddress>509 E 3RD ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>006046700</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF INDIANA UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>006046700</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Indiana University]]></Name>
<CityName>Bloomington</CityName>
<StateCode>IN</StateCode>
<ZipCode>474013654</ZipCode>
<StreetAddress><![CDATA[509 E 3RD ST]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~811941</FUND_OBLG>
<FUND_OBLG>2014~288059</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Modeling and simulation, an important tool for discovery and computation, has long been recognized as the &ldquo;third pillar&rdquo; of scientific research. More recently, data analytic computing has emerged as a distinct form of computing and a distinct form of research likely to be as important as, if not more important than, modeling and simulation.</p> <p>The focus of traditional scientific computing has been in solving systems of PDEs (and the correspond- ing linear algebra problems that they induce). Hardware architectures, computer systems, and software platforms have evolved together to efficiently support solving these kinds of problems. Similar attention has not been devoted to efficiently solving data analytics problems. However, the executive order that created the National Strategic Computing Initiative (NSCI) specifically calls out data analytics as one of its five objectives:</p> <p><em>Increasing coherence between the technology base used for modeling and simulation and that used for data analytic computing.</em></p> <p>Within the broad domain of data analytics, the graph abstraction is a powerful conceptual tool that describes the relationships between discrete objects. Graphs are used in areas such as social network analysis, machine learning, compilers, electronic design automation, planning, and operations research. Other areas of scientific computing use graphs as well, in the guise of sparse matrices (often derived from structured or unstructured meshes).</p> <p>In this project, we have advanced the knowledge and understanding of graph computation in several ways. We developed implementations of graph algorithms in modern distributed runtimes AM++ and HPX-5, resulting in PBGL 2 and PXGL libraries. We investigated new asynchronous mode of graph computation called Distributed Control, where we avoid underutilization of resources by eliminating global barriers and data structures, minimizing the global interaction between threads of computation to &ldquo;termination detection.&rdquo; To achieve performance, such approach requires rethinking and redesign of existing algorithms, and it requires the right choice of order in which work is executed. Furthermore, asynchronous algorithms introduce the aspect of interaction with the underlying runtime. We have proposed that the run time is an integral part of a graph processing system, and that new research results should fully acknowledge this fact, increasing the reporting on the run time related aspects of performance. We have thoroughly analyzed interaction between AM++ and HPX run times and our algorithms in the context of this project.</p> <p>We have also considered theoretical developments for graph computation. We proposed Abstract Graph Machines (AGMs) as a high level framework for describing data-driven graph algorithms. AGMs capture graph computation as independent tasks that can be ordered in some way that impacts the semantics and the performance of the algorithms they describe. An Extended AGM (EAGM) expands the notion of ordering onto an abstraction of the underlying architecture, allowing description and analysis of performance improvements possible by placing non-semantic ordering at different levels of hardware.</p> <p>We also considered new abstractions for graph libraries. As a part of this project, we have participated in the development and specification of GraphBLAS, a set of functions that extend the ideas form linear algebra to graphs. In the GraphBLAS approach, a graph is viewed as a matrix, most often the adjacency matrix, and it is processed through a series of BLAS-like operations. GraphBLAS selects a small set of useful BLAS operations and extends them with parametrization by the underlying semiring. This extension allows customization of the traditional BLAS methods to the tasks of a particular graph algorithm. We have developed a prototype library called GraphBLAS Template Library, and we have investigated seamless mapping of the GraphBLAS interface to different backends such as CPU and GPU.</p> <p>Several software artifacts were developed in this project. These artifacts are released as open source and are available to the public under non-restrictive license. Examples of projects developed are the PXGL library, the PBGL 2 library, the GBTL library, and the AM++ and HPX-5 runtimes. This project also contributed to standardization efforts (GraphBLAS). We have produced several publications on different aspects of graph computation, and we have participated in standardization and development of new ideas and software interfaces. Last but not least, this project directly supported four PhD students over its course who completed some, if not the bulk of their graduate work under this project.&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/02/2016<br>      Modified by: Andrew&nbsp;Lumsdaine</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Modeling and simulation, an important tool for discovery and computation, has long been recognized as the "third pillar" of scientific research. More recently, data analytic computing has emerged as a distinct form of computing and a distinct form of research likely to be as important as, if not more important than, modeling and simulation.  The focus of traditional scientific computing has been in solving systems of PDEs (and the correspond- ing linear algebra problems that they induce). Hardware architectures, computer systems, and software platforms have evolved together to efficiently support solving these kinds of problems. Similar attention has not been devoted to efficiently solving data analytics problems. However, the executive order that created the National Strategic Computing Initiative (NSCI) specifically calls out data analytics as one of its five objectives:  Increasing coherence between the technology base used for modeling and simulation and that used for data analytic computing.  Within the broad domain of data analytics, the graph abstraction is a powerful conceptual tool that describes the relationships between discrete objects. Graphs are used in areas such as social network analysis, machine learning, compilers, electronic design automation, planning, and operations research. Other areas of scientific computing use graphs as well, in the guise of sparse matrices (often derived from structured or unstructured meshes).  In this project, we have advanced the knowledge and understanding of graph computation in several ways. We developed implementations of graph algorithms in modern distributed runtimes AM++ and HPX-5, resulting in PBGL 2 and PXGL libraries. We investigated new asynchronous mode of graph computation called Distributed Control, where we avoid underutilization of resources by eliminating global barriers and data structures, minimizing the global interaction between threads of computation to "termination detection." To achieve performance, such approach requires rethinking and redesign of existing algorithms, and it requires the right choice of order in which work is executed. Furthermore, asynchronous algorithms introduce the aspect of interaction with the underlying runtime. We have proposed that the run time is an integral part of a graph processing system, and that new research results should fully acknowledge this fact, increasing the reporting on the run time related aspects of performance. We have thoroughly analyzed interaction between AM++ and HPX run times and our algorithms in the context of this project.  We have also considered theoretical developments for graph computation. We proposed Abstract Graph Machines (AGMs) as a high level framework for describing data-driven graph algorithms. AGMs capture graph computation as independent tasks that can be ordered in some way that impacts the semantics and the performance of the algorithms they describe. An Extended AGM (EAGM) expands the notion of ordering onto an abstraction of the underlying architecture, allowing description and analysis of performance improvements possible by placing non-semantic ordering at different levels of hardware.  We also considered new abstractions for graph libraries. As a part of this project, we have participated in the development and specification of GraphBLAS, a set of functions that extend the ideas form linear algebra to graphs. In the GraphBLAS approach, a graph is viewed as a matrix, most often the adjacency matrix, and it is processed through a series of BLAS-like operations. GraphBLAS selects a small set of useful BLAS operations and extends them with parametrization by the underlying semiring. This extension allows customization of the traditional BLAS methods to the tasks of a particular graph algorithm. We have developed a prototype library called GraphBLAS Template Library, and we have investigated seamless mapping of the GraphBLAS interface to different backends such as CPU and GPU.  Several software artifacts were developed in this project. These artifacts are released as open source and are available to the public under non-restrictive license. Examples of projects developed are the PXGL library, the PBGL 2 library, the GBTL library, and the AM++ and HPX-5 runtimes. This project also contributed to standardization efforts (GraphBLAS). We have produced several publications on different aspects of graph computation, and we have participated in standardization and development of new ideas and software interfaces. Last but not least, this project directly supported four PhD students over its course who completed some, if not the bulk of their graduate work under this project.           Last Modified: 11/02/2016       Submitted by: Andrew Lumsdaine]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
