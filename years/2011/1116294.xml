<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: SHF: Small: Propagator-Based Computing, A Programming Foundation for Decentralized Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>200000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project develops the Propagator Model, a concurrent decentralized&lt;br/&gt;framework designed to support computing in large, open, dynamic&lt;br/&gt;environments.  It provides powerful tools for organizing computations&lt;br/&gt;to operate effectively in a world of rapidly changing and globally&lt;br/&gt;inconsistent data by adopting a fundamental shift in viewpoint: the&lt;br/&gt;things manipulated by basic computing elements are not fixed values.&lt;br/&gt;Rather, they are information about values, and this information is&lt;br/&gt;continually refined as new information becomes available.&lt;br/&gt;&lt;br/&gt;This project creates the architectural and linguistic foundations for&lt;br/&gt;systems that can operate effectively in environments where there is no&lt;br/&gt;central management, and where one cannot rely on resources being&lt;br/&gt;consistently available or consistently operating, and where the data is&lt;br/&gt;rapidly changing and globally inconsistent.  Using three mechanisms&lt;br/&gt;implicit in the computational substrate: (1) constraint propagation,&lt;br/&gt;(2) partial information structures, and (3) dependencies, systems&lt;br/&gt;built on the propagator model automatically have the ability to&lt;br/&gt;support their conclusions with arguments and report on the provenance&lt;br/&gt;of the ingredients.  They can automatically discover and use&lt;br/&gt;consistent subsystems of inconsistent data.&lt;br/&gt;&lt;br/&gt;This project erects a naturally concurrent and distributed model and&lt;br/&gt;infrastructure for computation that makes it easier to build systems&lt;br/&gt;that are reliable in the face of natural failures and deliberate&lt;br/&gt;attacks.  It provides support for auditable and accountable systems&lt;br/&gt;that are robust and adaptable to novel applications.</AbstractNarration>
<MinAmdLetterDate>07/21/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/21/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116294</AwardID>
<Investigator>
<FirstName>Harold</FirstName>
<LastName>Abelson</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Harold Abelson</PI_FULL_NAME>
<EmailAddress>HAL@MIT.EDU</EmailAddress>
<PI_PHON>6172535856</PI_PHON>
<NSF_ID>000191572</NSF_ID>
<StartDate>07/21/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Gerald</FirstName>
<LastName>Sussman</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gerald J Sussman</PI_FULL_NAME>
<EmailAddress>gjs@mit.edu</EmailAddress>
<PI_PHON>6172535874</PI_PHON>
<NSF_ID>000830860</NSF_ID>
<StartDate>07/21/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394301</ZipCode>
<StreetAddress><![CDATA[77 MASSACHUSETTS AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~200000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Goal:<br />&nbsp;&nbsp;&nbsp; The aim of this project was to develop the Propagator Model, a<br />concurrent decentralized framework designed to support computing in<br />large, open, dynamic environments.&nbsp; It provides powerful tools for<br />organizing computations to operate effectively in a world of rapidly<br />changing and globally inconsistent data by adopting a fundamental<br />shift in viewpoint: the things manipulated by basic computing elements<br />are not fixed values.&nbsp; Rather, they are information about values, and<br />this information is continually refined as new information becomes<br />available.<br /><br />This project develops architectural and linguistic foundations for<br />systems that can operate effectively in environments where there is no<br />central management, and where one cannot rely on resources being<br />consistently available or consistently operated, and where the data is<br />rapidly changing and globally inconsistent.&nbsp; Using three mechanisms<br />implicit in the computational substrate: (1) constraint propagation,<br />(2) partial information structures, and (3) dependencies, systems<br />built on the propagator model automatically have the ability to<br />support their conclusions with arguments and report on the provenance<br />of the ingredients.&nbsp; They can automatically discover and use<br />consistent subsystems of inconsistent data.<br /><br />This project erects a naturally concurrent and distributed model and<br />infrastructure for computation that makes it easier to build systems<br />that are reliable in the face of natural failure and deliberate<br />attack.&nbsp; It provides support for auditable and accountable systems<br />that are robust and adaptable to novel applications.<br /><br /><br />Accomplishments:<br />&nbsp;&nbsp;&nbsp;&nbsp; Graduate student Micah Brodsky designed and built a prototype <br />Remote Procedure Call protocol.</p> <p>Micah Brodsky and P.I. Gerald Jay Sussman have employed Brodksy's<br /> RPC mechanism to extend our propagator system to allow multiple<br />independent propagator processes collaborate on solving a problem.&nbsp; <br />Using this mechanism we have made it possible for a propagator network<br />to be shared among multiple processes, so that each process is in charge <br />of updating cells and maintaining consistency in its own subnetwork.&nbsp;</p> <p>Brodsky and Sussman have implemented mechanisms for supporting<br />multiple agents that can access and query a shared propagator network.<br />Each agent has its own worldview: the set of premises believed or<br />tentatively assumend.&nbsp;&nbsp; So multiple agents can use the same<br />knowledge base, but have mutually inconsistent assumptions and<br />beliefs.&nbsp;&nbsp;&nbsp; An agent may employ this freedom to be&nbsp; "of two minds"<br /> about some subset of its beliefs.<br /><br />Distributed propagators have distributed state.&nbsp; We have made headway<br />along two different avenues into the problem of mutable state<br />management, a weak point for both pure functional languages and<br />propagators, and a bottleneck for distributed propagators.&nbsp; Micah<br />Brodsky and Pavel Panchekha (an undergraduate student) have invented a<br />novel mechanism for maintenance of distributed shared state that they<br />call a "History Maintenance System," a generalization of the notion of<br />a transaction log.&nbsp; The idea is an extension of the well-known<br />operational transform technique used in version-control systems for<br />text documents.&nbsp; Their idea extends the work to arbitrary data and it<br />ensures eventual consistency, without deadlock, even in the face of<br />transient communication failures.&nbsp; They have demonstrated their idea<br />in the context of a simple shared file system.<br /><br />The propagator system's support for contingent facts and multiple<br />worldviews...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Goal:     The aim of this project was to develop the Propagator Model, a concurrent decentralized framework designed to support computing in large, open, dynamic environments.  It provides powerful tools for organizing computations to operate effectively in a world of rapidly changing and globally inconsistent data by adopting a fundamental shift in viewpoint: the things manipulated by basic computing elements are not fixed values.  Rather, they are information about values, and this information is continually refined as new information becomes available.  This project develops architectural and linguistic foundations for systems that can operate effectively in environments where there is no central management, and where one cannot rely on resources being consistently available or consistently operated, and where the data is rapidly changing and globally inconsistent.  Using three mechanisms implicit in the computational substrate: (1) constraint propagation, (2) partial information structures, and (3) dependencies, systems built on the propagator model automatically have the ability to support their conclusions with arguments and report on the provenance of the ingredients.  They can automatically discover and use consistent subsystems of inconsistent data.  This project erects a naturally concurrent and distributed model and infrastructure for computation that makes it easier to build systems that are reliable in the face of natural failure and deliberate attack.  It provides support for auditable and accountable systems that are robust and adaptable to novel applications.   Accomplishments:      Graduate student Micah Brodsky designed and built a prototype  Remote Procedure Call protocol.  Micah Brodsky and P.I. Gerald Jay Sussman have employed Brodksy's  RPC mechanism to extend our propagator system to allow multiple independent propagator processes collaborate on solving a problem.   Using this mechanism we have made it possible for a propagator network to be shared among multiple processes, so that each process is in charge  of updating cells and maintaining consistency in its own subnetwork.   Brodsky and Sussman have implemented mechanisms for supporting multiple agents that can access and query a shared propagator network. Each agent has its own worldview: the set of premises believed or tentatively assumend.   So multiple agents can use the same knowledge base, but have mutually inconsistent assumptions and beliefs.    An agent may employ this freedom to be  "of two minds"  about some subset of its beliefs.  Distributed propagators have distributed state.  We have made headway along two different avenues into the problem of mutable state management, a weak point for both pure functional languages and propagators, and a bottleneck for distributed propagators.  Micah Brodsky and Pavel Panchekha (an undergraduate student) have invented a novel mechanism for maintenance of distributed shared state that they call a "History Maintenance System," a generalization of the notion of a transaction log.  The idea is an extension of the well-known operational transform technique used in version-control systems for text documents.  Their idea extends the work to arbitrary data and it ensures eventual consistency, without deadlock, even in the face of transient communication failures.  They have demonstrated their idea in the context of a simple shared file system.  The propagator system's support for contingent facts and multiple worldviews allows logical mutation via worldview changes on natively immutable or monotonic primitive data types.  So, based on new information, old values contingent on hypothetical assumptions can be kicked out and replaced with new values contingent on new, dynamically generated hypotheses.   Graduate student Ian Jacobi and Gerald Jay  Sussman have constructed a mechanism to integrate the control of  program flow in a dynamic fashion, taking into account the need to  support multiple world-views and a...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
