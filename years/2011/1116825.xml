<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research and RUI: Static and Dynamic Analysis for Cooperative Concurrency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2011</AwardEffectiveDate>
<AwardExpirationDate>06/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>134059.00</AwardTotalIntnAmount>
<AwardAmount>134059</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The widespread adoption of multicore processors requires multithreaded&lt;br/&gt;software to exploit these hardware resources.  Unfortunately, the&lt;br/&gt;construction and validation of reliable concurrent software currently&lt;br/&gt;requires extraordinary effort, due to unanticipated interactions&lt;br/&gt;between concurrent threads.  Thus, developing better programming&lt;br/&gt;techniques and tools for concurrent programming is essential.  This&lt;br/&gt;research develops a cooperative programming methodology for&lt;br/&gt;multithreaded software, based on the philosophy that all thread&lt;br/&gt;interference must be explicitly documented via source-level "yield"&lt;br/&gt;annotations by the programmer.&lt;br/&gt;&lt;br/&gt;The project will investigate both static and dynamic checking&lt;br/&gt;techniques to verify the correctness of yield annotations.  Once&lt;br/&gt;verified, these annotations guarantee that code executed between&lt;br/&gt;successive yields is serializable and thus amenable to sequential&lt;br/&gt;reasoning.  Moreover, yield-free code is deterministic.  Despite&lt;br/&gt;provided these strong safety guarantees, this methodology does not&lt;br/&gt;impact program performance.  The cooperative methodology provides a&lt;br/&gt;robust foundation for multithreaded software and can potentially&lt;br/&gt;transform the principles and practices of multithreaded software&lt;br/&gt;engineering.  This work on cooperability will also provide research&lt;br/&gt;opportunities for graduate and undergraduate students, and it will&lt;br/&gt;support endeavors to provide access to science education for all&lt;br/&gt;students.</AbstractNarration>
<MinAmdLetterDate>06/27/2011</MinAmdLetterDate>
<MaxAmdLetterDate>06/27/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116825</AwardID>
<Investigator>
<FirstName>Stephen</FirstName>
<LastName>Freund</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephen N Freund</PI_FULL_NAME>
<EmailAddress>freund@cs.williams.edu</EmailAddress>
<PI_PHON>4135974260</PI_PHON>
<NSF_ID>000110974</NSF_ID>
<StartDate>06/27/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Williams College</Name>
<CityName>Williamstown</CityName>
<ZipCode>012672600</ZipCode>
<PhoneNumber>4135974352</PhoneNumber>
<StreetAddress>880 Main St.</StreetAddress>
<StreetAddress2><![CDATA[Hopkins Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>020665972</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PRESIDENT &amp; TRUSTEES OF WILLIAMS COLLEGE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020665972</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Williams College]]></Name>
<CityName>Williamstown</CityName>
<StateCode>MA</StateCode>
<ZipCode>012672600</ZipCode>
<StreetAddress><![CDATA[880 Main St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~134059</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="p1">The nation's computing infrastructure plays a central role in all aspects of our society. Despite the prominence and importance of this infrastructure, constructing reliable software remains extremely challenging. Faulty software can have an enormous damaging effect on the economy, security, privacy, and even personal safety.</p> <p class="p2">Most computing systems now use multicore or multiprocessor architectures capable of performing multiple tasks at the same time. This ability to run concurrent threads of control has enabled computations at scales previously unimaginable. However, threads may interfere with each other in subtle ways if the programmer does not properly coordinate their behavior. Errors caused by such unanticipated interactions are a particularly pernicious type of defect. They are difficult to discover during testing since they typically happen only intermittently and are discovered long after the damaging interference occurs.</p> <p class="p4">This grant explored a programming methodology to support more reliable multithreaded software development. Specifically, we investigated a cooperative programming methodology based on the philosophy that all thread interference must be explicitly documented by the programmer via source-level 'yield' annotations. If a program contains yield annotations at all possible interference points, it is much easier to reason about the program's behavior and to validate its correctness since those annotations mark all possible places where interference may occur.&nbsp;</p> <p class="p4">As part of this work, we developed specification techniques for 'yield' annotations and designed programming tools to help programmers ensure that the cooperative programming methodology is safely followed. These programming tools include both static and dynamic analyses, with an emphasis on ensuring their reasoning is precise enough to be useful and scalable to large pieces of software.</p> <p class="p4">The intellectual merit and scientific contributions of this work include the development of a programming methodology supporting more reliable software construction together with analysis tools to enforce that methodology. It also pushes forward the state-of-the-art in program analysis techniques for concurrent systems. The techniques studied are able to identify and document thread interference and enforce noninterference in yield-free code fragments.</p> <p class="p4">This work has supported numerous undergraduate research students who received valuable training in performing scientific research. Several of the students are now pursuing advanced degrees. In addition, we have participated in a number of curricular efforts and tutorials to improve and broaden the dissemination of our work on concurrent programming and program analysis.</p> <p class="p4">The greatest broader impact of our work on cooperative programming is improving the reliability and robustness of the nation's software infrastructure. This methodology and associated checkers can prevent common, but potentially highly damaging, defects due to improper coordination among threads. By integrating new methodologies like cooperative programming into computer science curricula, our work may also lead to wide adoption of improved software engineering practices.</p><br> <p>            Last Modified: 08/05/2015<br>      Modified by: Stephen&nbsp;N&nbsp;Freund</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[The nation's computing infrastructure plays a central role in all aspects of our society. Despite the prominence and importance of this infrastructure, constructing reliable software remains extremely challenging. Faulty software can have an enormous damaging effect on the economy, security, privacy, and even personal safety. Most computing systems now use multicore or multiprocessor architectures capable of performing multiple tasks at the same time. This ability to run concurrent threads of control has enabled computations at scales previously unimaginable. However, threads may interfere with each other in subtle ways if the programmer does not properly coordinate their behavior. Errors caused by such unanticipated interactions are a particularly pernicious type of defect. They are difficult to discover during testing since they typically happen only intermittently and are discovered long after the damaging interference occurs. This grant explored a programming methodology to support more reliable multithreaded software development. Specifically, we investigated a cooperative programming methodology based on the philosophy that all thread interference must be explicitly documented by the programmer via source-level 'yield' annotations. If a program contains yield annotations at all possible interference points, it is much easier to reason about the program's behavior and to validate its correctness since those annotations mark all possible places where interference may occur.  As part of this work, we developed specification techniques for 'yield' annotations and designed programming tools to help programmers ensure that the cooperative programming methodology is safely followed. These programming tools include both static and dynamic analyses, with an emphasis on ensuring their reasoning is precise enough to be useful and scalable to large pieces of software. The intellectual merit and scientific contributions of this work include the development of a programming methodology supporting more reliable software construction together with analysis tools to enforce that methodology. It also pushes forward the state-of-the-art in program analysis techniques for concurrent systems. The techniques studied are able to identify and document thread interference and enforce noninterference in yield-free code fragments. This work has supported numerous undergraduate research students who received valuable training in performing scientific research. Several of the students are now pursuing advanced degrees. In addition, we have participated in a number of curricular efforts and tutorials to improve and broaden the dissemination of our work on concurrent programming and program analysis. The greatest broader impact of our work on cooperative programming is improving the reliability and robustness of the nation's software infrastructure. This methodology and associated checkers can prevent common, but potentially highly damaging, defects due to improper coordination among threads. By integrating new methodologies like cooperative programming into computer science curricula, our work may also lead to wide adoption of improved software engineering practices.       Last Modified: 08/05/2015       Submitted by: Stephen N Freund]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
