<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Design Virtualization for Mainstream Programming of Reconfigurable Computers</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2012</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>539001</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Although reconfigurable computing (RC) devices have been widely shown to have significant performance and power advantages compared to other computing devices, mainstream usage of such devices has been resisted due to increased application design complexity caused by non-mainstream high-level synthesis, complex low-level debugging, lengthy compilation times often requiring hours or days, a lack of code portability, prohibitive device costs, among other challenges.  To address these problems, this study introduces RC virtualization to reduce the semantic gap between high-level applications and physical RC devices with hundreds of thousands of fine-grained resources. Whereas physical RC devices must be fine grained for flexibility and cost effectiveness, the proposed virtual RC devices, which are implemented atop such physical devices, can be specialized to the needs of different application domains to hide physical device complexity. As a result, the proposed virtualization enables rapid RC compilation that can complete in seconds as opposed to hours. Rapid RC compilation in turn enables mainstream design methodologies for debugging. Virtualization also enables application portability across physical RC devices, similar to how virtual machines achieve portable software code, in addition to tool portability that enables third-party tools to target any RC system. Finally, by combining virtualization with high-level synthesis from standardized parallel languages for heterogeneous accelerators (e.g., OpenCL), this study enables mainstream RC usage by enabling the design flow used by other mainstream computing devices.</AbstractNarration>
<MinAmdLetterDate>01/12/2012</MinAmdLetterDate>
<MaxAmdLetterDate>01/25/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1149285</AwardID>
<Investigator>
<FirstName>Greg</FirstName>
<LastName>Stitt</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Greg M Stitt</PI_FULL_NAME>
<EmailAddress>gstitt@ece.ufl.edu</EmailAddress>
<PI_PHON>3523923516</PI_PHON>
<NSF_ID>000508517</NSF_ID>
<StartDate>01/12/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Florida</Name>
<CityName>GAINESVILLE</CityName>
<ZipCode>326112002</ZipCode>
<PhoneNumber>3523923516</PhoneNumber>
<StreetAddress>1 UNIVERSITY OF FLORIDA</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>969663814</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF FLORIDA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>159621697</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Florida]]></Name>
<CityName/>
<StateCode>FL</StateCode>
<ZipCode>326116550</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~79262</FUND_OBLG>
<FUND_OBLG>2013~93330</FUND_OBLG>
<FUND_OBLG>2014~189565</FUND_OBLG>
<FUND_OBLG>2016~87843</FUND_OBLG>
<FUND_OBLG>2018~89001</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Numerous studies have demonstrated performance, power, and energy advantages of field-programmable gate arrays (FPGAs), but despite these advantages, FPGAs are not a mainstream technology due to a variety of productivity challenges. Two significant contributors to poor productivity are compilation times commonly taking hours and days, and a lack of portability across different devices and boards.</p> <p>This project addressed both of these productivity problems with virtual reconfigurable architectures implemented atop FPGAs (i.e. overlays). Whereas synthesis tools for FPGAs decompose an application into potentially millions of lookup tables (LUTs), overlays provide application-specialized resources (floating-point ALUs, FFTs, square root, etc.) that match the granularity of operations in the application. This abstraction reduces the input size to placement and routing by orders-of-magnitude, providing compilation speedup of over 10,000x compared to FPGA vendor tools. When combined with high-level synthesis from mainstream languages (e.g. C, OpenCL), this rapid compilation provides application developers with a tool flow that is comparable to most mainstream flows, which enables more widespread usage of FPGAs.</p> <p>In addition to providing rapid compilation, the overlays introduced in this project also enable application portability across different FPGAs and boards. Because applications are compiled on an overlay, those applications can run on any FPGA that can implement the overlay. In addition, board portability is accomplished by compiling the application onto virtual board resources, which the overlay maps onto the unique physical resources provided by each board. In addition to enabling portability, this virtualization strategy allows application developers to request a set of virtual resources that is appropriate for the application, which improves productivity by eliminating the burden of mapping an application onto a set of physical resources that may not naturally fit an application.</p> <p>The first overlay introduced by this project was intermediate fabrics, which used an architecture similar to FPGAs that consisted of an island-style interconnect with application-specialized computation resources. Although intermediate fabrics provided portability and fast compilation, this architecture was limited by a significant lookup-table overhead. To address this limitation, the project subsequently focused on optimizations that reduced this overhead, which provided more attractive tradeoffs between flexibility of the architecture and lookup-table overhead.</p> <p>Whereas intermediate fabrics support pipelines effectively, some applications also require flexible control logic. To address this need, the project introduced a variety of virtual finite state machine control overlays that provided compilation time and portability benefits, with tradeoffs between flexibility and overhead.</p> <p>The project additionally integrated datapath and pipeline overlays (intermediate fabrics and supernets) with the control overlays to enable a virtual architecture that can potentially implement any application. Although effective, this integrated architecture was still limited by resource overhead. To address this overhead more effectively, we introduced a recurrently generated overlay framework. With this framework, instead of creating a single overlay that could handle all anticipated functionality, we instead dynamically created a set of overlays with tunable levels of flexibility to support whatever overhead the developer is willing to accept. As an application is developed, all code is compiled to the overlay until requirements can no longer be met by that current overlay. At that point, our framework generates a new overlay, which is again used until current requirements are not met. With this approach, the time to generate an overlay is amortized across numerous application compilations, which provides rapid compilation for the majority of the development process. In addition, overhead can be reduced by minimizing flexibility due the ability to recurrently generate a new overlay when needed.</p> <p>As a complementary strategy for minimizing overhead, this project also introduced machine-learning techniques for generating FPGA-amenable approximations for different functions. Those techniques demonstrated Pareto-optimal tradeoffs between resource utilization and error, which enables usage in different scenarios where varying amounts of error can be tolerated.</p> <p>Broader impact outcomes include educational and outreach impacts. By introducing a technology that makes FPGAs more easily usable by domain scientists, more researchers can now use FPGAs, which helps advance the state-of-the-art in different sciences. The project heavily relied on research from under-represented students, including several female and two African American undergraduates, with nearly all the students continuing to graduate school, and two of the students pursuing PhDs. One of the African American students assisted the project as part of the University of Florida Summer Research Fellowship (SURF) program. Other outreach impacts included the forming of an engineering-excitement program that collaborated with a PhD in education and a principal at a low-income elementary school to identify ways to encourage excitement in engineering within under-represented groups at a young age. The project also involved visits to elementary schools in collaboration with Women in Electrical and Computer Engineering (WECE) to demonstrate basic engineering concepts with the goal of generating interest in engineering.</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/08/2019<br>      Modified by: Greg&nbsp;M&nbsp;Stitt</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Numerous studies have demonstrated performance, power, and energy advantages of field-programmable gate arrays (FPGAs), but despite these advantages, FPGAs are not a mainstream technology due to a variety of productivity challenges. Two significant contributors to poor productivity are compilation times commonly taking hours and days, and a lack of portability across different devices and boards.  This project addressed both of these productivity problems with virtual reconfigurable architectures implemented atop FPGAs (i.e. overlays). Whereas synthesis tools for FPGAs decompose an application into potentially millions of lookup tables (LUTs), overlays provide application-specialized resources (floating-point ALUs, FFTs, square root, etc.) that match the granularity of operations in the application. This abstraction reduces the input size to placement and routing by orders-of-magnitude, providing compilation speedup of over 10,000x compared to FPGA vendor tools. When combined with high-level synthesis from mainstream languages (e.g. C, OpenCL), this rapid compilation provides application developers with a tool flow that is comparable to most mainstream flows, which enables more widespread usage of FPGAs.  In addition to providing rapid compilation, the overlays introduced in this project also enable application portability across different FPGAs and boards. Because applications are compiled on an overlay, those applications can run on any FPGA that can implement the overlay. In addition, board portability is accomplished by compiling the application onto virtual board resources, which the overlay maps onto the unique physical resources provided by each board. In addition to enabling portability, this virtualization strategy allows application developers to request a set of virtual resources that is appropriate for the application, which improves productivity by eliminating the burden of mapping an application onto a set of physical resources that may not naturally fit an application.  The first overlay introduced by this project was intermediate fabrics, which used an architecture similar to FPGAs that consisted of an island-style interconnect with application-specialized computation resources. Although intermediate fabrics provided portability and fast compilation, this architecture was limited by a significant lookup-table overhead. To address this limitation, the project subsequently focused on optimizations that reduced this overhead, which provided more attractive tradeoffs between flexibility of the architecture and lookup-table overhead.  Whereas intermediate fabrics support pipelines effectively, some applications also require flexible control logic. To address this need, the project introduced a variety of virtual finite state machine control overlays that provided compilation time and portability benefits, with tradeoffs between flexibility and overhead.  The project additionally integrated datapath and pipeline overlays (intermediate fabrics and supernets) with the control overlays to enable a virtual architecture that can potentially implement any application. Although effective, this integrated architecture was still limited by resource overhead. To address this overhead more effectively, we introduced a recurrently generated overlay framework. With this framework, instead of creating a single overlay that could handle all anticipated functionality, we instead dynamically created a set of overlays with tunable levels of flexibility to support whatever overhead the developer is willing to accept. As an application is developed, all code is compiled to the overlay until requirements can no longer be met by that current overlay. At that point, our framework generates a new overlay, which is again used until current requirements are not met. With this approach, the time to generate an overlay is amortized across numerous application compilations, which provides rapid compilation for the majority of the development process. In addition, overhead can be reduced by minimizing flexibility due the ability to recurrently generate a new overlay when needed.  As a complementary strategy for minimizing overhead, this project also introduced machine-learning techniques for generating FPGA-amenable approximations for different functions. Those techniques demonstrated Pareto-optimal tradeoffs between resource utilization and error, which enables usage in different scenarios where varying amounts of error can be tolerated.  Broader impact outcomes include educational and outreach impacts. By introducing a technology that makes FPGAs more easily usable by domain scientists, more researchers can now use FPGAs, which helps advance the state-of-the-art in different sciences. The project heavily relied on research from under-represented students, including several female and two African American undergraduates, with nearly all the students continuing to graduate school, and two of the students pursuing PhDs. One of the African American students assisted the project as part of the University of Florida Summer Research Fellowship (SURF) program. Other outreach impacts included the forming of an engineering-excitement program that collaborated with a PhD in education and a principal at a low-income elementary school to identify ways to encourage excitement in engineering within under-represented groups at a young age. The project also involved visits to elementary schools in collaboration with Women in Electrical and Computer Engineering (WECE) to demonstrate basic engineering concepts with the goal of generating interest in engineering.          Last Modified: 10/08/2019       Submitted by: Greg M Stitt]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
