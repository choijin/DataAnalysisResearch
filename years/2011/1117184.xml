<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Generation of High-Quality Tests by Treating Tests as Proof Encoding</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>495258.00</AwardTotalIntnAmount>
<AwardAmount>495258</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Verification is a bottleneck of crisis proportions in the design&lt;br/&gt;of the hardware and software systems society depends on.  The two&lt;br/&gt;main approaches to verification are formal verification and&lt;br/&gt;testing. Formal verification has the advantage that it rules out&lt;br/&gt;the existence of any logical bugs that violate the properties&lt;br/&gt;under consideration. Unfortunately, current formal methods are&lt;br/&gt;not scalable and cannot be directly applied to entire designs. In&lt;br/&gt;contrast, testing is very scalable and is therefore the method of&lt;br/&gt;choice in practice. The disadvantage of testing is that it does&lt;br/&gt;not rule out the existence of bugs, and bugs that escape the&lt;br/&gt;testing process can lead to recalls, software crashes, and even&lt;br/&gt;the loss of life. The research proposed will make testing more&lt;br/&gt;effective by developing methods of test generation that reduce&lt;br/&gt;the probability of missing bugs while simultaneously keeping the&lt;br/&gt;number of tests generated relatively small.&lt;br/&gt;&lt;br/&gt;The proposed research is based on the new idea that tests can be&lt;br/&gt;thought of as encodings of proofs. This is a fundamentally&lt;br/&gt;different way of viewing testing, which is traditionally thought&lt;br/&gt;of as a method for sampling the space of all possible system&lt;br/&gt;behaviors. The research will explore several potentially&lt;br/&gt;tranformative directions. The first is that one can effectively&lt;br/&gt;generate small and complete test sets, i.e., tests sets that rule&lt;br/&gt;out the existence of bugs. Another direction is that testing&lt;br/&gt;regimes can be compared by checking to see which lead to test&lt;br/&gt;sets that are closest to encoding relevant proofs.  A third&lt;br/&gt;direction is to establish strong connections that bridge the gap&lt;br/&gt;between formal verification and testing. Finally, the proposed&lt;br/&gt;research will lead to the development of efficient algorithms for&lt;br/&gt;test generation that will be applied to a range of important&lt;br/&gt;problems arising in hardware and software verification.</AbstractNarration>
<MinAmdLetterDate>06/30/2011</MinAmdLetterDate>
<MaxAmdLetterDate>06/30/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1117184</AwardID>
<Investigator>
<FirstName>Panagiotis</FirstName>
<LastName>Manolios</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Panagiotis Manolios</PI_FULL_NAME>
<EmailAddress>pete@ccs.neu.edu</EmailAddress>
<PI_PHON>6173733694</PI_PHON>
<NSF_ID>000186555</NSF_ID>
<StartDate>06/30/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Evgueni</FirstName>
<LastName>Goldberg</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Evgueni Goldberg</PI_FULL_NAME>
<EmailAddress>eigold@ccs.neu.edu</EmailAddress>
<PI_PHON>6173735600</PI_PHON>
<NSF_ID>000555208</NSF_ID>
<StartDate>06/30/2011</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northeastern University</Name>
<CityName>BOSTON</CityName>
<ZipCode>021155005</ZipCode>
<PhoneNumber>6173733004</PhoneNumber>
<StreetAddress>360 HUNTINGTON AVE</StreetAddress>
<StreetAddress2><![CDATA[177-500]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001423631</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHEASTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001423631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northeastern University]]></Name>
<CityName>BOSTON</CityName>
<StateCode>MA</StateCode>
<ZipCode>021155005</ZipCode>
<StreetAddress><![CDATA[360 HUNTINGTON AVE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~495258</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The processing, storage, analysis and distribution of data using computational methods corresponds to a significant portion of the US economy.&nbsp; A basic, fundamental research question is how to effectively model and analyze such computational systems with the goal of engineering robust, reliable, safe and secure systems. During the course of this project we have explored how to synergystically combine the two basic paradigms used for this purpose: proofs and testing. We developed fundamental methods that can be used to generate high-quality tests, by treating a set of tests as an encoding of a proof that a property under consideration holds. A test is "high-quality" if it meaningfully contributes in a fundamental way to a proof of the property. We have used this insight to develop equivalence checking algorithms. Such algorithms are widely used to ensure that local changes to systems, say to satisfy some non-functional design constraints, do not change their global functional behavior of the system under consideration in unexpected ways. We developed new algorithms for performing quantifier elimination, a basic operation used to manipulate logical formulas arising in the analysis of systems. Improvements in quantifier elimination algorithms can enable numerous new applications.&nbsp; We developed refinement frameworks for reasoning about optimized reactive systems, systems that maintain an ongoing interaction with their environment. We developed methods that allow us to significantly extend the kinds of systems that can be automatically analyzed using theorem proving and model-checking technology. Finally, we developed user-friendly methods for modeling, specifying and analyzing systems using computer-aided reasoning tools. We have used these tools to teach over 1,000 undergraduate students how to model and reason about computation. Teaching the next generation of engineers how to build reliable systems by using the advances we developed will allow society to benefit from more secure, reliable and safe systems in the future.</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/20/2017<br>      Modified by: Panagiotis&nbsp;Manolios</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The processing, storage, analysis and distribution of data using computational methods corresponds to a significant portion of the US economy.  A basic, fundamental research question is how to effectively model and analyze such computational systems with the goal of engineering robust, reliable, safe and secure systems. During the course of this project we have explored how to synergystically combine the two basic paradigms used for this purpose: proofs and testing. We developed fundamental methods that can be used to generate high-quality tests, by treating a set of tests as an encoding of a proof that a property under consideration holds. A test is "high-quality" if it meaningfully contributes in a fundamental way to a proof of the property. We have used this insight to develop equivalence checking algorithms. Such algorithms are widely used to ensure that local changes to systems, say to satisfy some non-functional design constraints, do not change their global functional behavior of the system under consideration in unexpected ways. We developed new algorithms for performing quantifier elimination, a basic operation used to manipulate logical formulas arising in the analysis of systems. Improvements in quantifier elimination algorithms can enable numerous new applications.  We developed refinement frameworks for reasoning about optimized reactive systems, systems that maintain an ongoing interaction with their environment. We developed methods that allow us to significantly extend the kinds of systems that can be automatically analyzed using theorem proving and model-checking technology. Finally, we developed user-friendly methods for modeling, specifying and analyzing systems using computer-aided reasoning tools. We have used these tools to teach over 1,000 undergraduate students how to model and reason about computation. Teaching the next generation of engineers how to build reliable systems by using the advances we developed will allow society to benefit from more secure, reliable and safe systems in the future.          Last Modified: 09/20/2017       Submitted by: Panagiotis Manolios]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
