<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Single Assignment Architecture / Single Assignment Compiler</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>153000.00</AwardTotalIntnAmount>
<AwardAmount>153000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Today, practically all processors employ instruction set architectures which are functionally&lt;br/&gt;equivalent to each other. Compiler/micro-architecture cooperation using these traditional&lt;br/&gt;representations has already reached the point of diminishing returns. This project therefore&lt;br/&gt;investigates the domain of single assignment program representations and direct support of this&lt;br/&gt;domain through micro-architecture implementation as a key concept that can break the barriers&lt;br/&gt;between the compilers and architectures.  If successful, this new approach can have a significant&lt;br/&gt;impact on the design of future processors, design of compiler internal representations as well as&lt;br/&gt;the back-end of the compilers. It can also affect how parallelism is exploited at various&lt;br/&gt;granularities and how various optimizations are carried out.  The investigated framework can help&lt;br/&gt;revitalize computer architecture and compiler optimization research by opening up unexplored paths&lt;br/&gt;for research in high-performance systems.  Consequently, it can affect every field of science and&lt;br/&gt;commerce which rely on high-performance computation. &lt;br/&gt;&lt;br/&gt;Compiler/hardware integration around the concept of single-assignment form has many benefits&lt;br/&gt;spanning three fields. First, in the area of process synchronization it provides the opportunity to&lt;br/&gt;eliminate the need for explicit synchronization. Second, in the field of micro-architecture renaming&lt;br/&gt;of instruction streams becomes substantially simpler, micro-architectures can become loop-aware,&lt;br/&gt;renamed instruction streams can be re-renamed and compiler techniques such as partial redundancy&lt;br/&gt;elimination or constant propagation can dynamically be performed by the micro-architecture.&lt;br/&gt;Finally, the compilers can focus on what they do best by sharing a common representation with the&lt;br/&gt;micro-architecture. As a result, many key optimizations can be efficiently performed. Within&lt;br/&gt;this paradigm, it becomes possible to develop new optimization algorithms which will rely on the&lt;br/&gt;micro-architecture to perform the optimization using analysis performed by the compilers.</AbstractNarration>
<MinAmdLetterDate>07/13/2011</MinAmdLetterDate>
<MaxAmdLetterDate>07/13/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1116551</AwardID>
<Investigator>
<FirstName>Soner</FirstName>
<LastName>Onder</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Soner Onder</PI_FULL_NAME>
<EmailAddress>soner@mtu.edu</EmailAddress>
<PI_PHON>9064872123</PI_PHON>
<NSF_ID>000207375</NSF_ID>
<StartDate>07/13/2011</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Michigan Technological University</Name>
<CityName>Houghton</CityName>
<ZipCode>499311295</ZipCode>
<PhoneNumber>9064871885</PhoneNumber>
<StreetAddress>1400 Townsend Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>065453268</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MICHIGAN TECHNOLOGICAL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>065453268</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Michigan Technological University]]></Name>
<CityName>Houghton</CityName>
<StateCode>MI</StateCode>
<ZipCode>499311295</ZipCode>
<StreetAddress><![CDATA[1400 Townsend Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~153000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The current industrial trend for enhancing computer performance is to offer processors with multiple cores due to technological constraints which prevent higher clock speeds at reasonable power consumption levels. While they provide increased throughput, multi-core processors require parallel programs to take advantage of their processing capability. Through this grant, we have developed new execution models which can remove several existing barriers in exploiting parallelism from a sequential program. These models rely on a single program representation that is used by the compilers as well as the processor itself. The most promising execution model we have developed is demand-driven execution of imperative programs. Demand-driven execution starts from the outputs of a program, progressing towards its inputs and finds all instructions eligible for execution in a parallel fashion during the process. Although demand-driven execution models have been tried in the past, these prior attempts worked only with functional programs, whereas the dominant programming languages used by the software industry today are imperative programing languages such as Java or C.<br /><br />Our developed techniques will make demand-driven processors capable of executing programs written in these languages efficiently. Our work indicates that these demand-driven processors can be built by using many parallel processor cores just like existing processors. However, unlike existing processors, they can collaboratively speed-up the execution speed of a single program without developing a parallel version of the program.</p> <p><br />Although this one year grant provided a much needed support for the initial forming and testing of the ideas, additional effort is still necessary before we can bring these models to a level that the industry can take over to implement these ideas in actual processors.&nbsp; This grant has provided partial support for three PhD students and a MSc student and helped them progress towards their degrees. Doing so, it has contributed to the nation's future work force who can advance the frontiers of science.</p><br> <p>            Last Modified: 10/28/2013<br>      Modified by: Soner&nbsp;Onder</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The current industrial trend for enhancing computer performance is to offer processors with multiple cores due to technological constraints which prevent higher clock speeds at reasonable power consumption levels. While they provide increased throughput, multi-core processors require parallel programs to take advantage of their processing capability. Through this grant, we have developed new execution models which can remove several existing barriers in exploiting parallelism from a sequential program. These models rely on a single program representation that is used by the compilers as well as the processor itself. The most promising execution model we have developed is demand-driven execution of imperative programs. Demand-driven execution starts from the outputs of a program, progressing towards its inputs and finds all instructions eligible for execution in a parallel fashion during the process. Although demand-driven execution models have been tried in the past, these prior attempts worked only with functional programs, whereas the dominant programming languages used by the software industry today are imperative programing languages such as Java or C.  Our developed techniques will make demand-driven processors capable of executing programs written in these languages efficiently. Our work indicates that these demand-driven processors can be built by using many parallel processor cores just like existing processors. However, unlike existing processors, they can collaboratively speed-up the execution speed of a single program without developing a parallel version of the program.   Although this one year grant provided a much needed support for the initial forming and testing of the ideas, additional effort is still necessary before we can bring these models to a level that the industry can take over to implement these ideas in actual processors.  This grant has provided partial support for three PhD students and a MSc student and helped them progress towards their degrees. Doing so, it has contributed to the nation's future work force who can advance the frontiers of science.       Last Modified: 10/28/2013       Submitted by: Soner Onder]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
