<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Collaborative Research: Leveraging Graph Databases for Incremental and Scalable Symbolic Analysis and Verification of Web Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>02/28/2018</AwardExpirationDate>
<AwardTotalIntnAmount>99989.00</AwardTotalIntnAmount>
<AwardAmount>99989</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern human society relies heavily on web applications and is deeply affected by their poor dependability. Unfortunately, no matter how much effort is put into verification and validation of software, existing techniques are inherently limited, and software is routinely released with bugs and issues that limit its functionality and can dramatically affect the user experience. This project investigates an approach that has the potential to significantly improve the scalability and effectiveness of symbolic program analysis and verification techniques, that will improve the dependability of modern web applications.&lt;br/&gt;&lt;br/&gt;This project develops techniques and tools that use symbolic execution and automata-based verification techniques to automatically analyze and verify web applications, and store results of symbolic analyses in a graph database for efficient storage, and retrieval. The methods use incremental and differential analysis strategies that utilize the graph database in order to improve scalability and effectiveness of software analysis and verification. The project trains graduate students, and will make its artifacts publicly available to other researchers and educators.</AbstractNarration>
<MinAmdLetterDate>07/24/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/24/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1548848</AwardID>
<Investigator>
<FirstName>Tevfik</FirstName>
<LastName>Bultan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tevfik Bultan</PI_FULL_NAME>
<EmailAddress>bultan@cs.ucsb.edu</EmailAddress>
<PI_PHON>8058933735</PI_PHON>
<NSF_ID>000232096</NSF_ID>
<StartDate>07/24/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Xifeng</FirstName>
<LastName>Yan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Xifeng Yan</PI_FULL_NAME>
<EmailAddress>xyan@cs.ucsb.edu</EmailAddress>
<PI_PHON>8058933136</PI_PHON>
<NSF_ID>000507747</NSF_ID>
<StartDate>07/24/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Barbara</Name>
<CityName>Santa Barbara</CityName>
<ZipCode>931062050</ZipCode>
<PhoneNumber>8058934188</PhoneNumber>
<StreetAddress>Office of Research</StreetAddress>
<StreetAddress2><![CDATA[Rm 3227 Cheadle Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA24</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>094878394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SANTA BARBARA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Santa Barbara]]></Name>
<CityName>Santa Barbara</CityName>
<StateCode>CA</StateCode>
<ZipCode>931065110</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA24</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~99989</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The main goal of this project was to develop scalable program analysis techniques to improve security and dependability of software systems. Within the scope of this project, we have developed several novel program analysis techniques and improved their scalability.&nbsp;</p> <p>We developed novel constraint solving and model counting techniques for handling both numeric and string constraints and their combinations. We implemented our results in a novel constraint solver called ABC that stores constraints as automata. To improve scalability of constraint based program analysis, we developed a constraint database called Cashew that can cache numeric and string constraints and model counting queries. We conducted empirical studies that demonstrate that constraint caching can significantly improve the performance of symbolic and quantitative program analyses.</p> <p>Our results on constraint cashing demonstrate that using appropriate constraint databases, the scalability of symbolic program analysis can be significantly improved.</p> <p>We developed a novel static, scalable analysis technique for detecting side channels in software systems based on symbolic cost analysis of program paths.&nbsp; We implemented our symbolic path cost analysis technique for detecting side channels in a prototype tool, CoCo-Channel (Compositional Constraint based side Channel analyzer), for analyzing Java programs.</p> <p>We developed symbolic analysis techniques for detecting vulnerabilities that are due to adaptive side-channel attacks, and synthesizing attacks that exploit the identified vulnerabilities.</p> <p>Our results on side channel analysis demonstrate that symbolic execution techniques, when combined with automata-based model-counting constraint solvers, can be used to identify side channels in software applications. Side channel analysis is a very important problem in computing since it can be used to identify leakage of privileged information, which is crucial for dependability of modern software systems.</p> <p>Our results on automated attack synthesis enable us to identify the attacks that malicious users can launch against software systems.&nbsp; This knowledge is necessary for remedying existing vulnerabilities.</p> <p>We developed a static analysis technique for iOS executables for checking API call vulnerabilities.&nbsp; Using a combination of dependency analysis and string analysis, we were able to detect potential violations of Apple&rsquo;s API policies (such as restricted use of private/sensitive APIs) in iOS executables.</p> <p>Our results on information-flow tracking show that it is feasible to perform accurate forensic analysis of attacks in real-world scenarios. This can help making software systems more secure against the increasingly common phenomenon of advanced persistent threats.</p> <p>The results from the research conducted within the scope of this project were published in international conferences and presented to the international research community. PIs gave invited, distinguished and keynote talks to present the research results they obtained within the scope of this project. The students who participated in this research project have gained valuable research experience and training. They have furthered their education and improved their research skills.</p><br> <p>            Last Modified: 05/22/2018<br>      Modified by: Tevfik&nbsp;Bultan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The main goal of this project was to develop scalable program analysis techniques to improve security and dependability of software systems. Within the scope of this project, we have developed several novel program analysis techniques and improved their scalability.   We developed novel constraint solving and model counting techniques for handling both numeric and string constraints and their combinations. We implemented our results in a novel constraint solver called ABC that stores constraints as automata. To improve scalability of constraint based program analysis, we developed a constraint database called Cashew that can cache numeric and string constraints and model counting queries. We conducted empirical studies that demonstrate that constraint caching can significantly improve the performance of symbolic and quantitative program analyses.  Our results on constraint cashing demonstrate that using appropriate constraint databases, the scalability of symbolic program analysis can be significantly improved.  We developed a novel static, scalable analysis technique for detecting side channels in software systems based on symbolic cost analysis of program paths.  We implemented our symbolic path cost analysis technique for detecting side channels in a prototype tool, CoCo-Channel (Compositional Constraint based side Channel analyzer), for analyzing Java programs.  We developed symbolic analysis techniques for detecting vulnerabilities that are due to adaptive side-channel attacks, and synthesizing attacks that exploit the identified vulnerabilities.  Our results on side channel analysis demonstrate that symbolic execution techniques, when combined with automata-based model-counting constraint solvers, can be used to identify side channels in software applications. Side channel analysis is a very important problem in computing since it can be used to identify leakage of privileged information, which is crucial for dependability of modern software systems.  Our results on automated attack synthesis enable us to identify the attacks that malicious users can launch against software systems.  This knowledge is necessary for remedying existing vulnerabilities.  We developed a static analysis technique for iOS executables for checking API call vulnerabilities.  Using a combination of dependency analysis and string analysis, we were able to detect potential violations of Apple?s API policies (such as restricted use of private/sensitive APIs) in iOS executables.  Our results on information-flow tracking show that it is feasible to perform accurate forensic analysis of attacks in real-world scenarios. This can help making software systems more secure against the increasingly common phenomenon of advanced persistent threats.  The results from the research conducted within the scope of this project were published in international conferences and presented to the international research community. PIs gave invited, distinguished and keynote talks to present the research results they obtained within the scope of this project. The students who participated in this research project have gained valuable research experience and training. They have furthered their education and improved their research skills.       Last Modified: 05/22/2018       Submitted by: Tevfik Bultan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
