<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small:  Control-Flow and Data-Flow Analysis of Android Software: Foundations and Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>470208.00</AwardTotalIntnAmount>
<AwardAmount>470208</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In recent years the growth in the number of computing devices has been driven primarily by smartphones and tablets. For such devices, Android is the dominant platform. The correctness, security, and performance of Android devices is of paramount importance for many millions of users. However, the scientific foundations for software analysis, verification, and transformation in this area are still very inadequate. The proposed work will significantly advance the state of the art in software analysis for Android. The results will be made available to other researchers, which will help design new analyses to improve software quality. Integration of research and education will develop the expertise of new developers of mobile software. Recruitment of underrepresented students will contribute to increased diversity in computing. Through commercial and academic software tools, new software analyses could enter real-world use in the development toolkits of Android programmers, resulting in better software quality and faster time to market.&lt;br/&gt;&lt;br/&gt;Android applications are framework-based and event-driven. The complex semantics of the framework event/callback model presents a major challenge to static analysis. The project will develop a precise semantic description that captures essential abstraction of the run-time execution model, including modeling of components, their interactions through calls and callbacks, and their handling of external events. Based on this semantics, the project will design a general program representation of application control flow and data flow, and will develop algorithms for constructing and traversing it. The resulting representation and algorithms can serve as basis for a wide variety of static analyses. Three exemplar client analyses will be designed and evaluated: (1) detection of resource leaks, (2) detection of energy-related defects, and (3) taint analysis. These analyses target important quality problems and can help improve the performance and security of Android software. A suite of public algorithm implementations and experimental subjects will be made publicly available, to enable development and evaluation of existing and new static analyses for Android.</AbstractNarration>
<MinAmdLetterDate>06/24/2015</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1526459</AwardID>
<Investigator>
<FirstName>Atanas</FirstName>
<LastName>Rountev</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Atanas Rountev</PI_FULL_NAME>
<EmailAddress>rountev@cse.ohio-state.edu</EmailAddress>
<PI_PHON>6142927203</PI_PHON>
<NSF_ID>000191396</NSF_ID>
<StartDate>06/24/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888735</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1960 Kenny Road]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>832127323</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001964634</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName>Columbus</CityName>
<StateCode>OH</StateCode>
<ZipCode>432101016</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~470208</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span style="color: black;">Android devices currently lead the worldwide market for smart phones, tablets, and appliances. The widespread use of these devices poses great demands on software quality. However, meeting these demands is very challenging. Both the software platforms and the accumulated developer expertise are immature compared to older areas of computing.  The available research expertise and automated tool support for improved software quality are also very limited. It is critical for researchers in software engineering and programming languages to contribute both foundational approaches and practical tools toward higher-quality software for Android devices. </span></p> <p><span style="color: black;"><span style="color: black;">An Android application is driven by a graphical user interface (GUI), with GUI objects responding to user actions. These objects and the event handlers associated with them ultimately determine the possible flow of control and data. We have developed the first static code analysis to model GUI-related Android objects, their flow through the application, and their interactions with each other via the abstractions defined by the Android platform.&nbsp; Our follow-up work builds on this GUI analysis to develop a new analysis of control-flow due to callbacks and window changes triggered by GUI user events. This analysis produces a general mathematical model of possible executions of the GUI, and the app code that would be triggered as part of these executions. <span style="color: black;"><span style="color: black;">This work enables algorithmic modeling of control/data flow that is  foundational for compiler analyses, instrumentation for  event/interaction profiling, static error checking, security analysis,  test generation, and automated debugging.  It provides a key component  to be used by program analysis researchers in the growing area of  Android software. </span></span></span></span></p> <p><span style="color: black;"><span style="color: black;">Based on this new approach for analysis of Android GUI behavior, we have developed automated detectors for energy-related defects in app code, as well as test generation techniques for sensor leak detection for Android phones, tablets, and smartwatches. Using mathematical models of possible GUI behaviors and their effects on resource usage, these techniques define algorithms to explore possible app behaviors and identify defects that may occur due to programmer mistakes. </span></span></p> <p><span style="color: black;"><span style="color: black;">Our techniques have been implemented in publicly-released software tools and have been used by other researchers in their own projects. <br /></span></span></p><br> <p>            Last Modified: 10/23/2019<br>      Modified by: Atanas&nbsp;Rountev</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Android devices currently lead the worldwide market for smart phones, tablets, and appliances. The widespread use of these devices poses great demands on software quality. However, meeting these demands is very challenging. Both the software platforms and the accumulated developer expertise are immature compared to older areas of computing.  The available research expertise and automated tool support for improved software quality are also very limited. It is critical for researchers in software engineering and programming languages to contribute both foundational approaches and practical tools toward higher-quality software for Android devices.   An Android application is driven by a graphical user interface (GUI), with GUI objects responding to user actions. These objects and the event handlers associated with them ultimately determine the possible flow of control and data. We have developed the first static code analysis to model GUI-related Android objects, their flow through the application, and their interactions with each other via the abstractions defined by the Android platform.  Our follow-up work builds on this GUI analysis to develop a new analysis of control-flow due to callbacks and window changes triggered by GUI user events. This analysis produces a general mathematical model of possible executions of the GUI, and the app code that would be triggered as part of these executions. This work enables algorithmic modeling of control/data flow that is  foundational for compiler analyses, instrumentation for  event/interaction profiling, static error checking, security analysis,  test generation, and automated debugging.  It provides a key component  to be used by program analysis researchers in the growing area of  Android software.   Based on this new approach for analysis of Android GUI behavior, we have developed automated detectors for energy-related defects in app code, as well as test generation techniques for sensor leak detection for Android phones, tablets, and smartwatches. Using mathematical models of possible GUI behaviors and their effects on resource usage, these techniques define algorithms to explore possible app behaviors and identify defects that may occur due to programmer mistakes.   Our techniques have been implemented in publicly-released software tools and have been used by other researchers in their own projects.         Last Modified: 10/23/2019       Submitted by: Atanas Rountev]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
