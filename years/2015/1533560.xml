<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: EXPL: CCA: Merging Parallel Run-times and Operating Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>298669.00</AwardTotalIntnAmount>
<AwardAmount>350669</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: XPS: EXPL: CCA: Merging Parallel Run-times and Operating Systems&lt;br/&gt;&lt;br/&gt;Parallelism, the ability to do break down larger tasks into smaller tasks that can be done simultaneously, is essential for applications to continue to become exponentially faster over time. Considerable effort has been placed and is being placed into research on how to achieve parallelism within hardware, programming languages, compilers, and algorithms. However, application software also depends on systems software, particularly the operating system kernel. Currently, the application software and the operating system kernel are very distinct domains with a high barrier between them, and only the operating system kernel has full access to the hardware. While this design exists for very good reasons, it may now limit the parallelism and thus the performance possible in applications. This project investigates an alternative design in which the application software and the operating system kernel are merged into one entity. The intellectual merits are several. First, such a design has not been previously studied in the context of parallelism---this project will determine if it is a good idea. Second, the design resonates with modern languages and run-time systems that are designed specifically with parallelism in mind---such systems can leverage the opportunity to use the operating system kernel and the hardware in new ways. Finally, the project team is well poised to carry out the investigation given their prior work in operating systems and virtualization for high performance computing. The project's broader significance and importance are based on the extent to which the alternative design can enhance performance and the amount of exploitable parallelism. If this is considerable, then the alternative design may be widely adopted and thus contribute to keeping computing performance, as experienced even by end-users, on its exponential track.&lt;br/&gt;&lt;br/&gt;The project is primarily concerned with allowing modern parallel run-time systems (and their applications) to be re-conceptualized as kernels in their own right. By being a kernel, a run-time can access the full hardware capabilities of the machine, and it can implement exactly the kernel abstractions that it needs to achieve its goals. The team is designing, implementing, and evaluating a kernel framework to support the porting and construction of parallel run-time systems for this model. Using a set of several current run-time systems and several different kinds of parallel hardware, the team is also investigating what kernel abstractions are useful within this model, as well as how to leverage kernel-only hardware features to better support the run-time systems. Both mature run-times which are to be ported to the model and nascent run-times that can be co-designed with the model are under consideration.  The project also integrates with another effort that is investigating a virtualization approach that may make it possible to support the new model simultaneously with the old model.</AbstractNarration>
<MinAmdLetterDate>06/25/2015</MinAmdLetterDate>
<MaxAmdLetterDate>02/20/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1533560</AwardID>
<Investigator>
<FirstName>Peter</FirstName>
<LastName>Dinda</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Peter A Dinda</PI_FULL_NAME>
<EmailAddress>pdinda@northwestern.edu</EmailAddress>
<PI_PHON>8474677859</PI_PHON>
<NSF_ID>000341788</NSF_ID>
<StartDate>06/25/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northwestern University</Name>
<CityName>Chicago</CityName>
<ZipCode>606114579</ZipCode>
<PhoneNumber>3125037955</PhoneNumber>
<StreetAddress>750 N. Lake Shore Drive</StreetAddress>
<StreetAddress2><![CDATA[Rubloff 7th Floor]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>160079455</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHWESTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005436803</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northwestern University]]></Name>
<CityName>Evanston</CityName>
<StateCode>IL</StateCode>
<ZipCode>602083118</ZipCode>
<StreetAddress><![CDATA[2145 Sheridan Road]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8283</Code>
<Text>Exploiting Parallel&amp;Scalabilty</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~298669</FUND_OBLG>
<FUND_OBLG>2017~12000</FUND_OBLG>
<FUND_OBLG>2018~12000</FUND_OBLG>
<FUND_OBLG>2019~12000</FUND_OBLG>
<FUND_OBLG>2020~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p id="docs-internal-guid-9f763cbb-7fff-0bdf-ce95-934b0026ac19" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The goal of this project was to deeply consider a new way to structure parallel systems.&nbsp; Parallelism lies at the heart of how to deliver the high computing performance necessary for science and engineering, but it is also something that is increasingly playing an important role for everyone as a substrate for machine learning.&nbsp; Indeed, even the average smartphone is now a parallel computer.&nbsp;&nbsp;&nbsp;&nbsp;</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The project studied the Hybrid Runtime (HRT) model, in which the traditional boundaries between the parallel application, runtime and operating system kernel are eliminated.&nbsp; This affords the application and runtime access to all hardware features, including privileged ones, and the ability to align kernel-level abstractions directly with their needs. &nbsp; However, the HRT model comes at the cost of needing to develop kernel-level code, which presents significantly greater challenges than those of traditional user-level code.&nbsp;</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">It was generally found that this tradeoff is a reasonable one. &nbsp; The HRT model is an appropriate and effective model for the parallel systems community. &nbsp; The project developed proof-of-concept HRTs for three parallel models (Legion, NESL, and OpenMP) that showed performance gains on modern large scale processors such as the Intel Xeon Phi.&nbsp; &nbsp; A range of kernel-only uses of hardware mechanisms were designed, built, and evaluated, including runtime-specialized uses of hardware interrupt masking and routing, and asynchronous event notification via hardware interrupts.&nbsp; &nbsp; Numerous kernel abstractions were also considered, including runtime-specialized hard real-time scheduling, specialized lightweight threads, and alternatives to memory protection via paging.&nbsp; Debugging of HRTs was also studied, resulting in some progress, but also many additional questions.&nbsp;&nbsp;</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The project's approach was largely empirical. &nbsp; The project developed its own kernel (and virtualization) framework for HRTs, and then used it as the basis for the research.&nbsp; The kernel framework, Nautilus, is designed for modern x86 computers, but it can also work on more esoteric processor variants such as the Xeon Phi, and on architectural simulators. &nbsp; Nautilus is open-source and publicly available. &nbsp; More broadly, the software developed in pursuing this research has been made publically available with open-source licensing (typically MIT, BSD, or GPL licenses).&nbsp;&nbsp;&nbsp;&nbsp;</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Significant training opportunities resulted from the project.&nbsp; 7 Ph.D. students, 6 MS students, 8 REU students,&nbsp; 6 undergraduates, and one high school student have been involved in the project.&nbsp; One Ph.D.graduated and started a tenure-track faculty position where he trains others. &nbsp; &nbsp; 3 M.S. students joined Ph.D. programs, while 3 undergraduates are in the process of applying.&nbsp; Northwestern&rsquo;s undergraduate operating systems course was entirely redesigned, leveraging the Nautilus kernel framework to create labs. &nbsp; A Northwestern graduate course in kernel and other low-level software development was created, and has so far trained over 100 students in this esoteric topic.&nbsp;&nbsp;</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The positive results of this exploratory project has, so far, resulted in two follow-on projects (along with two other institutions) that are trying to expand the HRT model to include parallel languages and theory, compilers, and malleable hardware.&nbsp; &nbsp; The Nautilus codebase described above is a key part of enabling this work.</span></p> <p><br /><br /></p><br> <p>            Last Modified: 11/08/2020<br>      Modified by: Peter&nbsp;A&nbsp;Dinda</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[The goal of this project was to deeply consider a new way to structure parallel systems.  Parallelism lies at the heart of how to deliver the high computing performance necessary for science and engineering, but it is also something that is increasingly playing an important role for everyone as a substrate for machine learning.  Indeed, even the average smartphone is now a parallel computer.        The project studied the Hybrid Runtime (HRT) model, in which the traditional boundaries between the parallel application, runtime and operating system kernel are eliminated.  This affords the application and runtime access to all hardware features, including privileged ones, and the ability to align kernel-level abstractions directly with their needs.   However, the HRT model comes at the cost of needing to develop kernel-level code, which presents significantly greater challenges than those of traditional user-level code.     It was generally found that this tradeoff is a reasonable one.   The HRT model is an appropriate and effective model for the parallel systems community.   The project developed proof-of-concept HRTs for three parallel models (Legion, NESL, and OpenMP) that showed performance gains on modern large scale processors such as the Intel Xeon Phi.    A range of kernel-only uses of hardware mechanisms were designed, built, and evaluated, including runtime-specialized uses of hardware interrupt masking and routing, and asynchronous event notification via hardware interrupts.    Numerous kernel abstractions were also considered, including runtime-specialized hard real-time scheduling, specialized lightweight threads, and alternatives to memory protection via paging.  Debugging of HRTs was also studied, resulting in some progress, but also many additional questions.      The project's approach was largely empirical.   The project developed its own kernel (and virtualization) framework for HRTs, and then used it as the basis for the research.  The kernel framework, Nautilus, is designed for modern x86 computers, but it can also work on more esoteric processor variants such as the Xeon Phi, and on architectural simulators.   Nautilus is open-source and publicly available.   More broadly, the software developed in pursuing this research has been made publically available with open-source licensing (typically MIT, BSD, or GPL licenses).        Significant training opportunities resulted from the project.  7 Ph.D. students, 6 MS students, 8 REU students,  6 undergraduates, and one high school student have been involved in the project.  One Ph.D.graduated and started a tenure-track faculty position where he trains others.     3 M.S. students joined Ph.D. programs, while 3 undergraduates are in the process of applying.  Northwestern’s undergraduate operating systems course was entirely redesigned, leveraging the Nautilus kernel framework to create labs.   A Northwestern graduate course in kernel and other low-level software development was created, and has so far trained over 100 students in this esoteric topic.      The positive results of this exploratory project has, so far, resulted in two follow-on projects (along with two other institutions) that are trying to expand the HRT model to include parallel languages and theory, compilers, and malleable hardware.    The Nautilus codebase described above is a key part of enabling this work.           Last Modified: 11/08/2020       Submitted by: Peter A Dinda]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
