<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CRII: SHF: Regression Testing for Projects with Distributed Software Histories</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/15/2016</AwardEffectiveDate>
<AwardExpirationDate>04/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>175000.00</AwardTotalIntnAmount>
<AwardAmount>183000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Developers practice regression testing -- running tests against each&lt;br/&gt;project commit -- to check that project changes do not break any&lt;br/&gt;functionality. While important, regression testing is expensive due to&lt;br/&gt;the number of tests and the number of commits. Regression test&lt;br/&gt;selection (RTS) techniques speed up regression testing by skipping to&lt;br/&gt;run tests that are not affected by recent changes, and regression test&lt;br/&gt;prioritization (RTP) techniques reorder tests to run failing tests&lt;br/&gt;faster. Existing regression techniques analyze only two adjacent&lt;br/&gt;commits, effectively assuming a linear software history. However, the&lt;br/&gt;revolution in version-control systems changed the shape of software&lt;br/&gt;histories. Distributed software histories are complex graphs of&lt;br/&gt;branches and merges, which do not match the simplistic view of the&lt;br/&gt;existing techniques. Although existing regression techniques can be&lt;br/&gt;run if a distributed software history is linearized, these techniques&lt;br/&gt;underutilize the data available in the distributed software history.&lt;br/&gt;&lt;br/&gt;To speed up regression testing, the PI proposes to design techniques&lt;br/&gt;that utilize the data available in the entire distributed software&lt;br/&gt;history. This project proposes four tasks to improve RTS and RTP: (1)&lt;br/&gt;non-adjacent commit reuse - discover likely optimal commit to be used&lt;br/&gt;in each analysis rather than always analyzing adjacent commits; (2)&lt;br/&gt;multi-commit analyses - design methods that analyze more than two&lt;br/&gt;commits rather than always analyzing only two commits; (3)&lt;br/&gt;command-aware methods - specialize the methods for various commands&lt;br/&gt;that create each commit rather than be command-unaware; and (4)&lt;br/&gt;unified implementation and evaluation - share the implementation and&lt;br/&gt;results among techniques, and evaluate the techniques on open-source&lt;br/&gt;and industrial projects. The broader impacts of improving RTS and RTP&lt;br/&gt;are to increase developers' productivity and reduce the resource usage&lt;br/&gt;during testing phases.</AbstractNarration>
<MinAmdLetterDate>05/18/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/15/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1566363</AwardID>
<Investigator>
<FirstName>Milos</FirstName>
<LastName>Gligoric</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Milos Gligoric</PI_FULL_NAME>
<EmailAddress>gligoric@utexas.edu</EmailAddress>
<PI_PHON>5124716424</PI_PHON>
<NSF_ID>000702992</NSF_ID>
<StartDate>05/18/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787121532</ZipCode>
<StreetAddress><![CDATA[1 University Station]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>026Y</Code>
<Text>CRII CISE Research Initiation</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>8228</Code>
<Text>CISE Resrch Initiatn Initiatve</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~175000</FUND_OBLG>
<FUND_OBLG>2017~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Regression testing -- running available tests at each project revision<br />-- is widely practiced in industry to check that project changes do<br />not break any working functionality. Although regression testing is<br />important, several studies estimate that regression testing accounts<br />for more than 50% of software maintenance cost, and the cost is<br />reportedly increasing. Regression test selection (RTS) techniques<br />speed up regression testing by skipping to run tests that are not<br />affected by recent project changes. Although existing RTS techniques<br />can speed up regression testing, these techniques became imprecise --<br />they may select many tests to run -- due to the evolution of software<br />development processes (e.g., commits are more frequent and developers<br />use distributed version-control systems).<br /><br />This project investigated several ways to improve precision of RTS<br />techniques and speed up regression testing and debugging. (1) We<br />studied the impact of behavior-preserving project changes, i.e.,<br />changes that have no impact on semantics of the project, on regression<br />testing and developed an RTS technique that improves precision in the<br />presence of such changes. (2) We developed a novel approach, inspired<br />by RTS, to speed up bisection debugging process that incrementally<br />analyzes software version histories. (3) We made the first step<br />towards an RTS technique that supports multiple programming languages.<br />(4) We designed a framework for checking correctness of RTS tools.<br /><br />The grant partially supported 17 papers, public release of six testing<br />tools and datasets (available from http://cozy.ece.utexas.edu), and<br />training of at least five graduate students (including one PhD thesis<br />and one MS thesis) and six undergraduate students; the undergraduate<br />students were supported by an REU Supplement, and three of these<br />students published two papers at top Software Engineering conferences.<br />The broader impacts also include the adoption of our tools by large<br />software organizations, as well as detection of dozes of bugs in<br />existing RTS tools. This research is a step towards more efficient<br />regression testing, thus helping millions of developers that practice<br />regression testing and everybody who depends on their software.</p><br> <p>            Last Modified: 07/20/2019<br>      Modified by: Milos&nbsp;Gligoric</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Regression testing -- running available tests at each project revision -- is widely practiced in industry to check that project changes do not break any working functionality. Although regression testing is important, several studies estimate that regression testing accounts for more than 50% of software maintenance cost, and the cost is reportedly increasing. Regression test selection (RTS) techniques speed up regression testing by skipping to run tests that are not affected by recent project changes. Although existing RTS techniques can speed up regression testing, these techniques became imprecise -- they may select many tests to run -- due to the evolution of software development processes (e.g., commits are more frequent and developers use distributed version-control systems).  This project investigated several ways to improve precision of RTS techniques and speed up regression testing and debugging. (1) We studied the impact of behavior-preserving project changes, i.e., changes that have no impact on semantics of the project, on regression testing and developed an RTS technique that improves precision in the presence of such changes. (2) We developed a novel approach, inspired by RTS, to speed up bisection debugging process that incrementally analyzes software version histories. (3) We made the first step towards an RTS technique that supports multiple programming languages. (4) We designed a framework for checking correctness of RTS tools.  The grant partially supported 17 papers, public release of six testing tools and datasets (available from http://cozy.ece.utexas.edu), and training of at least five graduate students (including one PhD thesis and one MS thesis) and six undergraduate students; the undergraduate students were supported by an REU Supplement, and three of these students published two papers at top Software Engineering conferences. The broader impacts also include the adoption of our tools by large software organizations, as well as detection of dozes of bugs in existing RTS tools. This research is a step towards more efficient regression testing, thus helping millions of developers that practice regression testing and everybody who depends on their software.       Last Modified: 07/20/2019       Submitted by: Milos Gligoric]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
