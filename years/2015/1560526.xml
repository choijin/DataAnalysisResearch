<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Conflict Minimization in Distributed Software Development</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2015</AwardEffectiveDate>
<AwardExpirationDate>04/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>427270.00</AwardTotalIntnAmount>
<AwardAmount>459270</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software development is a complex socio-technical activity typically occurring concurrently, in distributed teams, and within the larger organizational goals and context. Current development tools are overwhelmed by the scale of software-intensive systems, and often end up contributing to, rather than minimizing, information overload, and coordination breakdowns, which ultimately lead to software conflicts and project delays.&lt;br/&gt; &lt;br/&gt;This research seeks to establish an understanding of how past development data and team practices can be used to proactively identify dependencies and constraints across tasks, and schedule tasks so as to minimize conflicting changes in parallel, distributed development. This work will contribute: (1) conflict typology formalizing software conflicts and their interplay with organizational context, (2) knowledge about how to achieve improvements in productivity, quality, and development speed, (3) a suite of analysis techniques, design principles, tool prototypes, and interaction methods for conflict minimization in distributed, parallel development. Evaluation includes deployment to real software development teams and controlled experiments of the efficacy of the resulting tools. The broader impacts of the work are ultimately to enable software teams to develop software in a conflict-free environment and train students on critical processes associated with collaboration competency.</AbstractNarration>
<MinAmdLetterDate>05/31/2016</MinAmdLetterDate>
<MaxAmdLetterDate>04/23/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1560526</AwardID>
<Investigator>
<FirstName>Anita</FirstName>
<LastName>Sarma</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Anita Sarma</PI_FULL_NAME>
<EmailAddress>anita.sarma@oregonstate.edu</EmailAddress>
<PI_PHON>5417375985</PI_PHON>
<NSF_ID>000518767</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Oregon State University</Name>
<CityName>Corvallis</CityName>
<ZipCode>973318507</ZipCode>
<PhoneNumber>5417374933</PhoneNumber>
<StreetAddress>OREGON STATE UNIVERSITY</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>053599908</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OREGON STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053599908</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Oregon State University]]></Name>
<CityName>Corvallis</CityName>
<StateCode>OR</StateCode>
<ZipCode>973315501</ZipCode>
<StreetAddress><![CDATA[1148 Kelley Engineering Center]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~113421</FUND_OBLG>
<FUND_OBLG>2015~96822</FUND_OBLG>
<FUND_OBLG>2016~107344</FUND_OBLG>
<FUND_OBLG>2017~125683</FUND_OBLG>
<FUND_OBLG>2018~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Most software products are created by large, distributed teams where different members of the teams work concurrently on software that that has complex dependencies. Individual software developers have to understand the complex project dependencies, the organizational goals, and the development context when making and merging their changes with the rest of the team. When they fail to understand these socio-technical dependencies coordination breaks down. Current development tools are overwhelmed by the scale of software-intensive systems, and often end up contributing to, rather than minimizing, information overload, and coordination breakdowns. These breakdowns in turn result in software conflicts, resolution of which require significant developer effort.</p> <p>In this project, we explored ways to improve support for coordination by steering team development such that individual tasks in a team can be completed with minimal interference, and infusing collaboration competency into development teams and classrooms. As part of the proposal we archival analysis of software projects comprising millions of lines of code in GitHub, as well as in-field observations and survey studies to understand the frequency of software conflicts, their context of occurrence, and where and why developers face problems when resolving software conflicts. We then created a conflict typology to formalize the conflict occurrences and their interplay with development context. We then created several prototypes that coordinate individual tasks, use machine learning to predict the severity of software conflicts, and a new Integrated Development Editor that is designed to ease the resolution of merge conflicts. In addition to tools, we also devised several new ways for teaching software development in teams and techniques for identifying and resolving software conflicts.</p> <p>However, the impact is more than just on research. Many of the inventions from this research have been released as free, publicly available research prototypes. Some projects have begun to reshape how computer programmers are educated in higher education. The project also directly trained three doctoral and 4 masters students and 6 undergraduate students on research. Many of students are now faculty (2), have graduated and are now continuing with a doctoral study (1), or have secured jobs in industry as software engineers.&nbsp;</p> <p>The ideas from this research will continue to impact products, services, education, and our workforce for years to come, helping to improve the reliability, inclusiveness, and value of software over the coming decades.</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/26/2020<br>      Modified by: Anita&nbsp;Sarma</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Most software products are created by large, distributed teams where different members of the teams work concurrently on software that that has complex dependencies. Individual software developers have to understand the complex project dependencies, the organizational goals, and the development context when making and merging their changes with the rest of the team. When they fail to understand these socio-technical dependencies coordination breaks down. Current development tools are overwhelmed by the scale of software-intensive systems, and often end up contributing to, rather than minimizing, information overload, and coordination breakdowns. These breakdowns in turn result in software conflicts, resolution of which require significant developer effort.  In this project, we explored ways to improve support for coordination by steering team development such that individual tasks in a team can be completed with minimal interference, and infusing collaboration competency into development teams and classrooms. As part of the proposal we archival analysis of software projects comprising millions of lines of code in GitHub, as well as in-field observations and survey studies to understand the frequency of software conflicts, their context of occurrence, and where and why developers face problems when resolving software conflicts. We then created a conflict typology to formalize the conflict occurrences and their interplay with development context. We then created several prototypes that coordinate individual tasks, use machine learning to predict the severity of software conflicts, and a new Integrated Development Editor that is designed to ease the resolution of merge conflicts. In addition to tools, we also devised several new ways for teaching software development in teams and techniques for identifying and resolving software conflicts.  However, the impact is more than just on research. Many of the inventions from this research have been released as free, publicly available research prototypes. Some projects have begun to reshape how computer programmers are educated in higher education. The project also directly trained three doctoral and 4 masters students and 6 undergraduate students on research. Many of students are now faculty (2), have graduated and are now continuing with a doctoral study (1), or have secured jobs in industry as software engineers.   The ideas from this research will continue to impact products, services, education, and our workforce for years to come, helping to improve the reliability, inclusiveness, and value of software over the coming decades.          Last Modified: 09/26/2020       Submitted by: Anita Sarma]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
