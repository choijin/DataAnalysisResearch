<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Collaborative: Transfer Learning in Software Engineering</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/02/2014</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>464609.00</AwardTotalIntnAmount>
<AwardAmount>464609</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The goal of the research is to enable software engineers to find software development best practices from past empirical data. The increasing availability of software development project data, plus new machine learning techniques, make it possible for researchers to study the generalizability of results across projects using the concept of transfer learning. Using data from real software projects, the project will determine and validate best practices in three areas: predicting software development effort; isolating software detects; effective code inspection practices. &lt;br/&gt;&lt;br/&gt;This research will deliver new data mining technologies in the form of transfer learning techniques and tools that overcome current limitations in the state-of-the-art to provide accurate learning within and across projects. It will design new empirical studies, which apply transfer learning to empirical data collected from industrial software projects. It will build an on-line model analysis service, making the techniques and tools available to other researchers who are investigating validity of principles for best practice. &lt;br/&gt;&lt;br/&gt;The broader impacts of the research will be to make empirical software engineering research results more transferable to practice, and to improve the research processes for the empirical software engineering community.  By providing a means to test principles about software development, this work stands to transform empirical software engineering research and enable software managers to rely on scientifically obtained facts and conclusions rather than anecdotal evidence and one-off studies. Given the immense importance and cost of software in commercial and critical systems, the research has long-term economic impacts.</AbstractNarration>
<MinAmdLetterDate>12/10/2014</MinAmdLetterDate>
<MaxAmdLetterDate>06/01/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1506586</AwardID>
<Investigator>
<FirstName>Timothy</FirstName>
<LastName>Menzies</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Timothy J Menzies</PI_FULL_NAME>
<EmailAddress>timm@ieee.org</EmailAddress>
<PI_PHON>3043762859</PI_PHON>
<NSF_ID>000248284</NSF_ID>
<StartDate>12/10/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2><![CDATA[Admin. III, STE 240]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[North Carolina State University]]></Name>
<CityName>Raleigh</CityName>
<StateCode>NC</StateCode>
<ZipCode>276958206</ZipCode>
<StreetAddress><![CDATA[2701 Sullivan Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~168578</FUND_OBLG>
<FUND_OBLG>2015~148103</FUND_OBLG>
<FUND_OBLG>2016~147928</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of the research was to enable software engineers to find software  development best practices from past empirical data. The increasing  availability of software development project data, plus new machine  learning techniques, make it possible for researchers to study the  generalizability of results across projects using the concept of  transfer learning.&nbsp; However, the range and complexity of those methods can be confusing and, prior to this work, there was very little researcher evaluating different methods.</p> <p>The origianal goal of this was to to&nbsp; determine and validate best practices in transfer learning in three areas: (1) predicting  software development effort; (2) isolating software detects; (3) effective code  inspection practices. We achieved that goal, for a much larger set of areas including the above three plus (4) predicting issue close time within colloberative and distributed software development teams; (5) reusing old results to predict for the location of security violations in software;&nbsp; (6) transfering lessons learned fro configuring old software to new configuratin problems and (7) transferring lessons learned in ltierature reviews of software engineering research. <br /><br />Note that, from the last paragraph, we can see that this work has been not only successful in its original target areas, but in many others as well. While areas #1,2,3 are traditional kinds of data mining results, area #4 comments on how to co-ordinate international teams working together to deliver software,. Further, areas #5 and #6 refers to&nbsp; new areas of growing importatnce (managing softare secrity and managing the difficult task of making arcane choices about how to configure software). Lastly, area #7 reports a completely unexpected success. Not only can we transfer lessons about source code and software projects, we can also transfer lessons learned about scientific research papers.<br /><br />This research &nbsp; deliver new data mining  technologies in the form of transfer learning techniques and tools that  overcome current limitations in the state-of-the-art to provide  accurate learning within and across projects. One example of this are "bellwethers".&nbsp; A "bellwether" is the member of a flock which other members follow. We found that within communities of releated project, there often exists one "bellwether" project from which we can effectively learn lessons for all others. Transfer elarning based on bellwethers is not only very simple, our experiments show that it out-performs far more complex and seemingly sophisticated schemes.</p> <p><br />The broader impacts of the research was&nbsp; to make  empirical software engineering research results more transferable to  practice, and to improve the research processes for the empirical  software engineering community.  By providing a means to test principles  about software development, this work&nbsp; enables software managers to rely on  scientifically obtained facts and conclusions rather than anecdotal  evidence and one-off studies. Given the immense importance and cost of  software in commercial and critical systems, the research has long-term  economic impacts.</p><br> <p>            Last Modified: 08/02/2018<br>      Modified by: Timothy&nbsp;J&nbsp;Menzies</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of the research was to enable software engineers to find software  development best practices from past empirical data. The increasing  availability of software development project data, plus new machine  learning techniques, make it possible for researchers to study the  generalizability of results across projects using the concept of  transfer learning.  However, the range and complexity of those methods can be confusing and, prior to this work, there was very little researcher evaluating different methods.  The origianal goal of this was to to  determine and validate best practices in transfer learning in three areas: (1) predicting  software development effort; (2) isolating software detects; (3) effective code  inspection practices. We achieved that goal, for a much larger set of areas including the above three plus (4) predicting issue close time within colloberative and distributed software development teams; (5) reusing old results to predict for the location of security violations in software;  (6) transfering lessons learned fro configuring old software to new configuratin problems and (7) transferring lessons learned in ltierature reviews of software engineering research.   Note that, from the last paragraph, we can see that this work has been not only successful in its original target areas, but in many others as well. While areas #1,2,3 are traditional kinds of data mining results, area #4 comments on how to co-ordinate international teams working together to deliver software,. Further, areas #5 and #6 refers to  new areas of growing importatnce (managing softare secrity and managing the difficult task of making arcane choices about how to configure software). Lastly, area #7 reports a completely unexpected success. Not only can we transfer lessons about source code and software projects, we can also transfer lessons learned about scientific research papers.  This research   deliver new data mining  technologies in the form of transfer learning techniques and tools that  overcome current limitations in the state-of-the-art to provide  accurate learning within and across projects. One example of this are "bellwethers".  A "bellwether" is the member of a flock which other members follow. We found that within communities of releated project, there often exists one "bellwether" project from which we can effectively learn lessons for all others. Transfer elarning based on bellwethers is not only very simple, our experiments show that it out-performs far more complex and seemingly sophisticated schemes.   The broader impacts of the research was  to make  empirical software engineering research results more transferable to  practice, and to improve the research processes for the empirical  software engineering community.  By providing a means to test principles  about software development, this work  enables software managers to rely on  scientifically obtained facts and conclusions rather than anecdotal  evidence and one-off studies. Given the immense importance and cost of  software in commercial and critical systems, the research has long-term  economic impacts.       Last Modified: 08/02/2018       Submitted by: Timothy J Menzies]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
