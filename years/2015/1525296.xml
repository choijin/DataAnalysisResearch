<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: SMALL: LUCID: Low-overhead, Unobtrusive Cache Contention Detection and Repair</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>06/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>482422.00</AwardTotalIntnAmount>
<AwardAmount>482422</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: SMALL: LUCID: Low-overhead, Unobtrusive Cache Contention Detection and Repair&lt;br/&gt;&lt;br/&gt;The last decade has overseen a historic shift in processor design towards multicore architectures. From servers to tablets, phones and watches, processor architects are using multiple cores to achieve performance and energy targets. Unfortunately, writing parallel code that performs well on these processors is far from easy. The intellectual merits of this project include developing new algorithms for finding and fixing performance bugs in parallel code by integrating support from across the computing stack including hardware, compilers and runtime systems. The project's broader significance and importance is to improve the performance and energy efficiency of parallel code, providing benefits for the users of all multicore computing devices. This project also seeks to encourage participation from underrepresented groups in the next generation of computer scientists.&lt;br/&gt;&lt;br/&gt;This project leverages recent advances in hardware performance counters that allow for low-overhead, unobtrusive profiling of cache contention in real systems. This performance counter information drives new techniques for finding and automatically fixing cache contention without programmer intervention. The research explores integrating contention detection and repair with managed language runtimes. The researchers plan to openly distribute the systems built for this project to facilitate examination by other researchers and to integrate the research results into education.</AbstractNarration>
<MinAmdLetterDate>06/16/2015</MinAmdLetterDate>
<MaxAmdLetterDate>06/16/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1525296</AwardID>
<Investigator>
<FirstName>Joseph</FirstName>
<LastName>Devietti</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Joseph Devietti</PI_FULL_NAME>
<EmailAddress>devietti@cis.upenn.edu</EmailAddress>
<PI_PHON>2158988133</PI_PHON>
<NSF_ID>000642229</NSF_ID>
<StartDate>06/16/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<StreetAddress2><![CDATA[3451 Walnut St, 5th Flr Franklin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042250712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042250712</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Pennsylvania]]></Name>
<CityName/>
<StateCode>PA</StateCode>
<ZipCode>191046205</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~482422</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Over the past 5 years, this project has deepened our understanding of how to use hardware performance counters to diagnose performance bugs, and how to perform online optimization to fix these bugs while the program remains running. Fixing the program at runtime does incur extra complexity to preserve program correctness, but allows the diagnosis and repair of detected issues to be precisely focused on just the program and hardware platform in use - unlike static compiler optimizations that must generalize across a range of programs and platforms. Online optimization also sidesteps the challenge of stale profiling information, as the profile is gathered directly from the current execution and is thus never stale.</p> <p>We have explored this ability for both false sharing in multicore processors, and for processor front-end issues like instruction-cache misses. We have explored online optimization for both programs in managed languages (like Java) and unmanaged languages (like C and C++).</p> <p>This project has directly contributed to 4 peer-reviewed conference papers, and spurred collaboration across three universities and also with researchers at Intel Labs. Additionally, two PhD and three Master's students have been involved in developing this results project, and two of these Master's students later went on to pursue PhDs in computer science.</p><br> <p>            Last Modified: 07/26/2020<br>      Modified by: Joseph&nbsp;Devietti</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Over the past 5 years, this project has deepened our understanding of how to use hardware performance counters to diagnose performance bugs, and how to perform online optimization to fix these bugs while the program remains running. Fixing the program at runtime does incur extra complexity to preserve program correctness, but allows the diagnosis and repair of detected issues to be precisely focused on just the program and hardware platform in use - unlike static compiler optimizations that must generalize across a range of programs and platforms. Online optimization also sidesteps the challenge of stale profiling information, as the profile is gathered directly from the current execution and is thus never stale.  We have explored this ability for both false sharing in multicore processors, and for processor front-end issues like instruction-cache misses. We have explored online optimization for both programs in managed languages (like Java) and unmanaged languages (like C and C++).  This project has directly contributed to 4 peer-reviewed conference papers, and spurred collaboration across three universities and also with researchers at Intel Labs. Additionally, two PhD and three Master's students have been involved in developing this results project, and two of these Master's students later went on to pursue PhDs in computer science.       Last Modified: 07/26/2020       Submitted by: Joseph Devietti]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
