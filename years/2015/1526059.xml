<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>RI: Small: Combining Reinforcement Learning and Deep Learning Methods to Address High-Dimensional Perception, Partial Observability and Delayed Reward</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>499886.00</AwardTotalIntnAmount>
<AwardAmount>499886</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rebecca Hwa</SignBlockName>
<PO_EMAI>rhwa@nsf.gov</PO_EMAI>
<PO_PHON>7032927148</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Consider the problem faced by a machine agent that has to interact with some dynamical environment to achieve some goals. Concretely, imagine an agent engaged in a virtual competition as a human would. It can see the screen composed of many moving objects. At any time, it can choose one of a dozen or so actions. Its action controls one of the objects on the screen, but it often is not clear which one. Every so often the an evaluation is given of the competition. At some point the competition ends. How should such an agent choose actions, or more importantly how can we build agents that can learn to compete, i.e., achieve high scores, through trial and error. In this project methods will be developed and evaluated to build such agents.   &lt;br/&gt;&lt;br/&gt;The above problem is an instance of what is called a reinforcement learning (RL) problem. Such problems abound in sequential decision-making settings. Applications in industry include factory optimization, robotics, and chronic disease management (to list but three diverse domains of interest). Like many of these RL problems, Atari games (used as a testbed here to evaluate learning strategies) have three characteristics of interest to this project. First, they generate high-dimensional images and so the agent faces a difficult perception problem. Second, they often have deeply-delayed rewards; i.e., actions have long-term consequences. For example, losing a resource may not cost at the moment of loss, but could lead to very high losses much later when that resource is critically necessary. Third, they have deep partial observability, i.e., to compete effectively one has to often remember the deep past. For example, a location encountered far back in the past may become valuable much later because a critical resource becomes available at that time and the agent would have to find its way back to that location to use the resource. It is proposed to address these three challenges respectively with new neural network architectures for predicting the consequences of actions, new methods for intrinsically motivating agents even when reward is delayed, and new recurrent neural network architectures to remember the past effectively. Success of the proposed work is expected to significantly expand the scope of application of reinforcement learning. Finally, Atari games will be used instead of, say, factory optimization as an evaluation domain because they are readily available.  They will be used to draw high-school and under-represented undergraduate students interest into complex ideas underlying the proposed work; their fun visualizations will allow them to be integrated into teaching in the PIs' classes, and there are a variety of games that vary in the degree of difficulty of the three challenge dimensions allowing more effective control of the evaluations more effectively.</AbstractNarration>
<MinAmdLetterDate>08/06/2015</MinAmdLetterDate>
<MaxAmdLetterDate>08/06/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1526059</AwardID>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>Lewis</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Richard L Lewis</PI_FULL_NAME>
<EmailAddress>rickl@umich.edu</EmailAddress>
<PI_PHON>7347631466</PI_PHON>
<NSF_ID>000484065</NSF_ID>
<StartDate>08/06/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Satinder</FirstName>
<LastName>Baveja</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Satinder S Baveja</PI_FULL_NAME>
<EmailAddress>baveja@umich.edu</EmailAddress>
<PI_PHON>7349362831</PI_PHON>
<NSF_ID>000100173</NSF_ID>
<StartDate>08/06/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Honglak</FirstName>
<LastName>Lee</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Honglak Lee</PI_FULL_NAME>
<EmailAddress>honglak@eecs.umich.edu</EmailAddress>
<PI_PHON>7347641817</PI_PHON>
<NSF_ID>000583664</NSF_ID>
<StartDate>08/06/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Regents of the University of Michigan - Ann Arbor</Name>
<CityName>Ann Arbor</CityName>
<ZipCode>481091274</ZipCode>
<PhoneNumber>7347636438</PhoneNumber>
<StreetAddress>3003 South State St. Room 1062</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI12</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>073133571</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF MICHIGAN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>073133571</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Michigan, Ann Arbor]]></Name>
<CityName>Ann Arbor</CityName>
<StateCode>MI</StateCode>
<ZipCode>481092121</ZipCode>
<StreetAddress><![CDATA[2260 Hayward Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7495</Code>
<Text>Robust Intelligence</Text>
</ProgramElement>
<ProgramReference>
<Code>7495</Code>
<Text>ROBUST INTELLIGENCE</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~499886</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Combining Reinforcement learning (RL) with deep learning (also known as deep reinforcement learning or deep RL), holds promise as a key direction for developing autonomous AI. Towards this end, researchers must make progress on enabling AI that can learn on its own with little experience in real-world environments. However, there still lie challenges to be solved before this may be realized. In this project we focused on the following: deep RL architectures and learning methods that can mitigate the problem of sparse and delayed rewards; methods that can learn to model world dynamics; and deep RL architectures that can learn with from partially observable, high-dimensional observations, and transfer this learned knowledge across related tasks.</p> <p><br />At the most fundamental level, we tackled research on the discovery of learning methods for RL. While most research focuses on designing a learning objective that will produce a desirable learning behavior, we have shown that we can take a data-driven approach to enable RL methods that discover prediction targets [3] and internal reward guidance functions [4, 10] that support faster task-learning. By taking a data-driven approach, we automate the process of discovering solutions, which may support faster hypothesis generation and testing in the research community.&nbsp;<br /><br />Not all solutions can be practically discovered automatically via data-driven methods. For example, we still require methods that can tackle the challenge of sparse and delayed rewards in order to reduce the experience needed by learning systems. Here, researchers commonly rely on imitation learning with expert demonstrations. We found that an agent can imitate demonstrations of its own good trajectories, a form of self-imitation [6]. When combined with an external memory, we showed that this can help agents learn tasks in very large state-spaces with extremely sparse rewards [2]. This research has potential to impact researchers and practitioners (e.g., in robotics) by lessening the burden they commonly face in collecting expert demonstrations and hand-designing reward functions for their tasks.<br /><br />Another mechanism for reducing the experience needed by a learning system is to imbue it with the ability to generate its own data, for example, with a model for capturing the world dynamics. However learning such a model with high-dimensional observations (e.g. pixels) is very challenging. We pioneered deep RL approaches for learning predictive models from high-dimensional observation dynamics [9], which can be used for both video-prediction and model-based RL (e.g. for planning). We were also among the first in model-based RL to show that one can learn to predict long-horizon value instead of predicting high-dimensional observations [5]. This can be useful for RL researchers and practitioners when a model is only needed for planning and not for data-generation.<br /><br />High-dimensional observations such as first-person observations also introduce a challenge of partial observability, where early observations can be informative of observations many time-steps into the future. To facilitate progress on developing systems for this setting, we developed a benchmark in which the agent learns to act in 3D environments from first-person observations, and proposed an architecture that outperforms existing solutions [8]. We also developed an architecture which could learn to perform language instruction tasks with capability of generalizing to unseen instructions in the Minecraft environment [7] and long-horizon compositional tasks in a near photo-realistic 3D Kitchen environment [1]. These capacities will be critical to real-world applications such as robotics systems, where robots will need to navigate 3D spaces as they follow instructions provided by humans.<br /><br />Overall, this project has had a large impact on the field, amassing 9 publications and several invited talks at top venues, with over 1400 citations.&nbsp;<br /><br />References:</p> <p><span id="docs-internal-guid-d6d2556f-7fff-ee80-143a-27d8d49aba39">&nbsp;</span></p> <ul> <li dir="ltr"> <p dir="ltr">[1] Wilka Carvalho, Anthony Liang, Kimin Lee, Sungryull Sohn, Honglak Lee, Richard Lewis, Satinder Singh. Reinforcement Learning for Sparse-Reward Object-Interaction Tasks in First-person Simulated 3D Environments. NeurIPS 2020 Deep RL Workshop.</p> </li> <li dir="ltr"> <p dir="ltr">[2] Yijie Guo, Jongwook Choi, Marcin Moczulski, Shengyu Feng, Samy Bengio, Mohammad Norouzi, Honglak Lee. Memory Based Trajectory-conditioned Policies for Learning from Sparse Rewards. NeurIPS 2020.</p> </li> <li dir="ltr"> <p dir="ltr">[3] Vivek Veeriah, Matteo Hessel, Zhongwen Xu, Richard Lewis, Janarthana Rajendran, Junhyuk Oh, Hado van Hasselt, David Silver, Satinder Singh. Discovery of Useful Questions as Auxiliary Tasks.&nbsp; NeurIPS 2019.</p> </li> <li dir="ltr"> <p dir="ltr">[4] Zeyu Zheng, Junhyuk Oh, Satinder Singh. On Learning Intrinsic Rewards for Policy Gradient Methods.&nbsp; NeurIPS 2018.</p> </li> <li dir="ltr"> <p dir="ltr">[5] Junhyuk Oh, Satinder Singh, Honglak Lee. Value Prediction Network.&nbsp; NeurIPS 2017.</p> </li> <li dir="ltr"> <p dir="ltr">[6] Junhyuk Oh, Yijie Guo, Satinder Singh, Honglak Lee. Self-Imitation Learning.&nbsp; ICML 2018.</p> </li> <li dir="ltr"> <p dir="ltr">[7] Junhyuk Oh, Satinder Singh, Honglak Lee, Pushmeet Kohli. Zero-Shot Task Generalization with Multi-Task Deep Reinforcement Learning.&nbsp; ICML 2017.</p> </li> <li dir="ltr"> <p dir="ltr">[8] Junhyuk Oh, Valliappa Chockalingam, Satinder Singh, Honglak Lee. Control of Memory, Active Perception, and Action in Minecraft.&nbsp; ICML 2016.</p> </li> <li dir="ltr"> <p dir="ltr">[9] Junhyuk Oh, Xiaoxiao Guo, Honglak Lee, Richard Lewis, Satinder Singh. Action-Conditional Video Prediction using Deep Networks in Atari Games.&nbsp; NeurIPS 2015.</p> </li> <li dir="ltr"> <p dir="ltr">[10] Xiaoxiao Guo, Satinder Singh, Richard Lewis, Honglak Lee. Deep Learning for Reward Design to Improve Monte Carlo Tree Search in ATARI Games. IJCAI 2016.</p> </li> </ul> <p>&nbsp;</p><br> <p>            Last Modified: 03/01/2021<br>      Modified by: Honglak&nbsp;Lee</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Combining Reinforcement learning (RL) with deep learning (also known as deep reinforcement learning or deep RL), holds promise as a key direction for developing autonomous AI. Towards this end, researchers must make progress on enabling AI that can learn on its own with little experience in real-world environments. However, there still lie challenges to be solved before this may be realized. In this project we focused on the following: deep RL architectures and learning methods that can mitigate the problem of sparse and delayed rewards; methods that can learn to model world dynamics; and deep RL architectures that can learn with from partially observable, high-dimensional observations, and transfer this learned knowledge across related tasks.   At the most fundamental level, we tackled research on the discovery of learning methods for RL. While most research focuses on designing a learning objective that will produce a desirable learning behavior, we have shown that we can take a data-driven approach to enable RL methods that discover prediction targets [3] and internal reward guidance functions [4, 10] that support faster task-learning. By taking a data-driven approach, we automate the process of discovering solutions, which may support faster hypothesis generation and testing in the research community.   Not all solutions can be practically discovered automatically via data-driven methods. For example, we still require methods that can tackle the challenge of sparse and delayed rewards in order to reduce the experience needed by learning systems. Here, researchers commonly rely on imitation learning with expert demonstrations. We found that an agent can imitate demonstrations of its own good trajectories, a form of self-imitation [6]. When combined with an external memory, we showed that this can help agents learn tasks in very large state-spaces with extremely sparse rewards [2]. This research has potential to impact researchers and practitioners (e.g., in robotics) by lessening the burden they commonly face in collecting expert demonstrations and hand-designing reward functions for their tasks.  Another mechanism for reducing the experience needed by a learning system is to imbue it with the ability to generate its own data, for example, with a model for capturing the world dynamics. However learning such a model with high-dimensional observations (e.g. pixels) is very challenging. We pioneered deep RL approaches for learning predictive models from high-dimensional observation dynamics [9], which can be used for both video-prediction and model-based RL (e.g. for planning). We were also among the first in model-based RL to show that one can learn to predict long-horizon value instead of predicting high-dimensional observations [5]. This can be useful for RL researchers and practitioners when a model is only needed for planning and not for data-generation.  High-dimensional observations such as first-person observations also introduce a challenge of partial observability, where early observations can be informative of observations many time-steps into the future. To facilitate progress on developing systems for this setting, we developed a benchmark in which the agent learns to act in 3D environments from first-person observations, and proposed an architecture that outperforms existing solutions [8]. We also developed an architecture which could learn to perform language instruction tasks with capability of generalizing to unseen instructions in the Minecraft environment [7] and long-horizon compositional tasks in a near photo-realistic 3D Kitchen environment [1]. These capacities will be critical to real-world applications such as robotics systems, where robots will need to navigate 3D spaces as they follow instructions provided by humans.  Overall, this project has had a large impact on the field, amassing 9 publications and several invited talks at top venues, with over 1400 citations.   References:      [1] Wilka Carvalho, Anthony Liang, Kimin Lee, Sungryull Sohn, Honglak Lee, Richard Lewis, Satinder Singh. Reinforcement Learning for Sparse-Reward Object-Interaction Tasks in First-person Simulated 3D Environments. NeurIPS 2020 Deep RL Workshop.   [2] Yijie Guo, Jongwook Choi, Marcin Moczulski, Shengyu Feng, Samy Bengio, Mohammad Norouzi, Honglak Lee. Memory Based Trajectory-conditioned Policies for Learning from Sparse Rewards. NeurIPS 2020.   [3] Vivek Veeriah, Matteo Hessel, Zhongwen Xu, Richard Lewis, Janarthana Rajendran, Junhyuk Oh, Hado van Hasselt, David Silver, Satinder Singh. Discovery of Useful Questions as Auxiliary Tasks.  NeurIPS 2019.   [4] Zeyu Zheng, Junhyuk Oh, Satinder Singh. On Learning Intrinsic Rewards for Policy Gradient Methods.  NeurIPS 2018.   [5] Junhyuk Oh, Satinder Singh, Honglak Lee. Value Prediction Network.  NeurIPS 2017.   [6] Junhyuk Oh, Yijie Guo, Satinder Singh, Honglak Lee. Self-Imitation Learning.  ICML 2018.   [7] Junhyuk Oh, Satinder Singh, Honglak Lee, Pushmeet Kohli. Zero-Shot Task Generalization with Multi-Task Deep Reinforcement Learning.  ICML 2017.   [8] Junhyuk Oh, Valliappa Chockalingam, Satinder Singh, Honglak Lee. Control of Memory, Active Perception, and Action in Minecraft.  ICML 2016.   [9] Junhyuk Oh, Xiaoxiao Guo, Honglak Lee, Richard Lewis, Satinder Singh. Action-Conditional Video Prediction using Deep Networks in Atari Games.  NeurIPS 2015.   [10] Xiaoxiao Guo, Satinder Singh, Richard Lewis, Honglak Lee. Deep Learning for Reward Design to Improve Monte Carlo Tree Search in ATARI Games. IJCAI 2016.            Last Modified: 03/01/2021       Submitted by: Honglak Lee]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
