<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CRII: SaTC: Robust and Platform Independent Recovery of Design Features from C++ Binaries</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2016</AwardEffectiveDate>
<AwardExpirationDate>10/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>175000.00</AwardTotalIntnAmount>
<AwardAmount>191000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computer software play a ubiquitous role in the modern way of life. Attacks against vulnerable software lead to compromise and loss of financial and personal information. While the application stores and the software manufacturers may strive to provide vulnerability-free software, the onus to defend against attacks and ensure integrity of one?s personal information and resources is on the end-user. However, due to the lack of source code, (1) end users are unable to identify and fix vulnerabilities in the software they run, and (2) the open source community is unable to detect violation of software licensing terms by closed source software. This project aims to recover design information from binaries in a platform-neutral and obfuscation resilient manner. As a direct consequence, this project promises advancement in end-user-level security, and for the first time, facilitates detection of design-level plagiarism in software. &lt;br/&gt;&lt;br/&gt;This project aims to reconstruct a design profile of a C++ binary by leveraging the unavoidable information leakage that occurs due to adherence to Application Binary Interface (ABI) specification. It takes advantage of the platform-independent nature of ABI specification to offer both platform neutrality and obfuscation resilience in design recovery. First, traditional static and dynamic binary analysis approaches are employed in order to extract design elements and design pertinent features. Then, theorem proving is utilized to establish relationship between various design-level program entities. This project views adherence to ABI as a source of design leakage, exploits the leakage to recover design information, and investigates ways to minimize the leakage while maintaining interoperability through adherence.&lt;br/&gt;&lt;br/&gt;The results from this research will be disseminated through peer-reviewed publications and software release. Based on the research, new course materials and professional training tutorials will be developed, to help future security engineers and researchers gain in-depth knowledge about design recovery.</AbstractNarration>
<MinAmdLetterDate>04/25/2016</MinAmdLetterDate>
<MaxAmdLetterDate>09/15/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1566532</AwardID>
<Investigator>
<FirstName>Aravind</FirstName>
<LastName>Prakash</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Aravind Prakash</PI_FULL_NAME>
<EmailAddress>aprakash@binghamton.edu</EmailAddress>
<PI_PHON>6077774708</PI_PHON>
<NSF_ID>000705561</NSF_ID>
<StartDate>04/25/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Binghamton</Name>
<CityName>BINGHAMTON</CityName>
<ZipCode>139026000</ZipCode>
<PhoneNumber>6077776136</PhoneNumber>
<StreetAddress>4400 VESTAL PKWY E</StreetAddress>
<StreetAddress2><![CDATA[PO Box 6000]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>22</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY22</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>090189965</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020657151</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SUNY at Binghamton]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>139026000</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>22</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY22</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>026Y</Code>
<Text>CRII CISE Research Initiation</Text>
</ProgramElement>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramReference>
<Code>025Z</Code>
<Text>SaTC: Secure and Trustworthy Cyberspace</Text>
</ProgramReference>
<ProgramReference>
<Code>8228</Code>
<Text>CISE Resrch Initiatn Initiatve</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~175000</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The C++ language is a popular and widely-used language in software development. This project resulted in outcomes that have enhanced the knowledge-base of C++ binary analysis and provided key insights into object-oriented software design from the perspective of design privacy and security. Binary analysis has significant impact on end-point closed-source software protection where source code may not be available for compiler-based protections. This project has resulted in 2 papers being published in top security conference venues and 2 more publications under preparation (at the time of this report). Key outcomes can be enumerated as follows:</p> <ol> <li>We design techniques to facilitate deeper understanding of C++ binaries. We show that C++ semantics (i.e., class inheritance hierarchy, constructors, destructors and object layout) from binaries generated using modern C++ compilers (LLVM and gcc) can be recovered with a high level of accuracy. Further, we present a tool--DeClassifier that can recover C++ semantics from <em>optimized</em> and <em>symbol-free</em> binaries. Optimization is common in C++ compilers and present significant technical challenges that were overcome. This work was presented at AsiaCCS 2019. Another review paper that captures state-of-the-art in C++ attacks and defenses is under preparation.</li> <li>We show that security defenses that target attacks on C++ programs largely overlook the needs of software vendors and thereby deter adoption. Particularly, modern security defenses trade design privacy for security. That is, by focusing on security, modern defenses make reverse engineering easy, which in turn reveals highly-valuable design information to a reverse engineer. Until now, it was unknown as to (1) whether such a tradeoff choice is harmful and (2) whether it is possible to develop defenses that do not compromise design privacy for security. We demonstrate that most modern defenses are susceptible to design-recovery attacks. We also show that it is possible to develop defenses that prevent design information leakage. This work was presented at RAID 2019. Another paper addressing virtual inheritance in C++ is under preparation.&nbsp;</li> <li>This project has supported one Black female PhD student and 2 undergraduate students through REU. Further, as a broader impact, this research has provided material for CS 220: Computer Architecture and C Programming course at Binghamton University. Finally, throughout the life of this project, several binary analysis challenges were captured and used for the Binghamton University Capture The Flag team. Finally, this project prompted deeper investigation into &ldquo;side-effects of security choices&rdquo;, which is a recurring problem across the field of cybersecurity.&nbsp;</li> </ol> <p><strong>&nbsp;</strong><em></em></p><br> <p>            Last Modified: 01/08/2020<br>      Modified by: Aravind&nbsp;Prakash</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The C++ language is a popular and widely-used language in software development. This project resulted in outcomes that have enhanced the knowledge-base of C++ binary analysis and provided key insights into object-oriented software design from the perspective of design privacy and security. Binary analysis has significant impact on end-point closed-source software protection where source code may not be available for compiler-based protections. This project has resulted in 2 papers being published in top security conference venues and 2 more publications under preparation (at the time of this report). Key outcomes can be enumerated as follows:  We design techniques to facilitate deeper understanding of C++ binaries. We show that C++ semantics (i.e., class inheritance hierarchy, constructors, destructors and object layout) from binaries generated using modern C++ compilers (LLVM and gcc) can be recovered with a high level of accuracy. Further, we present a tool--DeClassifier that can recover C++ semantics from optimized and symbol-free binaries. Optimization is common in C++ compilers and present significant technical challenges that were overcome. This work was presented at AsiaCCS 2019. Another review paper that captures state-of-the-art in C++ attacks and defenses is under preparation. We show that security defenses that target attacks on C++ programs largely overlook the needs of software vendors and thereby deter adoption. Particularly, modern security defenses trade design privacy for security. That is, by focusing on security, modern defenses make reverse engineering easy, which in turn reveals highly-valuable design information to a reverse engineer. Until now, it was unknown as to (1) whether such a tradeoff choice is harmful and (2) whether it is possible to develop defenses that do not compromise design privacy for security. We demonstrate that most modern defenses are susceptible to design-recovery attacks. We also show that it is possible to develop defenses that prevent design information leakage. This work was presented at RAID 2019. Another paper addressing virtual inheritance in C++ is under preparation.  This project has supported one Black female PhD student and 2 undergraduate students through REU. Further, as a broader impact, this research has provided material for CS 220: Computer Architecture and C Programming course at Binghamton University. Finally, throughout the life of this project, several binary analysis challenges were captured and used for the Binghamton University Capture The Flag team. Finally, this project prompted deeper investigation into "side-effects of security choices", which is a recurring problem across the field of cybersecurity.            Last Modified: 01/08/2020       Submitted by: Aravind Prakash]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
