<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: HAWKEYE: A Cross-Layer Resilient Architecture to Tradeoff Program Accuracy and Resilience Overheads</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2015</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>With semiconductor technology scaling to sub-nanometer scales, minute perturbations in lithography patterns and manufacturing processes make the computing hardware vulnerable to unpredictable deviations in functionality. Further, with increasingly strict power constraints, hardware designs are now reliant on dynamic voltage scaling between nominal and near-threshold regions, which exacerbates the reliability problem. These trends motivate the need for system resiliency without increasing power consumption. This project proposes a new method to achieve efficient resiliency, where hardware's coverage is bounded with certain guarantees, while computational efficiency is traded off at the cost of affecting program accuracy. The strategy focuses on data analytic applications since they naturally offer tradeoffs in program accuracy due to the unstructured nature of inputs, and the approximate algorithms used to solve these otherwise intractable problems. At the software level, the project is developing methods to classify crucial versus non-crucial code regions in a program: the crucial code affects program correctness and outcome, its functionality cannot be altered in any way; non-crucial code affects program accuracy, therefore it could tolerate errors. The hardware subsequently implements stronger resiliency methods (e.g., redundant execution) only for crucial code. For the non-crucial code, lightweight resiliency schemes ensure program correctness. If successful, this project will be a major step towards a new rigorous framework to reason and guarantee system resiliency alongside a program's performance, power, and accuracy of computation. &lt;br/&gt;&lt;br/&gt;The proposed research provides for significant broader impacts related to curriculum development and student training through integration of modules in existing computer architecture and system design courses, and outreach through established REU sites and enrichment programs. The project promises transparent resiliency guarantees and this will have a major societal impact: enterprises and mission agencies will be able to reason in a quantifiable way about the resiliency versus efficiency tradeoffs in their software and hardware infrastructure. This is a crucial step forward given the increased awareness of system reliability in many application domains, such as healthcare, defense, finance, transportation, and automotive.</AbstractNarration>
<MinAmdLetterDate>08/11/2015</MinAmdLetterDate>
<MaxAmdLetterDate>08/11/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1550470</AwardID>
<Investigator>
<FirstName>Omer</FirstName>
<LastName>Khan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Omer Khan</PI_FULL_NAME>
<EmailAddress>khan@uconn.edu</EmailAddress>
<PI_PHON>5127710910</PI_PHON>
<NSF_ID>000595468</NSF_ID>
<StartDate>08/11/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Henry</FirstName>
<LastName>Hoffmann</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Henry Hoffmann</PI_FULL_NAME>
<EmailAddress>hankhoffmann@cs.uchicago.edu</EmailAddress>
<PI_PHON>7737024980</PI_PHON>
<NSF_ID>000642777</NSF_ID>
<StartDate>08/11/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Connecticut</Name>
<CityName>Storrs</CityName>
<ZipCode>062691133</ZipCode>
<PhoneNumber>8604863622</PhoneNumber>
<StreetAddress>438 Whitney Road Ext.</StreetAddress>
<StreetAddress2><![CDATA[Unit 1133]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<StateCode>CT</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CT02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>614209054</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CONNECTICUT</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>004534830</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Connecticut]]></Name>
<CityName>Storrs</CityName>
<StateCode>CT</StateCode>
<ZipCode>062694157</ZipCode>
<StreetAddress><![CDATA[371 Fairfield Way]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Connecticut</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CT02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This research developed HAWKEYE architecture that introduces a new tradeoff to achieve efficient resiliency in parallel microprocessor systems, where error coverage is guaranteed at the cost of affecting program accuracy. The idea is built on the insight that code vulnerability is not always correlated to program output and hence compromising coverage in a traditional manner can affect program correctness. In other words, without understanding the code's impact on program outcomes, the program correctness and accuracy cannot be decoupled. HAWKEYE is a cross-layer approach that innovates at the hardware, software, and algorithm levels to ensure program correctness to strengthen resiliency, yet trade off accuracy for performance. We have focused on machine learning and graph algorithms that operate on real world datasets, and used in safety critical applications. We have developed a benchmark suite for parallelized graph algorithms that was published at 2015 IEEE International Symposium on Workload Characterization (IISWC 2015), and nominated as a best paper candidate. This open source benchmark suite is now used in more than 50 conference paper publications by other researchers. The University of Chicago team also developed an open source framework, GraphStone (published in 2018 IEEE International Conference on Data Engineering) to study the performance implications of graph problems for in-memory and out-of-core graph computing. These works enabled us to study the algorithmic aspects of program correctness and accuracy, and performance scaling trends in HAWKEYE's context. We characterized the graph and machine learning algorithms in the context of their performance and program accuracy implications, and published papers in 2017 IEEE International Conference on Computer Design (ICCD 2017), and 2017 IEEE Workshop on Silicon Errors in Logic - System Effects (SELSE 2017). The results indicated that much of the code can be classified as non-crucial code regions that can relax their resiliency hardness guarantees. For such code regions, HAWKEYE trades off program accuracy for high performance. However, crucial code regions must guarantee strong resiliency to ensure program correctness. Building on the ideas of classifying code regions as crucial or non-crucial, we developed the HAWKEYE software-hardware co-design framework using an open source multicore simulator, as well as prototype implementation on a real machine, Tilera TILE-Gx72. The simulated HAWKEYE framework was published at 2015 IEEE Computer Architecture Letters (CAL 2015) and 2018 ACM Transactions on Embedded Computing Systems (TECS 2018). Moreover, the TILE-Gx72 prototype of HAWKEYE was published at the 2018 IEEE Computer Architecture Letters (CAL 2018). We have successfully shown the feasibility of HAWKEYE framework to exploit the coverage--performance tradeoff in graph and machine learning algorithms, yet achieve strong resiliency guarantees.</p> <p>This project enabled future multicores to have higher performance with lower energy consumption and a much higher degree of reliability and resiliency to manufacturing and environmental errors, a major step forward to enable safety-critical applications ranging from machine learning to data analytics. The tools developed from this project have been released publicly (via open source software and/or conference/journal publications), and also utilized to develop laboratory assignments to modernize the computer architecture and multicore computing curriculum at UConn. We have supported the NSF sponsored REU programs at UConn, and involved undergraduates, specially women and underrepresented minorities, in our research program. Siena Biales, James Palmer and Emanuel Correa completed their REU rotations in our research group during Summer 2016. They were all funded though NSF REU site and supplemental funds. We had one REU student Adithya Nott explore privacy leakage in graph and machine learning benchmarks during Summer 2017. In Summer 2019, Brandon D'Agostino and Maia Iyer explored processor security implications for safety critical applications that were developed under the HAWKEYE project. Finally, the outcomes of this project have been regularly shared with industry partners from NXP, Intel, AMD, ARM, and IBM.</p><br> <p>            Last Modified: 10/30/2019<br>      Modified by: Omer&nbsp;Khan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This research developed HAWKEYE architecture that introduces a new tradeoff to achieve efficient resiliency in parallel microprocessor systems, where error coverage is guaranteed at the cost of affecting program accuracy. The idea is built on the insight that code vulnerability is not always correlated to program output and hence compromising coverage in a traditional manner can affect program correctness. In other words, without understanding the code's impact on program outcomes, the program correctness and accuracy cannot be decoupled. HAWKEYE is a cross-layer approach that innovates at the hardware, software, and algorithm levels to ensure program correctness to strengthen resiliency, yet trade off accuracy for performance. We have focused on machine learning and graph algorithms that operate on real world datasets, and used in safety critical applications. We have developed a benchmark suite for parallelized graph algorithms that was published at 2015 IEEE International Symposium on Workload Characterization (IISWC 2015), and nominated as a best paper candidate. This open source benchmark suite is now used in more than 50 conference paper publications by other researchers. The University of Chicago team also developed an open source framework, GraphStone (published in 2018 IEEE International Conference on Data Engineering) to study the performance implications of graph problems for in-memory and out-of-core graph computing. These works enabled us to study the algorithmic aspects of program correctness and accuracy, and performance scaling trends in HAWKEYE's context. We characterized the graph and machine learning algorithms in the context of their performance and program accuracy implications, and published papers in 2017 IEEE International Conference on Computer Design (ICCD 2017), and 2017 IEEE Workshop on Silicon Errors in Logic - System Effects (SELSE 2017). The results indicated that much of the code can be classified as non-crucial code regions that can relax their resiliency hardness guarantees. For such code regions, HAWKEYE trades off program accuracy for high performance. However, crucial code regions must guarantee strong resiliency to ensure program correctness. Building on the ideas of classifying code regions as crucial or non-crucial, we developed the HAWKEYE software-hardware co-design framework using an open source multicore simulator, as well as prototype implementation on a real machine, Tilera TILE-Gx72. The simulated HAWKEYE framework was published at 2015 IEEE Computer Architecture Letters (CAL 2015) and 2018 ACM Transactions on Embedded Computing Systems (TECS 2018). Moreover, the TILE-Gx72 prototype of HAWKEYE was published at the 2018 IEEE Computer Architecture Letters (CAL 2018). We have successfully shown the feasibility of HAWKEYE framework to exploit the coverage--performance tradeoff in graph and machine learning algorithms, yet achieve strong resiliency guarantees.  This project enabled future multicores to have higher performance with lower energy consumption and a much higher degree of reliability and resiliency to manufacturing and environmental errors, a major step forward to enable safety-critical applications ranging from machine learning to data analytics. The tools developed from this project have been released publicly (via open source software and/or conference/journal publications), and also utilized to develop laboratory assignments to modernize the computer architecture and multicore computing curriculum at UConn. We have supported the NSF sponsored REU programs at UConn, and involved undergraduates, specially women and underrepresented minorities, in our research program. Siena Biales, James Palmer and Emanuel Correa completed their REU rotations in our research group during Summer 2016. They were all funded though NSF REU site and supplemental funds. We had one REU student Adithya Nott explore privacy leakage in graph and machine learning benchmarks during Summer 2017. In Summer 2019, Brandon D'Agostino and Maia Iyer explored processor security implications for safety critical applications that were developed under the HAWKEYE project. Finally, the outcomes of this project have been regularly shared with industry partners from NXP, Intel, AMD, ARM, and IBM.       Last Modified: 10/30/2019       Submitted by: Omer Khan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
