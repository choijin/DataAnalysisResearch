<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Large:Collaborative Research: Inferring Software Specifications from Open Source Repositories by Leveraging Data and Collective Community Expertise</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>06/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>214843.00</AwardTotalIntnAmount>
<AwardAmount>214843</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Today individuals, society, and the nation critically depend on software to manage critical infrastructures for power, banking and finance, air traffic control, telecommunication, transportation, national defense, and healthcare. Specifications are critical for communicating the intended behavior of software systems to software developers and users and to make it possible for automated tools to verify whether a given piece of software indeed behaves as intended. Safety critical applications have traditionally enjoyed the benefits of such specifications, but at a great cost.  Because producing useful, non-trivial specifications from scratch is too hard, time consuming, and requires expertise that is not broadly available, such specifications are largely unavailable. The lack of specifications for core libraries and widely used frameworks makes specifying applications that use them even more difficult. The absence of precise, comprehensible, and efficiently verifiable specifications is a major hurdle to developing software systems that are reliable, secure, and easy to maintain and reuse. &lt;br/&gt;&lt;br/&gt;This project brings together an interdisciplinary team of researchers with complementary expertise in formal methods, software engineering, machine learning and big data analytics to develop automated or semi-automated methods for inferring the specifications from code. The resulting methods and tools combine analytics over large open source code repositories to augment and improve upon specifications by program analysis-based specification inference through synergistic advances across both these areas. &lt;br/&gt;&lt;br/&gt;The broader impacts of the project include: transformative advances in specification inference and synthesis, with the potential to dramatically reduce, the cost of developing and maintaining high assurance software; enhanced interdisciplinary expertise at the intersection of formal methods software engineering, and big data analytics; Contributions to research-based training of a cadre of scientists and engineers with expertise in high assurance software.</AbstractNarration>
<MinAmdLetterDate>06/17/2015</MinAmdLetterDate>
<MaxAmdLetterDate>06/17/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1518776</AwardID>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Dyer</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert Dyer</PI_FULL_NAME>
<EmailAddress>rdyer@unl.edu</EmailAddress>
<PI_PHON>4024725082</PI_PHON>
<NSF_ID>000679020</NSF_ID>
<StartDate>06/17/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Bowling Green State University</Name>
<CityName>Bowling Green</CityName>
<ZipCode>434030230</ZipCode>
<PhoneNumber>4193722481</PhoneNumber>
<StreetAddress>302 Hayes Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>617407325</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BOWLING GREEN STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041349010</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Bowling Green State University]]></Name>
<CityName>Bowling Green</CityName>
<StateCode>OH</StateCode>
<ZipCode>434030230</ZipCode>
<StreetAddress><![CDATA[106 University Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~214843</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 1"> <div class="section"> <div class="layoutArea"> <div class="column"> <p>Our focus is on behavioral interface specifications, which are specifications of the behavior of methods (using pre- and post- conditions) and modules (e.g., using invariants in classes and interfaces). Methods and modules together constitute application programming interfaces (APIs). Building on an infrastructure for mining code and its evolution in open source repositories at a large-scale, we made groundbreaking advances in specification inference and synthesis, and utilized them to specify the highly used Java Development Kit and other common APIs that can drastically reduce the cost of specifying programs. Such fundamental breakthroughs were achieved by leveraging the collective intelligence available in software artifacts from millions of open source projects with their software evolution history.</p> </div> </div> </div> </div> <p>Several tools were either created or extended during the course of the project. All of those tools were made available as open source software for other researchers to use and extend. The results were disseminated in the form of research publications at major conferences and in top journals. Several PhD and master's theses were also created based on the tools and algorithms created during the project period.&nbsp;</p> <p>BGSU's focus was on scaling the specification inference techniques and providing capabilities for inference within the Boa infrastructure for mining open source software repositories. To this end, Boa was extended with several new extensive features for program analysis, including the ability to generate and traverse control, data, and program dependency graphs.&nbsp; The algorithms created allow inference of method preconditions using a notion of consensus from millions of open source projects as well as inference of method postconditions.&nbsp; The extensions to Boa were all made publicly available and the inference algorithms will be published in the near future.</p><br> <p>            Last Modified: 08/09/2019<br>      Modified by: Robert&nbsp;Dyer</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[     Our focus is on behavioral interface specifications, which are specifications of the behavior of methods (using pre- and post- conditions) and modules (e.g., using invariants in classes and interfaces). Methods and modules together constitute application programming interfaces (APIs). Building on an infrastructure for mining code and its evolution in open source repositories at a large-scale, we made groundbreaking advances in specification inference and synthesis, and utilized them to specify the highly used Java Development Kit and other common APIs that can drastically reduce the cost of specifying programs. Such fundamental breakthroughs were achieved by leveraging the collective intelligence available in software artifacts from millions of open source projects with their software evolution history.      Several tools were either created or extended during the course of the project. All of those tools were made available as open source software for other researchers to use and extend. The results were disseminated in the form of research publications at major conferences and in top journals. Several PhD and master's theses were also created based on the tools and algorithms created during the project period.   BGSU's focus was on scaling the specification inference techniques and providing capabilities for inference within the Boa infrastructure for mining open source software repositories. To this end, Boa was extended with several new extensive features for program analysis, including the ability to generate and traverse control, data, and program dependency graphs.  The algorithms created allow inference of method preconditions using a notion of consensus from millions of open source projects as well as inference of method postconditions.  The extensions to Boa were all made publicly available and the inference algorithms will be published in the near future.       Last Modified: 08/09/2019       Submitted by: Robert Dyer]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
