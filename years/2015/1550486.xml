<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:  SI2-SSI: Sustaining Innovation in the Linear Algebra Software Stack for Computational Chemistry and Other Sciences</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/15/2016</AwardEffectiveDate>
<AwardExpirationDate>06/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>265000.00</AwardTotalIntnAmount>
<AwardAmount>265000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Amy Walton</SignBlockName>
<PO_EMAI>awalton@nsf.gov</PO_EMAI>
<PO_PHON>7032924538</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Scientific discovery now often involves computer simulation in addition to, or instead of, laboratory experimentation. This can accelerate, improve, and/or expand scientific insight, often at a great reduction in cost. Many such computer simulations spend much or most of their time solving linear algebra (matrix) problems. For these simulations, linear algebra problems constitute the most basic building blocks of the computation. As a result, software libraries (bundles of specialized code) that efficiently solve linear algebra problems fundamentally support sustained innovation in science. The project aims to create a next generation of software libraries for this domain and will make these libraries available to the scientific community as open source software that can be easily ported to current and future computer architectures. This will directly and indirectly impact discovery in academia, at the national labs, and in industry. The project will also impact affordable education through open course ware that is expected to reach a broad audience. The involvement of undergraduate and graduate students will strengthen the pool of qualified individuals trained to support scientific computing.  The project involves research staff and students who are members of traditionally underrepresented groups.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;The BLAS (Basic Linear Algebra Subprograms) are well-known routines that provide standard building blocks for performing basic vector and matrix operations. The Level 1 BLAS perform scalar, vector and vector-vector operations, the Level 2 BLAS perform matrix-vector operations, and the Level 3 BLAS perform matrix-matrix operations. Because the BLAS are efficient, portable, and widely available, they are commonly used in the development of high quality linear algebra software, such as the well-known Linear Algebra PACKage (LAPACK), as an example. However, the BLAS libraries that exist today have not evolved to new computing architectures, and hence do not perform as well as they could. The technical goal and scope of this project, therefore, is to develop a new high-performance dense linear algebra library with broad functionality that can be easily ported to current and future multi-core and many-core processors. The project builds on the BLAS-like Library Instantiation Software (BLIS) effort that has exposed low-level primitives that facilitate the high-performance implementation of BLAS. By implementing the higher-level dense linear algebra functionality in terms of these low-level primitives, portable high performance will be achieved for higher-level functionality needed by many scientific computing applications. Contributions will include the to-be developed techniques for implementing such software, the resulting open source software, and pedagogical artifacts that will include open course ware.</AbstractNarration>
<MinAmdLetterDate>07/26/2016</MinAmdLetterDate>
<MaxAmdLetterDate>07/26/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1550486</AwardID>
<Investigator>
<FirstName>Tze Meng</FirstName>
<LastName>Low</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tze Meng Low</PI_FULL_NAME>
<EmailAddress>lowt@andrew.cmu.edu</EmailAddress>
<PI_PHON>4122689527</PI_PHON>
<NSF_ID>000698739</NSF_ID>
<StartDate>07/26/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName/>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~265000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The use of high performance libraries is needed for speedy developing of scientific and machine learning applications. However, the development of high performance libraries is often a time-consuming task that requires expert knowledge about the application domain, and the hardware on which the application will run. When the hardware changes, time and effort have to be spent to redesign a new library for the new hardware. Similar effort has to be expended to design a new library for a new application domain.</p> <p>The BLAS-like instantiation software (BLIS) is a carefully-layered software framework for building new high performance dense linear algebra libraries for new CPUs with minimal addition/changes to the existing code.&nbsp; Much of this layering captures the collective knowledge of how to design high performance dense linear algebra library. This project sought to extend and explore the use of the BLIS framework for new applications domains and other hardware platform such as General Purpose Graphics Processing Units (GPGPUs).</p> <p>Through this project, we successfully demonstrated that the BLIS kernels, small code segments designed for specific hardware, could be reused to design libraries for new application domains in machine learning and network analysis.&nbsp; Reusing these BLIS kernels for new domains allow faster development of high performance libraries for new application domains by transferring knowledge from a well-studied application domain to newer domains.</p> <p>In the domain of machine learning, redesigning the code around the BLIS kernels yielded new routines that requires less memory resources, allowing them to be deployed into smaller and cheaper hardware such as those used in the Internet of Things (IoT).&nbsp; The resulting code also computes faster than conventional techniques that use dense linear algebra libraries.&nbsp; In the domain of network analysis, we demonstrate that the techniques for designing new computational methods in high performance linear algebra libraries can be similarly used to identify new computational methods for network analysis.</p> <p>We showed that routines that are specialized for new hardware, such as GPGPUs, can be designed using the same layering framework in BLIS. We demonstrated this by designing specialized GPGPU kernels for performing single nucleotide polymorphism (SNP) comparisons, a fundamental computation used in genomic analysis and DNA forensics. These specialized GPGPU kernels are then used in a BLIS-like framework to provide fast SNP comparisons routines on GPUs.</p> <p>A total of 7 (2 PhD, 1 Masters, 6 undergraduates) students were trained in the use of the techniques for designing high performance libraries. All but one of the undergraduate student have gone on to graduate school.</p><br> <p>            Last Modified: 05/04/2020<br>      Modified by: Tze Meng&nbsp;Low</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The use of high performance libraries is needed for speedy developing of scientific and machine learning applications. However, the development of high performance libraries is often a time-consuming task that requires expert knowledge about the application domain, and the hardware on which the application will run. When the hardware changes, time and effort have to be spent to redesign a new library for the new hardware. Similar effort has to be expended to design a new library for a new application domain.  The BLAS-like instantiation software (BLIS) is a carefully-layered software framework for building new high performance dense linear algebra libraries for new CPUs with minimal addition/changes to the existing code.  Much of this layering captures the collective knowledge of how to design high performance dense linear algebra library. This project sought to extend and explore the use of the BLIS framework for new applications domains and other hardware platform such as General Purpose Graphics Processing Units (GPGPUs).  Through this project, we successfully demonstrated that the BLIS kernels, small code segments designed for specific hardware, could be reused to design libraries for new application domains in machine learning and network analysis.  Reusing these BLIS kernels for new domains allow faster development of high performance libraries for new application domains by transferring knowledge from a well-studied application domain to newer domains.  In the domain of machine learning, redesigning the code around the BLIS kernels yielded new routines that requires less memory resources, allowing them to be deployed into smaller and cheaper hardware such as those used in the Internet of Things (IoT).  The resulting code also computes faster than conventional techniques that use dense linear algebra libraries.  In the domain of network analysis, we demonstrate that the techniques for designing new computational methods in high performance linear algebra libraries can be similarly used to identify new computational methods for network analysis.  We showed that routines that are specialized for new hardware, such as GPGPUs, can be designed using the same layering framework in BLIS. We demonstrated this by designing specialized GPGPU kernels for performing single nucleotide polymorphism (SNP) comparisons, a fundamental computation used in genomic analysis and DNA forensics. These specialized GPGPU kernels are then used in a BLIS-like framework to provide fast SNP comparisons routines on GPUs.  A total of 7 (2 PhD, 1 Masters, 6 undergraduates) students were trained in the use of the techniques for designing high performance libraries. All but one of the undergraduate student have gone on to graduate school.       Last Modified: 05/04/2020       Submitted by: Tze Meng Low]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
