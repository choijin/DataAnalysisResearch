<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Fiat: Correct-by-Construction and Mostly Automated Derivation of Programs with an Interactive Theorem Prover</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>800000.00</AwardTotalIntnAmount>
<AwardAmount>816016</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Medium: Fiat: Correct-by-Construction and Mostly Automated Derivation of Programs with an Interactive Theorem Prover&lt;br/&gt;&lt;br/&gt;To scale to ambitious software-development tasks, programming languages must provide features for abstraction and modularity. Large advances in programming productivity have often come via new features of that kind. This project investigates new program-structuring ideas based fundamentally on machine-checked mathematical proofs. More specifically, through the design of a prototype system Fiat within the Coq proof assistant, the project studies how to derive efficient programs automatically from logical specifications. Programmers may package new notations and associated styles of automation as libraries, and a single program may mix notations, automatically benefiting from the combination of all of their associated automation for deriving efficient programs. In this way, Fiat makes it possible to split a program into parts for functionality and performance, with strong guarantees that bugs in the performance parts can never violate the requirements in the functionality parts. The intellectual merits are widely applicable new ideas in modular program structuring, with strong formal guarantees of correctness. The project's broader significance and importance are based on the potential to improve programmer productivity dramatically, for software projects in a wide variety of contexts; and the project also studies how the idea of mostly automated refinement from specifications can be integrated into introductory programming and discrete-math classes, to drive home the value of logical notation in programming.&lt;br/&gt;&lt;br/&gt;The primary case-study domain in the project is practical Internet servers, such as for domain-name lookup or delivery of electronic mail. The goal is to develop Fiat versions of these key services, deriving efficient executable code automatically. Past work on deriving data layers from specifications in the style of SQL is being extended, in addition to exploration of other domains for specification and automated derivation, such as synthesis of parsers from grammars, to use for the protocols that servers speak, the configuration files that they read, etc. Beyond studying how such new libraries may be constructed and composed, the project also investigates how to push the synthesis process to lower abstraction levels than in our prototype implementation, which generates functional programs. The improved Fiat system will derive assembly programs, enabling choice of more effective optimizations thanks to more direct control of machine resources, integrating with the Bedrock Coq library for verified multilanguage programming.</AbstractNarration>
<MinAmdLetterDate>06/11/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/05/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1512611</AwardID>
<Investigator>
<FirstName>Adam</FirstName>
<LastName>Chlipala</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Adam J Chlipala</PI_FULL_NAME>
<EmailAddress>adamc@csail.mit.edu</EmailAddress>
<PI_PHON>6172531000</PI_PHON>
<NSF_ID>000610723</NSF_ID>
<StartDate>06/11/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394307</ZipCode>
<StreetAddress><![CDATA[77 Massachusetts Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~800000</FUND_OBLG>
<FUND_OBLG>2016~16016</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project studied how to use computer-theorem-proving tools to write software automatically from mathematical specifications, also automatically producing proof that the software behaves correctly.&nbsp; One of the first programming domains we studied was relational querying and updating, in the style of SQL, a popular database language.&nbsp; In the course of this grant, we upgraded our support within that domain, with automatic selection of data structures by analysis of access patterns in specifications.&nbsp; We also added Narcissus, a domain for parsing and generation of binary network-packet formats, starting from nondeterministic generators of bitstrings from high-level representations, as specifications.&nbsp; A further domain was network-firewall rules, where efficient specialized software can be constructed from naive specifications that analyze complete histories of packets so far.<br />We also studied a cross-cutting feature: generating efficient imperative code (e.g., not relying on garbage collection) automatically from purely functional code.&nbsp; Our solution is extensible, in the form of a compiler that can be taught new tricks for generating imperative code along with its proof of correctness.&nbsp; Each new trick must come with a proof (or a proof generator) of correctness.&nbsp; Combining these pieces (also using the Bedrock framework for program verification and verified compilation), we produced the first pipeline to go automatically from relational specifications to efficient assembly code with proof of correctness.<br />One offshoot of the project, which was combined with our DeepSpec Expedition effort, is Fiat Cryptography, which generates high-performance cryptography routines automatically with proof.&nbsp; Specifically, we targeted finite-field arithmetic for elliptic-curve cryptography, where the previous state of practice was to rewrite code manually in C or assembly for each different elliptic curve and each family of hardware architectures (principally 32-bit vs. 64-bit).&nbsp; We showed that these algorithms could be generalized into high-level templates that can be proved once-and-for-all, then specialized to parameters and compiled to lean code by a verified compiler.&nbsp; The result is a domain-specific compiler that can be invoked as easily as standard tools like GCC.&nbsp; It has been adopted in a number of high-profile open-source projects, including parts of TLS code for both Chrome and Firefox, so that today a majority of secure web connections made by browsers run TLS code generated by our formally verified Fiat Cryptography compiler.</p><br> <p>            Last Modified: 12/30/2020<br>      Modified by: Adam&nbsp;J&nbsp;Chlipala</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project studied how to use computer-theorem-proving tools to write software automatically from mathematical specifications, also automatically producing proof that the software behaves correctly.  One of the first programming domains we studied was relational querying and updating, in the style of SQL, a popular database language.  In the course of this grant, we upgraded our support within that domain, with automatic selection of data structures by analysis of access patterns in specifications.  We also added Narcissus, a domain for parsing and generation of binary network-packet formats, starting from nondeterministic generators of bitstrings from high-level representations, as specifications.  A further domain was network-firewall rules, where efficient specialized software can be constructed from naive specifications that analyze complete histories of packets so far. We also studied a cross-cutting feature: generating efficient imperative code (e.g., not relying on garbage collection) automatically from purely functional code.  Our solution is extensible, in the form of a compiler that can be taught new tricks for generating imperative code along with its proof of correctness.  Each new trick must come with a proof (or a proof generator) of correctness.  Combining these pieces (also using the Bedrock framework for program verification and verified compilation), we produced the first pipeline to go automatically from relational specifications to efficient assembly code with proof of correctness. One offshoot of the project, which was combined with our DeepSpec Expedition effort, is Fiat Cryptography, which generates high-performance cryptography routines automatically with proof.  Specifically, we targeted finite-field arithmetic for elliptic-curve cryptography, where the previous state of practice was to rewrite code manually in C or assembly for each different elliptic curve and each family of hardware architectures (principally 32-bit vs. 64-bit).  We showed that these algorithms could be generalized into high-level templates that can be proved once-and-for-all, then specialized to parameters and compiled to lean code by a verified compiler.  The result is a domain-specific compiler that can be invoked as easily as standard tools like GCC.  It has been adopted in a number of high-profile open-source projects, including parts of TLS code for both Chrome and Firefox, so that today a majority of secure web connections made by browsers run TLS code generated by our formally verified Fiat Cryptography compiler.       Last Modified: 12/30/2020       Submitted by: Adam J Chlipala]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
