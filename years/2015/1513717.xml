<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: RUI: Collaborative Research: Advanced Traceability for Composing Product Line Safety Cases</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>06/30/2021</AwardExpirationDate>
<AwardTotalIntnAmount>423894.00</AwardTotalIntnAmount>
<AwardAmount>423894</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In order to reduce time-to-market and development costs, families of safety-critical software systems are increasingly developed as product lines. Examples include the software in medical devices, airplanes, assistive robots, and self-driving vehicles. Product lines provide structured reuse of a wide range of software artifacts including requirements, architecture, design, code, and test cases.  For safety-critical product lines, a safety case must be constructed for each product to provide evidence that it is safe for use. Constructing these safety cases is time-consuming and slows industries? time-to-market of new products. This project develops a solution for product lines that partially automates the construction of a product?s safety case from existing software artifacts and that guides the developer through the needed safety analysis and refinement steps. The goal of the project is to reduce the cost and effort of developing a safety case while leveraging product-line reuse to increase the quality and safety of delivered products. &lt;br/&gt;&lt;br/&gt;The ability to reuse variability-aware safety assets can transform the way manufacturers of safety-critical product lines analyze the safety of their products and construct safety cases. Solutions are evaluated on real-world product lines with industrial collaborators. The underlying traceability techniques and tools, developed under this grant, will benefit a broad set of software-intensive systems by addressing the ongoing problems of trace link evolution and safe reuse.  The project cross-trains students in traceability, software safety and product lines, and produces training materials to encourage transition to practice of the solutions developed.</AbstractNarration>
<MinAmdLetterDate>06/17/2015</MinAmdLetterDate>
<MaxAmdLetterDate>06/17/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1513717</AwardID>
<Investigator>
<FirstName>Robyn</FirstName>
<LastName>Lutz</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robyn R Lutz</PI_FULL_NAME>
<EmailAddress>rlutz@iastate.edu</EmailAddress>
<PI_PHON>5152943654</PI_PHON>
<NSF_ID>000410327</NSF_ID>
<StartDate>06/17/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005309844</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005309844</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Iowa State University]]></Name>
<CityName/>
<StateCode>IA</StateCode>
<ZipCode>500111040</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~423894</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p style="text-align: left;">The goal of this project was to develop a solution for safety-critical software product lines that partially automated the initial construction of a new product&rsquo;s safety case. The project aimed to provide guidance to developers in the reuse of safety assets such as safety-case elements across multiple releases of a safety-critical product line as appropriate. We developed, experimentally evaluated, and delivered several new techniques toward this goal.&nbsp;</p> <p style="text-align: left;">Software product lines use structured reuse of software assets from existing products to reduce the time-to-market and development costs of new products in the line.&nbsp; Many product lines are safety-critical, including the software in medical devices, airplanes, helping robots, and self-driving vehicles. A safety case is built for a new product that assembles evidence showing that it is safe for use when used as planned.&nbsp; Constructing these safety cases is time-consuming and costly for industry and can be a drag on innovation.</p> <p style="text-align: left;">As a product line grows, new products and versions can introduce unintended changes that are unsafe.&nbsp; For example, new features (units of functionality in the software) often interact in ways that are contrary to the developers&rsquo; intent and may be unsafe.&nbsp;&nbsp; New products frequently operate in new contexts, such as different users, platforms, or environments, so assumptions used in previous products may be inappropriately reused rather than updated in the new product. &nbsp;This can jeopardize or even invalidate the safety case for the new product.&nbsp;&nbsp; To address this, we collaboratively introduced and tested a new technique that uses the traceability required by many certifying bodies to identify assumptions that were omitted or incorrectly retained in new products.</p> <p style="text-align: left;">We investigated an important class of change that increasingly challenges safety case construction, namely, the composition of potentially mismatched components, exemplified in the interaction between small unpiloted aerial vehicles and ground stations in an urban airspace. We collaboratively developed a general framework to construct interlocking safety cases between the individual unpiloted aerial vehicles and the urban airspace&rsquo;s overarching safety case. We delivered algorithms to monitor and respond to changes that violated safety assumptions.</p> <p style="text-align: left;">Toward automating the safety analysis for a new software product&rsquo;s safety case, we developed techniques to automatically learn unsafe feature interactions earlier in the development process.&nbsp; We did this using machine learning models based on similarity measures of the software assets of existing products in the product line.&nbsp;</p> <p style="text-align: left;">&nbsp;We further developed a new approach that detects unsafe feature interactions using program analysis to extract machine-learning models from source code.&nbsp; Where specifications of constraints on feature interactions are undocumented, the constraints are inferred using feature-related data-flow dependency information. We extended our work to highly configurable systems where very high numbers of options lead existing techniques to miss unsafe configurations. &nbsp;We experimentally evaluated our solutions on product-line benchmarks and a real-world configurable system. The project contribution was to support developers by improving the detection of feature combinations in a new product or version that could interact in unsafe or unknown ways.</p> <p style="text-align: left;">More broadly, the project developed new techniques for increasing the safety of a delivered software product-line system and decreasing the work needed to build its safety case.&nbsp; The project trained two graduate students in product line and safety case research.&nbsp; We worked with multiple undergraduate students to develop research and educational material inspired by a NASA astronaut jetpack product line and published a paper with several of them. We also developed a new undergraduate course in software system safety, which has now been taught three times. &nbsp;The algorithms, experimental data, and software from this project are publicly available to support future research and transition to industry.</p> <p style="text-align: left;">&nbsp;</p> <p style="text-align: left;">&nbsp;</p><br> <p>            Last Modified: 07/24/2021<br>      Modified by: Robyn&nbsp;R&nbsp;Lutz</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[The goal of this project was to develop a solution for safety-critical software product lines that partially automated the initial construction of a new productâ€™s safety case. The project aimed to provide guidance to developers in the reuse of safety assets such as safety-case elements across multiple releases of a safety-critical product line as appropriate. We developed, experimentally evaluated, and delivered several new techniques toward this goal.  Software product lines use structured reuse of software assets from existing products to reduce the time-to-market and development costs of new products in the line.  Many product lines are safety-critical, including the software in medical devices, airplanes, helping robots, and self-driving vehicles. A safety case is built for a new product that assembles evidence showing that it is safe for use when used as planned.  Constructing these safety cases is time-consuming and costly for industry and can be a drag on innovation. As a product line grows, new products and versions can introduce unintended changes that are unsafe.  For example, new features (units of functionality in the software) often interact in ways that are contrary to the developersâ€™ intent and may be unsafe.   New products frequently operate in new contexts, such as different users, platforms, or environments, so assumptions used in previous products may be inappropriately reused rather than updated in the new product.  This can jeopardize or even invalidate the safety case for the new product.   To address this, we collaboratively introduced and tested a new technique that uses the traceability required by many certifying bodies to identify assumptions that were omitted or incorrectly retained in new products. We investigated an important class of change that increasingly challenges safety case construction, namely, the composition of potentially mismatched components, exemplified in the interaction between small unpiloted aerial vehicles and ground stations in an urban airspace. We collaboratively developed a general framework to construct interlocking safety cases between the individual unpiloted aerial vehicles and the urban airspaceâ€™s overarching safety case. We delivered algorithms to monitor and respond to changes that violated safety assumptions. Toward automating the safety analysis for a new software productâ€™s safety case, we developed techniques to automatically learn unsafe feature interactions earlier in the development process.  We did this using machine learning models based on similarity measures of the software assets of existing products in the product line.   We further developed a new approach that detects unsafe feature interactions using program analysis to extract machine-learning models from source code.  Where specifications of constraints on feature interactions are undocumented, the constraints are inferred using feature-related data-flow dependency information. We extended our work to highly configurable systems where very high numbers of options lead existing techniques to miss unsafe configurations.  We experimentally evaluated our solutions on product-line benchmarks and a real-world configurable system. The project contribution was to support developers by improving the detection of feature combinations in a new product or version that could interact in unsafe or unknown ways. More broadly, the project developed new techniques for increasing the safety of a delivered software product-line system and decreasing the work needed to build its safety case.  The project trained two graduate students in product line and safety case research.  We worked with multiple undergraduate students to develop research and educational material inspired by a NASA astronaut jetpack product line and published a paper with several of them. We also developed a new undergraduate course in software system safety, which has now been taught three times.  The algorithms, experimental data, and software from this project are publicly available to support future research and transition to industry.           Last Modified: 07/24/2021       Submitted by: Robyn R Lutz]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
