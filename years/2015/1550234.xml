<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSI: Collaborative Research: Paratreet: Parallel Software for Spatial Trees in Simulation and Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>139977.00</AwardTotalIntnAmount>
<AwardAmount>139977</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Robert Beverly</SignBlockName>
<PO_EMAI>rbeverly@nsf.gov</PO_EMAI>
<PO_PHON>7032927068</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Many scientific and visualization methods involve organizing the data they are processing into a hierarchy (also known as a "tree").   These applications and methods include: astronomical simulations of particles moving under the influence of gravity, analysis of spatial data (that is, data that describes objects with respect to their relative position in space), photorealistic rendering of virtual environments,reconstruction of surfaces from laser scans, collision detection when simulating the movement of physical objects, and many others.   Tree data structures, and the algorithms used to work on these structures, are heavily used in these applications because they help to make these applications run much faster on supercomputers. However, implementing tree-based algorithms can require a significant effort, particularly on modern highly parallel computers.  This project will create ParaTreet, a software toolkit for parallel trees, that will enable rapid development of such applications.  Details of the parallel aspects will be hidden from the programmer, who will be able to quickly evaluate the relative merits of different trees and algorithms even when applied to large datasets and very computation-intensive applications. The combination of such an abstract and extensible framework with a portable adaptive runtime system will allow scientists to effectively use parallel hardware ranging from small clusters to petascale-class machines, for a wide variety of tree-based applications. This project will demonstrate the feasibility of such an approach as well as generate evidence of community adoption of this technology. If successful, this project will enable NSF-supported researchers to solve science problems faster as well as to tackle more complex problems, thus serving NSF's science mission.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;This project builds upon an existing collaboration on Computational Astronomy and the resultant software base in the ChaNGa (Charm N-body GrAvity solver) code. ChaNGa is a software package that performs collisionless N-body simulations, and can perform cosmological simulations with periodic boundary conditions in co-moving coordinates or simulations of isolated stellar systems. This project will extend ChaNGa with a parallel tree toolkit called ParaTreet and associated applications, that will allow scientists to effectively utilize small clusters as well as very large supercomputers for parallel tree-based calculations.  The key data structure in ParaTreet is an asynchronous software-based tree data cache, which maintains a writeback local copy of remote tree data. We plan to support a variety of spatial decomposition methods and the associated trees, including Oct-trees, KD-trees, inside-outside trees, ball trees, R-trees, and their combinations. Different trees are useful in different application circumstances, and the software will allow their relative merits to be evaluated with relative ease. The framework will support a variety of parallel work decomposition methods, including those based on space filling curves, and support dynamic rearrangement of parallel work at runtime. The algorithms supported will range from Barnes-Hut with various multipole expansions, data clustering, collision detection, surface reconstruction, ray intersection, etc. The software includes a collection of dynamic load balancing strategies in the Charm++ framework that can be tuned for specific problem structures. It also includes support for clusters of accelerators, such as GPGPUs. This project will demonstrate the feasibility of such an approach as well as generate evidence of community adoption of this technology.</AbstractNarration>
<MinAmdLetterDate>08/19/2016</MinAmdLetterDate>
<MaxAmdLetterDate>08/19/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1550234</AwardID>
<Investigator>
<FirstName>Thomas</FirstName>
<LastName>Quinn</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Thomas R Quinn</PI_FULL_NAME>
<EmailAddress>TRQ@astro.washington.edu</EmailAddress>
<PI_PHON>2066859009</PI_PHON>
<NSF_ID>000219146</NSF_ID>
<StartDate>08/19/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Magdalena</FirstName>
<LastName>Balazinska</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Magdalena Balazinska</PI_FULL_NAME>
<EmailAddress>magda@cs.washington.edu</EmailAddress>
<PI_PHON>2065434043</PI_PHON>
<NSF_ID>000094498</NSF_ID>
<StartDate>08/19/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington]]></Name>
<CityName>Seattle</CityName>
<StateCode>WA</StateCode>
<ZipCode>981953580</ZipCode>
<StreetAddress><![CDATA[4333 Brooklyn Ave NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<ProgramReference>
<Code>8009</Code>
<Text>Scientifc Software Integration</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~139977</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Many scientific calculations and analyses more most easily described<br />by a ``divide and conquer type'' algorithm.&nbsp; I.e., a large problem is<br />solved by dividing it into to smaller problems, and then recursively<br />continuing this division until the solution becomes trivial. The data<br />structure to organize these types of algorithms is called a ``tree''.<br />Objects organized in geometric trees are used in many domains<br />including astronomy, molecular dynamics, visualization/graphics, and<br />computational fluid dynamics.&nbsp; Programming tree-based algorithms for<br />serial computers is straightforward; however, analysis of large<br />datasets requires supercomputers with many thousands of computing<br />elements and perhaps specialized hardware such as Graphics Processing<br />Units (GPUs).&nbsp; Programming a divide and conquer algorithm on such<br />systems has not been easy because of the complexity of dividing the<br />data and work across a heterogeneous machine.<br /><br />This project began the development of a toolkit ``paratreet'' to<br />enable the rapid development of parallel tree-based algorithms.&nbsp; The<br />generality of the new parallel tree abstractions was demonstrated by<br />implementing several new tree based-applications.&nbsp; These include a<br />collision detection algorithm, a cluster finding algorithm, a<br />correlation function (a common measurement of spatial clustering)<br />algorithm and an algorithm for constructing voronoi cells (a technique<br />for dividing a space into computational elements).&nbsp;&nbsp; The toolkit<br />allows similar code to run on GPUs, many-core machines and distributed<br />memory machines.<br /><br />This project's toolkit software is being made available on the web<br />through the project github site.&nbsp; The project also contributed<br />improvements to the astrophysical simulation code for galaxy and<br />planet formation, ``ChaNGa''.&nbsp; This code is also freely available via<br />github.</p><br> <p>            Last Modified: 12/27/2018<br>      Modified by: Thomas&nbsp;R&nbsp;Quinn</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Many scientific calculations and analyses more most easily described by a ``divide and conquer type'' algorithm.  I.e., a large problem is solved by dividing it into to smaller problems, and then recursively continuing this division until the solution becomes trivial. The data structure to organize these types of algorithms is called a ``tree''. Objects organized in geometric trees are used in many domains including astronomy, molecular dynamics, visualization/graphics, and computational fluid dynamics.  Programming tree-based algorithms for serial computers is straightforward; however, analysis of large datasets requires supercomputers with many thousands of computing elements and perhaps specialized hardware such as Graphics Processing Units (GPUs).  Programming a divide and conquer algorithm on such systems has not been easy because of the complexity of dividing the data and work across a heterogeneous machine.  This project began the development of a toolkit ``paratreet'' to enable the rapid development of parallel tree-based algorithms.  The generality of the new parallel tree abstractions was demonstrated by implementing several new tree based-applications.  These include a collision detection algorithm, a cluster finding algorithm, a correlation function (a common measurement of spatial clustering) algorithm and an algorithm for constructing voronoi cells (a technique for dividing a space into computational elements).   The toolkit allows similar code to run on GPUs, many-core machines and distributed memory machines.  This project's toolkit software is being made available on the web through the project github site.  The project also contributed improvements to the astrophysical simulation code for galaxy and planet formation, ``ChaNGa''.  This code is also freely available via github.       Last Modified: 12/27/2018       Submitted by: Thomas R Quinn]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
