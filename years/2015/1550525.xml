<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSI: Collaborative Research: ParaTreet: Parallel Software for Spatial Trees in Simulation and Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>54297.00</AwardTotalIntnAmount>
<AwardAmount>54297</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Robert Beverly</SignBlockName>
<PO_EMAI>rbeverly@nsf.gov</PO_EMAI>
<PO_PHON>7032927068</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Many scientific and visualization methods involve organizing the data they are processing into a hierarchy (also known as a "tree").   These applications and methods include: astronomical simulations of particles moving under the influence of gravity, analysis of spatial data (that is, data that describes objects with respect to their relative position in space), photorealistic rendering of virtual environments,reconstruction of surfaces from laser scans, collision detection when simulating the movement of physical objects, and many others.   Tree data structures, and the algorithms used to work on these structures, are heavily used in these applications because they help to make these applications run much faster on supercomputers. However, implementing tree-based algorithms can require a significant effort, particularly on modern highly parallel computers.  This project will create ParaTreet, a software toolkit for parallel trees, that will enable rapid development of such applications.  Details of the parallel aspects will be hidden from the programmer, who will be able to quickly evaluate the relative merits of different trees and algorithms even when applied to large datasets and very computation-intensive applications. The combination of such an abstract and extensible framework with a portable adaptive runtime system will allow scientists to effectively use parallel hardware ranging from small clusters to petascale-class machines, for a wide variety of tree-based applications. This project will demonstrate the feasibility of such an approach as well as generate evidence of community adoption of this technology. If successful, this project will enable NSF-supported researchers to solve science problems faster as well as to tackle more complex problems, thus serving NSF's science mission.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;This project builds upon an existing collaboration on Computational Astronomy and the resultant software base in the ChaNGa (Charm N-body GrAvity solver) code. ChaNGa is a software package that performs collisionless N-body simulations, and can perform cosmological simulations with periodic boundary conditions in co-moving coordinates or simulations of isolated stellar systems. This project will extend ChaNGa with a parallel tree toolkit called ParaTreet and associated applications, that will allow scientists to effectively utilize small clusters as well as very large supercomputers for parallel tree-based calculations.  The key data structure in ParaTreet is an asynchronous software-based tree data cache, which maintains a writeback local copy of remote tree data. We plan to support a variety of spatial decomposition methods and the associated trees, including Oct-trees, KD-trees, inside-outside trees, ball trees, R-trees, and their combinations. Different trees are useful in different application circumstances, and the software will allow their relative merits to be evaluated with relative ease. The framework will support a variety of parallel work decomposition methods, including those based on space filling curves, and support dynamic rearrangement of parallel work at runtime. The algorithms supported will range from Barnes-Hut with various multipole expansions, data clustering, collision detection, surface reconstruction, ray intersection, etc. The software includes a collection of dynamic load balancing strategies in the Charm++ framework that can be tuned for specific problem structures. It also includes support for clusters of accelerators, such as GPGPUs. This project will demonstrate the feasibility of such an approach as well as generate evidence of community adoption of this technology.</AbstractNarration>
<MinAmdLetterDate>08/19/2016</MinAmdLetterDate>
<MaxAmdLetterDate>08/19/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1550525</AwardID>
<Investigator>
<FirstName>Milind</FirstName>
<LastName>Kulkarni</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Milind Kulkarni</PI_FULL_NAME>
<EmailAddress>milind@purdue.edu</EmailAddress>
<PI_PHON>7654941742</PI_PHON>
<NSF_ID>000549148</NSF_ID>
<StartDate>08/19/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072032</ZipCode>
<StreetAddress><![CDATA[465 Northwestern]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<ProgramReference>
<Code>8009</Code>
<Text>Scientifc Software Integration</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~54297</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A wide range of scientific disciplines rely on algorithms that are built around tree structures: cosmological simulation uses spatial tree structures called <em>quad trees</em>&nbsp;to capture the spatial relationships of stars in a galaxy; ray-tracers use tree structures called <em>bounding-volume hierarchies</em>&nbsp;to capture the locations of objects in a scene; data analyses of various kinds use <em>kd-trees</em>&nbsp;to capture the relationships of data points in an abstract space. By using such tree structures, algorithms in these domains can be sped up by orders of magnitude. As a result, there has been significant work in developing tree-based algorithms for these domains.</p> <p>As the data sets targeted by these algorithms get bigger, it is increasingly important to run the algorithms on large scale systems that might contain hundreds, or thousands, of processing nodes, and might contain complex execution hardware such as graphics processing units (GPUs). Adapting tree-based algorithms to run on these platforms is extremely difficult, and requires careful coordination of scheduling, communication, and data distribution.</p> <p>This project contributed to the development of <em>ParaTreet</em>, a software framework that makes it easy for domain scientists to develop tree-based algorithms that can run on a wide variety of platforms. Crucially, ParaTreet abstracts away details such as i) precisely what type of tree is being used; ii) how that tree is distributed across a computational system; iii) how the computation is orchestrated across that system. As a result, ParaTreet aims to dramatically reduce the overhead of developing tree-based algorithms.</p> <p>Over the course of this project, we have made several significant accomplishments: i) we showed a distributed version of ParaTreet is able to scale up to 2048 cores; ii) we showed that our new implementation of a GPU-based tree traversal kernel is able to substantially outperform ParaTreet's CPU-only implementation (see attached image); iii) we demonstrated that ParaTreet could be used to solve problems in new domains, such as a cluster-finding algorithm.</p> <p>The ParaTreet project also reached out to domain scientists in a number of domains to disseminate ParaTreet to those communities and provide impact in those domains. Among the communities we reached out to were: graphics (ray tracing), cosmology (gravitational simulation), materials science (collision detection, chemistry and biology (molecular dynamics).</p><br> <p>            Last Modified: 01/13/2018<br>      Modified by: Milind&nbsp;Kulkarni</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2018/1550525/1550525_10452460_1515166096825_image2--rgov-214x142.jpg" original="/por/images/Reports/POR/2018/1550525/1550525_10452460_1515166096825_image2--rgov-800width.jpg" title="CPU vs. GPU traversal times"><img src="/por/images/Reports/POR/2018/1550525/1550525_10452460_1515166096825_image2--rgov-66x44.jpg" alt="CPU vs. GPU traversal times"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Single-node traversal times. Bar 1: CPU-only; Bar 2: old GPU implementation; Bar 3: new GPU implementation</div> <div class="imageCredit">ParaTreet team</div> <div class="imagePermisssions">Royalty-free (unrestricted use)</div> <div class="imageSubmitted">Milind&nbsp;Kulkarni</div> <div class="imageTitle">CPU vs. GPU traversal times</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A wide range of scientific disciplines rely on algorithms that are built around tree structures: cosmological simulation uses spatial tree structures called quad trees to capture the spatial relationships of stars in a galaxy; ray-tracers use tree structures called bounding-volume hierarchies to capture the locations of objects in a scene; data analyses of various kinds use kd-trees to capture the relationships of data points in an abstract space. By using such tree structures, algorithms in these domains can be sped up by orders of magnitude. As a result, there has been significant work in developing tree-based algorithms for these domains.  As the data sets targeted by these algorithms get bigger, it is increasingly important to run the algorithms on large scale systems that might contain hundreds, or thousands, of processing nodes, and might contain complex execution hardware such as graphics processing units (GPUs). Adapting tree-based algorithms to run on these platforms is extremely difficult, and requires careful coordination of scheduling, communication, and data distribution.  This project contributed to the development of ParaTreet, a software framework that makes it easy for domain scientists to develop tree-based algorithms that can run on a wide variety of platforms. Crucially, ParaTreet abstracts away details such as i) precisely what type of tree is being used; ii) how that tree is distributed across a computational system; iii) how the computation is orchestrated across that system. As a result, ParaTreet aims to dramatically reduce the overhead of developing tree-based algorithms.  Over the course of this project, we have made several significant accomplishments: i) we showed a distributed version of ParaTreet is able to scale up to 2048 cores; ii) we showed that our new implementation of a GPU-based tree traversal kernel is able to substantially outperform ParaTreet's CPU-only implementation (see attached image); iii) we demonstrated that ParaTreet could be used to solve problems in new domains, such as a cluster-finding algorithm.  The ParaTreet project also reached out to domain scientists in a number of domains to disseminate ParaTreet to those communities and provide impact in those domains. Among the communities we reached out to were: graphics (ray tracing), cosmology (gravitational simulation), materials science (collision detection, chemistry and biology (molecular dynamics).       Last Modified: 01/13/2018       Submitted by: Milind Kulkarni]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
