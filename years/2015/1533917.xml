<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: EXPL: DSD: Portal: A Language and Compiler for Parallel N-body Computations</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>06/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>316000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: XPS: EXPL: DSD: Portal: A Language and Compiler for Parallel N-body Computations&lt;br/&gt;&lt;br/&gt;Modern machines are becoming increasingly more complex resulting in even the most advanced compilers failing to generate the best optimized code. As a result, there is a big gap between the algorithm one designs on paper and the code that runs efficiently on a billion-core system. This research project aims to bridge this gap by developing Portal, a new high-performance domain-specific language(DSL) and compiler, for the domain of N-body problems. Such problems have applications in various areas ranging from scientific computing simulations in molecular dynamics, astrophysics, acoustics, fluid dynamics all the way to big data problems. In Portal, domain scientists can write programs at a high level while obtaining the performance of highly tuned and optimized low level code written by experts on modern massively parallel machines. The intellectual merit is to show how a DSL with a high-level formulation can lead directly to both asymptotically fast algorithms and their efficient parallel implementations on a variety of distinct architectures. The project's broader significance and importance are freely available software to enable domain scientists to harness the performance power of parallel computing and enabling scientific discovery not only in scientific computing and machine learning but also in a number of related problems in domains such as statistics, computer graphics, computational geometry, and applied mathematics. These problems can be expressed in Portal to obtain an out-of-the-box parallel optimized implementation.&lt;br/&gt;&lt;br/&gt;The goals of Portal are three-fold: (a) to implement scalable, fast, and asymptotically optimal tree-based N-body algorithms, (b) to design an intuitive language and API to enable rapid implementations of a variety of algorithms, and (c) to enable parallel large-scale problems to run on current and future exascale machines. More importantly, the language and intermediate algorithm representation are independent of the architecture, making this approach portable and easily extensible to different platforms from ARM/x86 CPUs to GPUs. The project aims to solve important software issues that will allow for interoperability and scalability of N-body problems on massive datasets.</AbstractNarration>
<MinAmdLetterDate>06/24/2015</MinAmdLetterDate>
<MaxAmdLetterDate>04/28/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1533917</AwardID>
<Investigator>
<FirstName>Aparna</FirstName>
<LastName>Chandramowlishwaran</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Aparna Chandramowlishwaran</PI_FULL_NAME>
<EmailAddress>amowli@uci.edu</EmailAddress>
<PI_PHON>9498249447</PI_PHON>
<NSF_ID>000678838</NSF_ID>
<StartDate>06/24/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California - Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926972700</ZipCode>
<StreetAddress><![CDATA[5200 Engineering Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8283</Code>
<Text>Exploiting Parallel&amp;Scalabilty</Text>
</ProgramElement>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~300000</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project is to develop Portal, a new domain-specific language (DSL) and code-generator to enable high-performance implementations of N-body problems on modern parallel machines. To that end, we designed the Portal language and&nbsp;developed a&nbsp;domain-specific compiler&nbsp;that chooses the optimal algorithm and generates optimized and NUMA-aware parallel code for CPU x86 architectures. The first goal in the development of Portal is to choose optimal algorithms with time/accuracy guarantees which motivate fast approximate algorithms. Therefore, Portal is built on top of the&nbsp;algorithmic framework PASCAL&nbsp;which utilizes tree data-structures and user-controlled pruning or approximations to reduce the asymptotic runtime complexity from being linear in the number of data points to be logarithmic. The second goal in the development of Portal is an intuitive language for domain practitioners. So, we designed the Portal language inspired by the mathematical formulation of&nbsp;N-body problems. It aims to describe N-body problems in a well-structured high-level form that allows domain experts to focus on the specification of the problem rather than the algorithm or its associated implementation on a target platform. This separation is one of the keys to Portal's performance. The third and final goal in the development of Portal is scalability.&nbsp;</p> <p>Experimental results on 6 problems show that the programs generated by Portal are within a factor of&nbsp;5%&nbsp;(on average) of expert hand-tuned code. We also validated Portal against state-of-the-art libraries/packages for three N-body problems (namely, 2-point correlation, naive Bayes classifier, and Barnes-Hut). The parallel code generated by Portal using optimal tree-based algorithms outperforms machine learning libraries/packages such as&nbsp;scikit-learn and&nbsp;MLPACK. Additionally, we also compared the lines of code of Portal programs against hand-optimized and library codes. For example, the k-nearest neighbors problem&nbsp;is&nbsp;written in 13 lines of Portal code and achieve within&nbsp;2&nbsp;&minus;&nbsp;5% of expert hand-tuned performance. &nbsp;We also successfully wrote a real-world problem, face clustering in Portal and achieved higher performance than the state-of-the-art.&nbsp;</p> <p>We showed that a DSL with an appropriately high-level formulation leads directly to both asymptotically fast algorithms and their efficient parallel implementations on multicore systems for generalized N-body problems. Moreover, our language and intermediate algorithm representation are independent of the architecture, making our approach portable and easily extensible to different platforms.</p> <p>Portal is available open-source at&nbsp;https://gitlab.com/Nbody-Portal/Code.</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/11/2019<br>      Modified by: Aparna&nbsp;Chandramowlishwaran</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project is to develop Portal, a new domain-specific language (DSL) and code-generator to enable high-performance implementations of N-body problems on modern parallel machines. To that end, we designed the Portal language and developed a domain-specific compiler that chooses the optimal algorithm and generates optimized and NUMA-aware parallel code for CPU x86 architectures. The first goal in the development of Portal is to choose optimal algorithms with time/accuracy guarantees which motivate fast approximate algorithms. Therefore, Portal is built on top of the algorithmic framework PASCAL which utilizes tree data-structures and user-controlled pruning or approximations to reduce the asymptotic runtime complexity from being linear in the number of data points to be logarithmic. The second goal in the development of Portal is an intuitive language for domain practitioners. So, we designed the Portal language inspired by the mathematical formulation of N-body problems. It aims to describe N-body problems in a well-structured high-level form that allows domain experts to focus on the specification of the problem rather than the algorithm or its associated implementation on a target platform. This separation is one of the keys to Portal's performance. The third and final goal in the development of Portal is scalability.   Experimental results on 6 problems show that the programs generated by Portal are within a factor of 5% (on average) of expert hand-tuned code. We also validated Portal against state-of-the-art libraries/packages for three N-body problems (namely, 2-point correlation, naive Bayes classifier, and Barnes-Hut). The parallel code generated by Portal using optimal tree-based algorithms outperforms machine learning libraries/packages such as scikit-learn and MLPACK. Additionally, we also compared the lines of code of Portal programs against hand-optimized and library codes. For example, the k-nearest neighbors problem is written in 13 lines of Portal code and achieve within 2 &minus; 5% of expert hand-tuned performance.  We also successfully wrote a real-world problem, face clustering in Portal and achieved higher performance than the state-of-the-art.   We showed that a DSL with an appropriately high-level formulation leads directly to both asymptotically fast algorithms and their efficient parallel implementations on multicore systems for generalized N-body problems. Moreover, our language and intermediate algorithm representation are independent of the architecture, making our approach portable and easily extensible to different platforms.  Portal is available open-source at https://gitlab.com/Nbody-Portal/Code.          Last Modified: 11/11/2019       Submitted by: Aparna Chandramowlishwaran]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
