<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AitF: FULL: Collaborative Research: Better Hashing for Applications: From Nuts &amp; Bolts to Asymptotics</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>A. Funda Ergun</SignBlockName>
<PO_EMAI>fergun@nsf.gov</PO_EMAI>
<PO_PHON>7032922216</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project engages experts in systems and network algorithms from Carnegie Mellon University and Harvard University to improve hashing-based data structures for systems. Hashing is an approach that turns a variable length string into a small, fixed-length value. Hashing provides a short, consistent fingerprint used to identify larger pieces of data, for uses including storing and locating data items quickly and effectively. Hashing provides a key building block for sophisticated approaches to storing, measuring, and managing data. Hashing-based data structures have correspondingly become widely accepted, often key workhorses throughout systems and networking. &lt;br/&gt;&lt;br/&gt;This project will create synergies between theory and systems in the area of hashing, with various approaches for lasting broader impact. Prototype code will be released for new algorithms and data structures created in the course of the project. Curricular materials focused on project material will be developed and distributed. The project will offer a wide range of research opportunities at various levels of sophistication for graduate and undergraduate students at both universities. &lt;br/&gt;&lt;br/&gt;The team unites expertise with theoretical design and analysis with expertise in systems design and analysis, allowing ideas and insights to flow between the two sides. The work starts from the lowest level of what choice of what hash functions to use, through the design and analysis of general data structures, to the development of applications that utilize hashing-based data structures to provide top performance. Project goals include both improving existing structures such as Bloom filters and cuckoo hash tables in practical systems to developing new structures for related problems such as maintaining small structures for fast function evaluation on key sets and reconciliation of datasets.</AbstractNarration>
<MinAmdLetterDate>08/06/2015</MinAmdLetterDate>
<MaxAmdLetterDate>08/06/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1535821</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Andersen</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David G Andersen</PI_FULL_NAME>
<EmailAddress>dga@cs.cmu.edu</EmailAddress>
<PI_PHON>4122683064</PI_PHON>
<NSF_ID>000423704</NSF_ID>
<StartDate>08/06/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName/>
<StateCode>PA</StateCode>
<ZipCode>152133890</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7239</Code>
<Text>Algorithms in the Field</Text>
</ProgramElement>
<ProgramReference>
<Code>012Z</Code>
<Text>AitF FULL Projects</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project resulted in the creation of new techniques for storing and searching information on computers that are faster, use less memory, and are better suited to modern computers and workloads. The advances for data structures such as the oddly-named "Cuckoo Hashing" help networks send information faster at lower cost and help databases large and small operate without spending as much money on memory.</p> <p>At a technical level, the project produced what is now one of the fastest parallel hash tables ever built. A hash table stores information organized into keys that have values associated with them, which can be changed or later examined. (For example, in a map application, the key "Washington Monument" could have associated with it "2 15th St NW, Washington, DC 20024", allowing a user to search by name to find an address).&nbsp; By a <em>parallel</em>&nbsp;hash table, we mean one that can be accessed simultaneously by different programs running at the same time. With modern computers growing to having larger and larger numbers of CPU cores, each of which can be executing a program at the same time, parallel data structures such as those we developed are essential to being able to continue to make programs go faster.</p> <p>The second major contribution of the project was the development of a new, practical, approximate data structure for <em>data ranges</em>. For example, it is often useful to be able to search a dataset to ask:&nbsp; "Find all monuments whose names start with 'Grand'", finding Grand Canyon, Grand Portage, etc.&nbsp; Or 'Find All Roads whose speed limit is between 80 and 85', and so on. These are examples of range queries, and in our project, we developed a fast new data structure to help perform them, called the Range Filter.&nbsp; The Range Filter is very memory efficient, because it may be wrong, but only in one direction:&nbsp; It may incorrectly say "Yes, there are items in that range", but if there are such items, it will never say there are not. The range filter can thus be used to filter out queries from a more expensive search on disk. A query for "All Roads whose speed limit is between 125 and 130mph" would immediately and cheaply be rejected. In our papers on this topic, we showed how the range filter can be applied to several existing database and database-like systems to save memory and improve speed.</p> <p>The final contribution of the project was the development of a new, practical method for order-preserving compression that can be applied to many types of data storage systems. Called HOPE -- the High-speed Order Preserving Encoder -- the system can help shorten (compress) strings while ensuring that the order of the strings remains the same, and thus, Compressed("Washington Monument") would still appear later in a sorted list than Compressed("Grand Canyon"). This allows the compression to be applied to existing systems that require data to be stored in order, such as the indexes used by database systems to rapidly find things. Intriguingly, by saving memory, HOPE <em>also</em>&nbsp;helps speed up these systems by reducing the overall amount of work they have to do. Results showed that in some cases, using HOPE can speed up a data storage method by 40% and reduce its memory use by 30%.</p><br> <p>            Last Modified: 07/08/2020<br>      Modified by: David&nbsp;G&nbsp;Andersen</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project resulted in the creation of new techniques for storing and searching information on computers that are faster, use less memory, and are better suited to modern computers and workloads. The advances for data structures such as the oddly-named "Cuckoo Hashing" help networks send information faster at lower cost and help databases large and small operate without spending as much money on memory.  At a technical level, the project produced what is now one of the fastest parallel hash tables ever built. A hash table stores information organized into keys that have values associated with them, which can be changed or later examined. (For example, in a map application, the key "Washington Monument" could have associated with it "2 15th St NW, Washington, DC 20024", allowing a user to search by name to find an address).  By a parallel hash table, we mean one that can be accessed simultaneously by different programs running at the same time. With modern computers growing to having larger and larger numbers of CPU cores, each of which can be executing a program at the same time, parallel data structures such as those we developed are essential to being able to continue to make programs go faster.  The second major contribution of the project was the development of a new, practical, approximate data structure for data ranges. For example, it is often useful to be able to search a dataset to ask:  "Find all monuments whose names start with 'Grand'", finding Grand Canyon, Grand Portage, etc.  Or 'Find All Roads whose speed limit is between 80 and 85', and so on. These are examples of range queries, and in our project, we developed a fast new data structure to help perform them, called the Range Filter.  The Range Filter is very memory efficient, because it may be wrong, but only in one direction:  It may incorrectly say "Yes, there are items in that range", but if there are such items, it will never say there are not. The range filter can thus be used to filter out queries from a more expensive search on disk. A query for "All Roads whose speed limit is between 125 and 130mph" would immediately and cheaply be rejected. In our papers on this topic, we showed how the range filter can be applied to several existing database and database-like systems to save memory and improve speed.  The final contribution of the project was the development of a new, practical method for order-preserving compression that can be applied to many types of data storage systems. Called HOPE -- the High-speed Order Preserving Encoder -- the system can help shorten (compress) strings while ensuring that the order of the strings remains the same, and thus, Compressed("Washington Monument") would still appear later in a sorted list than Compressed("Grand Canyon"). This allows the compression to be applied to existing systems that require data to be stored in order, such as the indexes used by database systems to rapidly find things. Intriguingly, by saving memory, HOPE also helps speed up these systems by reducing the overall amount of work they have to do. Results showed that in some cases, using HOPE can speed up a data storage method by 40% and reduce its memory use by 30%.       Last Modified: 07/08/2020       Submitted by: David G Andersen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
