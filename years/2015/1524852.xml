<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Transformations for Synergistic Analysis of Large Evolving Graphs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>06/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The importance of graph processing has grown with the popularity of graph analytics. An important feature of real-world graphs is that they are constantly evolving (e.g., social networks, networks modeling spreading of a disease etc.). Graph analytics over an evolving graph entails repeating analysis over snapshots of a graph taken at different points in time to observe how features of interest change over time. For large real-world graphs with tens of billions of edges, evolving graph analysis is both highly compute- and memory-intensive. By developing transformations that reorganize the computation and data, techniques for rapid evolving graph analytics on modern computing platforms are being considered. Many students are being trained and educated in this important field.&lt;br/&gt;&lt;br/&gt;Graph analysis can greatly benefit from cores and storage available on modern parallel machines. However, effectively exploiting the resources remains an enormous challenge due to irregular nature of parallelism and lack of data locality in graph computations. This work is leveraging two key characteristics, overlapping working sets and computed value stability, to develop techniques for speeding up graph analytics. The techniques being considered include: optimization of reading and writing of large graphs on disk, optimizing inter-node communication on a cluster, and optimizing computation over multiple versions of an evolving graph. These optimizations are being used to greatly enhance the performance of multiple popular graph processing systems. Public dissemination of these software enhancements are also planned.</AbstractNarration>
<MinAmdLetterDate>06/30/2015</MinAmdLetterDate>
<MaxAmdLetterDate>06/30/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1524852</AwardID>
<Investigator>
<FirstName>Rajiv</FirstName>
<LastName>Gupta</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rajiv Gupta</PI_FULL_NAME>
<EmailAddress>gupta@cs.ucr.edu</EmailAddress>
<PI_PHON>9518272558</PI_PHON>
<NSF_ID>000077772</NSF_ID>
<StartDate>06/30/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Riverside</Name>
<CityName>RIVERSIDE</CityName>
<ZipCode>925210217</ZipCode>
<PhoneNumber>9518275535</PhoneNumber>
<StreetAddress>Research &amp; Economic Development</StreetAddress>
<StreetAddress2><![CDATA[245 University Office Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>44</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA44</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>627797426</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Riverside]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>925210001</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>41</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA41</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~400000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The use of Graph Analytics has become pervasive because large data sets across many domains can be readily represented as graphs where nodes represent entities and edges represent pairwise relationships among them. Although graph analytics workloads contain vast amounts of data level parallelism, exploiting this parallelism is an enormous challenge due to their large memory footprint, computation that is active across this footprint, and the irregular nature of computation that lacks all forms of data locality. In this work we have developed new analytics algorithms that are designed to address the challenges of utilizing the major parallel computing platforms available today. The key outcomes of this project are as follows:<br /><br /><strong>1. Graph Analytics on multicores:</strong> For shared-memory platforms we have developed parallel algorithms for evaluating a large number of queries either one by one or simultaneously. To handle very large graphs that do not fit in memory, we have advanced the state-of-the-art in out-of-core graph analytics.<br /><br /><strong>2. Graph Analytics on clusters:</strong> In context of clusters we developed distributed algorithms that simultaneously evaluate a query on multiple versions of an evolving graph as well as simultaneously evaluate batches of queries on the same version of a graph. In addition, we have considered distributed algorithms that work on streaming graphs, that is, graphs that are dynamically changing.<br /><br /><strong>3. Graph Analytics on a GPGPU:</strong> Finally this project also developed parallel algorithms for graph analytics that are suitable for GPGPUs which have tremendous amount of hardware parallelism but limited amount of memory. We have developed techniques that dynamically limit loading to subgraphs corresponding to active computations and manage vast amounts of generated intermediate data by orchestrating loading and unloading of this data to and from GPGPU memory.<br /><br /><strong>Broader Impacts:</strong> The results of this research have been widely disseminated by publication in high quality venues including ASPLOS (3 papers), IEEE BigData (2 papers), EuroSys, HPDC, USENIX ATC, ACM TACO, LCPC, IJPP, CC, ISMM and others. A number of PhD students participated in this project. Keval Vora (Simon Fraser Univ.), Sai Charan Koduru (Microsoft), and Amlan Kusum (Oracle) have graduated. Abbas Mazloumi, Chengshuo Xu, Xiaolin Jiang, and Gurneet Kaur have made substantial progress in their dissertation work and are expected to graduate over the next two years.</p><br> <p>            Last Modified: 07/05/2020<br>      Modified by: Rajiv&nbsp;Gupta</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The use of Graph Analytics has become pervasive because large data sets across many domains can be readily represented as graphs where nodes represent entities and edges represent pairwise relationships among them. Although graph analytics workloads contain vast amounts of data level parallelism, exploiting this parallelism is an enormous challenge due to their large memory footprint, computation that is active across this footprint, and the irregular nature of computation that lacks all forms of data locality. In this work we have developed new analytics algorithms that are designed to address the challenges of utilizing the major parallel computing platforms available today. The key outcomes of this project are as follows:  1. Graph Analytics on multicores: For shared-memory platforms we have developed parallel algorithms for evaluating a large number of queries either one by one or simultaneously. To handle very large graphs that do not fit in memory, we have advanced the state-of-the-art in out-of-core graph analytics.  2. Graph Analytics on clusters: In context of clusters we developed distributed algorithms that simultaneously evaluate a query on multiple versions of an evolving graph as well as simultaneously evaluate batches of queries on the same version of a graph. In addition, we have considered distributed algorithms that work on streaming graphs, that is, graphs that are dynamically changing.  3. Graph Analytics on a GPGPU: Finally this project also developed parallel algorithms for graph analytics that are suitable for GPGPUs which have tremendous amount of hardware parallelism but limited amount of memory. We have developed techniques that dynamically limit loading to subgraphs corresponding to active computations and manage vast amounts of generated intermediate data by orchestrating loading and unloading of this data to and from GPGPU memory.  Broader Impacts: The results of this research have been widely disseminated by publication in high quality venues including ASPLOS (3 papers), IEEE BigData (2 papers), EuroSys, HPDC, USENIX ATC, ACM TACO, LCPC, IJPP, CC, ISMM and others. A number of PhD students participated in this project. Keval Vora (Simon Fraser Univ.), Sai Charan Koduru (Microsoft), and Amlan Kusum (Oracle) have graduated. Abbas Mazloumi, Chengshuo Xu, Xiaolin Jiang, and Gurneet Kaur have made substantial progress in their dissertation work and are expected to graduate over the next two years.       Last Modified: 07/05/2020       Submitted by: Rajiv Gupta]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
