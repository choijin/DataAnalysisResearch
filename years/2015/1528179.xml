<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Automatic Storage and Network Contention Management for Large-scale High-performance Computing Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>High performance computing is essential to science, industry, and the environment, from resource exploration to the design of the next generation of consumer electronics. These high performance computer systems are among the most complex and expensive computer systems and require that their resources be used in the most efficient manner. Many of the applications that utilize high performance computing are data-intensive, and storage system performance is a crucial aspect of system performance. However, storage systems are notoriously sensitive to contention caused by competition among storage clients for limited bandwidth and disk access. This is a significant problem for shared storage systems. &lt;br/&gt;&lt;br/&gt;This project provides an automatic storage contention alleviation and reduction system (ASCAR) for large-scale high-performance storage to increase bandwidth utilization and fairness of resource allocation. ASCAR uses machine learning methods combined with several heuristics to discover the fittest control strategy. It is a highly scalable and fully automatic storage contention and congestion management system, which can improve the efficiency of both legacy and new systems, with no need to change either server hardware/software or existing applications. ASCAR regulates I/O traffic from the client side using a rule based algorithm. It employs a shared-nothing design and requires no runtime coordination between clients or with a central coordinator whatsoever, because runtime coordination is slow and unscalable. The effectiveness of ASCAR relies on the quality of traffic control. The research team has designed a prototype algorithm, the SHAred-nothing Rule Producer (SHARP), which produces rules in an unsupervised manner by systematically exploring the solution space of possible designs. Starting from one initial rule, SHARP uses heuristics similar to random-restart hill climbing to find the optimal parameters without the need for an exhaustive search. ASCAR monitors the workloads running on the system and uses several heuristics to pick up the fittest rules. &lt;br/&gt;&lt;br/&gt;It is clear that computer systems are getting ever more sophisticated, and human-lead empirical-based approach towards system optimization is not the most efficient way to realize the full potential of these modern, complex, high performance computing systems. This research brings machine learning, artificial intelligence, and big data methods to systems research and could lead to a very low cost I/O performance increase for a wide range of systems.</AbstractNarration>
<MinAmdLetterDate>08/12/2015</MinAmdLetterDate>
<MaxAmdLetterDate>08/12/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1528179</AwardID>
<Investigator>
<FirstName>Darrell</FirstName>
<LastName>Long</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Darrell D Long</PI_FULL_NAME>
<EmailAddress>darrell@cs.ucsc.edu</EmailAddress>
<PI_PHON>8314592616</PI_PHON>
<NSF_ID>000470073</NSF_ID>
<StartDate>08/12/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Cruz</Name>
<CityName>Santa Cruz</CityName>
<ZipCode>950641077</ZipCode>
<PhoneNumber>8314595278</PhoneNumber>
<StreetAddress>1156 High Street</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA20</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>125084723</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SANTA CRUZ</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Santa Cruz]]></Name>
<CityName>Santa Cruz</CityName>
<StateCode>CA</StateCode>
<ZipCode>950641077</ZipCode>
<StreetAddress><![CDATA[1156 High St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA20</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 1"> <div class="section"> <div class="layoutArea"> <div class="column"> <p><span>The CAPES project has produced several milestones in the field of systems performance enhancement, and opened up many avenues of investigation towards improving other aspects of distributed systems. Our first milestone is the CAPES project, which takes periodic measurements of a target computer system&rsquo;s state, and trains a deep neural network to modify a system&rsquo;s current parameter values in order to maximize performance. The CAPES software is minimally intrusive, and can be deployed into a production system to collect training data and suggest tuning actions during the system&rsquo;s daily operation. Our evaluation of a prototype on a Lustre file system demonstrated an increase in I/O throughput up to 45%. The CAPES project proved a key aspect of our project&rsquo;s work: that machine learning based performance enhancement can play a key part in improving performance. Our work with CAPES revealed two key aspects about improving large computer systems: one, many of these systems collect data in a manner that overwhelms AI modeling techniques with useless data; two, modeling the effects of storage and cache in order to predict how the demand for data changes can lead to the prevention of performance slowdowns.</span></p> <p><span>Hence, the second milestone of the CAPES project is the WinnowML framework. This framework ingests a neural network architecture provided by the user, examines a large dataset about a computer system, and automatically explores the data within it to determine what data should be analyzed to optimize accuracy and training time. Doing so, WinnowML helps an analyst produce AI models with high accuracy, thereby upgrading predictive models that improve performance. We compared WinnowML against common data analysis methods for two different datasets, the CERN EOS logs for regression and the Backblaze dataset for classification. Experimentally, we demonstrate that WinnowML outperforms common feature selection techniques (such as Principal Component Analysis) by up to 2X.</span></p> <p><span>With this framework, our third milestone was Geomancy, an application of both AI-enhanced system tuning and accurate modeling of a system&rsquo;s demand for storage resources. Using a combination of machine learning techniques suitable for temporal modeling, Geomancy determines when and where a performance bottleneck may happen due to changing demand on the system. When it detects an impending performance slowdown, Geomancy suggests changes in the layout of the data that is demanded to mitigate or prevent the slowdown from happening. Our approach to optimizing throughput offers benefits for storage systems, such as avoiding potential bottlenecks, and increasing overall I/O throughput from 11% to 30%.</span></p> <p><span>We will disseminate the results by submitting two conference papers. The WinnowML project will be submitted to SIGmetrics 2020 (with results as early as March 31 2020) and the Geomancy project has been submitted to ISPASS 2020 (2020 IEEE International Symposium on Performance Analysis of Systems and Software) with results as early as January 14 2020.</span></p> </div> </div> </div> </div><br> <p>            Last Modified: 12/04/2019<br>      Modified by: Darrell&nbsp;D&nbsp;Long</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[     The CAPES project has produced several milestones in the field of systems performance enhancement, and opened up many avenues of investigation towards improving other aspects of distributed systems. Our first milestone is the CAPES project, which takes periodic measurements of a target computer system’s state, and trains a deep neural network to modify a system’s current parameter values in order to maximize performance. The CAPES software is minimally intrusive, and can be deployed into a production system to collect training data and suggest tuning actions during the system’s daily operation. Our evaluation of a prototype on a Lustre file system demonstrated an increase in I/O throughput up to 45%. The CAPES project proved a key aspect of our project’s work: that machine learning based performance enhancement can play a key part in improving performance. Our work with CAPES revealed two key aspects about improving large computer systems: one, many of these systems collect data in a manner that overwhelms AI modeling techniques with useless data; two, modeling the effects of storage and cache in order to predict how the demand for data changes can lead to the prevention of performance slowdowns.  Hence, the second milestone of the CAPES project is the WinnowML framework. This framework ingests a neural network architecture provided by the user, examines a large dataset about a computer system, and automatically explores the data within it to determine what data should be analyzed to optimize accuracy and training time. Doing so, WinnowML helps an analyst produce AI models with high accuracy, thereby upgrading predictive models that improve performance. We compared WinnowML against common data analysis methods for two different datasets, the CERN EOS logs for regression and the Backblaze dataset for classification. Experimentally, we demonstrate that WinnowML outperforms common feature selection techniques (such as Principal Component Analysis) by up to 2X.  With this framework, our third milestone was Geomancy, an application of both AI-enhanced system tuning and accurate modeling of a system’s demand for storage resources. Using a combination of machine learning techniques suitable for temporal modeling, Geomancy determines when and where a performance bottleneck may happen due to changing demand on the system. When it detects an impending performance slowdown, Geomancy suggests changes in the layout of the data that is demanded to mitigate or prevent the slowdown from happening. Our approach to optimizing throughput offers benefits for storage systems, such as avoiding potential bottlenecks, and increasing overall I/O throughput from 11% to 30%.  We will disseminate the results by submitting two conference papers. The WinnowML project will be submitted to SIGmetrics 2020 (with results as early as March 31 2020) and the Geomancy project has been submitted to ISPASS 2020 (2020 IEEE International Symposium on Performance Analysis of Systems and Software) with results as early as January 14 2020.           Last Modified: 12/04/2019       Submitted by: Darrell D Long]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
