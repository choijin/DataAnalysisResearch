<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Agile communicators: Preparing students for communication-intensive software development through inquiry, critique and reflection</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>218735.00</AwardTotalIntnAmount>
<AwardAmount>240435</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Stephanie August</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This project will address a significant, important, and largely overlooked need in the education of future software professionals: thorough, sustained instruction in the communication skills required for real software development. The quality of team communication is widely acknowledged to be a key factor in the success or failure of software projects. The fast pace and constant change of today's software workplace demand an Agile approach, i.e., drive by constant team and customer communication. This project will develop an undergraduate curriculum for computer science and software engineering programs that promotes Agile communication through exercises in inquiry, critique and reflection, all grounded in authentic software development settings.&lt;br/&gt;&lt;br/&gt;The goal of the project is to strengthen the Agile communication characteristics of proactivity, flexibility, and creativity among computer science and software engineering students. Communication-intensive activities are woven through introductory courses in a variety of ways. The well-established Process Oriented Guided Inquiry Learning (POGIL) framework will provide a structured approach to inquiry.  Automated feedback on test coverage, programming style and code documentation will be provided through WebTA, a tool that supplements instructor feedback with continual critique of code and documentation.  A program of guided inquiry through case studies of software communication prepares students for their team software activities, and a series of reflective exercises will lead them to focus on their own team communication practices.</AbstractNarration>
<MinAmdLetterDate>06/15/2015</MinAmdLetterDate>
<MaxAmdLetterDate>11/15/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1504860</AwardID>
<Investigator>
<FirstName>Charles</FirstName>
<LastName>Wallace</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Charles R Wallace</PI_FULL_NAME>
<EmailAddress>wallace@mtu.edu</EmailAddress>
<PI_PHON>9064873431</PI_PHON>
<NSF_ID>000466251</NSF_ID>
<StartDate>06/15/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Leo</FirstName>
<LastName>Ureel</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME>II</PI_SUFX_NAME>
<PI_FULL_NAME>Leo C Ureel</PI_FULL_NAME>
<EmailAddress>ureel@mtu.edu</EmailAddress>
<PI_PHON>9064871816</PI_PHON>
<NSF_ID>000667467</NSF_ID>
<StartDate>06/15/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Shreya</FirstName>
<LastName>Kumar</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Shreya Kumar</PI_FULL_NAME>
<EmailAddress>shreyak@mtu.edu</EmailAddress>
<PI_PHON>9063703491</PI_PHON>
<NSF_ID>000679169</NSF_ID>
<StartDate>06/15/2015</StartDate>
<EndDate>11/15/2016</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Michigan Technological University</Name>
<CityName>Houghton</CityName>
<ZipCode>499311295</ZipCode>
<PhoneNumber>9064871885</PhoneNumber>
<StreetAddress>1400 Townsend Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>065453268</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MICHIGAN TECHNOLOGICAL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>065453268</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Michigan Technological University]]></Name>
<CityName>Houghton</CityName>
<StateCode>MI</StateCode>
<ZipCode>499311295</ZipCode>
<StreetAddress><![CDATA[1400 Townsend Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>1998</Code>
<Text>IUSE</Text>
</ProgramElement>
<ProgramReference>
<Code>8209</Code>
<Text>Improv Undergrad STEM Ed(IUSE)</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0415</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0416</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~218735</FUND_OBLG>
<FUND_OBLG>2016~21700</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Among software professionals, the quality of team communication is acknowledged as a key factor in the success or failure of software projects. Successful communication in the workplace is a creative process requiring more than technical mastery of standard genres. Developers must make strategic communication decisions, and they must be agile &mdash; flexible, proactive, and creative &mdash; in these decisions.&#8232;&#8232;The Agile Communicators project seeks to promote creative, strategic communication among Computer Science students through the practices of inquiry, critique and reflection. Our approach constitutes a cognitive apprenticeship that engages students in authentic software settings and articulates processes that are traditionally left implicit. Over two years, we have enriched the communication environment in our early Computer Science courses in two ways: by actively engaging and encouraging students to articulate their questions, ideas, and concerns; and by enhancing the means by which instructors communicate with students. Our preliminary results indicate improvement in student performance and a clearer understanding of the place of communication in the lives of computing professionals.<br /><br />Student practice and reflection on communication as part of the problem-solving process have been integrated into introductory programming courses. Programming lab assignments include as deliverables not only the final result of functional code but also intermediate guided inquiry exercises where students articulate the steps of their analysis and design. Students complete lab assignments through pair programming and reflect on the progress of their communication skills with their partners over the sequence of assignments. In a later team software project course, students consider more sophisticated communication scenarios. Early in the team software course, we expose the students to real communication challenges that others have faced &ndash; the experiences of earlier student teams, and the experiences of professionals. Through a pattern approach, students inquire into the design choices of written and oral communication acts in real software projects. Later, during their project development, we ask them to reflect on the communication challenges they are facing, and to observe the communication choices that fellow teams have made.<br /><br />Instructor communication to students has been enhanced through automated just-in-time feedback. In the introductory programming courses, the WebTA tool provides tight instructor-tailored commentary on student code, essentially providing a virtual TA experience even when instructors are unavailable. WebTA not only reports on automated test results but also analyzes and critiques style and design, searching for positive patterns and negative antipatterns specified by the instructor. The tool serves not as a substitute for direct student-instructor communication, but rather as an augmentation to that interaction. In a similar vein, the introductory Computer Science course on discrete mathematics now involves lab exercises using the Alloy language and analyzer. The feedback provided by Alloy has the potential to eliminate common misconceptions among students when wrestling with mathematical language constructs in logic and relational algebra. Compared to a traditional approach where students simply submit written answers to homework problems, students working on Alloy problems get immediate critique of the syntactic and semantic quality of their responses.</p><br> <p>            Last Modified: 11/12/2018<br>      Modified by: Charles&nbsp;R&nbsp;Wallace</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Among software professionals, the quality of team communication is acknowledged as a key factor in the success or failure of software projects. Successful communication in the workplace is a creative process requiring more than technical mastery of standard genres. Developers must make strategic communication decisions, and they must be agile &mdash; flexible, proactive, and creative &mdash; in these decisions.&#8232;&#8232;The Agile Communicators project seeks to promote creative, strategic communication among Computer Science students through the practices of inquiry, critique and reflection. Our approach constitutes a cognitive apprenticeship that engages students in authentic software settings and articulates processes that are traditionally left implicit. Over two years, we have enriched the communication environment in our early Computer Science courses in two ways: by actively engaging and encouraging students to articulate their questions, ideas, and concerns; and by enhancing the means by which instructors communicate with students. Our preliminary results indicate improvement in student performance and a clearer understanding of the place of communication in the lives of computing professionals.  Student practice and reflection on communication as part of the problem-solving process have been integrated into introductory programming courses. Programming lab assignments include as deliverables not only the final result of functional code but also intermediate guided inquiry exercises where students articulate the steps of their analysis and design. Students complete lab assignments through pair programming and reflect on the progress of their communication skills with their partners over the sequence of assignments. In a later team software project course, students consider more sophisticated communication scenarios. Early in the team software course, we expose the students to real communication challenges that others have faced &ndash; the experiences of earlier student teams, and the experiences of professionals. Through a pattern approach, students inquire into the design choices of written and oral communication acts in real software projects. Later, during their project development, we ask them to reflect on the communication challenges they are facing, and to observe the communication choices that fellow teams have made.  Instructor communication to students has been enhanced through automated just-in-time feedback. In the introductory programming courses, the WebTA tool provides tight instructor-tailored commentary on student code, essentially providing a virtual TA experience even when instructors are unavailable. WebTA not only reports on automated test results but also analyzes and critiques style and design, searching for positive patterns and negative antipatterns specified by the instructor. The tool serves not as a substitute for direct student-instructor communication, but rather as an augmentation to that interaction. In a similar vein, the introductory Computer Science course on discrete mathematics now involves lab exercises using the Alloy language and analyzer. The feedback provided by Alloy has the potential to eliminate common misconceptions among students when wrestling with mathematical language constructs in logic and relational algebra. Compared to a traditional approach where students simply submit written answers to homework problems, students working on Alloy problems get immediate critique of the syntactic and semantic quality of their responses.       Last Modified: 11/12/2018       Submitted by: Charles R Wallace]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
