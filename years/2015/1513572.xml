<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Medium: Collaborative: Developer Crowdsourcing: Capturing, Understanding, and Addressing Security-related Blind Spots in APIs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2021</AwardExpirationDate>
<AwardTotalIntnAmount>422969.00</AwardTotalIntnAmount>
<AwardAmount>454969</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Despite an emphasis the security community places on the importance of producing secure software, the number of new security vulnerabilities in software increases every year. This research is based on the assumption that software vulnerabilities are caused by misunderstandings, or lack of knowledge, called blind spots, which the developers experience while they are building systems. When building systems, developers often focus more on functional requirements than on non-functional ones, such as security. Thus, they can make design decisions that prioritize functionality without noticing the security vulnerabilities these decisions create. Today, developers often have no access to effective software tools that highlight these vulnerabilities during development. This research identifies common developer blind spots with the goal of building and evaluating practical software tools that help prevent blind spots during development and detect vulnerabilities in deployed software.&lt;br/&gt;&lt;br/&gt;To capture developers' reasoning when faced with blind spots, and to identify common blind spot characteristics, this research converts several identified blind spots into programming puzzles, and conducts a user study with developers solving these puzzles. Statistical analysis of the developers' answers identifies common characteristics among blind spots, and the observations of developers' behaviors guide the creation of tools to automatically detect blind spots and to warn developers about them as developers experience them. The tools have two complementary goals: (1) prevent blind spots from occurring by cueing developers on-the-spot about potential blind spots as they write code, and (2) identify software vulnerabilities in existing applications by detecting code that may have been written as a result of a blind spot. This research evaluates these newly developed tools in the context of a user study with developers, producing the following outcomes: (1) understanding of blind spots in application programming interfaces (APIs), and of developers' attentional and decision processes when writing code using APIs, (2) understanding of how to notify, without habituation and annoyance, developers on-the-spot about blind spots so that relevant security information is used by developers while writing code, (3) creation of open-source, publicly available developer tools that notify developers about blind spots and facilitate detection of vulnerabilities caused by blind spots, and (4) development of guidelines for better API design to minimize blind spots by considering developers' attentional and decision processes. This research addresses an important gap in secure software development by incorporating the human factor of the development process. This is particularly crucial given our society's increasing dependence on software applications.</AbstractNarration>
<MinAmdLetterDate>07/09/2015</MinAmdLetterDate>
<MaxAmdLetterDate>02/14/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1513572</AwardID>
<Investigator>
<FirstName>Daniela</FirstName>
<LastName>Oliveira</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniela A Oliveira</PI_FULL_NAME>
<EmailAddress>daniela@ece.ufl.edu</EmailAddress>
<PI_PHON>3523928671</PI_PHON>
<NSF_ID>000582084</NSF_ID>
<StartDate>07/09/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Natalie</FirstName>
<LastName>Ebner</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Natalie Ebner</PI_FULL_NAME>
<EmailAddress>natalie.ebner@ufl.edu</EmailAddress>
<PI_PHON>2036910371</PI_PHON>
<NSF_ID>000673966</NSF_ID>
<StartDate>07/09/2015</StartDate>
<EndDate>02/14/2020</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Florida</Name>
<CityName>GAINESVILLE</CityName>
<ZipCode>326112002</ZipCode>
<PhoneNumber>3523923516</PhoneNumber>
<StreetAddress>1 UNIVERSITY OF FLORIDA</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>969663814</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF FLORIDA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>159621697</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Florida]]></Name>
<CityName>Gainesville</CityName>
<StateCode>FL</StateCode>
<ZipCode>326112002</ZipCode>
<StreetAddress><![CDATA[1 UNIVERSITY OF FLORIDA]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>025Z</Code>
<Text>SaTC: Secure and Trustworthy Cyberspace</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~422969</FUND_OBLG>
<FUND_OBLG>2016~8000</FUND_OBLG>
<FUND_OBLG>2017~8000</FUND_OBLG>
<FUND_OBLG>2018~8000</FUND_OBLG>
<FUND_OBLG>2019~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p dir="ltr">This project posited that software vulnerabilities are caused by blindspots developers' experience while programming, similar to car blindspots drivers experience. When developers write code, their focus is often on the functional properties of the code (e.g., what the code can do for users), which are more urgent from a&nbsp;<em>time-to-market</em>&nbsp;perspective compared&nbsp; to security properties, such as guaranteeing that the software cannot be exploited by adversaries to hurt users, an organization, or even the software supply-chain. To exacerbate the problem, software vulnerability information is not typically made apparent to programmers by development tools. Targeting this complex socio-technical problem, this project sought to capture and understand software blindspots from a developers' perspective.</p> <p dir="ltr">To this end, the research team conducted an experiment with (mostly) professional developers from around the world (US, Brazil, Europe, and Asia). The study design focused on the impact of two widely used programming languages, Python and Java, on the developers' ability to detect software vulnerabilities. The research team recruited 109 Java developers and 193 Python developers (with no overlap between the two groups) and had these developers working on safe (innocuous, no vulnerabilities) and unsafe (vulnerable) code scenarios. The set of programming scenarios each developer received was counterbalanced so that the set exhibited a diverse and even distribution of vulnerability types, targeting three types of popular software functionalities: input/output, text processing, and cryptography. The recruited developers were also asked&nbsp; to report on their own perceptions while working on the programming scenarios, for example, the difficulty, familiarity, clarity of the scenarios and the developers' confidence on answering technical questions about the scenarios. Developers also underwent tests to measure (i) their technical abilities on a variety of programming languages and software development concepts, (ii) their cognitive status, and (iii) their personality. Finally, developers also self-reported their demographic information, including educational background and years of experience as professional programmers.&nbsp; Statistical analysis on the dataset collected showed that, for both languages, developers' ability to detect vulnerabilities was comparable and self-perceptions of performance and education and experience did not predict a better ability to detect vulnerabilities. Regarding differences for Java and Python, the data indicated that: (1) only for Python, cognitive status (long-term memory) predicted a better developer ability to detect software vulnerabilities, (2) only for Java, personality (openness) predicted a better developer ability to detect software vulnerabilities, (3) developers' ability to understand unsafe code depended on the type of functionality for Java: developers had more difficulty working on the scenarios when the vulnerability involved input/output functionality, and (4) developers had more difficulty understanding unsafe code for Java compared to Python with the increase in code complexity.</p> <p dir="ltr">These results suggest that developers'&nbsp; ability to detect vulnerabilities might be generally independent of programming language, even though more research is warranted with other types of programming languages. Furthermore, for both Java and Python (suggesting an effect that is potentially programming language agnostic), self-reported perceptions did not predict a better ability to detect software vulnerabilities. Taken together, these insights suggest that the current rationale in many companies and in the security and DevOps community that all developers should and must create secure functionality might be misleading. Functionality and security are high cognitively demanding tasks and having a single developer addressing both might be a&nbsp;<em>zero-sum</em><em>&nbsp;game</em>, even for experts. This means that time focusing on security is time away from shipping functionality and vice versa. In fact, functionality and security are tasks that might require different types of expertise and mindsets.</p> <p dir="ltr">The problem then might be not a developer not addressing both functionality and security of software, but a&nbsp;<em>company&nbsp;</em>not addressing both. Moreover, the insights generated by this project suggest that security training and education should focus on aspects that transcend programming language idiosyncrasies and that more research should be devoted to the development of socio-technical tools that can predict vulnerabilities in a programming language-independent fashion.</p><br> <p>            Last Modified: 02/19/2021<br>      Modified by: Daniela&nbsp;A&nbsp;Oliveira</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613752971684_Fig1-Overviewofstudytasks--rgov-214x142.jpg" original="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613752971684_Fig1-Overviewofstudytasks--rgov-800width.jpg" title="Overview of the study tasks"><img src="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613752971684_Fig1-Overviewofstudytasks--rgov-66x44.jpg" alt="Overview of the study tasks"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The study was composed of five parts: (1) working with six programming scenarios, (2) a demographics survey, (3) professional experience and expertise survey, (4) cognitive and (5) personality assessment.</div> <div class="imageCredit">Daniela Oliveira</div> <div class="imageSubmitted">Daniela&nbsp;A&nbsp;Oliveira</div> <div class="imageTitle">Overview of the study tasks</div> </div> </li> <li> <a href="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753779536_Fig2-Counterbalancingofscenarios--rgov-214x142.jpg" original="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753779536_Fig2-Counterbalancingofscenarios--rgov-800width.jpg" title="Counterbalanced programming scenarios"><img src="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753779536_Fig2-Counterbalancingofscenarios--rgov-66x44.jpg" alt="Counterbalanced programming scenarios"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The team created four sets of scenarios, where each set contained four scenarios involving functionality that were known to cause blindspots in developers and two innocuous scenarios.</div> <div class="imageCredit">Daniela Oliveira</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Daniela&nbsp;A&nbsp;Oliveira</div> <div class="imageTitle">Counterbalanced programming scenarios</div> </div> </li> <li> <a href="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753851427_Fig3.Participantsdemographics--rgov-214x142.jpg" original="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753851427_Fig3.Participantsdemographics--rgov-800width.jpg" title="Participants demographics"><img src="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753851427_Fig3.Participantsdemographics--rgov-66x44.jpg" alt="Participants demographics"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Demographic and programming experience information about participating developers for both studies (Java and Python)</div> <div class="imageCredit">Luiz Giovanini</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Daniela&nbsp;A&nbsp;Oliveira</div> <div class="imageTitle">Participants demographics</div> </div> </li> <li> <a href="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753996229_Fig4-Abilitytodetectvulnerabilityvsfunctionalitytype--rgov-214x142.jpg" original="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753996229_Fig4-Abilitytodetectvulnerabilityvsfunctionalitytype--rgov-800width.jpg" title="Ability to detect vulnerability vs functionality type"><img src="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613753996229_Fig4-Abilitytodetectvulnerabilityvsfunctionalitytype--rgov-66x44.jpg" alt="Ability to detect vulnerability vs functionality type"></a> <div class="imageCaptionContainer"> <div class="imageCaption">For Python, the accuracy for answering security questions was significantly lower than that for answering functionality questions for all types of functionality. For Java, the accuracy was significantly lower only for unsafe code with input/output vulnerabilities.</div> <div class="imageCredit">Luiz Giovanini</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Daniela&nbsp;A&nbsp;Oliveira</div> <div class="imageTitle">Ability to detect vulnerability vs functionality type</div> </div> </li> <li> <a href="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613758197165_Fig5-Abilitytodetectvulnerabilityascodecomplexityincreases--rgov-214x142.jpg" original="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613758197165_Fig5-Abilitytodetectvulnerabilityascodecomplexityincreases--rgov-800width.jpg" title="Ability to detect vulnerability vs code complexity"><img src="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613758197165_Fig5-Abilitytodetectvulnerabilityascodecomplexityincreases--rgov-66x44.jpg" alt="Ability to detect vulnerability vs code complexity"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Developers' ability to solve unsafe code compared to safe code decreased for Java but increased for Python with the increasein code complexity.</div> <div class="imageCredit">Luiz Giovanini</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Daniela&nbsp;A&nbsp;Oliveira</div> <div class="imageTitle">Ability to detect vulnerability vs code complexity</div> </div> </li> <li> <a href="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613758258752_Fig6-Researchquestionsandresultsperprogramminglanguage--rgov-214x142.jpg" original="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613758258752_Fig6-Researchquestionsandresultsperprogramminglanguage--rgov-800width.jpg" title="Research questions"><img src="/por/images/Reports/POR/2021/1513572/1513572_10375235_1613758258752_Fig6-Researchquestionsandresultsperprogramminglanguage--rgov-66x44.jpg" alt="Research questions"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Insights obtained per programming language (Java and Python) according to project research questions.</div> <div class="imageCredit">Luiz Giovanini</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Daniela&nbsp;A&nbsp;Oliveira</div> <div class="imageTitle">Research questions</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[This project posited that software vulnerabilities are caused by blindspots developers' experience while programming, similar to car blindspots drivers experience. When developers write code, their focus is often on the functional properties of the code (e.g., what the code can do for users), which are more urgent from a time-to-market perspective compared  to security properties, such as guaranteeing that the software cannot be exploited by adversaries to hurt users, an organization, or even the software supply-chain. To exacerbate the problem, software vulnerability information is not typically made apparent to programmers by development tools. Targeting this complex socio-technical problem, this project sought to capture and understand software blindspots from a developers' perspective. To this end, the research team conducted an experiment with (mostly) professional developers from around the world (US, Brazil, Europe, and Asia). The study design focused on the impact of two widely used programming languages, Python and Java, on the developers' ability to detect software vulnerabilities. The research team recruited 109 Java developers and 193 Python developers (with no overlap between the two groups) and had these developers working on safe (innocuous, no vulnerabilities) and unsafe (vulnerable) code scenarios. The set of programming scenarios each developer received was counterbalanced so that the set exhibited a diverse and even distribution of vulnerability types, targeting three types of popular software functionalities: input/output, text processing, and cryptography. The recruited developers were also asked  to report on their own perceptions while working on the programming scenarios, for example, the difficulty, familiarity, clarity of the scenarios and the developers' confidence on answering technical questions about the scenarios. Developers also underwent tests to measure (i) their technical abilities on a variety of programming languages and software development concepts, (ii) their cognitive status, and (iii) their personality. Finally, developers also self-reported their demographic information, including educational background and years of experience as professional programmers.  Statistical analysis on the dataset collected showed that, for both languages, developers' ability to detect vulnerabilities was comparable and self-perceptions of performance and education and experience did not predict a better ability to detect vulnerabilities. Regarding differences for Java and Python, the data indicated that: (1) only for Python, cognitive status (long-term memory) predicted a better developer ability to detect software vulnerabilities, (2) only for Java, personality (openness) predicted a better developer ability to detect software vulnerabilities, (3) developers' ability to understand unsafe code depended on the type of functionality for Java: developers had more difficulty working on the scenarios when the vulnerability involved input/output functionality, and (4) developers had more difficulty understanding unsafe code for Java compared to Python with the increase in code complexity. These results suggest that developers'  ability to detect vulnerabilities might be generally independent of programming language, even though more research is warranted with other types of programming languages. Furthermore, for both Java and Python (suggesting an effect that is potentially programming language agnostic), self-reported perceptions did not predict a better ability to detect software vulnerabilities. Taken together, these insights suggest that the current rationale in many companies and in the security and DevOps community that all developers should and must create secure functionality might be misleading. Functionality and security are high cognitively demanding tasks and having a single developer addressing both might be a zero-sum game, even for experts. This means that time focusing on security is time away from shipping functionality and vice versa. In fact, functionality and security are tasks that might require different types of expertise and mindsets. The problem then might be not a developer not addressing both functionality and security of software, but a company not addressing both. Moreover, the insights generated by this project suggest that security training and education should focus on aspects that transcend programming language idiosyncrasies and that more research should be devoted to the development of socio-technical tools that can predict vulnerabilities in a programming language-independent fashion.       Last Modified: 02/19/2021       Submitted by: Daniela A Oliveira]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
