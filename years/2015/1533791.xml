<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Analytical Support for Investigating Software Modifications in Collaborative Development Environment</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>212135.00</AwardTotalIntnAmount>
<AwardAmount>225334</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Collaboration is essential to software development. As software engineers develop and evolve software, they need to analyze past and present software modifications implemented by other developers in various tasks such as peer code reviews, bug investigations, and change impact analysis. Developers are often overwhelmed with a large amount of awareness information about software modifications. Auto-generated emails about check-ins, builds, and regression tests often flood developers' mail boxes, yet it is very difficult for developers to identify significant and relevant change-events. Existing software engineering tools do not easily allow developers to search software modifications relevant to their tasks, focus, and interests.&lt;br/&gt;&lt;br/&gt;This research project will produce analytical support for investigating software modifications in collaborative development environment called CHIME.  First, CHIME will provide an extensible, logical change analysis framework that identifies software modifications relevant to one's own code modification according to various kinds of delta relationships. The users of the framework can import, select, and extend various notions of interference, dependence, similarity, and co-occurrence relationships among individual software modifications. Second, CHIME will provide a search interface to empower users to ask and answer questions about the content, structure, and context of code changes across multiple revisions. In order to reduce programmers' burden on formulating search queries, we will conduct empirical studies with professional developers to identify frequently asked questions about past and present software modifications. The resulting list of the questions will be provided as template queries that the developers can use or refine. Third, CHIME will provide targeted notifications about others' software modifications by monitoring other developers' change-events that are relevant to the developer's own modification. The impact of this research will be substantially improved developer productivity in a rapidly-evolving, collaborative and parallel software development. CHIME will reduce awareness information overload and will help users manage the impact of others' code changes on their code, detect and resolve merge conflicts early, and coordinate shared tasks, contributing toward early detection and removal of integration and interference failures.</AbstractNarration>
<MinAmdLetterDate>05/29/2015</MinAmdLetterDate>
<MaxAmdLetterDate>05/29/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1533791</AwardID>
<Investigator>
<FirstName>Miryung</FirstName>
<LastName>Kim</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Miryung Kim</PI_FULL_NAME>
<EmailAddress>miryung@cs.ucla.edu</EmailAddress>
<PI_PHON>3107940102</PI_PHON>
<NSF_ID>000676266</NSF_ID>
<StartDate>05/29/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Los Angeles</Name>
<CityName>LOS ANGELES</CityName>
<ZipCode>900951406</ZipCode>
<PhoneNumber>3107940102</PhoneNumber>
<StreetAddress>10889 Wilshire Boulevard</StreetAddress>
<StreetAddress2><![CDATA[Suite 700]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA33</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>092530369</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, LOS ANGELES</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Los Angeles]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900952000</ZipCode>
<StreetAddress><![CDATA[11000 Kinross Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA33</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~212134</FUND_OBLG>
<FUND_OBLG>2012~13200</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of the CHIME project is to produce an extensible, logical change analysis framework that identifies software modifications relevant to one's own code modification according to various kinds of delta relationships. The users of the framework can import, select, and extend various notions of interference, dependence, similarity, and co-occurrence relationships among individual software modifications. For this project, the PIs, their students and collaborators have designed, implemented, and evaluated a graph-based framework for analyzing various relationships among software modifications. &nbsp;This extensible framework retrieves code changes from version control systems and stores them. Furthermore, they have implemented and evaluated two types of delta relationship analyses (Repertoire for a change similarity analysis and FaultTracer for a change dependence analysis). Using the framework, they conducted an empirical study of how to reduce errors of omission by investigating the relationship between initial, incomplete changes and their supplementary fixes.&nbsp;</p> <p>Professors Kim and Perry trained graduate students and undergraduate students in Electrical and Computer Engineering at UT Austin, contributing to the training of technology workforce and future faculty candidates. Research assistants worked on this project became professors at University of Virginia, University of Texas at Dallas, and University of Nebraska at Omaha and undergraduate students who worked on this project are pursuing graduate degrees in CMU, University of Texas at Austin, and University of Washington.&nbsp;</p> <p>The research findings from this project were published through 14 peer-reviewed journal articles and conference papers.&nbsp;<br />Professor Kim received Google Faculty Award for her work on an interactive code review approach for summarizing systematic changes. She hopes that her research finding on code change analysis from this project will inspire software engineering industry to integrate advanced code change analysis tools to the main stream development environments and leverage them during peer code reviews. Professor Kim studied refactoring practices in software industry at Microsoft, which is synergistic with this research project. &nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/12/2015<br>      Modified by: Miryung&nbsp;Kim</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of the CHIME project is to produce an extensible, logical change analysis framework that identifies software modifications relevant to one's own code modification according to various kinds of delta relationships. The users of the framework can import, select, and extend various notions of interference, dependence, similarity, and co-occurrence relationships among individual software modifications. For this project, the PIs, their students and collaborators have designed, implemented, and evaluated a graph-based framework for analyzing various relationships among software modifications.  This extensible framework retrieves code changes from version control systems and stores them. Furthermore, they have implemented and evaluated two types of delta relationship analyses (Repertoire for a change similarity analysis and FaultTracer for a change dependence analysis). Using the framework, they conducted an empirical study of how to reduce errors of omission by investigating the relationship between initial, incomplete changes and their supplementary fixes.   Professors Kim and Perry trained graduate students and undergraduate students in Electrical and Computer Engineering at UT Austin, contributing to the training of technology workforce and future faculty candidates. Research assistants worked on this project became professors at University of Virginia, University of Texas at Dallas, and University of Nebraska at Omaha and undergraduate students who worked on this project are pursuing graduate degrees in CMU, University of Texas at Austin, and University of Washington.   The research findings from this project were published through 14 peer-reviewed journal articles and conference papers.  Professor Kim received Google Faculty Award for her work on an interactive code review approach for summarizing systematic changes. She hopes that her research finding on code change analysis from this project will inspire software engineering industry to integrate advanced code change analysis tools to the main stream development environments and leverage them during peer code reviews. Professor Kim studied refactoring practices in software industry at Microsoft, which is synergistic with this research project.            Last Modified: 11/12/2015       Submitted by: Miryung Kim]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
