<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Large: Gradual Typing Across the Spectrum</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>12/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>2199995.00</AwardTotalIntnAmount>
<AwardAmount>2300195</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Large: Gradual Typing Across the Spectrum&lt;br/&gt;&lt;br/&gt;The ``Gradual Typing Across the Spectrum'' project addresses an urgent, emergent need at the intersection of software maintenance and programming language research.  Over the past 20 years, working software engineers have embraced so-called scripting languages for a variety of tasks. They routinely use JavaScript for interactive web pages, Ruby on Rails for server-side software, Python for data science, and so on. Software engineers choose these languages because they make prototyping easy, and before the engineers realize it, these prototypes evolve into large, working systems and escape into the real world. Like all software, these systems need to be maintained---mistakes must be fixed, their performance requires improvement, security gaps call for fixes, their functionality needs to be enhanced---but scripting languages render maintenance difficult. The intellectual merits of this project are to address all aspects of this real-world software engineering problem. In turn, the project's broader significance and importance are the deployment of new technologies to assist the programmer who maintains code in scripting languages, the creation of novel technologies that preserve the advantages of these scripting frameworks, and the development of curricular materials that prepares the next generation of students for working within these frameworks. &lt;br/&gt;&lt;br/&gt;A few years ago, the PIs launched programming language research efforts to address this problem. They diagnosed the lack of sound types in scripting languages as one of the major factors. With types in conventional programming languages, programmers concisely communicate design information to future maintenance workers; soundness ensures the types are consistent with the rest of the program. In response, the PIs explored the idea of gradual typing, that is, the creation of a typed sister language (one per scripting language) so that (maintenance) programmers can incrementally equip systems with type annotations. Unfortunately, these efforts have diverged over the years and would benefit from systematic cross-pollination.&lt;br/&gt;&lt;br/&gt;With support from this grant, the PIs will systematically explore the spectrum of their gradual typing system with a three-pronged effort. First, they will investigate how to replicate results from one project in another. Second, they will jointly develop an evaluation framework for gradual typing projects with the goal of diagnosing gaps in the efforts and needs for additional research. Third, they will explore the creation of new scripting languages that benefit from the insights of gradual typing research.</AbstractNarration>
<MinAmdLetterDate>06/30/2015</MinAmdLetterDate>
<MaxAmdLetterDate>03/16/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1518844</AwardID>
<Investigator>
<FirstName>Matthias</FirstName>
<LastName>Felleisen</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Matthias Felleisen</PI_FULL_NAME>
<EmailAddress>matthias@ccs.neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000286813</NSF_ID>
<StartDate>06/30/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jan</FirstName>
<LastName>Vitek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jan Vitek</PI_FULL_NAME>
<EmailAddress>j.vitek@neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000290862</NSF_ID>
<StartDate>06/30/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northeastern University</Name>
<CityName>BOSTON</CityName>
<ZipCode>021155005</ZipCode>
<PhoneNumber>6173733004</PhoneNumber>
<StreetAddress>360 HUNTINGTON AVE</StreetAddress>
<StreetAddress2><![CDATA[177-500]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001423631</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHEASTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001423631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northeastern University]]></Name>
<CityName/>
<StateCode>MA</StateCode>
<ZipCode>021155005</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~2199995</FUND_OBLG>
<FUND_OBLG>2016~33000</FUND_OBLG>
<FUND_OBLG>2017~35200</FUND_OBLG>
<FUND_OBLG>2018~32000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><br />With the rise of the web and mobile computing &nbsp;a new class of programming languages emerged. These so-called scripting languages---exemplified byJavaScript, Python, and Ruby On Rails---began to play a critical role in phone and tablet apps, web browsers, and servers. At this point, such &nbsp;scripting languages make up more than half of the top-ten languages named in developer positions posted on job listing sites., Although the moniker "scripting language" was supposed to describe a minor role ins oftware development, these languages have given rise to huge software systems that are critical to our country's infrastructure.</p> <p><br />In comparison to traditional programming languages, scripting languages stand out for their lack of types. Roughly speaking, types help programmers document design decisions, check the consistency of code and design,develop tests, enable performance-oriented compilation, and generally improve the interaction of code and the developer 's tool box. Initially these languages were considered add-ons that would help "script" the behavior of large software systems after deployment---except that these add-on codes became larger than the underlying software systems.&nbsp;</p> <p><br />When it comes to the maintenance of software system---fixing bugs, closings ecurity holes, adding new features---the lack of types imposes a large cost on developers, and this grant has addressed these large problems in a multi-faceted manner. With the support of this grant,</p> <ol> <li>the PIs developed a theoretical foundation for the post-hoc addition of types to an existing language;</li> <li>they studied expressiveness, safety, and security properties of such languages;&nbsp;</li> <li>they created several prototype implementation that support programming with and without types;&nbsp;</li> <li>using these prototypes, they analyzed the cost of interaction between typed and untyped pieces of code; and&nbsp;</li> <li>using the performance evaluations, the PIs reduced the interaction cost by a fair degree.&nbsp;</li> </ol> <p>Directly and indirectly the project has influenced a fair number of industrial implementation efforts. &nbsp;Microsoft's TypeScript, for example, sports a type system that closely resembles the implementations of theTyped Racket element of this grant. Python has adopted a type language similar to the one of Reticulated Python, another one of the supported projects. Additionally the research project worked on the Julia, R, and Ruby languages, all of which are in wide use.&nbsp;</p> <p>Finally, the PI team also equipped the Pyret programming language with types. Pyret is used at the college level and with the long-running and large Bootstrap outreach project, a pre-college educational effort. This sub-project will permit instructors at many different educational institutions to gradually introduce students to the power of types.&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/30/2020<br>      Modified by: Matthias&nbsp;Felleisen</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  With the rise of the web and mobile computing  a new class of programming languages emerged. These so-called scripting languages---exemplified byJavaScript, Python, and Ruby On Rails---began to play a critical role in phone and tablet apps, web browsers, and servers. At this point, such  scripting languages make up more than half of the top-ten languages named in developer positions posted on job listing sites., Although the moniker "scripting language" was supposed to describe a minor role ins oftware development, these languages have given rise to huge software systems that are critical to our country's infrastructure.   In comparison to traditional programming languages, scripting languages stand out for their lack of types. Roughly speaking, types help programmers document design decisions, check the consistency of code and design,develop tests, enable performance-oriented compilation, and generally improve the interaction of code and the developer 's tool box. Initially these languages were considered add-ons that would help "script" the behavior of large software systems after deployment---except that these add-on codes became larger than the underlying software systems.    When it comes to the maintenance of software system---fixing bugs, closings ecurity holes, adding new features---the lack of types imposes a large cost on developers, and this grant has addressed these large problems in a multi-faceted manner. With the support of this grant,  the PIs developed a theoretical foundation for the post-hoc addition of types to an existing language; they studied expressiveness, safety, and security properties of such languages;  they created several prototype implementation that support programming with and without types;  using these prototypes, they analyzed the cost of interaction between typed and untyped pieces of code; and  using the performance evaluations, the PIs reduced the interaction cost by a fair degree.    Directly and indirectly the project has influenced a fair number of industrial implementation efforts.  Microsoft's TypeScript, for example, sports a type system that closely resembles the implementations of theTyped Racket element of this grant. Python has adopted a type language similar to the one of Reticulated Python, another one of the supported projects. Additionally the research project worked on the Julia, R, and Ruby languages, all of which are in wide use.   Finally, the PI team also equipped the Pyret programming language with types. Pyret is used at the college level and with the long-running and large Bootstrap outreach project, a pre-college educational effort. This sub-project will permit instructors at many different educational institutions to gradually introduce students to the power of types.           Last Modified: 01/30/2020       Submitted by: Matthias Felleisen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
