<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Understanding Anti-Analysis Defenses in Malicious Code</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>514796.00</AwardTotalIntnAmount>
<AwardAmount>546740</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The problem of cyber-security encompasses computer systems of all sizes and affects almost all aspects of our day-to-day lives. This makes it fundamentally important to detect accurately and respond quickly to cyber-threats as they develop. This project aims to develop techniques and tools that can accelerate the process of understanding and responding to new cyber-threats as they develop.  The authors of malicious software (malware) usually try to make the malware stealthy in order to avoid detection. In many cases, this involves a variety of techniques aimed at hindering analysis efforts by security analysts; we refer to such techniques as anti-analysis defenses. When confronted by such defenses, security analysts have to identify and disable them in order to observe and understand its real behaviors and thereby develop countermeasures. Current approaches for doing this are slow and cumbersome. This project aims to develop highly general, efficient, and robust automated techniques for speeding up the process of identifying and understanding anti-analysis defenses in malware, with the goal of providing security analysts with tools that can help them respond quickly to new cyber-threats as they develop.&lt;br/&gt;&lt;br/&gt;Malicious software (malware) usually employs a variety of anti-analysis and anti-tampering defenses to hinder analysis and reverse engineering. Currently, neutralizing such defenses requires a lot of manual intervention and is therefore tedious and time-consuming. This project develops semantics-based techniques to automate most or all of this effort and so accelerate the process of identifying and neutralizing such defenses.  The project focusses on analyzing programs that employ a variety of anti-analysis and anti-tampering defenses. In particular, the project will focus on the following research questions:&lt;br/&gt;* Detection. How do characterizations of environmental observations translate to detection algorithms for anti-analysis defenses? How can the detection algorithms be made general?&lt;br/&gt;* Precision. What factors affect the precision of such detection algorithms? How can the precision be improved?&lt;br/&gt;* Performance. Sophisticated analysis of low-level code can be expensive. At the same time, the high volumes of new malware that are encountered make it important for analyses to be efficient. How can such detection algorithms be made efficient enough to be practical?&lt;br/&gt;*Stealthy Defenses. How can environment checks be made statically and dynamically stealthy? What are the implications for anti-analysis detection algorithms?&lt;br/&gt;&lt;br/&gt;In order for such anti-anti-analysis techniques to have longevity, it is important that they be general, i.e., make as few assumptions as possible about the nature or form of the defenses that may have been applied. To this end, the project will articulate explicitly the assumptions underlying the techniques it develops. This can be expected to suggest new directions for research by indicating where assumptions may be weakened or removed. The potential contributions of this research are both technical and societal. The ability to more easily neutralize anti-analysis defenses deployed by malware will allow security researchers to respond to new and emerging malware threats quickly. This will have the effect of limiting the scope of the damage caused by such malware, and improve the security and reliability of our cyber-infrastructure. Additionally, the project will involve graduate and undergraduate students in all aspects of the research and thereby contribute to the development of a highly skilled workforce. Finally, software developed as part of the project will be made available to the broader research community, thereby assisting and supporting other research projects in this area.</AbstractNarration>
<MinAmdLetterDate>08/14/2015</MinAmdLetterDate>
<MaxAmdLetterDate>12/12/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1525820</AwardID>
<Investigator>
<FirstName>Saumya</FirstName>
<LastName>Debray</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Saumya K Debray</PI_FULL_NAME>
<EmailAddress>debray@cs.arizona.edu</EmailAddress>
<PI_PHON>5206214527</PI_PHON>
<NSF_ID>000120753</NSF_ID>
<StartDate>08/14/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Christian</FirstName>
<LastName>Collberg</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christian S Collberg</PI_FULL_NAME>
<EmailAddress>collberg@cs.arizona.edu</EmailAddress>
<PI_PHON>5206216612</PI_PHON>
<NSF_ID>000485481</NSF_ID>
<StartDate>08/14/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Arizona</Name>
<CityName>Tucson</CityName>
<ZipCode>857194824</ZipCode>
<PhoneNumber>5206266000</PhoneNumber>
<StreetAddress>888 N Euclid Ave</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<StateCode>AZ</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AZ03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>806345617</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ARIZONA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072459266</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Arizona]]></Name>
<CityName>Tucson</CityName>
<StateCode>AZ</StateCode>
<ZipCode>857210077</ZipCode>
<StreetAddress><![CDATA[Gould-Simpson Building 1040 E. 4]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Arizona</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AZ03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>025Z</Code>
<Text>SaTC: Secure and Trustworthy Cyberspace</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~514796</FUND_OBLG>
<FUND_OBLG>2016~15984</FUND_OBLG>
<FUND_OBLG>2018~15960</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-a8ccf150-7fff-5b1f-e601-5d7d2abc5730"> </span></p> <p><span id="docs-internal-guid-0cbf0941-7fff-901a-8bc8-9033c84dd085"> <p dir="ltr">This project had two overarching goals: on the technical side, we wanted to investigate how malicious software (commonly referred to as "malware") avoid detection by malware analysis tools; and on the educational side, we wanted to engage undergraduate students --- focusing in particular on underrepresented minorities -- in those technical research activities.</p> <p dir="ltr"><span>The technical activities consisted of three broad thrusts of research:</span></p> <ul> <li dir="ltr"> <p dir="ltr"><span>The first thrust investigated techniques for </span><span>obfuscating</span><span> programs, i.e., transforming the code in ways that made the code much harder to understand and reason about.&nbsp; Among our results here is a technique to use an approach called "covert channels" to propagate data in a computer program in a way that cannot be easily detected using existing tools.&nbsp; The goals behind this work were: (1) to explore approaches to foil existing detection techniques; and (2) as a motivator for improving our detection tools to  identify the use of such covert techniques by adversaries.&nbsp; As part of this thrust we also developed a software tool, called Tigress, that can be used to experiment with a wide selection of such program transformations.  Tigress has been made available to the research community and is being used by a number of researchers for work on various aspects of software security.&nbsp;</span></p> </li> <li dir="ltr"> <p dir="ltr"><span>The second thrust focused on devising techniques for automatically analyzing software where the program's code is changed on the fly, i.e., as the program executes (we refer to software that is changed during execution as "dynamic code").&nbsp; In many cases, such code changes are performed to improve speed; in other cases, they are used to conceal or disguise the code in order to make analysis harder.  We found that existing approaches did not have a good way to represent the structure of dynamic code.&nbsp; Since representing a program's structure is a necessary first step to many kinds of program analyses, this shortcoming puts dynamic code off limits to such analyses.  We made some progress in devising a representation suitable for dynamic code: we showed how the different code changes could be represented efficiently and how the resulting representation could be used to help localize bugs in the dynamic code generators.</span></p> </li> <li dir="ltr"> <p dir="ltr"><span>The third thrust focused on learning how reverse engineers approach attacking software. This is essential in order to understand how to best protect programs from unwanted analysis and how to compare the power of different obfuscating techniques. In previous work, researchers have monitored two populations---undergraduate students and professional &ldquo;red team&rdquo; reverse engineers---as they were tasked with attacking a piece of protected software. These studies have proven problematic for three reasons: (a) undergraduate students are not representative of experienced reverse engineers, (b) professional red teams are unwilling to reveal the techniques they employ, and (c) the information gathered from interviews and self-reported surveys is too coarse-grained. As part of this thrust we have developed a software tool RevEngE that collects fine-grained information about the behavior of engineers as they analyze software. The tool will be made available internationally, and monetary rewards will be provided to those who use it while solving reverse engineering challenges. The information collected will be used to build accurate behavioral models (attack graphs) of reverse engineering activities.</span></p> </li> </ul> <p dir="ltr"><span>Our educational activities focused on generating reverse engineering challenge problems for use in computer security classes. These challenges have two components: an automatically generated program with a built-in asset, and obfuscating transformations applied to this program to hide and protect the assets. The students learn about software protections and how to defeat them by attempting to extract or destroy the assets. Our system is such that the generated programs and the applied protections can both be of arbitrary complexity; this is essential in order to gently guide students to mastery of reverse engineering techniques.</span></p> <p dir="ltr"><span>We also involved a number of undergraduate students in various aspects of our research:</span></p> <ul> <li dir="ltr"> <p dir="ltr"><span>WebAssembly is a new technology that is designed to replace Javascript as the language of choice for in-browser computation, and is used in computationally intensive apps such as Google Earth. While Javascript obfuscation is fairly common, there has been no way to protect WebAssembly from reverse engineering attacks. The student evaluated the performance impact of using the Tigress tool to protect WebAssembly.</span></p> </li> </ul> <ul> <li dir="ltr"> <p dir="ltr"><span>Two students investigated the use of </span><span>processor temperature and</span><span> processor caches as covert channels in obfuscated programs.</span><span> &nbsp; A third student investigated techniques for detecting collusion between Android apps --- i.e., where apps combine their permissions to communicate via covert channels and thereby leak sensitive data.&nbsp; We tested a wide variety of apps, including many from areas known for government surveillance (e.g., Russia, the Middle East).  While we did not detect obvious collusion, we found a lot of sloppily written apps that leaked sensitive information such as the user's GPS coordinates.&nbsp;&nbsp;</span></p> </li> </ul> <ul> <li dir="ltr"> <p dir="ltr"><span>Several other undergraduates investigated performance aspects of low-level code.</span></p> </li> </ul> <br /><br /></span></p> <p dir="ltr">&nbsp;</p><br> <p>            Last Modified: 12/17/2019<br>      Modified by: Saumya&nbsp;K&nbsp;Debray</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[     This project had two overarching goals: on the technical side, we wanted to investigate how malicious software (commonly referred to as "malware") avoid detection by malware analysis tools; and on the educational side, we wanted to engage undergraduate students --- focusing in particular on underrepresented minorities -- in those technical research activities. The technical activities consisted of three broad thrusts of research:   The first thrust investigated techniques for obfuscating programs, i.e., transforming the code in ways that made the code much harder to understand and reason about.  Among our results here is a technique to use an approach called "covert channels" to propagate data in a computer program in a way that cannot be easily detected using existing tools.  The goals behind this work were: (1) to explore approaches to foil existing detection techniques; and (2) as a motivator for improving our detection tools to  identify the use of such covert techniques by adversaries.  As part of this thrust we also developed a software tool, called Tigress, that can be used to experiment with a wide selection of such program transformations.  Tigress has been made available to the research community and is being used by a number of researchers for work on various aspects of software security.    The second thrust focused on devising techniques for automatically analyzing software where the program's code is changed on the fly, i.e., as the program executes (we refer to software that is changed during execution as "dynamic code").  In many cases, such code changes are performed to improve speed; in other cases, they are used to conceal or disguise the code in order to make analysis harder.  We found that existing approaches did not have a good way to represent the structure of dynamic code.  Since representing a program's structure is a necessary first step to many kinds of program analyses, this shortcoming puts dynamic code off limits to such analyses.  We made some progress in devising a representation suitable for dynamic code: we showed how the different code changes could be represented efficiently and how the resulting representation could be used to help localize bugs in the dynamic code generators.   The third thrust focused on learning how reverse engineers approach attacking software. This is essential in order to understand how to best protect programs from unwanted analysis and how to compare the power of different obfuscating techniques. In previous work, researchers have monitored two populations---undergraduate students and professional "red team" reverse engineers---as they were tasked with attacking a piece of protected software. These studies have proven problematic for three reasons: (a) undergraduate students are not representative of experienced reverse engineers, (b) professional red teams are unwilling to reveal the techniques they employ, and (c) the information gathered from interviews and self-reported surveys is too coarse-grained. As part of this thrust we have developed a software tool RevEngE that collects fine-grained information about the behavior of engineers as they analyze software. The tool will be made available internationally, and monetary rewards will be provided to those who use it while solving reverse engineering challenges. The information collected will be used to build accurate behavioral models (attack graphs) of reverse engineering activities.   Our educational activities focused on generating reverse engineering challenge problems for use in computer security classes. These challenges have two components: an automatically generated program with a built-in asset, and obfuscating transformations applied to this program to hide and protect the assets. The students learn about software protections and how to defeat them by attempting to extract or destroy the assets. Our system is such that the generated programs and the applied protections can both be of arbitrary complexity; this is essential in order to gently guide students to mastery of reverse engineering techniques. We also involved a number of undergraduate students in various aspects of our research:   WebAssembly is a new technology that is designed to replace Javascript as the language of choice for in-browser computation, and is used in computationally intensive apps such as Google Earth. While Javascript obfuscation is fairly common, there has been no way to protect WebAssembly from reverse engineering attacks. The student evaluated the performance impact of using the Tigress tool to protect WebAssembly.     Two students investigated the use of processor temperature and processor caches as covert channels in obfuscated programs.   A third student investigated techniques for detecting collusion between Android apps --- i.e., where apps combine their permissions to communicate via covert channels and thereby leak sensitive data.  We tested a wide variety of apps, including many from areas known for government surveillance (e.g., Russia, the Middle East).  While we did not detect obvious collusion, we found a lot of sloppily written apps that leaked sensitive information such as the user's GPS coordinates.       Several other undergraduates investigated performance aspects of low-level code.              Last Modified: 12/17/2019       Submitted by: Saumya K Debray]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
