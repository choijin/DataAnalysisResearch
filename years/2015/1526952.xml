<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Small: Fundamental Connections in Randomness and Complexity</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Major advances in computer science have come from finding connections between different areas and then exploiting them in nontrivial ways. In this project, the PI seeks new connections and plans to capitalize on these and known connections among several areas of randomness and computational complexity. Computational complexity explores which problems are computationally intractable and why, as well as tradeoffs between computational resources such as time, space, and randomness.&lt;br/&gt;&lt;br/&gt;Randomness is extremely useful in computer science and widely used in practice.  When simulating complex phenomena, such as the weather or the economy, it is standard to include random components.  Computer security is impossible without randomness.  Yet while randomness is provably necessary for computer security, it is not known whether it is provably necessary for algorithms. A major question in computing is to understand the power of randomness and whether it is really necessary for algorithms. Research addressing this question often focuses on two fundamental objects: pseudorandom generators and randomness extractors. A pseudorandom generator is a deterministic algorithm that expands a small number of random bits into a large number of pseudorandom bits, where algorithms using these pseudorandom bits behave similarly to algorithms using perfectly random bits. A randomness extractor is a deterministic algorithm that converts a large amount of low-quality randomness into a smaller, but still large, amount of high-quality randomness.&lt;br/&gt;&lt;br/&gt;This project has several themes. How do pseudorandom generators and randomness extractors relate to lower bounds for computational problems? How do pseudorandom generators and randomness extractors relate to cryptography, the mathematical foundations of computer security? How do randomness extractors relate to error-correcting codes, which enable reliable transmission over noisy media? How do codes relate to machine learning? How do pseudorandom generators relate to computational biology? By finding and exploiting these connections, we can greatly advance knowledge in the underlying areas and increase the chances of breakthroughs. Several application areas are important to society. Understanding molecular structure could impact biology, medicine, and drug design. Improvements in cryptography could lead to improved computer security. Machine learning addresses the omnipresent big data.</AbstractNarration>
<MinAmdLetterDate>08/12/2015</MinAmdLetterDate>
<MaxAmdLetterDate>08/12/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1526952</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Zuckerman</LastName>
<PI_MID_INIT>I</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David I Zuckerman</PI_FULL_NAME>
<EmailAddress>diz@utexas.edu</EmailAddress>
<PI_PHON>5124719729</PI_PHON>
<NSF_ID>000181714</NSF_ID>
<StartDate>08/12/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787121757</ZipCode>
<StreetAddress><![CDATA[2317 Speedway, Stop D9500]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7927</Code>
<Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~400000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Randomness is amazingly useful in many areas.&nbsp; For example, the gold standard for medical research involves randomized controlled trials.</p> <p>My research focuses on randomness, computing, and algorithms, which are like recipes for computing something. Many randomized algorithms are faster than algorithms that don't use randomness. Scientists use random numbers to simulate complex systems such as the climate. Computer security is impossible without random numbers.</p> <p>On the other hand, generating random numbers seems difficult for a computer.&nbsp; This is because a computer appears the opposite of random, executing one instruction after the other in a predetermined way.&nbsp; For that reason, computers use ad hoc sources of randomness, such as timing intervals between keystrokes. However, such ad hoc random sources are really only a little bit random.&nbsp; It is therefore essential to improve the quality of the random source.&nbsp; Unfortunately, this is impossible with just one, general, low-quality random source.</p> <p>For this NSF project, my former PhD student Eshan Chattopadhyay and I solved a longstanding open problem by introducing an algorithm that combines two low-quality random sources to create one high-quality random source.&nbsp; Previous attempts needed at least one of the two input sources to be of moderately high-quality.&nbsp; Our algorithm, called a two-source extractor, allows us to produce high-quality randomness starting with exponentially lower quality random numbers than known previously.</p> <p>Theoreticians consider our two-source extractor a breakthrough. It also gives a major improvement to an important mathematical problem in a field called Ramsey Theory, which seeks to find structure even in random-looking objects.</p> <p>It will take time before our extractor is made practical, but already several researchers have built and improved on our ideas.</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/26/2018<br>      Modified by: David&nbsp;I&nbsp;Zuckerman</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Randomness is amazingly useful in many areas.  For example, the gold standard for medical research involves randomized controlled trials.  My research focuses on randomness, computing, and algorithms, which are like recipes for computing something. Many randomized algorithms are faster than algorithms that don't use randomness. Scientists use random numbers to simulate complex systems such as the climate. Computer security is impossible without random numbers.  On the other hand, generating random numbers seems difficult for a computer.  This is because a computer appears the opposite of random, executing one instruction after the other in a predetermined way.  For that reason, computers use ad hoc sources of randomness, such as timing intervals between keystrokes. However, such ad hoc random sources are really only a little bit random.  It is therefore essential to improve the quality of the random source.  Unfortunately, this is impossible with just one, general, low-quality random source.  For this NSF project, my former PhD student Eshan Chattopadhyay and I solved a longstanding open problem by introducing an algorithm that combines two low-quality random sources to create one high-quality random source.  Previous attempts needed at least one of the two input sources to be of moderately high-quality.  Our algorithm, called a two-source extractor, allows us to produce high-quality randomness starting with exponentially lower quality random numbers than known previously.  Theoreticians consider our two-source extractor a breakthrough. It also gives a major improvement to an important mathematical problem in a field called Ramsey Theory, which seeks to find structure even in random-looking objects.  It will take time before our extractor is made practical, but already several researchers have built and improved on our ideas.          Last Modified: 11/26/2018       Submitted by: David I Zuckerman]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
