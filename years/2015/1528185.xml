<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: System Infrastructure for SMM-based Runtime Integrity Measurement</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2015</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>407568.00</AwardTotalIntnAmount>
<AwardAmount>407568</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Indrajit Ray</SignBlockName>
<PO_EMAI>iray@nsf.gov</PO_EMAI>
<PO_PHON>7032925387</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The World Wide Web and computer "clouds" have become widely used, and are interwoven into many activities of daily life, from shopping to socializing to education. But the data center servers that are the backbone of this richly connected world remain vulnerable to malicious software ("malware").  Over the past decade, attacks have increased in number and sophistication, motivated by both financial and political goals. The results include consumer concerns about identify theft and fraudulent charges, corporate concerns about millions of dollars in losses, and potential defense concerns. At the same time, the servers and data centers have become more complex, as both the hardware and the software have grown in capability.  Thus protecting servers from attack has become increasingly urgent yet increasingly difficult.  This project is developing a new approach for server security - monitoring for attacks will be integrated into the servers in a manner that will avoid unwieldy performance slowdowns. &lt;br/&gt;&lt;br/&gt;This project focuses on detecting rootkits that compromise operating system kernels and hypervisors. The research targets a specific class of solutions that make use of widely available hardware support to allow safe introspection of low-level system state at run time. Rootkit detection checks are implemented in System Management Mode (SMM), a special x86 processor mode entered as a result of a System Management Interrupt controlled by the BIOS, that has a higher priority than any system-level interrupt.  Code running in SMM has access to a protected region of memory, providing protection of the rootkit detection code. This project is exploring and quantifying the performance impacts of various SMM-based rootkit detection approaches, and is developing new approaches in which the detection work can be scheduled adaptively to strike an appropriate balance between detection capability and performance degradation.</AbstractNarration>
<MinAmdLetterDate>07/29/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/29/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1528185</AwardID>
<Investigator>
<FirstName>Karen</FirstName>
<LastName>Karavanic</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Karen Karavanic</PI_FULL_NAME>
<EmailAddress>karavan@pdx.edu</EmailAddress>
<PI_PHON>5037255491</PI_PHON>
<NSF_ID>000164451</NSF_ID>
<StartDate>07/29/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Portland State University</Name>
<CityName>Portland</CityName>
<ZipCode>972070751</ZipCode>
<PhoneNumber>5037259900</PhoneNumber>
<StreetAddress>1600 SW 4th Ave</StreetAddress>
<StreetAddress2><![CDATA[Attn: Sponsored Projects Admin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052226800</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PORTLAND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052226800</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Portland State University]]></Name>
<CityName/>
<StateCode>OR</StateCode>
<ZipCode>972070751</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~407568</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <p>Despite progress in adding new security features to operating systems and hypervisors, the number of Xen and Linux kernel vulnerabilities allowing privilege escalations, arbitrary code execution or modifications in host software code has grown significantly in the past few years. These vulnerabilities serve as an initial vector that an attacker can leverage to install a rootkit - sophisticated malware targeting sensitive low-level kernel or hypervisor data structures such as interrupt handlers, event handlers, registers, and memory. If rootkits remain undetected over time, they can launch broader attacks on networked systems. For example, the Venom vulnerability provided the means for an attacker to execute arbitrary code in the hypervisor. Recent years have also seen a growth in ransomware including instances that&nbsp;leverage kernel vulnerabilities such as WannaCry, Sage, Locky, and Bad Rabbit.</p> </div> </div> </div> <p><span>Detecting unexpected changes in a system's runtime environment is critical to resilience. One solution that has been proposed based on repurposing of System Management Mode (SMM) for runtime security inspections; a promising idea due to SMM's high privilege and protected memory. &nbsp;Realizing such an approach is complicated because extended time spent in SMM can led to significant system impacts, such as perturbation of the kernel and device drivers as well as system crashes. &nbsp;Additional challenges arise for virtualized systems, where inspections must gain access to hypervisor level data. &nbsp;Finally, to be usable in a production environment, we must allow flexibility without requiring changes to the BIOS, that are too cumbersome to be viable as frequent steps.</span></p> <p><span>Our solution to these challenges is an SMM-based framework called EPA-RIMM: Extensible, Performance-Aware Runtime Integrity Measurement Mechanism. EPA-RIMM bounds the amount of measurement time spent in a single SMM session with a mechanism for decomposing large integrity measurements (for example, checking the entire Linux Kernel) to remain consistent with expectations regarding SMI latency. This approach creates an opportunity for the development of new integrity measurements that were formerly impractical. EPA-RIMM includes an API to specify measurements during operation, resolving SMM's semantic gap over what host software resources should be measured and where they reside, and increasing extensibility. For hypervisors, we use Intel's SMI Transfer Monitor (STM) to resolve SMM's lack of reliable access to the necessary hypervisor state, and to apply the principle of least privilege to the measurement agent, reducing its vulnerabilty to attack. By parameterizing SMI frequency and the amount of time spent in each SMI, we provide flexibility to adapt the continuous monitoring to changing threat conditions.&nbsp;Finally, to increase the amount of useful measurement that can be accomplished within the limited SMM time interval, we have extended SMM functionality to be fully multicore. &nbsp;The near linear increase in useful work per SMM interval achieved by concurrency greatly reduces the impact of EPA-RIMM on the production workload, since fewer interruptions into SMM are needed to complete a given measurement. This new capability has potential for use in SMM more widely.</span></p> <p><span>To demonstrate and test our ideas we have implemented an EPA-RIMM prototype that is available online with an open source license. &nbsp;We have separately released patches for the Xen hypervisor that add the use of STM to Xen to increase the protection against malicious code. &nbsp;Our experimental results using the prototype show that EPA-RIMM achieves the needed bound on time spent in SMM, making SMM a viable approach for continuous runtime integrity checking.</span></p> <p>In addition to achieving the technical goals, this project achieved important goals for education and workforce training. &nbsp;Approximately one dozen students worked directly on the project, from high school level up to Ph.D. &nbsp;Two graduate students were supported as research assistants, and outcomes include both a doctoral dissertation and a masters thesis. &nbsp;We have developed classroom materials and conducted class lectures related to the relevant &nbsp;system, firmware, and hardware technologies. We have presented the work at Portland State and other Universities, at practitioner-oriented conferences, and at technical Computer Science conferences.</p> <p class="p1">&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> </div> </div> </div> <p>&nbsp;</p><br> <p>            Last Modified: 10/30/2019<br>      Modified by: Karen&nbsp;Karavanic</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[       Despite progress in adding new security features to operating systems and hypervisors, the number of Xen and Linux kernel vulnerabilities allowing privilege escalations, arbitrary code execution or modifications in host software code has grown significantly in the past few years. These vulnerabilities serve as an initial vector that an attacker can leverage to install a rootkit - sophisticated malware targeting sensitive low-level kernel or hypervisor data structures such as interrupt handlers, event handlers, registers, and memory. If rootkits remain undetected over time, they can launch broader attacks on networked systems. For example, the Venom vulnerability provided the means for an attacker to execute arbitrary code in the hypervisor. Recent years have also seen a growth in ransomware including instances that leverage kernel vulnerabilities such as WannaCry, Sage, Locky, and Bad Rabbit.     Detecting unexpected changes in a system's runtime environment is critical to resilience. One solution that has been proposed based on repurposing of System Management Mode (SMM) for runtime security inspections; a promising idea due to SMM's high privilege and protected memory.  Realizing such an approach is complicated because extended time spent in SMM can led to significant system impacts, such as perturbation of the kernel and device drivers as well as system crashes.  Additional challenges arise for virtualized systems, where inspections must gain access to hypervisor level data.  Finally, to be usable in a production environment, we must allow flexibility without requiring changes to the BIOS, that are too cumbersome to be viable as frequent steps.  Our solution to these challenges is an SMM-based framework called EPA-RIMM: Extensible, Performance-Aware Runtime Integrity Measurement Mechanism. EPA-RIMM bounds the amount of measurement time spent in a single SMM session with a mechanism for decomposing large integrity measurements (for example, checking the entire Linux Kernel) to remain consistent with expectations regarding SMI latency. This approach creates an opportunity for the development of new integrity measurements that were formerly impractical. EPA-RIMM includes an API to specify measurements during operation, resolving SMM's semantic gap over what host software resources should be measured and where they reside, and increasing extensibility. For hypervisors, we use Intel's SMI Transfer Monitor (STM) to resolve SMM's lack of reliable access to the necessary hypervisor state, and to apply the principle of least privilege to the measurement agent, reducing its vulnerabilty to attack. By parameterizing SMI frequency and the amount of time spent in each SMI, we provide flexibility to adapt the continuous monitoring to changing threat conditions. Finally, to increase the amount of useful measurement that can be accomplished within the limited SMM time interval, we have extended SMM functionality to be fully multicore.  The near linear increase in useful work per SMM interval achieved by concurrency greatly reduces the impact of EPA-RIMM on the production workload, since fewer interruptions into SMM are needed to complete a given measurement. This new capability has potential for use in SMM more widely.  To demonstrate and test our ideas we have implemented an EPA-RIMM prototype that is available online with an open source license.  We have separately released patches for the Xen hypervisor that add the use of STM to Xen to increase the protection against malicious code.  Our experimental results using the prototype show that EPA-RIMM achieves the needed bound on time spent in SMM, making SMM a viable approach for continuous runtime integrity checking.  In addition to achieving the technical goals, this project achieved important goals for education and workforce training.  Approximately one dozen students worked directly on the project, from high school level up to Ph.D.  Two graduate students were supported as research assistants, and outcomes include both a doctoral dissertation and a masters thesis.  We have developed classroom materials and conducted class lectures related to the relevant  system, firmware, and hardware technologies. We have presented the work at Portland State and other Universities, at practitioner-oriented conferences, and at technical Computer Science conferences.                        Last Modified: 10/30/2019       Submitted by: Karen Karavanic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
