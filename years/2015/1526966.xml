<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Practical methods for removing latent configuration errors in cloud platforms</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2015</AwardEffectiveDate>
<AwardExpirationDate>12/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Configuration errors are a major cause for computer failures. A special type of configuration error called latent configuration errors, often has the highest severity and causes many serious, wide spread outages in data centers and cloud infrastructures, which affects millions of customers. These configuration errors are prevalent and expensive to troubleshoot, and can result in millions of dollars in business losses. This project addresses this important latent configuration problem that has caused many data center-wide outages in various cloud platforms. The methods developed by this project will significantly reduce the amount of severe data center-wide outages and improving the availability of cloud services and applications. &lt;br/&gt;&lt;br/&gt;Building on previous research experience in studying thousands of real world configuration errors in data centers, this project tackles this important latent configuration error problem via three practical and innovative research thrusts: (1) Automatically build configuration checkers to detect latent configuration errors at early stage before rolling out to thousands of nodes in data centers; (2) Design and build on-site configuration validation utility to allow data center administrators easily validate their configuration settings, especially those complex, latent ones; and (3) Improve configuration design to make them less prone to errors. The first research thrust observes the hidden validation checks in usages and develops automatic ways to separate the checks from the latent usages. The second research thrust is more fundamental as it aims to systematically simplify the configuration space to reduce configuration errors. The third thrust enables data center administrators to have more control of their configurations.  In addition, various educational and outreach activities for students, especially women students in computer science.</AbstractNarration>
<MinAmdLetterDate>08/06/2015</MinAmdLetterDate>
<MaxAmdLetterDate>06/11/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1526966</AwardID>
<Investigator>
<FirstName>Yuanyuan</FirstName>
<LastName>Zhou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yuanyuan Zhou</PI_FULL_NAME>
<EmailAddress>yyzhou@cs.ucsd.edu</EmailAddress>
<PI_PHON>8588224663</PI_PHON>
<NSF_ID>000246561</NSF_ID>
<StartDate>08/06/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930934</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <p><span style="font-size: 11.000000pt; font-family: 'Times';">Configuration errors (i.e., misconfiguration) are a major cause for computer failures. Among many types of configuration errors, one special type called &ldquo;</span><span style="font-size: 11.000000pt; font-family: 'Times'; font-style: italic;">latent configuration errors</span><span style="font-size: 11.000000pt; font-family: 'Times';">, often have the highest severity and have caused many serious, data-center wide outages in a number of data centers and cloud infrastructures including Microsoft Azure, Amazon EC2, Google, and Facebook, affecting millions of customers. Due to their unexpected and latent nature, they are hard to detect before rolling out to thousands of servers and components in a data center, and as a result may take down the entire data center, affecting numerous cloud services and applications. </span></p> <div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <p><span style="font-size: 11.000000pt; font-family: 'Times';">The first part of Our research project is one of the first in addressing this important latent configu- ration problem that has caused many data center-wide outages in various cloud platforms.</span><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';">&nbsp; To help software systems detect latent configuration errors early, we built a tool named PC</span><span style="font-size: 8.000000pt; font-family: 'NimbusRomNo9L';">HECK </span><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';">that analyzes the source code and automatically generates configuration checking code (called </span><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L'; font-style: italic;">checkers</span><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';">). Our experimental results show that PC</span><span style="font-size: 8.000000pt; font-family: 'NimbusRomNo9L';">HECK </span><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';">can help systems detect 75% of real-world LC errors at the initialization phase, including 37 new LC errors that have not been exposed before. Compared with existing detection tools, it can detect 31% more LC error.</span></p> <div class="page" title="Page 1"> <div class="layoutArea"> <div class="column"> <p><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';">The second part of our projet&nbsp; is to leverage many good practice recommendation in user manuals written in natural languages to help detect configuration issue.&nbsp; </span><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';">&nbsp;</span><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';">To understand the characteristics of configuration recommendations in user manuals, this paper first collected and studied 261 recommendations from the manuals of six large open-source systems. Our study shows that 60% of the studied recommendations describe specific and checkable specifica- tions instead of merely general guidance. Moreover, almost all (97%) of such specifications have not been checked in the systems&rsquo; source code, and 61% of them are not equivalent to the default settings. This implies that additional checking is needed to ensure the recommendations are correctly applied. </span></p> <p><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';">Based on our characteristic study, we build a tool called PracExtractor, which employs Natural Language Processing (NLP) techniques to automatically extract configuration rec- ommendations from software manuals, converts them into specifications, and then uses the generated specifications to detect violations in system admins&rsquo; configuration settings. We evaluate PracExtractor with twelve widely-deployed soft- ware systems, including one large commercial system from a public company. In total, PracExtractor automatically ex- tracts 338 recommendations and generates 173 specifications with reasonable accuracy. With these generated specifications, PracExtractor detects 1423 good practice violations from open-source docker images. To this day, we have reported 325 violations and have got 47 of them confirmed as real configuration issues by admins from different organizations. </span></p> </div> </div> </div> <p><span style="font-size: 10.000000pt; font-family: 'NimbusRomNo9L';"><br /></span></p> </div> </div> </div> </div> </div> </div><br> <p>            Last Modified: 04/23/2021<br>      Modified by: Yuanyuan&nbsp;Zhou</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    Configuration errors (i.e., misconfiguration) are a major cause for computer failures. Among many types of configuration errors, one special type called "latent configuration errors, often have the highest severity and have caused many serious, data-center wide outages in a number of data centers and cloud infrastructures including Microsoft Azure, Amazon EC2, Google, and Facebook, affecting millions of customers. Due to their unexpected and latent nature, they are hard to detect before rolling out to thousands of servers and components in a data center, and as a result may take down the entire data center, affecting numerous cloud services and applications.      The first part of Our research project is one of the first in addressing this important latent configu- ration problem that has caused many data center-wide outages in various cloud platforms.  To help software systems detect latent configuration errors early, we built a tool named PCHECK that analyzes the source code and automatically generates configuration checking code (called checkers). Our experimental results show that PCHECK can help systems detect 75% of real-world LC errors at the initialization phase, including 37 new LC errors that have not been exposed before. Compared with existing detection tools, it can detect 31% more LC error.     The second part of our projet  is to leverage many good practice recommendation in user manuals written in natural languages to help detect configuration issue.   To understand the characteristics of configuration recommendations in user manuals, this paper first collected and studied 261 recommendations from the manuals of six large open-source systems. Our study shows that 60% of the studied recommendations describe specific and checkable specifica- tions instead of merely general guidance. Moreover, almost all (97%) of such specifications have not been checked in the systems’ source code, and 61% of them are not equivalent to the default settings. This implies that additional checking is needed to ensure the recommendations are correctly applied.   Based on our characteristic study, we build a tool called PracExtractor, which employs Natural Language Processing (NLP) techniques to automatically extract configuration rec- ommendations from software manuals, converts them into specifications, and then uses the generated specifications to detect violations in system admins’ configuration settings. We evaluate PracExtractor with twelve widely-deployed soft- ware systems, including one large commercial system from a public company. In total, PracExtractor automatically ex- tracts 338 recommendations and generates 173 specifications with reasonable accuracy. With these generated specifications, PracExtractor detects 1423 good practice violations from open-source docker images. To this day, we have reported 325 violations and have got 47 of them confirmed as real configuration issues by admins from different organizations.                    Last Modified: 04/23/2021       Submitted by: Yuanyuan Zhou]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
