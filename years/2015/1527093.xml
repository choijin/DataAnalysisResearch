<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Assisting Developers in the Creation and Maintenance of Unit Tests</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>To test software, developers must perform two activities: test&lt;br/&gt;creation and test maintenance.  The first activity, test creation,&lt;br/&gt;consists of developing and implementing a test suite---the set of&lt;br/&gt;tests that will be used to evaluate the software.  The second&lt;br/&gt;activity, test maintenance, consists of both understanding existing&lt;br/&gt;test cases and evolving them in response to changes in the application&lt;br/&gt;that is being tested.  Despite decades of work, both of these&lt;br/&gt;activities are still expensive and labor-intensive.  In this project,&lt;br/&gt;we will address the need for useful developer support for both test&lt;br/&gt;creation and test maintenance by investigating and building&lt;br/&gt;cooperative approaches where automated tools and developers work&lt;br/&gt;together, each focusing on their respective strengths.  Improving the&lt;br/&gt;efficiency and effectiveness of both testing activities will be&lt;br/&gt;beneficial in reducing the overall cost of software development and,&lt;br/&gt;at the same time, improving software quality.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;This project will contribute to the state of the art by (1) innovating&lt;br/&gt;in the areas of program analysis and natural-language program analysis&lt;br/&gt;and (2) synergistically integrating these two strands of innovations.&lt;br/&gt;First, the PIs will investigate cooperative approaches for generating unit&lt;br/&gt;tests based on developer intent to save developer's time and to lower&lt;br/&gt;the cognitive barrier for writing tests by automating the tedious&lt;br/&gt;aspects of test creation.  Second, the PIs will investigate techniques for&lt;br/&gt;improving the comprehensibility of existing tests by automatically&lt;br/&gt;generating various forms of test documentation including descriptive&lt;br/&gt;test method names and both summary and explanatory comments.  Finally,&lt;br/&gt;the PIs will quantitatively and qualitatively evaluate and refine the newly&lt;br/&gt;developed techniques to ensure that they are both useful and&lt;br/&gt;effective.  The tools and experimental infrastructure developed within&lt;br/&gt;the project will be released, which will let researchers and&lt;br/&gt;practitioners build on the project's results.</AbstractNarration>
<MinAmdLetterDate>08/14/2015</MinAmdLetterDate>
<MaxAmdLetterDate>08/14/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1527093</AwardID>
<Investigator>
<FirstName>Emily</FirstName>
<LastName>Hill</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME>Dr.</PI_SUFX_NAME>
<PI_FULL_NAME>Emily Hill</PI_FULL_NAME>
<EmailAddress>emhill@drew.edu</EmailAddress>
<PI_PHON>9734083198</PI_PHON>
<NSF_ID>000604314</NSF_ID>
<StartDate>08/14/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>James</FirstName>
<LastName>Clause</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James A Clause</PI_FULL_NAME>
<EmailAddress>clause@udel.edu</EmailAddress>
<PI_PHON>3028310084</PI_PHON>
<NSF_ID>000610489</NSF_ID>
<StartDate>08/14/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Delaware</Name>
<CityName>Newark</CityName>
<ZipCode>197160099</ZipCode>
<PhoneNumber>3028312136</PhoneNumber>
<StreetAddress>210 Hullihen Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<StateCode>DE</StateCode>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>DE00</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>059007500</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF DELAWARE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>059007500</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Delaware]]></Name>
<CityName/>
<StateCode>DE</StateCode>
<ZipCode>197162553</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>DE00</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project contribute to the state of the art by (1) innovating in the areas of program analysis and natural-language program analysis and (2) synergistically integrating these two strands of innovations. The PIs investigated: 1) cooperative approaches for generating unit tests based on developer intent to save developers' time and to lower the cognitive barrier for writing tests by automating the tedious aspects of test creation and 2) techniques for improving the comprehensibility of existing tests by automatically generating various forms of test documentation including descriptive test method names and both summary and explanatory comments. Both areas of investigation were quantitatively and qualitatively evaluated to determine the usefulness and effectiveness of the developed approaches.&nbsp;<br /><br />The research will provide numerous benefits.&nbsp; First, it advanced discovery and understanding by introducing and training bothundergraduate and graduate students, including students from underrepresented groups, in state-of-the-art research in software engineering, particularly in program analysis, testing, and natural-language program analysis.&nbsp; The education component of included interdisciplinary curriculum development that integrated both testing and software engineering with the broader computer science curriculum. Second, infrastructure including prototype tools, experimental subjects was publicly released which enables extending the work, broader experimentation, and training and educating students and professional developers outside of the University of Delaware and Drew University. Third, the results of the research were disseminated though publication in relevant workshops, conferences, and journals. Fourth, the research benefits several groups. Researchers in software engineering benefit from new knowledge, tools, and techniques which enable the practical application of a broad range of new techniques as well as the sharing of ideas across community boundaries.&nbsp; Practicing software developers benefit from tools and techniques that reduce the costs of creating and maintaining tests.&nbsp; The general public benefits from improved software quality.</p><br> <p>            Last Modified: 11/22/2019<br>      Modified by: James&nbsp;A&nbsp;Clause</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project contribute to the state of the art by (1) innovating in the areas of program analysis and natural-language program analysis and (2) synergistically integrating these two strands of innovations. The PIs investigated: 1) cooperative approaches for generating unit tests based on developer intent to save developers' time and to lower the cognitive barrier for writing tests by automating the tedious aspects of test creation and 2) techniques for improving the comprehensibility of existing tests by automatically generating various forms of test documentation including descriptive test method names and both summary and explanatory comments. Both areas of investigation were quantitatively and qualitatively evaluated to determine the usefulness and effectiveness of the developed approaches.   The research will provide numerous benefits.  First, it advanced discovery and understanding by introducing and training bothundergraduate and graduate students, including students from underrepresented groups, in state-of-the-art research in software engineering, particularly in program analysis, testing, and natural-language program analysis.  The education component of included interdisciplinary curriculum development that integrated both testing and software engineering with the broader computer science curriculum. Second, infrastructure including prototype tools, experimental subjects was publicly released which enables extending the work, broader experimentation, and training and educating students and professional developers outside of the University of Delaware and Drew University. Third, the results of the research were disseminated though publication in relevant workshops, conferences, and journals. Fourth, the research benefits several groups. Researchers in software engineering benefit from new knowledge, tools, and techniques which enable the practical application of a broad range of new techniques as well as the sharing of ideas across community boundaries.  Practicing software developers benefit from tools and techniques that reduce the costs of creating and maintaining tests.  The general public benefits from improved software quality.       Last Modified: 11/22/2019       Submitted by: James A Clause]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
