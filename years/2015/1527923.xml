<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Interacting to Specify Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2015</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>499509.00</AwardTotalIntnAmount>
<AwardAmount>499509</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>All sectors of our society rely on the proper functioning of software. While many tools exist to help software developers ensure important functional, security, and performance properties of their software, these tools generally require developers to provide a specification of the desired properties.  Unfortunately writing specifications today is a tedious, error-prone, and costly proposition. Specifications are software artifacts in their own right, yet developers have almost no support in creating and evolving them. Therefore, developers tend to write highly simple or incomplete specifications, if they write specifications at all.  This project aims to address that problem by producing techniques and tools that aid and incentivize developers in creating and maintaining high-quality specifications.  The new techniques will lead to improved software quality and maintainability, and the associated tools will be made available for use by both other researchers as well as practitioners.&lt;br/&gt;&lt;br/&gt;The research focuses on two kinds of specifications: logical specs which are traditional pre/post conditions, and structural specs which are essentially boilerplate code patterns. The same principles will be followed for both kinds of specifications: a language will be defined to make the specifications highly expressive, and analysis-driven interactions with the programmer will be used to elicit and refine the specifications. Techniques will be used from code synthesis and dynamic invariant detection. A novel query language will enable programmers to interrogate their specifications.  The approach will be fundamentally interactive, leveraging human judgment to guide the construction of high-quality specifications, where the user is iteratively asked specific questions targeted at improving the correctness and completeness of generated specifications.</AbstractNarration>
<MinAmdLetterDate>06/30/2015</MinAmdLetterDate>
<MaxAmdLetterDate>06/30/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1527923</AwardID>
<Investigator>
<FirstName>Todd</FirstName>
<LastName>Millstein</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Todd D Millstein</PI_FULL_NAME>
<EmailAddress>todd@cs.ucla.edu</EmailAddress>
<PI_PHON>3108255942</PI_PHON>
<NSF_ID>000229495</NSF_ID>
<StartDate>06/30/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Miryung</FirstName>
<LastName>Kim</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Miryung Kim</PI_FULL_NAME>
<EmailAddress>miryung@cs.ucla.edu</EmailAddress>
<PI_PHON>3107940102</PI_PHON>
<NSF_ID>000676266</NSF_ID>
<StartDate>06/30/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Los Angeles</Name>
<CityName>LOS ANGELES</CityName>
<ZipCode>900951406</ZipCode>
<PhoneNumber>3107940102</PhoneNumber>
<StreetAddress>10889 Wilshire Boulevard</StreetAddress>
<StreetAddress2><![CDATA[Suite 700]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA33</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>092530369</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, LOS ANGELES</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Los Angeles]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900951596</ZipCode>
<StreetAddress><![CDATA[Computer Science Department]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA33</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~499509</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>&nbsp;</p> <ul style="margin-top: 0; margin-bottom: 0;"> </ul> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Software is relied upon in all aspects of society today, so its correctness is of paramount importance.&nbsp; However, before a software system&rsquo;s correctness can be validated, we must have a </span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: italic; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">specification</span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> of the system&rsquo;s desired behavior. Unfortunately writing specifications today is a tedious, error-prone, and costly proposition. Specifications are software artifacts in their own right, yet developers have almost no support in creating and evolving them. Therefore, developers tend to write highly simple or incomplete specifications, if they write specifications at all. This project aimed to address this problem by developing techniques and associated tools that aid developers in creating and maintaining high-quality specifications.</span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The project focused on support for two different types of specifications.&nbsp; First, we developed new approaches to inferring </span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: italic; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">logical specifications</span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> about a software system, which represent desired behaviors as logical formulas.&nbsp; Specifically, we created the Precondition Inference Engine (PIE), which automatically infers the logical conditions under which a given piece of code behaves as intended.&nbsp; PIE is more </span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: italic; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">expressive</span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> than prior approaches, able to infer more complex conditions than was previously possible.&nbsp; PIE also provides stronger guarantees than prior approaches.&nbsp; We then showed how to use PIE to build an automatic software </span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: italic; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">verifier</span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, called LoopInvGen, which automatically proves that a given piece of code meets its specification.&nbsp; These tools have won multiple competitions and been used by others to obtain strong guarantees about software in a variety of domains.</span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Second, we developed new approaches to inferring </span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: italic; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">structural specifications</span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> about a software system in the form of</span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: italic; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> code templates</span><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. These include three </span><span style="font-size: 10.5pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">interactive and automated techniques to discover structural specifications from a large corpus of open source repositories.&nbsp; Specifically, we have designed (1) ExampleCheck that infers API usage patterns automatically from GitHub projects and subsequently detects API usage violations in StackOverflow posts. We also designed (2) ExampleStack that automatically creates code templates from examples and identifies &ldquo;hot spots&rdquo; where most changes happen. Finally, we d</span><span style="font-size: 10pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">esigned (3) Examplore,&nbsp; a novel interactive visualization and navigation technique that gives a bird&rsquo;s-eye view of common and uncommon ways that developers use an API. These techniques have been made publicly available as both Chrome browser extensions and standalone tools.</span></p> <p><br /><br /></p><br> <p>            Last Modified: 10/16/2020<br>      Modified by: Todd&nbsp;D&nbsp;Millstein</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[      Software is relied upon in all aspects of society today, so its correctness is of paramount importance.  However, before a software system’s correctness can be validated, we must have a specification of the system’s desired behavior. Unfortunately writing specifications today is a tedious, error-prone, and costly proposition. Specifications are software artifacts in their own right, yet developers have almost no support in creating and evolving them. Therefore, developers tend to write highly simple or incomplete specifications, if they write specifications at all. This project aimed to address this problem by developing techniques and associated tools that aid developers in creating and maintaining high-quality specifications.  The project focused on support for two different types of specifications.  First, we developed new approaches to inferring logical specifications about a software system, which represent desired behaviors as logical formulas.  Specifically, we created the Precondition Inference Engine (PIE), which automatically infers the logical conditions under which a given piece of code behaves as intended.  PIE is more expressive than prior approaches, able to infer more complex conditions than was previously possible.  PIE also provides stronger guarantees than prior approaches.  We then showed how to use PIE to build an automatic software verifier, called LoopInvGen, which automatically proves that a given piece of code meets its specification.  These tools have won multiple competitions and been used by others to obtain strong guarantees about software in a variety of domains.  Second, we developed new approaches to inferring structural specifications about a software system in the form of code templates. These include three interactive and automated techniques to discover structural specifications from a large corpus of open source repositories.  Specifically, we have designed (1) ExampleCheck that infers API usage patterns automatically from GitHub projects and subsequently detects API usage violations in StackOverflow posts. We also designed (2) ExampleStack that automatically creates code templates from examples and identifies "hot spots" where most changes happen. Finally, we designed (3) Examplore,  a novel interactive visualization and navigation technique that gives a bird’s-eye view of common and uncommon ways that developers use an API. These techniques have been made publicly available as both Chrome browser extensions and standalone tools.           Last Modified: 10/16/2020       Submitted by: Todd D Millstein]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
