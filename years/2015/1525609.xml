<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Improving Memory Performance on Fused Architectures through Compiler and Runtime Innovations</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2015</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>470000.00</AwardTotalIntnAmount>
<AwardAmount>470000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Yuanyuan Yang</SignBlockName>
<PO_EMAI>yyang@nsf.gov</PO_EMAI>
<PO_PHON>7032928067</PO_PHON>
</ProgramOfficer>
<AbstractNarration>During the past decade, accelerators such as Graphics Processing Units (GPUs) have entered the area of general-purpose computing. They are now widely used for achieving high performance in scientific simulation, business analytics, image processing, and many other application domains. Their effectiveness however has been largely constrained by narrow and slow interconnections to multicore CPUs. Instead of such disjoint memories for multicore CPUs on one side and GPUs on the other, contemporary architectures are adopting an integrated design: Conventional CPUs and co-accelerators are integrated on the same die with access to the same memory. The integration provides new opportunities for synergistic execution on CPUs and GPUs, but can also intensify resource contention within the memory hierarchy. The implications yet remain to be understood.&lt;br/&gt;&lt;br/&gt;This project aims to systematically explore the new challenges and opportunities of the integration, especially for compilers and runtime systems in governing program transformations and maintaining them at runtime for data locality, task partitioning and scheduling. The PIs propose to advance the state of the art by promoting synergistic execution in support of data sharing while creating spheres of isolation between CPU and GPU execution to mitigate resource contention of non-shared data. The proposed techniques include a set of novel compiler transformations, concurrent program control and data abstractions, and systems mechanisms that foster&lt;br/&gt;sharing and reduce cross-boundary contention depending on memory access patterns with respect to shared hardware resources.  This synergy between compiler techniques and the runtime system has the potential to significantly improve performance and power guarantees for co-scheduling program fragments on fused architectures.</AbstractNarration>
<MinAmdLetterDate>07/27/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/27/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1525609</AwardID>
<Investigator>
<FirstName>Frank</FirstName>
<LastName>Mueller</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Frank Mueller</PI_FULL_NAME>
<EmailAddress>mueller@cs.ncsu.edu</EmailAddress>
<PI_PHON>9195157889</PI_PHON>
<NSF_ID>000484031</NSF_ID>
<StartDate>07/27/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Xipeng</FirstName>
<LastName>Shen</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Xipeng Shen</PI_FULL_NAME>
<EmailAddress>xshen5@ncsu.edu</EmailAddress>
<PI_PHON>9195137577</PI_PHON>
<NSF_ID>000180293</NSF_ID>
<StartDate>07/27/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2><![CDATA[Admin. III, STE 240]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[North Carolina State University]]></Name>
<CityName>Raleigh</CityName>
<StateCode>NC</StateCode>
<ZipCode>276958206</ZipCode>
<StreetAddress><![CDATA[890 Oval Dr.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~470000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>During the past decade, accelerators such as Graphics Processing Units(GPUs) have entered the area of general-purpose computing. Whilediscrete accelerators have significant potential to speed upcomputation, their effectiveness is poised by narrow and slowinterconnections to multicore CPUs. Instead of such disjoint memoriesfor multicore CPUs on one side and GPUs on the other, contemporaryarchitectures are adopting an integrated design: Conventional CPUs areco-hosted accelerators on the same die with access to the same memory,albeit with different coherence models.</p> <p><br />Intellectual Merits:&nbsp;<br />This project has revealed a set of novel implicationsof fused architectures by studying their effects, qualifying theircauses and quantifying the impacts on performance and powerefficiency. It has advanced the state-of-the-art by promotingsynergistic execution in support of data sharing while creatingspheres of isolation between CPU and GPU execution to mitigateresource contention of non-shared data. It in addition has developednovel compiler transformations, concurrent program control anddata abstractions, and systems mechanisms that foster sharing and reduce cross-boundary contention depending on memory access patterns with respect to shared hardware resources. &nbsp;This synergybetween compiler techniques and the runtime system has the potential to significantly improve performance and power guarantees forco-scheduling programs fragments on fused architectures. During the period of this project, the team have&nbsp;produced dozens of peer-reviewed journal or conference research papers, and released an open-source software.&nbsp;</p> <p><br />Broader Impact:<br />This project has the potential to transformcompiler infrastructure, internal representations and runtime systemsto create a synergistic development environment with significantperformance and power improvements and a new sensitivity for sharingvs. isolation decisions suitable for synergistic co-deployment ofprograms crossing boundaries on innovative fused architectures. &nbsp;With the support of this grant, the research team have graduated six Ph.Ds and two Masters during the period of the project.&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/22/2020<br>      Modified by: Frank&nbsp;Mueller</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2020/1525609/1525609_10380509_1600467468810_GPUcorundegration--rgov-214x142.jpg" original="/por/images/Reports/POR/2020/1525609/1525609_10380509_1600467468810_GPUcorundegration--rgov-800width.jpg" title="GPU-Degradation"><img src="/por/images/Reports/POR/2020/1525609/1525609_10380509_1600467468810_GPUcorundegration--rgov-66x44.jpg" alt="GPU-Degradation"></a> <div class="imageCaptionContainer"> <div class="imageCaption">GPU Co-run Performance Degradations on CPU-GPU Fused Architecture.</div> <div class="imageCredit">Xipeng Shen</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Xipeng&nbsp;Shen</div> <div class="imageTitle">GPU-Degradation</div> </div> </li> <li> <a href="/por/images/Reports/POR/2020/1525609/1525609_10380509_1600467510315_CPU_corunDegradation_fused--rgov-214x142.jpg" original="/por/images/Reports/POR/2020/1525609/1525609_10380509_1600467510315_CPU_corunDegradation_fused--rgov-800width.jpg" title="CPU-Degradation"><img src="/por/images/Reports/POR/2020/1525609/1525609_10380509_1600467510315_CPU_corunDegradation_fused--rgov-66x44.jpg" alt="CPU-Degradation"></a> <div class="imageCaptionContainer"> <div class="imageCaption">CPU Co-run Performance Degradations on CPU-GPU Fused Architecture</div> <div class="imageCredit">Xipeng Shen</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Xipeng&nbsp;Shen</div> <div class="imageTitle">CPU-Degradation</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ During the past decade, accelerators such as Graphics Processing Units(GPUs) have entered the area of general-purpose computing. Whilediscrete accelerators have significant potential to speed upcomputation, their effectiveness is poised by narrow and slowinterconnections to multicore CPUs. Instead of such disjoint memoriesfor multicore CPUs on one side and GPUs on the other, contemporaryarchitectures are adopting an integrated design: Conventional CPUs areco-hosted accelerators on the same die with access to the same memory,albeit with different coherence models.   Intellectual Merits:  This project has revealed a set of novel implicationsof fused architectures by studying their effects, qualifying theircauses and quantifying the impacts on performance and powerefficiency. It has advanced the state-of-the-art by promotingsynergistic execution in support of data sharing while creatingspheres of isolation between CPU and GPU execution to mitigateresource contention of non-shared data. It in addition has developednovel compiler transformations, concurrent program control anddata abstractions, and systems mechanisms that foster sharing and reduce cross-boundary contention depending on memory access patterns with respect to shared hardware resources.  This synergybetween compiler techniques and the runtime system has the potential to significantly improve performance and power guarantees forco-scheduling programs fragments on fused architectures. During the period of this project, the team have produced dozens of peer-reviewed journal or conference research papers, and released an open-source software.    Broader Impact: This project has the potential to transformcompiler infrastructure, internal representations and runtime systemsto create a synergistic development environment with significantperformance and power improvements and a new sensitivity for sharingvs. isolation decisions suitable for synergistic co-deployment ofprograms crossing boundaries on innovative fused architectures.  With the support of this grant, the research team have graduated six Ph.Ds and two Masters during the period of the project.           Last Modified: 09/22/2020       Submitted by: Frank Mueller]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
