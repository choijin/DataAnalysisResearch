<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Sparse Integer Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2016</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>293712.00</AwardTotalIntnAmount>
<AwardAmount>293712</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07030000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>CMMI</Abbreviation>
<LongName>Div Of Civil, Mechanical, &amp; Manufact Inn</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Georgia-Ann Klutke</SignBlockName>
<PO_EMAI>gaklutke@nsf.gov</PO_EMAI>
<PO_PHON>7032922443</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Mixed-integer linear programming is a mathematical optimization framework that allows modeling discrete optimization problems that arise in various fields of engineering and business, such as chemical engineering, finance, forestry, health care, power systems, and supply-chain design. Most mixed-integer programming formulations that appear in these different areas of application involve very sparse constraint matrices. Many areas of scientific computing and optimization have been very successful in harnessing the effect of such sparsity of input data to improve the efficacy of algorithms. However, the use of sparsity of input data is a very under-explored direction of research in the context of mixed-integer linear programming algorithms. This award supports fundamental research for advancement of mixed-integer linear programming solver techniques for instances with sparse constraint matrices. Any improvement of the solvers obtained could result in significant gains to a large number of different applications. This project will support and train one PhD student who will be involved with all aspects of the research and dissemination of the results.&lt;br/&gt;&lt;br/&gt;The goal of this research is to systematically investigate the mathematical implications of sparse data matrices and to use this as a starting point for development of new and improved algorithms for solving mixed-integer linear programs that exploit sparsity in a holistic fashion. If successful, this project will be able to uncover formal mathematical explanation for various empirically observed behavior of mixed-integer linear programs, such as: Why does selection of sparse cutting-planes for mixed-integer linear programs with sparse constraint matrix work well in many cases? Why does feasibility pump, an important primal heuristic, work much better on average for mixed-integer linear programs with sparse constraint matrices? Why does the proportion of integral vertices to the total number of vertices of the linear programming relaxation of binary mixed-integer linear programs increase on an average as the formulations become more sparse? Using such insights, the research project will explore various avenues of improving mixed-integer linear programming solvers in order to better exploit sparsity, such as a new paradigm for sparse cut selection, increasing sparsity by use of extended formulations and combining new and different types of heuristics targeted towards better performance on sparse mixed-integer programming instances.</AbstractNarration>
<MinAmdLetterDate>06/02/2016</MinAmdLetterDate>
<MaxAmdLetterDate>06/02/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1562578</AwardID>
<Investigator>
<FirstName>Santanu</FirstName>
<LastName>Dey</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Santanu Dey</PI_FULL_NAME>
<EmailAddress>santanu.dey@isye.gatech.edu</EmailAddress>
<PI_PHON>4048944819</PI_PHON>
<NSF_ID>000557978</NSF_ID>
<StartDate>06/02/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>097394084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGIA TECH RESEARCH CORPORATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>097394084</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgia Tech Research Corporation]]></Name>
<CityName/>
<StateCode>GA</StateCode>
<ZipCode>303320420</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>006Y</Code>
<Text>OE Operations Engineering</Text>
</ProgramElement>
<ProgramReference>
<Code>071E</Code>
<Text>MFG ENTERPRISE OPERATIONS</Text>
</ProgramReference>
<ProgramReference>
<Code>072E</Code>
<Text>NETWORKS &amp; QUEUING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>073E</Code>
<Text>OPTIMIZATION &amp; DECISION MAKING</Text>
</ProgramReference>
<ProgramReference>
<Code>077E</Code>
<Text>SIMULATION MODELS</Text>
</ProgramReference>
<ProgramReference>
<Code>078E</Code>
<Text>ENTERPRISE DESIGN &amp; LOGISTICS</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~293712</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Mixed integer linear programming (MILP) technology has made significant progress over the last fifty years. MILP has a wide range of application: supply chair design, financial applications, power systems design and analysis, production planning, scheduling, IMRT treatment planning, etc. Commercial state-of-the-art MILP codes are stable and can quite often solve instances with up to tens of thousands of variables. However, numerous instances and classes of problems remain challenging to solve. In this project, we exploit the one consistent characteristic of most practical integer programming models: sparsity of the input data. Consider the following statistics: The average number of non-zero entries in the constraint matrix of MIPLIB 2010 instances (the standard benchmark instances) is 1.63%. Indeed, one never sees formulations of IPs where the matrix is very dense, for example all the variables appearing in all the constraints. Surprisingly, the use of sparsity of input data is a very under explored direction of research in the context of Integer Programming.</p> <p>Intellectual merit: In this project, we have made multiple theoretical in-roads into better understanding sparsity in the context of MILPs. The first question we consider is the use of sparse cutting-planes. Adding sparse cutting-planes promotes and maintains sparsity of the constraints matrix. This use of sparse cutting-planes may be viewed as a compromise between two competing objectives. On the one hand, the use of sparse cutting-planes aids in solving the linear programs encountered in the branch-&amp;-bound tree faster. On the other hand, it is possible that `important' facet-defining or valid inequalities for the convex hull of the feasible solutions are dense and thus without adding these cuts, one may not be able to attain significant integrality gap closure. This may lead to a larger branch-&amp;-bound tree and thus result in the solution time to increase. In order to answer these questions, we study the question of how well polytopes that represent convex of integer solutions can be approximated using sparse inequalities. We demonstrate conditions under which polytopes can be approximated well using sparse constraints. For example, we show that polytopes with "few extreme" (polynomial in dimension) extreme points can be well approximated using sparse inequalities. We then study how sparsity of the original formulation leads to prediction of correct support of sparse cuts to be used. In particular, we verify how for packing and covering integer programs, adding sparse cutting planes that match the sparsity of the original formulation, leads to strong cuts. &nbsp;In our second main study, we examine the role of sparsity in design of heuristics of general MILPs. We take a well-known heuristic for mixed integer linear program, the so-called feasibility pump. We show how taking sparsity into account can lead to the first provably convergent version of this heuristic. Finally, we study the question of using sparse cutting planes for semi-definite programming relaxations of integer programs. We are able to analyze the strength of such cuts.&nbsp;</p> <p>Broader impact: Our project has lead to algorithmic enhancements for solving integer programs faster. In particular, this work has lead to faster and better separation of certain kinds of cuts. It has lead to faster and better heuristics for MILPs. Improvement obtained via this project could potentially benefit users of MILP solvers.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/02/2020<br>      Modified by: Santanu&nbsp;Dey</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Mixed integer linear programming (MILP) technology has made significant progress over the last fifty years. MILP has a wide range of application: supply chair design, financial applications, power systems design and analysis, production planning, scheduling, IMRT treatment planning, etc. Commercial state-of-the-art MILP codes are stable and can quite often solve instances with up to tens of thousands of variables. However, numerous instances and classes of problems remain challenging to solve. In this project, we exploit the one consistent characteristic of most practical integer programming models: sparsity of the input data. Consider the following statistics: The average number of non-zero entries in the constraint matrix of MIPLIB 2010 instances (the standard benchmark instances) is 1.63%. Indeed, one never sees formulations of IPs where the matrix is very dense, for example all the variables appearing in all the constraints. Surprisingly, the use of sparsity of input data is a very under explored direction of research in the context of Integer Programming.  Intellectual merit: In this project, we have made multiple theoretical in-roads into better understanding sparsity in the context of MILPs. The first question we consider is the use of sparse cutting-planes. Adding sparse cutting-planes promotes and maintains sparsity of the constraints matrix. This use of sparse cutting-planes may be viewed as a compromise between two competing objectives. On the one hand, the use of sparse cutting-planes aids in solving the linear programs encountered in the branch-&amp;-bound tree faster. On the other hand, it is possible that `important' facet-defining or valid inequalities for the convex hull of the feasible solutions are dense and thus without adding these cuts, one may not be able to attain significant integrality gap closure. This may lead to a larger branch-&amp;-bound tree and thus result in the solution time to increase. In order to answer these questions, we study the question of how well polytopes that represent convex of integer solutions can be approximated using sparse inequalities. We demonstrate conditions under which polytopes can be approximated well using sparse constraints. For example, we show that polytopes with "few extreme" (polynomial in dimension) extreme points can be well approximated using sparse inequalities. We then study how sparsity of the original formulation leads to prediction of correct support of sparse cuts to be used. In particular, we verify how for packing and covering integer programs, adding sparse cutting planes that match the sparsity of the original formulation, leads to strong cuts.  In our second main study, we examine the role of sparsity in design of heuristics of general MILPs. We take a well-known heuristic for mixed integer linear program, the so-called feasibility pump. We show how taking sparsity into account can lead to the first provably convergent version of this heuristic. Finally, we study the question of using sparse cutting planes for semi-definite programming relaxations of integer programs. We are able to analyze the strength of such cuts.   Broader impact: Our project has lead to algorithmic enhancements for solving integer programs faster. In particular, this work has lead to faster and better separation of certain kinds of cuts. It has lead to faster and better heuristics for MILPs. Improvement obtained via this project could potentially benefit users of MILP solvers.             Last Modified: 08/02/2020       Submitted by: Santanu Dey]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
