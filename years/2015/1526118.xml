<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research:Text Retrieval in Software Engineering 2.0</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>200000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software systems contain large amounts of textual information captured in various software artifacts, such as, requirements documents, source code, user manuals, etc.  The productivity of software developers and the quality of the software they produce directly depends on their ability to retrieve and understand the textual information present in software.  Since humans cannot process and comprehend so much text, researchers proposed the use of text retrieval techniques to help software developers with many of their daily tasks.  In order to be useful, these techniques need to be properly configured, which requires calibrating many parameters.  As most software developers are not experts in text retrieval, they need help in determining the best text retrieval configuration in a given software engineering context.  The configuration problem is one of the main obstacles in the adoption of such techniques in the software industry, because many approaches proposed by researchers do not generalize well.  The outcomes of this project will transform the way software developers address many of their daily tasks, allowing them to easily adopt the use of text retrieval during software development.  The results of this research will also be used in software engineering courses to support students in their projects.  The new practices that the students will acquire will help them become better software engineers.  The proposed research also brings together work from different computing research communities: software engineering and information retrieval and it will bring new knowledge in both fields.  Existing approaches using text retrieval in software engineering will become more practical, rather than just promising, facilitating migration from the lab into industry and academia.&lt;br/&gt;&lt;br/&gt;The outcome of this research will be: (1) a novel approach (called TRinSE2.0), which will achieve automatic, runtime query-based text retrieval configuration; and (2) improvements to important software engineering tasks, in practical settings, focusing on feature and bug location, impact analysis, traceability link recovery, and bug triage.  TRinSE2.0 will be evaluated on open source data, in the classroom, and in industrial settings.  The proposed work will transform the way text retrieval configuration is done in software engineering applications.  New, software-specific measures, as well as proven linguistic-based measures will be used to capture query properties in the context of software engineering tasks and data sets.  Machine learning algorithms will find the best configuration for a given query.  When writing a query to retrieve information from a software project, developers will get the best results, saving them time and effort, improving their productivity and the quality of their work.  The text retrieval configuration problem will no longer be heuristic-based, but it will become data-driven.</AbstractNarration>
<MinAmdLetterDate>07/20/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/20/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1526118</AwardID>
<Investigator>
<FirstName>Andrian</FirstName>
<LastName>Marcus</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrian Marcus</PI_FULL_NAME>
<EmailAddress>amarcus@utdallas.edu</EmailAddress>
<PI_PHON/>
<NSF_ID>000488981</NSF_ID>
<StartDate>07/20/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Dallas</Name>
<CityName>Richardson</CityName>
<ZipCode>750803021</ZipCode>
<PhoneNumber>9728832313</PhoneNumber>
<StreetAddress>800 W. Campbell Rd., AD15</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>32</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX32</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>800188161</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT DALLAS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Dallas]]></Name>
<CityName>Richardson</CityName>
<StateCode>TX</StateCode>
<ZipCode>750803021</ZipCode>
<StreetAddress><![CDATA[800 W. Campbell Rd.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>32</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX32</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~200000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Text Retrieval approaches, which allow searching in large amounts of text and extracting the most important information in software artifacts, have been applied to more than 20 software engineering tasks.&nbsp;</p> <p>&nbsp;</p> <p>We found that the retrieval performance of various text retrieval engines varies based on the query issued by a user, when used to retrieve source code artifacts. We improved applications of text retrieval in software engineering, by addressing the problem of configuring the parameters of text retrieval engines based on queries issued by developers. We developed a new technique and tool, called QUEST, which is the first step towards automatically determining the best text retrieval (TR) configuration for a given query. QUEST uses a supervised learning approach and the properties of a query to recommend the TR engine and parameter configuration that is most likely to work best for that query. We evaluated QUEST in the context of feature and bug localization, using a data set with more than 1,000 queries and found that it leads to better results than using a single TR configuration for all queries in a system.&nbsp; Tools and techniques like QUEST can be are very useful for leveraging the potential of TR approaches in a practical setting, with high adoption chances in the open source community as well as in industry.</p> <p>&nbsp;</p> <p>We improved previous work on predicting the quality of queries in the context of TR applications in software engineering by integrating new, post-retrieval quality metrics. We evaluated the new approach on two tasks: bug localization and traceability link recovery. We found that this improved approach leads to better results in predicting the quality of queries than our previous work, which made use only of pre-retrieval quality metrics. Detecting the quality of queries is a crucial step towards the query-based configuration of TR approaches, because a poorly formulated query may lead to poor TR results no matter what configuration is chosen for it. Therefore, poor queries need to be detected and reformulated before TR approaches are applied to it.</p> <p>&nbsp;</p> <p>One main application of TR in SE is on concept location/bug localization, and improving such approaches is one of the main goals of this project. In addition to the settings of TR engines, retrieval in these applications is impacted by the vocabulary present in the bug reports, which are often used as queries for bug localization. We investigated the level of vocabulary agreement between users, which occurs when reporting similar issues.&nbsp; Empirical data on more than 13,000 pairs of duplicate bug reports and stack overflow questions indicate that 12% of them do not have any common vocabulary, while for the rest, the pairs share in average 30% of their vocabulary.&nbsp; In our quest for improving TR-based bug localization we developed a new query reformulation technique that utilizes the observed behavior description from bug reports to reformulate low quality queries.&nbsp; The results indicate massive improvements over baseline approaches, as the reformulated queries improve TR-based bug localization for all approaches by 147.4% and 116.6% on average, in terms of MRR and MAP, respectively.&nbsp;</p> <p>&nbsp;</p> <p>We developed an approach that uses parts of the bug descriptions to reformulate queries used in bug descriptions to improve text retrieval-based duplicate bug detection.&nbsp; We found that using the observed behavior and the title of the bug report as a query improves duplicate bug detection, compared to using the entire bug report as a query.</p> <p>&nbsp;</p> <p>We developed a technique for summarizing class APIs, to help during software retrieval. Unique to this summarization technique, compared to related work, is that the summaries are specific to the queries issued by the users.&nbsp; The technique is based on the use of software engineering-specific knowledge graphs.</p> <p>&nbsp;</p> <p>We developed and presented four Technical Briefings in top venues in the field, on ?The Use of Text Retrieval and Natural Language Processing in Software Engineering?, plus a tutorial and a technical briefing on ?Source Code Summarization?.</p> <p>&nbsp;</p> <p>Three graduate students from underrepresented categories (one woman and two Hispanics) worked on topics related to this project. &nbsp;This grant contributed to the training, professional development, and the fostering of networks for the supported graduate students, by allowing the PI to train and involve the students in research and by allowing the students to (i) present their papers at conferences and get feedback on their work from other researchers from academia and industry, (ii) attend research presentations at conferences and enrich their knowledge about the field, and (iii) interact with other students, researchers, and practitioners in the field, therefore building a professional network that can benefit their future careers.&nbsp; One student graduated with his PhD and another graduated with her MS.</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/29/2019<br>      Modified by: Andrian&nbsp;Marcus</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Text Retrieval approaches, which allow searching in large amounts of text and extracting the most important information in software artifacts, have been applied to more than 20 software engineering tasks.      We found that the retrieval performance of various text retrieval engines varies based on the query issued by a user, when used to retrieve source code artifacts. We improved applications of text retrieval in software engineering, by addressing the problem of configuring the parameters of text retrieval engines based on queries issued by developers. We developed a new technique and tool, called QUEST, which is the first step towards automatically determining the best text retrieval (TR) configuration for a given query. QUEST uses a supervised learning approach and the properties of a query to recommend the TR engine and parameter configuration that is most likely to work best for that query. We evaluated QUEST in the context of feature and bug localization, using a data set with more than 1,000 queries and found that it leads to better results than using a single TR configuration for all queries in a system.  Tools and techniques like QUEST can be are very useful for leveraging the potential of TR approaches in a practical setting, with high adoption chances in the open source community as well as in industry.     We improved previous work on predicting the quality of queries in the context of TR applications in software engineering by integrating new, post-retrieval quality metrics. We evaluated the new approach on two tasks: bug localization and traceability link recovery. We found that this improved approach leads to better results in predicting the quality of queries than our previous work, which made use only of pre-retrieval quality metrics. Detecting the quality of queries is a crucial step towards the query-based configuration of TR approaches, because a poorly formulated query may lead to poor TR results no matter what configuration is chosen for it. Therefore, poor queries need to be detected and reformulated before TR approaches are applied to it.     One main application of TR in SE is on concept location/bug localization, and improving such approaches is one of the main goals of this project. In addition to the settings of TR engines, retrieval in these applications is impacted by the vocabulary present in the bug reports, which are often used as queries for bug localization. We investigated the level of vocabulary agreement between users, which occurs when reporting similar issues.  Empirical data on more than 13,000 pairs of duplicate bug reports and stack overflow questions indicate that 12% of them do not have any common vocabulary, while for the rest, the pairs share in average 30% of their vocabulary.  In our quest for improving TR-based bug localization we developed a new query reformulation technique that utilizes the observed behavior description from bug reports to reformulate low quality queries.  The results indicate massive improvements over baseline approaches, as the reformulated queries improve TR-based bug localization for all approaches by 147.4% and 116.6% on average, in terms of MRR and MAP, respectively.      We developed an approach that uses parts of the bug descriptions to reformulate queries used in bug descriptions to improve text retrieval-based duplicate bug detection.  We found that using the observed behavior and the title of the bug report as a query improves duplicate bug detection, compared to using the entire bug report as a query.     We developed a technique for summarizing class APIs, to help during software retrieval. Unique to this summarization technique, compared to related work, is that the summaries are specific to the queries issued by the users.  The technique is based on the use of software engineering-specific knowledge graphs.     We developed and presented four Technical Briefings in top venues in the field, on ?The Use of Text Retrieval and Natural Language Processing in Software Engineering?, plus a tutorial and a technical briefing on ?Source Code Summarization?.     Three graduate students from underrepresented categories (one woman and two Hispanics) worked on topics related to this project.  This grant contributed to the training, professional development, and the fostering of networks for the supported graduate students, by allowing the PI to train and involve the students in research and by allowing the students to (i) present their papers at conferences and get feedback on their work from other researchers from academia and industry, (ii) attend research presentations at conferences and enrich their knowledge about the field, and (iii) interact with other students, researchers, and practitioners in the field, therefore building a professional network that can benefit their future careers.  One student graduated with his PhD and another graduated with her MS.          Last Modified: 12/29/2019       Submitted by: Andrian Marcus]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
