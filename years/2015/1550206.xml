<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: A Mining-Based Approach for Consistent and Timely Adaptation of Component-Based Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>01/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>404851.00</AwardTotalIntnAmount>
<AwardAmount>404851</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Increasingly, software is expected to dynamically adapt its behavior in response to changing conditions in the computation infrastructure as well as the surrounding physical environment. Two important problems in dynamic adaptation of software are (1) how to prevent failure of the software during adaptation, and (2) how to reduce disruptions in the functionalities provisioned by the software. This research will devise a novel technique for dealing with these problems by automatically determining when is the best time for making changes to a running software system. The principles emerging from this research will provide the foundation for a new method of engineering dynamically adaptive software. The results of the research will be incorporated into education, such that tomorrow's software engineers are better equipped to tackle the challenges of constructing adaptive software. The approach will be realized via a suite of open source tools to pave the way for transitioning the research results to the industry. &lt;br/&gt;&lt;br/&gt;All prior techniques targeted at this research problem have assumed the availability of detailed software component dependency models. This research will develop a novel technique that solves this problem in settings where such models are either not available, difficult to build, or outdated due to the evolution of the software. The hypothesis guiding this research is that by monitoring a software system?s execution history (e.g., message exchanges, method invocations) for a sufficiently long period of time, it is possible to mine an accurate model of interactions and dependencies among the system's components. The research will demonstrate how models inferred in this way can be used to (1) ensure changes in the running software do not create inconsistencies that could jeopardize the system?s functionality, (2) control the level of disruption incurred in system?s operations due to adaptation, and (3) automatically adjust the models to changing dependencies among the potentially evolving software components.</AbstractNarration>
<MinAmdLetterDate>08/05/2015</MinAmdLetterDate>
<MaxAmdLetterDate>04/21/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1550206</AwardID>
<Investigator>
<FirstName>Sam</FirstName>
<LastName>Malek</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sam Malek</PI_FULL_NAME>
<EmailAddress>malek@uci.edu</EmailAddress>
<PI_PHON>9498240639</PI_PHON>
<NSF_ID>000488088</NSF_ID>
<StartDate>08/05/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926972775</ZipCode>
<StreetAddress><![CDATA[5171 California Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~130239</FUND_OBLG>
<FUND_OBLG>2015~88677</FUND_OBLG>
<FUND_OBLG>2016~91515</FUND_OBLG>
<FUND_OBLG>2017~94420</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In this project, we developed novel techniques for improving quality of a software system (e.g., reliability, security) through its dynamic adaptation, i.e., changing a software system at runtime and as it executes, rather than the conventional method of restarting the system.&nbsp;</p> <p>Specifically, the intellectual merit of this work was a novel approach for determining the appropriate time for adapting a system's software components in settings where an accurate model of their dependencies is not available. Appropriate time is when the adaptation of a given component results in neither inconsistency (i.e., eventual failure), nor unacceptable disruption. We showed that by collecting a software system's execution history for a sufficiently long period of time, it is possible to mine an accurate set of probabilistic rules representing the dynamic component dependencies among a system?s software components. We showed that such a model can be used to make predictions of the component?s near future interactions, and that such predictions would be both precise and fast enough to be useful at runtime. We further showed that the predictions can be used to make provably correct adaptation decisions (i.e., not causing inconsistencies), while providing probabilistic guarantees of the expected disruption.</p> <p>The project had broader impacts on education through incorporation of the results from this project in course materials at both undergraduate and graduate levels. Several PhD students that participated in this project are now employed in software companies, providing an impetus for technology transfer. The project also promoted diversity in computing by supporting multiple female and underrepresent students. The techniques developed as part of this project enable engineers to improve the quality of software systems, which ultimately has a positive impact on society that is increasingly reliant on software.&nbsp;</p> <p>The results of this work were disseminated widely. Numerous publications resulted from this work at top academic conferences and journals. The PI and students working on this project also delivered numerous presentations of this work at conferences, universities, and companies. Finally, the tools and artifacts resulting from this project have been made available to the public to facilitate future research and transitioning of technology to industry.&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/09/2019<br>      Modified by: Sam&nbsp;Malek</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In this project, we developed novel techniques for improving quality of a software system (e.g., reliability, security) through its dynamic adaptation, i.e., changing a software system at runtime and as it executes, rather than the conventional method of restarting the system.   Specifically, the intellectual merit of this work was a novel approach for determining the appropriate time for adapting a system's software components in settings where an accurate model of their dependencies is not available. Appropriate time is when the adaptation of a given component results in neither inconsistency (i.e., eventual failure), nor unacceptable disruption. We showed that by collecting a software system's execution history for a sufficiently long period of time, it is possible to mine an accurate set of probabilistic rules representing the dynamic component dependencies among a system?s software components. We showed that such a model can be used to make predictions of the component?s near future interactions, and that such predictions would be both precise and fast enough to be useful at runtime. We further showed that the predictions can be used to make provably correct adaptation decisions (i.e., not causing inconsistencies), while providing probabilistic guarantees of the expected disruption.  The project had broader impacts on education through incorporation of the results from this project in course materials at both undergraduate and graduate levels. Several PhD students that participated in this project are now employed in software companies, providing an impetus for technology transfer. The project also promoted diversity in computing by supporting multiple female and underrepresent students. The techniques developed as part of this project enable engineers to improve the quality of software systems, which ultimately has a positive impact on society that is increasingly reliant on software.   The results of this work were disseminated widely. Numerous publications resulted from this work at top academic conferences and journals. The PI and students working on this project also delivered numerous presentations of this work at conferences, universities, and companies. Finally, the tools and artifacts resulting from this project have been made available to the public to facilitate future research and transitioning of technology to industry.              Last Modified: 05/09/2019       Submitted by: Sam Malek]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
