<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Large:Collaborative Research: Inferring Software Specifications from Open Source Repositories by Leveraging Data and Collective Community Expertise</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>06/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>750125.00</AwardTotalIntnAmount>
<AwardAmount>750125</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Today individuals, society, and the nation critically depend on software to manage critical infrastructures for power, banking and finance, air traffic control, telecommunication, transportation, national defense, and healthcare. Specifications are critical for communicating the intended behavior of software systems to software developers and users and to make it possible for automated tools to verify whether a given piece of software indeed behaves as intended. Safety critical applications have traditionally enjoyed the benefits of such specifications, but at a great cost.  Because producing useful, non-trivial specifications from scratch is too hard, time consuming, and requires expertise that is not broadly available, such specifications are largely unavailable. The lack of specifications for core libraries and widely used frameworks makes specifying applications that use them even more difficult. The absence of precise, comprehensible, and efficiently verifiable specifications is a major hurdle to developing software systems that are reliable, secure, and easy to maintain and reuse. &lt;br/&gt;&lt;br/&gt;This project brings together an interdisciplinary team of researchers with complementary expertise in formal methods, software engineering, machine learning and big data analytics to develop automated or semi-automated methods for inferring the specifications from code. The resulting methods and tools combine analytics over large open source code repositories to augment and improve upon specifications by program analysis-based specification inference through synergistic advances across both these areas. &lt;br/&gt;&lt;br/&gt;The broader impacts of the project include: transformative advances in specification inference and synthesis, with the potential to dramatically reduce, the cost of developing and maintaining high assurance software; enhanced interdisciplinary expertise at the intersection of formal methods software engineering, and big data analytics; Contributions to research-based training of a cadre of scientists and engineers with expertise in high assurance software.</AbstractNarration>
<MinAmdLetterDate>06/17/2015</MinAmdLetterDate>
<MaxAmdLetterDate>04/11/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1518897</AwardID>
<Investigator>
<FirstName>Hridesh</FirstName>
<LastName>Rajan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Hridesh Rajan</PI_FULL_NAME>
<EmailAddress>hridesh@iastate.edu</EmailAddress>
<PI_PHON>5152946168</PI_PHON>
<NSF_ID>000241383</NSF_ID>
<StartDate>06/17/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Tien</FirstName>
<LastName>Nguyen</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tien N Nguyen</PI_FULL_NAME>
<EmailAddress>nguyen.n.tien@gmail.com</EmailAddress>
<PI_PHON>9728833893</PI_PHON>
<NSF_ID>000340493</NSF_ID>
<StartDate>06/17/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005309844</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005309844</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Iowa State University]]></Name>
<CityName>Ames</CityName>
<StateCode>IA</StateCode>
<ZipCode>500112207</ZipCode>
<StreetAddress><![CDATA[1138 Pearson]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~750125</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project was to automatically create specifications, formal machine readable descriptions, of the behavior of methods found in standard software libraries. These libraries are utilized to build major software systems, but they are currently not properly specified that makes it much harder to use them and introduces software bugs. The lack of specifications for standard software libraries also makes it difficult to use automated tools for finding bugs in software. Writing specifications for these libraries is a monumental task for humans, and this project aimed to significantly ease it and make the costs much lower.</p> <div class="page" title="Page 3"> <div class="section"> <div class="layoutArea"> <div class="column"> <p>The team at ISU worked on using large amount of code available in software repositories to create specifications by learning from prevalent usage of the standard libraries. A prototype for inferring method postconditions was also another objective at UCF and ISU. This work was key to the project's goal of inferring behaviorial specifications for software modules, especially in commonly-used software libraries written in Java, we developed a tool, called Strongarm. The Strongarm tool was able to infer 75.7% of the speification for these libraries. A key component of this work was the development of an algorithm for simplifying speciications produced by the technique of strongest postconditions (which characterizes the state of the program after a statement is executed). The algorithm was able to produce specifications that were less than 1/4 page in length in 84.6%of the cases. The reduction in specification size also reduced thelength of the SMT proofs needed to verify the implementations usingthese specifications by 76.7% and the prover execution time by 26.7%.</p> <p>Another aspect of the work, carried out by collaborators at Penn State, was the development of graph-similarity-based machine learning approaches to specifications inference. The multi-view graph embedding methods, for node and link label prediction from graph data, have been shown to significantly outperform the state-of-the-art methods on several standard benchmark data sets used for evaluating recommender systems.</p> <p>The PIs have also organized a workshop on specification inference which occurred at the 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2018) in Florida, U.S. in November 2018. The goal of this workshop was to bring together researchers interested in specification inference along with researchers from other domains to try and inspire each other to find new, innovative approaches to automatically inferring specifications.</p> </div> </div> </div> </div><br> <p>            Last Modified: 09/20/2019<br>      Modified by: Hridesh&nbsp;Rajan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project was to automatically create specifications, formal machine readable descriptions, of the behavior of methods found in standard software libraries. These libraries are utilized to build major software systems, but they are currently not properly specified that makes it much harder to use them and introduces software bugs. The lack of specifications for standard software libraries also makes it difficult to use automated tools for finding bugs in software. Writing specifications for these libraries is a monumental task for humans, and this project aimed to significantly ease it and make the costs much lower.      The team at ISU worked on using large amount of code available in software repositories to create specifications by learning from prevalent usage of the standard libraries. A prototype for inferring method postconditions was also another objective at UCF and ISU. This work was key to the project's goal of inferring behaviorial specifications for software modules, especially in commonly-used software libraries written in Java, we developed a tool, called Strongarm. The Strongarm tool was able to infer 75.7% of the speification for these libraries. A key component of this work was the development of an algorithm for simplifying speciications produced by the technique of strongest postconditions (which characterizes the state of the program after a statement is executed). The algorithm was able to produce specifications that were less than 1/4 page in length in 84.6%of the cases. The reduction in specification size also reduced thelength of the SMT proofs needed to verify the implementations usingthese specifications by 76.7% and the prover execution time by 26.7%.  Another aspect of the work, carried out by collaborators at Penn State, was the development of graph-similarity-based machine learning approaches to specifications inference. The multi-view graph embedding methods, for node and link label prediction from graph data, have been shown to significantly outperform the state-of-the-art methods on several standard benchmark data sets used for evaluating recommender systems.  The PIs have also organized a workshop on specification inference which occurred at the 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2018) in Florida, U.S. in November 2018. The goal of this workshop was to bring together researchers interested in specification inference along with researchers from other domains to try and inspire each other to find new, innovative approaches to automatically inferring specifications.           Last Modified: 09/20/2019       Submitted by: Hridesh Rajan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
