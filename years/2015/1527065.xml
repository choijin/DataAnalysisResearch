<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Closing the Productivity/Performance Gap with Just-in-Time Configuration of Meta-Trace Accelerators</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2015</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Small: Closing the Productivity/Performance Gap with Just-in-Time Configuration of Meta-Trace Accelerators&lt;br/&gt;&lt;br/&gt;Dynamic programming languages are growing in popularity across the computing spectrum from smartphones, to servers, to supercomputers. Dynamic programming languages such as Python, JavaScript, and MATLAB are all now among the top-ten most popular programming languages. These "productivity-level" languages make it easy to quickly develop, verify, and maintain applications, but unfortunately, the performance of such applications is usually quite low. This project is exploring a new hardware/software co-design approach for closing this productivity-performance gap. The intellectual merits of this project are the potential for fundamental advances in new hardware accelerators specifically designed for dynamic programming languages, and new software techniques to let applications take advantage of these accelerators. The project's broader significance and importance are rooted in the popularity of dynamic programming languages, and the potential to significantly improve the performance of these highly productive languages.&lt;br/&gt;&lt;br/&gt;There has been great interest in software and hardware techniques to close the "productivity-performance gap". On the software side, high-performance interpreters are increasingly leveraging just-in-time (JIT) method- or trace-based compilation techniques. On the hardware-side, there is a long history of directly supporting high-level languages in hardware. Unfortunately, direct execution of high-level languages precludes the kinds of aggressive optimizations possible with JIT compilation and can prevent efficient execution of alternative high-level languages. A key insight is that future hardware acceleration for dynamic programming languages should not replace JIT compilation, but should instead elegantly complement JIT compilation for a variety of different dynamic programming languages. This project is investigating a new approach using just-in-time configuration of meta-trace accelerators. The project is using a vertically integrated research methodology to explore the following four research thrusts: (1) developing and optimizing a new Scheme interpreter (called RLisPy) to create a state-of-the-art software baseline; (2) exploring various novel hardware meta-trace accelerators for RLisPy; (3) exploring JIT configuration to accelerate RLisPy using these meta-trace accelerators; and (4) applying these techniques to the more popular Python dynamic programming language.</AbstractNarration>
<MinAmdLetterDate>07/20/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/20/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1527065</AwardID>
<Investigator>
<FirstName>Christopher</FirstName>
<LastName>Batten</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christopher Batten</PI_FULL_NAME>
<EmailAddress>cbatten@cornell.edu</EmailAddress>
<PI_PHON>6072552672</PI_PHON>
<NSF_ID>000539036</NSF_ID>
<StartDate>07/20/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cornell University</Name>
<CityName>Ithaca</CityName>
<ZipCode>148502820</ZipCode>
<PhoneNumber>6072555014</PhoneNumber>
<StreetAddress>373 Pine Tree Road</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY23</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>872612445</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CORNELL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002254837</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Cornell University]]></Name>
<CityName>Ithaca</CityName>
<StateCode>NY</StateCode>
<ZipCode>148533801</ZipCode>
<StreetAddress><![CDATA[323 Rhodes Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY23</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Dynamic programming languages are growing in popularity across the computing spectrum from smartphones, to servers, to supercomputers. Dynamic programming languages such as Python, JavaScript, and MATLAB are all now among the top-ten most popular programming languages. These "productivity-level" languages make it easy to quickly develop, verify, and maintain applications, but unfortunately, the performance of such applications is usually quite low. There has been great interest in software and hardware techniques to close the "productivity-performance gap". On the software side, high-performance interpreters are increasingly leveraging just-in-time (JIT) method- or trace-based compilation techniques. On the hardware-side, there is a long history of directly supporting high-level languages in hardware. Unfortunately, direct execution of high-level languages precludes the kinds of aggressive optimizations possible with JIT compilation and can prevent efficient execution of alternative high-level languages. A key insight is that future hardware acceleration for dynamic programming languages should not replace JIT compilation, but should instead elegantly complement JIT compilation for a variety of different dynamic programming languages.</p> <p><br />This project explored new hardware/software co-design approaches for closing this productivity-performance gap within the context of JIT compilation. The number and complexity of abstraction layers within a JIT compilation framework is one of the key obstacles in pursuing research in this area. To address this challenge, the project developed a new cross-layer workload characterization methodology to understand the subtle interaction of these various layers. The project then leveraged this methodology to explore two new techniques for accelerating general-purpose Python programs and new techniques for accelerating domain-specific Python programs in three different domains including hardware simulation and machine learning. Taken holistically, this project has made important fundamental advances in accelerating dynamic programming languages.</p> <p><br />As part of this project's educational outreach plan, the PI integrated domain-specific JIT compilation optimizations for hardware simulation into a recently developed course on chip design. This course targets advanced undergraduates and first-year graduate students and teaches students the principles and practices involved in transforming hardware descriptions into actual chip layout using state-of-the art design tools. As part of the laboratory assignments and design projects, student use an open-source Python-based hardware modeling framework that includes the JIT compilation optimizations developed in this research project. This experience provided valuable real-world usage feedback and has enabled the PI to incorporate research ideas into broadly used open-source tools. The PI also organized a dynamic and engaging 90-minute hands-on activity for 20 freshmen to help increase participation of diversity students in computer engineering. Students incrementally developed a simple Internet-of-Things (IoT) system capable of monitoring an input sensor and triggering a remote output actuator through the cloud.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/02/2021<br>      Modified by: Christopher&nbsp;Batten</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Dynamic programming languages are growing in popularity across the computing spectrum from smartphones, to servers, to supercomputers. Dynamic programming languages such as Python, JavaScript, and MATLAB are all now among the top-ten most popular programming languages. These "productivity-level" languages make it easy to quickly develop, verify, and maintain applications, but unfortunately, the performance of such applications is usually quite low. There has been great interest in software and hardware techniques to close the "productivity-performance gap". On the software side, high-performance interpreters are increasingly leveraging just-in-time (JIT) method- or trace-based compilation techniques. On the hardware-side, there is a long history of directly supporting high-level languages in hardware. Unfortunately, direct execution of high-level languages precludes the kinds of aggressive optimizations possible with JIT compilation and can prevent efficient execution of alternative high-level languages. A key insight is that future hardware acceleration for dynamic programming languages should not replace JIT compilation, but should instead elegantly complement JIT compilation for a variety of different dynamic programming languages.   This project explored new hardware/software co-design approaches for closing this productivity-performance gap within the context of JIT compilation. The number and complexity of abstraction layers within a JIT compilation framework is one of the key obstacles in pursuing research in this area. To address this challenge, the project developed a new cross-layer workload characterization methodology to understand the subtle interaction of these various layers. The project then leveraged this methodology to explore two new techniques for accelerating general-purpose Python programs and new techniques for accelerating domain-specific Python programs in three different domains including hardware simulation and machine learning. Taken holistically, this project has made important fundamental advances in accelerating dynamic programming languages.   As part of this project's educational outreach plan, the PI integrated domain-specific JIT compilation optimizations for hardware simulation into a recently developed course on chip design. This course targets advanced undergraduates and first-year graduate students and teaches students the principles and practices involved in transforming hardware descriptions into actual chip layout using state-of-the art design tools. As part of the laboratory assignments and design projects, student use an open-source Python-based hardware modeling framework that includes the JIT compilation optimizations developed in this research project. This experience provided valuable real-world usage feedback and has enabled the PI to incorporate research ideas into broadly used open-source tools. The PI also organized a dynamic and engaging 90-minute hands-on activity for 20 freshmen to help increase participation of diversity students in computer engineering. Students incrementally developed a simple Internet-of-Things (IoT) system capable of monitoring an input sensor and triggering a remote output actuator through the cloud.                Last Modified: 05/02/2021       Submitted by: Christopher Batten]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
