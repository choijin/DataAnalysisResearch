<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CRII: SHF: General, Precise and Accurate Fault Localization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/15/2016</AwardEffectiveDate>
<AwardExpirationDate>02/28/2019</AwardExpirationDate>
<AwardTotalIntnAmount>175000.00</AwardTotalIntnAmount>
<AwardAmount>175000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Locating faults is one of the (if not the) most expensive tasks in software&lt;br/&gt;development. Given the complexity of software systems, identifying a fault is&lt;br/&gt;like searching for a needle in a haystack. This project explores a general&lt;br/&gt;approach that will aid programmers in locating faults in software systems. The&lt;br/&gt;goal is to develop a methodology for pinpointing at the exact fault locations&lt;br/&gt;in a program, based on evidences collected from program executions. This&lt;br/&gt;project can greatly reduce software development cost. More broadly, this&lt;br/&gt;project can advance the scientific knowledge of fault localization in general.&lt;br/&gt;Advances that aid programmer in debugging will also make computer science&lt;br/&gt;education more accessible to the public.&lt;br/&gt;&lt;br/&gt;The project explores novel techniques for general, precise and accurate fault&lt;br/&gt;localization. The new method is applicable to various representations of&lt;br/&gt;program execution with different granularities, using a novel execution trace&lt;br/&gt;model. Based on probabilistic inference, it accurately pinpoints at the most&lt;br/&gt;likely fault locations in a program, rather than reporting every location that&lt;br/&gt;might contribute to a failure, or reporting a code fragment that is highly&lt;br/&gt;correlated with failures. The practicality of this approach will be&lt;br/&gt;demonstrated on complex real-world systems.</AbstractNarration>
<MinAmdLetterDate>03/18/2016</MinAmdLetterDate>
<MaxAmdLetterDate>03/18/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1566411</AwardID>
<Investigator>
<FirstName>Danfeng</FirstName>
<LastName>Zhang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Danfeng Zhang</PI_FULL_NAME>
<EmailAddress>zhang@cse.psu.edu</EmailAddress>
<PI_PHON>8148651372</PI_PHON>
<NSF_ID>000702947</NSF_ID>
<StartDate>03/18/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Pennsylvania State Univ University Park</Name>
<CityName>University Park</CityName>
<ZipCode>168021503</ZipCode>
<PhoneNumber>8148651372</PhoneNumber>
<StreetAddress>201 Old Main</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003403953</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PENNSYLVANIA STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003403953</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Pennsylvania State Univ University Park]]></Name>
<CityName>University Park</CityName>
<StateCode>PA</StateCode>
<ZipCode>168021400</ZipCode>
<StreetAddress><![CDATA[338H IST Building]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>026Y</Code>
<Text>CRII CISE Research Initiation</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>8228</Code>
<Text>CISE Resrch Initiatn Initiatve</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~175000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Locating faults is one of the (if not the) most expensive tasks in software&nbsp;</span><span>development. Given the complexity of software systems, identifying a fault is&nbsp;</span><span>like searching for a needle in a haystack. This project explores a general&nbsp;</span><span>approach that will aid programmers in locating faults in software systems. </span></p> <p>To achieve the goal, we<span>&nbsp;proposed and implemented a sophisticated static program dependence analysis that, before program execution,&nbsp;gathers information that are useful for&nbsp;fault localization. Moreover, we&nbsp;</span>have&nbsp;developed and implemented a novel Bayesian model to infer the most likely faults using static and dynamic program information. The model allows localizing software faults at various granularities (e.g., program statements, basic blocks, program functions).&nbsp;The model takes a holistic view of all failing and passing program execution&nbsp;traces, and abstracts away a few important probabilistic parameters, such as the prior probability of each statement being faulty, the likelihood that a passing test executes a fault, as well as the ratio of independent program executions among all tests.&nbsp;</p> <p><span><span>We found that the general Bayesian model motivates new and useful heuristics in fault localization. For instance, we found that using the number of statements being executed and an estimation of independent tests considerably improves the effectiveness of fault localization on programs with real faults. Evaluation on real-world faults suggests that on average, the&nbsp;<span>Bayesian model is more accurate in fault localization</span>, compared with existing techniques.&nbsp;</span></span></p> <p>Detailed descriptions of the algorithms, models and evaluation results are summarized in publications.&nbsp;<span>Moreover, we have open-sourced our prototype of the fault localization framework on <span><span>Github</span></span>.</span></p> <p><span>The outcomes of the project has the potential of reducing software development cost.&nbsp;Advances that aid programmer in debugging will also make computer science&nbsp;education more accessible to the public.&nbsp;</span>More broadly, the findings of this project can advance the scientific knowledge of fault localization in general.</p> <p>&nbsp;</p><br> <p>            Last Modified: 04/07/2019<br>      Modified by: Danfeng&nbsp;Zhang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Locating faults is one of the (if not the) most expensive tasks in software development. Given the complexity of software systems, identifying a fault is like searching for a needle in a haystack. This project explores a general approach that will aid programmers in locating faults in software systems.   To achieve the goal, we proposed and implemented a sophisticated static program dependence analysis that, before program execution, gathers information that are useful for fault localization. Moreover, we have developed and implemented a novel Bayesian model to infer the most likely faults using static and dynamic program information. The model allows localizing software faults at various granularities (e.g., program statements, basic blocks, program functions). The model takes a holistic view of all failing and passing program execution traces, and abstracts away a few important probabilistic parameters, such as the prior probability of each statement being faulty, the likelihood that a passing test executes a fault, as well as the ratio of independent program executions among all tests.   We found that the general Bayesian model motivates new and useful heuristics in fault localization. For instance, we found that using the number of statements being executed and an estimation of independent tests considerably improves the effectiveness of fault localization on programs with real faults. Evaluation on real-world faults suggests that on average, the Bayesian model is more accurate in fault localization, compared with existing techniques.   Detailed descriptions of the algorithms, models and evaluation results are summarized in publications. Moreover, we have open-sourced our prototype of the fault localization framework on Github.  The outcomes of the project has the potential of reducing software development cost. Advances that aid programmer in debugging will also make computer science education more accessible to the public. More broadly, the findings of this project can advance the scientific knowledge of fault localization in general.          Last Modified: 04/07/2019       Submitted by: Danfeng Zhang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
