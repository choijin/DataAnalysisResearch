<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSE: Fast Dynamic Load Balancing Tools for Extreme Scale Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2015</AwardEffectiveDate>
<AwardExpirationDate>09/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Seung-Jong Park</SignBlockName>
<PO_EMAI>spark@nsf.gov</PO_EMAI>
<PO_PHON>7032924383</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Massively parallel computing combined with scalable simulation workflows that can reliably model systems of interest are central to the continued quest of scientists, engineers, and other practitioners to address advances in scientific discovery, engineering design, and medical treatment. However, to meet their potential, these methods must be able to operate efficiently and scale on massively parallel computers executing millions of processes. Reaching the goal of millions of parallel processes requires new methods in which the computational workload is extremely well balanced and interprocessor communications overheads are minimized. Attaining such parallel performance is greatly complicated in realistic simulation workflows where the models and their discrete computer representation must evolve to ensure simulation reliability, or to account for changing input streams. To address the need to obtain workload balance with controlled communications, various algorithms and associated software, referred to as load balancing procedures, have been, and continue to be, developed. To be effective in the execution of simulation workflows in which the workload evolves, the load balancing procedures must be applied dynamically at multiple points in the simulation. Current load balancing techniques demonstrate two deficiencies when applied as dynamic load balancing procedures at very large numbers of compute cores (e.g., greater than 100,000 cores): They become a major fraction of the total parallel computation (in some cases never finishing within an allocation) and they do not maintain good load balance for simulation steps that must balance based on multiple criteria.  Building on initial efforts to improve dynamic load balancing methods for adaptive unstructured mesh applications, the goal of the proposed research is to develop fast multicriteria dynamic load balancing methods that are capable of quickly producing well balanced computations, with well controlled communications, for a wide variety of applications. &lt;br/&gt;&lt;br/&gt;An important characteristic of the dynamic load balancing procedures to be developed is generalizing the graph to account for multiple types of computational entities and interactions. The initial ideas for supporting multiple entity types came from consideration balancing finite element calculations that must consider multiple orders of mesh entities. These concepts will be refined and generalized to support multiple applications areas. An additional development will be fast hybrid dynamic load balancing methods that are combinations of "geometric", standard graph, and multicriteria graph methods in which the individual methods can be executed globally of at a more local level (such as at the node level). The dynamic load balancing method to be developed will be demonstrated on three applications in which the workload, and its distribution, is changing as the simulation proceeds. The applications will be adaptive mesh simulations, adaptive multiscale modeling, and massive scale free graphs. These applications will be carried out on available massively parallel computers where examples on &gt;1 million cores will be demonstrated. A goal of the dynamic load balancing methods to be developed will be to attain scalability, and do so with controlled data movement such that the wall clock time and energy used is substantially less than that required for an equivalent accuracy non-adaptive calculation.&lt;br/&gt;&lt;br/&gt;The software produced by this project will be made available as open source components. These developments coupled with efforts to support users in applying them in the development of new simulation tools will impact many research communities. Based on past and present efforts, the PIs fully expect that technologies developed in this project will also be integrated into future industrial software systems.</AbstractNarration>
<MinAmdLetterDate>07/08/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/08/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1533581</AwardID>
<Investigator>
<FirstName>Mark</FirstName>
<LastName>Shephard</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mark S Shephard</PI_FULL_NAME>
<EmailAddress>shephard@rpi.edu</EmailAddress>
<PI_PHON>5182766795</PI_PHON>
<NSF_ID>000157587</NSF_ID>
<StartDate>07/08/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Cameron</FirstName>
<LastName>Smith</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Cameron Smith</PI_FULL_NAME>
<EmailAddress>smithc11@rpi.edu</EmailAddress>
<PI_PHON>5182763401</PI_PHON>
<NSF_ID>000668829</NSF_ID>
<StartDate>07/08/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Rensselaer Polytechnic Institute</Name>
<CityName>Troy</CityName>
<ZipCode>121803522</ZipCode>
<PhoneNumber>5182766000</PhoneNumber>
<StreetAddress>110 8TH ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY20</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002430742</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RENSSELAER POLYTECHNIC INSTITUTE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002430742</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Rensselaer Polytechnic Institute]]></Name>
<CityName>Troy</CityName>
<StateCode>NY</StateCode>
<ZipCode>121803590</ZipCode>
<StreetAddress><![CDATA[110 8th street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY20</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8005</Code>
<Text>Scientific Software Elements</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project developed tools that for use in massively parallel simulation workflows to improve scalability through multi-criteria dynamic load balancing, support in-memory coupling of parallel simulation codes and/or support the development of two scale particle-in-cell (PIC) simulation codes that employ unstructured meshes. Many massively parallel simulations must account for evolving systems which cause the calculations to become unbalanced as the simulation steps proceed. This leads to a loss of scalability. The ParMA and EnGPar dynamic load balancing tools have been developed to support methods to regain load balance while considering multiple criteria. ParMA and EnGPar have been integrated into several simulation codes and shown to be effective in regaining load balance and parallel computation scalability. As massively parallel computers have evolved, the relative ratio of cost of data transfer to computation when programs are coupled via files saved on secondary storage has dramatically increased. In addition, since the file system is a shared resource, this cost is highly from run to run and cannot be accurately predicted. By developing techniques to couple codes through in-memory data exchange methods, the cost of execution of code coupling is dramatically reduced. The in-memory coupling methods developed have been used to integrate the MeshAdapt adaptive mesh control procedures with several unstructured mesh analysis codes to support adaptive simulation work flows, and used to couple an edge plasma PIC code with a continuum and PIC core plasma code. The PUMIpic unstructured mesh infrastructure has been developed to the point that it is being integrated into two large scale PIC codes so they can now support much larger meshes that are distributed. &nbsp;</p><br> <p>            Last Modified: 11/14/2020<br>      Modified by: Mark&nbsp;S&nbsp;Shephard</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project developed tools that for use in massively parallel simulation workflows to improve scalability through multi-criteria dynamic load balancing, support in-memory coupling of parallel simulation codes and/or support the development of two scale particle-in-cell (PIC) simulation codes that employ unstructured meshes. Many massively parallel simulations must account for evolving systems which cause the calculations to become unbalanced as the simulation steps proceed. This leads to a loss of scalability. The ParMA and EnGPar dynamic load balancing tools have been developed to support methods to regain load balance while considering multiple criteria. ParMA and EnGPar have been integrated into several simulation codes and shown to be effective in regaining load balance and parallel computation scalability. As massively parallel computers have evolved, the relative ratio of cost of data transfer to computation when programs are coupled via files saved on secondary storage has dramatically increased. In addition, since the file system is a shared resource, this cost is highly from run to run and cannot be accurately predicted. By developing techniques to couple codes through in-memory data exchange methods, the cost of execution of code coupling is dramatically reduced. The in-memory coupling methods developed have been used to integrate the MeshAdapt adaptive mesh control procedures with several unstructured mesh analysis codes to support adaptive simulation work flows, and used to couple an edge plasma PIC code with a continuum and PIC core plasma code. The PUMIpic unstructured mesh infrastructure has been developed to the point that it is being integrated into two large scale PIC codes so they can now support much larger meshes that are distributed.         Last Modified: 11/14/2020       Submitted by: Mark S Shephard]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
