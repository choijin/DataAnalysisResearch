<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Medium: Supporting Real-Time Data Flows on Heterogeneous Multicore Platforms</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2016</AwardEffectiveDate>
<AwardExpirationDate>05/31/2021</AwardExpirationDate>
<AwardTotalIntnAmount>948422.00</AwardTotalIntnAmount>
<AwardAmount>1131580</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Matt Mutka</SignBlockName>
<PO_EMAI>mmutka@nsf.gov</PO_EMAI>
<PO_PHON>7032927344</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project addresses the challenges of implementing software upon heterogeneous multicore platforms, particularly in application domains where verified timing correctness is required.  The multicore revolution is currently undergoing a wave of innovation in the form of heterogeneous processing elements -- processing elements that may differ with respect to functionality or processing speed.   The presence of such heterogeneity means that choices must be made when allocating hardware resources to software components. The need to resolve such choices adds considerable complexity to resource allocation, and inhibits the adoption of such platforms by the embedded computing industry despite significant potential benefits in terms of balancing performance and energy usage requirements.&lt;br/&gt;&lt;br/&gt;This project will develop methodologies for implementing time-critical software upon heterogeneous platforms by systematically examining different models of heterogeneity, devising efficient real-time scheduling algorithms for each such model, and obtaining appropriate analysis techniques for each model that enable real-time constraints to be verified.   Workloads will be modeled as data-flows that enable the representation of varying degrees of parallelism, with various possible combinations of constraints on preemptivity, inter-processor migration, et cetera, considered.&lt;br/&gt;&lt;br/&gt;This project both addresses fundamental scientific challenges in resource allocation theory, and seeks to develop appropriate software tools and methodologies to facilitate the adoption of results and insights that are obtained.   Such results, tools, and methodologies are expected to accelerate the adoption of advanced heterogenous multicore platforms by embedded systems industries.</AbstractNarration>
<MinAmdLetterDate>05/31/2016</MinAmdLetterDate>
<MaxAmdLetterDate>05/17/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1563845</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Anderson</LastName>
<PI_MID_INIT>H</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James H Anderson</PI_FULL_NAME>
<EmailAddress>anderson@cs.unc.edu</EmailAddress>
<PI_PHON>9195906057</PI_PHON>
<NSF_ID>000481767</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sanjoy</FirstName>
<LastName>Baruah</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sanjoy K Baruah</PI_FULL_NAME>
<EmailAddress>Baruah@wustl.edu</EmailAddress>
<PI_PHON>3149357546</PI_PHON>
<NSF_ID>000762080</NSF_ID>
<StartDate>05/31/2016</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of North Carolina at Chapel Hill</Name>
<CityName>CHAPEL HILL</CityName>
<ZipCode>275991350</ZipCode>
<PhoneNumber>9199663411</PhoneNumber>
<StreetAddress>104 AIRPORT DR STE 2200</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>608195277</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of North Carolina at Chapel Hill]]></Name>
<CityName>Chapel Hill</CityName>
<StateCode>NC</StateCode>
<ZipCode>275993175</ZipCode>
<StreetAddress><![CDATA[Department of Computer Science]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~625472</FUND_OBLG>
<FUND_OBLG>2017~247842</FUND_OBLG>
<FUND_OBLG>2019~258266</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="p1"><span class="s1">One of the major functions of a computer's operating system (OS) is scheduling: at any point in time, the OS must determine which program(s) should be executing.&nbsp;&nbsp;This project was directed at a particular ca</span>tegory of OS schedulers, namely, those used in real-time applications in which programs have deadline constraints.&nbsp; A newsworthy example of such an application today is an automobile equipped with cameras that can detect obstacles.&nbsp; Obstacle detection requires the execution of computer-vision computations that process camera feeds.&nbsp; When an obstacle is present, these computations must complete execution by a deadline that is sufficient for the driver (or the car itself) to take appropriate action in time.</p> <p class="p1"><span class="s1">Over the past few decades, the problem of designing effective real-time schedulers has become more challenging for two reasons.&nbsp;&nbsp;First, the software systems to schedule have become more complicated.&nbsp;&nbsp;For example</span>, a computer-vision computation might actually consist of multiple programs that must execute in a certain sequence in processing a frame of video.&nbsp; Second, the hardware upon which this software must execute has also become more complicated.&nbsp; For many decades, the common-case hardware platform used in consumer products consisted of a single processor.&nbsp; Then, around 15 years ago, chip makers shifted to multicore designs that consist of multiple processors.&nbsp; The advent of multicore technology presented challenges for scheduling because now multiple programs could be executed at the same time, and the choice of which programs to execute together can be complex.&nbsp; Even while this evolution was underway, hardware manufacturers began producing multicore designs that are heterogeneous; these designs have multiple processors that have different characteristics, e.g., different processors may execute at different speeds, or may be capable of accelerating the execution of certain computations (such as ones arising in obstacle detection) so that they complete faster.&nbsp; Heterogeneity adds further complexity to scheduling because now, in addition to determining&nbsp;<em>which</em>&nbsp;programs should execute at the same time, the scheduler must determine&nbsp;<em>where</em>&nbsp;(i.e., on which type of processor) they should execute.</p> <p class="p1"><span class="s1">With this background in place, the specific focus of this project can be stated:&nbsp;<em>this project was directed at the design and analysis of real-time schedulers for complex multi-program software systems, such as t</em></span><em>hat described above for object detection, that must execute on a heterogeneous multicore computer.&nbsp;&nbsp;</em>The analysis of interest pertains to techniques that can be applied to determine whether a workload meets its deadline requirements when scheduled using some particular scheduler.&nbsp; For example, in an obstacle-detection application, this analysis could be applied to ensure that obstacles are detected in time<span class="s1">.</span>&nbsp;</p> <p class="p1"><span class="s1">The main intellectual contributions of this project were twofold.&nbsp;&nbsp;First, several new analysis results were obtained involving the use of a real-time scheduler called SCHED_DEADLINE that is provided in th</span>e Linux OS.&nbsp; Several of these results solved problems that had been open for many years.&nbsp; Second, new analytical results were produced that enable the deadline requirements of complex software systems like those arising in obstacle detection to be validated.&nbsp; In this work, particular attention was paid to devising best practices for using graphics processing units (GPUs), which are a type of processing element commonly used to accelerate mathematical computations.</p> <p class="p1"><span class="s1">In terms of broader impacts, the investigators presented talks on this work at numerous institutions, conferences, workshops, etc.&nbsp;&nbsp;Additionally, the results of this project formed the basis of the Ph.D.&nbsp;</span>dissertations of three graduate students who have already received their degrees, and two others who will graduate soon.&nbsp; Five undergraduate students were also supported.&nbsp; Several of these undergraduate students co-authored published papers, and one produced an undergraduate honors theses related to this project.&nbsp; Some of the results from the project were also applied in a small-scale autonomous car that was exhibited at various open-house demo events at UNC.</p> <p class="p1">&nbsp;</p><br> <p>            Last Modified: 07/08/2021<br>      Modified by: James&nbsp;H&nbsp;Anderson</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[One of the major functions of a computer's operating system (OS) is scheduling: at any point in time, the OS must determine which program(s) should be executing.  This project was directed at a particular category of OS schedulers, namely, those used in real-time applications in which programs have deadline constraints.  A newsworthy example of such an application today is an automobile equipped with cameras that can detect obstacles.  Obstacle detection requires the execution of computer-vision computations that process camera feeds.  When an obstacle is present, these computations must complete execution by a deadline that is sufficient for the driver (or the car itself) to take appropriate action in time. Over the past few decades, the problem of designing effective real-time schedulers has become more challenging for two reasons.  First, the software systems to schedule have become more complicated.  For example, a computer-vision computation might actually consist of multiple programs that must execute in a certain sequence in processing a frame of video.  Second, the hardware upon which this software must execute has also become more complicated.  For many decades, the common-case hardware platform used in consumer products consisted of a single processor.  Then, around 15 years ago, chip makers shifted to multicore designs that consist of multiple processors.  The advent of multicore technology presented challenges for scheduling because now multiple programs could be executed at the same time, and the choice of which programs to execute together can be complex.  Even while this evolution was underway, hardware manufacturers began producing multicore designs that are heterogeneous; these designs have multiple processors that have different characteristics, e.g., different processors may execute at different speeds, or may be capable of accelerating the execution of certain computations (such as ones arising in obstacle detection) so that they complete faster.  Heterogeneity adds further complexity to scheduling because now, in addition to determining which programs should execute at the same time, the scheduler must determine where (i.e., on which type of processor) they should execute. With this background in place, the specific focus of this project can be stated: this project was directed at the design and analysis of real-time schedulers for complex multi-program software systems, such as that described above for object detection, that must execute on a heterogeneous multicore computer.  The analysis of interest pertains to techniques that can be applied to determine whether a workload meets its deadline requirements when scheduled using some particular scheduler.  For example, in an obstacle-detection application, this analysis could be applied to ensure that obstacles are detected in time.  The main intellectual contributions of this project were twofold.  First, several new analysis results were obtained involving the use of a real-time scheduler called SCHED_DEADLINE that is provided in the Linux OS.  Several of these results solved problems that had been open for many years.  Second, new analytical results were produced that enable the deadline requirements of complex software systems like those arising in obstacle detection to be validated.  In this work, particular attention was paid to devising best practices for using graphics processing units (GPUs), which are a type of processing element commonly used to accelerate mathematical computations. In terms of broader impacts, the investigators presented talks on this work at numerous institutions, conferences, workshops, etc.  Additionally, the results of this project formed the basis of the Ph.D. dissertations of three graduate students who have already received their degrees, and two others who will graduate soon.  Five undergraduate students were also supported.  Several of these undergraduate students co-authored published papers, and one produced an undergraduate honors theses related to this project.  Some of the results from the project were also applied in a small-scale autonomous car that was exhibited at various open-house demo events at UNC.         Last Modified: 07/08/2021       Submitted by: James H Anderson]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
