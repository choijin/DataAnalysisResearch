<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AitF: EXPL: Collaborative Research: Approximate Discrete Programming for Real-Time Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>216000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Discrete programming (DP) deals with optimization problems involving variables that range over a discrete (e.g., integer-valued) solution space. DP is an important tool in a variety of practical applications including digital communications, operations research, power grid optimization, and computer vision. While discrete programs are typically solved offline by sophisticated software using powerful computers, DP has recently emerged as an important tool in applications requiring real-time processing in embedded systems with stringent area, cost, and power constraints. Since existing DP solvers entail prohibitive complexity and power consumption when implemented on existing embedded hardware, novel algorithms and hardware architectures are necessary to unlock the potential of DP in real-time applications. This project fuses optimization theory, numerical methods, and circuit design to develop fast algorithms and suitable hardware architectures for real-time DP in embedded systems. Besides a thorough theoretical analysis of the proposed methods, the project includes extensive software and hardware benchmarking to reveal the efficacy of real-time DP in practice. To bridge the ever-growing gap between recent advances in numerical optimization and hardware design, the project also includes the development of undergraduate and graduate courses that build upon the vertically-integrated research approach of this project, in addition to offering summer research internships (REUs) to introduce young scientists to the field of discrete programming.&lt;br/&gt;&lt;br/&gt;The project develops a set of computationally efficient and hardware-aware algorithms and corresponding dedicated very-large scale integration (VLSI) architectures that enable DP for real-time embedded systems.  The proposed DP algorithms rely on a variety of algorithmic transformations, ranging from semidefinite and infinity-norm-based relaxations to exact variable-splitting methods and non-convex approximations. These disparate approaches offer a wide range of tradeoffs between solution quality and hardware implementation complexity. The project studies these fundamental tradeoffs, as well as the effects of finite-precision arithmetic in VLSI, from both a theoretical and practical perspective. To carry out this investigation, three dedicated VLSI architectures will be developed that exploit the inherent parallelism of the proposed algorithms. These architectures target (i) data detection in multi-antenna (MIMO) wireless systems that is the key bottleneck in next-generation communication systems, (ii) signal recovery problems in hyperspectral imaging, and (iii) phase retrieval problems from x-ray crystallography. By investigating the domain-specific performance and complexity of various numerical solvers in a variety of conditions and hardware configurations, the project will reveal the efficacy and limits of DP for a broad range of real-time applications beyond the ones studied in this project.</AbstractNarration>
<MinAmdLetterDate>07/30/2015</MinAmdLetterDate>
<MaxAmdLetterDate>04/20/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1535902</AwardID>
<Investigator>
<FirstName>Thomas</FirstName>
<LastName>Goldstein</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Thomas A Goldstein</PI_FULL_NAME>
<EmailAddress>tomg@cs.umd.edu</EmailAddress>
<PI_PHON>3149225841</PI_PHON>
<NSF_ID>000546658</NSF_ID>
<StartDate>07/30/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Maryland, College Park</Name>
<CityName>College Park</CityName>
<ZipCode>207425141</ZipCode>
<PhoneNumber>3014056269</PhoneNumber>
<StreetAddress>3112 LEE BLDG 7809 Regents Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<StateCode>MD</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MD05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>790934285</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MARYLAND, COLLEGE PARK</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003256088</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Maryland, College Park]]></Name>
<CityName>College Park</CityName>
<StateCode>MD</StateCode>
<ZipCode>207425141</ZipCode>
<StreetAddress><![CDATA[3112 LEE BLDG 7809 Regents Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MD05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7239</Code>
<Text>Algorithms in the Field</Text>
</ProgramElement>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>013Z</Code>
<Text>AitF EXPL Projects</Text>
</ProgramReference>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~200000</FUND_OBLG>
<FUND_OBLG>2017~8000</FUND_OBLG>
<FUND_OBLG>2018~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-e2b18790-7fff-1ed1-c287-e3ea5c758b85"> <p dir="ltr"><span>The goals of this project were the development and analysis of novel algorithms for discrete programming in real-time systems, as well as the design of corresponding hardware accelerators. The project focuses on exact and approximate methods for semidefinite programming (SDP). The target applications were in massive multi-user (MU) multiple-input multiple-output (MIMO) wireless systems, machine learning, as well as in imaging and computer vision. More specifically, the project investigates the following aspects: (i) Approximate semidefinite relaxation (SDR): We develop novel non-convex solvers that find approximate solutions to semidefinite programs at significantly lower complexity and memory requirements compared to that of exact methods. (ii) Hardware designs: For the above algorithms and applications, we develop prototype designs in field-programmable gate arrays (FPGAs) or application-specific integrated circuits (ASICs). (iii) Assessment: To assess the efficacy of our algorithms, we perform extensive complexity, performance, and memory requirement comparisons on algorithm and circuit level. For our hardware solutions, we use state-of-the-art CAD tools to extract estimates for the throughput, area, and power consumption. (iv) Algorithmic&nbsp; theory: We analyze all our algorithms from a theoretical perspective in terms of convergence rates, solution quality/accuracy, and memory requirements.</span></p> <p dir="ltr"><span>&nbsp;&nbsp;During the development of this project we discovered interesting relationships between non-convex programming for communications and non-convex and discrete problems that arise in the field of machine learning and neural nets.&nbsp; For this reason, we ended up pursuing an extended goal: (v) Analyse and evaluate non-convex programming methods for neural networks.&nbsp;</span></p> <br /> <p dir="ltr"><span>This project had a number of positive outcomes in each of the areas of focus.&nbsp; (i)  We designed new convex relaxation methods for phase retrieval and other non-convex problems in signal processing.&nbsp; The new methods can find global minimums of non-convex problems.  While previous methods with this property exist, ours is the first method that is computationally tractable for large problems.&nbsp; (ii)  We adapted our work on non-convex relaxations to solve problems in wireless encoding and decoding.  Our proposed methods, including BCR and FAME, are the first efficient methods for wireless communications that are based on semidefinite programming. (ii) We implemented the proposed methods in software simulations and in VLSI.&nbsp; The results methods beat state of the art methods in terms of both throughput and power consumption.  (iv)  We prove rigorous results that guarantee the performance of the proposed methods.  This includes theorems showing that PhaseMax recovers exact solutions to non-convex problems with high probability, and guarantees that out approximation semidefinite programming methods find stationary points for optimization objectives.</span></p> <p dir="ltr"><span>&nbsp;&nbsp;Finally, we made major progress on objective (v).&nbsp; We theoretically analyzed a suite of algorithms for training binary neural nets, in which all the network parameters take on binary values.&nbsp; These networks are efficient to store and have very low computing requirements, making them effective for deployment on low power and embedded systems.&nbsp; We also studied methods for using neural networks to enhance discrete programming problems that arise in operations research, and applied these methods to applications in organ allocation.</span></p> </span></p><br> <p>            Last Modified: 02/22/2020<br>      Modified by: Thomas&nbsp;A&nbsp;Goldstein</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  The goals of this project were the development and analysis of novel algorithms for discrete programming in real-time systems, as well as the design of corresponding hardware accelerators. The project focuses on exact and approximate methods for semidefinite programming (SDP). The target applications were in massive multi-user (MU) multiple-input multiple-output (MIMO) wireless systems, machine learning, as well as in imaging and computer vision. More specifically, the project investigates the following aspects: (i) Approximate semidefinite relaxation (SDR): We develop novel non-convex solvers that find approximate solutions to semidefinite programs at significantly lower complexity and memory requirements compared to that of exact methods. (ii) Hardware designs: For the above algorithms and applications, we develop prototype designs in field-programmable gate arrays (FPGAs) or application-specific integrated circuits (ASICs). (iii) Assessment: To assess the efficacy of our algorithms, we perform extensive complexity, performance, and memory requirement comparisons on algorithm and circuit level. For our hardware solutions, we use state-of-the-art CAD tools to extract estimates for the throughput, area, and power consumption. (iv) Algorithmic  theory: We analyze all our algorithms from a theoretical perspective in terms of convergence rates, solution quality/accuracy, and memory requirements.   During the development of this project we discovered interesting relationships between non-convex programming for communications and non-convex and discrete problems that arise in the field of machine learning and neural nets.  For this reason, we ended up pursuing an extended goal: (v) Analyse and evaluate non-convex programming methods for neural networks.    This project had a number of positive outcomes in each of the areas of focus.  (i)  We designed new convex relaxation methods for phase retrieval and other non-convex problems in signal processing.  The new methods can find global minimums of non-convex problems.  While previous methods with this property exist, ours is the first method that is computationally tractable for large problems.  (ii)  We adapted our work on non-convex relaxations to solve problems in wireless encoding and decoding.  Our proposed methods, including BCR and FAME, are the first efficient methods for wireless communications that are based on semidefinite programming. (ii) We implemented the proposed methods in software simulations and in VLSI.  The results methods beat state of the art methods in terms of both throughput and power consumption.  (iv)  We prove rigorous results that guarantee the performance of the proposed methods.  This includes theorems showing that PhaseMax recovers exact solutions to non-convex problems with high probability, and guarantees that out approximation semidefinite programming methods find stationary points for optimization objectives.   Finally, we made major progress on objective (v).  We theoretically analyzed a suite of algorithms for training binary neural nets, in which all the network parameters take on binary values.  These networks are efficient to store and have very low computing requirements, making them effective for deployment on low power and embedded systems.  We also studied methods for using neural networks to enhance discrete programming problems that arise in operations research, and applied these methods to applications in organ allocation.        Last Modified: 02/22/2020       Submitted by: Thomas A Goldstein]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
