<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Cataloging Software Using a Semantic-Based Approach for Software Discovery and Characterization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2015</AwardEffectiveDate>
<AwardExpirationDate>12/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>299926.00</AwardTotalIntnAmount>
<AwardAmount>299926</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rajiv Ramnath</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>When scientists need to find software for a task, they often use ad hoc methods such as asking their colleagues, searching the web, or using whatever others appear to be using. This unsystematic approach often results in unproductive effort and poorer scientific results because scientists cannot find the software that is best for their needs. If a comprehensive software index were available it would help enable more efficient use of existing software resources and tools and contribute to more efficient and effective investment in the scientific research itself. &lt;br/&gt;&lt;br/&gt;Further, software is created and evolves too rapidly for humans to monitor; thus creation of the index should be automated. Also, while today's social-coding movement is putting more software into open-source repositories, thus offering greater opportunities to find and characterize software automatically, a significant obstacle remains: the lack of automated indexing methods that can produce results acceptable to humans. This proposed EAGER project seeks to investigate the use of innovative computing techniques for automating the creation of an index that can be used by scientists to find the software they need. Their test system (CASICS - Comprehensive and Automated Software Inventory Creation System) will be tested with an initial set of users and made available for public use.&lt;br/&gt;&lt;br/&gt;In this project, the researchers will (1) extend an existing software ontology; (2) develop methods for source code analysis using the ontology; (3) adapt a repository crawler to apply the methods to projects in SourceForge and GitHub; (4) implement a browsing and search interface to the database of results; and (5) augment the search facility to use semantic similarity via the ontology. They will use the prototype system to explore variants of the code analysis methods, select the best, and assess the performance of inferring characteristics of software found in the repositories. For automated index creation to be feasible, software discovery and characterization algorithms need to improve, so that the index is complete and organized more meaningfully. &lt;br/&gt;&lt;br/&gt;This project will explore the hypothesis that a deeper underlying knowledge structure, coupled with appropriate feature extraction and classification algorithms, can improve classification performance compared to past approaches. The use of ontologies to assist source code analysis has been explored in other work, but it has not been applied as proposed here. The project is expected to extend the state of the art in source code analysis and categorization.&lt;br/&gt;&lt;br/&gt;The central question in this project is whether the ontology-based descriptions of software produced by the classification methods can compare with human labeling. To address this, and in addition to the intellectual merit of the classification approach described above, the researchers have also proposed unique methods for empirically evaluating the results of the classification, as follows: (a) assess the overlap between the output of their methods with the classifications already present in GitHub and SourceForge - the two software catalogs they propose to mine, (b) develop a test system to perform double-blind evaluation with human judges on the software that is classified and (c) compare the search in CASICS to Google using a set of benchmark search queries that users in astronomy and systems biology would issue for various scenarios, identified through a survey.</AbstractNarration>
<MinAmdLetterDate>06/15/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1533792</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Doyle</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John Doyle</PI_FULL_NAME>
<EmailAddress>doyle@cds.caltech.edu</EmailAddress>
<PI_PHON>6263954808</PI_PHON>
<NSF_ID>000267692</NSF_ID>
<StartDate>06/15/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Hucka</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael Hucka</PI_FULL_NAME>
<EmailAddress>mhucka@caltech.edu</EmailAddress>
<PI_PHON>6263953534</PI_PHON>
<NSF_ID>000426217</NSF_ID>
<StartDate>06/15/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>California Institute of Technology</Name>
<CityName>PASADENA</CityName>
<ZipCode>911250600</ZipCode>
<PhoneNumber>6263956219</PhoneNumber>
<StreetAddress>1200 E California Blvd</StreetAddress>
<StreetAddress2><![CDATA[Mail Code 273-6]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>27</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA27</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009584210</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CALIFORNIA INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009584210</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[California Institute of Technology]]></Name>
<CityName>Pasadena</CityName>
<StateCode>CA</StateCode>
<ZipCode>911250001</ZipCode>
<StreetAddress><![CDATA[1200 E. California Blvd.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>27</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA27</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~299926</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>When they need to find software for a task, many scientists ask their colleagues, search the web, or use whatever they see used by others in the literature. This unsystematic approach to finding software often produces suboptimal or biased results and can lead to waste of effort, problems reproducing results, and more. A comprehensive software index could help address these problems, but past efforts at cataloging software have been largely unsuccessful: software is created and evolves too rapidly for humans to monitor thoroughly.</p> <p>Automation could help generate and maintain a software index. However, if semi- or fully-automated software indexes are to ever to be achieved, software discovery and characterization algorithms need to improve, and the information gathered needs to be organized more meaningfully. The goal of this project was to investigate how to automate the creation of a continually-updated, comprehensive catalog of software. The project focused on the question, "can an ontology-based approach to software characterization produce results that humans find acceptable"? We sought to (1) develop methods for inferring software characteristics through the application of ontology-based, hierarchical multi-label classification; (2) apply the methods to open-source projects to characterize software; (3) provide a demonstration interface to the database of results; and (4) leverage the ontology to improve search query performance. To gain insight into social factors surrounding software reuse, we also conducted a survey to ascertain the factors that influence reuse in target communities.</p> <p>Although in the end we did not complete the ambitious aims of the project, we produced many intermediate outcomes including software products, ontologies, survey results, publications and preliminary classification analyses. &nbsp;We modularized the components of our framework, CASICS (Comprehensive and Automated Software Inventory Creation System), so that other researchers and projects may be able to reuse them. All software is available under open-source terms from our project on GitHub (https://casics.github.io):</p> <p>&nbsp; ??&nbsp;<em>A new repository data-gathering system</em>. &nbsp;The core of CASICS is a Python-based system designed for gathering data about projects hosted in hosting sites such as GitHub. The modular system can run on separate computers, and features the following components:</p> <ol> </ol>  <ul> <li><strong><em>CASICSdb</em></strong>: a MongoDB-based database that stores the metadata extracted from code repositories.</li> <li><strong><em>Collector</em></strong>: a package to interact with a repository hosting service such as GitHub and collect information about software projects.</li> <li><em><strong>Downloader</strong></em>: a package that takes a list of GitHub repository names and downloads all the files to a local filesystem. This permits analysis tools to work on local copies of the source files.</li> <li><em><strong>Extractor</strong></em>: a package that extracts class names, function names, variable names, text strings, comments, and other features from source code files. It uses programming language-aware parsers to extract elements intelligently.</li> <li><em><strong>Annotator</strong></em>: a browser-based annotation interface used by (human) CASICS annotators to add ontology terms to repository entries in the database. The CASICS Annotator is written in a combination of Python and JavaScript.</li> </ul> <p>&nbsp; ??&nbsp;<em>Several software modules used in implementing the system described above</em>. These have been written as independent modules that can be reused by other people for other purposes and projects:</p> <ol> </ol>  <ul> <li><em><strong>Dassie</strong></em>&nbsp;(<em><span>da</span>tabase of&nbsp;<span>s</span>ubject term<span>s</span>&nbsp;and hierarch<span>ie</span>s):</em> a database of terms from the Library of Congress Subject Headings (LCSH) controlled vocabulary. It allows other programs to use normal MongoDB network API calls to search for LCSH terms and their relationships.</li> <li><em><strong>Nostril</strong></em> (<em>Nonsense String Evaluator</em>): a Python module that infers whether a given medium-length string of characters is likely to be random gibberish or something meaningful.</li> <li><em><strong>Spiral</strong></em> (<em>SPlitters for IdentifieRs: A Library</em>): a Python library of functions for splitting identifiers found in source code files.&nbsp;</li> <li><em><strong>Expansionist</strong></em>: a Python package for expanding identifiers found in source code files. &nbsp;It converts cryptic function, class and variable names into more meaningful short phrases by splitting the identifiers (using Spiral) and expanding abbreviations and contractions.</li> </ul> <p>&nbsp;??&nbsp;<em>A new ontology for software interface</em>s: <em><strong>Sofiont</strong></em> (for <em>Software Interface Ontology</em>). This ontology provides terms for both human interface types and programmatic (API) interface types.</p> <ol> </ol> <p>Our project focused only on mining code repositories, but many of the issues it addressed are common to all sources of evidence about software, thus laying the foundations for the eventual development of a comprehensive software resource index. &nbsp;Overall, our efforts can inform future efforts aimed at producing resources to help users discover software applications and libraries having specific capabilities.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 03/31/2018<br>      Modified by: Michael&nbsp;Hucka</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ When they need to find software for a task, many scientists ask their colleagues, search the web, or use whatever they see used by others in the literature. This unsystematic approach to finding software often produces suboptimal or biased results and can lead to waste of effort, problems reproducing results, and more. A comprehensive software index could help address these problems, but past efforts at cataloging software have been largely unsuccessful: software is created and evolves too rapidly for humans to monitor thoroughly.  Automation could help generate and maintain a software index. However, if semi- or fully-automated software indexes are to ever to be achieved, software discovery and characterization algorithms need to improve, and the information gathered needs to be organized more meaningfully. The goal of this project was to investigate how to automate the creation of a continually-updated, comprehensive catalog of software. The project focused on the question, "can an ontology-based approach to software characterization produce results that humans find acceptable"? We sought to (1) develop methods for inferring software characteristics through the application of ontology-based, hierarchical multi-label classification; (2) apply the methods to open-source projects to characterize software; (3) provide a demonstration interface to the database of results; and (4) leverage the ontology to improve search query performance. To gain insight into social factors surrounding software reuse, we also conducted a survey to ascertain the factors that influence reuse in target communities.  Although in the end we did not complete the ambitious aims of the project, we produced many intermediate outcomes including software products, ontologies, survey results, publications and preliminary classification analyses.  We modularized the components of our framework, CASICS (Comprehensive and Automated Software Inventory Creation System), so that other researchers and projects may be able to reuse them. All software is available under open-source terms from our project on GitHub (https://casics.github.io):    ?? A new repository data-gathering system.  The core of CASICS is a Python-based system designed for gathering data about projects hosted in hosting sites such as GitHub. The modular system can run on separate computers, and features the following components:     CASICSdb: a MongoDB-based database that stores the metadata extracted from code repositories. Collector: a package to interact with a repository hosting service such as GitHub and collect information about software projects. Downloader: a package that takes a list of GitHub repository names and downloads all the files to a local filesystem. This permits analysis tools to work on local copies of the source files. Extractor: a package that extracts class names, function names, variable names, text strings, comments, and other features from source code files. It uses programming language-aware parsers to extract elements intelligently. Annotator: a browser-based annotation interface used by (human) CASICS annotators to add ontology terms to repository entries in the database. The CASICS Annotator is written in a combination of Python and JavaScript.     ?? Several software modules used in implementing the system described above. These have been written as independent modules that can be reused by other people for other purposes and projects:     Dassie (database of subject terms and hierarchies): a database of terms from the Library of Congress Subject Headings (LCSH) controlled vocabulary. It allows other programs to use normal MongoDB network API calls to search for LCSH terms and their relationships. Nostril (Nonsense String Evaluator): a Python module that infers whether a given medium-length string of characters is likely to be random gibberish or something meaningful. Spiral (SPlitters for IdentifieRs: A Library): a Python library of functions for splitting identifiers found in source code files.  Expansionist: a Python package for expanding identifiers found in source code files.  It converts cryptic function, class and variable names into more meaningful short phrases by splitting the identifiers (using Spiral) and expanding abbreviations and contractions.    ?? A new ontology for software interfaces: Sofiont (for Software Interface Ontology). This ontology provides terms for both human interface types and programmatic (API) interface types.    Our project focused only on mining code repositories, but many of the issues it addressed are common to all sources of evidence about software, thus laying the foundations for the eventual development of a comprehensive software resource index.  Overall, our efforts can inform future efforts aimed at producing resources to help users discover software applications and libraries having specific capabilities.                Last Modified: 03/31/2018       Submitted by: Michael Hucka]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
