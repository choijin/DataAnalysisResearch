<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: A Separation Kernel for Mixed Criticality Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2015</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project will develop a new operating system for mixed criticality embedded systems, such as those found in avionics, automotive, robotics, factory automation and healthcare domains. In mixed criticality systems, there is a combination of application and system components with different safety, importance and timing requirements. For example, in an avionics system, the in-flight entertainment system is considered less critical than that of the flight control system. Security is also a key factor in the design of mixed criticality systems.  Security measures should be taken to enforce data confidentiality and system integrity even in the presence of untrusted users. Preventing malicious attacks from compromising the behavior or accessing the data of highly-critical services is an important security concern. &lt;br/&gt;&lt;br/&gt;A major challenge to mixed criticality systems is the safe, predictable and secure isolation of separate components with different levels of criticality. Less critical tasks should not be allowed to interfere with the timing and otherwise correct operation of mission critical tasks. &lt;br/&gt;Safety guarantees should be met to ensure software and hardware failures do not compromise highly critical task operation. Failure of highly critical tasks or services can have devastating consequences.&lt;br/&gt;&lt;br/&gt;Multi- and many-core processors are being increasingly used in mixed criticality embedded systems, due in part to their power, performance and price benefits. Many such processors also support hardware virtualization, including Intel VT-x, AMD-V and certain ARM Cortex processors.  This research project will leverage the combination of multiple cores and hardware virtualization features on emerging processors, to develop a separation kernel for mixed criticality systems. Tasks and services of different criticality levels will be separated into different isolated "sandboxes", each responsible for a collection of hardware processing cores, memory and I/O devices. This work builds on an earlier prototype system, called "Quest-V". Quest-V allows sandboxed services to directly access available resources without involving a heavyweight hypervisor, as is the case in traditional virtual machine systems. Most existing virtual machine systems have been designed for server class computing. So, investigating techniques to build safe, secure and predictable mixed criticality systems on emerging hardware platforms suitable for low-cost embedded computing applications will be an important component of this project.&lt;br/&gt;&lt;br/&gt;This award will extend Quest-V to support novel real-time fault detection and recovery strategies not be possible with traditional system approaches. We also hope to gain a greater understanding of the hardware features needed to support secure and predictable partitioning of machine resources in mixed criticality systems. The outcomes of this work will lead to a new system design with the potential to have impact on many areas of computing where lives, money and security concerns are at stake.</AbstractNarration>
<MinAmdLetterDate>08/18/2015</MinAmdLetterDate>
<MaxAmdLetterDate>08/18/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1527050</AwardID>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>West</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Richard West</PI_FULL_NAME>
<EmailAddress>richwest@cs.bu.edu</EmailAddress>
<PI_PHON>6173532065</PI_PHON>
<NSF_ID>000211081</NSF_ID>
<StartDate>08/18/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Trustees of Boston University</Name>
<CityName>BOSTON</CityName>
<ZipCode>022151300</ZipCode>
<PhoneNumber>6173534365</PhoneNumber>
<StreetAddress>881 COMMONWEALTH AVE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049435266</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF BOSTON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049435266</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Boston University, Computer Science Dept]]></Name>
<CityName>Boston</CityName>
<StateCode>MA</StateCode>
<ZipCode>022151300</ZipCode>
<StreetAddress><![CDATA[111 Cummington Mall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Multicore processors with hardware virtualization features were once<br />limited to server-class computers but have now found themselves being<br />increasingly used in embedded systems. This work leverages these<br />processor technologies to develop a separation kernel, or partitioning<br />hypervisor, for mixed-criticality embedded computing. In<br />mixed-criticality systems, there are a combination of tasks and<br />services with different timing and safety requirements. The failure of<br />a highly-critical task has potentially catastrophic consequences,<br />whereas the failure of a less critical task may only cause minor<br />inconvenience.<br /><br />The resultant system developed in this work, called Quest-V, isolates<br />tasks and services of different criticality levels in separate<br />sandboxed guest domains. Each guest directly manages a subset of<br />processor cores, physical memory and input/output devices assigned by<br />a virtual machine monitor (a.k.a. VMM, or hypervisor). This differs<br />from traditional virtual machine systems, which require a hypervisor<br />to perform an additional layer of resource management to multiplex<br />guests onto the same shared hardware. By removing the hypervisor from<br />runtime resource management in Quest-V, the most trusted code base is<br />kept extremely small and is not accessed under normal system<br />operation. Thus, Quest-V uses an extra ring of protection over<br />traditional operating systems, to securely isolate tasks and services,<br />while ensuring that failure of one task does not impact the operation<br />of other tasks.<br /><br />Quest-V has been developed from the Quest real-time operating system<br />(RTOS) for multicore processors. It has been shown to enforce both<br />temporal and spatial isolation of tasks running in different guest<br />domains. Secure shared memory communication channels established by a<br />VMM support real-time information flow between guests on the same<br />physical machine, giving the illusion of a highly predictable<br />distributed system on a chip.<br /><br />The resultant partitioning hypervisor combines the real-time<br />capability of Quest with legacy systems such as Linux and<br />Android. This way, legacy systems gain real-time features without<br />compromising their integrity. At the same time, an RTOS is easily<br />extended with pre-existing device drivers, libraries and services that<br />would take years to write from scratch. As the RTOS is separated from<br />non-real-time components it is able to retain a small code base that<br />is more easily verified for functional and timing<br />correctness. Moreover, in Quest-V, it is the Quest RTOS that mediates<br />access by non-real-time systems to micro-architectural resources such<br />as shared memory buses, when contention exceeds specified thresholds.<br /><br />Quest-V is being used as the basis for an electric vehicle management<br />system, providing separate guest partitions for in-vehicle<br />infotainment (IVI), instrument cluster (IC) output, and vehicle<br />control. Low criticality IVI and IC services, and timing and safety<br />critical torque vectoring tasks are assigned to the same single-board<br />computer (SBC).&nbsp; This alleviates the need for multiple separate electronic<br />control units for different functional components, as found in<br />traditional automotive systems. The whole system reduces hardware<br />costs and increases vehicle safety.<br /><br />Quest-V currently operates on Intel x86 processors with VT-x<br />capabilities. The system has been tested on PCs and embedded SBCs, the<br />Intel Skull Canyon, Edison, Joule, Minnowboard MAX, Aero compute<br />board, and Up Squared. An autonomous flight management system using<br />Quest-V on the Intel Aero board combines a port of the well-known<br />Cleanflight flight control firmware with Linux-based vision services<br />for object tracking and obstacle avoidance.<br /><br />To the best of our knowledge, Quest-V is the world's first real-time<br />chip-level separation kernel, which uses hardware virtualization for<br />time and space isolation of guest services without the runtime<br />overheads of a hypervisor. Further information is available at:<br />www.questos.org</p><br> <p>            Last Modified: 12/17/2019<br>      Modified by: Richard&nbsp;West</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Multicore processors with hardware virtualization features were once limited to server-class computers but have now found themselves being increasingly used in embedded systems. This work leverages these processor technologies to develop a separation kernel, or partitioning hypervisor, for mixed-criticality embedded computing. In mixed-criticality systems, there are a combination of tasks and services with different timing and safety requirements. The failure of a highly-critical task has potentially catastrophic consequences, whereas the failure of a less critical task may only cause minor inconvenience.  The resultant system developed in this work, called Quest-V, isolates tasks and services of different criticality levels in separate sandboxed guest domains. Each guest directly manages a subset of processor cores, physical memory and input/output devices assigned by a virtual machine monitor (a.k.a. VMM, or hypervisor). This differs from traditional virtual machine systems, which require a hypervisor to perform an additional layer of resource management to multiplex guests onto the same shared hardware. By removing the hypervisor from runtime resource management in Quest-V, the most trusted code base is kept extremely small and is not accessed under normal system operation. Thus, Quest-V uses an extra ring of protection over traditional operating systems, to securely isolate tasks and services, while ensuring that failure of one task does not impact the operation of other tasks.  Quest-V has been developed from the Quest real-time operating system (RTOS) for multicore processors. It has been shown to enforce both temporal and spatial isolation of tasks running in different guest domains. Secure shared memory communication channels established by a VMM support real-time information flow between guests on the same physical machine, giving the illusion of a highly predictable distributed system on a chip.  The resultant partitioning hypervisor combines the real-time capability of Quest with legacy systems such as Linux and Android. This way, legacy systems gain real-time features without compromising their integrity. At the same time, an RTOS is easily extended with pre-existing device drivers, libraries and services that would take years to write from scratch. As the RTOS is separated from non-real-time components it is able to retain a small code base that is more easily verified for functional and timing correctness. Moreover, in Quest-V, it is the Quest RTOS that mediates access by non-real-time systems to micro-architectural resources such as shared memory buses, when contention exceeds specified thresholds.  Quest-V is being used as the basis for an electric vehicle management system, providing separate guest partitions for in-vehicle infotainment (IVI), instrument cluster (IC) output, and vehicle control. Low criticality IVI and IC services, and timing and safety critical torque vectoring tasks are assigned to the same single-board computer (SBC).  This alleviates the need for multiple separate electronic control units for different functional components, as found in traditional automotive systems. The whole system reduces hardware costs and increases vehicle safety.  Quest-V currently operates on Intel x86 processors with VT-x capabilities. The system has been tested on PCs and embedded SBCs, the Intel Skull Canyon, Edison, Joule, Minnowboard MAX, Aero compute board, and Up Squared. An autonomous flight management system using Quest-V on the Intel Aero board combines a port of the well-known Cleanflight flight control firmware with Linux-based vision services for object tracking and obstacle avoidance.  To the best of our knowledge, Quest-V is the world's first real-time chip-level separation kernel, which uses hardware virtualization for time and space isolation of guest services without the runtime overheads of a hypervisor. Further information is available at: www.questos.org       Last Modified: 12/17/2019       Submitted by: Richard West]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
