<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: SHF: Small: Programming Language, Runtime System, and Architecture Support for Reliability in Intermittent, Energy-Harvesting Computing Devices</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>499999.00</AwardTotalIntnAmount>
<AwardAmount>499999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Emerging energy-harvesting computing devices (EHDs) run on energy extracted from their environment and are poised to be the key enabler of next-generation wearables, implantable medical devices, and the Internet of Things (IoT) applications. However, software on an EHD can only execute intermittently, as energy is available. When power fails (10 to 100 times per second) the EHD turns off and reboots, requiring software on EHDs to span multiple periods of execution interrupted by power failures. Unfortunately, today's software development tools and practices do not address intermittence, and frequent interruptions cause unexpected and incorrect system behavior. Intermittence is a barrier to the widespread adoption of EHDs for many high-value applications and limits EHDs to use by experts only.&lt;br/&gt;&lt;br/&gt;This proposal addresses the fundamental challenges of intermittence by introducing the Persistent- Channel-Based (PCB) programming and execution model. PCB provides a new, simpler way to write software that is robust to intermittence. PCB also describes a new way to execute that software with high reliability, despite intermittence. By simplifying the process of writing software for EHDs and making intermittent execution reliable, PCB makes EHDs accessible to all potential system builders and developers.&lt;br/&gt;&lt;br/&gt;Just as the maturation of programming and execution models for embedded computer systems spawned industries around new embedded applications (e.g., the quantified-self project and in-home sensing), the development of the ideas in this project propels the same transformation for EHDs.  PCB will enable researchers, individuals, and commercial players to create novel EHD-based applications that in the past could only be tediously purpose-built by expert researchers. The impact of this work is expected to transcend the technical outcomes of the research.&lt;br/&gt;&lt;br/&gt;The primary technical outcomes in PCB are novel approaches to writing and executing software. Programs are composed of tasks using a novel task-graph control-flow model that eliminates control-flow discontinuities due to intermittence. PCB's novel channel-based memory model together with channel access control, ensures that memory remains consistent. PCB simplifies a program?s reasoning progress because it persistently tracks the execution through the task graph and channel access control prevents a task from modifying its inputs, ensuring correctness as the task repeatedly executes to completion. PCB cuts across layers of the system stack, with language, compiler, runtime, and architecture support using a language that enables programmers to use simple expressions. The compiler maps programs to operations in PCB's runtime system which in turn implements tasks and channels, providing the guarantees relied on by the PCB language. Hardware and architecture support for channels and tasks, provides similar guarantees with novel hardware support, eliminating the overhead of the software runtime system. Encouraging preliminary findings support the idea that PCB's tasks and channels makes reasoning about intermittent computation simpler and that PCB eliminates correctness issues in several actual EHD applications.</AbstractNarration>
<MinAmdLetterDate>08/24/2015</MinAmdLetterDate>
<MaxAmdLetterDate>08/24/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1526342</AwardID>
<Investigator>
<FirstName>Brandon</FirstName>
<LastName>Lucia</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Brandon Lucia</PI_FULL_NAME>
<EmailAddress>blucia@andrew.cmu.edu</EmailAddress>
<PI_PHON>4122689527</PI_PHON>
<NSF_ID>000688970</NSF_ID>
<StartDate>08/24/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~499999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Emerging energy-harvesting computing devices (EHDs) run on energy extracted from their environment and are poised to be the key enabler of next-generation wearables, implantable medical devices, Internet of Things (IoT) applications, and emerging chip-scale satellites. However, software on an EHD can only execute intermittently, as energy is available. When power fails (10 to 100 times per second) the EHD turns off and reboots, requiring software on EHDs to span multiple periods of execution interrupted by power failures.&nbsp; Unfortunately, existing software development tools and practices do not address intermittent execution. Frequent power interruptions cause unexpected and incorrect system behavior. Intermittence is a barrier to the widespread adoption of EHDs for many high-value applications and intermittent execution limits EHDs to use by experts only.<br /><br />This project established a foundation for reliably-executing intermittent software on EHDs through the development of new programming languages and software runtime systems.&nbsp; The project defined and explored the design space of possible software systems, including languages and systems based around tasks and languages and system based around checkpoints.&nbsp; These new software systems make it simple to write code that is both efficient and executes correctly on an EHD experiencing unpredictable intermittent power failures.&nbsp; The merit of these intellectual contributions is in characterizing challenges of intermittent execution on EHDs and solving these problems with specific programming language and runtime system support.&nbsp; The key technical insights driving this work lie in task- and checkpoint-based execution.&nbsp; Task-based systems in this project enable a programmer to define parts of an application that behave as though there were no power failures even in the presence of arbitrarily-timed intermittent power failures.&nbsp; Checkpoint-based systems developed in this project execute applications without modification, preserving progress and ensuring the correctness of a program's memory state.<br /><br />Just as the maturation of programming and execution models for embedded computer systems spawned industries around new embedded applications (e.g., the quantified-self project and in-home sensing), the development of the ideas in this project contributed to a similar transformation for EHDs. This project has established the groundwork for industrial adoption of EHDs by making them reliable enough for use in applications that demand high reliability.&nbsp; The results from this work apply broadly to many applications, ranging from new medical device implants, to smart cities and smart building instrumentation, and IoT applications.&nbsp; This work has been disseminated widely to the public and to communities of interest through a number of high-profile publications in top academic research venues.&nbsp; Moreover, the software artifacts developed in the course of this project have been publicly released on the web for research use, further amplifying the impact of the work.&nbsp; Results from this work -- the Chain programming language -- were additionally included in a deployment to low-Earth orbit, aboard a custom chip-scale satellite launched in 2019, demonstrating the viability of the products of this project in forward-looking application deployments.</p><br> <p>            Last Modified: 12/13/2019<br>      Modified by: Brandon&nbsp;Lucia</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Emerging energy-harvesting computing devices (EHDs) run on energy extracted from their environment and are poised to be the key enabler of next-generation wearables, implantable medical devices, Internet of Things (IoT) applications, and emerging chip-scale satellites. However, software on an EHD can only execute intermittently, as energy is available. When power fails (10 to 100 times per second) the EHD turns off and reboots, requiring software on EHDs to span multiple periods of execution interrupted by power failures.  Unfortunately, existing software development tools and practices do not address intermittent execution. Frequent power interruptions cause unexpected and incorrect system behavior. Intermittence is a barrier to the widespread adoption of EHDs for many high-value applications and intermittent execution limits EHDs to use by experts only.  This project established a foundation for reliably-executing intermittent software on EHDs through the development of new programming languages and software runtime systems.  The project defined and explored the design space of possible software systems, including languages and systems based around tasks and languages and system based around checkpoints.  These new software systems make it simple to write code that is both efficient and executes correctly on an EHD experiencing unpredictable intermittent power failures.  The merit of these intellectual contributions is in characterizing challenges of intermittent execution on EHDs and solving these problems with specific programming language and runtime system support.  The key technical insights driving this work lie in task- and checkpoint-based execution.  Task-based systems in this project enable a programmer to define parts of an application that behave as though there were no power failures even in the presence of arbitrarily-timed intermittent power failures.  Checkpoint-based systems developed in this project execute applications without modification, preserving progress and ensuring the correctness of a program's memory state.  Just as the maturation of programming and execution models for embedded computer systems spawned industries around new embedded applications (e.g., the quantified-self project and in-home sensing), the development of the ideas in this project contributed to a similar transformation for EHDs. This project has established the groundwork for industrial adoption of EHDs by making them reliable enough for use in applications that demand high reliability.  The results from this work apply broadly to many applications, ranging from new medical device implants, to smart cities and smart building instrumentation, and IoT applications.  This work has been disseminated widely to the public and to communities of interest through a number of high-profile publications in top academic research venues.  Moreover, the software artifacts developed in the course of this project have been publicly released on the web for research use, further amplifying the impact of the work.  Results from this work -- the Chain programming language -- were additionally included in a deployment to low-Earth orbit, aboard a custom chip-scale satellite launched in 2019, demonstrating the viability of the products of this project in forward-looking application deployments.       Last Modified: 12/13/2019       Submitted by: Brandon Lucia]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
