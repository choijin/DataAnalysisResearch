<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Bit-level Formal Verification: Keeping Pace with Industrial Needs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2012</AwardEffectiveDate>
<AwardExpirationDate>06/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>More and more devices are being designed to process data in digital form including TVs, phones, cameras, music, computers, software, avionics, and encryption devices. Verification is the process of ensuring that designs are correct and that the devices do what is intended. A design error can have important consequences, from having to recall millions of devices resulting in the loss of time and money, to a failure in a mission or safety critical application, possibly causing loss of life. Simulation is the most easily applied method of verification, but it is inherently incomplete and cannot give strong guarantees for correctness. Formal verification is a powerful supplement, or sometimes alternative, to simulation-based approaches. It can produce a mathematical proof of correctness, or expose subtle bugs in a design not uncovered by simulation. Formal methods have seen great progress in the last decade, allowing them to scale up to larger problems where they can replace simulation. Similar progress in the next decade would have a significant impact in not only keeping design costs down and better guarantying safety in critical applications, but also in improving design reliability and enhancing quality by allowing aggressive logic optimization techniques to be applied and successfully verified, a current stumbling block in power optimization. This project proposes to research the fundamental algorithms of formal verification with the goals of (i) innovating new methods in formal verification, including new algorithms and better data structures; (ii) implementing and evaluating these in a common, industrial-strength system, and (iii) promoting the results to the academic, governmental, and industrial communities. &lt;br/&gt;&lt;br/&gt;Although, the focus of this proposal is on the formal verification of micro-electronic systems and software, the core techniques used in formal verification are very general and can immediately impact many other application areas, such as cryptographic, biologic and health-care systems. Improved scalability of the techniques may well open up wider applicability in new domains such as synthetic biology, software synthesis and areas where safety is a critical issue such as automotive and aviation control systems. In addition, the enhanced ability to verify equivalence of hardware and software systems encourages the use of advanced synthesis techniques, resulting for example in improved speed, power, and area utilization in micro-chips.</AbstractNarration>
<MinAmdLetterDate>06/05/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/05/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1219154</AwardID>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>Brayton</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert K Brayton</PI_FULL_NAME>
<EmailAddress>brayton@eecs.berkeley.edu</EmailAddress>
<PI_PHON>5106439801</PI_PHON>
<NSF_ID>000494868</NSF_ID>
<StartDate>06/05/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<StreetAddress2><![CDATA[1608 Fourth Street, Suite 220]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>124726725</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Berkeley]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>947201770</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Verification is the process of checking that a system does what is intended. <em>Formal</em><em> verification</em> is a powerful supplement to simulation-based approaches. It can produce a mathematical proof of correctness, and is more efficient in exposing subtle bugs in a design. Formal methods have seen great progress in the last decade, allowing it to scale up to larger problems where it can replace simulation.</p> <p>&nbsp;</p> <p>Continuing progress in the next decade will keep <em>design costs</em> down and better guaranty <em>safety</em> in critical applications. Improvement in the core techniques of formal verification impacts a number of application areas&mdash;integrated circuit devices, software, cryptographic and biologic systems. Advances in the sizes of systems that can be handled can open up applications in new domains such as health care, synthetic biology, and software synthesis. Enhanced ability to verify equivalence of hardware and software systems encourages the use of advanced sequential <em>synthesis</em> techniques, resulting in improved speed, power, and area utilization of micro-chips.</p> <p>&nbsp;</p> <p>This project focused on (i) developing new formal verification techniques, including new algorithms and better data structures; (ii) implementing and evaluating these in a common, industrial-strength system, and (iii) promoting results to the academic, governmental, and industrial communities. The software developed is freely available from and supported by the <em>Berkeley Verification and Synthesis Research Center</em>, BVSRC (<a href="http://bvsrc.org/"><em>http://bvsrc.org</em></a>). This center was created to communicate results, share examples and experiences, distribute software, and generally serve as a central exchange for research in verification and synthesis of digital systems.</p> <p>&nbsp;</p> <p>In the project, we proposed to advance formal verification methods by 1) developing domain specific satisfiability solvers (SAT), 2) improving abstraction techniques to deal with larger systems, and 3) enhancing property directed reachability (PDR), a recent method for proving unbounded properties of systems or finding counterexamples.</p> <p>The following contributions were made in each of the three directions:</p> <ul> <li>Several new ideas for domain-specific SAT solvers were explored; in particular, a new minimalistic circuit-based SAT solver was developed for proving sequential equivalences between variables in a design. This resulted in an order-of-magnitude speedup over using a well-tuned implementation of a CNF-based SAT solver, MiniSAT.</li> <li>A new SAT-based gate-level abstraction engine was developed and shown to perform better than the previous ones, including those found in commercial tools.</li> <li>Several extensions of PDR were developed; in particular, one that allows efficient handling of multi-output problems; another allows the user to set a per-property time-out, which results in skipping hard problems and proving a vast majority of the remaining ones, instead of getting stuck on the first hard one and proving little or nothing in the end.</li> </ul> <p>Additionally, the following were accomplished:</p> <ul> <li>Improved CNF generation, based on technology mapping into 8-input LUTs; this can speed up any SAT based algorithm.</li> <li>Developed an efficient way of reducing special types of practical Quantified Boolean Formula (QBF) instances to SAT, and applied the resulting QBF solver to several practical problems.</li> <li>Developed a fast structural isomorphism detection algorithm for sequential circuits, which improves the performance of formal verification tools.</li> <li>Enhanced the capabilities of our public-domain verification and synthesis system, ABC, to handle large multi-output instances in Bounded Model Checking (BMC) and sequential simulation.</li> <li>Developed and maintained our ABC-based inte...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Verification is the process of checking that a system does what is intended. Formal verification is a powerful supplement to simulation-based approaches. It can produce a mathematical proof of correctness, and is more efficient in exposing subtle bugs in a design. Formal methods have seen great progress in the last decade, allowing it to scale up to larger problems where it can replace simulation.     Continuing progress in the next decade will keep design costs down and better guaranty safety in critical applications. Improvement in the core techniques of formal verification impacts a number of application areas&mdash;integrated circuit devices, software, cryptographic and biologic systems. Advances in the sizes of systems that can be handled can open up applications in new domains such as health care, synthetic biology, and software synthesis. Enhanced ability to verify equivalence of hardware and software systems encourages the use of advanced sequential synthesis techniques, resulting in improved speed, power, and area utilization of micro-chips.     This project focused on (i) developing new formal verification techniques, including new algorithms and better data structures; (ii) implementing and evaluating these in a common, industrial-strength system, and (iii) promoting results to the academic, governmental, and industrial communities. The software developed is freely available from and supported by the Berkeley Verification and Synthesis Research Center, BVSRC (http://bvsrc.org). This center was created to communicate results, share examples and experiences, distribute software, and generally serve as a central exchange for research in verification and synthesis of digital systems.     In the project, we proposed to advance formal verification methods by 1) developing domain specific satisfiability solvers (SAT), 2) improving abstraction techniques to deal with larger systems, and 3) enhancing property directed reachability (PDR), a recent method for proving unbounded properties of systems or finding counterexamples.  The following contributions were made in each of the three directions:  Several new ideas for domain-specific SAT solvers were explored; in particular, a new minimalistic circuit-based SAT solver was developed for proving sequential equivalences between variables in a design. This resulted in an order-of-magnitude speedup over using a well-tuned implementation of a CNF-based SAT solver, MiniSAT. A new SAT-based gate-level abstraction engine was developed and shown to perform better than the previous ones, including those found in commercial tools. Several extensions of PDR were developed; in particular, one that allows efficient handling of multi-output problems; another allows the user to set a per-property time-out, which results in skipping hard problems and proving a vast majority of the remaining ones, instead of getting stuck on the first hard one and proving little or nothing in the end.   Additionally, the following were accomplished:  Improved CNF generation, based on technology mapping into 8-input LUTs; this can speed up any SAT based algorithm. Developed an efficient way of reducing special types of practical Quantified Boolean Formula (QBF) instances to SAT, and applied the resulting QBF solver to several practical problems. Developed a fast structural isomorphism detection algorithm for sequential circuits, which improves the performance of formal verification tools. Enhanced the capabilities of our public-domain verification and synthesis system, ABC, to handle large multi-output instances in Bounded Model Checking (BMC) and sequential simulation. Developed and maintained our ABC-based integrated formal verification system "super_prove", which has won the international Hardware Model Checking competitions (fmv.jku.at/hwmcc) in the last five years in several categories (single and multiple-output safety properties, liveness property checking).           Last Modified: 08/04/2015       Subm...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
