<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Generating Octagonal Invariants using Quantifier Elimination Heuristics</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>83166.00</AwardTotalIntnAmount>
<AwardAmount>83166</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>With software becoming more and more complex, ensuring its total correctness, in the absence of full formal and rigorous specifications, has become a highly nontrivial task. Lightweight program analysis techniques which go beyond type checking and detect semantic bugs are thus becoming increasing relevant. This is especially so given that bugs such as buffer overflows can be exploited to cause havoc, bringing organizations to a stand-still and causing considerable financial loss. &lt;br/&gt;&lt;br/&gt;This project will explore geometric heuristics for quantifier elimination to automatically derive a restricted class of invariant properties of programs, with the goal of developing scalable highly efficient algorithms for program analysis. Particular attention will be paid to properties expressed using numerical relational constraints on program variables; industrial experience suggests that automatically deriving such properties from unannotated and unspecified programs is extremely useful in finding bugs in industrial software. Recent advances made in satisfiability modulo theories (SMT)  solvers and automated reasoning techniques as well as already built tools for quantifier elimination will be exploited to achieve this. This project will build a repertoire of techniques to be used in tools analyzing programs including optimizing compilers, debuggers, and verifiers as well as those for identifying security violations in computer networks.</AbstractNarration>
<MinAmdLetterDate>07/25/2012</MinAmdLetterDate>
<MaxAmdLetterDate>07/25/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1248069</AwardID>
<Investigator>
<FirstName>Deepak</FirstName>
<LastName>Kapur</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Deepak Kapur</PI_FULL_NAME>
<EmailAddress>kapur@cs.unm.edu</EmailAddress>
<PI_PHON>5052771581</PI_PHON>
<NSF_ID>000107758</NSF_ID>
<StartDate>07/25/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of New Mexico</Name>
<CityName>Albuquerque</CityName>
<ZipCode>871310001</ZipCode>
<PhoneNumber>5052774186</PhoneNumber>
<StreetAddress>1700 Lomas Blvd. NE, Suite 2200</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New Mexico</StateName>
<StateCode>NM</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NM01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>868853094</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NEW MEXICO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>784121725</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of New Mexico]]></Name>
<CityName/>
<StateCode>NM</StateCode>
<ZipCode>871310001</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Mexico</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NM01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~83166</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The project developed algorithms and heuristics for automatically generating program properties and loop invariants of the form x + y &lt;= c, x - y &lt;= c, d &lt;= x + y, d &lt;= x - y, where x, y are program variables, by statically analyzing software; such properties are called octagonal relational formulas. Program invariants in general as well as loop invariants are most helpful in understanding program behavior and thus enhancing confidence in the reliability of software. If a program invariant is unexpected, that reflects a possible defect in the software which needs fixing.</p> <p>Restricting the invariants to be of the above form, the project developed efficient algorithms for program analysis which can scale; the complexity of the algorithm is quadratic in the number of program variables. Even though the methods explored are based on a general framework based on quantifier elimination as proposed by Kapur in 2003-2004, such general techniques are of high complexiy and consequently are difficult to scale to work for large programs. Approximations are identified based on geometry of invariants and locality properties of programs so that efficient algorithms can be developed by sacrificing completeness somewhat.</p> <p>The performance of the algorithms has been compared against other tools for generating such invariants including ASTREE and Interproc. Our methods generate invariants which are mostly stronger or at least as good as generated by those tools. Extensions to automatically generate disjunctive invariants so as to capture range of variables to lie in nonconvex domains have been explored using min, max, and absolute value functions. A tool embodying these algorithms is under development. A number of graduate students and a post doctoral fellow worked on the project. Collaborations with other academic institutions were also developed. Papers reporting results of the project have been published in a journal, conferences proceedings, books and workshop proceedings.</p><br> <p>            Last Modified: 11/17/2014<br>      Modified by: Deepak&nbsp;Kapur</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The project developed algorithms and heuristics for automatically generating program properties and loop invariants of the form x + y &lt;= c, x - y &lt;= c, d &lt;= x + y, d &lt;= x - y, where x, y are program variables, by statically analyzing software; such properties are called octagonal relational formulas. Program invariants in general as well as loop invariants are most helpful in understanding program behavior and thus enhancing confidence in the reliability of software. If a program invariant is unexpected, that reflects a possible defect in the software which needs fixing.  Restricting the invariants to be of the above form, the project developed efficient algorithms for program analysis which can scale; the complexity of the algorithm is quadratic in the number of program variables. Even though the methods explored are based on a general framework based on quantifier elimination as proposed by Kapur in 2003-2004, such general techniques are of high complexiy and consequently are difficult to scale to work for large programs. Approximations are identified based on geometry of invariants and locality properties of programs so that efficient algorithms can be developed by sacrificing completeness somewhat.  The performance of the algorithms has been compared against other tools for generating such invariants including ASTREE and Interproc. Our methods generate invariants which are mostly stronger or at least as good as generated by those tools. Extensions to automatically generate disjunctive invariants so as to capture range of variables to lie in nonconvex domains have been explored using min, max, and absolute value functions. A tool embodying these algorithms is under development. A number of graduate students and a post doctoral fellow worked on the project. Collaborations with other academic institutions were also developed. Papers reporting results of the project have been published in a journal, conferences proceedings, books and workshop proceedings.       Last Modified: 11/17/2014       Submitted by: Deepak Kapur]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
