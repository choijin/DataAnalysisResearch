<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Collaborative Research: Compiler and Architecture Support for Avoiding Writes to Memory-Preliminary Study</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/15/2012</AwardEffectiveDate>
<AwardExpirationDate>04/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>74861.00</AwardTotalIntnAmount>
<AwardAmount>74861</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The cost of writing data from a computer's processor to its storage components remains a bottleneck for modern computing systems. The speed of the processor continues to improve, more processing units are packed into a computer chip, but these advances only cause more data to be written to storage per second. The speed of storage subsystems has not kept pace with the processor?s ability to produce data for storage, and this difference in performance is likely to continue. Moreover, the trend in building storage subsystems for computers is to utilize technologies such as flash memories whose contents can be changed a relatively small number of times before the memory wears out. These technologies are cheaper and pack more storage into a given area, but care must be taken to avoid writing to memories made from such technologies at rates usually seen from a processor to memory. &lt;br/&gt;&lt;br/&gt;This EAGER project aims to discover mechanisms that reduce or eliminate traffic from a processor to the storage subsystem. Elimination of such traffic increases the speed of the overall system and saves wear on storage components. This research finds data that would otherwise be sent to storage from the processor and eliminates such writes to memory. This technique is based on finding that such data cannot subsequently be referenced by an application. This effort focuses on a preliminary study to validate the technical approach, namely investigating the consequences of eliminating stores of data that has been explicitly deallocated by an application.</AbstractNarration>
<MinAmdLetterDate>05/09/2012</MinAmdLetterDate>
<MaxAmdLetterDate>05/09/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1237417</AwardID>
<Investigator>
<FirstName>Krishna</FirstName>
<LastName>Kavi</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Krishna M Kavi</PI_FULL_NAME>
<EmailAddress>krishna.kavi@unt.edu</EmailAddress>
<PI_PHON>9403697216</PI_PHON>
<NSF_ID>000374348</NSF_ID>
<StartDate>05/09/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of North Texas</Name>
<CityName>Denton</CityName>
<ZipCode>762035017</ZipCode>
<PhoneNumber>9405653940</PhoneNumber>
<StreetAddress>1155 Union Circle #305250</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>26</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX26</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>614168995</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NORTH TEXAS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>064117963</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of North Texas]]></Name>
<CityName>Denton</CityName>
<StateCode>TX</StateCode>
<ZipCode>762035017</ZipCode>
<StreetAddress><![CDATA[1155 Union Circle, #311366]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>26</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX26</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~74861</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The major outcomes of the project titled, "Compiler and Architecture Support for Avoiding Writes to Memory-Preliminary Study", are the simulation results that support our claims on the intellectual merits of our research regarding the performance and energy savings which can result from eliminating unnecessary write-backs in a computer systems' memory hierarchy. Data needed by programs is brought closer to the processor through several levels of cache memories and main memory. When data is modified, the modifications will be propagated back through the hierarchy when the data item is evicted from cache memories. Our study shows that not all evicted data needs to be written back, particularly when the modified data is no longer needed: a data item is not needed because either it is deleted by the program or the data is not accessible because there are no other objects referencing the data. Our study explored the savings both for program written in C where objects are explicitly deleted and program written in Java, where deleted objects are identified during garbage collection.</p> <p>Based on our simulation studies, for programs written in C, eliminating unnecessary write-backs can result in an average energy savings of 15%, and eliminate 44% of write-backs.</p> <p>Several experimental artifacts resulted from the project. Gleipinir is a binary instrumentation tool which can track each memory reference and relate the memory access to a specific program object (variable, function, thread, process or core). This tool is now modified such that along with the address of a memory location accessed, the contents of that memory location are printed. This is the key to our study in identifying dusty writes. Gleipnir is also modified to track current stack frames as well as memory allocation and free functions.</p> <p>Dinero is a cache simulator that is widely used in computer architecture research. However Dinero does not allow for multicore traces, nor does it allow us to understand which write-backs are unnecessary. We developed a new cache simulator called Mula to overcome these limitations.</p><br> <p>            Last Modified: 05/28/2014<br>      Modified by: Krishna&nbsp;M&nbsp;Kavi</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The major outcomes of the project titled, "Compiler and Architecture Support for Avoiding Writes to Memory-Preliminary Study", are the simulation results that support our claims on the intellectual merits of our research regarding the performance and energy savings which can result from eliminating unnecessary write-backs in a computer systems' memory hierarchy. Data needed by programs is brought closer to the processor through several levels of cache memories and main memory. When data is modified, the modifications will be propagated back through the hierarchy when the data item is evicted from cache memories. Our study shows that not all evicted data needs to be written back, particularly when the modified data is no longer needed: a data item is not needed because either it is deleted by the program or the data is not accessible because there are no other objects referencing the data. Our study explored the savings both for program written in C where objects are explicitly deleted and program written in Java, where deleted objects are identified during garbage collection.  Based on our simulation studies, for programs written in C, eliminating unnecessary write-backs can result in an average energy savings of 15%, and eliminate 44% of write-backs.  Several experimental artifacts resulted from the project. Gleipinir is a binary instrumentation tool which can track each memory reference and relate the memory access to a specific program object (variable, function, thread, process or core). This tool is now modified such that along with the address of a memory location accessed, the contents of that memory location are printed. This is the key to our study in identifying dusty writes. Gleipnir is also modified to track current stack frames as well as memory allocation and free functions.  Dinero is a cache simulator that is widely used in computer architecture research. However Dinero does not allow for multicore traces, nor does it allow us to understand which write-backs are unnecessary. We developed a new cache simulator called Mula to overcome these limitations.       Last Modified: 05/28/2014       Submitted by: Krishna M Kavi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
