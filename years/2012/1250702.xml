<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Automatic Classification of Programming Difficulties by Mining Programming Events</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>100000.00</AwardTotalIntnAmount>
<AwardAmount>124960</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>William Bainbridge</SignBlockName>
<PO_EMAI>wbainbri@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Today, when a student or industrial programmer faces difficulty in some task assigned to him/her, this event often goes unrecorded and unobserved by others. As a result, it is not possible to use mechanisms to ameliorate the effect of the difficulty. In this project, the researchers will address this problem by automatically detecting and classifying programming difficulties by mining programmers' interaction with the computer.  Specifically, they will investigate (a) whether it is possible to automatically identify the barrier causing a difficulty and (b) whether it is possible to determine the severity of the difficulty.  The project will start a new area of research exploring how difficulty-detection mechanisms should be designed, implemented, evaluated, and applied.&lt;br/&gt;&lt;br/&gt;Broader impacts:  If successful this research will lead to future work on a variety of difficulty amelioration mechanisms, including (a) allowing industrial workers and teachers to synchronously push help to developers facing difficulties; (b) informing developers facing difficulties about actions taken by others who overcame similar difficulties, so that they can take similar actions; (c) allowing assignment doers to anticipate the kind of difficulties they will encounter and thus be better prepared for the assignment;  and  (d) giving assignment definers an understanding of the inherent difficulty level of the assignment, which can lead to redefinition or better explanation of the assignment. These amelioration mechanisms can substantially reduce the high costs associated with software development and quality teaching, and transform collaborative software engineering and education. Such mechanisms can lead to significant productivity gains in industry, especially in distributed software development. An educational setting provides an even more compelling motivation because shyness of students and/or lack of instructor time prevents student difficulties from being addressed in a timely manner.  In computer science this is particularly a problem as a small mistake can prove to be very costly. The difficulty amelioration mechanisms will reduce this problem and thus attract a larger variety of students to computer science and empower those who are already committed to it.</AbstractNarration>
<MinAmdLetterDate>08/25/2012</MinAmdLetterDate>
<MaxAmdLetterDate>04/25/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1250702</AwardID>
<Investigator>
<FirstName>Prasun</FirstName>
<LastName>Dewan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Prasun Dewan</PI_FULL_NAME>
<EmailAddress>dewan@cs.unc.edu</EmailAddress>
<PI_PHON>9195906123</PI_PHON>
<NSF_ID>000336210</NSF_ID>
<StartDate>08/25/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of North Carolina at Chapel Hill</Name>
<CityName>CHAPEL HILL</CityName>
<ZipCode>275991350</ZipCode>
<PhoneNumber>9199663411</PhoneNumber>
<StreetAddress>104 AIRPORT DR STE 2200</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>608195277</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of North Carolina at Chapel Hill]]></Name>
<CityName>Chapel hill</CityName>
<StateCode>NC</StateCode>
<ZipCode>275993175</ZipCode>
<StreetAddress><![CDATA[201 S. Columbia st. CB 3175]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7367</Code>
<Text>HCC-Human-Centered Computing</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7953</Code>
<Text>SOCIAL-COMPUTATIONAL SYSTEMS</Text>
</ProgramElement>
<ProgramElement>
<Code>8020</Code>
<Text>Cyberlearn &amp; Future Learn Tech</Text>
</ProgramElement>
<ProgramReference>
<Code>7367</Code>
<Text>Cyber-Human Systems</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>7953</Code>
<Text>SOCIAL-COMPUTATIONAL SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>8045</Code>
<Text>Cyberlearn &amp; Future Learn Tech</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~100000</FUND_OBLG>
<FUND_OBLG>2013~12480</FUND_OBLG>
<FUND_OBLG>2014~12480</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>An important form of group activity involves helping others with their difficulties. Previous research shows that helping others increases productivity in work environments and learning in educational environments, and that people are hesitant about asking for help. This project initiated a new line of research for automatically inferring the nature of difficulties of programmers, so that observers of this information can offer help. In industry, this work can reduce the cost of developing all forms of programs and improve their quality. In educational environments, the applications are as dramatic. Absence of help is a particular issue for underrepresented groups who often do not have a study group to help them. Several students are turned off by programming because a small mistake can prove to be very costly. Difficulty inferences can help retain and empower varied groups of students in programming-based courses and curricula.</p> <p>The goal of this project was to automatically determine the degree and type of difficulty faced by the programmer.</p> <p>To determine the difficulty degree, we performed lab study to distinguish between surmountable and insurmountable difficulties. Our observations showed that when subjects face insurmountable difficulties, they pause interaction, and when they face surmountable difficulties, they tend to repeat certain action sequences. Pausing of interaction also occurs when people take a break, so it was difficult to separate insurmountable difficulties from idle phases. Therefore, we assumed a two-phase scheme for detecting and classifying difficulties. In the first phase, some other algorithm or human input is used to determine the points at which difficulties arise. In the second phase, a level-detection algorithm is used to classify difficulties into surmountable and insurmountable. Our level-detection algorithm detected the sequences of actions that occur during surmountable difficulties to distinguish the surmountable difficulties from the insurmountable ones. Our evaluation shows that the mechanism gives significantly better results than the baselines. Part of this work was published in a refereed paper and Ph.D thesis.</p> <p>To determine the difficulty type or barrier, we did two field studies, one with industry workers and one with students. Our observations showed that when programmers had incorrect output, the execution rate and frequency of certain commands changed. Because of the problem of distinguishing between idle and pause phases, we again assumed a two-phase scheme for detecting and classifying difficulties in which in the second phase a barrier detection algorithm is used to classify difficulties found in the first phase. We developed a barrier detection algorithm that mined the rate and frequency of commands to separate design barriers from incorrect-output barriers and performed much better than the baselines. Part of this work was published in a refereed paper and a Ph.D. thesis.</p> <p>Our algorithms for difficulty classification depend on those for difficulty detection. Our previous difficulty detection scheme used only interaction logs. While such logs cannot distinguish between idle and difficulty phases, video streams can.&nbsp; We captured such streams and found that postures correlated with difficulties. We developed algorithms that detected postures from video streams, and then mined the postures to detect difficulties. In addition, we developed a multimodal algorithm for mining both video streams and interaction logs. Our results show that log-mining was more effective than posture-mining, though both had high false negative rates, and multimodal detection gave both low false positive and negative rates. Part of this work was published in a Ph.D thesis.</p> <p>To gain insight into industry applications of a difficulty-based collaboration environment, we conducted interviews with several mentor-int...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ An important form of group activity involves helping others with their difficulties. Previous research shows that helping others increases productivity in work environments and learning in educational environments, and that people are hesitant about asking for help. This project initiated a new line of research for automatically inferring the nature of difficulties of programmers, so that observers of this information can offer help. In industry, this work can reduce the cost of developing all forms of programs and improve their quality. In educational environments, the applications are as dramatic. Absence of help is a particular issue for underrepresented groups who often do not have a study group to help them. Several students are turned off by programming because a small mistake can prove to be very costly. Difficulty inferences can help retain and empower varied groups of students in programming-based courses and curricula.  The goal of this project was to automatically determine the degree and type of difficulty faced by the programmer.  To determine the difficulty degree, we performed lab study to distinguish between surmountable and insurmountable difficulties. Our observations showed that when subjects face insurmountable difficulties, they pause interaction, and when they face surmountable difficulties, they tend to repeat certain action sequences. Pausing of interaction also occurs when people take a break, so it was difficult to separate insurmountable difficulties from idle phases. Therefore, we assumed a two-phase scheme for detecting and classifying difficulties. In the first phase, some other algorithm or human input is used to determine the points at which difficulties arise. In the second phase, a level-detection algorithm is used to classify difficulties into surmountable and insurmountable. Our level-detection algorithm detected the sequences of actions that occur during surmountable difficulties to distinguish the surmountable difficulties from the insurmountable ones. Our evaluation shows that the mechanism gives significantly better results than the baselines. Part of this work was published in a refereed paper and Ph.D thesis.  To determine the difficulty type or barrier, we did two field studies, one with industry workers and one with students. Our observations showed that when programmers had incorrect output, the execution rate and frequency of certain commands changed. Because of the problem of distinguishing between idle and pause phases, we again assumed a two-phase scheme for detecting and classifying difficulties in which in the second phase a barrier detection algorithm is used to classify difficulties found in the first phase. We developed a barrier detection algorithm that mined the rate and frequency of commands to separate design barriers from incorrect-output barriers and performed much better than the baselines. Part of this work was published in a refereed paper and a Ph.D. thesis.  Our algorithms for difficulty classification depend on those for difficulty detection. Our previous difficulty detection scheme used only interaction logs. While such logs cannot distinguish between idle and difficulty phases, video streams can.  We captured such streams and found that postures correlated with difficulties. We developed algorithms that detected postures from video streams, and then mined the postures to detect difficulties. In addition, we developed a multimodal algorithm for mining both video streams and interaction logs. Our results show that log-mining was more effective than posture-mining, though both had high false negative rates, and multimodal detection gave both low false positive and negative rates. Part of this work was published in a Ph.D thesis.  To gain insight into industry applications of a difficulty-based collaboration environment, we conducted interviews with several mentor-intern pairs in a large industrial organization. We showed them the design of a user interface for s...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
