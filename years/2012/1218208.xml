<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Modular Reflection</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2012</AwardEffectiveDate>
<AwardExpirationDate>09/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>As the internet and mobile devices become increasingly important&lt;br/&gt;parts of our society, the need for web and mobile applications has&lt;br/&gt;grown. Recent advances in software frameworks have drastically&lt;br/&gt;reduced the amount of code needed to develop such applications. From a&lt;br/&gt;programming languages perspective, the key enabling technology is&lt;br/&gt;reflection, that is, the ability of a program to introspect and to&lt;br/&gt;modify itself. Unfortunately, reflection comes at a heavy cost:&lt;br/&gt;it can delay the detection of bugs, it reduces the effectiveness of&lt;br/&gt;bug-finding tools, and it reduces the speed of applications. The&lt;br/&gt;goal of this research project is to preserve the benefits of&lt;br/&gt;reflection while eliminating the disadvantages, thereby improving the&lt;br/&gt;reliability and speed of web and mobile applications.&lt;br/&gt;&lt;br/&gt;The key observation that underlies this research is that uses of&lt;br/&gt;reflection in software frameworks are governed by implicit&lt;br/&gt;conventions. If those conventions could be made explicit, then&lt;br/&gt;automated software tools will be able to effectively reason about&lt;br/&gt;reflective code. This research will create a rich specification&lt;br/&gt;language for making those conventions explicit, it will investigate&lt;br/&gt;algorithms for inferring specifications from existing &lt;br/&gt;application code, and it will develop tools for checking the&lt;br/&gt;conformance of web-mobile applications and frameworks with respect to &lt;br/&gt;specifications.</AbstractNarration>
<MinAmdLetterDate>09/07/2012</MinAmdLetterDate>
<MaxAmdLetterDate>09/07/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218208</AwardID>
<Investigator>
<FirstName>Jeremy</FirstName>
<LastName>Siek</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jeremy G Siek</PI_FULL_NAME>
<EmailAddress>jsiek@indiana.edu</EmailAddress>
<PI_PHON>3037480532</PI_PHON>
<NSF_ID>000086759</NSF_ID>
<StartDate>09/07/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Bor-Yuh Evan</FirstName>
<LastName>Chang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bor-Yuh Evan Chang</PI_FULL_NAME>
<EmailAddress>evan.chang@colorado.edu</EmailAddress>
<PI_PHON>3034928894</PI_PHON>
<NSF_ID>000512429</NSF_ID>
<StartDate>09/07/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Boulder</Name>
<CityName>Boulder</CityName>
<ZipCode>803031058</ZipCode>
<PhoneNumber>3034926221</PhoneNumber>
<StreetAddress>3100 Marine Street, Room 481</StreetAddress>
<StreetAddress2><![CDATA[572 UCB]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>007431505</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF COLORADO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007431505</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Colorado at Boulder]]></Name>
<CityName>Boulder</CityName>
<StateCode>CO</StateCode>
<ZipCode>803090572</ZipCode>
<StreetAddress><![CDATA[3100 Marine St. Room 479]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Modern web application frameworks have transformed the way programmers create sophisticated, rich, interactive applications by capturing commonality and drastically reducing the amount of boilerplate code needed to get started. From a programming languages perspective, these frameworks are enabled by run-time reflection in dynamic languages---the ability for a program to read and modify its own meta-data. However, reflection comes at a steep cost. Reflection reduces the modularity because of its reliance on implicit conventions that than result in run-time errors deep inside the internals of the framework that are mysterious to developers and end-users alike.</p> <p>The objective of this project was to ease the tension between reflection and modularity by investigating software verification and analysis techniques that consider flexible reflection and sound modularity as equally important in software and language design. Amongst the outcomes of this project were several important advances in analysis techniques that bridge this divide.<br />Fissile Type Analysis introduced the notion of almost everywhere invariants that intertwines specification of "almost invariants" that almost hold globally but may be temporarily violated. Coupling such specifications with symbolic program analysis enables modular checking of reflection safety with speeds that become feasible to incorporate into integrated development environments for software developers.</p> <p>Heaps with Open Objects introduced abstract domains for reasoning dynamic language heaps---that is, reasoning engines that consider dynamic language heaps differently than their static language counterparts. These developments enable modular checking of application frameworks that are uniquely designed around reflection and dynamic languages.<br />The developments were disseminated at top venues for programming languages and verification research, including the Symposium on Principles of Programming Languages, the European Symposium on Programming, the Static Analysis Symposium, the Conference on Computer-Aided Verification, and the European Conference on Object-Oriented Programming. The work in this project has also led to fostering fostering new connections with industry and building international collaboration.</p> <p>Students who have previously worked on this project have continued upon graduation to important positions for improving software quality in private industry and government.</p><br> <p>            Last Modified: 12/31/2016<br>      Modified by: Bor-Yuh Evan&nbsp;Chang</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483145553428_outcomes-fig.001--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483145553428_outcomes-fig.001--rgov-800width.jpg" title="Verification of almost-everywhere invariants with intertwined type- and separation logic-based analysis"><img src="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483145553428_outcomes-fig.001--rgov-66x44.jpg" alt="Verification of almost-everywhere invariants with intertwined type- and separation logic-based analysis"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Verification of almost-everywhere invariants with intertwined type- and separation logic-based analysis</div> <div class="imageCredit">Devin Coughlin and Bor-Yuh Evan Chang</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Bor-Yuh Evan&nbsp;Chang</div> <div class="imageTitle">Verification of almost-everywhere invariants with intertwined type- and separation logic-based analysis</div> </div> </li> <li> <a href="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483145626216_outcomes-fig.002--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483145626216_outcomes-fig.002--rgov-800width.jpg" title="Split the heap into two regions: almost type-consistent and (potentially) immediately type-inconsistent"><img src="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483145626216_outcomes-fig.002--rgov-66x44.jpg" alt="Split the heap into two regions: almost type-consistent and (potentially) immediately type-inconsistent"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Split the heap into two regions: almost type-consistent and (potentially) immediately type-inconsistent</div> <div class="imageCredit">Devin Coughlin and Bor-Yuh Evan Chang</div> <div class="imageSubmitted">Bor-Yuh Evan&nbsp;Chang</div> <div class="imageTitle">Split the heap into two regions: almost type-consistent and (potentially) immediately type-inconsistent</div> </div> </li> <li> <a href="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483157029986_outcomes-fig.003--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483157029986_outcomes-fig.003--rgov-800width.jpg" title="Soundness of Fissile Type Analysis"><img src="/por/images/Reports/POR/2016/1218208/1218208_10212068_1483157029986_outcomes-fig.003--rgov-66x44.jpg" alt="Soundness of Fissile Type Analysis"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Soundness of Fissile Type Analysis</div> <div class="imageCredit">Devin Coughlin and Bor-Yuh Evan Chang</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Bor-Yuh Evan&nbsp;Chang</div> <div class="imageTitle">Soundness of Fissile Type Analysis</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Modern web application frameworks have transformed the way programmers create sophisticated, rich, interactive applications by capturing commonality and drastically reducing the amount of boilerplate code needed to get started. From a programming languages perspective, these frameworks are enabled by run-time reflection in dynamic languages---the ability for a program to read and modify its own meta-data. However, reflection comes at a steep cost. Reflection reduces the modularity because of its reliance on implicit conventions that than result in run-time errors deep inside the internals of the framework that are mysterious to developers and end-users alike.  The objective of this project was to ease the tension between reflection and modularity by investigating software verification and analysis techniques that consider flexible reflection and sound modularity as equally important in software and language design. Amongst the outcomes of this project were several important advances in analysis techniques that bridge this divide. Fissile Type Analysis introduced the notion of almost everywhere invariants that intertwines specification of "almost invariants" that almost hold globally but may be temporarily violated. Coupling such specifications with symbolic program analysis enables modular checking of reflection safety with speeds that become feasible to incorporate into integrated development environments for software developers.  Heaps with Open Objects introduced abstract domains for reasoning dynamic language heaps---that is, reasoning engines that consider dynamic language heaps differently than their static language counterparts. These developments enable modular checking of application frameworks that are uniquely designed around reflection and dynamic languages. The developments were disseminated at top venues for programming languages and verification research, including the Symposium on Principles of Programming Languages, the European Symposium on Programming, the Static Analysis Symposium, the Conference on Computer-Aided Verification, and the European Conference on Object-Oriented Programming. The work in this project has also led to fostering fostering new connections with industry and building international collaboration.  Students who have previously worked on this project have continued upon graduation to important positions for improving software quality in private industry and government.       Last Modified: 12/31/2016       Submitted by: Bor-Yuh Evan Chang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
