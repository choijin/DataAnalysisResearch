<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:  Conceptualizing an Institute for Using Inter-Domain Abstractions to Support Inter-Disciplinary Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2012</AwardEffectiveDate>
<AwardExpirationDate>09/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>135000.00</AwardTotalIntnAmount>
<AwardAmount>135000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rajiv Ramnath</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This grant is a planning grant to fund the conceptualization of an institute for software infrastructure for sustained innovation. It funds the planning of the technical and organizational aspects. To understand community requirements, it involves workshops and outreach to gather community requirements. &lt;br/&gt;&lt;br/&gt;To fully understand the behavior of a complex physical phenomenon such as a burning building, it is often necessary to understand both large-scale effects such as the buildup of heat on each floor, and small-scale effects, such as how a steal beam in the foundation deforms as it gets hotter. Computational simulations that study such effects in tandem are called "multi-scale" simulations, and are exceedingly difficult to write. This is because the computational models that represent the different scales differ widely, and the software components used to simulate each scale are often incompatible. Combining these disparate components requires painstaking and error prone programmer labor.&lt;br/&gt; &lt;br/&gt;This project will conceptualize an institute devoted to providing solutions to scientists investigating multi-scale problems.  The project centers around reaching out to computational scientists and computer systems researchers to determine both what kinds of programming abstractions may be useful for different computational models and how to best adapt existing abstractions to the challenges of multi-scale simulation. The goal is to enable the establishment of an institute that will study the use of various programming abstractions to bridge the gap between differing software components, hence easing the pain of writing multi-scale simulations. The ultimate effect will be to allow multi-scale systems to be simulated accurately and efficiently, providing deeper insights into the behavior of complex physical systems.</AbstractNarration>
<MinAmdLetterDate>09/24/2012</MinAmdLetterDate>
<MaxAmdLetterDate>10/15/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1216788</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Padua</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David A Padua</PI_FULL_NAME>
<EmailAddress>padua@uiuc.edu</EmailAddress>
<PI_PHON>2173334233</PI_PHON>
<NSF_ID>000317715</NSF_ID>
<StartDate>09/24/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>John</FirstName>
<LastName>Hart</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John C Hart</PI_FULL_NAME>
<EmailAddress>jch@cs.uiuc.edu</EmailAddress>
<PI_PHON>2173338740</PI_PHON>
<NSF_ID>000307735</NSF_ID>
<StartDate>09/24/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Philippe</FirstName>
<LastName>Geubelle</LastName>
<PI_MID_INIT>H</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Philippe H Geubelle</PI_FULL_NAME>
<EmailAddress>geubelle@illinois.edu</EmailAddress>
<PI_PHON>2172447648</PI_PHON>
<NSF_ID>000488606</NSF_ID>
<StartDate>09/24/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>2878</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8211</Code>
<Text>S2I2 - Scient Sftwre Innovat Insts</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~135000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of the project was to develop a strategic plan for creating an institute that could develop software methodologies and implementations to enable engineers and scientists to use high-performance parallel computers without having to invest immense amounts of time and effort in learning the idiosyncrasies of each parallel computer.<br />Intellectual merit: Parallel programming has always been a challenge, but new trends in computer hardware and in applications are aggravating this problem. The hardware of parallel computers is getting more heterogeneous, consisting today of clusters of conventional processing cores, graphical processing units (GPUs), and a type of programmable hardware called FPGAs. Programming such heterogeneous computers is more challenging than programming homogeneous machines consisting of conventional processing cores, which were the standard until recently. Furthermore, application programs are becoming more complex since they now model complex phenomena involving multiple domains such as fluid mechanics and fracture mechanics, instead being restricted to a single domain.<br />To address these problems, the project brought together an interdisciplinary team of computer scientists and researchers from application areas such as fracture mechanics and computational biology.<br />The most promising methodology identified by the team is to define and implement a set of semantically-rich software abstractions that will isolate the application programmer from the complexity of heterogeneous parallel computers.<br />In this context, the term software abstractions means (i) a set of software routines that have been optimized for different parallel computers by a small group of expert parallel programmers, usually computer scientists, and (ii) &nbsp;an accompanying set of well-defined interfaces (known as APIs) to these routines so that they can be used by application programmers without knowing the internals of these routines. The term semantically-rich software abstractions means that the APIs for the routines are associated with specifications of what these routines accomplish, so that these routines can be combined and optimized automatically by compilers and runtime systems.<br />To demonstrate the feasibility of this approach, the team implemented such abstractions for sparse graph computations. These computations arise in many problem domains including finite-element solvers for partial differential equations, web search, recommendation systems, visualization and computational biology. This software, called the Galois system, was made publicly available for download. Researchers unconnected to this project have used it for doing FPGA placement and routing in parallel, as well as for implementing multifrontal solvers for fracture problems, demonstrating the feasibility of the proposed approach.<br />These experiences were key to the formulation of a strategic plan for creating an Institute for using inter-domain abstractions to support inter-disciplinary applications.<br />Broader impact: Team members held several workshops and tutorials at major venues such as Supercomputing to inform the community of this project, to get their feedback on the proposed strategy, and to train them to use the Galois system for applications that involved sparse graph computations. In addition, course material was developed at the project sites for use in graduate and undergraduate courses. Roughly a dozen graduate students at the Masters and PhD levels have been involved in various aspects of this project including the design and implementation of the software artifacts and the preparation of tutorial material.</p><br> <p>            Last Modified: 06/28/2017<br>      Modified by: David&nbsp;A&nbsp;Padua</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of the project was to develop a strategic plan for creating an institute that could develop software methodologies and implementations to enable engineers and scientists to use high-performance parallel computers without having to invest immense amounts of time and effort in learning the idiosyncrasies of each parallel computer. Intellectual merit: Parallel programming has always been a challenge, but new trends in computer hardware and in applications are aggravating this problem. The hardware of parallel computers is getting more heterogeneous, consisting today of clusters of conventional processing cores, graphical processing units (GPUs), and a type of programmable hardware called FPGAs. Programming such heterogeneous computers is more challenging than programming homogeneous machines consisting of conventional processing cores, which were the standard until recently. Furthermore, application programs are becoming more complex since they now model complex phenomena involving multiple domains such as fluid mechanics and fracture mechanics, instead being restricted to a single domain. To address these problems, the project brought together an interdisciplinary team of computer scientists and researchers from application areas such as fracture mechanics and computational biology. The most promising methodology identified by the team is to define and implement a set of semantically-rich software abstractions that will isolate the application programmer from the complexity of heterogeneous parallel computers. In this context, the term software abstractions means (i) a set of software routines that have been optimized for different parallel computers by a small group of expert parallel programmers, usually computer scientists, and (ii)  an accompanying set of well-defined interfaces (known as APIs) to these routines so that they can be used by application programmers without knowing the internals of these routines. The term semantically-rich software abstractions means that the APIs for the routines are associated with specifications of what these routines accomplish, so that these routines can be combined and optimized automatically by compilers and runtime systems. To demonstrate the feasibility of this approach, the team implemented such abstractions for sparse graph computations. These computations arise in many problem domains including finite-element solvers for partial differential equations, web search, recommendation systems, visualization and computational biology. This software, called the Galois system, was made publicly available for download. Researchers unconnected to this project have used it for doing FPGA placement and routing in parallel, as well as for implementing multifrontal solvers for fracture problems, demonstrating the feasibility of the proposed approach. These experiences were key to the formulation of a strategic plan for creating an Institute for using inter-domain abstractions to support inter-disciplinary applications. Broader impact: Team members held several workshops and tutorials at major venues such as Supercomputing to inform the community of this project, to get their feedback on the proposed strategy, and to train them to use the Galois system for applications that involved sparse graph computations. In addition, course material was developed at the project sites for use in graduate and undergraduate courses. Roughly a dozen graduate students at the Masters and PhD levels have been involved in various aspects of this project including the design and implementation of the software artifacts and the preparation of tutorial material.       Last Modified: 06/28/2017       Submitted by: David A Padua]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
