<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: Localized, Layered Formal Hardware/Software Resilience Methods</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/01/2013</AwardEffectiveDate>
<AwardExpirationDate>03/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>94500.00</AwardTotalIntnAmount>
<AwardAmount>94500</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The drive for increased performance and functionality has pushed computer chips to their physical limits of power/energy and reliability. Future computing systems are likely to suffer from high fault rates, undermining their programmability and usability. This research project will leverage existing techniques and invent new techniques to detect, isolate, and recover from faults and to ensure overall system resilience, with minimal impact on performance. The project taps into the rich body of past work on formal methods, which have been successful in finding logical errors in systems. Newly developed formal methods will focus on resilience enhancement. The project will also explore the inherent trade-offs between performance, power, and resilience. The project will develop an extensible platform for empirical evaluation of resilience methods. This platform will be comprised of programmable chips and accompanying software components.&lt;br/&gt;&lt;br/&gt;This project will foster the development of new system design methods which take reliability into account. It will help fill a serious void in readily usable infrastructures for resiliency studies in the realm of parallel systems by developing and releasing tools for evaluating the methods.  The project will also develop and release rigorously specified resilience-aware system interfaces. The project emphasizes student training, including student recruitment and introduction of new classes that are integrated with resilience research.</AbstractNarration>
<MinAmdLetterDate>02/04/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/16/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1255949</AwardID>
<Investigator>
<FirstName>Pedro</FirstName>
<LastName>Diniz</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Pedro Diniz</PI_FULL_NAME>
<EmailAddress>pedro@isi.edu</EmailAddress>
<PI_PHON>3104488246</PI_PHON>
<NSF_ID>000489530</NSF_ID>
<StartDate>02/04/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName>Marina del Rey</CityName>
<StateCode>CA</StateCode>
<ZipCode>902926611</ZipCode>
<StreetAddress><![CDATA[4676 Admiralty Way, Suite 1001]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA33</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8081</Code>
<Text>Failure Resistant Systems(FRS)</Text>
</ProgramElement>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~63000</FUND_OBLG>
<FUND_OBLG>2014~15750</FUND_OBLG>
<FUND_OBLG>2015~15750</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>&nbsp;</strong>This research addresses the issues of silent data corruption that is permeating with increasingly acuteness today&rsquo;s computing infrastructures, from the occasional reboot of your desktop to the crash of your mobile device app. While in many cases there are built-in inexpensive mechanisms to deal with errors such as error correction codes are the memory level, at the core of the computing devices &ndash; the CPU &ndash; the traditional approaches to deal with error have been hardware redundancy.</p> <p>The replication of hardware to performance essentially the same task is expensive in particular in terms of energy &ndash; an increasingly precious commodity for both embedded devices as well as high-end computing systems. To address this issue, we have leverage the judicious use of predicates (logic expressions that have a true or false value) that should hold at specific execution points of the program and which are consistent to the correct execution of the software code. If false, such predicates would indicate that an error that was not detected by the underlying hardware error detection mechanism, indeed occurred and the computation should either halt or be redirected to an amelioration procedure.</p> <p>Rather than relying on hardware replication, we have explored the development of a specific predicate evaluation unit, to be coupled with the core processor on an embedded devices and be configured according to the needs of the specific predicates to be evaluated for each program. This, approach had the promise of substantial energy savings while allowing for a software-controlled definition of the selected predicates at each execution point and thus ensuring a good coverage of the types of errors.</p> <p>&nbsp;We have carried out research in designing, implementing and evaluation a hardware predicate unit and coupled it with a MIPS 32-bit soft-core processor core (a widely popular and available processor) implementation on configurable hardware (a Field-Programmable Gate-Array or FPGA). This predicate unit directly monitors the state of the MIPS processor by inspecting its registers and evaluates in hardware the specific predicate. We evaluated this approach in the context of a selected set of computational kernel codes written in a popular programming language, the C programming language, pervasive in the context of embedded devices. Despite, the very low execution time and silicon area space overhead, and the ability to effectively evaluate the predicates in hardware, these experiments reveal that the interactions with the compiler&rsquo;s internals when targeting this augmented resilient MIPS processor core was sophisticated and required some non-trivial investment from the compiler&rsquo;s implementation. Two scholarly publications produced as the result of this research describe in details these findings. In addition, we have also developed a set of parameterizable implementations of the predicate evaluation unit in a hardware description (Verilog) that can be integrated with the Verilog description of the MIPS 32-bit core itself as made available by the University of Utah (a partner in this research project).</p> <p>Last, but not the least, this project also served as the vehicle for the training of one Computer Science graduate student, Ms. Setareh Nasihati who contributed to the development of the predicate evaluation units in Verilog and supported the compiler development using LLVM.</p><br> <p>            Last Modified: 04/18/2016<br>      Modified by: Pedro&nbsp;Diniz</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  This research addresses the issues of silent data corruption that is permeating with increasingly acuteness todayÃ†s computing infrastructures, from the occasional reboot of your desktop to the crash of your mobile device app. While in many cases there are built-in inexpensive mechanisms to deal with errors such as error correction codes are the memory level, at the core of the computing devices &ndash; the CPU &ndash; the traditional approaches to deal with error have been hardware redundancy.  The replication of hardware to performance essentially the same task is expensive in particular in terms of energy &ndash; an increasingly precious commodity for both embedded devices as well as high-end computing systems. To address this issue, we have leverage the judicious use of predicates (logic expressions that have a true or false value) that should hold at specific execution points of the program and which are consistent to the correct execution of the software code. If false, such predicates would indicate that an error that was not detected by the underlying hardware error detection mechanism, indeed occurred and the computation should either halt or be redirected to an amelioration procedure.  Rather than relying on hardware replication, we have explored the development of a specific predicate evaluation unit, to be coupled with the core processor on an embedded devices and be configured according to the needs of the specific predicates to be evaluated for each program. This, approach had the promise of substantial energy savings while allowing for a software-controlled definition of the selected predicates at each execution point and thus ensuring a good coverage of the types of errors.   We have carried out research in designing, implementing and evaluation a hardware predicate unit and coupled it with a MIPS 32-bit soft-core processor core (a widely popular and available processor) implementation on configurable hardware (a Field-Programmable Gate-Array or FPGA). This predicate unit directly monitors the state of the MIPS processor by inspecting its registers and evaluates in hardware the specific predicate. We evaluated this approach in the context of a selected set of computational kernel codes written in a popular programming language, the C programming language, pervasive in the context of embedded devices. Despite, the very low execution time and silicon area space overhead, and the ability to effectively evaluate the predicates in hardware, these experiments reveal that the interactions with the compilerÃ†s internals when targeting this augmented resilient MIPS processor core was sophisticated and required some non-trivial investment from the compilerÃ†s implementation. Two scholarly publications produced as the result of this research describe in details these findings. In addition, we have also developed a set of parameterizable implementations of the predicate evaluation unit in a hardware description (Verilog) that can be integrated with the Verilog description of the MIPS 32-bit core itself as made available by the University of Utah (a partner in this research project).  Last, but not the least, this project also served as the vehicle for the training of one Computer Science graduate student, Ms. Setareh Nasihati who contributed to the development of the predicate evaluation units in Verilog and supported the compiler development using LLVM.       Last Modified: 04/18/2016       Submitted by: Pedro Diniz]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
