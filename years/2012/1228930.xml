<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Medium: Collaborative: Flexible and Practical Information Flow Assurance for Mobile Apps</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2012</AwardEffectiveDate>
<AwardExpirationDate>06/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>526628.00</AwardTotalIntnAmount>
<AwardAmount>631808</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project is developing tools and techniques for cost-effective evaluation of the trustworthiness of mobile applications (apps).  The work focuses on enterprise scenarios, in which personnel at a business or government agency use mission-related apps and access enterprise networks.&lt;br/&gt;&lt;br/&gt;In such scenarios there are incentives and resources for much more substantive evaluations and controls on information flow than are currently found in commodity app marketplaces.  The project aims to advance the science needed for static techniques to be usable by professional development and evaluation teams and useful for achieving dramatically improved assurance.  The project's goals are to: (a) find flexible and expressive ways to specify information flow requirements for apps, (b) find effective ways to specify what is assumed about the Android platform, and (c) find practical static analysis and verification techniques to check security of apps with respect to given policies and the platform. Results include specification techniques and theory - models and algorithms.  These are applied in case studies with prototype tools that the project develops, to evaluate how well the goals are achieved.&lt;br/&gt;&lt;br/&gt;The project's techniques can be deployed by certification organizations to provide scientifically sound techniques for assurance, thus&lt;br/&gt;enabling the full benefits of highly-integrated mobile software in mission-critical situations.  Software designers will benefit from being able to precisely specify end-to-end requirements as well as component interfaces.  Software developers will benefit from reliable means to detect design flaws and bugs, malware in third-party software, and unintended functionality that exposes vulnerabilities.   Beyond the specific target of mobile software, the techniques will be of use in other settings, especially web applications, where it is crucial to reason about interfaces between mutually untrusting parties making heavy use of callbacks.  The project could help improve security in government agencies and private sector, indirectly benefitting national security and the general population.</AbstractNarration>
<MinAmdLetterDate>08/03/2012</MinAmdLetterDate>
<MaxAmdLetterDate>03/18/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1228930</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Naumann</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David A Naumann</PI_FULL_NAME>
<EmailAddress>naumann@cs.stevens.edu</EmailAddress>
<PI_PHON>2012165608</PI_PHON>
<NSF_ID>000331140</NSF_ID>
<StartDate>08/03/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stevens Institute of Technology</Name>
<CityName>HOBOKEN</CityName>
<ZipCode>070305991</ZipCode>
<PhoneNumber>2012168762</PhoneNumber>
<StreetAddress>CASTLE POINT ON HUDSON</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NJ08</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>064271570</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>STEVENS INSTITUTE OF TECHNOLOGY (INC)</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>064271570</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stevens Institute of Technology]]></Name>
<CityName/>
<StateCode>NJ</StateCode>
<ZipCode>070305991</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NJ08</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~526628</FUND_OBLG>
<FUND_OBLG>2015~105180</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project developed techniques for evaluating the trustworthiness of mobile applications (apps), focusing on the Android platform and the Java and JavaScript programming languages. &nbsp;These techniques support the long-term goal of high assurance of security and privacy through mathematically rigorous requirements specifications and software analyses that can be used by software engineers and security analysts. &nbsp;The importance of that goal has only increased during the project period due to escalating damage to government and commerce from cyberattacks.</p> <p>Techniques developed in this project have been demonstrated in open source software prototypes distributed through github and other venues. &nbsp;This project is linked to a collaborative project in which the techniques have been prototyped in the OpenJML software specification and verification tool, also distributed open source. &nbsp;A number of mobile apps were developed as case studies involving the controlled sharing of sensitive information. &nbsp;A combination of program assertions and annotations on data types were shown to be viable for specifying policies in which information derived from secrets may be declassified but only under designated conditions. &nbsp;Similar policies address selective endorsement of untrusted inputs that have been sanitized or validated. &nbsp;In addition to ordinary Java-based apps, hybrid web-based mobile apps were considered, in which information can flow between JavaScript and Java components. &nbsp;The case studies served to guide the research activities and to evaluate the tools and techniques developed.</p> <p>High assurance rests on precise models of the software platform and potential means of attack. &nbsp;Outcomes from the project include formalizations of key parts of the Android platform and programming language semantics, in terms of which requirements and attack models can be defined. &nbsp;A relational logic has been developed, as basis for verification of program requirements involving information flow. &nbsp;An emerging problem area is ensuring that programming language compilers preserve not only functional correctness but also security; relational logics can serve to validate compilation.</p> <p>On the basis of formal models and relational logic, the project developed algorithms for relational verification as well as for combining relational verification with assertion checking and type checking to check end-to-end conformance with security requirements. &nbsp;Going beyond the original project plans, the team investigated runtime monitoring for information flow. &nbsp;On the theoretical side, results were obtained whereby both static and runtime analysis can be structured in terms of abstract interpretation, the theory that underlies standard compiler analyses. &nbsp;This makes it possible to leverage existing analysis components to handle emerging security threats and security requirements. &nbsp; The new principle of monitoring as abstract interpretation was used to derive a correct-by-construction proof-of-principle monitor. &nbsp; On the practical side, a new design patterns was devised which enables software engineers to design modular interfaces amenable to static checking that complements runtime checking. &nbsp;Moreover, a full fledged runtime monitor for JavaScript was also developed and made freely available.</p> <p>In terms of broader impact, the project's techniques can be deployed by certification organizations to provide scientifically sound techniques for assurance, thus enabling the full benefits of highly-integrated mobile software in mission-critical situations. &nbsp;Software designers will benefit from being able to precisely specify end-to-end requirements as well as component interfaces. &nbsp;Software developers will benefit from reliable means to detect design flaws and bugs, malware in third-party software, and unintended functionality that exposes vulnerabilities. &nbsp; &nbsp;</p> <p>This project supported the training of several undergraduate students, three PhD students, and one post-doctoral research associate. &nbsp;<br /><br /></p><br> <p>            Last Modified: 06/04/2017<br>      Modified by: David&nbsp;A&nbsp;Naumann</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project developed techniques for evaluating the trustworthiness of mobile applications (apps), focusing on the Android platform and the Java and JavaScript programming languages.  These techniques support the long-term goal of high assurance of security and privacy through mathematically rigorous requirements specifications and software analyses that can be used by software engineers and security analysts.  The importance of that goal has only increased during the project period due to escalating damage to government and commerce from cyberattacks.  Techniques developed in this project have been demonstrated in open source software prototypes distributed through github and other venues.  This project is linked to a collaborative project in which the techniques have been prototyped in the OpenJML software specification and verification tool, also distributed open source.  A number of mobile apps were developed as case studies involving the controlled sharing of sensitive information.  A combination of program assertions and annotations on data types were shown to be viable for specifying policies in which information derived from secrets may be declassified but only under designated conditions.  Similar policies address selective endorsement of untrusted inputs that have been sanitized or validated.  In addition to ordinary Java-based apps, hybrid web-based mobile apps were considered, in which information can flow between JavaScript and Java components.  The case studies served to guide the research activities and to evaluate the tools and techniques developed.  High assurance rests on precise models of the software platform and potential means of attack.  Outcomes from the project include formalizations of key parts of the Android platform and programming language semantics, in terms of which requirements and attack models can be defined.  A relational logic has been developed, as basis for verification of program requirements involving information flow.  An emerging problem area is ensuring that programming language compilers preserve not only functional correctness but also security; relational logics can serve to validate compilation.  On the basis of formal models and relational logic, the project developed algorithms for relational verification as well as for combining relational verification with assertion checking and type checking to check end-to-end conformance with security requirements.  Going beyond the original project plans, the team investigated runtime monitoring for information flow.  On the theoretical side, results were obtained whereby both static and runtime analysis can be structured in terms of abstract interpretation, the theory that underlies standard compiler analyses.  This makes it possible to leverage existing analysis components to handle emerging security threats and security requirements.   The new principle of monitoring as abstract interpretation was used to derive a correct-by-construction proof-of-principle monitor.   On the practical side, a new design patterns was devised which enables software engineers to design modular interfaces amenable to static checking that complements runtime checking.  Moreover, a full fledged runtime monitor for JavaScript was also developed and made freely available.  In terms of broader impact, the project's techniques can be deployed by certification organizations to provide scientifically sound techniques for assurance, thus enabling the full benefits of highly-integrated mobile software in mission-critical situations.  Software designers will benefit from being able to precisely specify end-to-end requirements as well as component interfaces.  Software developers will benefit from reliable means to detect design flaws and bugs, malware in third-party software, and unintended functionality that exposes vulnerabilities.      This project supported the training of several undergraduate students, three PhD students, and one post-doctoral research associate.           Last Modified: 06/04/2017       Submitted by: David A Naumann]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
