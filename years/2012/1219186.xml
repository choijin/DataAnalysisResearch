<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small: Benchmarking of Transient and Intermittent Errors and Their Application to Microarchitecture</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2012</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>399999.00</AwardTotalIntnAmount>
<AwardAmount>399999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>tao li</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Computing infrastructure has been a driving force for our socio-economic progress in the past several decades. From drug discovery to space exploration, every scientific and engineering domain relies on computer systems to accurately analyze complex datasets. Historically, computational accuracy has been taken for granted in all these disciplines, but this notion is changing. While rapidly shrinking transistor dimensions lead to exponential power and performance benefits, the trend is also creating several unwanted side effects in computer system reliability. There are two types of errors that will become prevalent in the near future: (1) multi-bit soft errors where alpha particles and neutrons cause multiple bits to flip at the same time, and (2) intermittent errors that occur due to stress accumulation over the lifetime of a computer. Thus it is critical to benchmark the impact of these errors on the lifetime of a computer chip. Only when the impact is accurately measured is it possible to judiciously deploy solutions to improve reliability. Since any protection scheme comes with a cost, it is necessary to understand when a particular protection scheme being considered, such as parity or single-error-correcting double-error-detecting code, is too much or too little. &lt;br/&gt;&lt;br/&gt;This project presents two solutions for benchmarking multi-bit soft errors and intermittent errors.  This project will develop a unified methodology to benchmark the impacts of single-bit and multi-bit soft errors on caches protected with an arbitrary protection scheme, such as an inter-leaved, block-level or word-level error correcting code.  Such a benchmarking framework will significantly enhance a computer designer's ability to objectively evaluate the performance, power, and reliability tradeoffs of various protection schemes proposed for protecting caches.       &lt;br/&gt;&lt;br/&gt;This research also develops a methodology to benchmark the vulnerability of an instruction set architecture (ISA) to intermittent errors. Each instruction in an ISA specification is enhanced to quantify the amount of stress that it is expected to cause on the underlying microarchitecture of a chip. The stress level information from the ISA is combined with operating conditions of the chip to continuously monitor intermittent error probability during application execution.  Any unwanted degradation in chip reliability is then tackled by software exception handlers, which trigger redundant execution of vulnerable code. &lt;br/&gt;&lt;br/&gt;Broader societal impact will result from these research solutions. Benchmarking is essential to objectively evaluate the cost-benefit tradeoffs of various solutions currently being proposed to tackle reliability concerns. Without benchmarking, building a system to meet reliability specifications is a guessing game. By providing the right set of tools to initiate just-in-time error correction and recovery mechanisms, a computer designer can significantly lower the cost of providing reliable computations.</AbstractNarration>
<MinAmdLetterDate>07/03/2012</MinAmdLetterDate>
<MaxAmdLetterDate>07/03/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1219186</AwardID>
<Investigator>
<FirstName>Michel</FirstName>
<LastName>Dubois</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michel Dubois</PI_FULL_NAME>
<EmailAddress>dubois@paris.usc.edu</EmailAddress>
<PI_PHON>2137404475</PI_PHON>
<NSF_ID>000381644</NSF_ID>
<StartDate>07/03/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Murali</FirstName>
<LastName>Annavaram</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Murali Annavaram</PI_FULL_NAME>
<EmailAddress>annavara@usc.edu</EmailAddress>
<PI_PHON>2137403299</PI_PHON>
<NSF_ID>000496713</NSF_ID>
<StartDate>07/03/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900890001</ZipCode>
<StreetAddress><![CDATA[University Park]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA37</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~399999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>As computing devices shrink in size the amount of charge stored in a memory bit is extremely small. This charge indicates whether that bit holds a "0" or "1". Since the amount of charge is small these bit cellls are becoming increasingly susceptible to alpha particle (any other particles) strikes. When an alpha particle strikes a bit cell then it can flip the content of that bit. Hence, a "0" may be flipped to "1" or vice-versa.&nbsp; This bit flip is a transient problem, namely when a new value is written into the bit cell the new value is now stored without any error. Hence, we call these errors as soft errors. But when the bit cell that is impacted by soft error&nbsp; is read before the bit is overwritten  then it may lead to application level errors.</p> <p>A second class of errors are called intermittent errors. These are the errors&nbsp; that may occur only under specific operating conditions, such as high temperature or at a high frequency operation. Unlike soft errors these errors do not disappear by simply overwriting the old value. Instead, these errors disappear if the operating condition changes. Generally  lowering the temperature of the chip causes the error to disappear.</p> <p>Our first objective in this proposal is to understand how soft errors and intermittent errors impact processor's lifetime. As a first step we built an analytical tool to accurately measure the impact of multi-bit soft errors on the overall system reliability. These are errors where a single bit may be repeatedly hit by alpha particles, or multiple bits may be hit by a single alpha strike. With extremely large cache structures that hold millions of memory bits it is possible for data to reside in these caches for extremely long time. As such, a bit may in fact be hit multiple times, called temporal multi-bit errors. Due to extremely small device dimensions a single hit may in fact flip multiple bits at the same time, called spatial multi-bit errors. Our prior work in this space developed a tool called PARMA that quantified the impact of&nbsp; single bit upsets. As part of this grant we built the PARMA+ tool to extend&nbsp; PARMA to multi bit upsets.</p> <p>PARMA+ is based on based on probabiliity theory of soft error benchmarking. It models various multi-bit errror patterns, including when an error spans two different protection regions, and when multiple error patterns overlap with each other. PARMA+ models these issues in three steps. The first step is to identify all possible fault patterns and compute their probabilities of occurrence, given the probability of sinlge event upset. The second step computes the probability distribution of multi bit upsets automatically by simulating a wide range of overlapping error patterns. Finally, it computes the number of failures in a billion hours of opeation of a cache (FIT rate) from the automatically generated probability distributions.&nbsp;</p> <p>The second objective of the work targets tackling intermmitent errors. For this work, we developed a metric called Vulnerability to Intermittent Faults (VIF). VIF measures how each instruction in an ISA can have differing levels of stress related impacts on the underlying hardware. By benchmarking each instruction in an ISA over a specific microarchitecture implementation VIF enables designers to understand how typical applications cause hardware degradations over time. We analyzed the&nbsp; VIF metric for a broad range of instructions from the SPARC ISA using the OpenSPARC processor implementation. We also charcterized how different inputs for each instruction can alter the VIF metric. Based on this charcaterization we quantified how diferent compiler optimizations can result in different system vulnerabilities. We showed that while optimized and unoptimized code may suffer similar vulnerability on average, in practice a highly optimized code exhibits much higher standard deviation. Hence, optimized code may cause unexpected vulnerabilities if the hardware is protected only for the average case.&nbsp;</p> <p>While not part of the original grant we also developed microarchitectural solutions to improve the reliability of graphics processing units (GPUs) as a follow on to our work.</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/21/2016<br>      Modified by: Murali&nbsp;Annavaram</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ As computing devices shrink in size the amount of charge stored in a memory bit is extremely small. This charge indicates whether that bit holds a "0" or "1". Since the amount of charge is small these bit cellls are becoming increasingly susceptible to alpha particle (any other particles) strikes. When an alpha particle strikes a bit cell then it can flip the content of that bit. Hence, a "0" may be flipped to "1" or vice-versa.  This bit flip is a transient problem, namely when a new value is written into the bit cell the new value is now stored without any error. Hence, we call these errors as soft errors. But when the bit cell that is impacted by soft error  is read before the bit is overwritten  then it may lead to application level errors.  A second class of errors are called intermittent errors. These are the errors  that may occur only under specific operating conditions, such as high temperature or at a high frequency operation. Unlike soft errors these errors do not disappear by simply overwriting the old value. Instead, these errors disappear if the operating condition changes. Generally  lowering the temperature of the chip causes the error to disappear.  Our first objective in this proposal is to understand how soft errors and intermittent errors impact processor's lifetime. As a first step we built an analytical tool to accurately measure the impact of multi-bit soft errors on the overall system reliability. These are errors where a single bit may be repeatedly hit by alpha particles, or multiple bits may be hit by a single alpha strike. With extremely large cache structures that hold millions of memory bits it is possible for data to reside in these caches for extremely long time. As such, a bit may in fact be hit multiple times, called temporal multi-bit errors. Due to extremely small device dimensions a single hit may in fact flip multiple bits at the same time, called spatial multi-bit errors. Our prior work in this space developed a tool called PARMA that quantified the impact of  single bit upsets. As part of this grant we built the PARMA+ tool to extend  PARMA to multi bit upsets.  PARMA+ is based on based on probabiliity theory of soft error benchmarking. It models various multi-bit errror patterns, including when an error spans two different protection regions, and when multiple error patterns overlap with each other. PARMA+ models these issues in three steps. The first step is to identify all possible fault patterns and compute their probabilities of occurrence, given the probability of sinlge event upset. The second step computes the probability distribution of multi bit upsets automatically by simulating a wide range of overlapping error patterns. Finally, it computes the number of failures in a billion hours of opeation of a cache (FIT rate) from the automatically generated probability distributions.   The second objective of the work targets tackling intermmitent errors. For this work, we developed a metric called Vulnerability to Intermittent Faults (VIF). VIF measures how each instruction in an ISA can have differing levels of stress related impacts on the underlying hardware. By benchmarking each instruction in an ISA over a specific microarchitecture implementation VIF enables designers to understand how typical applications cause hardware degradations over time. We analyzed the  VIF metric for a broad range of instructions from the SPARC ISA using the OpenSPARC processor implementation. We also charcterized how different inputs for each instruction can alter the VIF metric. Based on this charcaterization we quantified how diferent compiler optimizations can result in different system vulnerabilities. We showed that while optimized and unoptimized code may suffer similar vulnerability on average, in practice a highly optimized code exhibits much higher standard deviation. Hence, optimized code may cause unexpected vulnerabilities if the hardware is protected only for the average case.   While not part of the original grant we also developed microarchitectural solutions to improve the reliability of graphics processing units (GPUs) as a follow on to our work.          Last Modified: 10/21/2016       Submitted by: Murali Annavaram]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
