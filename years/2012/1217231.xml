<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Collaborative Research: Real-Time Unobtrusive Tracing in Multicore Embedded Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>172960.00</AwardTotalIntnAmount>
<AwardAmount>188960</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Embedded computer systems have become essential to many aspects of our lives. Cheaper, smaller, faster, more sophisticated, and more energy-efficient embedded devices spur ever new applications. However, the growing complexity and shift to multicores make programming and debugging these systems difficult. Traditional debugging is time consuming and may interfere with program execution, causing some bugs to become irreproducible and making it unusable in real-time environments. Moreover, tracing a processor?s internal state during execution is only feasible for short program segments and requires large on-chip buffers or wide trace ports, either of which increases system cost and limits scalability.  This project is developing the next generation of trace compression methods and infrastructure to make continuous, real-time, unobtrusive, and cost-effective program, data, and bus tracing possible in embedded systems. The approach relies on on-chip hardware to record the processor state and corresponding software modules in the debugger. The novel insight is that a sequence of trace records can be translated, without loss of information, into a much shorter sequence of miss events using small hardware structures. The few remaining miss events are then further compressed using highly-effective yet simple-to-implement encoding schemes, yielding heretofore unseen compression ratios.&lt;br/&gt;&lt;br/&gt;The new tracing and debugging infrastructure can help programmers find difficult and intermittent software bugs faster, thus improving productivity. For example, reducing debugging time by just one percent amounts to hundreds of millions of dollars annually in saved salaries, with a concomitant reduction in software cost and time to market. Moreover, higher quality software may eliminate errors in medical, automotive, or mission-critical devices and thus save lives.</AbstractNarration>
<MinAmdLetterDate>08/16/2012</MinAmdLetterDate>
<MaxAmdLetterDate>02/05/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1217231</AwardID>
<Investigator>
<FirstName>Martin</FirstName>
<LastName>Burtscher</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Martin Burtscher</PI_FULL_NAME>
<EmailAddress>burtscher@txstate.edu</EmailAddress>
<PI_PHON>5122452314</PI_PHON>
<NSF_ID>000572212</NSF_ID>
<StartDate>08/16/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Texas State University - San Marcos</Name>
<CityName>San Marcos</CityName>
<ZipCode>786664616</ZipCode>
<PhoneNumber>5122452314</PhoneNumber>
<StreetAddress>601 University Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>28</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX28</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>074602368</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TEXAS STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>101405814</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Texas State University - San Marcos]]></Name>
<CityName>San Marcos</CityName>
<StateCode>TX</StateCode>
<ZipCode>786664684</ZipCode>
<StreetAddress><![CDATA[601 University Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>35</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX35</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~172960</FUND_OBLG>
<FUND_OBLG>2014~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our society increasingly relies upon embedded computer systems that have become essential to many aspects of our lives, including transportation, civil infrastructure, and medicine. Faster, cheaper, smaller, more sophisticated, and more energy-efficient embedded computer systems spur new applications that require very complex programming. The growing software and hardware complexity and tightening time-to-market deadlines make programming and debugging the most critical aspect of embedded system development. According to one study, software developers spend between 50% and 75% of their time debugging programs, yet the nation still loses approximately $20 to $60 billion a year due to software bugs and glitches. The ongoing shift toward larger numbers of processing cores makes software development and debugging even more challenging. Traditional debugging is time consuming and may interfere with program execution, causing some bugs to become irreproducible and making it unusable in real-time settings such as ignition timing of piston engines. Such systems need to be tested in production environments and must be bug-free. Of course, achieving bug-free software is a challenging proposition in general and especially given the exponential growth in hardware and software complexity. Current solutions only allow the tracing of a processor&rsquo;s internal state for short program segments and require large on-chip buffers or wide trace ports, both of which increase system cost and limit scalability, making these solutions untenable.</p> <p>The main goal of this project is developing the next generation of trace compression methods and infrastructure to make continuous, real-time, unobtrusive, and cost-effective program and data tracing possible in embedded systems. Our approach relies on on-chip hardware to record the processor state and corresponding software modules in the debugger. The novel insight is that a sequence of trace records can be translated, without loss of information, into a much shorter sequence using simple yet highly-effective hardware structures, yielding heretofore unreached compression ratios. The new tracing and debugging hardware resources, coupled with sophisticated software debuggers, enable programmers to find difficult and intermittent software bugs faster, resulting in improved reliability and quality of software as well as increased overall productivity. For example, reducing debugging time by just 1% amounts to hundreds of millions of dollars annually in saved salaries, with a concomitant reduction in software cost and time-to-market. Moreover, higher quality software may eliminate errors in medical, automotive, and aviation devices and thus save lives. Our research demonstrates how to design such trace-compression methods that provide real-time, unobtrusive, and cost-effective program and data tracing for future generations of embedded processors.</p> <p>The primary accomplishment is a first-of-its-kind framework for the automatic and systematic creation of effective compression algorithms. Based on a detailed literature search, we extracted and generalized many &ldquo;components&rdquo; from previously published compression algorithms. In our framework, each component uses the same interface to transform an input sequence of values into an output sequence. The common interface makes it possible to replace any component with any other. More importantly, the components can be chained such that the output sequence of one component becomes the input sequence of the next component, thus creating arbitrarily complex chains, that is, compression algorithms. Finally, for each component, we implemented a corresponding inverse component. This approach has two main benefits. First, any combination of components results in a valid algorithm (that may or may not compress the traces well). Second, chaining the inverse components in the opposite direction automatically yields the needed decompression algorithm. Based on this infrastructure, we developed search strategies for automatically determining good compression algorithms. For small numbers of components, we use an exhaustive search. For larger numbers of components, we use a genetic algorithm. Our framework can be employed to independently find good compression algorithms for different trace types. By removing unsuitable components (e.g., with overly large table sizes or complexity), the framework automatically synthesizes well-performing algorithms that can be implemented in hardware without exceeding the available chip resources. This work has initiated a new era in data compression. Heretofore, only relatively few compression algorithms have been published and evaluated. They are all carefully designed by hand to exploit known patterns in data. Our approach makes it possible, for the first time, to literally evaluate millions of compression algorithms and to employ sophisticated search algorithms to automatically find and generate compression algorithms that are tailored to a specific domain (e.g., a specific kind of program trace), adhere to given constraints (e.g., a maximum table size), and deliver superior compression ratios.</p><br> <p>            Last Modified: 11/28/2016<br>      Modified by: Martin&nbsp;Burtscher</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Our society increasingly relies upon embedded computer systems that have become essential to many aspects of our lives, including transportation, civil infrastructure, and medicine. Faster, cheaper, smaller, more sophisticated, and more energy-efficient embedded computer systems spur new applications that require very complex programming. The growing software and hardware complexity and tightening time-to-market deadlines make programming and debugging the most critical aspect of embedded system development. According to one study, software developers spend between 50% and 75% of their time debugging programs, yet the nation still loses approximately $20 to $60 billion a year due to software bugs and glitches. The ongoing shift toward larger numbers of processing cores makes software development and debugging even more challenging. Traditional debugging is time consuming and may interfere with program execution, causing some bugs to become irreproducible and making it unusable in real-time settings such as ignition timing of piston engines. Such systems need to be tested in production environments and must be bug-free. Of course, achieving bug-free software is a challenging proposition in general and especially given the exponential growth in hardware and software complexity. Current solutions only allow the tracing of a processor?s internal state for short program segments and require large on-chip buffers or wide trace ports, both of which increase system cost and limit scalability, making these solutions untenable.  The main goal of this project is developing the next generation of trace compression methods and infrastructure to make continuous, real-time, unobtrusive, and cost-effective program and data tracing possible in embedded systems. Our approach relies on on-chip hardware to record the processor state and corresponding software modules in the debugger. The novel insight is that a sequence of trace records can be translated, without loss of information, into a much shorter sequence using simple yet highly-effective hardware structures, yielding heretofore unreached compression ratios. The new tracing and debugging hardware resources, coupled with sophisticated software debuggers, enable programmers to find difficult and intermittent software bugs faster, resulting in improved reliability and quality of software as well as increased overall productivity. For example, reducing debugging time by just 1% amounts to hundreds of millions of dollars annually in saved salaries, with a concomitant reduction in software cost and time-to-market. Moreover, higher quality software may eliminate errors in medical, automotive, and aviation devices and thus save lives. Our research demonstrates how to design such trace-compression methods that provide real-time, unobtrusive, and cost-effective program and data tracing for future generations of embedded processors.  The primary accomplishment is a first-of-its-kind framework for the automatic and systematic creation of effective compression algorithms. Based on a detailed literature search, we extracted and generalized many "components" from previously published compression algorithms. In our framework, each component uses the same interface to transform an input sequence of values into an output sequence. The common interface makes it possible to replace any component with any other. More importantly, the components can be chained such that the output sequence of one component becomes the input sequence of the next component, thus creating arbitrarily complex chains, that is, compression algorithms. Finally, for each component, we implemented a corresponding inverse component. This approach has two main benefits. First, any combination of components results in a valid algorithm (that may or may not compress the traces well). Second, chaining the inverse components in the opposite direction automatically yields the needed decompression algorithm. Based on this infrastructure, we developed search strategies for automatically determining good compression algorithms. For small numbers of components, we use an exhaustive search. For larger numbers of components, we use a genetic algorithm. Our framework can be employed to independently find good compression algorithms for different trace types. By removing unsuitable components (e.g., with overly large table sizes or complexity), the framework automatically synthesizes well-performing algorithms that can be implemented in hardware without exceeding the available chip resources. This work has initiated a new era in data compression. Heretofore, only relatively few compression algorithms have been published and evaluated. They are all carefully designed by hand to exploit known patterns in data. Our approach makes it possible, for the first time, to literally evaluate millions of compression algorithms and to employ sophisticated search algorithms to automatically find and generate compression algorithms that are tailored to a specific domain (e.g., a specific kind of program trace), adhere to given constraints (e.g., a maximum table size), and deliver superior compression ratios.       Last Modified: 11/28/2016       Submitted by: Martin Burtscher]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
