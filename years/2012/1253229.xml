<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: A Formal Verification Platform Focused on Programmer Productivity</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2013</AwardEffectiveDate>
<AwardExpirationDate>05/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>520000.00</AwardTotalIntnAmount>
<AwardAmount>520000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Billions of people depend daily on software systems built on top of slowly changing operating systems, programming languages, and library interfaces. A unifying theme of this infrastructure, from operating systems to Web browsers, is the use of nested sandboxes, involving multiple levels of abstraction, with complete mediation of resource accesses within and across levels. That is, as a program runs, several layers of abstraction are checking all resource accesses for conformance to security and isolation policies. This run-time checking imposes substantial overhead and is also quite inflexible. Often some sandbox layer is fundamentally incompatible with a new programming technique that could bring improved performance, security, etc. We will study how the Bedrock system may be used to replace restrictive run-time policy enforcement with open-ended compile-time policy enforcement, by requiring programmers to distribute code with formal mathematical proofs of policy conformance. As a concrete case study, we will implement a platform to replace today's common combinations of cloud hosting and Web browsers, providing a similar application experience to end users while giving programmers much more flexibility. To educate the future users of our tools, we will also develop an online tutor program suitable for use in introductory discrete math and logic classes, giving students instant feedback on the validity of their rigorous proofs.&lt;br/&gt;&lt;br/&gt;The theoretical foundation of Bedrock, a Coq library, is higher-order separation logic for assembly languages. Several past projects have demonstrated how proofs in such logics may be carried out using proof assistants. Bedrock is distinguished by providing tools for mostly automated proofs, where the programmer provides help to the verifier through loop invariants and a few other types of annotation. We will continue improving this automation support to lower the human cost of verification further, while also investigating ways to broaden Bedrock's domain, such as to multi-core programs. We also intend to investigate the new semantic idea of phantom monitors, which allow Bedrock programs to spawn arbitrary automata (defined with their transition relations in Coq) that watch all program behavior and may veto actions that violate some policy. This is a compile time-only feature to support effective specifications, and we hope to use it as a unifying framework for specifying the interfaces between components in our proof-of-concept distributed application platform.</AbstractNarration>
<MinAmdLetterDate>02/06/2013</MinAmdLetterDate>
<MaxAmdLetterDate>05/29/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1253229</AwardID>
<Investigator>
<FirstName>Adam</FirstName>
<LastName>Chlipala</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Adam J Chlipala</PI_FULL_NAME>
<EmailAddress>adamc@csail.mit.edu</EmailAddress>
<PI_PHON>6172531000</PI_PHON>
<NSF_ID>000610723</NSF_ID>
<StartDate>02/06/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394307</ZipCode>
<StreetAddress><![CDATA[77 Massachusetts Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~220000</FUND_OBLG>
<FUND_OBLG>2015~100000</FUND_OBLG>
<FUND_OBLG>2016~100000</FUND_OBLG>
<FUND_OBLG>2017~100000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This grant supported work investigating a particular approach to programming with strong mathematical guarantees of correctness.&nbsp; The unusual features relate to use of <em>proof assistant</em>&nbsp;software, which checks mathematical proofs, which may be about complex computer systems.&nbsp; Work explored how to do programming <em>inside a proof assistant</em>&nbsp;(in particular, the Coq system), so that one integrated environment supports coding, writing down <em>specifications</em>&nbsp;capturing what is correct behavior, writing <em>proofs</em>&nbsp;establishing correctness, and compiling code into executable form.</p> <p>The initial project plan centered on the Bedrock framework, for producing low-level software through the use of multiple high-level languages.&nbsp; Key demonstrations with Bedrock included verification of a multithreaded web server.&nbsp; There were also crucial technological contributions in proof automation and in structuring of large proofs so that they are broken into manageable pieces, for instance mirroring the decomposition of a program across libraries or languages.</p> <p>Partly through collaborations with faculty in other research areas, the Bedrock approach was also extended fruitfully to other domains, not envisioned when the original project plan was written.&nbsp; In the Kami project, we support development, proof, and compilation of <em>digital hardware components</em>&nbsp;like processors and memory systems.&nbsp; In the FSCQ project, we support a similar model for creating proved <em>file systems</em> that integrate with real OS kernels.&nbsp; In the Fiat Cryptography project, we support generation of low-level code for fast <em>cryptographic primitives</em>.&nbsp; And two other projects demonstrated how this approach applies to <em>distributed systems</em>, specifically key-value stores and scientific stencil computations.</p> <p>Broader impacts have included development of a new graduate course with an associated textbook, <em>Formal Reasoning About Programs</em>.&nbsp; There has also been a significant amount of technology transfer to industry.&nbsp; Most notably, Fiat Cryptography has been adopted by Google to generate elliptic-curve arithmetic code for Chrome, Android, and servers (e.g., for the main search engine); so now a majority of secure web connections opened by browsers use code generated and proved with our methods and tools.&nbsp; Two startup companies are also applying our results, in consultation with the PI.&nbsp; BedRock Systems is applying the latest Bedrock library to verification of operating systems for safety-critical applications like in the automotive industry.&nbsp; SiFive, Inc. is piloting use of the Kami framework to prove correctness of key hardware components that factor into their business model of helping customers put together custom hardware solutions via component reuse.</p><br> <p>            Last Modified: 10/01/2018<br>      Modified by: Adam&nbsp;J&nbsp;Chlipala</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This grant supported work investigating a particular approach to programming with strong mathematical guarantees of correctness.  The unusual features relate to use of proof assistant software, which checks mathematical proofs, which may be about complex computer systems.  Work explored how to do programming inside a proof assistant (in particular, the Coq system), so that one integrated environment supports coding, writing down specifications capturing what is correct behavior, writing proofs establishing correctness, and compiling code into executable form.  The initial project plan centered on the Bedrock framework, for producing low-level software through the use of multiple high-level languages.  Key demonstrations with Bedrock included verification of a multithreaded web server.  There were also crucial technological contributions in proof automation and in structuring of large proofs so that they are broken into manageable pieces, for instance mirroring the decomposition of a program across libraries or languages.  Partly through collaborations with faculty in other research areas, the Bedrock approach was also extended fruitfully to other domains, not envisioned when the original project plan was written.  In the Kami project, we support development, proof, and compilation of digital hardware components like processors and memory systems.  In the FSCQ project, we support a similar model for creating proved file systems that integrate with real OS kernels.  In the Fiat Cryptography project, we support generation of low-level code for fast cryptographic primitives.  And two other projects demonstrated how this approach applies to distributed systems, specifically key-value stores and scientific stencil computations.  Broader impacts have included development of a new graduate course with an associated textbook, Formal Reasoning About Programs.  There has also been a significant amount of technology transfer to industry.  Most notably, Fiat Cryptography has been adopted by Google to generate elliptic-curve arithmetic code for Chrome, Android, and servers (e.g., for the main search engine); so now a majority of secure web connections opened by browsers use code generated and proved with our methods and tools.  Two startup companies are also applying our results, in consultation with the PI.  BedRock Systems is applying the latest Bedrock library to verification of operating systems for safety-critical applications like in the automotive industry.  SiFive, Inc. is piloting use of the Kami framework to prove correctness of key hardware components that factor into their business model of helping customers put together custom hardware solutions via component reuse.       Last Modified: 10/01/2018       Submitted by: Adam J Chlipala]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
