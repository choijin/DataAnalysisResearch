<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: CS in Parallel: Scaling an Incremental Modular Approach to Injecting Parallel Computing Throughout CS Curricula</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2012</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>125307.00</AwardTotalIntnAmount>
<AwardAmount>125307</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Victor Piotrowski</SignBlockName>
<PO_EMAI>vpiotrow@nsf.gov</PO_EMAI>
<PO_PHON>7032925141</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The shift to parallel computing, including multi-core processors, cloud computing, and heterogeneous systems, has induced a workforce development crisis for computer science (CS) education.  This project addresses how crowded CS curricula, traditionally structured around sequential (non-parallel) computing, can be changed to effectively incorporate the rapidly-evolving body of parallelism knowledge. &lt;br/&gt;&lt;br/&gt;Saint Olaf College, Calvin College and Macalester College are demonstrating how colleges and universities can insert short (one- to three-day) teaching modules on parallel computing into their courses through self-contained units that present conceptual principles and reinforce them by hands-on experience and follow-up exercises.  New modules that incorporate emerging curricular recommendations, relevant applications to other fields, and parallel design patterns are under development. Parallelism is infused incrementally throughout the CS curriculum. Having developed this modular strategy in a predecessor CCLI Type I grant, this project demonstrates the scalability of this approach to other universities and colleges by targeting two geographical regions with workshops and follow-up adopter support. &lt;br/&gt;&lt;br/&gt;Other project activities reward participants for creating new modules, promote the national dissemination of this modular approach through conference workshops and presentations, and expand existing synergistic partnerships between CSinParallel.org and related efforts in industry, academia, and professional organizations.</AbstractNarration>
<MinAmdLetterDate>08/10/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/10/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1225739</AwardID>
<Investigator>
<FirstName>Joel</FirstName>
<LastName>Adams</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Joel C Adams</PI_FULL_NAME>
<EmailAddress>adams@calvin.edu</EmailAddress>
<PI_PHON>6165268666</PI_PHON>
<NSF_ID>000206252</NSF_ID>
<StartDate>08/10/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Calvin University</Name>
<CityName>Grand Rapids</CityName>
<ZipCode>495464301</ZipCode>
<PhoneNumber>6165266000</PhoneNumber>
<StreetAddress>3201 BURTON ST SE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>053665980</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CALVIN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053665980</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Calvin College]]></Name>
<CityName>Grand Rapids</CityName>
<StateCode>MI</StateCode>
<ZipCode>495464301</ZipCode>
<StreetAddress><![CDATA[3201 Burton SE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>7511</Code>
<Text>TUES-Type 2 Project</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0412</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~125307</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Virtually all of today&rsquo;s computers (phones, tablets, laptops, desktops, servers) have multicore CPUs. Each core in a computer can perform an independent action at the same time as the others; a quad-core computer can do four things at once. However, traditional programs will only use one of a computer&rsquo;s cores; on a quad-core computer, such programs will squander 75% of the machine&rsquo;s capabilities.</p> <p>To use a modern computer more efficiently, programs can be designed and written to (i) divide a problem into subproblems, (ii) solve those subproblems in parallel (i.e., one on each core), and then (iii) combine those piecemeal solutions into a solution to the original problem.&nbsp; This approach is called <em>parallel computing</em>.</p> <p>A related development is when software runs on a group of computers, causing them to work together as a group to solve a problem. This approach is called <em>distributed computing</em>. For example, companies are increasingly renting &ldquo;cloud computing&rdquo; facilities from Amazon, Google, Microsoft, or other companies.&nbsp; These &ldquo;cloud computing&rdquo; systems are distributed computing systems.</p> <p>The growing importance of parallel and distributed computing (PDC) is reflected in the <em>2013</em> <em>ACM/IEEE</em> <em>CS Curriculum Recommendations </em>(CS2013), which require all CS students to learn the basics of PDC. Unfortunately, very few CS faculty members have any training in PDC, making it difficult for the students in most CS departments to achieve these learning outcomes.</p> <p>The CSinParallel project is a collaborative effort by Joel Adams from Calvin College, Richard Brown from St. Olaf College, and Elizabeth Shoop from Macalester College. The overarching goal of the project is to provide training and pedagogical resources for CS faculty, so that they can incorporate PDC into their courses and thus achieve the learning outcomes set out in CS2013.&nbsp; To achieve our goal, we used a multipronged strategy:</p> <p>1. Provide faculty development opportunities for CS educators wanting to incorporate PDC topics into the CS curriculum.&nbsp; These include multi-day regional workshops held during the summer and 3-hour workshops held in conjunction with conferences. The primary goal of these workshops was to show CS educators how to use <em>CSinParallel modules</em> [1-3 day pedagogical units] and tools to introduce PDC content into the courses they teach.</p> <p>2. Create and publicize new pedagogical modules and tools for teaching parallel computing to undergraduates.</p> <p>3. Use the website <em>CSinParallel.org</em> to distribute these modules and tools. We also redesigned this website to be a convenient PDC resource for CS educators.&nbsp; The website currently offers roughly 50 modules dedicated to PDC topics.</p> <p>4. Recruit CS educators to create new CSinParallel modules that instructors can easily plug into their existing courses, so as to allow the coverage of parallel concepts to be sprinkled throughout the undergraduate curriculum.</p> <p>5. Create a national community of PDC educators who share knowledge and best practices in the teaching of parallel computing. Begin by creating regional communities, then combine them into a national community.</p> <ol> </ol> <p>To achieve these goals during our 4-year project, we have sponsored 15 faculty development workshops (six multiday regional summer workshops, nine 3-hr workshops at conferences), presented 6 conference papers, participated on 4 conference panel discussions, and organized 3 conference special sessions, all related to the CSinParallel project.&nbsp;</p> <p>We also developed several pedagogical tools to help undergraduate students learn about PDC topics. The most important of these were: (i) the <em>patternlets</em>, a collection of 44 programs for teaching parallel design patterns; and (ii) the <em>thread safe graphics library</em> (TSGL), a software library and collection of visualizations that let students see how parallel programs utilize parallelism to solve problems.</p> <p>To improve the usability of the <em>CSinParallel.org</em> website, we revised its color scheme and designed two visual search pages: one that lets a CS faculty search for modules for a given course, and another that lets a CS faculty member search for modules that relate to a given parallel hardware or software technology.</p> <p>We were also successful in recruiting five CS educators to create new CSinParallel modules, ranging from the parallel computing using the Python programming language to solving data parallel problems using Nvidia&rsquo;s CUDA platform (which allows graphics processing units to be used for general purpose computing).</p> <p>Through the combination of these efforts, we have begun to achieve our goal of building a national community of CS educators who are willing to share knowledge and best practices for teaching students about parallel and distributed computing.</p> <p>Thanks to this community, our project has begun helping colleges and universities across the U.S. produce CS graduates who have been trained in PDC techniques.&nbsp; As these graduates enter the national workforce, they can bring this training to bear on the problems they are asked to solve.&nbsp; Our project is thus strengthening the national workforce by providing U.S. technology companies and laboratories with employees whose skills will let us continue to lead in today&rsquo;s global market.</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/29/2016<br>      Modified by: Joel&nbsp;C&nbsp;Adams</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Virtually all of today?s computers (phones, tablets, laptops, desktops, servers) have multicore CPUs. Each core in a computer can perform an independent action at the same time as the others; a quad-core computer can do four things at once. However, traditional programs will only use one of a computer?s cores; on a quad-core computer, such programs will squander 75% of the machine?s capabilities.  To use a modern computer more efficiently, programs can be designed and written to (i) divide a problem into subproblems, (ii) solve those subproblems in parallel (i.e., one on each core), and then (iii) combine those piecemeal solutions into a solution to the original problem.  This approach is called parallel computing.  A related development is when software runs on a group of computers, causing them to work together as a group to solve a problem. This approach is called distributed computing. For example, companies are increasingly renting "cloud computing" facilities from Amazon, Google, Microsoft, or other companies.  These "cloud computing" systems are distributed computing systems.  The growing importance of parallel and distributed computing (PDC) is reflected in the 2013 ACM/IEEE CS Curriculum Recommendations (CS2013), which require all CS students to learn the basics of PDC. Unfortunately, very few CS faculty members have any training in PDC, making it difficult for the students in most CS departments to achieve these learning outcomes.  The CSinParallel project is a collaborative effort by Joel Adams from Calvin College, Richard Brown from St. Olaf College, and Elizabeth Shoop from Macalester College. The overarching goal of the project is to provide training and pedagogical resources for CS faculty, so that they can incorporate PDC into their courses and thus achieve the learning outcomes set out in CS2013.  To achieve our goal, we used a multipronged strategy:  1. Provide faculty development opportunities for CS educators wanting to incorporate PDC topics into the CS curriculum.  These include multi-day regional workshops held during the summer and 3-hour workshops held in conjunction with conferences. The primary goal of these workshops was to show CS educators how to use CSinParallel modules [1-3 day pedagogical units] and tools to introduce PDC content into the courses they teach.  2. Create and publicize new pedagogical modules and tools for teaching parallel computing to undergraduates.  3. Use the website CSinParallel.org to distribute these modules and tools. We also redesigned this website to be a convenient PDC resource for CS educators.  The website currently offers roughly 50 modules dedicated to PDC topics.  4. Recruit CS educators to create new CSinParallel modules that instructors can easily plug into their existing courses, so as to allow the coverage of parallel concepts to be sprinkled throughout the undergraduate curriculum.  5. Create a national community of PDC educators who share knowledge and best practices in the teaching of parallel computing. Begin by creating regional communities, then combine them into a national community.    To achieve these goals during our 4-year project, we have sponsored 15 faculty development workshops (six multiday regional summer workshops, nine 3-hr workshops at conferences), presented 6 conference papers, participated on 4 conference panel discussions, and organized 3 conference special sessions, all related to the CSinParallel project.   We also developed several pedagogical tools to help undergraduate students learn about PDC topics. The most important of these were: (i) the patternlets, a collection of 44 programs for teaching parallel design patterns; and (ii) the thread safe graphics library (TSGL), a software library and collection of visualizations that let students see how parallel programs utilize parallelism to solve problems.  To improve the usability of the CSinParallel.org website, we revised its color scheme and designed two visual search pages: one that lets a CS faculty search for modules for a given course, and another that lets a CS faculty member search for modules that relate to a given parallel hardware or software technology.  We were also successful in recruiting five CS educators to create new CSinParallel modules, ranging from the parallel computing using the Python programming language to solving data parallel problems using Nvidia?s CUDA platform (which allows graphics processing units to be used for general purpose computing).  Through the combination of these efforts, we have begun to achieve our goal of building a national community of CS educators who are willing to share knowledge and best practices for teaching students about parallel and distributed computing.  Thanks to this community, our project has begun helping colleges and universities across the U.S. produce CS graduates who have been trained in PDC techniques.  As these graduates enter the national workforce, they can bring this training to bear on the problems they are asked to solve.  Our project is thus strengthening the national workforce by providing U.S. technology companies and laboratories with employees whose skills will let us continue to lead in today?s global market.          Last Modified: 09/29/2016       Submitted by: Joel C Adams]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
