<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Practical Language and System Support for Reliable Concurrent Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2013</AwardEffectiveDate>
<AwardExpirationDate>02/28/2019</AwardExpirationDate>
<AwardTotalIntnAmount>555143.00</AwardTotalIntnAmount>
<AwardAmount>555143</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Over the past several decades, computer system performance has grown exponentially, enabling progress on key problems in science, engineering, health, and other areas. Owing to power, heat, and wire length limitations, however, microprocessors are now adding more, instead of faster, cores with each successive generation. As a result, general-purpose software must become more concurrent to see continued performance gains. Unfortunately, writing and debugging shared-memory concurrent software is notoriously difficult. A key problem is that most shared-memory programming languages and software systems do not provide good support for correct concurrent execution. They lack such support because all known approaches are impractical. This project aims to provide practical support for concurrency correctness in commodity systems. It develops low-overhead, software-only approaches that execute on existing commodity hardware. These approaches help programmers write and debug more reliable, scalable software, and to make software more reliable automatically by eliminating whole classes of errors.  These benefits have the potential to enable society to continue to rely on software systems for increasingly complex, critical tasks.  Furthermore, the project includes educational and outreach activities that help educate students in concurrent software systems, enhance dissemination of the ideas and outcomes, and broaden participation in computer science.&lt;br/&gt;&lt;br/&gt;The project develops practical, always-on dynamic checking and enforcement of key concurrency correctness properties: atomicity, sequential consistency, and multithreaded determinism. Existing approaches are impractical because custom hardware-based approaches are unrealistic, and software-based approaches slow programs unacceptably.  The project builds on preliminary work on an efficient concurrency control mechanism that elides expensive synchronization from non-conflicting accesses, which are the vast majority of accesses.  Developing new analyses and systems presents significant new challenges, both to apply the novel concurrency control mechanism and to make other aspects of these analyses and systems efficient enough for production systems. For example, precise conflict detection must track prior accesses and contend with imprecision inherent to the concurrency control mechanism. The project aims to make the analyses and systems both practical and flexible, which requires systematically investigating how to reduce the costs of conflicting and non-conflicting accesses. Expected contributions are the first practical always-on atomicity checker, the first practical multithreaded record &amp; replay system, the first practical sequential consistency checker, and the first practical system providing multithreaded system determinism. In addition to broader impacts, the contributions have the potential to enable new research on efficient software-based analyses and systems that support concurrency correctness.</AbstractNarration>
<MinAmdLetterDate>03/07/2013</MinAmdLetterDate>
<MaxAmdLetterDate>03/27/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1253703</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Bond</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael Bond</PI_FULL_NAME>
<EmailAddress>mikebond@cse.ohio-state.edu</EmailAddress>
<PI_PHON>6142923805</PI_PHON>
<NSF_ID>000565569</NSF_ID>
<StartDate>03/07/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888735</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1960 Kenny Road]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>832127323</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001964634</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName/>
<StateCode>OH</StateCode>
<ZipCode>432101063</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~174442</FUND_OBLG>
<FUND_OBLG>2014~90541</FUND_OBLG>
<FUND_OBLG>2015~93546</FUND_OBLG>
<FUND_OBLG>2016~96676</FUND_OBLG>
<FUND_OBLG>2017~99938</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>For more than a decade, computer chip manufacturers have focused on developing chips with more computing cores instead of faster cores, because of fundamental limitations such as heat dissipation that limit the ability to speed up individual cores. While these cores provide more computing power in theory, in practice it is difficult to develop, debug, and deploy parallel software that can leverage all of the extra computing power while also behaving correctly.</p> <p>The project team addressed this challenge by developing, implementing, and evaluating new approaches for analyzing, debugging, and automatically improving the correctness and performance of parallel software. Importantly, all of the team's approaches work on off-the-shelf (commodity) hardware, rather than relying on custom (non-existent) hardware, allowing the approaches to be used in current systems. Overall, the project significantly advanced the state of the art by demonstrating a variety of approaches that are substantially faster than prior work's approaches, often making a qualitative difference by introducing an approach that is practical in a setting in which it was previously impractical.</p> <p>The team developed a new approach for tracking communicating memory accesses efficiently, and designed a variety of approaches on top of it including multithreaded record &amp; replay and an atomicity violation detector. The team developed new approaches for detecting a common kind of concurrency bug called a data race and for inferring the potential erroneous behaviors that a data race can cause. The team made significant contributions in the area of predictive data race detectors, which detect more data races than traditional race detectors but at much higher cost in prior work; the team&nbsp;showed how to make predictive race detectors more powerful while performing nearly the same as traditional race detectors.</p> <p>The team published in high-impact venues and made the source code for their implementations publicly available. Seven PhD students were trained while working on the project, and the four who have so far graduated now hold impactful research and industry positions. The project impacted additional students through the research and topics being incorporated into programming languages and special topics courses taught by the PI.</p> <p>The project's technical contributions have advanced the fields of programming languages and computing systems, by demonstrating new and better approaches for analyzing and improving parallel software. The potential impact of these contributions is to enable faster and more reliable computing systems, leading to improvements in the many areas&nbsp;that rely on computing, from transportation to health to communication.</p><br> <p>            Last Modified: 06/29/2019<br>      Modified by: Michael&nbsp;Bond</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ For more than a decade, computer chip manufacturers have focused on developing chips with more computing cores instead of faster cores, because of fundamental limitations such as heat dissipation that limit the ability to speed up individual cores. While these cores provide more computing power in theory, in practice it is difficult to develop, debug, and deploy parallel software that can leverage all of the extra computing power while also behaving correctly.  The project team addressed this challenge by developing, implementing, and evaluating new approaches for analyzing, debugging, and automatically improving the correctness and performance of parallel software. Importantly, all of the team's approaches work on off-the-shelf (commodity) hardware, rather than relying on custom (non-existent) hardware, allowing the approaches to be used in current systems. Overall, the project significantly advanced the state of the art by demonstrating a variety of approaches that are substantially faster than prior work's approaches, often making a qualitative difference by introducing an approach that is practical in a setting in which it was previously impractical.  The team developed a new approach for tracking communicating memory accesses efficiently, and designed a variety of approaches on top of it including multithreaded record &amp; replay and an atomicity violation detector. The team developed new approaches for detecting a common kind of concurrency bug called a data race and for inferring the potential erroneous behaviors that a data race can cause. The team made significant contributions in the area of predictive data race detectors, which detect more data races than traditional race detectors but at much higher cost in prior work; the team showed how to make predictive race detectors more powerful while performing nearly the same as traditional race detectors.  The team published in high-impact venues and made the source code for their implementations publicly available. Seven PhD students were trained while working on the project, and the four who have so far graduated now hold impactful research and industry positions. The project impacted additional students through the research and topics being incorporated into programming languages and special topics courses taught by the PI.  The project's technical contributions have advanced the fields of programming languages and computing systems, by demonstrating new and better approaches for analyzing and improving parallel software. The potential impact of these contributions is to enable faster and more reliable computing systems, leading to improvements in the many areas that rely on computing, from transportation to health to communication.       Last Modified: 06/29/2019       Submitted by: Michael Bond]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
