<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CI-ADDO-NEW: Stan, Scalable Software for Bayesian Modeling</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2012</AwardEffectiveDate>
<AwardExpirationDate>05/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>499637.00</AwardTotalIntnAmount>
<AwardAmount>499637</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This award is to design, code, document, test, dissememinate, and maintain Stan,an extensible&lt;br/&gt;open-source software framework and compiler for efficient and scalable Bayesian statistical modeling.&lt;br/&gt;Stan is an extensible, open-source, cross-platform software framework for developing Bayesian statistical&lt;br/&gt;models. The first step in Bayesian modeling is setting up a full probability model for all quantities of&lt;br/&gt;interest. Stan facilitates this process by providing an expressive and extensible domain-specific&lt;br/&gt;programming language for specifying probabilistic models. By compiling a model specification into&lt;br/&gt;executable code, Stan fully automates the second step of Bayesian inference, calculating the probabilities&lt;br/&gt;of unobserved quantities, such as model parameters and future observations, conditional on observed data.&lt;br/&gt;The third step involves evaluating the fit of the model to the data and its predictions for unseen data.&lt;br/&gt;When the model is easy to encode and inferences are fast and automatic to compute, it is easy to iterate&lt;br/&gt;the specification, fit and evaluation steps in order to refine the scientific model.&lt;br/&gt;Stan improves on the existing state of the art in both algorithmic and implementation details. Rather than&lt;br/&gt;being interpreted on the fly like its predecessors, Stan models are compiled to C++ code, which&lt;br/&gt;dramatically improves both scalability and efficiency. Stan provides a full algorithmic differentiation library for the functions required for statistical modeling. This method applies the chain rule from calculus to the program computing the probability function in order to calculate derivatives efficiently and accurately (a small multiple of the time taken to compute the&lt;br/&gt;function, independently of dimensionality). This allows Stan to fully automate the model fitting stage&lt;br/&gt;given only a specification of the probability function in Stan's modeling language.&lt;br/&gt;To maximize Stan's accessibility to the scientific community, it is being coded using standards-compliant&lt;br/&gt;C++, so that it will run under Windows, Macintosh, and Unix/Linux. To make running Stan even easier,&lt;br/&gt;it is callable from R, MATLAB, and Python, the three most popular platforms for numerical analysis,&lt;br/&gt;including exploration and plotting.</AbstractNarration>
<MinAmdLetterDate>05/30/2012</MinAmdLetterDate>
<MaxAmdLetterDate>05/30/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1205516</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Gelman</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrew E Gelman</PI_FULL_NAME>
<EmailAddress>gelman@stat.columbia.edu</EmailAddress>
<PI_PHON>2128512142</PI_PHON>
<NSF_ID>000233702</NSF_ID>
<StartDate>05/30/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Bob</FirstName>
<LastName>Carpenter</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bob Carpenter</PI_FULL_NAME>
<EmailAddress>rc2729@columbia.edu</EmailAddress>
<PI_PHON>2128512160</PI_PHON>
<NSF_ID>000141135</NSF_ID>
<StartDate>05/30/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049179401</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049179401</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName>New York</CityName>
<StateCode>NY</StateCode>
<ZipCode>100276902</ZipCode>
<StreetAddress><![CDATA[2960 Broadway]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1269</Code>
<Text>STATISTICS</Text>
</ProgramElement>
<ProgramElement>
<Code>7359</Code>
<Text>CCRI-CISE Cmnty Rsrch Infrstrc</Text>
</ProgramElement>
<ProgramReference>
<Code>1269</Code>
<Text>STATISTICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7359</Code>
<Text>COMPUTING RES INFRASTRUCTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~499637</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The outcome of this compute infrastructure grant is an open-source implementation of a new probabilistic programming language, Stan, which allows users to express statistical models and provides automatic inference software to fit these models to data. &nbsp;Specific inference includes classical penalized maximum likelihood estimation using optimization (L-BFGS) as well as full Bayesian inference in terms of Monte Carlo simulations (HMC/NUTS). &nbsp;</p> <p>The Stan users group now stands at over 1100 members and there have been over 100 peer-reviewed research papers published (not including those co-authored by the developers) across the physical, biological, and social sciences, citing Stan as being the basis of their statistical model fitting. &nbsp;The number of open-source developers who are regularly contributing to Stan is over a dozen, with members in several countries (US, Canada, Brazil, UK, France) and in industry as well as academia. &nbsp;The techniques explored in Stan have been adopted in other open-source packages (such as Laplace's Demon in R).</p> <p>The primary reasons for Stan's success are that it provides a natural and expressive language for formulating statistical models and it is much faster (between an order of magnitude and infinitely faster with more gain for computationally hader problems), more scalable (two orders of magnitude), and more robust (better arithmetic and special function handling and error reporting) than the former state of the art as represented by the general-purpose packages BUGS, JAGS, emcee, etc., as well as faster than most special-purpose software.</p> <p>Stan provides in-process, shared-memory C++ interfaces to R, Python, and the command line, with out-of-process, file-based interfaces available for MATLAB, Stata, and Julia. The underlying Stan Mathematics Library is an open-source C++ package for automatically calculating derivatives (up to machine precision) of the built-in C++ functions, special mathematical functions, matrix and linear algebra functions (such as determinants and inverses), and probability- and statistics-related functions (such as densities and distribution functions). &nbsp;The project hit its stretch goals and implemented ordinary differential equation solving with sensitivities, allowing general dynamic systems modeling which has already extended the state-of-the-art in what can be fit in the way of patient-specific response modeling in pharmacokinetics/pharmacodynamics (formerly done with maximum marginal likelihood and simple MCMC methods in NONMEM) and heterogeneous modeling of soil-carbon respiration (previously done in special packages with simple MCMC methods such as SoilR).</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 06/08/2015<br>      Modified by: Bob&nbsp;Carpenter</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The outcome of this compute infrastructure grant is an open-source implementation of a new probabilistic programming language, Stan, which allows users to express statistical models and provides automatic inference software to fit these models to data.  Specific inference includes classical penalized maximum likelihood estimation using optimization (L-BFGS) as well as full Bayesian inference in terms of Monte Carlo simulations (HMC/NUTS).    The Stan users group now stands at over 1100 members and there have been over 100 peer-reviewed research papers published (not including those co-authored by the developers) across the physical, biological, and social sciences, citing Stan as being the basis of their statistical model fitting.  The number of open-source developers who are regularly contributing to Stan is over a dozen, with members in several countries (US, Canada, Brazil, UK, France) and in industry as well as academia.  The techniques explored in Stan have been adopted in other open-source packages (such as Laplace's Demon in R).  The primary reasons for Stan's success are that it provides a natural and expressive language for formulating statistical models and it is much faster (between an order of magnitude and infinitely faster with more gain for computationally hader problems), more scalable (two orders of magnitude), and more robust (better arithmetic and special function handling and error reporting) than the former state of the art as represented by the general-purpose packages BUGS, JAGS, emcee, etc., as well as faster than most special-purpose software.  Stan provides in-process, shared-memory C++ interfaces to R, Python, and the command line, with out-of-process, file-based interfaces available for MATLAB, Stata, and Julia. The underlying Stan Mathematics Library is an open-source C++ package for automatically calculating derivatives (up to machine precision) of the built-in C++ functions, special mathematical functions, matrix and linear algebra functions (such as determinants and inverses), and probability- and statistics-related functions (such as densities and distribution functions).  The project hit its stretch goals and implemented ordinary differential equation solving with sensitivities, allowing general dynamic systems modeling which has already extended the state-of-the-art in what can be fit in the way of patient-specific response modeling in pharmacokinetics/pharmacodynamics (formerly done with maximum marginal likelihood and simple MCMC methods in NONMEM) and heterogeneous modeling of soil-carbon respiration (previously done in special packages with simple MCMC methods such as SoilR).                Last Modified: 06/08/2015       Submitted by: Bob Carpenter]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
