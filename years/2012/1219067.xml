<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small: Incremental Inductive Verification: A New Direction for Model Checking</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2012</AwardEffectiveDate>
<AwardExpirationDate>06/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>496992.00</AwardTotalIntnAmount>
<AwardAmount>496992</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Hardware and software computer systems are integrated into many aspects of our society, including medicine, transportation, financial markets, and communication.  Thus, the correctness of a computer system can be critical for financial or even human safety reasons. Formal verification is a methodology for finding errors and certifying that a system is free of errors.  It complements testing, which in practice can neither cover every possibility nor declare the absence of errors.  Because of the increasing complexity and prevalence of computer systems in recent years, significant improvements in algorithms for formal verification now have an immediate impact in computer system development, which in turn decreases design costs, accelerates development, and results in safer equipment.&lt;br/&gt;&lt;br/&gt;This project builds on the success of the IC3 algorithm for verifying invariance properties of digital hardware.  IC3, introduced only two years ago, is already used widely by hardware manufacturers and electronic design automation companies.  It is reported that it can, in practice, find deep bugs that are difficult to find with testing, or obtain proofs that no other algorithm can find.  But achieving the next significant gain in performance requires moving beyond the bit-level analysis that IC3 performs and instead considering designs at the word level, that is, at a level in which whole registers are sometimes considered rather just than their component latches.  This project addresses this challenge by developing a multi-domain version of IC3, as well as abstract domains, for reasoning about equality, uninterpreted functions, and arithmetic properties of circuits.  A second component of this project is to extend the incremental, inductive verification (IIV) methodology, of which IC3 was the first instance, to analyze properties expressed in CTL and CTL*, which are logics for expressing branching-time behavior.  Increased expressiveness allows analyzing more aspects of a design.  A final component is to exploit the natural parallelism of IIV algorithms through a distributed implementation.</AbstractNarration>
<MinAmdLetterDate>06/12/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/12/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1219067</AwardID>
<Investigator>
<FirstName>Fabio</FirstName>
<LastName>Somenzi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Fabio Somenzi</PI_FULL_NAME>
<EmailAddress>Fabio@Colorado.EDU</EmailAddress>
<PI_PHON>3034923466</PI_PHON>
<NSF_ID>000415741</NSF_ID>
<StartDate>06/12/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Aaron</FirstName>
<LastName>Bradley</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Aaron R Bradley</PI_FULL_NAME>
<EmailAddress>aaron.r.bradley@colorado.edu</EmailAddress>
<PI_PHON>3034928767</PI_PHON>
<NSF_ID>000499791</NSF_ID>
<StartDate>06/12/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Boulder</Name>
<CityName>Boulder</CityName>
<ZipCode>803031058</ZipCode>
<PhoneNumber>3034926221</PhoneNumber>
<StreetAddress>3100 Marine Street, Room 481</StreetAddress>
<StreetAddress2><![CDATA[572 UCB]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>007431505</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF COLORADO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007431505</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Colorado at Boulder]]></Name>
<CityName>Bouulder</CityName>
<StateCode>CO</StateCode>
<ZipCode>803090572</ZipCode>
<StreetAddress><![CDATA[3100 Marine Street, Room 479]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~496992</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project explored the use of incremental inductive proofs in the verification of hardware and software systems.&nbsp; These proofs state that a property of interest of a system holds in all initial states and in all successors of states that satisfy the property; they are automatically generated from the examinations of counterexamples to the latter claim.&nbsp; The IC3 is the incremental inductive algorithm at the base of this project.&nbsp;</p> <p>In prior researhc the PIs have shown the effectiveness of this approach for the verification of safety and progress linear-time properties.&nbsp; In this project algorithms that extend the incremental inductive approach to branching time logic, producing the first practical algorithm for model checking of Computational Tree Logic properties that is based on propositional satisfiability solvers and that outperforms other symbolic model checking algorithms for the same logic on a large set of realistic test cases.</p> <p>The project has also led to an improvement of the IC3 algorithm that addresses the obstacles to the inclusion of very general lemmas in the inductive proofs.&nbsp; The identification of "counterexamples to induction" leads to faster generation of more concise proofs.&nbsp; The resulting algorithm, as well as the CTL model-cehcking algorithm, have been disseminated through the open-source model checker IIMC.</p> <p>Another achievement of the project has been the development of an abstraction-refinement algorithm in which refinement is driven by counterexamples to induction.</p> <p>Fianally, the project has produced an algorithm that generalizes incremental, inductive proofs of small instances of parameterized families of systems.&nbsp; The proofs for the small instances are mined for lemmas that are then proved for the whole family.&nbsp; The style of proofs produced by the IC3 algorithm has proved particularly suitable for this application.</p><br> <p>            Last Modified: 02/16/2016<br>      Modified by: Fabio&nbsp;Somenzi</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project explored the use of incremental inductive proofs in the verification of hardware and software systems.  These proofs state that a property of interest of a system holds in all initial states and in all successors of states that satisfy the property; they are automatically generated from the examinations of counterexamples to the latter claim.  The IC3 is the incremental inductive algorithm at the base of this project.   In prior researhc the PIs have shown the effectiveness of this approach for the verification of safety and progress linear-time properties.  In this project algorithms that extend the incremental inductive approach to branching time logic, producing the first practical algorithm for model checking of Computational Tree Logic properties that is based on propositional satisfiability solvers and that outperforms other symbolic model checking algorithms for the same logic on a large set of realistic test cases.  The project has also led to an improvement of the IC3 algorithm that addresses the obstacles to the inclusion of very general lemmas in the inductive proofs.  The identification of "counterexamples to induction" leads to faster generation of more concise proofs.  The resulting algorithm, as well as the CTL model-cehcking algorithm, have been disseminated through the open-source model checker IIMC.  Another achievement of the project has been the development of an abstraction-refinement algorithm in which refinement is driven by counterexamples to induction.  Fianally, the project has produced an algorithm that generalizes incremental, inductive proofs of small instances of parameterized families of systems.  The proofs for the small instances are mined for lemmas that are then proved for the whole family.  The style of proofs produced by the IC3 algorithm has proved particularly suitable for this application.       Last Modified: 02/16/2016       Submitted by: Fabio Somenzi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
