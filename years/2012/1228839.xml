<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Medium: Collaborative: Trustworthy Programs Without A Trustworthy Operating System</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>447220.00</AwardTotalIntnAmount>
<AwardAmount>455220</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Deborah Shands</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The operating system (OS) exercises complete control over applications, thus a compromise of the OS compromises every application. Software developers have little recourse to improve security in the face of system compromise---they cannot defend against OS vulnerabilities, nor can they reasonably substitute a secure version of the millions of lines of code that constitute a modern OS.&lt;br/&gt;&lt;br/&gt;Rather than require applications to blindly trust OS interactions, this project investigates a system architecture that enables trusted applications to efficiently verify OS interactions with the help of a small, trusted hypervisor.  Most verification work is performed within the C language runtime, minimizing changes to legacy code and shielding developers from increased programming complexity.&lt;br/&gt;The prototype system, called InkTag,improves upon prior work in several key areas: it provides more efficient techniques to verify system call results, implements usable access control for resources managed by an untrusted OS, and introduces hardware and software techniques to further reduce the size of the trusted computing base.&lt;br/&gt;&lt;br/&gt;Cloud computing provides energy and economic efficiencies, but suffers from the inability to give meaningful security guarantees to hosted applications. This project demonstrates that system security is possible without trusting the OS---a large part of the hosted infrastructure.  This project is also developing new materials for undergraduate and graduate curricula that combine core knowledge of systems with an understanding of how systems provide security properties, equipping future computer professionals with a better understanding of what security guarantees a system can meaningfully provide.</AbstractNarration>
<MinAmdLetterDate>08/17/2012</MinAmdLetterDate>
<MaxAmdLetterDate>04/24/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1228839</AwardID>
<Investigator>
<FirstName>Donald</FirstName>
<LastName>Porter</LastName>
<PI_MID_INIT>E</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Donald E Porter</PI_FULL_NAME>
<EmailAddress>porter@cs.unc.edu</EmailAddress>
<PI_PHON>9195906044</PI_PHON>
<NSF_ID>000569931</NSF_ID>
<StartDate>08/17/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Stony Brook</Name>
<CityName>Stony Brook</CityName>
<ZipCode>117940001</ZipCode>
<PhoneNumber>6316329949</PhoneNumber>
<StreetAddress>WEST 5510 FRK MEL LIB</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804878247</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020657151</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SUNY at Stony Brook]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>117943362</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~447220</FUND_OBLG>
<FUND_OBLG>2015~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Our country increasingly depends on computer systems for all aspects<br />of life---from business to medicine to education.&nbsp; It is essential<br />that we secure this critical computing infrastructure.&nbsp; Securing<br />operating systems (OSes) has proven particularly difficult.&nbsp; Although<br />OSes are comprised of well-written code with relatively few<br />vulnerabilities, any vulnerability in the OS can compromise all<br />applications on the system.&nbsp; Further, the size and complexity of OSes<br />has been a barrier to many approaches to security that can work on<br />smaller code bases.<br /><br />This project investigated techniques to secure applications running on<br />top of a large, untrusted operating system.&nbsp; The flagship effort of<br />this project is a system called InkTag, which demonstrates that<br />programs, with the help of a small hypervisor, can efficiently check<br />OS behavior at runtime.&nbsp; The essential insight is that it is tractable<br />to model and check the per-application behavior of an OS; much of the<br />complexity in modern OSes arises from multiplexing resources for many<br />applications.&nbsp; We have worked with collaborators at UT Austin to<br />develop and harden InkTag, in particular in the area of securely using<br />multiple CPU cores---a ubiquitous and performance-critical feature of<br />modern computers.<br /><br />Since the project began, secure computing hardware, such as Intel's SGX,<br />has become a feature of commodity CPUs.&nbsp; We have identified and addressed<br />a number of challenges to deploying applications on these secure hardware<br />platforms.&nbsp; Providing a secure computing environment requires restrictions<br />on how the OS can interact with an application, which will necessarily<br />break software built on risky interactions with a potentially-compromised OS.<br /><br />One important outcome of this project is a port of the Graphene<br />Library OS to run inside of Intel's SGX environment.&nbsp; Graphene<br />significantly reduces the difficulty of porting an application to run<br />inside of SGX.&nbsp; Graphene-SGX is released as open source, and has been<br />used by other researchers to accelerate projects investigating<br />applications of SGX.<br /><br />Another common model for secure hardware is to partition an<br />application into components with different levels of sensitivity.&nbsp; For<br />instance, one might move particularly sensitive data or computation<br />into an SGX-protected enclave.&nbsp; Simply dividing up a large<br />application, much less reasoning about the newly-introduced interfaces<br />between application components, is daunting for developers.&nbsp; We have<br />developed Civet, a system that helps the developer partition a large<br />application into sensitive components that run in a hardware-protected<br />environment, and less sensitive components that run outside of the<br />secure hardware.&nbsp; Civet includes design-time tools to help the<br />developer reason about the security of a potential program partition,<br />as well as runtime support for using SGX in a managed language like<br />Java.<br /><br />The core intellectual merit of this work is that we have demonstrated<br />the feasibility of specifying and checking OS behavior from the<br />application's perspective, including complex abstraction like<br />multi-core synchronization.&nbsp; This work has also discovered techniques<br />to facilitate code reuse on emerging secure hardware platforms.<br />Finally, we have discovered several important building blocks for<br />building secure systems, including new code analysis techniques based<br />on logic programming, new approaches to writing multi-core programs,<br />and enhancements to information flow tracking techniques.<br /><br />The broader impacts of this work are ongoing, as securing cloud<br />computing is an open problem. Our work has added to the toolbox of<br />researchers and practitioners in this space.&nbsp; In particular, rapid<br />prototyping and code reuse tools like Graphene and Civet can<br />accelerate innovation in securing systems.&nbsp; The project has trained<br />several students in important technologies for secure systems,<br />including virtualization; language-level analysis tools; Java virtual<br />machine runtimes; and programming secure hardware, such as SGX.<br />Several students involved in the project have graduated and now work<br />for relevant technology companies.</p><br> <p>            Last Modified: 10/20/2016<br>      Modified by: Donald&nbsp;E&nbsp;Porter</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Our country increasingly depends on computer systems for all aspects of life---from business to medicine to education.  It is essential that we secure this critical computing infrastructure.  Securing operating systems (OSes) has proven particularly difficult.  Although OSes are comprised of well-written code with relatively few vulnerabilities, any vulnerability in the OS can compromise all applications on the system.  Further, the size and complexity of OSes has been a barrier to many approaches to security that can work on smaller code bases.  This project investigated techniques to secure applications running on top of a large, untrusted operating system.  The flagship effort of this project is a system called InkTag, which demonstrates that programs, with the help of a small hypervisor, can efficiently check OS behavior at runtime.  The essential insight is that it is tractable to model and check the per-application behavior of an OS; much of the complexity in modern OSes arises from multiplexing resources for many applications.  We have worked with collaborators at UT Austin to develop and harden InkTag, in particular in the area of securely using multiple CPU cores---a ubiquitous and performance-critical feature of modern computers.  Since the project began, secure computing hardware, such as Intel's SGX, has become a feature of commodity CPUs.  We have identified and addressed a number of challenges to deploying applications on these secure hardware platforms.  Providing a secure computing environment requires restrictions on how the OS can interact with an application, which will necessarily break software built on risky interactions with a potentially-compromised OS.  One important outcome of this project is a port of the Graphene Library OS to run inside of Intel's SGX environment.  Graphene significantly reduces the difficulty of porting an application to run inside of SGX.  Graphene-SGX is released as open source, and has been used by other researchers to accelerate projects investigating applications of SGX.  Another common model for secure hardware is to partition an application into components with different levels of sensitivity.  For instance, one might move particularly sensitive data or computation into an SGX-protected enclave.  Simply dividing up a large application, much less reasoning about the newly-introduced interfaces between application components, is daunting for developers.  We have developed Civet, a system that helps the developer partition a large application into sensitive components that run in a hardware-protected environment, and less sensitive components that run outside of the secure hardware.  Civet includes design-time tools to help the developer reason about the security of a potential program partition, as well as runtime support for using SGX in a managed language like Java.  The core intellectual merit of this work is that we have demonstrated the feasibility of specifying and checking OS behavior from the application's perspective, including complex abstraction like multi-core synchronization.  This work has also discovered techniques to facilitate code reuse on emerging secure hardware platforms. Finally, we have discovered several important building blocks for building secure systems, including new code analysis techniques based on logic programming, new approaches to writing multi-core programs, and enhancements to information flow tracking techniques.  The broader impacts of this work are ongoing, as securing cloud computing is an open problem. Our work has added to the toolbox of researchers and practitioners in this space.  In particular, rapid prototyping and code reuse tools like Graphene and Civet can accelerate innovation in securing systems.  The project has trained several students in important technologies for secure systems, including virtualization; language-level analysis tools; Java virtual machine runtimes; and programming secure hardware, such as SGX. Several students involved in the project have graduated and now work for relevant technology companies.       Last Modified: 10/20/2016       Submitted by: Donald E Porter]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
