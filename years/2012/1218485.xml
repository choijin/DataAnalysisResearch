<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Advancing Operating System Interfaces to Solid-State Storage</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>487094.00</AwardTotalIntnAmount>
<AwardAmount>487094</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Solid-state storage technologies, such as flash, phase-change memory&lt;br/&gt;and memristors promise large-capacity storage at speeds much faster&lt;br/&gt;than disk. To date, mainstream use of these technologies has been as a&lt;br/&gt;replacement for disks, storing a disk-oriented file system.  However,&lt;br/&gt;solid-state storage is and will remain far more expensive than&lt;br/&gt;disks. Thus, it will often be used as a cache or special-purpose&lt;br/&gt;store, and not as the main repository of data.&lt;br/&gt;&lt;br/&gt;This proposal develops new interfaces to solid-state storage that&lt;br/&gt;leverage its new features, such as access via ordinary memory&lt;br/&gt;instructions, and its role in large software systems as a middle layer&lt;br/&gt;between memory and disk. It focuses on two forms of solid-state&lt;br/&gt;storage: flash memory, common in solid-state drives and mobile&lt;br/&gt;devices, and forthcoming storage-class memory, which compared to flash&lt;br/&gt;promises lower latency, better endurance, and access as memory rather&lt;br/&gt;than as a device.&lt;br/&gt;&lt;br/&gt;This research addresses important concerns about using solid-state&lt;br/&gt;storage: how best to use the capabilities of these devices to improve&lt;br/&gt;specific applications or use cases, such as caching; how to provide&lt;br/&gt;access to internal management capabilities of solid-state storage&lt;br/&gt;devices, such as address translation and garbage collection, to&lt;br/&gt;applications; how to remove software layers between an application and&lt;br/&gt;storage to reduce latency; and how to provide reliable storage while&lt;br/&gt;removing many of the layers that currently provide reliability.</AbstractNarration>
<MinAmdLetterDate>08/13/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/13/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218485</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Swift</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael M Swift</PI_FULL_NAME>
<EmailAddress>swift@cs.wisc.edu</EmailAddress>
<PI_PHON>6088900131</PI_PHON>
<NSF_ID>000103907</NSF_ID>
<StartDate>08/13/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>Madison</CityName>
<StateCode>WI</StateCode>
<ZipCode>537151218</ZipCode>
<StreetAddress><![CDATA[1210 W Dayton St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~487094</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Solid-state memory technologies, such as flash and &nbsp;non-volatile phase-change memory promise large-capacity storage at speeds much faster than disk. Mainstream use of these technologies has been as a disk replacement, accessed through a disk-oriented file system. However, this approach can increase the cost of the system by masking the inherent high performance of these new technologies through many layers of software.</p> <p>This project generated a new flash-memory device targeted at a common usage, which is to store frequently accessed data while leaving most data on a slower device, such as a hard disk. This work showed that by designing a new interface to flash drive that is targeted specifically at storing just frequently accessed data, the flash drive could perform much better. The proposed design was prototyped in hardware, which lead to new discoveries about the challenges in changing how flash is accessed.</p> <p dir="ltr"><span>This project generated a new file-system architecture enabled by non-volatile memory. This design allows applications to access file data in most cases without any involvement of the operating system and at the raw speed of the memory technology. The project demonstrated how to design this system in a way that is compatible with existing software, allowing it to receive better performance. More importantly, though, this work allows new optimizations not currently possible by specializing the system for particular use cases. For example, common applications used in Internet services can access data at much lower overhead through new interfaces.</span></p> <p dir="ltr"><span>Separately, this project developed the first-ever set of benchmark workloads for evaluating non-volatile memory systems. This enables researchers to more easily evaluate their designs and compare their results. An analysis of how programs use non-volatile memory showed several promising opportunities for further performance improvement.</span></p> <div><span><br /></span></div> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/27/2017<br>      Modified by: Michael&nbsp;M&nbsp;Swift</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Solid-state memory technologies, such as flash and  non-volatile phase-change memory promise large-capacity storage at speeds much faster than disk. Mainstream use of these technologies has been as a disk replacement, accessed through a disk-oriented file system. However, this approach can increase the cost of the system by masking the inherent high performance of these new technologies through many layers of software.  This project generated a new flash-memory device targeted at a common usage, which is to store frequently accessed data while leaving most data on a slower device, such as a hard disk. This work showed that by designing a new interface to flash drive that is targeted specifically at storing just frequently accessed data, the flash drive could perform much better. The proposed design was prototyped in hardware, which lead to new discoveries about the challenges in changing how flash is accessed. This project generated a new file-system architecture enabled by non-volatile memory. This design allows applications to access file data in most cases without any involvement of the operating system and at the raw speed of the memory technology. The project demonstrated how to design this system in a way that is compatible with existing software, allowing it to receive better performance. More importantly, though, this work allows new optimizations not currently possible by specializing the system for particular use cases. For example, common applications used in Internet services can access data at much lower overhead through new interfaces. Separately, this project developed the first-ever set of benchmark workloads for evaluating non-volatile memory systems. This enables researchers to more easily evaluate their designs and compare their results. An analysis of how programs use non-volatile memory showed several promising opportunities for further performance improvement.               Last Modified: 11/27/2017       Submitted by: Michael M Swift]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
