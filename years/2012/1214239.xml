<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>NeTS: Small: An Efficient Reachability Analysis Method for Large Dynamic Networks and Its Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>350000.00</AwardTotalIntnAmount>
<AwardAmount>350000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>John Brassil</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Enterprise and campus networks are often large with many having hundreds of routers and thousands of switches which interconnect tens of thousands of hosts and servers. The IP network for an enterprise is not only charged with delivering IP packets but also blocking packets based on security and policy considerations. The set of packets that can travel from one node to another node (reachability set) is controlled by router configurations and by packet filters that guard the outgoing and incoming interfaces of routers and switches. The ability to compute reachability sets is valuable not only for troubleshooting reachability problems but also for debugging and redesigning access control lists (ACLs) in case of link/router failures or before new links/routers are deployed. At present, there is no method fast enough for online computation of reachability sets for large dynamic networks. This project will leverage a novel idea for very fast computation of reachability sets as the basis for developing a theoretical foundation for both transforming network design and configuration into a science and for developing software tools for monitoring, diagnosing, and configuring of large dynamic networks. &lt;br/&gt;&lt;br/&gt;The objectives and activities in the project include the following: (i) Design and implementation of algorithms fast enough to compute reachability sets and answer an online reachability query in milliseconds; (ii) design and implementation of methods and algorithms to update reachability sets of large networks with dynamic changes in topology, packet filters, and forwarding tables at a frequency of once every few seconds; (iii) analysis of ?atomic packet sets? computed from configuration files of operational networks for knowledge discovery and identifying network reachability structure; (iv) design and implementation of a network-wide reachability policy language such that automated tools can be used to check that a network configuration satisfies stated policies; (v) investigation of a top-down design approach for configuring new networks with software tools used by network designers to generate packet filters from network-wide reachability policies, with ACLs generated automatically to implement the packet filters.&lt;br/&gt;&lt;br/&gt;Broader Impact:&lt;br/&gt;The results of this project will contribute towards a scientific foundation for network design and management and the creation of a top-down design approach for configuring networks, which are key aspects of building more secure and reliable networks.   It will also educate undergraduate and graduate students on new concepts, formal analysis methods, and software tools for network design and configuration. In particular, the results of this project will be incorporated into the undergraduate and graduate classes being taught by the principal investigator at the University of Texas at Austin.  The investigators will actively seek out involvement by high school, undergraduate, and graduate students, especially students from under-represented minorities. The software tools to be created from the project?s research findings will be made available to other researchers under a license of the Free Software Foundation.</AbstractNarration>
<MinAmdLetterDate>08/17/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/17/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1214239</AwardID>
<Investigator>
<FirstName>Simon</FirstName>
<LastName>Lam</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Simon S Lam</PI_FULL_NAME>
<EmailAddress>lam@cs.utexas.edu</EmailAddress>
<PI_PHON>5124719531</PI_PHON>
<NSF_ID>000432537</NSF_ID>
<StartDate>08/17/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787595316</ZipCode>
<StreetAddress><![CDATA[3925 W Braker Lane, Ste 3.340]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~350000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong><span>Atomic predicates</span></strong><span>: &nbsp;Managing a large packet network is a complex task.&nbsp; The process of forwarding packets is prone to faults from unexpected protocol interactions and configuration errors. For analysis, both forwarding tables and access control lists (ACLs) are modeled as packet filters specified by predicates. Each predicate represents a set of packets for which the predicate evaluates to true and can pass the packet filter.</span></p> <p><span>For a network of packet filters (i.e., predicates), the investigators conceived and defined atomic predicates and proved that atomic predicates specify the coarsest equivalence classes in the packet space.&nbsp; They designed an algorithm to compute atomic predicates and built&nbsp; a new tool,<span>&nbsp;</span><em><span>AP Verifier</span></em>. By computing reachability trees for atomic predicates instead of for individual packets, AP Verifier reduces computation &nbsp;time and space by orders of magnitudes. This is because each atomic predicate typically represents a very large number of equivalent packets in many disjoint fragments of&nbsp; the packet space. This outcome indicates that there exist large amounts of redundancy in the forwarding and ACL rules of real networks. &nbsp;</span></p> <p class="vert-spacing"><strong><span>A general theory of packet equivalence</span></strong><span><span>&nbsp;</span></span><strong><span>for networks with</span></strong><span><strong><span>&nbsp;</span></strong></span><strong><span>&nbsp;transformers</span></strong><span>. ISPs use different types of tunnels (e.g., MPLS, IP-in-IP) to route packets. The entry and exit routers of a tunnel perform header encapsulation and de-encapsulation, respectively.&nbsp; Each transit router in a MPLS tunnel performs label switching. All of them perform packet transformations. NATs rewrite packets and are packet transformers. Thus, every packet injected into the network may possibly be transformed into other packets by a sequence of transformers. To generalize their theory to networks with packet transformers, the investigators conceived a new packet equivalence relation that formalizes the following intuition: namely, two packets are equivalent if and only if they are treated identically by every filter and by every possible sequence of one or more transformers in the network. Then, they solved two additional hard problems: (i) formulating a new definition of atomic predicates for sets of transformers and filters with a proof that they specify the coarsest equivalence classes of packets, and (ii) designing a new algorithm for computing atomic predicates for sets of transformers and filters with a proof that the algorithm terminates and, upon termination, it returns the set of atomic predicates. The new algorithm and formulas in the general theory were implemented in a new verification tool,<span>&nbsp;</span><em><span>APT</span></em><span><em>&nbsp;</em></span>(Atomic Predicates for Transformers).&nbsp; Theorems in the general theory are stated and proved as theorems in logic and may have broader applications.</span></p> <p><strong><span>Collaborative verification of forward and reverse reachability:</span></strong><span><span>&nbsp;</span></span><span>&nbsp;Active probes (pings and traceroutes) are widely used to measure Internet data plane reachability but&nbsp; these probes have &nbsp;limitations and biases. &nbsp;In particular, they can be used to check forward reachability but<span>&nbsp;</span><em><span>not reverse reachability</span></em>. Currently, when network operators debug reachability problems, they often ask operators of other networks for help by telephone, email, or posting on mailing lists.&nbsp;&nbsp;The investigators designed and implemented an application-layer protocol, COVE, to automate the exchange of data plane reachability information between networks that have a business relationship and thus trust each other. &nbsp;A network deploys COVE by running the protocol in a host, called its&nbsp;<em><span>local verifier</span></em>.&nbsp; The local verifiers of two networks exchange encrypted messages with each other. &nbsp;COVE was designed to improve a network&rsquo;s views of forward and reverse reachability in the Internet data plane even if COVE is partially deployed by as few as two networks connected by a link. Once there is a set of interconnected networks that deploy COVE, there is strong incentive for another network to join and for the set to accept a new member to increase every network&rsquo;s views of data plane reachability. COVE is the only protocol/tool available to date for operators of networks to collaboratively compute reverse as well as forward inter-network reachability trees for their networks&rsquo; provider and customer cones.&nbsp; </span></p> <p><em><strong><span>Broader impact</span></strong></em><span>s: The theorems about atomic predicates and equivalence were stated and proved as theorems in logic.&nbsp; The theorems are interesting in &nbsp;the general domain of logic.&nbsp; In a recent paper published in&nbsp; the proceedings of 2016 ACM POPL, Plotkin et al. named the equivalence relation defined by atomic predicates as the "Yang-Lam equivalence." (Gordon Plotkin is a well-known logician in computer science.)&nbsp; Beyond logic, the atomic predicates idea may have potential applications for classifying and aggregating big datasets into equivalence classes, which can be stored and analyzed efficiently.</span></p> <p class="vert-spacing"><span>&nbsp;This project has provided training and professional development for five students in the computer science Ph.D. programs of the University of Texas at &nbsp;Austin and the University of Kentucky.&nbsp; Of the three students who graduated from the University of Texas at Austin, one is a software engineer at Google, another is an assistant professor of computer engineering at UC Santa Cruz, and the third is an assistant professor of computer science at the University of Connecticut.&nbsp;</span></p> <p>&nbsp;</p><br> <p>            Last Modified: 09/15/2016<br>      Modified by: Simon&nbsp;S&nbsp;Lam</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Atomic predicates:  Managing a large packet network is a complex task.  The process of forwarding packets is prone to faults from unexpected protocol interactions and configuration errors. For analysis, both forwarding tables and access control lists (ACLs) are modeled as packet filters specified by predicates. Each predicate represents a set of packets for which the predicate evaluates to true and can pass the packet filter.  For a network of packet filters (i.e., predicates), the investigators conceived and defined atomic predicates and proved that atomic predicates specify the coarsest equivalence classes in the packet space.  They designed an algorithm to compute atomic predicates and built  a new tool, AP Verifier. By computing reachability trees for atomic predicates instead of for individual packets, AP Verifier reduces computation  time and space by orders of magnitudes. This is because each atomic predicate typically represents a very large number of equivalent packets in many disjoint fragments of  the packet space. This outcome indicates that there exist large amounts of redundancy in the forwarding and ACL rules of real networks.   A general theory of packet equivalence for networks with  transformers. ISPs use different types of tunnels (e.g., MPLS, IP-in-IP) to route packets. The entry and exit routers of a tunnel perform header encapsulation and de-encapsulation, respectively.  Each transit router in a MPLS tunnel performs label switching. All of them perform packet transformations. NATs rewrite packets and are packet transformers. Thus, every packet injected into the network may possibly be transformed into other packets by a sequence of transformers. To generalize their theory to networks with packet transformers, the investigators conceived a new packet equivalence relation that formalizes the following intuition: namely, two packets are equivalent if and only if they are treated identically by every filter and by every possible sequence of one or more transformers in the network. Then, they solved two additional hard problems: (i) formulating a new definition of atomic predicates for sets of transformers and filters with a proof that they specify the coarsest equivalence classes of packets, and (ii) designing a new algorithm for computing atomic predicates for sets of transformers and filters with a proof that the algorithm terminates and, upon termination, it returns the set of atomic predicates. The new algorithm and formulas in the general theory were implemented in a new verification tool, APT (Atomic Predicates for Transformers).  Theorems in the general theory are stated and proved as theorems in logic and may have broader applications.  Collaborative verification of forward and reverse reachability:  Active probes (pings and traceroutes) are widely used to measure Internet data plane reachability but  these probes have  limitations and biases.  In particular, they can be used to check forward reachability but not reverse reachability. Currently, when network operators debug reachability problems, they often ask operators of other networks for help by telephone, email, or posting on mailing lists.  The investigators designed and implemented an application-layer protocol, COVE, to automate the exchange of data plane reachability information between networks that have a business relationship and thus trust each other.  A network deploys COVE by running the protocol in a host, called its local verifier.  The local verifiers of two networks exchange encrypted messages with each other.  COVE was designed to improve a network?s views of forward and reverse reachability in the Internet data plane even if COVE is partially deployed by as few as two networks connected by a link. Once there is a set of interconnected networks that deploy COVE, there is strong incentive for another network to join and for the set to accept a new member to increase every network?s views of data plane reachability. COVE is the only protocol/tool available to date for operators of networks to collaboratively compute reverse as well as forward inter-network reachability trees for their networks? provider and customer cones.    Broader impacts: The theorems about atomic predicates and equivalence were stated and proved as theorems in logic.  The theorems are interesting in  the general domain of logic.  In a recent paper published in  the proceedings of 2016 ACM POPL, Plotkin et al. named the equivalence relation defined by atomic predicates as the "Yang-Lam equivalence." (Gordon Plotkin is a well-known logician in computer science.)  Beyond logic, the atomic predicates idea may have potential applications for classifying and aggregating big datasets into equivalence classes, which can be stored and analyzed efficiently.  This project has provided training and professional development for five students in the computer science Ph.D. programs of the University of Texas at  Austin and the University of Kentucky.  Of the three students who graduated from the University of Texas at Austin, one is a software engineer at Google, another is an assistant professor of computer engineering at UC Santa Cruz, and the third is an assistant professor of computer science at the University of Connecticut.           Last Modified: 09/15/2016       Submitted by: Simon S Lam]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
