<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Small: Low latency browser-based web computation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2012</AwardEffectiveDate>
<AwardExpirationDate>09/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>516000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Maria Zemankova</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The goal of this project is to provide an efficient platform for browser-based, data-driven web application computation. The platform enables cost-effective development of fast-responding applications that adjust well to accesses from mobile clients (e.g. smart phones, tablets).  The project achieves its goal using the following approaches: (1) designing novel high level, location-transparent, declarative, data-driven languages that require much lower coding effort than direct HTML5 coding in order to specify the business process and data access of the applications; (2) developing an optimizer for low latency query execution plans that utilize browser-based storage and asynchronous computation;  (3) developing an action scheduler that optimizes the location and execution order of the actions described in the declarative language; (4) developing a user/action concurrency control theory and a dependency analysis algorithm so that the user can view and act while prior actions are still computed; (5) prototyping an application-enabling platform that encompasses the developed languages, algorithms and optimizations; and (6) evaluating the effectiveness of the platform in two aspects: how much it reduces latency and how much it reduces the coding effort.&lt;br/&gt;&lt;br/&gt;The project's research will have great impacts on mobile-accessible, data-driven web applications, which, by being written in the proposed automatically optimized, declarative languages, will enjoy both low latency and low development cost. The project supports graduate and undergraduate students. Lectures on the research results will be incorporated into PI's undergraduate-level course on web application development. Publications, software, an online service and experimental data from this research will be disseminated via the project web site (http://www.db.ucsd.edu/browserbasedforward).</AbstractNarration>
<MinAmdLetterDate>09/09/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/13/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1219263</AwardID>
<Investigator>
<FirstName>Yannis</FirstName>
<LastName>Papakonstantinou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yannis Papakonstantinou</PI_FULL_NAME>
<EmailAddress>yannis@cs.ucsd.edu</EmailAddress>
<PI_PHON>8588221612</PI_PHON>
<NSF_ID>000229823</NSF_ID>
<StartDate>09/09/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>920930404</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~500000</FUND_OBLG>
<FUND_OBLG>2013~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>It is well known that implementing a data-driven application requires time and money. The result is that organizations, corporations and the government often lack the data analytics and management applications that they need since the budget limitations and the speed of business requirements do not allow for the needed applications to be built on time.</p> <p>A major source of the cost of building of data-driven applications is the fact that the application has to collect data from multiple sources, combine them and provide them with the appropriate format to the visualization components. It is both a blessing and a curse of the Big Data era that this source of cost is increasing. The Big Data era is characterized by a big diversity of databases. Besides the customary SQL databases, nowadays data are also found on NoSQL, NewSQL and SQL-on-Hadoop databases. Furthermore, interesting data are also found on the client device (typically smartphone) and its browser. Finally, the plethora of visualization components creates the need for easily adjusting the results to the formats that the visualizations need.</p> <p>Given the importance of semistructured data (such as JSON) both as input in NoSQL databases and as JSON (in particular) as the logical representation of the visualization input in MVVM architectures, the project created the SQL++ query language which accesses seamlessly both SQL and semistructured data. While the SQL++ idea (as an SQL extension for semistructured data) pre-existed, the project was focused on providing the full semistructured data functionality required - namely, account for the potential lack of schema, enable arbitrary inputs, outputs and transformations as powerful as the ones that XQuery achieved. Unlike XQuery this project was committed to produce an SQL compatible language, since this is what the majority of developers understands.<strong><br /></strong></p> <p>Per the original project objective, the project created a SQL++ distributed query processing engine, including the ability to refer to data on either the browser or&nbsp;server. Furthermore, the project addressed the case of live data, by developing Incremental View Maintenance that ensures that the views offered to the users are up-to-date, i.e., they reflect the state of the underlying databases.</p> <p>The project expanded SQL++ into a Configurable SQL++ that formally captures the query language differences across the multiple semistructured query languages of the multiple NoSQL, newSQL and SQL-on-Hadoop databases of today. Thus the Configurable SQL++ became a useful tool for formally surveying the semantic differences between the multiple languages for NoSQL, NewSQL and SQL-on-Hadoop. We disseminated the Configurable SQL++ to the industry, in the order of creating a dialog and a common understanding that will eventually will lead to the appropriate (for NoSQL, NewSQL and SQL-on-Hadoop) clean and formal extensions for extensions of the SQL standard.<strong>&nbsp;</strong>The response of the database industry to SQL++ and Configurable SQL++ has been excellent. A number of NoSQL databases adopt and we anticipate that SQL++ will further influence the database industry.</p> <p>Finally, Configurable SQL++ plays an internal role to the distributed query processor that accesses multiple sources of semistructured data. Recall, these sources are very diverse on the query languages that they use. Thus the distributed query processor needs to be able to interact with these diverse languages and rewrite the application requests into the languages they understand. Configurable SQL++ brings in a formal definition of the diversity aspects of the various languages. Then it becomes much easier for the distributed query processor to translate across these languages.</p><br> <p>            Last Modified: 08/11/2017<br>      Modified by: Yannis&nbsp;Papakonstantinou</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ It is well known that implementing a data-driven application requires time and money. The result is that organizations, corporations and the government often lack the data analytics and management applications that they need since the budget limitations and the speed of business requirements do not allow for the needed applications to be built on time.  A major source of the cost of building of data-driven applications is the fact that the application has to collect data from multiple sources, combine them and provide them with the appropriate format to the visualization components. It is both a blessing and a curse of the Big Data era that this source of cost is increasing. The Big Data era is characterized by a big diversity of databases. Besides the customary SQL databases, nowadays data are also found on NoSQL, NewSQL and SQL-on-Hadoop databases. Furthermore, interesting data are also found on the client device (typically smartphone) and its browser. Finally, the plethora of visualization components creates the need for easily adjusting the results to the formats that the visualizations need.  Given the importance of semistructured data (such as JSON) both as input in NoSQL databases and as JSON (in particular) as the logical representation of the visualization input in MVVM architectures, the project created the SQL++ query language which accesses seamlessly both SQL and semistructured data. While the SQL++ idea (as an SQL extension for semistructured data) pre-existed, the project was focused on providing the full semistructured data functionality required - namely, account for the potential lack of schema, enable arbitrary inputs, outputs and transformations as powerful as the ones that XQuery achieved. Unlike XQuery this project was committed to produce an SQL compatible language, since this is what the majority of developers understands.   Per the original project objective, the project created a SQL++ distributed query processing engine, including the ability to refer to data on either the browser or server. Furthermore, the project addressed the case of live data, by developing Incremental View Maintenance that ensures that the views offered to the users are up-to-date, i.e., they reflect the state of the underlying databases.  The project expanded SQL++ into a Configurable SQL++ that formally captures the query language differences across the multiple semistructured query languages of the multiple NoSQL, newSQL and SQL-on-Hadoop databases of today. Thus the Configurable SQL++ became a useful tool for formally surveying the semantic differences between the multiple languages for NoSQL, NewSQL and SQL-on-Hadoop. We disseminated the Configurable SQL++ to the industry, in the order of creating a dialog and a common understanding that will eventually will lead to the appropriate (for NoSQL, NewSQL and SQL-on-Hadoop) clean and formal extensions for extensions of the SQL standard. The response of the database industry to SQL++ and Configurable SQL++ has been excellent. A number of NoSQL databases adopt and we anticipate that SQL++ will further influence the database industry.  Finally, Configurable SQL++ plays an internal role to the distributed query processor that accesses multiple sources of semistructured data. Recall, these sources are very diverse on the query languages that they use. Thus the distributed query processor needs to be able to interact with these diverse languages and rewrite the application requests into the languages they understand. Configurable SQL++ brings in a formal definition of the diversity aspects of the various languages. Then it becomes much easier for the distributed query processor to translate across these languages.       Last Modified: 08/11/2017       Submitted by: Yannis Papakonstantinou]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
