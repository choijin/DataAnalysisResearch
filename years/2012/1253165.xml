<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Principles and Practice of Distributed Updates</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2013</AwardEffectiveDate>
<AwardExpirationDate>01/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>532005.00</AwardTotalIntnAmount>
<AwardAmount>532005</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Many systems must be periodically updated to add features, fix bugs, patch security vulnerabilities, and eliminate performance bottlenecks.  In some systems, updates can be applied by simply halting the program, updating the code and data, and restarting the new version, but in critical systems even brief interruptions for maintenance are unacceptable.  Although the research community has developed techniques for updating programs on the fly, existing frameworks only handle a single machine. To update the software running on a distributed system, programmers typically use ad hoc techniques that are difficult to reason about and prone to error.&lt;br/&gt;&lt;br/&gt;The goal of this project is to develop foundational principles and practical techniques for managing distributed updates.  A central theme is the use of bidirectional transformations to bridge the gap between different versions of a program, thereby allowing multiple versions to interoperate seamlessly.  Specific contributions include developing (i) formal foundations for distributed updates, (ii) programming abstractions for constructing and deploying updates, (iii) verification tools for checking update correctness properties automatically, and (iv) an evaluation of these abstractions and tools on practical examples. The project will have broad impact by (i) discovering techniques for increasing the reliability of distributed systems during updates, (ii) building reusable software infrastructure for managing updates, and (iii) improving K-12 education and increasing the participation of underrepresented minorities in science through a high school outreach program.</AbstractNarration>
<MinAmdLetterDate>01/23/2013</MinAmdLetterDate>
<MaxAmdLetterDate>02/07/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1253165</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Foster</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John N Foster</PI_FULL_NAME>
<EmailAddress>jnfoster@cs.cornell.edu</EmailAddress>
<PI_PHON>6072555210</PI_PHON>
<NSF_ID>000569694</NSF_ID>
<StartDate>01/23/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cornell University</Name>
<CityName>Ithaca</CityName>
<ZipCode>148502820</ZipCode>
<PhoneNumber>6072555014</PhoneNumber>
<StreetAddress>373 Pine Tree Road</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY23</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>872612445</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CORNELL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002254837</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Cornell University]]></Name>
<CityName>Ithaca</CityName>
<StateCode>NY</StateCode>
<ZipCode>148537501</ZipCode>
<StreetAddress><![CDATA[4137 Upson Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>23</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY23</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~203045</FUND_OBLG>
<FUND_OBLG>2015~216030</FUND_OBLG>
<FUND_OBLG>2017~112930</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Programs today must be periodically updated for a variety of -- e.g., adding features, fixing bugs, patching security vulnerabilities, eliminating performance bottlenecks, etc. In some systems, updates can be applied by simply halting the program, modifying the code, and restarting the program at the new version. But in other systems, even brief interruptions for maintenance are unacceptable. Although the research community has developed techniques for updating programs on the fly, existing approaches only handle a single machine. Hence, to update the software running on a distributed system, programmers must often rely on ad hoc techniques that are difficult to reason about and prone to error. The overall goal of this project was to advance our fundamental understanding of the theory and practice of these distributed updates.</p> <p><br />Over the course of the project, we investigated a number of different approaches for managing updates in distributed systems. Our work on Morpheus [SOSR '16], developed new techniques for updating the components of a distributed system using explicit functions that transfer the state of the system from old versions to new. Our work on Incremental Forest [OOPSLA '16] proposed a type-based abstraction for specifying the structure and contents of data stored on file systems, with a run-time system that loads and stores data incrementally to minimize overhead and reduce conflicts. Our work on predictive treaties [SIGMOD '15, EuroSys '19] developed new mechanisms for ensuring strong consistency in distributed systems while avoiding costly coordination by enforcing carefully-selected predicates on local system state. Finally, our work on NetChain [NSDI '18] showed how to implement classic replication protocols on emerging programmable routers to provide enhanced fault tolerance.</p> <p><br />In addition to our research efforts, we also pursued several educational and outreach efforts. Project funds provided partial support for two PhD students. We incorporated new material on bidirectional transformations into undergraduate and graduate courses at Cornell. Finally, we developed a new high-school outreach program in partnership with New York 4-H and the US Geological Survey. As a part of this program, over 100 from the Science Leadership Academy in Philadelphia came to Cornell for summer workshops that introduced basic ideas in computer science through a series of hands-on labs and demonstrations, and also discussed possible careers in STEM disciplines.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/15/2019<br>      Modified by: John&nbsp;N&nbsp;Foster</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Programs today must be periodically updated for a variety of -- e.g., adding features, fixing bugs, patching security vulnerabilities, eliminating performance bottlenecks, etc. In some systems, updates can be applied by simply halting the program, modifying the code, and restarting the program at the new version. But in other systems, even brief interruptions for maintenance are unacceptable. Although the research community has developed techniques for updating programs on the fly, existing approaches only handle a single machine. Hence, to update the software running on a distributed system, programmers must often rely on ad hoc techniques that are difficult to reason about and prone to error. The overall goal of this project was to advance our fundamental understanding of the theory and practice of these distributed updates.   Over the course of the project, we investigated a number of different approaches for managing updates in distributed systems. Our work on Morpheus [SOSR '16], developed new techniques for updating the components of a distributed system using explicit functions that transfer the state of the system from old versions to new. Our work on Incremental Forest [OOPSLA '16] proposed a type-based abstraction for specifying the structure and contents of data stored on file systems, with a run-time system that loads and stores data incrementally to minimize overhead and reduce conflicts. Our work on predictive treaties [SIGMOD '15, EuroSys '19] developed new mechanisms for ensuring strong consistency in distributed systems while avoiding costly coordination by enforcing carefully-selected predicates on local system state. Finally, our work on NetChain [NSDI '18] showed how to implement classic replication protocols on emerging programmable routers to provide enhanced fault tolerance.   In addition to our research efforts, we also pursued several educational and outreach efforts. Project funds provided partial support for two PhD students. We incorporated new material on bidirectional transformations into undergraduate and graduate courses at Cornell. Finally, we developed a new high-school outreach program in partnership with New York 4-H and the US Geological Survey. As a part of this program, over 100 from the Science Leadership Academy in Philadelphia came to Cornell for summer workshops that introduced basic ideas in computer science through a series of hands-on labs and demonstrations, and also discussed possible careers in STEM disciplines.                Last Modified: 05/15/2019       Submitted by: John N Foster]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
