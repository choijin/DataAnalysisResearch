<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: A Transactional Software Ecosystem</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2013</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>450674.00</AwardTotalIntnAmount>
<AwardAmount>458674</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The recent adoption of Transactional Memory (TM) in mainstream microprocessors and programming languages heralds a new era in parallel programming.  Simply put, support for low-overhead speculative execution of critical sections will enable greater productivity, more straightforward designs for scalable data structures, and simplified reasoning about the correctness of programs.  The full promise of TM, however, will only be realized through the development of a complete software ecosystem to enable scalable and conflict-free execution of transactions at any and all levels of the systems stack; including operating systems, language-level runtime libraries, and end-user code.  The design of such an ecosystem is the focus of this research.&lt;br/&gt;&lt;br/&gt;This research explores algorithms and software systems that provide a seamless environment for transactional programming.  Through a focus on both the C++ and Java languages, this project will invent both data structures and supporting libraries (such as garbage collectors) that can be used both to leverage TM support in programs that are, themselves, unaware of modern transactional features, and to exploit TM support in programs that are explicitly parallel and transactional.  The project also considers programming models, with a focus on delivering a purely transactional model of program execution, via parallel open and closed-nested transactions that can exploit the first generation of transactional hardware.  The outcomes of this research will influence the design of second generation TM hardware, and will result in prototypes and source code that will be distributed as open-source software.  In addition, a broad array of educational and outreach activities are planned, to include deeper integration of parallel programming into undergraduate courses and activities in the local community that aim to widen the pipeline of students considering degrees and careers in science and technology.</AbstractNarration>
<MinAmdLetterDate>07/19/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/20/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1253362</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Spear</LastName>
<PI_MID_INIT>F</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael F Spear</PI_FULL_NAME>
<EmailAddress>spear@cse.lehigh.edu</EmailAddress>
<PI_PHON>6107583285</PI_PHON>
<NSF_ID>000538657</NSF_ID>
<StartDate>07/19/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Lehigh University</Name>
<CityName>Bethlehem</CityName>
<ZipCode>180153005</ZipCode>
<PhoneNumber>6107583021</PhoneNumber>
<StreetAddress>Alumni Building 27</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>808264444</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LEHIGH UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>068570936</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Lehigh University]]></Name>
<CityName>Bethlehem</CityName>
<StateCode>PA</StateCode>
<ZipCode>180153005</ZipCode>
<StreetAddress><![CDATA[Packard Laboratory]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~183892</FUND_OBLG>
<FUND_OBLG>2014~8000</FUND_OBLG>
<FUND_OBLG>2015~175434</FUND_OBLG>
<FUND_OBLG>2017~91348</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project investigated wide-ranging issues related to the challenge ofenabling programmers to write high-performance, easy-to-verify code thattakes advantage of multicore processors.&nbsp; The primary focus was on themechanism of transactional speculation, through both software and hardwaretechniques.&nbsp; Within this focus area, the research sought to look across theentire stack, from hardware mechanisms up through algorithms, run-timesystems, and programming languages, in order to create an entire ecosystemthat would support transactional programming.</p> <p>Among the most significant outcomes of this research were the creation of newconcurrent data structures (specifically blocking and nonblocking unorderedmaps, and blocking and nonblocking priority queues), new algorithms forsoftware transactional memory, and new algorithms for hybrid transactionalmemory (which accelerate software transactional memory by using transactionalhardware features).&nbsp; The research also addressed critical questions ofprogrammability by conducting an in-depth study on how to transactionalizelegacy code, and by developing mechanisms to support input/output andcondition synchronization in transactions.&nbsp; The research also produced ameans through which a programming language can support efficient andperformant transactional memory without deep changes to its compiler.&nbsp;&nbsp;</p> <p>During the course of this research, more than two dozen research papers werepublished in journals, highly selective conferences, and workshops.&nbsp; Thealgorithms and software artifacts developed during this research have beenreleased as open-source software, available worldwide.</p> <p>Five Ph.D. students and three masters students were directly supported duringportions of their education through this research.&nbsp; The award also was thefoundation for collaborations with several corporations, including ARM,Intel, Oracle, and Facebook, as well as several universities.</p> <p>This grant also supported efforts to substantially enhance education atLehigh University, through the creation and/or redesign of courses withsignificant emphasis on concurrency, most notably Operating Systems andParallel Programming.&nbsp; Additionally, this enabled the PI to conduct numerousSTEM-focused outreach activities that introduced students in grades 8-12 tocomputer science.</p><br> <p>            Last Modified: 01/14/2020<br>      Modified by: Michael&nbsp;F&nbsp;Spear</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project investigated wide-ranging issues related to the challenge ofenabling programmers to write high-performance, easy-to-verify code thattakes advantage of multicore processors.  The primary focus was on themechanism of transactional speculation, through both software and hardwaretechniques.  Within this focus area, the research sought to look across theentire stack, from hardware mechanisms up through algorithms, run-timesystems, and programming languages, in order to create an entire ecosystemthat would support transactional programming.  Among the most significant outcomes of this research were the creation of newconcurrent data structures (specifically blocking and nonblocking unorderedmaps, and blocking and nonblocking priority queues), new algorithms forsoftware transactional memory, and new algorithms for hybrid transactionalmemory (which accelerate software transactional memory by using transactionalhardware features).  The research also addressed critical questions ofprogrammability by conducting an in-depth study on how to transactionalizelegacy code, and by developing mechanisms to support input/output andcondition synchronization in transactions.  The research also produced ameans through which a programming language can support efficient andperformant transactional memory without deep changes to its compiler.    During the course of this research, more than two dozen research papers werepublished in journals, highly selective conferences, and workshops.  Thealgorithms and software artifacts developed during this research have beenreleased as open-source software, available worldwide.  Five Ph.D. students and three masters students were directly supported duringportions of their education through this research.  The award also was thefoundation for collaborations with several corporations, including ARM,Intel, Oracle, and Facebook, as well as several universities.  This grant also supported efforts to substantially enhance education atLehigh University, through the creation and/or redesign of courses withsignificant emphasis on concurrency, most notably Operating Systems andParallel Programming.  Additionally, this enabled the PI to conduct numerousSTEM-focused outreach activities that introduced students in grades 8-12 tocomputer science.       Last Modified: 01/14/2020       Submitted by: Michael F Spear]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
