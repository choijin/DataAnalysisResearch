<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CodePractice: Developing Coding Skills Using Social and Adaptive Drill-and-Practice Exercises</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2013</AwardEffectiveDate>
<AwardExpirationDate>06/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>321090.00</AwardTotalIntnAmount>
<AwardAmount>321090</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Stephanie August</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Rudimentary programming skills are essential to developing fundamental proficiency in computer&lt;br/&gt;science. However, learning programming techniques can be challenging and frustrating for many&lt;br/&gt;students. Without interventions to curb these frustrations, introductory computer science courses will&lt;br/&gt;suffer from attrition and poor retention rates will follow. Drill-and-practice tools are emerging to help&lt;br/&gt;students develop basic programming techniques and improve their confidence. However, there are&lt;br/&gt;currently no programming practice systems that actively and adaptively assist students when they&lt;br/&gt;require help on exercises. Likewise, the potential for peer learning is currently untapped without&lt;br/&gt;effectively leveraging online, social collaboration in practice tools.&lt;br/&gt;&lt;br/&gt;The novel approach to organically refine learning materials also offers broader implications for using&lt;br/&gt;automatic assessment in social eLearning environments. We will study students? behaviors with the&lt;br/&gt;system and objectively measure their outcomes. Consequently, our research will offer results associated&lt;br/&gt;with a framework for supporting social and adaptive drill-and-practice. Overall, we expect to improve&lt;br/&gt;student performance and retention in computer science while contributing to the evolution of instructional&lt;br/&gt;technology.</AbstractNarration>
<MinAmdLetterDate>07/04/2013</MinAmdLetterDate>
<MaxAmdLetterDate>07/04/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1245589</AwardID>
<Investigator>
<FirstName>Manuel</FirstName>
<LastName>Perez-Quinones</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Manuel A Perez-Quinones</PI_FULL_NAME>
<EmailAddress>Perez.Quinones@uncc.edu</EmailAddress>
<PI_PHON>7046877984</PI_PHON>
<NSF_ID>000478387</NSF_ID>
<StartDate>07/04/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Stephen</FirstName>
<LastName>Edwards</LastName>
<PI_MID_INIT>H</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephen H Edwards</PI_FULL_NAME>
<EmailAddress>edwards@cs.vt.edu</EmailAddress>
<PI_PHON>5402315723</PI_PHON>
<NSF_ID>000246007</NSF_ID>
<StartDate>07/04/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Virginia Polytechnic Institute and State University</Name>
<CityName>BLACKSBURG</CityName>
<ZipCode>240610001</ZipCode>
<PhoneNumber>5402315281</PhoneNumber>
<StreetAddress>Sponsored Programs 0170</StreetAddress>
<StreetAddress2><![CDATA[300 Turner Street NW, Suite 4200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>003137015</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>VIRGINIA POLYTECHNIC INSTITUTE AND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003137015</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Virginia Polytechnic Institute and State University]]></Name>
<CityName>Blacksburg</CityName>
<StateCode>VA</StateCode>
<ZipCode>240610001</ZipCode>
<StreetAddress><![CDATA[620 Drillfield Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1536</Code>
<Text>S-STEM-Schlr Sci Tech Eng&amp;Math</Text>
</ProgramElement>
<ProgramElement>
<Code>7513</Code>
<Text>TUES-Type 1 Project</Text>
</ProgramElement>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0413</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>13XX</Code>
<Name>H-1B FUND, EHR, NSF</Name>
<APP_SYMB_ID>045176</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~321090</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project resulted in the creation and evaluation of CodeWorkout, a drill-and-practice system for coding exercises that provides opportunities for students to practice and develop basic skills while also supporting the needs of classroom use by educators. Students practicing programming exercises will demonstrate an immediate impact of improved confidence and proficiency in their coding, while also further developing higher-level critical thinking skills. CodeWorkout provides support for a variety of exercises, including:</p> <ul> <li>"Code writing" questions where students are asked to write a code segment, function, or method to perform some specified behavior.</li> <li>"Symbolic execution" questions where a code segment or method is presented, and the student is asked what output or value is produced when the code is executed.</li> <li>"Behavior abstraction" questions where a code segment or method is presented, anf the student is asked to identify a higher-level description of the task being performed by reading the code.</li> <li>"Fill in the blank" coding questions where a partially complete function is presented, and the student is asked to fill in a missing statement or expression in order to achieve a stated goal.</li> <li>"Multiple blank" coding questions, where a partially complete function with multiple missing pieces (statements, expressions, or blocks) must be completed.</li> <li>"Debugging" questions where an incorrect function or method is provided, and the student is asked to identify the error.</li> <li>"Bug repair" questions where an incorrect function or method is provided, and where the student has to find and fix the error so the code behaves as intended.</li> <li>"Multiple method" coding questions where a student must provide definitions for more than one method in the same class.</li> <li>"Constructor" coding questions, where a student must write a constructor, instead of a function.</li> <li>"Main" coding questions, where a student writes a main() method that uses standard I/O instead of parameters and a return value.</li> <li>"Evaluation" questions where two alternative pieces of code are presented and the student is asked to determine which one has better performance, implements a specific algorithm, is free of defects, etc., or whether both are equivalent.&nbsp;</li> </ul> <p>The project also resulted in creation or adaptation of a large body of exercises from multiple sources, including open-source question banks, new exercises written by instructors, and question banks associated with textbooks. The system provides access control mechanisms that allow for both public and private questions and separate permissions for access, use, editing, and creating derived/modified variants.</p> <p>The project produced a robust implementation that provides the features and performance necessary to meet normal classroom needs, and that can be adopted easily by other educators. CodeWorkout provides a "gradual engagement" model where anyone can interact with the system and get useful benefits before creating an account, with login access only needed to participate in course-specific activities; provides Gmail and Facebook login access; provides LTI integration to interoperate with course management systems and their gradebooks; and ensures performance that supports hundreds or even thousands of concurrent users engaged simultaneously. Its open-source availability makes it easy to adapt with new course materials.</p> <p>To support quiz and exam situations in addition to homework activities, features were added to provide configurable time limits separate from any due date cutoffs.&nbsp; In addition, instructors can limit live feedback during an exam so that students only receive feedback on compilation problems, or only on examples provided in the question prompt, instead of seeing the more comprehensive behavioral testing feedback available in a drill-and-practice homework exercise. The project team also added features to support students who have special accommodation needs.&nbsp; This included adding the ability to override the time allowed for completing an assignment on an individual student basis, and overriding the due date (and/or date the assignment becomes visible).&nbsp; This supports students who have special timing accommodations for exams, and allows for makeups to be scheduled.</p> <p>The project also focused on evaluating the impact of using CodeWorkout. From our evaluation results, it is clear that code writing practice contributes to improved test scores, independent of student ability. In addition, we also surveyed students to gather their subjective opinions about their experiences with CodeWorkout.&nbsp; Among the significant outcomes were that students found CodeWorkout to be helpful in learning introductory programming (mean of 4.0 out of 5), that CodeWorkout practice has improved their programming skills (mean 3.8 out of 5). that submitting work through CodeWorkout was easy (mean 4.3 out of 5), and that its interface was easy to use (mean 4.1 out of 5).</p> <p>Through this project, CodeWorkout has evolved into a service that other schools could adopt and use effectively. As a result, CodeWorkout has now been used in over a hundred course sections at over thirty institutions. The CodeWorkout server at Virginia Tech has processed 1,175,382 student answers to exercises during the life of the project, far exceeding the project's goals.</p> <p>&nbsp;</p><br> <p>            Last Modified: 03/23/2018<br>      Modified by: Stephen&nbsp;H&nbsp;Edwards</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project resulted in the creation and evaluation of CodeWorkout, a drill-and-practice system for coding exercises that provides opportunities for students to practice and develop basic skills while also supporting the needs of classroom use by educators. Students practicing programming exercises will demonstrate an immediate impact of improved confidence and proficiency in their coding, while also further developing higher-level critical thinking skills. CodeWorkout provides support for a variety of exercises, including:  "Code writing" questions where students are asked to write a code segment, function, or method to perform some specified behavior. "Symbolic execution" questions where a code segment or method is presented, and the student is asked what output or value is produced when the code is executed. "Behavior abstraction" questions where a code segment or method is presented, anf the student is asked to identify a higher-level description of the task being performed by reading the code. "Fill in the blank" coding questions where a partially complete function is presented, and the student is asked to fill in a missing statement or expression in order to achieve a stated goal. "Multiple blank" coding questions, where a partially complete function with multiple missing pieces (statements, expressions, or blocks) must be completed. "Debugging" questions where an incorrect function or method is provided, and the student is asked to identify the error. "Bug repair" questions where an incorrect function or method is provided, and where the student has to find and fix the error so the code behaves as intended. "Multiple method" coding questions where a student must provide definitions for more than one method in the same class. "Constructor" coding questions, where a student must write a constructor, instead of a function. "Main" coding questions, where a student writes a main() method that uses standard I/O instead of parameters and a return value. "Evaluation" questions where two alternative pieces of code are presented and the student is asked to determine which one has better performance, implements a specific algorithm, is free of defects, etc., or whether both are equivalent.    The project also resulted in creation or adaptation of a large body of exercises from multiple sources, including open-source question banks, new exercises written by instructors, and question banks associated with textbooks. The system provides access control mechanisms that allow for both public and private questions and separate permissions for access, use, editing, and creating derived/modified variants.  The project produced a robust implementation that provides the features and performance necessary to meet normal classroom needs, and that can be adopted easily by other educators. CodeWorkout provides a "gradual engagement" model where anyone can interact with the system and get useful benefits before creating an account, with login access only needed to participate in course-specific activities; provides Gmail and Facebook login access; provides LTI integration to interoperate with course management systems and their gradebooks; and ensures performance that supports hundreds or even thousands of concurrent users engaged simultaneously. Its open-source availability makes it easy to adapt with new course materials.  To support quiz and exam situations in addition to homework activities, features were added to provide configurable time limits separate from any due date cutoffs.  In addition, instructors can limit live feedback during an exam so that students only receive feedback on compilation problems, or only on examples provided in the question prompt, instead of seeing the more comprehensive behavioral testing feedback available in a drill-and-practice homework exercise. The project team also added features to support students who have special accommodation needs.  This included adding the ability to override the time allowed for completing an assignment on an individual student basis, and overriding the due date (and/or date the assignment becomes visible).  This supports students who have special timing accommodations for exams, and allows for makeups to be scheduled.  The project also focused on evaluating the impact of using CodeWorkout. From our evaluation results, it is clear that code writing practice contributes to improved test scores, independent of student ability. In addition, we also surveyed students to gather their subjective opinions about their experiences with CodeWorkout.  Among the significant outcomes were that students found CodeWorkout to be helpful in learning introductory programming (mean of 4.0 out of 5), that CodeWorkout practice has improved their programming skills (mean 3.8 out of 5). that submitting work through CodeWorkout was easy (mean 4.3 out of 5), and that its interface was easy to use (mean 4.1 out of 5).  Through this project, CodeWorkout has evolved into a service that other schools could adopt and use effectively. As a result, CodeWorkout has now been used in over a hundred course sections at over thirty institutions. The CodeWorkout server at Virginia Tech has processed 1,175,382 student answers to exercises during the life of the project, far exceeding the project's goals.          Last Modified: 03/23/2018       Submitted by: Stephen H Edwards]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
