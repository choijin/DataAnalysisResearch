<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Small: Collaborative Research: Linking Evolving Software Requirements and Acceptance Tests</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Two distinct milestones of any software development lifecycle are requirements gathering and acceptance testing, where a software product is verified against its requirements. Yet this verification is one of the most difficult tasks, since it involves bridging an abstraction gap between high-level descriptions of requirements and their low-level implementations in the source code.  Determining how different requirements are covered by acceptance tests is very hard, since it means tracing each acceptance test to specific requirements. Many companies and organizations do not have or cannot invest significant resources into recovering links among requirements, acceptance tests and other artifacts. As a result, software development is not as efficient as it could be, lacking controls to steer the overall testing and bug-fixing effort, and involving extra work peripheral to the core tasks. The end result is a situation in which it is unclear how well software is tested and how much confidence stakeholders can have in it.&lt;br/&gt;&lt;br/&gt;We are addressing this fundamental problem by defining and developing a new, integrated model for recovering traceability links using execution artifacts, diverse models, and requirements. We develop techniques for automatically generating additional test cases that execute untested code to recover additional traceability links and verify existing ones. To ensure that our approach is effective, we will perform rigorous case studies in real industrial scenarios to evaluate the model, techniques, and methodologies. As a result, the state-of-the-practice in software development will be improved that faces difficulties in ensuing that software products are tested fully with respect to their requirements.  Among the broader impacts the project includes developing educational course content, involving underrepresented categories of students, producing software tools under open source licenses, and collaborating with industry to transfer technology.</AbstractNarration>
<MinAmdLetterDate>06/20/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/20/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218129</AwardID>
<Investigator>
<FirstName>Denys</FirstName>
<LastName>Poshyvanyk</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Denys Poshyvanyk</PI_FULL_NAME>
<EmailAddress>dposhyvanyk@wm.edu</EmailAddress>
<PI_PHON>7572213485</PI_PHON>
<NSF_ID>000516306</NSF_ID>
<StartDate>06/20/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>College of William and Mary</Name>
<CityName>Williamsburg</CityName>
<ZipCode>231878795</ZipCode>
<PhoneNumber>7572213966</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 8795]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>074762238</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>COLLEGE OF WILLIAM &amp; MARY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>074762238</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[College of William and Mary]]></Name>
<CityName/>
<StateCode>VA</StateCode>
<ZipCode>231878795</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><em>Requirements traceability</em> is the ability to describe and follow the life of a requirement in both a forward and backward direction by defining relationships to related development artifacts. <em>Test-Requirement Traceability (TRT) </em>plays an increasingly important role in agile software development, especially in continuous delivery when software is tested and released frequently, at the end of each delivery iteration.&nbsp; Requirements are frequently modified, and many different software design and code artifacts are created and modified during these iterations to implement these requirements. Software release cycles in agile development can be as frequent as days, and releasing a new version of software with new artifacts in such a short period of time makes it difficult for software engineers to trace tests to requirements manually, since different software artifacts are created or modified repeatedly and they are tested at the end of each iteration.</p> <p>&nbsp;</p> <p>To address this issue, the project formulated (1) a novel approach to bridging inherent abstraction gap that exists between evolving acceptance tests and requirements, (2) novel analysis techniques and algorithms that enable stakeholders to automatically recover traceability links between requirements and tests in the presence of incomplete semi-structured information and non-code artifacts, and (3) a suite of new tools that were be developed, evaluated, and made available to the scientific and industrial communities. Some of the broader impacts from this project include (1) improving the state-of-the-practice in software development that faces difficulties in ensuing that software products are tested fully with respect to their requirements, (2) demonstrating improved testing practices with our industry partners, (3) developing educational course content and piloting it in our courses as part of this research proposal, and (4) actively involving underrepresented categories of students in this research program.</p> <p>&nbsp;</p> <p>The resulting work has been published in several high-quality software engineering conferences and journals (some gaining best paper recognition).&nbsp;&nbsp; A number of undergraduate and graduate students, including a minority doctoral student, were trained and became contributing members on this project. &nbsp;Several of these students co-authored and presented papers at international conferences.&nbsp; Multiple graduate-level theses were derived from this project. The students graduating from this program have secured full-time employment in academia and software industry.&nbsp; The gained scientific knowledge was integrated in multiple undergraduate and graduate classes at the host institutions, which broadens STEM education.&nbsp; ACM/IEEE&nbsp;<em>Software Engineering Curriculum Guidelines </em>identified software evolution among the ten key areas of SE education. A number of open-source software tools were developed and are made available publicly.&nbsp; The data repositories resulting from this project are made accessible to the scientific community and general public through the web sites of the two participating institutions. The project enhanced and strengthened a long-term professional collaboration not only between the two PIs at academic institutions, but also among the involved students.&nbsp; The computing infrastructure established during the course of the project permits the sustainability of its resources.</p><br> <p>            Last Modified: 11/21/2016<br>      Modified by: Denys&nbsp;Poshyvanyk</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Requirements traceability is the ability to describe and follow the life of a requirement in both a forward and backward direction by defining relationships to related development artifacts. Test-Requirement Traceability (TRT) plays an increasingly important role in agile software development, especially in continuous delivery when software is tested and released frequently, at the end of each delivery iteration.  Requirements are frequently modified, and many different software design and code artifacts are created and modified during these iterations to implement these requirements. Software release cycles in agile development can be as frequent as days, and releasing a new version of software with new artifacts in such a short period of time makes it difficult for software engineers to trace tests to requirements manually, since different software artifacts are created or modified repeatedly and they are tested at the end of each iteration.     To address this issue, the project formulated (1) a novel approach to bridging inherent abstraction gap that exists between evolving acceptance tests and requirements, (2) novel analysis techniques and algorithms that enable stakeholders to automatically recover traceability links between requirements and tests in the presence of incomplete semi-structured information and non-code artifacts, and (3) a suite of new tools that were be developed, evaluated, and made available to the scientific and industrial communities. Some of the broader impacts from this project include (1) improving the state-of-the-practice in software development that faces difficulties in ensuing that software products are tested fully with respect to their requirements, (2) demonstrating improved testing practices with our industry partners, (3) developing educational course content and piloting it in our courses as part of this research proposal, and (4) actively involving underrepresented categories of students in this research program.     The resulting work has been published in several high-quality software engineering conferences and journals (some gaining best paper recognition).   A number of undergraduate and graduate students, including a minority doctoral student, were trained and became contributing members on this project.  Several of these students co-authored and presented papers at international conferences.  Multiple graduate-level theses were derived from this project. The students graduating from this program have secured full-time employment in academia and software industry.  The gained scientific knowledge was integrated in multiple undergraduate and graduate classes at the host institutions, which broadens STEM education.  ACM/IEEE Software Engineering Curriculum Guidelines identified software evolution among the ten key areas of SE education. A number of open-source software tools were developed and are made available publicly.  The data repositories resulting from this project are made accessible to the scientific community and general public through the web sites of the two participating institutions. The project enhanced and strengthened a long-term professional collaboration not only between the two PIs at academic institutions, but also among the involved students.  The computing infrastructure established during the course of the project permits the sustainability of its resources.       Last Modified: 11/21/2016       Submitted by: Denys Poshyvanyk]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
