<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CCF-SHF Small: Beyond Algebraic Data Types: Combinatorial Species and Mathematically-Structured Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2012</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>325840.00</AwardTotalIntnAmount>
<AwardAmount>325840</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>At the heart of any computer program is the data that the program is designed to manipulate.  Data, in turn, is only useful when organized into some sort of structure ---be it as simple as a list or as complex as a network or hierarchical tree.  The mathematical theory of "combinatorial species" studies many variations of such structure, but it has not often been applied in a computer science context.  The goal of this project is a new understanding of data structure through the abstractions of combinatorial species. This understanding will lead to new classes of data structures as well as practical tools for working with existing ones.  Ultimately, this work will lead to more expressive programming languages, allowing computer programs to be written at a higher level and with fewer errors.&lt;br/&gt;&lt;br/&gt;More specifically, the project seeks to extend the existing computational theory of algebraic data types with constructs derived from the theory of combinatorial species.  In particular, the project will explore the specification of data types with nontrivial symmetries and sharing, such as cycles, bags, and simple graphs. The project will develop libraries and language extensions to support the use of species data types in the Haskell programming language. As a significant test case, it will explore the application of species data types to property-based testing.  Although the work is to be carried out in the context of the Haskell programming language, the results will be applicable to any language, including those with direct support for algebraic datatypes (such as OCaml, F#, Racket or Scala), and those without. All libraries and tools developed under this project will be made available as open source.</AbstractNarration>
<MinAmdLetterDate>07/10/2012</MinAmdLetterDate>
<MaxAmdLetterDate>07/10/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218002</AwardID>
<Investigator>
<FirstName>Stephanie</FirstName>
<LastName>Weirich</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephanie C Weirich</PI_FULL_NAME>
<EmailAddress>sweirich@cis.upenn.edu</EmailAddress>
<PI_PHON>2155732821</PI_PHON>
<NSF_ID>000368211</NSF_ID>
<StartDate>07/10/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<StreetAddress2><![CDATA[3451 Walnut St, 5th Flr Franklin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042250712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042250712</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Trustees of the University of Pennsylvania]]></Name>
<CityName>Philadelphia</CityName>
<StateCode>PA</StateCode>
<ZipCode>191046205</ZipCode>
<StreetAddress><![CDATA[3451 Walnut Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~325840</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The primary outcome of this project was Brent Yorgey's dissertation, "Combinatorial Species and Labelled Structures." This work lays the theoretical groundwork for a precise bridge between the theory of combinatorial species (a subfield of enumerative combinatorics) and of the theory of algebraic datatypes (that underlies modern programming languages such as Haskell and Swift).&nbsp; In particular, it translates the theory of species to the recently developed "homotopy type theory", a coputational foundation for mathematics. This work also clarifies the role of species as labelled shapes.</p> <p>This project also contributed to the development of a novel data structure, called an "urn". This structure is useful in the context of random testing of software. In particular, this data structure supports efficient sampling from dynamically-updated distribuitions.&nbsp;</p> <p>A final research outcome of this work concerned the relationship between certain classes of languages (called regular languages) and mathematical descriptions of data structure (called polynomial functors). Mathematical operations on these functors (such as taking a derivative or dissection) leads to refactorsing of data structures in novel ways.&nbsp;</p> <p>The broader impact of this work connected this theoretical work with the community of Haskell developers. In particular, project members presented this work both at academic conferences and at conferences aimed a industry practioners. Furthermore, the team members sponsored a yearly Haskell meeting to bring together academics and industrial users of the Haskell language to share knowledge and experience. Finally, this project contributed to the education of several PhD students. One of these students is now an assistant professor of Computer Science at a small liberal arts college.&nbsp;</p><br> <p>            Last Modified: 10/12/2017<br>      Modified by: Stephanie&nbsp;C&nbsp;Weirich</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The primary outcome of this project was Brent Yorgey's dissertation, "Combinatorial Species and Labelled Structures." This work lays the theoretical groundwork for a precise bridge between the theory of combinatorial species (a subfield of enumerative combinatorics) and of the theory of algebraic datatypes (that underlies modern programming languages such as Haskell and Swift).  In particular, it translates the theory of species to the recently developed "homotopy type theory", a coputational foundation for mathematics. This work also clarifies the role of species as labelled shapes.  This project also contributed to the development of a novel data structure, called an "urn". This structure is useful in the context of random testing of software. In particular, this data structure supports efficient sampling from dynamically-updated distribuitions.   A final research outcome of this work concerned the relationship between certain classes of languages (called regular languages) and mathematical descriptions of data structure (called polynomial functors). Mathematical operations on these functors (such as taking a derivative or dissection) leads to refactorsing of data structures in novel ways.   The broader impact of this work connected this theoretical work with the community of Haskell developers. In particular, project members presented this work both at academic conferences and at conferences aimed a industry practioners. Furthermore, the team members sponsored a yearly Haskell meeting to bring together academics and industrial users of the Haskell language to share knowledge and experience. Finally, this project contributed to the education of several PhD students. One of these students is now an assistant professor of Computer Science at a small liberal arts college.        Last Modified: 10/12/2017       Submitted by: Stephanie C Weirich]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
