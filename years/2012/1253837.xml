<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Enabling License Compliance Analysis and Verification for Evolving Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>446010.00</AwardTotalIntnAmount>
<AwardAmount>478010</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project proposes a novel unified model to help software developers license software and (re)use components complying with legal requirements. The solution will investigate novel combinations of information retrieval, internet-scale source code search, repository mining, and static analysis approaches to detect origins of software components.  The research will also rely on a feedback-driven hybrid blending of information retrieval and machine learning techniques for identifying components' licenses with high accuracy.  In addition, the proposed model will unify these building blocks for license compliance analysis and verification to reason about the given software, components, dependencies, and licenses, as well as their trustworthiness, constraints, and existing or potential legal compliance issues. &lt;br/&gt; &lt;br/&gt;The proposed research will lead to both theoretical foundations and practical solutions for the comprehensive analysis of complex legal compliance concerns to enable lawful software development and evolution. Among the broader impacts, the project will develop educational course content, involve underrepresented student groups, and produce software tools under open source licenses, collaborating with industry to transfer technology and empirically evaluate proposed research, and conducting K-12 outreach activities.</AbstractNarration>
<MinAmdLetterDate>01/28/2013</MinAmdLetterDate>
<MaxAmdLetterDate>12/13/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1253837</AwardID>
<Investigator>
<FirstName>Denys</FirstName>
<LastName>Poshyvanyk</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Denys Poshyvanyk</PI_FULL_NAME>
<EmailAddress>dposhyvanyk@wm.edu</EmailAddress>
<PI_PHON>7572213485</PI_PHON>
<NSF_ID>000516306</NSF_ID>
<StartDate>01/28/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>College of William and Mary</Name>
<CityName>Williamsburg</CityName>
<ZipCode>231878795</ZipCode>
<PhoneNumber>7572213966</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 8795]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>074762238</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>COLLEGE OF WILLIAM &amp; MARY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>074762238</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[College of William and Mary]]></Name>
<CityName/>
<StateCode>VA</StateCode>
<ZipCode>231878795</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~171029</FUND_OBLG>
<FUND_OBLG>2014~12000</FUND_OBLG>
<FUND_OBLG>2015~88804</FUND_OBLG>
<FUND_OBLG>2016~186177</FUND_OBLG>
<FUND_OBLG>2017~12000</FUND_OBLG>
<FUND_OBLG>2018~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>&nbsp;</p> <p>Reusing open source code is common nowadays &minus; developers are frequently copying code fragments, files, or components from one system to another for reasons such as adding features from existing systems or fixing bugs using known and tested implementations.&nbsp;&nbsp;Some recent research developments have focused on creating solutions to support these tasks; however, they are missing one important&nbsp;<em>legal dimension</em>: license compliance, if not satisfied, can create a number of severe legal consequences.&nbsp;&nbsp;In fact, copying code without the approval of the copyright holder is generally prohibited.&nbsp;&nbsp;For example, a US court ruled that even copying 25 out of 500KLOC could be considered a copyright infringement.&nbsp;&nbsp;The problem is exacerbated by the fact that software developers frequently are not aware of the associated legal risks and their companies may not have specific policies and guidelines on this account.&nbsp;&nbsp;</p> <p>&nbsp;</p> <p>Open source software (comprising all the artifacts, not only the source code) is a system that is licensed under some open source license, which makes code or components available for creating derivative works based on it.&nbsp;&nbsp;The open source licensing process is a vehicle for the licensor to grant certain rights to the licensee that would else be prohibited, such as the right to make, edit, and distribute copies.&nbsp;&nbsp;In exchange for these rights, the licensee must abide by the requirements and constraints that such licenses entail.&nbsp;&nbsp;There are numerous such Open Source Initiative approved licenses as of today, and they vary considerably in the constraints that they impose.&nbsp;What is even more challenging is that these licenses, their constraints and requirements, the components governed by them, and the software systems are all continually evolving.&nbsp;&nbsp;However, at any given time, any software must satisfy all the requirements for each license of the components it reuses. Another growing challenge is to ensure license compatibility of the overall system with the licenses of each of its components, libraries, and even the tools it uses.&nbsp;&nbsp;This requires a sophisticated analysis of the overall system's architecture, environment, and licenses to detect if overall licenses contradict any of its constituents&rsquo; licenses.&nbsp;&nbsp;Moreover, this analysis needs to be done continually as software, dependencies, licenses, and their requirements evolve asynchronously.&nbsp;&nbsp;</p> <p>&nbsp;</p> <p>To address this issue, the project&nbsp;(1) defined and evaluated a unified model for establishing the provenance of components, detecting their licenses, and verifying legal licensing compliance concerns using novel combinations of Information Retrieval, Mining Software Repositories, internet-scale source code search, and static analysis approaches to detect origins of software components, (2) defined and instantiated new methodologies to support specific development and maintenance tasks, and (3) performed empirical case studies to evaluate techniques and methodologies; and (4) created and maintained a repository of software artifacts and analysis data to support rigorously controlled experimentation and benchmarking in the research community. Some of the broader impacts from this project include (1) improving the state-of-the-practice in software development that faces difficulties in ensuing legal licensing compliance challenges (2) demonstrating improved licensing practices, (3) developing educational course content and piloting it in our courses as part of this research proposal, and (4) actively involving underrepresented categories of students in this research program.</p> <p>&nbsp;</p> <p>The resulting work has been published in several high-quality software engineering conferences and journals (some gaining best result recognition).&nbsp;&nbsp;A number of undergraduate and graduate students, including a minority doctoral student, were trained and became contributing members on this project. &nbsp;Several of these students co-authored and presented papers at international conferences.&nbsp; Multiple graduate-level theses were derived from this project. The students graduating from this program have secured full-time employment in academia and software industry.&nbsp;The gained scientific knowledge was integrated in multiple undergraduate and graduate classes at the host institutions, which broadens STEM education.&nbsp; ACM/IEEE&nbsp;<em>Software Engineering Curriculum Guidelines&nbsp;</em>identified software evolution among the ten key areas of SE education. A number of open-source software tools were developed and are made available publicly.&nbsp; The data repositories resulting from this project are made accessible to the scientific community and general public through the PI&rsquo;s web site. The project enhanced and strengthened a long-term professional collaboration not only between the PI and his students but also multiple collaborators involved.&nbsp; The computing infrastructure established during the course of the project permits the sustainability of its resources.</p><br> <p>            Last Modified: 01/15/2019<br>      Modified by: Denys&nbsp;Poshyvanyk</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    Reusing open source code is common nowadays &minus; developers are frequently copying code fragments, files, or components from one system to another for reasons such as adding features from existing systems or fixing bugs using known and tested implementations.  Some recent research developments have focused on creating solutions to support these tasks; however, they are missing one important legal dimension: license compliance, if not satisfied, can create a number of severe legal consequences.  In fact, copying code without the approval of the copyright holder is generally prohibited.  For example, a US court ruled that even copying 25 out of 500KLOC could be considered a copyright infringement.  The problem is exacerbated by the fact that software developers frequently are not aware of the associated legal risks and their companies may not have specific policies and guidelines on this account.       Open source software (comprising all the artifacts, not only the source code) is a system that is licensed under some open source license, which makes code or components available for creating derivative works based on it.  The open source licensing process is a vehicle for the licensor to grant certain rights to the licensee that would else be prohibited, such as the right to make, edit, and distribute copies.  In exchange for these rights, the licensee must abide by the requirements and constraints that such licenses entail.  There are numerous such Open Source Initiative approved licenses as of today, and they vary considerably in the constraints that they impose. What is even more challenging is that these licenses, their constraints and requirements, the components governed by them, and the software systems are all continually evolving.  However, at any given time, any software must satisfy all the requirements for each license of the components it reuses. Another growing challenge is to ensure license compatibility of the overall system with the licenses of each of its components, libraries, and even the tools it uses.  This requires a sophisticated analysis of the overall system's architecture, environment, and licenses to detect if overall licenses contradict any of its constituents? licenses.  Moreover, this analysis needs to be done continually as software, dependencies, licenses, and their requirements evolve asynchronously.       To address this issue, the project (1) defined and evaluated a unified model for establishing the provenance of components, detecting their licenses, and verifying legal licensing compliance concerns using novel combinations of Information Retrieval, Mining Software Repositories, internet-scale source code search, and static analysis approaches to detect origins of software components, (2) defined and instantiated new methodologies to support specific development and maintenance tasks, and (3) performed empirical case studies to evaluate techniques and methodologies; and (4) created and maintained a repository of software artifacts and analysis data to support rigorously controlled experimentation and benchmarking in the research community. Some of the broader impacts from this project include (1) improving the state-of-the-practice in software development that faces difficulties in ensuing legal licensing compliance challenges (2) demonstrating improved licensing practices, (3) developing educational course content and piloting it in our courses as part of this research proposal, and (4) actively involving underrepresented categories of students in this research program.     The resulting work has been published in several high-quality software engineering conferences and journals (some gaining best result recognition).  A number of undergraduate and graduate students, including a minority doctoral student, were trained and became contributing members on this project.  Several of these students co-authored and presented papers at international conferences.  Multiple graduate-level theses were derived from this project. The students graduating from this program have secured full-time employment in academia and software industry. The gained scientific knowledge was integrated in multiple undergraduate and graduate classes at the host institutions, which broadens STEM education.  ACM/IEEE Software Engineering Curriculum Guidelines identified software evolution among the ten key areas of SE education. A number of open-source software tools were developed and are made available publicly.  The data repositories resulting from this project are made accessible to the scientific community and general public through the PI?s web site. The project enhanced and strengthened a long-term professional collaboration not only between the PI and his students but also multiple collaborators involved.  The computing infrastructure established during the course of the project permits the sustainability of its resources.       Last Modified: 01/15/2019       Submitted by: Denys Poshyvanyk]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
