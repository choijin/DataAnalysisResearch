<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Verified Compilation and High-Level Memory Models</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/15/2012</AwardEffectiveDate>
<AwardExpirationDate>04/30/2014</AwardExpirationDate>
<AwardTotalIntnAmount>80000.00</AwardTotalIntnAmount>
<AwardAmount>80000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>High-level managed languages, such as Java, provide strong semantic guarantees, but these guarantees are only as good as the underlying software stack.  The research funded by this EAGER award will address the problem of verifying the compiler and runtime systems of managed languages and address the interplay between the formal verification of the underlying software stack and the memory models used by these languages&lt;br/&gt;&lt;br/&gt;The correctness of safety-critical code is very important, but also very difficult to guarantee.  Existing practice relies on manual code reviews and testing to ensure correctness, which are methods that do not provide strong guarantees.  This research has the potential to improve the safety and robustness of managed-language implementations.  These implementations, in turn, will improve the reliability of safety-critical software that runs on them.</AbstractNarration>
<MinAmdLetterDate>05/14/2012</MinAmdLetterDate>
<MaxAmdLetterDate>10/23/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1237923</AwardID>
<Investigator>
<FirstName>Suresh</FirstName>
<LastName>Jagannathan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Suresh Jagannathan</PI_FULL_NAME>
<EmailAddress>suresh@cs.purdue.edu</EmailAddress>
<PI_PHON>7654940971</PI_PHON>
<NSF_ID>000181308</NSF_ID>
<StartDate>05/14/2012</StartDate>
<EndDate>10/23/2013</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Gustavo</FirstName>
<LastName>Petri</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gustavo Petri</PI_FULL_NAME>
<EmailAddress>gpetri@purdue.edu</EmailAddress>
<PI_PHON>7654941055</PI_PHON>
<NSF_ID>000653846</NSF_ID>
<StartDate>10/23/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072107</ZipCode>
<StreetAddress><![CDATA[305 North University Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~80000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In the EAGER project we have defined a new semantics for Java cognizant of the relaxed memory model existing in current x86 architectures. We have formalized this semantics in the Coq proof assistant, and used it to verify programs that implement components of a Java-like virtual machine. Furthermore, we defined a new methodology to verify the atomicity of certain pieces of concurrent code that supports reasoning about the relaxed memory model. To the best of our knowledge this is the first effort to achieve atomicity verification for a relaxed memory model.&nbsp;</p> <p>In more detail, we have leveraged the relaxed memory model of x86 architectures to the level of Java bytecode. To that end, we designed an Intermediate Representation that we use to compile Java programs to x86, and to implement the runtime components of the Java Virtual Machine, including the Garbage Collector. The importance of thie IR is that it is amenable to verification in the Coq proof assistant. We have deployed our develpment on top of the CompcertTSO certified C compiler, which we use as a backend.</p> <p>To support our claims, we wrote a Concurrent Garbage Collector in our intermediate representation, for which we later verified atomicity properties of certain crucial pieces. Our Atomicity Verification methodology was able to discharge the atomicity of important pieces of code, for which considering all possible interleavings would make the certification of the Garbage Collector intractable. Our preliminary results indicate that this methodology is not limited to the verification of the code of a compiler, but it can generally be applied to the verificaiton of concurrent code that exploits the x86 relaxed memory model semantics. Similarly, our developlemnt gives insights on how to further relax our atomicity verification methodology to cover more, perhaps more relaxed, memory models of different architectures.&nbsp;</p> <p>We consider our developments to be an important stepping-stone towards the end-to-end certification of a full Java infrastructure that embraces the relaxed memory concurrency present in current computer architectures.</p><br> <p>            Last Modified: 05/01/2014<br>      Modified by: Gustavo&nbsp;Petri</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In the EAGER project we have defined a new semantics for Java cognizant of the relaxed memory model existing in current x86 architectures. We have formalized this semantics in the Coq proof assistant, and used it to verify programs that implement components of a Java-like virtual machine. Furthermore, we defined a new methodology to verify the atomicity of certain pieces of concurrent code that supports reasoning about the relaxed memory model. To the best of our knowledge this is the first effort to achieve atomicity verification for a relaxed memory model.   In more detail, we have leveraged the relaxed memory model of x86 architectures to the level of Java bytecode. To that end, we designed an Intermediate Representation that we use to compile Java programs to x86, and to implement the runtime components of the Java Virtual Machine, including the Garbage Collector. The importance of thie IR is that it is amenable to verification in the Coq proof assistant. We have deployed our develpment on top of the CompcertTSO certified C compiler, which we use as a backend.  To support our claims, we wrote a Concurrent Garbage Collector in our intermediate representation, for which we later verified atomicity properties of certain crucial pieces. Our Atomicity Verification methodology was able to discharge the atomicity of important pieces of code, for which considering all possible interleavings would make the certification of the Garbage Collector intractable. Our preliminary results indicate that this methodology is not limited to the verification of the code of a compiler, but it can generally be applied to the verificaiton of concurrent code that exploits the x86 relaxed memory model semantics. Similarly, our developlemnt gives insights on how to further relax our atomicity verification methodology to cover more, perhaps more relaxed, memory models of different architectures.   We consider our developments to be an important stepping-stone towards the end-to-end certification of a full Java infrastructure that embraces the relaxed memory concurrency present in current computer architectures.       Last Modified: 05/01/2014       Submitted by: Gustavo Petri]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
