<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Exploring Cross-Layer, Integrated Approaches for Improving The Reliability of Heterogeneous Multicore Processors</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/01/2013</AwardEffectiveDate>
<AwardExpirationDate>12/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>180000.00</AwardTotalIntnAmount>
<AwardAmount>188000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>As feature sizes in microprocessor devices continue to scale down, the devices' susceptibility to hardware faults is increasing. While resilient system design is less cost-critical in high-end business applications where redundant hardware is an acceptable solution, it is expected that inexpensive consumer electronics will largely need to be fault tolerant as well. Approaches that double or triple system costs by replicating hardware are likely too expensive for consumer electronics, such as phones, tablets, and laptops. This project will investigate a new way of modeling and supporting hardware fault tolerance that relies on software and hardware working together cooperatively. The key idea is the design of a System Vulnerability Model (SVM), which approximates the vulnerability of an application to a hardware error. Using the model, each layer of the system offers knobs which can be tuned to control overall system vulnerability. This allows the design of systems that inexpensively provide the right amount of fault tolerance for a given application. &lt;br/&gt;&lt;br/&gt;The results of this project could impact how future computer systems provide fault tolerance. Ultimately, such impact benefits society by helping sustain the demand for reliable computing devices, a significant driver in the economy. In the immediate future, it will support the training of graduate students in this critical area, and it will support enhancement of the undergraduate and graduate curriculum to include topics in fault tolerance at North Carolina State University.</AbstractNarration>
<MinAmdLetterDate>02/01/2013</MinAmdLetterDate>
<MaxAmdLetterDate>06/19/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1255762</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Tuck</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME>III</PI_SUFX_NAME>
<PI_FULL_NAME>James M Tuck</PI_FULL_NAME>
<EmailAddress>jtuck@ncsu.edu</EmailAddress>
<PI_PHON>9195130923</PI_PHON>
<NSF_ID>000498662</NSF_ID>
<StartDate>02/01/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2><![CDATA[Admin. III, STE 240]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[North Carolina State University]]></Name>
<CityName/>
<StateCode>NC</StateCode>
<ZipCode>276957911</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramElement>
<ProgramElement>
<Code>8081</Code>
<Text>Failure Resistant Systems(FRS)</Text>
</ProgramElement>
<ProgramReference>
<Code>1800</Code>
<Text>Research Experience for Vets</Text>
</ProgramReference>
<ProgramReference>
<Code>7945</Code>
<Text>DES AUTO FOR MICRO &amp; NANO SYST</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~128000</FUND_OBLG>
<FUND_OBLG>2014~30000</FUND_OBLG>
<FUND_OBLG>2015~30000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-b2b3eb4e-b9db-c0a1-cc6d-5b831e79f0c8"> </span></p> <p dir="ltr"><span>Most computer users are familiar with the idea that rebooting their computer can fix problems. Such failures are often brought about by a software bug or some kind of temporary hardware error - a transient error - whose effects go away after rebooting. In the future, hardware makers expect that transient errors in the form of single-bit upsets, a random bit flip inside the logic of a processor, will become more frequent. To cope with such transient errors, hardware and software may need to adopt a variety of techniques to mitigate them to prevent them from lowering system reliability. However, the current state-of-the-art is that hardware or software acts alone to provide mitigation rather than coordinating actions. This project explored how software and hardware could work together more effectively to monitor reliability and enact reliability enhancing techniques at the hardware level. &nbsp;</span></p> <p dir="ltr"><span>In particular, the project explored whether or not a predictor built into the hardware could accurately estimate the reliability of the system, especially when software may have been enhanced with algorithms or coding that make it resilient to failures. Most prior hardware for estimating reliability takes a hardware centric view because it does not have sufficient information about the software. To overcome this limitation, new strategies were developed for passing information about a program and its algorithms, in the form of metadata, to the hardware for use when estimating reliability. &nbsp;The inclusion of metadata made it possible to predict vulnerability to faults with greater accuracy than prior techniques that were compared against. The predictor was also used to study a variety of dynamic reliability enhancing techniques, and it was found that it could adapt to changing reliability requirements effectively and save power at the same time. These results are published in the journal ACM Transactions on Architecture and Code Optimization. Also, the work was presented by a Ph.D. student working on this project at the HiPEAC conference in Stockholm, Sweden.</span></p> <p dir="ltr"><span>There were a variety of other related insights and findings produced by this project leading to several workshop and conference papers. Additional findings are pending publication.</span></p> <p dir="ltr"><span>Over the course of the project, many students were trained in topics related to resilient system design. Two undergraduate courses were extended to include assignments focused on resilience and fault tolerance. The work of two Ph.D. students was funded primarily from this project. One undergraduate student, a US Navy Veteran, was also supported by this work. &nbsp;A handful of additional professional master&rsquo;s students also contributed to the project through the completion of independent study projects.</span></p> <div><span><br /></span></div> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 03/10/2017<br>      Modified by: James&nbsp;M&nbsp;Tuck</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   Most computer users are familiar with the idea that rebooting their computer can fix problems. Such failures are often brought about by a software bug or some kind of temporary hardware error - a transient error - whose effects go away after rebooting. In the future, hardware makers expect that transient errors in the form of single-bit upsets, a random bit flip inside the logic of a processor, will become more frequent. To cope with such transient errors, hardware and software may need to adopt a variety of techniques to mitigate them to prevent them from lowering system reliability. However, the current state-of-the-art is that hardware or software acts alone to provide mitigation rather than coordinating actions. This project explored how software and hardware could work together more effectively to monitor reliability and enact reliability enhancing techniques at the hardware level.   In particular, the project explored whether or not a predictor built into the hardware could accurately estimate the reliability of the system, especially when software may have been enhanced with algorithms or coding that make it resilient to failures. Most prior hardware for estimating reliability takes a hardware centric view because it does not have sufficient information about the software. To overcome this limitation, new strategies were developed for passing information about a program and its algorithms, in the form of metadata, to the hardware for use when estimating reliability.  The inclusion of metadata made it possible to predict vulnerability to faults with greater accuracy than prior techniques that were compared against. The predictor was also used to study a variety of dynamic reliability enhancing techniques, and it was found that it could adapt to changing reliability requirements effectively and save power at the same time. These results are published in the journal ACM Transactions on Architecture and Code Optimization. Also, the work was presented by a Ph.D. student working on this project at the HiPEAC conference in Stockholm, Sweden. There were a variety of other related insights and findings produced by this project leading to several workshop and conference papers. Additional findings are pending publication. Over the course of the project, many students were trained in topics related to resilient system design. Two undergraduate courses were extended to include assignments focused on resilience and fault tolerance. The work of two Ph.D. students was funded primarily from this project. One undergraduate student, a US Navy Veteran, was also supported by this work.  A handful of additional professional master?s students also contributed to the project through the completion of independent study projects.               Last Modified: 03/10/2017       Submitted by: James M Tuck]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
