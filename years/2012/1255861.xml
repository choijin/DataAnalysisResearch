<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: Software Canaries</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/01/2013</AwardEffectiveDate>
<AwardExpirationDate>03/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>90000.00</AwardTotalIntnAmount>
<AwardAmount>90000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>As transistors get smaller, they become increasingly susceptible to variations in their timing characteristics. One way to deal with possible variations is to assume worst-case characteristics during hardware design. Unfortunately, the power and performance costs of worst-case design are becoming prohibitive. Consequently, processor designers have sought more aggressive design styles that permit better-than-worst-case operation. One such approach uses "canary circuits" that indicate when a processor is on the verge of unsafe operation due to variations. This research investigates "software canaries" - software routines that exercise the most susceptible circuits of a processor to determine an aggressive safe operating point. Software canaries enable all the benefits of hardware canary circuits, without the corresponding hardware overhead. More importantly, they may provide additional benefits as they can track aging and temperature - variations that may be indistinguishable to hardware canary circuits. Furthermore, unlike hardware canary circuits, they allow identifying the most aggressive operating point on a per application basis. This research focuses on exploring the benefits of software canaries, developing use cases, developing techniques for building software canaries for different microarchitectures, and developing microarchitecture and system support needed to support software-canary-based execution.&lt;br/&gt;&lt;br/&gt;The broader impact of the research lies in enabling computing systems with significantly lower energy consumption by selecting aggressive operating points. Other specific impacts include development of open source tools that may be used for further work by other research groups, and a greater discussion of variations and energy efficiency in graduate and undergraduate coursework.</AbstractNarration>
<MinAmdLetterDate>12/21/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/16/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1255861</AwardID>
<Investigator>
<FirstName>John</FirstName>
<LastName>Sartori</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John M Sartori</PI_FULL_NAME>
<EmailAddress>jsartori@umn.edu</EmailAddress>
<PI_PHON>6126245599</PI_PHON>
<NSF_ID>000624650</NSF_ID>
<StartDate>12/21/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Minnesota-Twin Cities</Name>
<CityName>Minneapolis</CityName>
<ZipCode>554552070</ZipCode>
<PhoneNumber>6126245599</PhoneNumber>
<StreetAddress>200 OAK ST SE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Minnesota</StateName>
<StateCode>MN</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MN05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>555917996</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF MINNESOTA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>117178941</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Minnesota-Twin Cities]]></Name>
<CityName>Minneapolis</CityName>
<StateCode>MN</StateCode>
<ZipCode>554550160</ZipCode>
<StreetAddress><![CDATA[200 Union St SE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Minnesota</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MN05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8081</Code>
<Text>Failure Resistant Systems(FRS)</Text>
</ProgramElement>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~48000</FUND_OBLG>
<FUND_OBLG>2014~21000</FUND_OBLG>
<FUND_OBLG>2015~21000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project has enabled significant energy reduction in computing systems through&nbsp;<strong>cross-layer failure resistance mechanisms</strong> called&nbsp;<strong>software canaries</strong>&nbsp;that test for timing slack on the critical paths in a processor to enable safe and energy-efficient better-than-worst-case operation through adaptation to static and dynamic variations. Our accomplishments include the following.</p> <ul> <li>We have demonstrated how to design      software canaries. This involves creating software-based path delay fault      testing routines that have the ability to test for timing slack on the      critical paths of a processor.</li> <li>We have explored the ability of software      canaries to enable adaptation to different types of static and dynamic      variations. Software canaries can enable adaptation to all types of      variations except for fast-changing local voltage variations.</li> <li>We have created microarchitectural and      system support for software canary-based execution.</li> <li>We have evaluated the critical path      coverage of software canaries for different processor microarchitecture      and design styles and shown that software canaries can achieve high      coverage of potentially-critical paths while maintaining low runtime      overhead. </li> <li>We have created and compared software      canaries that target static and dynamic critical path distributions. We      showed that significant additional energy savings are possible from      exploiting workload-dependent dynamic timing slack.</li> <li>We have created a toolchain for      automatically inferring and synthesizing software canaries. </li> <li>We have explored using software canaries      for error localization. </li> <li>We have created open source tools that provide      a baseline&nbsp;and foundation for further work in this area by      other&nbsp;research groups.</li> <li>We have supervised research projects      related to energy efficiency and failure resistance in graduate and      undergraduate coursework. We have also trained graduate and undergraduate      researchers in this project.</li> <li>The products of this project have spawned      additional work on power reduction and energy efficiency for ultra-low-power      processors. Areas of followup work that leverage the products of this      project already include novel power gating and peak power reduction      techniques.</li> </ul> <p>&nbsp;</p><br> <p>            Last Modified: 05/03/2016<br>      Modified by: John&nbsp;M&nbsp;Sartori</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project has enabled significant energy reduction in computing systems through cross-layer failure resistance mechanisms called software canaries that test for timing slack on the critical paths in a processor to enable safe and energy-efficient better-than-worst-case operation through adaptation to static and dynamic variations. Our accomplishments include the following.  We have demonstrated how to design      software canaries. This involves creating software-based path delay fault      testing routines that have the ability to test for timing slack on the      critical paths of a processor. We have explored the ability of software      canaries to enable adaptation to different types of static and dynamic      variations. Software canaries can enable adaptation to all types of      variations except for fast-changing local voltage variations. We have created microarchitectural and      system support for software canary-based execution. We have evaluated the critical path      coverage of software canaries for different processor microarchitecture      and design styles and shown that software canaries can achieve high      coverage of potentially-critical paths while maintaining low runtime      overhead.  We have created and compared software      canaries that target static and dynamic critical path distributions. We      showed that significant additional energy savings are possible from      exploiting workload-dependent dynamic timing slack. We have created a toolchain for      automatically inferring and synthesizing software canaries.  We have explored using software canaries      for error localization.  We have created open source tools that provide      a baseline and foundation for further work in this area by      other research groups. We have supervised research projects      related to energy efficiency and failure resistance in graduate and      undergraduate coursework. We have also trained graduate and undergraduate      researchers in this project. The products of this project have spawned      additional work on power reduction and energy efficiency for ultra-low-power      processors. Areas of followup work that leverage the products of this      project already include novel power gating and peak power reduction      techniques.           Last Modified: 05/03/2016       Submitted by: John M Sartori]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
