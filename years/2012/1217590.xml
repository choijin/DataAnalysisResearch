<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small: Solving the Problem of Scalable Multi-Precision Matrix Arithmetic on GPUs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2012</AwardEffectiveDate>
<AwardExpirationDate>05/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computers directly support arithmetic that is typically limited to 64 bits (about 19 decimal digits) of precision. Applications that need more precision must implement arithmetic through computationally expensive software. Beyond about 256 bits of precision, such calculations become quite costly. The RSA encryption algorithm, for example, can require arithmetic with up to 4096 bits of precision. Applications in areas such as experimental mathematics and number theory can require millions of bits of precision. One multiplication with 10 million bits of precision can take a tenth of a second to compute on a modern processor, which means that matrix arithmetic using such large values can take days to weeks to execute. In previous work the investigators have shown that it is possible to obtain a factor of 20 improvement in performance by utilizing the parallel processing capabilities of a commodity graphics processing unit (GPU) in place of the traditional CPU. However, programming a GPU to achieve this level of performance is quite difficult, and the resulting code requires considerable hand-tuning to move it to new generations of GPU and gain the advantage of their performance, which is scaling up at a rate that exceeds CPU performance scaling.&lt;br/&gt;&lt;br/&gt;This project is working to develop a framework that automatically generates and tunes multi-precision arithmetic libraries to execute on successive generations of GPUs. The libraries include both scalar and basic matrix arithmetic routines. They support scaling in precision as well as matrix size. The problem is challenging because different parallel algorithms must be automatically selected for different levels of precision, which must be balanced with the exploitation of the alternate dimension of parallelism inherent in matrix arithmetic. In addition, the work seeks to employ distributed parallelism across a cluster of computers enhanced with GPUs, so that the libraries can be used on a new generation of GPU-based supercomputers that is beginning to be deployed at national laboratories. &lt;br/&gt;&lt;br/&gt;The work is significant because it enables easier exploitation of low-cost commodity graphics processors to achieve more than an order of magnitude increase in performance for multi-precision scalar and matrix arithmetic. One important application is enhancing performance of RSA encryption to support longer, more secure keys, at greater data rates, so that it becomes feasible to encrypt greater volumes of internet traffic. Another important use is experimental mathematics, where computationally expensive functions (e.g., integrals, infinite series) are computed at high precision and compared to other functions and high precision constants to help identify more efficient closed-form solutions. Results from experimental mathematics have found applications in particle physics, chaos theory, and calculation of fundamental constants. The resulting software framework offers a significant performance enhancement for multi-precision arithmetic to systems that range from individual researcher workstations to large supercomputers.</AbstractNarration>
<MinAmdLetterDate>05/16/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/22/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1217590</AwardID>
<Investigator>
<FirstName>Charles</FirstName>
<LastName>Weems</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Charles C Weems</PI_FULL_NAME>
<EmailAddress>weems@cs.umass.edu</EmailAddress>
<PI_PHON>4135453163</PI_PHON>
<NSF_ID>000434762</NSF_ID>
<StartDate>05/16/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Massachusetts Amherst</Name>
<CityName>Hadley</CityName>
<ZipCode>010359450</ZipCode>
<PhoneNumber>4135450698</PhoneNumber>
<StreetAddress>Research Administration Building</StreetAddress>
<StreetAddress2><![CDATA[100 Venture Way, Suite 201]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>153926712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MASSACHUSETTS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>079520631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Massachusetts Amherst]]></Name>
<CityName>Amherst</CityName>
<StateCode>MA</StateCode>
<ZipCode>010039264</ZipCode>
<StreetAddress><![CDATA[140 Governors Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Multiprecision (MP) integer arithmetic is widely used in internet cryptography, science, engineering, and experimental mathematics. Modern graphics processors (GPUs) offer the potential to accelerate MP calculations by two orders of magnitude beyond traditional sequential processors. However, their designs are evolving rapidly, and extracting maximum performance from them is very challenging.&nbsp;</p> <p>In this project we developed tools and algorithms to obtain the best MP arithmetic performance possible for six generations of NVIDIA GPU. In most cases, the code we generate achieves 90 to 95 percent utilization of the available computational capabilities of the GPU, with no means remaining to further increase utilization. All of our implementations are the fastest known in the world.</p> <p>A practical example of how our work can be used is that it makes it possible for a single GPU to offload all of the cryptographic processing for a rack of servers. Doing so would save power and make it cost effective to use stronger encryption in large server installations, thereby increasing internet security.&nbsp;</p> <p>We first formed a relationship with NVIDIA by showing them how to significantly increase the performance of the integer matrix multiply operation in their Trove library. That result opened an opportunity to work more closely with them on the MP library they were developing (called XMP). Our research made it possible to increase the performance of XMP by a factor of ten over the approach they had planned to use. That made it of particular interest to a large government agency for use in a national security application.&nbsp;</p> <p>We worked with NVIDIA to implement compiler improvements, new optimizations, and new algorithms in support of XMP. In part because we had already published much of our work, NVIDIA released XMP publicly as open source. Thus the community now has access to a highly optimized, vendor-supported MP arithmetic package, and the ability to build on our work.&nbsp;</p> <p>Because general purpose GPUs are relatively new, their generations vary considerably in their designs. Optimizing performance depends on maximizing the number of parallel threads of computation. Computation happens in register memory, while shared memory provides overflow space. When the number of threads is large, there are very few registers and very little shared memory available for each one. Thus, an algorithm must be tuned to work within this limited memory. With each generation, the ratio of registers to shared memory shifts, necessitating different algorithms. Different generations also change the arithmetic operations they offer. For example, integer arithmetic may be provided for 24 bit values on one, 32 bit values on another, or 16 bit values on a third. In MP arithmetic, handling carries between these values is a critical operation, and different generations provide different forms of support for carry handling.&nbsp;</p> <p>We began with a simple technique using code templates to generate low level instructions for the different operators. But after seeing the changes in two successive generations of GPU, we realized a much different approach would be needed. We developed a set of models of the register-memory ratio, arithmetic algorithms, and thread organization that enabled us to search a multidimensional space of implementation options to find the best performance. Many of the optimal configurations were counterintuitive and took considerable analysis to understand why they were the fastest. The subtle interactions that were exploited would not have been obvious to someone who was trying to hand-code a fast implementation. The resulting insights were what we brought to bear in helping NVIDIA optimize XMP.&nbsp;</p> <p>Although we focused mainly on sizes that are used in cryptography (256 to 2048 bits), we also developed GPU algorthms for much larger numbers (up to millions of bits). The larger sizes are important for experimental mathematics, as we demonstrated by finding the least eigenvalues for a particular class of ill-conditioned Hankel matrices with connections to computational physics. We were able to solve significantly larger instances of these matrices than had ever been attempted, providing mathematicians with new insights into their seemingly unpredictable behaviors.&nbsp;</p> <p>One other outcome of the project was discovering a new algorithm for parallel short division (dividing an MP value by a single precision value). We were able to establish and prove a new strong lower bound on the complexity of parallel short division and show that our algorithm achieves it efficiently. We also showed that the algorithm is practical to implement on all common classes of parallel systems.&nbsp;</p> <p>The project produced eight journal or conference papers, and contributed technology to two of NVIDIA's libraries. It supported 3 MS students and one PhD student. Two of the MS students were women, one of whom was also from an underrepresented group. Insights gained from this work have also been taught in the PI's computer architecture classes.&nbsp;</p><br> <p>            Last Modified: 10/24/2016<br>      Modified by: Charles&nbsp;C&nbsp;Weems</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Multiprecision (MP) integer arithmetic is widely used in internet cryptography, science, engineering, and experimental mathematics. Modern graphics processors (GPUs) offer the potential to accelerate MP calculations by two orders of magnitude beyond traditional sequential processors. However, their designs are evolving rapidly, and extracting maximum performance from them is very challenging.   In this project we developed tools and algorithms to obtain the best MP arithmetic performance possible for six generations of NVIDIA GPU. In most cases, the code we generate achieves 90 to 95 percent utilization of the available computational capabilities of the GPU, with no means remaining to further increase utilization. All of our implementations are the fastest known in the world.  A practical example of how our work can be used is that it makes it possible for a single GPU to offload all of the cryptographic processing for a rack of servers. Doing so would save power and make it cost effective to use stronger encryption in large server installations, thereby increasing internet security.   We first formed a relationship with NVIDIA by showing them how to significantly increase the performance of the integer matrix multiply operation in their Trove library. That result opened an opportunity to work more closely with them on the MP library they were developing (called XMP). Our research made it possible to increase the performance of XMP by a factor of ten over the approach they had planned to use. That made it of particular interest to a large government agency for use in a national security application.   We worked with NVIDIA to implement compiler improvements, new optimizations, and new algorithms in support of XMP. In part because we had already published much of our work, NVIDIA released XMP publicly as open source. Thus the community now has access to a highly optimized, vendor-supported MP arithmetic package, and the ability to build on our work.   Because general purpose GPUs are relatively new, their generations vary considerably in their designs. Optimizing performance depends on maximizing the number of parallel threads of computation. Computation happens in register memory, while shared memory provides overflow space. When the number of threads is large, there are very few registers and very little shared memory available for each one. Thus, an algorithm must be tuned to work within this limited memory. With each generation, the ratio of registers to shared memory shifts, necessitating different algorithms. Different generations also change the arithmetic operations they offer. For example, integer arithmetic may be provided for 24 bit values on one, 32 bit values on another, or 16 bit values on a third. In MP arithmetic, handling carries between these values is a critical operation, and different generations provide different forms of support for carry handling.   We began with a simple technique using code templates to generate low level instructions for the different operators. But after seeing the changes in two successive generations of GPU, we realized a much different approach would be needed. We developed a set of models of the register-memory ratio, arithmetic algorithms, and thread organization that enabled us to search a multidimensional space of implementation options to find the best performance. Many of the optimal configurations were counterintuitive and took considerable analysis to understand why they were the fastest. The subtle interactions that were exploited would not have been obvious to someone who was trying to hand-code a fast implementation. The resulting insights were what we brought to bear in helping NVIDIA optimize XMP.   Although we focused mainly on sizes that are used in cryptography (256 to 2048 bits), we also developed GPU algorthms for much larger numbers (up to millions of bits). The larger sizes are important for experimental mathematics, as we demonstrated by finding the least eigenvalues for a particular class of ill-conditioned Hankel matrices with connections to computational physics. We were able to solve significantly larger instances of these matrices than had ever been attempted, providing mathematicians with new insights into their seemingly unpredictable behaviors.   One other outcome of the project was discovering a new algorithm for parallel short division (dividing an MP value by a single precision value). We were able to establish and prove a new strong lower bound on the complexity of parallel short division and show that our algorithm achieves it efficiently. We also showed that the algorithm is practical to implement on all common classes of parallel systems.   The project produced eight journal or conference papers, and contributed technology to two of NVIDIA's libraries. It supported 3 MS students and one PhD student. Two of the MS students were women, one of whom was also from an underrepresented group. Insights gained from this work have also been taught in the PI's computer architecture classes.        Last Modified: 10/24/2016       Submitted by: Charles C Weems]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
