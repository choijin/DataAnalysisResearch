<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  Usable Verification using Rewriting and Matching Logic</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2012</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computers, and implicitly programming languages, are used in many&lt;br/&gt;critical applications these days, where correct behavior is necessary.&lt;br/&gt;Rigorous, formal semantic definitions of the employed programming&lt;br/&gt;languages are therefore necessary in order to verify computing systems.&lt;br/&gt;Unfortunately, in spite of more than forty years of research in&lt;br/&gt;programming language semantics, most program verifiers are not directly&lt;br/&gt;based on a formal semantics, but rather on complex and ad-hoc hardwired&lt;br/&gt;models of their target programming languages.  This has at least two&lt;br/&gt;negative consequences: first, it makes the development and maintenance&lt;br/&gt;of program verifiers hard and uneconomical, particularly for new&lt;br/&gt;programming languages or languages which evolve fast; second, it allows&lt;br/&gt;room for subtle bugs in program verifiers themselves.  This research&lt;br/&gt;project aims at developing a generic program verification framework&lt;br/&gt;that takes a programming language given through its formal semantics as&lt;br/&gt;input, and yields a program verifier for that language as output.&lt;br/&gt;Moreover, the language semantics will be executable, so testable,&lt;br/&gt;and public, so will serve as a reference implementation for the language&lt;br/&gt;and as a formal basis for language understanding.&lt;br/&gt; &lt;br/&gt;Specifically, this projects builds upon recent advances in matching logic&lt;br/&gt;and its use for verifying reachability properties.  A language-independent&lt;br/&gt;sound and relatively complete proof system takes a programming language&lt;br/&gt;operational semantics as a set of axioms, and can be used to derive&lt;br/&gt;any reachability property about any program in the given language.  This&lt;br/&gt;is in sharp contrast to the existing verification approaches based on&lt;br/&gt;Hoare logic and on dynamic logic, since these approaches are&lt;br/&gt;language-specific.  This research will therefore lead to the development&lt;br/&gt;of semantic and verification techniques and algorithms that will work for&lt;br/&gt;any language, provided a formal semantics of the language is given.&lt;br/&gt;Consequently, the broader impact of this research is that it will increase&lt;br/&gt;the quality and robustness of software systems, and will narrow the gap&lt;br/&gt;between the specification and the implementation of computer systems.</AbstractNarration>
<MinAmdLetterDate>07/03/2012</MinAmdLetterDate>
<MaxAmdLetterDate>07/03/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218605</AwardID>
<Investigator>
<FirstName>Grigore</FirstName>
<LastName>Rosu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Grigore Rosu</PI_FULL_NAME>
<EmailAddress>grosu@illinois.edu</EmailAddress>
<PI_PHON>2172447431</PI_PHON>
<NSF_ID>000488532</NSF_ID>
<StartDate>07/03/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~400000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The main outcome of this project is a <em>program verification infrastructure,&nbsp;</em>which provides a fast way to build a&nbsp;correct-by-construction program verifier from a formal K (kframework.org) semantics of a progamming language. &nbsp;This gives researchers in the program verification areas an easy way of&nbsp;deploying new verification techniques for real-world languages. It also gives&nbsp;language designers a cost-effective way to build verifiers for their languages, regardless of how unconventional they are.</p> <p>The K formal semantics of three major languages were defined and used with the verification infrastructure: JavaScript (ES5), C (ISO C11), and Java (1.4). &nbsp;These are largest known formal semantics of real-world programming languages known. &nbsp;Besides providing referfence models for these language that can be used by other researchers to validate their program analysis tools, these semantics have also been used to detect errors in all the major web browsers (Chrome, Safari, Firefox, IE), errors that can yield safety and security leaks.</p> <p><span>The K framework makes it easy for researchers to design and develop not only new programming langugaes, but also effective formal analysis tools for them that can find errors in realistic applications. &nbsp;Researchers in other disciplines should now be more likely to design their own domain-specific languages, which should increase their productivity and confidence in their work.</span></p> <p>The K framework has been adopted as infrastructure for the commercial RV-Match tool (https://runtimeverification.com/match/) in PI's startup Runtime Verification, Inc. (https://runtimeverification.com). &nbsp;Currently, three large customers use the RV-Match tool: NASA, Boeing, Toyota ITC &amp; Denso.&nbsp; Negotiations with other customers will hopefully spread more widely the use of this tool, and thus the results of this NSF project.</p> <p>The results of the project in the areas of building programs verifiers and operational semantics should make the use of certified software systems more widespread, which in turn should decrease the likelihood of major bugs, like Heartbleed.</p> <p>&nbsp;</p> <p><span><br /></span></p><br> <p>            Last Modified: 04/12/2016<br>      Modified by: Grigore&nbsp;Rosu</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2016/1218605/1218605_10186832_1460461341786_Architecture--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/1218605/1218605_10186832_1460461341786_Architecture--rgov-800width.jpg" title="K Verification Infrastructure"><img src="/por/images/Reports/POR/2016/1218605/1218605_10186832_1460461341786_Architecture--rgov-66x44.jpg" alt="K Verification Infrastructure"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Architecture of the K verification infrastructure.</div> <div class="imageCredit">K Team</div> <div class="imagePermisssions">Royalty-free (unrestricted use)</div> <div class="imageSubmitted">Grigore&nbsp;Rosu</div> <div class="imageTitle">K Verification Infrastructure</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The main outcome of this project is a program verification infrastructure, which provides a fast way to build a correct-by-construction program verifier from a formal K (kframework.org) semantics of a progamming language.  This gives researchers in the program verification areas an easy way of deploying new verification techniques for real-world languages. It also gives language designers a cost-effective way to build verifiers for their languages, regardless of how unconventional they are.  The K formal semantics of three major languages were defined and used with the verification infrastructure: JavaScript (ES5), C (ISO C11), and Java (1.4).  These are largest known formal semantics of real-world programming languages known.  Besides providing referfence models for these language that can be used by other researchers to validate their program analysis tools, these semantics have also been used to detect errors in all the major web browsers (Chrome, Safari, Firefox, IE), errors that can yield safety and security leaks.  The K framework makes it easy for researchers to design and develop not only new programming langugaes, but also effective formal analysis tools for them that can find errors in realistic applications.  Researchers in other disciplines should now be more likely to design their own domain-specific languages, which should increase their productivity and confidence in their work.  The K framework has been adopted as infrastructure for the commercial RV-Match tool (https://runtimeverification.com/match/) in PI's startup Runtime Verification, Inc. (https://runtimeverification.com).  Currently, three large customers use the RV-Match tool: NASA, Boeing, Toyota ITC &amp; Denso.  Negotiations with other customers will hopefully spread more widely the use of this tool, and thus the results of this NSF project.  The results of the project in the areas of building programs verifiers and operational semantics should make the use of certified software systems more widespread, which in turn should decrease the likelihood of major bugs, like Heartbleed.             Last Modified: 04/12/2016       Submitted by: Grigore Rosu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
