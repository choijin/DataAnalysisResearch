<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Adaptively Boosting Resilience Efficiency in the Face of Frequent, Clustered, and Diverse Faults</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2013</AwardEffectiveDate>
<AwardExpirationDate>05/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>449541.00</AwardTotalIntnAmount>
<AwardAmount>481541</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>While technology advances allow researchers to produce chips with higher performance and lower power consumption, our ability to deliver such computational power is challenged by the increasing susceptibility of silicon devices to faults. It is expected that in future computer systems, faults will occur in a continuous manner, across all levels from hardware to application. The fault behavior is furthermore expected to be more diverse and unpredictable. Of critical concern will be not only permanent and transient faults, but also intermittent faults that occur frequently and irregularly over nanosecond to second time scales.&lt;br/&gt;&lt;br/&gt;These predicted high fault rates and diverse fault behaviors mandate a transformation in fault resilience approaches. When faults occur in a continuous manner, both fault detection and recovery must be performed in a much finer-grained manner, and recovery becomes as critical as detection. Moreover, since fault duration varies significantly, cost-effective solutions capable of uniformly detecting all types of faults, identifying the fault type, and then adaptively recovering the execution are necessary.&lt;br/&gt;&lt;br/&gt;To address these reliability challenges, the proposed project will incorporate fine-grained adaptivity into the system, and couple statically extracted application information with runtime optimizations to guide adaptation decisions. The proposed research includes: (1) adaptive detection and checkpointing, capable of adjusting detection and checkpointing granularity to match system reliability levels; (2) adaptive recovery, capable of performing re-execution in a way that minimizes the chance of another fault occurring; and (3) adaptive resource management, capable of monitoring application and hardware reliability levels and quickly adapting scheduling decisions.</AbstractNarration>
<MinAmdLetterDate>02/25/2013</MinAmdLetterDate>
<MaxAmdLetterDate>03/07/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1253733</AwardID>
<Investigator>
<FirstName>Chengmo</FirstName>
<LastName>Yang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Chengmo Yang</PI_FULL_NAME>
<EmailAddress>chengmo@udel.edu</EmailAddress>
<PI_PHON>3028314997</PI_PHON>
<NSF_ID>000577737</NSF_ID>
<StartDate>02/25/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Delaware</Name>
<CityName>Newark</CityName>
<ZipCode>197160099</ZipCode>
<PhoneNumber>3028312136</PhoneNumber>
<StreetAddress>210 Hullihen Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<StateCode>DE</StateCode>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>DE00</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>059007500</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF DELAWARE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>059007500</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Delaware]]></Name>
<CityName/>
<StateCode>DE</StateCode>
<ZipCode>197162553</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>DE00</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~240770</FUND_OBLG>
<FUND_OBLG>2014~133745</FUND_OBLG>
<FUND_OBLG>2016~91026</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>International Technology Roadmap of Semiconductor (ITRS) report identifies &ldquo;reliability and resilience&rdquo; as one of the grand challenges in designing future ES/CPS/IoT systems. Due to device scaling, varying environmental issues and aging effects, not only are faults expected to occur in a continuous manner, but their behavior will be more diverse and unpredictable. It is no longer adequate to simply assume a low fault rate and focus solely on optimizing fault detection while ignoring recovery overhead. Instead, it is necessary to maximize the overall efficiency of resilience by balancing fault detection and recovery overhead.</p> <p>In response to this challenge, this project aims to provide deep insights on the key concerns of existing systems and needs of emerging devices under the new and diverse types of faults. It offers multiple new architectural-level and system-level solutions as well as static and runtime optimization algorithms to address these needs. Our solutions incorporate fine-grained adaptivity into important functions of reliable systems including checkpointing, fault detection, fault recovery, and resource management.</p> <p>Focusing on checkpointing, fault detection, and fault recovery functions, we have proposed several adaptive techniques to not only boost the reliable system&rsquo;s performance and efficiency but also to minimize its overall overhead, which is a quite challenging goal due to interdependent nature of these functions. Taking the amount of computation that must be recovered upon a fault detection into account, our adaptive checkpointing and fault detection techniques fine-tune these functions such as the amount of checkpointed data, checkpointing rate, and detection frequency to match the system&rsquo;s runtime fault rate. When the fault rate is low, fault detection and checkpointing are performed in a relatively coarse-grained manner to reduce the associated overhead. When a fault is detected, the intermediate results are compared and checkpointed more frequently, allowing the computation to progress in much finer steps. The fault recovery techniques, on the other hand, minimize the system's overhead by selectively re-executing instructions and tasks or selectively recovering from some faults without imposing overhead on other system&rsquo;s functions.</p> <p>Each of our proposed techniques provides adaptivity via exploiting (1) statistically-extracted application-specific information such as control-flow and data-flow structures; (2) dynamically-extracted architecture-specific runtime fault information; (3) the unique characteristics of the targeted fault such as read disturbance errors in the emerging STT-MRAM non-volatile memories, or (4) the specific properties of the underlying system such as SSD&rsquo;s ability to create a trail of multiple versions of data. All of our techniques are implemented and evaluated using the cutting-edge tools and simulators such as Gem5 cycle-accurate simulator and LLVM compiler tool-chain, and are proven to be significantly effective in reducing the system's overhead.</p> <p>During our research, we sensed the absence of a fault injection and behavioral analysis framework to facilitate research for evaluating new reliable designs and also to enable a fair evaluation and comparison among different reliable systems. To address these needs, we developed a novel light-weight but comprehensive instruction-level fault injection/detection framework which allows for the identification of both reliable and unreliable regions of a program via the simulation of a variety of hardware faults, and can further be utilized in the tuning of reliable design techniques through the implementation of run-time fault detection and effortless experiment replay. We have utilized this framework for evaluating adaptive fault detection and checkpointing, selective instruction-replay for error recovery, and compiler-directed toleration of read-disturbance errors in STT-MRAM. Our tool can benefit other researchers in the field to evaluate their works as well.</p> <p>Finally, we have also tackled the adaptive resource management problem in systems with multiple cores and applications. To quickly perform runtime adaptation in a predictable manner, our work considers &ldquo;reliability level&rdquo; (RL) as an intermediate scheduling dimension and creates a &ldquo;task-to-RL-to-core&rdquo; mapping offline, allowing the &ldquo;RL-to-core&rdquo; mapping to be adapted at runtime according to fault rate variations while the &ldquo;task-to-RL&rdquo; mapping is still maintained. We have developed a core reliability model capable of tracking faults appeared in each core as well as their correlation in time. As faults appear, many intermediate reliability levels are defined, allowing the system to progressively reduce the frequency of job assignments to a core until that core becomes non-functional.</p> <p>Overall, this 6-year research project supported 6 graduate students (3 female) and 10 undergraduate students. It produced 10 conference papers and 2 journal papers in total.</p><br> <p>            Last Modified: 06/12/2019<br>      Modified by: Chengmo&nbsp;Yang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ International Technology Roadmap of Semiconductor (ITRS) report identifies "reliability and resilience" as one of the grand challenges in designing future ES/CPS/IoT systems. Due to device scaling, varying environmental issues and aging effects, not only are faults expected to occur in a continuous manner, but their behavior will be more diverse and unpredictable. It is no longer adequate to simply assume a low fault rate and focus solely on optimizing fault detection while ignoring recovery overhead. Instead, it is necessary to maximize the overall efficiency of resilience by balancing fault detection and recovery overhead.  In response to this challenge, this project aims to provide deep insights on the key concerns of existing systems and needs of emerging devices under the new and diverse types of faults. It offers multiple new architectural-level and system-level solutions as well as static and runtime optimization algorithms to address these needs. Our solutions incorporate fine-grained adaptivity into important functions of reliable systems including checkpointing, fault detection, fault recovery, and resource management.  Focusing on checkpointing, fault detection, and fault recovery functions, we have proposed several adaptive techniques to not only boost the reliable system?s performance and efficiency but also to minimize its overall overhead, which is a quite challenging goal due to interdependent nature of these functions. Taking the amount of computation that must be recovered upon a fault detection into account, our adaptive checkpointing and fault detection techniques fine-tune these functions such as the amount of checkpointed data, checkpointing rate, and detection frequency to match the system?s runtime fault rate. When the fault rate is low, fault detection and checkpointing are performed in a relatively coarse-grained manner to reduce the associated overhead. When a fault is detected, the intermediate results are compared and checkpointed more frequently, allowing the computation to progress in much finer steps. The fault recovery techniques, on the other hand, minimize the system's overhead by selectively re-executing instructions and tasks or selectively recovering from some faults without imposing overhead on other system?s functions.  Each of our proposed techniques provides adaptivity via exploiting (1) statistically-extracted application-specific information such as control-flow and data-flow structures; (2) dynamically-extracted architecture-specific runtime fault information; (3) the unique characteristics of the targeted fault such as read disturbance errors in the emerging STT-MRAM non-volatile memories, or (4) the specific properties of the underlying system such as SSD?s ability to create a trail of multiple versions of data. All of our techniques are implemented and evaluated using the cutting-edge tools and simulators such as Gem5 cycle-accurate simulator and LLVM compiler tool-chain, and are proven to be significantly effective in reducing the system's overhead.  During our research, we sensed the absence of a fault injection and behavioral analysis framework to facilitate research for evaluating new reliable designs and also to enable a fair evaluation and comparison among different reliable systems. To address these needs, we developed a novel light-weight but comprehensive instruction-level fault injection/detection framework which allows for the identification of both reliable and unreliable regions of a program via the simulation of a variety of hardware faults, and can further be utilized in the tuning of reliable design techniques through the implementation of run-time fault detection and effortless experiment replay. We have utilized this framework for evaluating adaptive fault detection and checkpointing, selective instruction-replay for error recovery, and compiler-directed toleration of read-disturbance errors in STT-MRAM. Our tool can benefit other researchers in the field to evaluate their works as well.  Finally, we have also tackled the adaptive resource management problem in systems with multiple cores and applications. To quickly perform runtime adaptation in a predictable manner, our work considers "reliability level" (RL) as an intermediate scheduling dimension and creates a "task-to-RL-to-core" mapping offline, allowing the "RL-to-core" mapping to be adapted at runtime according to fault rate variations while the "task-to-RL" mapping is still maintained. We have developed a core reliability model capable of tracking faults appeared in each core as well as their correlation in time. As faults appear, many intermediate reliability levels are defined, allowing the system to progressively reduce the frequency of job assignments to a core until that core becomes non-functional.  Overall, this 6-year research project supported 6 graduate students (3 female) and 10 undergraduate students. It produced 10 conference papers and 2 journal papers in total.       Last Modified: 06/12/2019       Submitted by: Chengmo Yang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
