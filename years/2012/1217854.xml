<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Tool Support for Verifiably-Robust Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2012</AwardEffectiveDate>
<AwardExpirationDate>09/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>499922.00</AwardTotalIntnAmount>
<AwardAmount>499922</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Society increasingly relies on software in critical roles for which crashes can have serious consequences including the loss of lives. For example, it is now commonplace for software to control the engines and brakes in our cars.  This research investigates a new approach for improving the resilience of software.  The goal is to verify that hidden bugs cannot cause programs to transition into problematic states in which they stop responding to human control or respond differently than when they were tested.  Given the scale that our society depends on software in critical roles, new approaches to improving software resilience have the potential to reduce the financial costs of software failures and even save lives.&lt;br/&gt;&lt;br/&gt;Previous work on software resilience largely focused on extensive testing or formal verification of correctness.  This project takes a new approach - it seeks to verify that the consequences of a software error have a limited scope in time.  Precisely, it verifies that after a bounded time period after an error, the execution will reach a state in which it will respond with same behaviors seen while testing.  This property is known in the distributed systems literature as self-stabilization.  The project will combine type annotations with compiler analyses to verify that a computation is self-stabilizing.  A second thrust of the project is to explore how to compose self-stabilizing computations with stateful computations while still providing useful system level guarantees.</AbstractNarration>
<MinAmdLetterDate>07/03/2012</MinAmdLetterDate>
<MaxAmdLetterDate>07/03/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1217854</AwardID>
<Investigator>
<FirstName>Brian</FirstName>
<LastName>Demsky</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Brian C Demsky</PI_FULL_NAME>
<EmailAddress>bdemsky@uci.edu</EmailAddress>
<PI_PHON>9498240356</PI_PHON>
<NSF_ID>000399342</NSF_ID>
<StartDate>07/03/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926972625</ZipCode>
<StreetAddress><![CDATA[4213 Engineering Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~499922</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Society increasingly relies on software in critical roles for which crashes can have serious consequences. &nbsp;The negative consequences of failures in these systems range from simple denial of service to legitimate users to the destruction of physical systems (with the potential for collateral damage) when their software controls fail.This project explores new approaches to improving the robustness of software systems that interact with the physical world&nbsp;to programming errors that can crashes or open the software to attack.</p> <p>&nbsp;</p> <p>The project has developed new insights to improving the robustness of software to crashes and attacks. &nbsp;One insight is that many software systems can be architected such that a trigger software bug can only affect software systems for a limited time. &nbsp;Such software systems self-stabilize and this project has developed analysis that can verify that programs self-stabilize before they are deployed. &nbsp;This work has been extended with tools that assist developers in the verification process---we have developed an inference tool that can in many cases automatically infer the necessary annotations for our checker.</p> <p><br />Attacks that leverage software bugs in systems that control physical infrastructure are often enabled by overly permissive network access to these devices. &nbsp;This is often done because naively restricting network communication can cause devices to fail when required communication is blocked. &nbsp;The project has developed language constructs and static analysis that characterize all communications that control software may need. &nbsp;This information is then used at runtime to block communication from attackers while ensuring that communication required by the system for correct operation is never blocked.</p> <p><br />The broader impacts of the research includes more robust software systems against both software bugs and attacks and an improvement in society's ability to safely rely on software systems as components of critical infrastructure. &nbsp;Software developed by the project has been made freely available. &nbsp;The project has helped develop national software resources by mentoring PhD students, undergraduate students, and even high school students.</p><br> <p>            Last Modified: 12/21/2017<br>      Modified by: Brian&nbsp;C&nbsp;Demsky</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Society increasingly relies on software in critical roles for which crashes can have serious consequences.  The negative consequences of failures in these systems range from simple denial of service to legitimate users to the destruction of physical systems (with the potential for collateral damage) when their software controls fail.This project explores new approaches to improving the robustness of software systems that interact with the physical world to programming errors that can crashes or open the software to attack.     The project has developed new insights to improving the robustness of software to crashes and attacks.  One insight is that many software systems can be architected such that a trigger software bug can only affect software systems for a limited time.  Such software systems self-stabilize and this project has developed analysis that can verify that programs self-stabilize before they are deployed.  This work has been extended with tools that assist developers in the verification process---we have developed an inference tool that can in many cases automatically infer the necessary annotations for our checker.   Attacks that leverage software bugs in systems that control physical infrastructure are often enabled by overly permissive network access to these devices.  This is often done because naively restricting network communication can cause devices to fail when required communication is blocked.  The project has developed language constructs and static analysis that characterize all communications that control software may need.  This information is then used at runtime to block communication from attackers while ensuring that communication required by the system for correct operation is never blocked.   The broader impacts of the research includes more robust software systems against both software bugs and attacks and an improvement in society's ability to safely rely on software systems as components of critical infrastructure.  Software developed by the project has been made freely available.  The project has helped develop national software resources by mentoring PhD students, undergraduate students, and even high school students.       Last Modified: 12/21/2017       Submitted by: Brian C Demsky]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
