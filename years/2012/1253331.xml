<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Verifying Threaded Software Using Resource Bounds -- An Approach Towards Dependable Concurrency</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>515495.00</AwardTotalIntnAmount>
<AwardAmount>515495</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software development is facing a paradigm shift towards ubiquitous&lt;br/&gt;concurrent programming, giving rise to software that is among the most&lt;br/&gt;complex technical artifacts ever created by humans. Concurrent programming&lt;br/&gt;presents several risks and dangers for programmers who are overwhelmed by puzzling &lt;br/&gt;and irreproducible concurrent program behavior, and  by new types of bugs that elude &lt;br/&gt;traditional quality assurance techniques.  If this situation is not addressed, we are &lt;br/&gt;drifting into an era of widespread  unreliable software, with consequences ranging &lt;br/&gt;from collapsed programmer productivity, to catastrophic failures in mission-critical systems.&lt;br/&gt;&lt;br/&gt;This project will take steps against a concurrent software crisis, by&lt;br/&gt;producing verification technology that assists non-specialist programmers&lt;br/&gt;in detecting concurrency errors, or demonstrating their absence. The&lt;br/&gt;proposed technology will confront the concurrency explosion problem that&lt;br/&gt;verification methods often suffer from. The project's goal is a framework&lt;br/&gt;under which the analysis of programs with unbounded concurrency resources&lt;br/&gt;(such as threads of execution) can be soundly reduced to an analysis under&lt;br/&gt;a small constant resource bound, making the use of state space explorers&lt;br/&gt;practical. As a result, the project will largely eliminate the impact of&lt;br/&gt;unspecified computational resources as the major cause of complexity in&lt;br/&gt;analyzing concurrent programs. By developing tools for detecting otherwise &lt;br/&gt;undetectable misbehavior and vulnerabilities in concurrent programs, the &lt;br/&gt;project will contribute its part to averting a looming software quality crisis.</AbstractNarration>
<MinAmdLetterDate>01/18/2013</MinAmdLetterDate>
<MaxAmdLetterDate>05/30/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1253331</AwardID>
<Investigator>
<FirstName>Thomas</FirstName>
<LastName>Wahl</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Thomas Wahl</PI_FULL_NAME>
<EmailAddress>wahl@ccs.neu.edu</EmailAddress>
<PI_PHON>6173733100</PI_PHON>
<NSF_ID>000608439</NSF_ID>
<StartDate>01/18/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northeastern University</Name>
<CityName>BOSTON</CityName>
<ZipCode>021155005</ZipCode>
<PhoneNumber>6173733004</PhoneNumber>
<StreetAddress>360 HUNTINGTON AVE</StreetAddress>
<StreetAddress2><![CDATA[177-500]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001423631</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHEASTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001423631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northeastern University]]></Name>
<CityName>Boston</CityName>
<StateCode>MA</StateCode>
<ZipCode>021155005</ZipCode>
<StreetAddress><![CDATA[360 Huntington Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~209458</FUND_OBLG>
<FUND_OBLG>2015~99013</FUND_OBLG>
<FUND_OBLG>2016~101982</FUND_OBLG>
<FUND_OBLG>2017~105042</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>As the dependence of society on software and computer systems increases, so does the need for ensuring their reliable operation. An unresponsive node in a distributed computing environment, or a process that attempts to execute an illegal instruction and is thus terminated by the operating system are examples of failures that are, unfortunately, widespread in today's software. Consequences range from an "inconvenience" to the potential of catastrophes. The thriving field of Formal Verification aims, among others, at thoroughly investigating software for the presence of such potential failures, before the software is deployed.<br /><br />In this project, we focus specifically on the formal verification of threaded software: programs that consist of multiple, more or less independent threads of computation that pursue their own "agenda" and compete with other threads, such as dynamic threads in a shared-memory computing environment. The analysis of such software for certain patterns of errors, which are often very intricate and hard to comprehend or even reproduce by the software engineer, is a long-standing problem in computer science.<br /><br />Toward this goal, the present project started from the assumption that virtually all computer programs rely on the existence of certain <em>resources</em> for them to use, such as the storage capacity of a data structure used by the programs, or the degree of concurrency (number of spawnable threads). Programmers charged with analyzing concurrent software for errors often employ a not-so-secret weapon to reduce the complexity of the analysis: they bound each resource to some finite capacity. Imagine a distributed system where participating nodes send each other messages via unbounded queues, engendering an infinite state space. For analysis purposes, if we assume that the queues can only hold some number k of messages, then we may have a shot at exploring all possible states of the queues, since there can now only be a finite number of messages in them.<br /><br />But, ultimately, we need to make a statement about the unbounded-resource software, which is the abstraction commonly (and reasonably) used during software design. In this project we have developed techniques that empower the software engineer to build on top of existing bounded-resource analyses and extend them to enable guarantees even in the unbounded-resource case. More precisely, the framework presented here suggests to perform a sequence of bounded analyses with increasing resource capacities. If any such analysis discover a software problem, we report it as a failure to the programmer. Otherwise, we have to decide when to stop increasing the resource capacity, arguing that further increases cannot possibly reveal software failures that we haven't observed yet up to this point.<br /><br />We have successfully applied this approach to a number of complex system designs. "Complex" here means that there are theoretical and unsurmountable limits to the full verification of such systems (the problem is <em>undecidable</em>). The goal then is to be able to design analyses that work in many cases in practice. Our application scenarios include distributed systems of communicating state machines, and collections of recursive functions executing in parallel and communicating via shared memory. The outcomes include partial verification techniques for such systems, but more significantly an analysis framework that can be adapted to new application scenarios with only moderate effort. These outcomes have led to scientific publications in the top dissemination venues in the fields of programming languages and verification.<br /><br />One impact of the wide applicability of this paradigm is that the project has enabled the broad participation of students at various educational stages, from doctoral candidates to freshman (!) undergraduates. This has helped not only to engage these students in research---some at the earliest possible stage---, but also to educate them about the pitfalls of concurrency, and about program semantics and verification, which will in the end turn these future computer scientists into better program developers.</p><br> <p>            Last Modified: 12/20/2019<br>      Modified by: Thomas&nbsp;Wahl</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ As the dependence of society on software and computer systems increases, so does the need for ensuring their reliable operation. An unresponsive node in a distributed computing environment, or a process that attempts to execute an illegal instruction and is thus terminated by the operating system are examples of failures that are, unfortunately, widespread in today's software. Consequences range from an "inconvenience" to the potential of catastrophes. The thriving field of Formal Verification aims, among others, at thoroughly investigating software for the presence of such potential failures, before the software is deployed.  In this project, we focus specifically on the formal verification of threaded software: programs that consist of multiple, more or less independent threads of computation that pursue their own "agenda" and compete with other threads, such as dynamic threads in a shared-memory computing environment. The analysis of such software for certain patterns of errors, which are often very intricate and hard to comprehend or even reproduce by the software engineer, is a long-standing problem in computer science.  Toward this goal, the present project started from the assumption that virtually all computer programs rely on the existence of certain resources for them to use, such as the storage capacity of a data structure used by the programs, or the degree of concurrency (number of spawnable threads). Programmers charged with analyzing concurrent software for errors often employ a not-so-secret weapon to reduce the complexity of the analysis: they bound each resource to some finite capacity. Imagine a distributed system where participating nodes send each other messages via unbounded queues, engendering an infinite state space. For analysis purposes, if we assume that the queues can only hold some number k of messages, then we may have a shot at exploring all possible states of the queues, since there can now only be a finite number of messages in them.  But, ultimately, we need to make a statement about the unbounded-resource software, which is the abstraction commonly (and reasonably) used during software design. In this project we have developed techniques that empower the software engineer to build on top of existing bounded-resource analyses and extend them to enable guarantees even in the unbounded-resource case. More precisely, the framework presented here suggests to perform a sequence of bounded analyses with increasing resource capacities. If any such analysis discover a software problem, we report it as a failure to the programmer. Otherwise, we have to decide when to stop increasing the resource capacity, arguing that further increases cannot possibly reveal software failures that we haven't observed yet up to this point.  We have successfully applied this approach to a number of complex system designs. "Complex" here means that there are theoretical and unsurmountable limits to the full verification of such systems (the problem is undecidable). The goal then is to be able to design analyses that work in many cases in practice. Our application scenarios include distributed systems of communicating state machines, and collections of recursive functions executing in parallel and communicating via shared memory. The outcomes include partial verification techniques for such systems, but more significantly an analysis framework that can be adapted to new application scenarios with only moderate effort. These outcomes have led to scientific publications in the top dissemination venues in the fields of programming languages and verification.  One impact of the wide applicability of this paradigm is that the project has enabled the broad participation of students at various educational stages, from doctoral candidates to freshman (!) undergraduates. This has helped not only to engage these students in research---some at the earliest possible stage---, but also to educate them about the pitfalls of concurrency, and about program semantics and verification, which will in the end turn these future computer scientists into better program developers.       Last Modified: 12/20/2019       Submitted by: Thomas Wahl]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
