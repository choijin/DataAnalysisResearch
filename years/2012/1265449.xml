<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Collaborative Research:  Using PDE Descriptions To Generate Code Precisely Tailored To Energy-Constrained Systems Including Large GPU Accelerated Clusters</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>169999.00</AwardTotalIntnAmount>
<AwardAmount>169999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rajiv Ramnath</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Modern computer system architectures are forcing computational scientists to move scientific applications&lt;br/&gt;from traditional homogeneous cpu-based systems to heterogeneous multi-core/accelerator architectures.   &lt;br/&gt;Obtaining performance in the presence of accelerators requires close attention to&lt;br/&gt;the memory hierarchy and chip-level parallelism to reach even a modest fraction&lt;br/&gt;of the potential performance. As a result, coding tasks which were once the province of&lt;br/&gt;lone graduate students in a single discipline now require interdisciplinary teams of people. &lt;br/&gt;Project Chemora will explore the design of a new application framework for automatically&lt;br/&gt;creating highly optimized code for high-end computational machines. The system&lt;br/&gt;will use as input a set of partial differential equations (PDEs) that describe a&lt;br/&gt;problem, it will then construct a machine-specific abstract performance model, and using these&lt;br/&gt;it will generate well-tuned code and execution configurations for accelerated&lt;br/&gt;(e.g., hybrid CPU/GPU) computing clusters at various scales.  Chemora will&lt;br/&gt;improve programmability in this simplified domain by decoupling the science and&lt;br/&gt;computer science at a high level, thereby reducing the complexity and number of issues scientists need to&lt;br/&gt;collectively understand and allowing individual scientists in the team to focus on their area of&lt;br/&gt;specialty. Chemora will improve performance (both wallclock time and energy) for&lt;br/&gt;systems with both simple and complex sets of equations by making use of detailed&lt;br/&gt;information describing the problem and machine, and will provide improved load&lt;br/&gt;balancing through the AMPI framework.&lt;br/&gt;&lt;br/&gt;The Chemora project  has chosen the Einstein equations as the primary science driver because&lt;br/&gt;these equations are one of the more complex PDE systems, one with many&lt;br/&gt;hundreds of terms, and a problem scale that is challenging to optimize for most&lt;br/&gt;compilers. Achieving this vision for a general scientific problem would indeed&lt;br/&gt;be a "Grand Challenge" in computational science, but in order to give our&lt;br/&gt;research a sharper focus we have chosen as a science driver the&lt;br/&gt;simulation of Intermediate mass ratio Binary Black Hole (IBBH) systems. Such&lt;br/&gt;systems, consisting of a black hole of mass 100 to 1,000 solar masses orbited by&lt;br/&gt;a smaller black hole of mass 5 to 20 solar masses are expected to be important&lt;br/&gt;sources of gravitational waves for advanced Laser Interferometer Gravitational&lt;br/&gt;Wave Observatory (LIGO) and the Einstein Telescope (ET). Accurate modeling of&lt;br/&gt;the waveforms from IBBH systems will be necessary in order to extract&lt;br/&gt;gravitational wave signals using template-matching data analysis techniques.</AbstractNarration>
<MinAmdLetterDate>08/15/2013</MinAmdLetterDate>
<MaxAmdLetterDate>08/15/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1265449</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Koppelman</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David M Koppelman</PI_FULL_NAME>
<EmailAddress>koppel@ece.lsu.edu</EmailAddress>
<PI_PHON>2255785482</PI_PHON>
<NSF_ID>000163112</NSF_ID>
<StartDate>08/15/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Peter</FirstName>
<LastName>Diener</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Peter Diener</PI_FULL_NAME>
<EmailAddress>diener@cct.lsu.edu</EmailAddress>
<PI_PHON>2255786880</PI_PHON>
<NSF_ID>000492874</NSF_ID>
<StartDate>08/15/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Steven</FirstName>
<LastName>Brandt</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Steven Brandt</PI_FULL_NAME>
<EmailAddress>sbrandt@cct.lsu.edu</EmailAddress>
<PI_PHON>2255785431</PI_PHON>
<NSF_ID>000198513</NSF_ID>
<StartDate>08/15/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Frank</FirstName>
<LastName>Loffler</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Frank Loffler</PI_FULL_NAME>
<EmailAddress>knarf@cct.lsu.edu</EmailAddress>
<PI_PHON>2255787437</PI_PHON>
<NSF_ID>000574743</NSF_ID>
<StartDate>08/15/2013</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Louisiana State University</Name>
<CityName>Baton Rouge</CityName>
<ZipCode>708032701</ZipCode>
<PhoneNumber>2255782760</PhoneNumber>
<StreetAddress>202 Himes Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Louisiana</StateName>
<StateCode>LA</StateCode>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>LA06</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>075050765</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LOUISIANA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>940050792</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Louisiana State University and A&M College]]></Name>
<CityName>Baton Rouge</CityName>
<StateCode>LA</StateCode>
<ZipCode>708032701</ZipCode>
<StreetAddress><![CDATA[202 Himes Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Louisiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>LA06</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1244</Code>
<Text>Gravity Theory</Text>
</ProgramElement>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~169999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The modern era of scientific code development is both a golden age and a dark age. It is a golden age because we have machines that can operate at unprecedented levels of performance. Unfortunately, it is also a dark age because these machines are becoming increasingly hard to program and use. This is due in part to power becoming a limiting resource, in response to which energy-efficient GPU computational accelerator designs have been introduced that omit energy-consuming niceties such as caches and predictors, replacing these with a baroque memory model and a requirement that programs be coded to follow a large number of threads of execution. Such accelerator designs demand much more effort from programmers to properly use, and programs must be re-tuned for each succeeding accelerator generation.</p> <p><br />This need to re-tune is much less of a problem for CPUs, because features such as large caches and branch predictors enable compilers to generate good code without having to know, for example, how many times a piece of data will be accessed. GPU accelerators replace large caches with several types of storage, such as a high-speed scratchpad memory. The decision on whether to use these specialized storage areas depends upon aspects of code execution that the compiler often cannot determine. As a result the burden is placed on the programmer to decide how to stage data.<br />Though making use of specialized storage and other GPU features is beyond the ability of current compilers for *any* type of program, it is feasible to do for specialized domains, including for what are called stencil calculations. Stencil calculations, are used to solve many important scientific and engineering problems, such as simulating black holes, neutron stars, exploring quantum cosmology, simulating fluids, and performing coastal simulations.</p> <p><br />The goal of the project was to develop a stencil framework, Chemora, that would allow a physicist or some other domain expert to code a stencil simulation in what is called a domain-specific language (DSL), and then run it on a GPU-accelerated cluster, and have its performance rival that of hand-tuned code. The use of the DSL makes it much easier for Chemora to generate code since Chemora knows much more about the movement of data than could be determined for an unconstrained language. Chemora can use all the kinds of specialized memory appearing on recent GPU accelerators (including shared, constant, and texture memory), and can transform calculations into pieces that each comfortably fit on the accelerator device. Chemora transforms a calculation based on a performance model of the device, in some cases optimizing certain rearrangements, in other cases using the model to choose among multiple candidates. Chemora operates in part when a program is run, which is when key information such as input data and system characteristics are first available. It takes advantage of this to generate highly efficient code.</p> <p><br />Chemora can generate efficient code for several GPU generations. Chemora has been updated as new accelerators become available. Programs coded in Chemora's DSL enjoy good performance on the new devices without any effort required on the part of the original programmers.</p> <p><br />The driver application for Chemora is a black hole simulation based on Einstein's equations. The application operates on a large number of quantities, something which introduces problems not encountered with simpler code. To accommodate this Chemora's model considers factors ignored by others, such as what is called register pressure. As a result, Chemora can efficiently run applications that may overwhelm other systems.<br />Future work will bring the Chemora research to production level, enabling scientists to make better use of computational resources and make new kinds of science possible in many areas that benefit humanity both directly and indirectly.</p> <p>&nbsp;</p> <br /> <p>&nbsp;</p><br> <p>            Last Modified: 11/29/2017<br>      Modified by: Steven&nbsp;Brandt</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The modern era of scientific code development is both a golden age and a dark age. It is a golden age because we have machines that can operate at unprecedented levels of performance. Unfortunately, it is also a dark age because these machines are becoming increasingly hard to program and use. This is due in part to power becoming a limiting resource, in response to which energy-efficient GPU computational accelerator designs have been introduced that omit energy-consuming niceties such as caches and predictors, replacing these with a baroque memory model and a requirement that programs be coded to follow a large number of threads of execution. Such accelerator designs demand much more effort from programmers to properly use, and programs must be re-tuned for each succeeding accelerator generation.   This need to re-tune is much less of a problem for CPUs, because features such as large caches and branch predictors enable compilers to generate good code without having to know, for example, how many times a piece of data will be accessed. GPU accelerators replace large caches with several types of storage, such as a high-speed scratchpad memory. The decision on whether to use these specialized storage areas depends upon aspects of code execution that the compiler often cannot determine. As a result the burden is placed on the programmer to decide how to stage data. Though making use of specialized storage and other GPU features is beyond the ability of current compilers for *any* type of program, it is feasible to do for specialized domains, including for what are called stencil calculations. Stencil calculations, are used to solve many important scientific and engineering problems, such as simulating black holes, neutron stars, exploring quantum cosmology, simulating fluids, and performing coastal simulations.   The goal of the project was to develop a stencil framework, Chemora, that would allow a physicist or some other domain expert to code a stencil simulation in what is called a domain-specific language (DSL), and then run it on a GPU-accelerated cluster, and have its performance rival that of hand-tuned code. The use of the DSL makes it much easier for Chemora to generate code since Chemora knows much more about the movement of data than could be determined for an unconstrained language. Chemora can use all the kinds of specialized memory appearing on recent GPU accelerators (including shared, constant, and texture memory), and can transform calculations into pieces that each comfortably fit on the accelerator device. Chemora transforms a calculation based on a performance model of the device, in some cases optimizing certain rearrangements, in other cases using the model to choose among multiple candidates. Chemora operates in part when a program is run, which is when key information such as input data and system characteristics are first available. It takes advantage of this to generate highly efficient code.   Chemora can generate efficient code for several GPU generations. Chemora has been updated as new accelerators become available. Programs coded in Chemora's DSL enjoy good performance on the new devices without any effort required on the part of the original programmers.   The driver application for Chemora is a black hole simulation based on Einstein's equations. The application operates on a large number of quantities, something which introduces problems not encountered with simpler code. To accommodate this Chemora's model considers factors ignored by others, such as what is called register pressure. As a result, Chemora can efficiently run applications that may overwhelm other systems. Future work will bring the Chemora research to production level, enabling scientists to make better use of computational resources and make new kinds of science possible in many areas that benefit humanity both directly and indirectly.               Last Modified: 11/29/2017       Submitted by: Steven Brandt]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
