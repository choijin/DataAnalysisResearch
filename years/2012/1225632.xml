<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SBIR Phase I:  weCompute Content Authoring System: Facilitating User-Created Content in an Intelligent Tutoring System</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>12/31/2011</AwardEffectiveDate>
<AwardExpirationDate>12/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>49130.00</AwardTotalIntnAmount>
<AwardAmount>49130</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07070000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>IIP</Abbreviation>
<LongName>Div Of Industrial Innovation &amp; Partnersh</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Glenn H. Larsen</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This Small Business Innovation Research (SBIR) Phase I project focuses on the creation of a Teacher Content Authoring System for an Intelligent Tutoring System designed for math, science, and computer science education.  Intelligent Tutoring Systems (ITS) are becoming an increasingly larger part of the education landscape. EDalytics, LLC is developing a Content Authoring System that allows teachers to integrate their own content into the cognitive modeling architecture of the ITS for computational thinking.  The weCompute ITS (wITS) Content Authoring System offers a new perspective to the ITS community, and potentially transform the ways that commercial companies and research institutions approach content creation.  The research plan is constructed to solicit teachers? feedback throughout the design stages to ensure their needs are met. This SBIR project focuses on teachers? ability to transform meaningful content that can be easily integrated with pre-created content models in an intelligent tutoring system.  An iterative development process including user studies will help tie together content authors and software designers to produce a well-balanced product.  Overall, the wITS Content Authoring System has the potential to make content authoring a distributed task in tutoring environments.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;The broader impact/commercial potential of this project is an educational tool that will build an effective pedagogical system for STEM educators that is affordable and accessible to schools and students across the economic spectrum. A major drawback in developing intelligent tutoring systems (ITS) is the enormous investment in expert hours required to build a full library of curriculum content. Ultimately, the customers pay for the ITS publishers to recoup their investment, yet they have no way to adapt that content to their specific needs. Our solution - the the weCompute Content Authoring System - addresses both of these obstacles by improving the weCompute Intelligent Tutoring System (wITS) with a tool that educators and students can afford and modify. In addition, the wITS provides more pedagogical support for schools lacking teachers knowledgeable in the emerging content areas that define 21st century skills. Students will enjoy effective individualized instruction on subjects at low cost, since the curriculum development cost is subsidized by leveraging the power of teachers who already create curriculum materials. The decreased cost of development coupled with the inexpensive web-based delivery mechanism will allow for more content hours and wider dissemination of quality instruction.</AbstractNarration>
<MinAmdLetterDate>02/25/2012</MinAmdLetterDate>
<MaxAmdLetterDate>02/25/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1225632</AwardID>
<Investigator>
<FirstName>Christy</FirstName>
<LastName>McGuire</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christy L McGuire</PI_FULL_NAME>
<EmailAddress>christy@edalytics.com</EmailAddress>
<PI_PHON>4124487667</PI_PHON>
<NSF_ID>000518351</NSF_ID>
<StartDate>02/25/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Tutor Technologies, inc.</Name>
<CityName>Pittsburgh</CityName>
<ZipCode>152082911</ZipCode>
<PhoneNumber>4124487667</PhoneNumber>
<StreetAddress>7441 Ben Hur Street</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>967846473</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TUTOR TECHNOLOGIES, INC.</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Tutor Technologies]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152063937</ZipCode>
<StreetAddress><![CDATA[242 S. Highland Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>5371</Code>
<Text>SBIR Phase I</Text>
</ProgramElement>
<ProgramReference>
<Code>110E</Code>
<Text>EDUCATION RESEARCH</Text>
</ProgramReference>
<ProgramReference>
<Code>5371</Code>
<Text>SMALL BUSINESS PHASE I</Text>
</ProgramReference>
<ProgramReference>
<Code>8031</Code>
<Text>Education Products</Text>
</ProgramReference>
<ProgramReference>
<Code>8032</Code>
<Text>Software Services and Applications</Text>
</ProgramReference>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2011~49130</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Abstract</p> <p>&nbsp;</p> <p>We built an Authoring System to enhance and expand the functionality of our Intelligent Tutoring System (ITS), CodeTrainer. Through exploratory and experimental testing, we confirmed some design decisions and improved upon others. We examined teachers&rsquo; understanding of content development for an ITS, as well as optimal interface design for authoring.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>Background</p> <p>&nbsp;</p> <p>Intelligent Tutoring Systems (ITS) have the potential to provide rich and effective instruction: delivering some of the benefits of a personal tutor to the vast majority of students who are not in a position to afford to hire them, and providing support for under-qualified teachers, especially those in grades K-12 who are required to teach out-of-field -- a practice that is rampant in STEM subjects (Gal-Ezer, 2009). ITSs are set apart from other forms of education software by the elaborate network of theoretically-grounded cognitive models that evaluate and represent student learning in real time. These models allow the system to scaffold students&rsquo; learning experiences according to minutely differentiated abilities (Ainsworth et al., 2003; Aleven 2006; Blessing 1997; Kodaganallur et al., 2004; Roselli et al., 2008). Despite their effectiveness, the enormous development expense and expertise required to build an ITS deters most educational software developers from providing intelligent feedback (Anderson, 1993; Murray, 2003). Material used in an ITS must be representable in a model of the discipline, and secondly, an ITS requires that the actions which a student takes in the context of the material be representable in a cognitive model of the student, requiring authors of ITS curriculum to work with cognitive scientists and/or understand those models. This requirement encumbers development and thus, building an ITS is more feasible in domains that change little over the years and have a high volume of usage (e.g., algebra) than in those that change rapidly and/or have a smaller volume of usage (e.g., computer science).</p> <p>&nbsp;</p> <p>With the support of the NSF Phase I SBIR grant, we addressed these obstacles &ndash; development and expertise - by designing, developing, and experimenting with an integrated authoring tool to facilitate the process of acquiring expert pedagogical content for an ITS. We refer to the authoring tool proper - which is, at its core, a representation of the pedagogical content and its interface - as the <em>weCompute Content Authoring System (weCAS)</em>.</p> <p>&nbsp;</p> <p>We chose the domain of computer science - specifically first-year computer science education - as the pedagogical context on which we based our research because of the immediate applicability and the high need in the marketplace. We believe that by developing a way for teachers to easily provide meaningful contributions to an ITS, that we could expand the feasibility of a system to more learning domains. The <em>content </em>in this case targeted &nbsp;Introductory Java programming problems: a problem setup and question, hints, feedback, as well as meta-data about the concepts (or skills) that would allow the system to situate the content within the domain and cognitive student models.</p> <p>&nbsp;</p> <p>The Research Questions we addressed:</p> <p>&nbsp;</p> <p>1. Can teachers understand the relationship between skills and content required by an ITS, and develop content with that paradigm in mind?</p> <p>&nbsp;</p> <p>2. What are the appropriate interface components for a teacher/content authoring system</p> <p>&nbsp;</p> <p>3. Will teachers be willing to share content they produced, and will they trust shared content from other users of the same ITS?</p> <p>&nbsp;</p> <p>4. What are the key usability issues with the interface design?</p> <p>&nbsp;</p> <p>Our investigations consisted of a pilot study and two...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Abstract     We built an Authoring System to enhance and expand the functionality of our Intelligent Tutoring System (ITS), CodeTrainer. Through exploratory and experimental testing, we confirmed some design decisions and improved upon others. We examined teachersÆ understanding of content development for an ITS, as well as optimal interface design for authoring.        Background     Intelligent Tutoring Systems (ITS) have the potential to provide rich and effective instruction: delivering some of the benefits of a personal tutor to the vast majority of students who are not in a position to afford to hire them, and providing support for under-qualified teachers, especially those in grades K-12 who are required to teach out-of-field -- a practice that is rampant in STEM subjects (Gal-Ezer, 2009). ITSs are set apart from other forms of education software by the elaborate network of theoretically-grounded cognitive models that evaluate and represent student learning in real time. These models allow the system to scaffold studentsÆ learning experiences according to minutely differentiated abilities (Ainsworth et al., 2003; Aleven 2006; Blessing 1997; Kodaganallur et al., 2004; Roselli et al., 2008). Despite their effectiveness, the enormous development expense and expertise required to build an ITS deters most educational software developers from providing intelligent feedback (Anderson, 1993; Murray, 2003). Material used in an ITS must be representable in a model of the discipline, and secondly, an ITS requires that the actions which a student takes in the context of the material be representable in a cognitive model of the student, requiring authors of ITS curriculum to work with cognitive scientists and/or understand those models. This requirement encumbers development and thus, building an ITS is more feasible in domains that change little over the years and have a high volume of usage (e.g., algebra) than in those that change rapidly and/or have a smaller volume of usage (e.g., computer science).     With the support of the NSF Phase I SBIR grant, we addressed these obstacles &ndash; development and expertise - by designing, developing, and experimenting with an integrated authoring tool to facilitate the process of acquiring expert pedagogical content for an ITS. We refer to the authoring tool proper - which is, at its core, a representation of the pedagogical content and its interface - as the weCompute Content Authoring System (weCAS).     We chose the domain of computer science - specifically first-year computer science education - as the pedagogical context on which we based our research because of the immediate applicability and the high need in the marketplace. We believe that by developing a way for teachers to easily provide meaningful contributions to an ITS, that we could expand the feasibility of a system to more learning domains. The content in this case targeted  Introductory Java programming problems: a problem setup and question, hints, feedback, as well as meta-data about the concepts (or skills) that would allow the system to situate the content within the domain and cognitive student models.     The Research Questions we addressed:     1. Can teachers understand the relationship between skills and content required by an ITS, and develop content with that paradigm in mind?     2. What are the appropriate interface components for a teacher/content authoring system     3. Will teachers be willing to share content they produced, and will they trust shared content from other users of the same ITS?     4. What are the key usability issues with the interface design?     Our investigations consisted of a pilot study and two iterations of design-and-experiment. Each of the studies was constructed to delve into both the essential interface components of such an authoring tool as well as the affective reasons that would motivate teachers to use the tool and/or contribute to the shared content. For example, what type...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
