<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Typed Self-Application</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>02/28/2018</AwardExpirationDate>
<AwardTotalIntnAmount>493612.00</AwardTotalIntnAmount>
<AwardAmount>493612</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Static type checking has brought us more reliable software.  Types make programs more readable, prevent entire classes of mistakes, and help compilers optimize data layout and data access.  Types also make it easier to use libraries and to design interfaces, and they make it harder to misuse data and write bad programs.  An entirely different trend is as old as programming: self-application.  In particular, self-application is popular in the form of implementing a language in itself.  When the trends of types and self-application meet, a fundamental challenge for type systems arises.  For example, what is the type of an interpreter that can interpret a representation of itself?  And what is the type of a compiler that can compile a representation of itself?  The goal of the project is to enable the next generation of typed, self-applicable interpreters, compilers, and partial evaluators.  This next generation will guarantee that the output represents a typed program, and that the type of the output program is related to the type of the input program.  The result will be self-applicable meta-programs that are more reliable and have all the benefits of static type checking.&lt;br/&gt;&lt;br/&gt;Many popular languages have a self-interpreter, that is, an interpreter for the language written in itself; examples include Standard ML, Haskell, Scheme, JavaScript, Python, and Ruby.  Similarly, many languages have self-compilers, that is, a compiler for the language written in itself.  Also, some languages have a virtual machine written in itself, including Java and Self.  The project will bring static type checking to self-applicable interpreters, compilers, and partial evaluators, and take such meta-programs to a higher level of reliability by ensuring that the output programs type check and therefore cannot contain entire classes of mistakes.  The investigator will teach the results to students as part of existing undergraduate and graduate courses.</AbstractNarration>
<MinAmdLetterDate>07/10/2012</MinAmdLetterDate>
<MaxAmdLetterDate>07/10/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1219240</AwardID>
<Investigator>
<FirstName>Jens</FirstName>
<LastName>Palsberg</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jens Palsberg</PI_FULL_NAME>
<EmailAddress>palsberg@ucla.edu</EmailAddress>
<PI_PHON>3108256320</PI_PHON>
<NSF_ID>000105676</NSF_ID>
<StartDate>07/10/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Los Angeles</Name>
<CityName>LOS ANGELES</CityName>
<ZipCode>900951406</ZipCode>
<PhoneNumber>3107940102</PhoneNumber>
<StreetAddress>10889 Wilshire Boulevard</StreetAddress>
<StreetAddress2><![CDATA[Suite 700]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA33</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>092530369</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, LOS ANGELES</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[UCLA Computer Science]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900951596</ZipCode>
<StreetAddress><![CDATA[4531K Boelter Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA33</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~493612</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The project produced three big jumps forward in how to do typed meta-programming. &nbsp;First, it showed that a piece of conventional wisdom is wrong and went ahead and defined a self-interpreter for a terminating functional language. This was previously thought to be impossible because of the presence of a so-called diagonalization gadget. &nbsp;The key to the new result is to use a well-known type system to ensure that such diagonalization gadgets are impossible. Second, the project showed how to define typed self-interpreters, self-evaluators, and self-applicable partial evaluators. &nbsp;The foundation for those programs is a new approach to representing a typed program as a typed data structure. &nbsp;The results open the door to a new era in which types go from being good for programmers to also being good for meta-programmers. &nbsp;Third, the project created<span>&nbsp;the first Jones-optimal and self-applicable partial evaluator whose type guarantees that it always generates type-correct code. &nbsp;Together those properties guarantee efficiency, versatility, and quality, via good design and by automatically type checking the partial evaluator. &nbsp;In summary, the results of the project point to a future in which programmers may prefer to write self-applicable meta-programs in typed languages. &nbsp;This will contribute to a more reliable software infrastructure in society.</span></p><br> <p>            Last Modified: 05/04/2018<br>      Modified by: Jens&nbsp;Palsberg</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The project produced three big jumps forward in how to do typed meta-programming.  First, it showed that a piece of conventional wisdom is wrong and went ahead and defined a self-interpreter for a terminating functional language. This was previously thought to be impossible because of the presence of a so-called diagonalization gadget.  The key to the new result is to use a well-known type system to ensure that such diagonalization gadgets are impossible. Second, the project showed how to define typed self-interpreters, self-evaluators, and self-applicable partial evaluators.  The foundation for those programs is a new approach to representing a typed program as a typed data structure.  The results open the door to a new era in which types go from being good for programmers to also being good for meta-programmers.  Third, the project created the first Jones-optimal and self-applicable partial evaluator whose type guarantees that it always generates type-correct code.  Together those properties guarantee efficiency, versatility, and quality, via good design and by automatically type checking the partial evaluator.  In summary, the results of the project point to a future in which programmers may prefer to write self-applicable meta-programs in typed languages.  This will contribute to a more reliable software infrastructure in society.       Last Modified: 05/04/2018       Submitted by: Jens Palsberg]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
