<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:Small: Bringing Extensibility and Performance to Verified Compilers</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2012</AwardEffectiveDate>
<AwardExpirationDate>09/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The compiler is a tool that is central to the development of software.  Its role is to translate the human-readable code written by a programmer into machine code that a computer can understand.  Because the compiler creates the actual machine code that runs on the computer, a faulty compiler can lead to catastrophic failures, including errors in medical devices, in fly-by-wire aviation software, and in automotive systems.  This research will lead to more reliable compilers, which in the end will increase our confidence in the software that has now become ubiquitous and safety-critical in our daily lives.&lt;br/&gt;&lt;br/&gt;This project will develop new techniques for building compilers to ensure the utmost level of rigor and reliability, so that we can know with certainty that the machine code running on the computer does exactly what the programmer intended it to do.  To achieve this goal, the principal investigator will investigate ways of using proof assistants to implement formally verified compilers.  More specifically, the research will explore techniques for making formally verified compilers like Compcert generate better code, so that they can be more competitive with mainstream compilers like GCC and LLVM.  Furthermore, the research will also investigate ways of decreasing the proof burden, so that verified compilers like Compcert can be developed and updated more easily.  In the end, this research will enable formally verified compilers to become more mainstream, so that they can used more broadly by programmers.</AbstractNarration>
<MinAmdLetterDate>08/29/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/29/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1219172</AwardID>
<Investigator>
<FirstName>Sorin</FirstName>
<LastName>Lerner</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sorin Lerner</PI_FULL_NAME>
<EmailAddress>lerner@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585348883</PI_PHON>
<NSF_ID>000068847</NSF_ID>
<StartDate>08/29/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930404</ZipCode>
<StreetAddress><![CDATA[9500 Gilman Dr.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~400000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>Intellectual merit:</strong>&nbsp;Compilers are tools that programmers use every day to create software. As a result, the quality and reliability of compilers is crucial. This project has produced three main intellectual outcomes related to compilers: (1) a mechanism for creating better and more reliable compilers through "verified peep-hole optimizations" (2) a mechanism for creating more reliable compilers for the emerging domain of "high-level synthesis" (3) a new and improved user interface for proof assistants, one of the tools that we have been using to make better compilers.</p> <p><strong>Broader impacts:</strong></p> <p>(1) This project supported the PhD education of Zachary Tatlock, and contributed to launching his academic career.&nbsp;Zachary Tatlock is now an Assistant Professor at the University of Washington.</p> <p>(2) This project provided education for graduate and undergraduate students on advanced software engineering topics like software correctness. Training the next generation of software developers in these advanced topics is crucial to building the software infrastructure of tomorrow in a way that is correct, reliable and secure.</p> <p>(3) By creating better compilers using proof assistant and better techniques for using proof assistants, this project will in the long run lead to broader adoption of foundationally verified software in proof assistants, which in turn will lead to safer and more secure software for all users of computing devices.</p><br> <p>            Last Modified: 12/30/2016<br>      Modified by: Sorin&nbsp;Lerner</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Intellectual merit: Compilers are tools that programmers use every day to create software. As a result, the quality and reliability of compilers is crucial. This project has produced three main intellectual outcomes related to compilers: (1) a mechanism for creating better and more reliable compilers through "verified peep-hole optimizations" (2) a mechanism for creating more reliable compilers for the emerging domain of "high-level synthesis" (3) a new and improved user interface for proof assistants, one of the tools that we have been using to make better compilers.  Broader impacts:  (1) This project supported the PhD education of Zachary Tatlock, and contributed to launching his academic career. Zachary Tatlock is now an Assistant Professor at the University of Washington.  (2) This project provided education for graduate and undergraduate students on advanced software engineering topics like software correctness. Training the next generation of software developers in these advanced topics is crucial to building the software infrastructure of tomorrow in a way that is correct, reliable and secure.  (3) By creating better compilers using proof assistant and better techniques for using proof assistants, this project will in the long run lead to broader adoption of foundationally verified software in proof assistants, which in turn will lead to safer and more secure software for all users of computing devices.       Last Modified: 12/30/2016       Submitted by: Sorin Lerner]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
