<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: On the identification of collections with complex objectives</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2013</AwardEffectiveDate>
<AwardExpirationDate>02/29/2020</AwardExpirationDate>
<AwardTotalIntnAmount>499976.00</AwardTotalIntnAmount>
<AwardAmount>499976</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sylvia Spengler</SignBlockName>
<PO_EMAI>sspengle@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In many domains, there is an increasing reliance on Recommender Systems for helping identify products, services and people that meet some user-specified criteria. Given a pool of entities (e.g., movies, books, experts) and an objective function such systems have to identify a collection (i.e., a subset) of entities  from the pool that optimizes the objective function. For example, in movie-recommendation systems (e.g., Netflix)  the goal is to identify subsets of movies to recommend to registered users.  Analogous problems arise in social networks and social media (e.g., Twitter, Facebook), where advertisers need to identify a small set of targets for their advertisements. Finally, project management teams in large organizations often use expertise management systems to identify the subset of experts needed to complete a specific project.&lt;br/&gt;&lt;br/&gt;Current Recommender Systems suffer from severe limitations in settings where (i) the users multiple interactions with the system over time and the recommendations provided to a specific user at any given time need to take into account the past recommendations given to the same user or (ii) The entities that make up the recommended collections are  rational entities, e.g., participants in a social network, or members of a project team, that have their own goals and preferences that influence their behavior as members of the collection. This project  aims to address  these two shortcomings of current Recommender Systems by designing, implementing, and evaluating combinatorial algorithms for identifying (a) sequences of collections, rather than a single collection and (b) collections of rational entities with individual goals, preferences, or objectives.&lt;br/&gt;&lt;br/&gt;In addition to developing a suite of novel combinatorial algorithms and heuristics for recommending sequences of collections and collections of rational entities, the project aims to develop and deploy two application-specific testbeds: (i) a personalized meal planner provides to its users weekly meal recommendations to guide them towards healthy eating choices; and (ii) A crowdsourcing platform with support for virtual team formation to allow students registered in some of the courses at Boston University, to form teams online to collaborate on class projects (when appropriate).  &lt;br/&gt;&lt;br/&gt;Broader impacts of this research include: new models and methods that signficantly advance the current state of the art in Recommender Systems, with broad applications in a number of domains including social networks (e.g., LinkedIn, Facebook, etc.), online recommendation systems  (e.g., Amazon, Netflix, etc.), and daily-deal sites (e.g., Groupon, LivingSocial, etc.). The project contributes to the education and advanced research-based training of graduate and undergraduate students in Computer Science at Boston University. Wide dissemination of software implementations of the algorithms can be expected to benefit the larger research community.&lt;br/&gt;&lt;br/&gt;Additional information about the project, including links to project personnel, publications, and software can be found at: http://www.cs.bu.edu/~evimaria/recommendations.html</AbstractNarration>
<MinAmdLetterDate>02/20/2013</MinAmdLetterDate>
<MaxAmdLetterDate>04/19/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1253393</AwardID>
<Investigator>
<FirstName>Evimaria</FirstName>
<LastName>Terzi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Evimaria Terzi</PI_FULL_NAME>
<EmailAddress>evimaria@bu.edu</EmailAddress>
<PI_PHON>6173534365</PI_PHON>
<NSF_ID>000555223</NSF_ID>
<StartDate>02/20/2013</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Trustees of Boston University</Name>
<CityName>BOSTON</CityName>
<ZipCode>022151300</ZipCode>
<PhoneNumber>6173534365</PhoneNumber>
<StreetAddress>881 COMMONWEALTH AVE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049435266</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF BOSTON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049435266</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Trustees of Boston University]]></Name>
<CityName>Boston</CityName>
<StateCode>MA</StateCode>
<ZipCode>022152411</ZipCode>
<StreetAddress><![CDATA[111 Cummington Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~75117</FUND_OBLG>
<FUND_OBLG>2014~105424</FUND_OBLG>
<FUND_OBLG>2015~109244</FUND_OBLG>
<FUND_OBLG>2016~113210</FUND_OBLG>
<FUND_OBLG>2017~96981</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p class="p1">Classical studies on Recommender systems focus on learning the user preferences and then recommending single items (e.g., movies, books, restaurants or connections in social networks, etc) that are aligned with these preferences.<span>&nbsp;</span></p> <p class="p2">&nbsp;</p> <p class="p1">However, the emergence of different platforms enable the systems to provide more complex recommendations: for example, when one visits a city and has specific time constraints and preferences for activities, it is important to build a system that recommends touristic routes.<span>&nbsp; </span>Similarly, when considering drivers in ride-sharing platforms (such as Uber, Lyft etc) it is interesting to recommend to these drivers routes so that they maximize their profits (both individually and as a group).<span>&nbsp; </span>In this project we focused on studying how to provide recommendations in such complex environments where there is interaction between the agents (e.g., ride-sharing drivers compete for rides) and the actual result of a recommendation is itself a complex object (e.g., a route for a tourist or a collection of routes throughout the day for a driver).</p> <p class="p2">&nbsp;</p> <p class="p1">As part of our studies we did both some data-analytic work that focuses on the identification of interesting patterns in user data as well as some fundamental algorithmic work for actually building recommendations.<span>&nbsp; </span>As an example of the former, we developed a framework that enabled us to find hot-spots in cities with respect to the visits they receive from tourists and locals.<span>&nbsp; </span>As an example of the latter, we developed an algorithmic framework for recommending items to users based on how many other users get the same recommendation and taking into consideration whether the value of the item increases or decreases with the number of users using it simultaneously.<span>&nbsp; </span>For example, the value of a concert decreases if there are not much people attending it, and the value of a restaurant also decreases if there are huge lines.</p> <p class="p2">&nbsp;</p> <p class="p1">Overall, we had the good fortune to work with a diverse set of application domains, which include social networks, restaurant recommender systems, urban data as collected by different social media as well as ride-hailing platforms. We believe that our studies provided application-specific insights, but also that our techniques are generalizable beyond the specific application domains.</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/17/2020<br>      Modified by: Evimaria&nbsp;Terzi</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Classical studies on Recommender systems focus on learning the user preferences and then recommending single items (e.g., movies, books, restaurants or connections in social networks, etc) that are aligned with these preferences.    However, the emergence of different platforms enable the systems to provide more complex recommendations: for example, when one visits a city and has specific time constraints and preferences for activities, it is important to build a system that recommends touristic routes.  Similarly, when considering drivers in ride-sharing platforms (such as Uber, Lyft etc) it is interesting to recommend to these drivers routes so that they maximize their profits (both individually and as a group).  In this project we focused on studying how to provide recommendations in such complex environments where there is interaction between the agents (e.g., ride-sharing drivers compete for rides) and the actual result of a recommendation is itself a complex object (e.g., a route for a tourist or a collection of routes throughout the day for a driver).   As part of our studies we did both some data-analytic work that focuses on the identification of interesting patterns in user data as well as some fundamental algorithmic work for actually building recommendations.  As an example of the former, we developed a framework that enabled us to find hot-spots in cities with respect to the visits they receive from tourists and locals.  As an example of the latter, we developed an algorithmic framework for recommending items to users based on how many other users get the same recommendation and taking into consideration whether the value of the item increases or decreases with the number of users using it simultaneously.  For example, the value of a concert decreases if there are not much people attending it, and the value of a restaurant also decreases if there are huge lines.   Overall, we had the good fortune to work with a diverse set of application domains, which include social networks, restaurant recommender systems, urban data as collected by different social media as well as ride-hailing platforms. We believe that our studies provided application-specific insights, but also that our techniques are generalizable beyond the specific application domains.          Last Modified: 07/17/2020       Submitted by: Evimaria Terzi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
