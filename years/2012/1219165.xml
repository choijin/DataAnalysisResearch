<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF Small: Language Support for Variation Maintenance</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>12/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>497728.00</AwardTotalIntnAmount>
<AwardAmount>497728</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Managing variation is an important part of software engineering. Many existing software projects can already generate a huge number of distinct programs that run on different platforms and provide different feature sets. Research on software product lines and feature-oriented software development has provided processes and tools for the development of massively configurable software, suggesting that the variability of software systems will only continue to grow. A currently largely unsolved problem is how to systematically transform variation representations to support the creation, refactoring, and migration of variation, as wall as the analysis and querying of variation-rich software repositories. The objective of this research is to investigate the systematic transformation of variation structures and develop language support for it. &lt;br/&gt;&lt;br/&gt;The following technical approach is pursued. First, gathering variation programming tasks will provide a basis for the understanding of the nature and extent of variation transformations, and assembling a catalog of such tasks will aid the design, evaluation, and comparison of variation languages. Second, the definition of the syntax and semantics of a transformational choice calculus, which extends the (representational) choice calculus with computational features, will support the investigation of formal properties of variation programming. Third, the development of a variation type system facilitates the characterization of different kinds of changes and evolutions of variational structures. Moreover, the development of a variation module system will provide an interface between low-level details required by the intricate scoping and binding issues of the choice calculus representation and a more high-level, declarative view of variations. Finally, the design of a domain-specific embedded language for variation programming will allow the easy description of transformations of variation structures in software artifacts. It also supports the experimentation with variation transformations. Since the scope of this research extends beyond professional software and covers also end-user programming systems, such as spreadsheets, the developed methods will be applicable in a wide variety of contexts and can thus empower millions of users to handle variation in a more systematic way.</AbstractNarration>
<MinAmdLetterDate>08/29/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/29/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1219165</AwardID>
<Investigator>
<FirstName>Martin</FirstName>
<LastName>Erwig</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Martin Erwig</PI_FULL_NAME>
<EmailAddress>erwig@oregonstate.edu</EmailAddress>
<PI_PHON>5417378893</PI_PHON>
<NSF_ID>000434059</NSF_ID>
<StartDate>08/29/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Oregon State University</Name>
<CityName>Corvallis</CityName>
<ZipCode>973318507</ZipCode>
<PhoneNumber>5417374933</PhoneNumber>
<StreetAddress>OREGON STATE UNIVERSITY</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>053599908</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OREGON STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053599908</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Oregon State University]]></Name>
<CityName>Corvallis</CityName>
<StateCode>OR</StateCode>
<ZipCode>973315501</ZipCode>
<StreetAddress><![CDATA[1148 Kelley Engineering Center]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~497728</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The most important outcomes of this research are two methods for improving type checking and a programming calculus for handling variational software. Both contributions are based on a representation of software variation as choices.&nbsp;</p> <p>First, we were able to design and implement a new approach to type inference, called <em>counter-factual typing</em>, that produces more accurate error messages than existing approaches. Given a program that contains a type error, this approach systematically creates choices between existing program elements and hypothetical replacements for them. Using the method of variational type inference, counter-factual typing then produces a comprehensive set of change suggestions, each of which could fix the type error. This approach is based on representing the type of an existing program part and its replacement as a choice type. The general idea is to contemplate what the type of a program would be if one or more program elements were substituted by their hypothetical replacements. Additionally, we developed a method called <em>guided type debugging</em> that builds on counter-factual typing and helps it converge on correct suggestions faster by interactively eliciting type specifications from the user during the type debugging process.</p> <p>Second, we were able to design a new type inference algorithm for so-called generalized algebraic data types (GADTs), which are an important element of modern functional programming languages. Our developed GADT type system is the first that is based on the traditional Hindley/Milner type system (a de facto standard) that can produce so-called principal types, which are generic types from which all valid types of a program can be instantiated. Our method significantly outperforms previous approaches in terms of precision. The key to its success was the extension of the type language by choice types.</p> <p>Both counter-factual typing and GADT type inference are contributions to science since they present new approaches for program analysis that expand the state-of-the-art knowledge about the problem of&nbsp;type inference. These approaches can also be applied to a variety of other program analysis problems. The approaches are also a contribution to software engineering since they support programmers in finding and fixing errors in programs.</p> <p>Third, we have developed a calculus for variational programming, called <em>VPC</em>, for analyzing and manipulating software that contains variability (for example, in the form of #ifdef statements). The design of VPC supports automatic variation-&shy;preserving computations as well as variation elimination and aggregation. We have developed a sound type system for VPC together with a constraint-based type inference algorithm that is sound, complete, and principal. The design of VPC has contributed important insights into the problem of programming with variational software artifacts.</p> <p>In summary, this research has successfully employed the variation representation offered by the choice calculus to improve the effectiveness and accuracy of type checking in programming languages. Moreover, this research has produced results and insights about variational programming. The project has supported <em>three high school students</em> for summer internships in the context of Saturday Academy's ASE program. Moreover, <em>six graduate students</em>, half of them female, have been involved in the research for this project. Three of the students have successfully completed their MS degrees. One student has completed his PhD degree and is now employed on a tenure-track position. The other two students are on track to completing their degrees soon.</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/16/2017<br>      Modified by: Martin&nbsp;Erwig</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The most important outcomes of this research are two methods for improving type checking and a programming calculus for handling variational software. Both contributions are based on a representation of software variation as choices.   First, we were able to design and implement a new approach to type inference, called counter-factual typing, that produces more accurate error messages than existing approaches. Given a program that contains a type error, this approach systematically creates choices between existing program elements and hypothetical replacements for them. Using the method of variational type inference, counter-factual typing then produces a comprehensive set of change suggestions, each of which could fix the type error. This approach is based on representing the type of an existing program part and its replacement as a choice type. The general idea is to contemplate what the type of a program would be if one or more program elements were substituted by their hypothetical replacements. Additionally, we developed a method called guided type debugging that builds on counter-factual typing and helps it converge on correct suggestions faster by interactively eliciting type specifications from the user during the type debugging process.  Second, we were able to design a new type inference algorithm for so-called generalized algebraic data types (GADTs), which are an important element of modern functional programming languages. Our developed GADT type system is the first that is based on the traditional Hindley/Milner type system (a de facto standard) that can produce so-called principal types, which are generic types from which all valid types of a program can be instantiated. Our method significantly outperforms previous approaches in terms of precision. The key to its success was the extension of the type language by choice types.  Both counter-factual typing and GADT type inference are contributions to science since they present new approaches for program analysis that expand the state-of-the-art knowledge about the problem of type inference. These approaches can also be applied to a variety of other program analysis problems. The approaches are also a contribution to software engineering since they support programmers in finding and fixing errors in programs.  Third, we have developed a calculus for variational programming, called VPC, for analyzing and manipulating software that contains variability (for example, in the form of #ifdef statements). The design of VPC supports automatic variation-&shy;preserving computations as well as variation elimination and aggregation. We have developed a sound type system for VPC together with a constraint-based type inference algorithm that is sound, complete, and principal. The design of VPC has contributed important insights into the problem of programming with variational software artifacts.  In summary, this research has successfully employed the variation representation offered by the choice calculus to improve the effectiveness and accuracy of type checking in programming languages. Moreover, this research has produced results and insights about variational programming. The project has supported three high school students for summer internships in the context of Saturday Academy's ASE program. Moreover, six graduate students, half of them female, have been involved in the research for this project. Three of the students have successfully completed their MS degrees. One student has completed his PhD degree and is now employed on a tenure-track position. The other two students are on track to completing their degrees soon.          Last Modified: 01/16/2017       Submitted by: Martin Erwig]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
