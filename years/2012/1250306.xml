<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Powerful User Interfaces for Interactive Theorem Proving</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>99791.00</AwardTotalIntnAmount>
<AwardAmount>99791</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software's increasing role in aviation, medical devices, and other safety- and mission-critical tasks is driving a major research effort in software verification, in both academia and industry. This effort involves proving, using formal mathematical methods, that software does what its authors intend it to do. Interactive theorem provers (ITPs) are a key tool in software verification, enabling users to create complex proofs of deep properties beyond the reach of automated provers. In spite of the increasing need for their use, ITPs have limited user interfaces that have hardly evolved in the past 20 years. This makes it difficult for novices to begin using these tools, and limits the productivity of experts. The objective of this research is to design, develop, and evaluate powerful user interfaces for ITPs. The resulting user interfaces will be made freely available to the public as open-source code.&lt;br/&gt;&lt;br/&gt;The hypothesis is that a novel ITP user interface that addresses ITP users' information needs through advanced editing techniques will enable novices to prove theorems and understand proofs more quickly and accurately than current ITP user interfaces, and increase productivity for experienced users. Advanced editing techniques will include inference rule and complex syntax visualization and manipulation, as well as proof previews. Together, these techniques will enable users to understand how proofs evolve, more easily read complex formulas, and quickly explore ways of advancing a proof. The hypothesis will be tested using Coq, a widely adopted ITP. The evaluation of the advanced editing techniques will include a comparison with a widely used ITP user interface in terms of efficiency for completing and understanding proofs. Successfully applying modern human-computer interaction techniques to interactive theorem provers will result in a major step forward in the usability and applicability of ITPs. This in turn will help facilitate the increased use of formal methods and verification in academic research, but also with industrial applications. Likewise, it will provide a useful tool for teaching software verification courses by helping students concentrate on proving theorems instead of focusing their attention on how to interact with software. Project results will be disseminated by submission to venues in human-computer interaction and interactive theorem provers.</AbstractNarration>
<MinAmdLetterDate>08/27/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/27/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1250306</AwardID>
<Investigator>
<FirstName>Aaron</FirstName>
<LastName>Stump</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Aaron D Stump</PI_FULL_NAME>
<EmailAddress>aaron-stump@uiowa.edu</EmailAddress>
<PI_PHON>3193840093</PI_PHON>
<NSF_ID>000241804</NSF_ID>
<StartDate>08/27/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Juan Pablo</FirstName>
<LastName>Hourcade</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Juan Pablo Hourcade</PI_FULL_NAME>
<EmailAddress>juanpablo-hourcade@uiowa.edu</EmailAddress>
<PI_PHON>3193352123</PI_PHON>
<NSF_ID>000241963</NSF_ID>
<StartDate>08/27/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Iowa</Name>
<CityName>IOWA CITY</CityName>
<ZipCode>522421320</ZipCode>
<PhoneNumber>3193352123</PhoneNumber>
<StreetAddress>2 GILMORE HALL</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>062761671</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF IOWA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>062761671</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Iowa]]></Name>
<CityName>Iowa City</CityName>
<StateCode>IA</StateCode>
<ZipCode>522421320</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~99791</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software is increasingly being used in critical systems including avionics and healthcare devices. In such systems, mistakes in software implementation could cost lives. While extensive testing can help, the only way to guarantee that these systems are mistake-free is to develop mathematical proofs that the implementations are correct. The most advanced tools for developing these proofs are called interactive theorem provers. They enable computer scientists to prove that software implementations are correct, and can also be used in other fields where mathematical proofs are used, such as mathematics and physics.</p> <p>&nbsp;</p> <p>One of the main barriers to having more software proved to be implemented correctly is that interactive theorem provers are difficult to use. This makes it an expensive activity, both because there are few people who are able to use interactive theorem provers, and because even if they are experts, most proofs can take a significant amount of time to develop.</p> <p>&nbsp;</p> <p>Through this grant, we developed novel user interfaces intended to help novices more quickly get up-to-speed with interactive theorem provers, and experts be more efficient. In terms of software for novices, we developed open source plug-ins for the free cross-platform integrated development environment JEdit. In an evaluation with novice users we found that our novel user interfaces enabled them to complete proofs more quickly, and better interpret existing proofs when compared to a standard user interface for a widely used interactive theorem prover.</p> <p>&nbsp;</p> <p>We also developed a novel user interface to help experts learn keyboard shortcuts, something that can increase efficiency when using text-based user interfaces, such as interactive theorem provers, and integrated development environments for software development. Our innovation, Keyboard-Card Menus, visually displays shortcuts mapped onto a keyboard on the screen, taking advantage of the large displays currently available. In an evaluation we conducted, users were able to learn shortcuts more quickly when using Keyboard-Card Menus than when using standard pull-down menus.</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/10/2014<br>      Modified by: Juan Pablo&nbsp;Hourcade</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software is increasingly being used in critical systems including avionics and healthcare devices. In such systems, mistakes in software implementation could cost lives. While extensive testing can help, the only way to guarantee that these systems are mistake-free is to develop mathematical proofs that the implementations are correct. The most advanced tools for developing these proofs are called interactive theorem provers. They enable computer scientists to prove that software implementations are correct, and can also be used in other fields where mathematical proofs are used, such as mathematics and physics.     One of the main barriers to having more software proved to be implemented correctly is that interactive theorem provers are difficult to use. This makes it an expensive activity, both because there are few people who are able to use interactive theorem provers, and because even if they are experts, most proofs can take a significant amount of time to develop.     Through this grant, we developed novel user interfaces intended to help novices more quickly get up-to-speed with interactive theorem provers, and experts be more efficient. In terms of software for novices, we developed open source plug-ins for the free cross-platform integrated development environment JEdit. In an evaluation with novice users we found that our novel user interfaces enabled them to complete proofs more quickly, and better interpret existing proofs when compared to a standard user interface for a widely used interactive theorem prover.     We also developed a novel user interface to help experts learn keyboard shortcuts, something that can increase efficiency when using text-based user interfaces, such as interactive theorem provers, and integrated development environments for software development. Our innovation, Keyboard-Card Menus, visually displays shortcuts mapped onto a keyboard on the screen, taking advantage of the large displays currently available. In an evaluation we conducted, users were able to learn shortcuts more quickly when using Keyboard-Card Menus than when using standard pull-down menus.          Last Modified: 10/10/2014       Submitted by: Juan Pablo Hourcade]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
