<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Medium: Collaborative Proposal: Safety in Numbers: Crowdsourcing for Global Software Integrity</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2012</AwardEffectiveDate>
<AwardExpirationDate>09/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>398867.00</AwardTotalIntnAmount>
<AwardAmount>406867</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Ralph Wachter</SignBlockName>
<PO_EMAI>rwachter@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The recent explosion in malware poses financial, privacy, and safety risks. This project explores a fundamentally new approach to malware detection that promises to be faster, more effective, and cheaper than current tools.&lt;br/&gt;&lt;br/&gt;The evolution of malicious software, or malware, has seen increases in both malware's capabilities and sheer volume. Recent malware makes use of a number of sophisticated technologies including polymorphism, public key encryption, and peer-to-peer architectures. These advances are driven by significant resources put into malware development by both criminal enterprises and countries.  Traditional malware detection tools rely on slow manual processes and the recent advances in malware have outrun the ability of existing tools to cope.&lt;br/&gt;&lt;br/&gt;This project uses a new approach to the malware crisis that centers around constructive use of crowd-sourcing. The key insight is that the collection of machines on the Internet contains information that can be used to automatically classify software as either legitimate or malicious.  This information includes not only the behavior of malware on individual machines but also the behavior of the aggregate population.  For example, the aggregate statistics of how software propagates across the network can provide insight into whether the software is malicious.&lt;br/&gt;&lt;br/&gt;A key component of the proposed work is binary translation-based dynamic signatures.  Traditional malware detection tools have used static signatures, but polymorphic techniques have made this approach significantly more difficult.  The project employs binary translation to efficiently collect dynamic traces for both code execution and behavioral events such as network communication and then generate signatures for these traces.&lt;br/&gt;&lt;br/&gt;The project significantly reduces the threats of malware to society, especially since software developed through the project is freely available.  The project is mentoring members of underrepresented minorities, and is infusing its ideas into the curriculum.</AbstractNarration>
<MinAmdLetterDate>08/13/2012</MinAmdLetterDate>
<MaxAmdLetterDate>05/29/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1228992</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Taylor</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael B Taylor</PI_FULL_NAME>
<EmailAddress>profmbt@cs.washington.edu</EmailAddress>
<PI_PHON/>
<NSF_ID>000069038</NSF_ID>
<StartDate>08/13/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930404</ZipCode>
<StreetAddress><![CDATA[9500 Gilman Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~398867</FUND_OBLG>
<FUND_OBLG>2013~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-ccfe96de-47d1-8fd1-96c2-af7a7c5388ca"> <p dir="ltr"><span>Software security is a major concern for modern computing systems. &nbsp;A major challenge is detecting whether a system has been compromised so that recovery actions can be undertaken to mitigate the security threat. &nbsp;Detecting compromised systems is difficult to the ability of attackers to make malware appear similar to normal software. &nbsp;Existing commercial approaches to detecting malware have significant manual components --- increasing cost and the time to detect malware.</span></p> <p dir="ltr"><span>The performed research explored whether it is possible to automatically learn the expected behaviors of normal software and detect attacks by monitoring a large number of normal executions and then detecting malware as deviations from the learnt expected behavior. &nbsp;There are several advantages to this approach. First, it requires minimal manual labor to identify malicious software. &nbsp;Second, it can quickly respond to novel attacks that have not been previously observed. &nbsp;Third, it can learn very tight specifications that allow minimal slack for attackers to exploit.</span></p> <p dir="ltr"><span>These results significantly advanced knowledge in the field of security, because prior to this research, the techniques used to monitor program execution could not efficiently handle dynamic code generation that is ubiquitous in modern applications. &nbsp;Second, the results show that it is possible to efficiently learn the expected behavior of even very large software applications with sufficient precision to filter the vast majority of program events and make it possible to remotely log any novel malicious behaviors.</span></p> <p dir="ltr"><span>Our results show that our techniques can also be applied to secure PHP-based web applications. &nbsp;The web application results show that little training is required and that attacks can be precisely detected with few false alarms.</span></p> <p dir="ltr"><span>We developed software for monitoring network traffic on mobile devices, thus increasing user&rsquo;s visibility into the mobile devices&rsquo; activity, improving data transparency and eventually putting users in control of their data. The prototype is available as an Android app as well as a library. </span></p> <p dir="ltr"><span>The broader impacts of the research include more secure software systems and an improvement in our society&rsquo;s ability to defend against malware attacks. &nbsp;Much future infrastructure depends on our ability to secure it against cyber attacks. &nbsp;The research provides techniques that are useful for constructing more secure software systems.</span></p> <div><span><br /></span></div> </span></p> <p>&nbsp;</p><br> <p>            Last Modified: 12/28/2016<br>      Modified by: Michael&nbsp;B&nbsp;Taylor</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  Software security is a major concern for modern computing systems.  A major challenge is detecting whether a system has been compromised so that recovery actions can be undertaken to mitigate the security threat.  Detecting compromised systems is difficult to the ability of attackers to make malware appear similar to normal software.  Existing commercial approaches to detecting malware have significant manual components --- increasing cost and the time to detect malware. The performed research explored whether it is possible to automatically learn the expected behaviors of normal software and detect attacks by monitoring a large number of normal executions and then detecting malware as deviations from the learnt expected behavior.  There are several advantages to this approach. First, it requires minimal manual labor to identify malicious software.  Second, it can quickly respond to novel attacks that have not been previously observed.  Third, it can learn very tight specifications that allow minimal slack for attackers to exploit. These results significantly advanced knowledge in the field of security, because prior to this research, the techniques used to monitor program execution could not efficiently handle dynamic code generation that is ubiquitous in modern applications.  Second, the results show that it is possible to efficiently learn the expected behavior of even very large software applications with sufficient precision to filter the vast majority of program events and make it possible to remotely log any novel malicious behaviors. Our results show that our techniques can also be applied to secure PHP-based web applications.  The web application results show that little training is required and that attacks can be precisely detected with few false alarms. We developed software for monitoring network traffic on mobile devices, thus increasing user?s visibility into the mobile devices? activity, improving data transparency and eventually putting users in control of their data. The prototype is available as an Android app as well as a library.  The broader impacts of the research include more secure software systems and an improvement in our society?s ability to defend against malware attacks.  Much future infrastructure depends on our ability to secure it against cyber attacks.  The research provides techniques that are useful for constructing more secure software systems.             Last Modified: 12/28/2016       Submitted by: Michael B Taylor]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
