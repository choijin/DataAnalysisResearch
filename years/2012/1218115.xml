<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: From Scenario-Based Software Requirements to Component-Level Behavior</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>499961.00</AwardTotalIntnAmount>
<AwardAmount>499961</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Use-case scenario-based specifications are frequently used to capture the most important requirements for a software system. Several techniques have been proposed for representing the scenario models and for mapping them to software system behavior models. The resulting behavior models yield several important benefits, including the ability to perform early system assessment and to aid the software engineers in implementing the required functionality. The two key observations guiding this research are that (1) use-case scenarios are inherently partial and (2) modern software systems are typically built by composing independent components. Existing techniques support either modeling the partial behavior of an entire system, or modeling component-level behaviors under the assumption that they are known completely.&lt;br/&gt;&lt;br/&gt;To bridge the above disconnect, this research provides a trio of formally correct techniques for mapping use-case scenario models of a system's requirements to partial-behavior models of the constituent system components. The resulting behavior models are then used to validate existing and elicit new requirements, which in turn, result in further refinements of the components models. The resulting techniques are evaluated theoretically for correctness, completeness, and complexity, and empirically for practical usefulness and scalability. The research yields several broader impacts: it improves the current state of software requirements specification and formalizes its relationship to the prevalent component-based software system development; its reliance on popular scenario-based modeling notations renders the resulting techniques easy to adopt in practice; the support for eliciting currently unspecified requirements leads to improved understandings of systems under development; finally, the supported early discovery and resolution of system behavior discrepancies helps to mitigate significant costs that would be incurred if detected at later stages of a system's lifecycle.</AbstractNarration>
<MinAmdLetterDate>08/01/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/01/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218115</AwardID>
<Investigator>
<FirstName>Nenad</FirstName>
<LastName>Medvidovic</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nenad Medvidovic</PI_FULL_NAME>
<EmailAddress>neno@usc.edu</EmailAddress>
<PI_PHON>2137405579</PI_PHON>
<NSF_ID>000485161</NSF_ID>
<StartDate>08/01/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900890001</ZipCode>
<StreetAddress><![CDATA[University Park]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA37</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~499961</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Use-case scenario-based specifications have become widespread in capturing software system requirements.&nbsp;Scenarios typically describe how some set of agents (e.g., humans, devices they use, and software applications or individual software components running on those devices) interact as a result of causing and reacting to different events. A number of modeling languages have been proposed for modeling scenarios, as have&nbsp;several techniques for mapping the scenario models&mdash;which are descriptions of requirements&mdash;to system behavior models&mdash;which are descriptions of software system designs that realize those requirements. When applied to modern software systems, any&nbsp;technique for mapping use-case scenarios to behavior models&nbsp;must support the specification of specific <span style="text-decoration: underline;">system components</span> while being able to express only <span style="text-decoration: underline;">partially known behaviors</span>. However,&nbsp;the existing approaches support either (1) modeling partial behaviors at the system-level but not component-level or (2) modeling component-level behaviors but assuming that they are known completely.&nbsp;</p> <p>This project developed a suite of techniques for mapping use-case scenario models of a system's requirements&nbsp;to partial-behavior models of the constituent system components. The resulting behavior models&nbsp;are used to validate existing and elicit new requirements, which, in turn, results in&nbsp;further refinements of the components models. This process eventually results in detailed, correct models of the system components, which can then be reified into implementations in a systematic and reliable manner. Specifically, the project resulted in three techniques that focus on</p> <p>(1)&nbsp; heuristically creating formal but partial models of system components from system-level scenario-based specifications,</p> <p>(2)&nbsp; significantly enhancing the way scenarios are specified through the addition of a small number of simple constructs to widely used scenario notations, and</p> <p>(3)&nbsp; a correct approach for mapping the changes performed on a system-level model to changes needed at the level of individual system components.</p> <p>The project resulted in three techniques as opposed to a single&nbsp;overarching technique because the problem presents multiple challenges, and the three techniques are needed to properly cover the resulting trade-off space.</p> <p>These three techniques for requirements-level modeling are coupled with two techniques for extracting and analyzing models from system implementations. As with its treatment of requirements, this project has also focused on system events and event-based interactions at the system design and implementation levels. In turn, this allows for seamless bridging of these typically separately treated software artifacts. As a result, the project has yielded techniques for extracting highly accurate models of <span style="text-decoration: underline;">implemented</span> software systems and system components, which can then be used for a range of activities, from improved software understanding, to aiding the maintenance of existing systems, to improving critical system characteristics such as security, to facilitating the location and reuse of existing functionality in new systems.</p><br> <p>            Last Modified: 10/05/2016<br>      Modified by: Nenad&nbsp;Medvidovic</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Use-case scenario-based specifications have become widespread in capturing software system requirements. Scenarios typically describe how some set of agents (e.g., humans, devices they use, and software applications or individual software components running on those devices) interact as a result of causing and reacting to different events. A number of modeling languages have been proposed for modeling scenarios, as have several techniques for mapping the scenario models&mdash;which are descriptions of requirements&mdash;to system behavior models&mdash;which are descriptions of software system designs that realize those requirements. When applied to modern software systems, any technique for mapping use-case scenarios to behavior models must support the specification of specific system components while being able to express only partially known behaviors. However, the existing approaches support either (1) modeling partial behaviors at the system-level but not component-level or (2) modeling component-level behaviors but assuming that they are known completely.   This project developed a suite of techniques for mapping use-case scenario models of a system's requirements to partial-behavior models of the constituent system components. The resulting behavior models are used to validate existing and elicit new requirements, which, in turn, results in further refinements of the components models. This process eventually results in detailed, correct models of the system components, which can then be reified into implementations in a systematic and reliable manner. Specifically, the project resulted in three techniques that focus on  (1)  heuristically creating formal but partial models of system components from system-level scenario-based specifications,  (2)  significantly enhancing the way scenarios are specified through the addition of a small number of simple constructs to widely used scenario notations, and  (3)  a correct approach for mapping the changes performed on a system-level model to changes needed at the level of individual system components.  The project resulted in three techniques as opposed to a single overarching technique because the problem presents multiple challenges, and the three techniques are needed to properly cover the resulting trade-off space.  These three techniques for requirements-level modeling are coupled with two techniques for extracting and analyzing models from system implementations. As with its treatment of requirements, this project has also focused on system events and event-based interactions at the system design and implementation levels. In turn, this allows for seamless bridging of these typically separately treated software artifacts. As a result, the project has yielded techniques for extracting highly accurate models of implemented software systems and system components, which can then be used for a range of activities, from improved software understanding, to aiding the maintenance of existing systems, to improving critical system characteristics such as security, to facilitating the location and reuse of existing functionality in new systems.       Last Modified: 10/05/2016       Submitted by: Nenad Medvidovic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
