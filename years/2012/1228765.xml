<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Medium: Collaborative: Breaking the Satisfiability Modulo Theories (SMT) Bottleneck in Symbolic Security Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>397708.00</AwardTotalIntnAmount>
<AwardAmount>397708</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The security of our software is critical for consumer confidence, the protection of privacy and valuable intellectual property, and of course national security. Because of our society's increased reliance on software, security breaches can lead to serious personal or corporate losses, and endanger the privacy, liberties, and even the lives of individuals. As threats to software security have become more sophisticated, so too have the techniques and analyses developed to improve it. Symbolic execution has emerged as a fundamental tool for security applications. Its main idea is to run a program using symbolic instead of concrete values: a set of symbols are assigned to the program inputs, and the outputs are expressed as a set of "verification conditions", logical formulas over the input symbols.  A number of successful security analyses use symbolic execution and similar methods to recast security questions about programs as constraint satisfaction problems in some formal logic. Automatic reasoners for that logic can then be used to solve those problems.  In the last few years, solvers based on Satisfiability Modulo Theories (SMT) techniques have become a natural choice in such approaches to security because of their superior performance and automation compared to more traditional theorem provers and their greater generality with respect to ad-hoc tools or propositional satisfiability solvers.&lt;br/&gt;&lt;br/&gt;This collaborative project brings together experts in security and in SMT to pursue two complementary research goals: (i) harness the full power of SMT solvers to improve current security tools based on symbolic analysis; and (ii) design and develop new techniques to address the needs of anticipated future security applications. Specific activities addressing these goals include: collecting challenge benchmark problems from existing security analyses and developing targeted SMT optimizations for these benchmarks; developing appropriate security abstractions in the SMT language used to express security verification conditions; developing logical theories and algorithms for reasoning about character strings in such verification conditions; exposing a general framework for extending the verification condition language; and developing techniques for computing symbolic solution sets for SMT constraints. These activities are expected to (i) significantly increase the flexibility, performance, and reasoning capabilities of SMT solvers in support of security applications; (ii) improve the performance and scalability of current security analyses by leveraging the reasoning power of SMT solvers; and (iii) provide a foundation for new, more powerful, and more expressive security analyses. Overall, this project will help create more scalable and expressive security applications which could have a considerable impact on society as they enable the production of software much more resistant to security attacks.</AbstractNarration>
<MinAmdLetterDate>08/14/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/14/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1228765</AwardID>
<Investigator>
<FirstName>Cesare</FirstName>
<LastName>Tinelli</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Cesare Tinelli</PI_FULL_NAME>
<EmailAddress>cesare-tinelli@uiowa.edu</EmailAddress>
<PI_PHON>3193350735</PI_PHON>
<NSF_ID>000304361</NSF_ID>
<StartDate>08/14/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Iowa</Name>
<CityName>IOWA CITY</CityName>
<ZipCode>522421320</ZipCode>
<PhoneNumber>3193352123</PhoneNumber>
<StreetAddress>2 GILMORE HALL</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>062761671</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF IOWA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>062761671</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Iowa]]></Name>
<CityName>Iowa City</CityName>
<StateCode>IA</StateCode>
<ZipCode>522421419</ZipCode>
<StreetAddress><![CDATA[14 MacLean Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~397708</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">The security of our software is critical for consumer confidence, protection of privacy, protection of valuable intellectual property, and national security. As threats to software security have become more sophisticated, so too have the techniques developed to ensure security. A fundamental technique is symbolic execution which enables several security analyses such as automatic exploit generation, malware analysis, and input filtering. In this technique, a program is executed with symbolic instead of concrete inputs, making it is possible to analyze many different program executions at the same time by using as reasoning backend a solver for symbolic constraints. Backend solvers based on Satisfiability Modulo Theories (SMT) methods are a natural choice in symbolic execution-based approaches to security because of: (i) their superior performance and automation compared to more traditional solvers; and (ii) their greater generality with respect to ad-hoc tools and propositional solvers.</span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">In this project, we developed several new or improved subsolvers for SMT that are useful for security analyses, such as one for the theory of strings, and integrated them in the open-source SMT solver CVC4. In parallel with that, we developed and implemented a novel symbolic execution technique that leverages these new capabilities. The technique, which we dubbed Veritesting, increases the scalability of (dynamic) symbolic execution by combining it with (static) program verification. Its main idea is to verify only selected parts of a program and do so only in a specific dynamic context, the one currently being symbolically executed. This results in a dramatic reduction in the number of the generated constraints for the SMT solver with respect to traditional symbolic execution, which in turn yields a significant improvement in its scalability. Veritesting enabled during this project the discovery of over a thousand of security bugs in widely used Linux programs, which we reported to the Linux community. Additionally, we investigated the use of symbolic execution for the analysis of Python programs, with a focus on exploiting to the new string reasoning capabilities of CVC4. Building on previous work by others, we developed PyEx, an open-source symbolic execution tool with increased robustness and test coverage, and used it to study the discovery of security vulnerability in open source Python code, much of which includes string operations.</span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">Of the new subsolvers for CVC4, the first specializes on the theory of bitvectors. This theory is at the heart of most program analyses as it can be used to reason about binary code at the level of machine operations. Our new solver combines two approaches (called lazy and eager) to achieve maximum performance. The implementation in CVC4 has ranked near the top in the annual SMT solver competitions for the last few years and is being used in security applications in industry (for example, at Google). The second subsolver is for a rich theory of character strings. String manipulation is at the heart of several high-profile security attacks, including SQL injection and cross-site scripting attacks. The subsolver can be used to automatically reason about code that might be vulnerable to such attacks. Thanks to it, CVC4 can solve a very large majority (&gt; 93%) of benchmarks in a large suite consisting of problems generated from PyEx and other security tools. Finally, we developed a theory solver for finite sets with cardinality constraints and extended it to reason about finite relations as well. Sets and relations are a key mathematical building block in many abstractions and reasoning systems. By providing a native theory solver for them that can be combined with other theories (including bitvectors and strings), we made it is possible to model and reason about a wide variety of operations and abstractions.</span></p> <p><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">CVC4, which is available online at </span><a style="text-decoration: none;" href="http://cvc4.cs.stanford.edu/web/"><span style="font-size: 11pt; font-family: Arial; color: #1155cc; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: underline; text-decoration-skip-ink: none; vertical-align: baseline;">http://cvc4.cs.stanford.edu</span></a><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;">, is being used in a large number of academic and industrial projects and applications, including security applications. The new capabilities developed in this project will directly benefit those efforts.</span></p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline;"><br /></span></p><br> <p>            Last Modified: 12/09/2017<br>      Modified by: Cesare&nbsp;Tinelli</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The security of our software is critical for consumer confidence, protection of privacy, protection of valuable intellectual property, and national security. As threats to software security have become more sophisticated, so too have the techniques developed to ensure security. A fundamental technique is symbolic execution which enables several security analyses such as automatic exploit generation, malware analysis, and input filtering. In this technique, a program is executed with symbolic instead of concrete inputs, making it is possible to analyze many different program executions at the same time by using as reasoning backend a solver for symbolic constraints. Backend solvers based on Satisfiability Modulo Theories (SMT) methods are a natural choice in symbolic execution-based approaches to security because of: (i) their superior performance and automation compared to more traditional solvers; and (ii) their greater generality with respect to ad-hoc tools and propositional solvers.  In this project, we developed several new or improved subsolvers for SMT that are useful for security analyses, such as one for the theory of strings, and integrated them in the open-source SMT solver CVC4. In parallel with that, we developed and implemented a novel symbolic execution technique that leverages these new capabilities. The technique, which we dubbed Veritesting, increases the scalability of (dynamic) symbolic execution by combining it with (static) program verification. Its main idea is to verify only selected parts of a program and do so only in a specific dynamic context, the one currently being symbolically executed. This results in a dramatic reduction in the number of the generated constraints for the SMT solver with respect to traditional symbolic execution, which in turn yields a significant improvement in its scalability. Veritesting enabled during this project the discovery of over a thousand of security bugs in widely used Linux programs, which we reported to the Linux community. Additionally, we investigated the use of symbolic execution for the analysis of Python programs, with a focus on exploiting to the new string reasoning capabilities of CVC4. Building on previous work by others, we developed PyEx, an open-source symbolic execution tool with increased robustness and test coverage, and used it to study the discovery of security vulnerability in open source Python code, much of which includes string operations.  Of the new subsolvers for CVC4, the first specializes on the theory of bitvectors. This theory is at the heart of most program analyses as it can be used to reason about binary code at the level of machine operations. Our new solver combines two approaches (called lazy and eager) to achieve maximum performance. The implementation in CVC4 has ranked near the top in the annual SMT solver competitions for the last few years and is being used in security applications in industry (for example, at Google). The second subsolver is for a rich theory of character strings. String manipulation is at the heart of several high-profile security attacks, including SQL injection and cross-site scripting attacks. The subsolver can be used to automatically reason about code that might be vulnerable to such attacks. Thanks to it, CVC4 can solve a very large majority (&gt; 93%) of benchmarks in a large suite consisting of problems generated from PyEx and other security tools. Finally, we developed a theory solver for finite sets with cardinality constraints and extended it to reason about finite relations as well. Sets and relations are a key mathematical building block in many abstractions and reasoning systems. By providing a native theory solver for them that can be combined with other theories (including bitvectors and strings), we made it is possible to model and reason about a wide variety of operations and abstractions.  CVC4, which is available online at http://cvc4.cs.stanford.edu, is being used in a large number of academic and industrial projects and applications, including security applications. The new capabilities developed in this project will directly benefit those efforts.         Last Modified: 12/09/2017       Submitted by: Cesare Tinelli]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
