<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Tactic-Centric Traceability Models for Preserving Architectural Quality</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2012</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>499386.00</AwardTotalIntnAmount>
<AwardAmount>522193</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software-intensive systems are typically designed around a set of architectural decisions. These decisions are often based on well-known architectural tactics, which work together to shape the structure, behavior, properties, processes, and governance of the delivered solution. Unfortunately, architectural quality often degrades over time as ongoing maintenance activities are undertaken to correct faults, improve performance, or to adapt the system in response to changing requirements. This research presents a novel and practical approach for addressing the problem of architectural degradation based on a new concept of tactic Traceability Information Models (tTIMs). tTIMS provide semantically typed, reusable, and extensible traceability links, and are designed to significantly simplify the traceability process, reduce its costs, scale up to support traceability and architectural preservation in large and complex projects, and facilitate the visualization of underlying design rationales to the software maintainer. The proposed techniques will have the potential to impact a wide variety of high-performance and safety critical software systems.&lt;br/&gt;&lt;br/&gt;The project makes several important contributions. First, it provides a potentially transformative solution for integrating existing techniques from the field of architectural assessment and trace retrieval into the maintenance process. Second it develops new algorithms and techniques for capturing and reusing traceability knowledge across projects in the form of a reusable infrastructure of semantically typed traceability links. Third, it provides new visualization techniques for communicating underlying architectural decisions and their interrelationships to developers and maintainers within the context of common software engineering tasks. Fourth, it advances cutting edge trace-retrieval solutions by utilizing a combination of trace retrieval, machine learning, and structural analysis techniques in order to detect classes related to architectural tactics and then to classify those classes according to specific roles in the tactic. Finally, it utilizes this information to automatically generate architecturally significant traceability links.</AbstractNarration>
<MinAmdLetterDate>07/18/2012</MinAmdLetterDate>
<MaxAmdLetterDate>05/02/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218303</AwardID>
<Investigator>
<FirstName>Jane</FirstName>
<LastName>Huang</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jane L Huang</PI_FULL_NAME>
<EmailAddress>JaneClelandHuang@nd.edu</EmailAddress>
<PI_PHON>7082072712</PI_PHON>
<NSF_ID>000304869</NSF_ID>
<StartDate>07/18/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>DePaul University</Name>
<CityName>Chicago</CityName>
<ZipCode>606042287</ZipCode>
<PhoneNumber>3123627388</PhoneNumber>
<StreetAddress>1 East Jackson Boulevard</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>045694130</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DE PAUL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>045694130</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[DePaul University]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>606042287</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~499386</FUND_OBLG>
<FUND_OBLG>2013~15271</FUND_OBLG>
<FUND_OBLG>2014~7536</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Complex software systems, especially safety, and mission-critical ones, must satisfy a number of competing quality goals related to reliability, safety, security, performance, usability, and other important qualities. Software Architects propose and compare design solutions, understand their trade-offs, and design solutions intended to optimize the extent to which each quality concern is satisfied. Architectural design decisions are often based on well-known architectural <em>tactics</em>, defined as re-usable techniques for achieving specific quality concerns. &nbsp;Unfortunately, a software system&rsquo;s quality tends to erode over time as it undergoes maintenance to correct faults, improve performance or other quality concerns, and is adapted in response to changing requirements. Our approach is designed to keep developers informed of underlying architectural decisions so that they do not inadvertently degrade system qualities.&nbsp;&nbsp;</p> <p>In the first research phase, techniques were developed to identify and visualize architectural tactics in code as depicted in Figure 1.&nbsp; A machine classifier was trained to recognize eight commonly used architectural tactics using descriptions from textbooks and papers, as well as java code snippets implementing each tactic in open source systems.&nbsp; The trained classifiers were evaluated against several high-performance systems, and results showed their capability to detect architectural tactics at high levels of accuracy with both recall and precision above 90% in most cases.&nbsp; The architectural tactic classifier, including a library of Tactic Traceability Patterns (TTPs), was released on GitHub Archie - Smart IDE, while a streamlined version of Archie, trained to recognize security-related tactics, was released into the DHS SWAMP (Software Assurance Market Place).</p> <p>The second phase of the research investigated the relationship between functional components and underlying architectural decisions.&nbsp; The tactic detector was used to mine architectural tactics from tens of thousands of software products and to map them onto their functional components. &nbsp;An associated visualization is shown in Figure 2. Correlations between specific functional areas and the common use of architectural tactics were identified and a recommender system was developed with capabilities of proposing potentially relevant architectural tactics to developers.&nbsp;</p> <p>In the third phase of the research, over 8,000 industrial requirements were analyzed for architecturally significant requirements i.e., those requirements which have a far-reaching impact on the design, are difficult to refactor, and often specify specific system qualities.&nbsp; The study showed that very few architectural requirements were explicitly specified and that architectural decisions frequently went undocumented.&nbsp; Interviews were conducted with software architects to identify information they needed in order to make informed architectural design decisions.&nbsp; &nbsp;In current practice, architecturally significant information missing from requirements specifications leads to project delays and incorrect assumptions leading to inappropriate design decisions.&nbsp; A novel process was developed to guide requirements engineers and business analysts through the process of eliciting architecturally-significant requirements from project stakeholders.&nbsp; Probing questions were identified for five functional areas of electronic healthcare systems.&nbsp; The questions associated with "Audit" are depicted in Figure 3. &nbsp; Further, information retrieval techniques were developed for extracting existing, relevant requirements associated with each of the probing questions so that requirements elicitors were made aware of existing specifications.&nbsp; The goals of this work were two-fold: first to provide tools and processes that would lead to higher quality architecturally significant requirements and more informed architectural designs, and second, to provide an underlying ontology that associated rationales with architectural decisions.&nbsp; This second goal supported the primary focus of the research &ndash; to reveal underlying rationales behind architectural decisions in the source code.</p> <p>In addition to technical outcomes, the project has provided numerous opportunities for training both graduate and undergraduate students.</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/16/2017<br>      Modified by: Jane&nbsp;L&nbsp;Huang</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510868921330_OverView--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510868921330_OverView--rgov-800width.jpg" title="Archie Eclipse Plugin"><img src="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510868921330_OverView--rgov-66x44.jpg" alt="Archie Eclipse Plugin"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The Archie Eclipse plugin uses a trained classifier to detect architectural tactics in source code.  Each tactic is visualized as a Tactic Traceability Pattern</div> <div class="imageCredit">SAREC Research Group</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Jane&nbsp;L&nbsp;Huang</div> <div class="imageTitle">Archie Eclipse Plugin</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510869563247_CityScape--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510869563247_CityScape--rgov-800width.jpg" title="Architectural Tactics for Cassandra"><img src="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510869563247_CityScape--rgov-66x44.jpg" alt="Architectural Tactics for Cassandra"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Code city view depicting architecturally significant areas of the code discovered using the Archie Tactic Detector</div> <div class="imageCredit">Xiaoli Lian</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Jane&nbsp;L&nbsp;Huang</div> <div class="imageTitle">Architectural Tactics for Cassandra</div> </div> </li> <li> <a href="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510869910415_Audit_Trail_PQ_Image--rgov-214x142.jpg" original="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510869910415_Audit_Trail_PQ_Image--rgov-800width.jpg" title="Probing Questions for Audit Requirements"><img src="/por/images/Reports/POR/2017/1218303/1218303_10191748_1510869910415_Audit_Trail_PQ_Image--rgov-66x44.jpg" alt="Probing Questions for Audit Requirements"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Probing questions designed to elicit architecturally significant requirements associated with Audit functionality</div> <div class="imageCredit">Preethu Rose</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Jane&nbsp;L&nbsp;Huang</div> <div class="imageTitle">Probing Questions for Audit Requirements</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Complex software systems, especially safety, and mission-critical ones, must satisfy a number of competing quality goals related to reliability, safety, security, performance, usability, and other important qualities. Software Architects propose and compare design solutions, understand their trade-offs, and design solutions intended to optimize the extent to which each quality concern is satisfied. Architectural design decisions are often based on well-known architectural tactics, defined as re-usable techniques for achieving specific quality concerns.  Unfortunately, a software system?s quality tends to erode over time as it undergoes maintenance to correct faults, improve performance or other quality concerns, and is adapted in response to changing requirements. Our approach is designed to keep developers informed of underlying architectural decisions so that they do not inadvertently degrade system qualities.    In the first research phase, techniques were developed to identify and visualize architectural tactics in code as depicted in Figure 1.  A machine classifier was trained to recognize eight commonly used architectural tactics using descriptions from textbooks and papers, as well as java code snippets implementing each tactic in open source systems.  The trained classifiers were evaluated against several high-performance systems, and results showed their capability to detect architectural tactics at high levels of accuracy with both recall and precision above 90% in most cases.  The architectural tactic classifier, including a library of Tactic Traceability Patterns (TTPs), was released on GitHub Archie - Smart IDE, while a streamlined version of Archie, trained to recognize security-related tactics, was released into the DHS SWAMP (Software Assurance Market Place).  The second phase of the research investigated the relationship between functional components and underlying architectural decisions.  The tactic detector was used to mine architectural tactics from tens of thousands of software products and to map them onto their functional components.  An associated visualization is shown in Figure 2. Correlations between specific functional areas and the common use of architectural tactics were identified and a recommender system was developed with capabilities of proposing potentially relevant architectural tactics to developers.   In the third phase of the research, over 8,000 industrial requirements were analyzed for architecturally significant requirements i.e., those requirements which have a far-reaching impact on the design, are difficult to refactor, and often specify specific system qualities.  The study showed that very few architectural requirements were explicitly specified and that architectural decisions frequently went undocumented.  Interviews were conducted with software architects to identify information they needed in order to make informed architectural design decisions.   In current practice, architecturally significant information missing from requirements specifications leads to project delays and incorrect assumptions leading to inappropriate design decisions.  A novel process was developed to guide requirements engineers and business analysts through the process of eliciting architecturally-significant requirements from project stakeholders.  Probing questions were identified for five functional areas of electronic healthcare systems.  The questions associated with "Audit" are depicted in Figure 3.   Further, information retrieval techniques were developed for extracting existing, relevant requirements associated with each of the probing questions so that requirements elicitors were made aware of existing specifications.  The goals of this work were two-fold: first to provide tools and processes that would lead to higher quality architecturally significant requirements and more informed architectural designs, and second, to provide an underlying ontology that associated rationales with architectural decisions.  This second goal supported the primary focus of the research &ndash; to reveal underlying rationales behind architectural decisions in the source code.  In addition to technical outcomes, the project has provided numerous opportunities for training both graduate and undergraduate students.          Last Modified: 11/16/2017       Submitted by: Jane L Huang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
