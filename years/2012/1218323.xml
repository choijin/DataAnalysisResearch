<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small:Energy-Optimized Memory Hierarchies</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2012</AwardEffectiveDate>
<AwardExpirationDate>06/30/2015</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>tao li</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The early 21st century finds power and energy as the central challenges to continued improvements in computer system performance and cost. From handheld mobile devices to the data centers that support them, computer architects must invent new energy-efficient techniques to facilitate future innovations in science, education, government and commerce. In current systems, the memory hierarchy-which stores and moves the data values used and produced by the computation-consumes more energy than the computation itself. For example, obtaining operands for a double-precision multiply-add can consume 1.7 to 200 times the operation's energy depending on where in the memory hierarchy the values are stored. Improving the energy-efficiency of memory hierarchies can not only enable advances in future computer systems, but also reduces the emission of greenhouse gases.&lt;br/&gt;&lt;br/&gt;This project seeks novel memory hierarchy designs that minimize power and energy, rather than the classical focus on reducing latency and/or bandwidth. These designs build on three key hypotheses: (1) cache memories can reduce energy more than either latency or bandwidth, (2) optimizing latency becomes less important when it can be tolerated, and (3) overlapping activity does not save power, but can save energy due to static power dissipation. Initial research directions include (1) a technique to reduce address translation energy using a hybrid virtual/physical cache that eliminates the need to access a highly-associative TLB on every memory access and (2) energy-efficient cache hierarchies that use data compression techniques to replace the high energy cost of misses with lower compression and decompression overheads. This research will also extend the widely-used open-source gem5 simulation infrastructure to more accurately model the power and energy of emerging memory hierarchies.</AbstractNarration>
<MinAmdLetterDate>06/25/2012</MinAmdLetterDate>
<MaxAmdLetterDate>06/25/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218323</AwardID>
<Investigator>
<FirstName>Mark</FirstName>
<LastName>Hill</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mark D Hill</PI_FULL_NAME>
<EmailAddress>markhill@cs.wisc.edu</EmailAddress>
<PI_PHON>6082622196</PI_PHON>
<NSF_ID>000328470</NSF_ID>
<StartDate>06/25/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>David</FirstName>
<LastName>Wood</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David A Wood</PI_FULL_NAME>
<EmailAddress>david@cs.wisc.edu</EmailAddress>
<PI_PHON>6082066595</PI_PHON>
<NSF_ID>000442514</NSF_ID>
<StartDate>06/25/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Wisconsin-Madison</Name>
<CityName>MADISON</CityName>
<ZipCode>537151218</ZipCode>
<PhoneNumber>6082623822</PhoneNumber>
<StreetAddress>21 North Park Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 6401]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<StateCode>WI</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WI02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>161202122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WISCONSIN SYSTEM</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041188822</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Wisconsin-Madison]]></Name>
<CityName>Madison</CityName>
<StateCode>WI</StateCode>
<ZipCode>537151218</ZipCode>
<StreetAddress><![CDATA[21 North Park Street, Suite 6401]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Wisconsin</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WI02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~400000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The early 21st century brings power and energy challenges to computer systems from the handheld to the data center. More energy-efficient computers provide greater utility or save environmental resources.</p> <p>Two important aspects of computer systems are memory and processing. Memory keeps working information and is usually implemented in a hierarchy: small level-one caches holding the most active data, followed by larger caches, then even larger main memory, and ultimately permanent storage (disks, FLASH). Processing has been traditionally done with central processing units (CPUs), but it can be done more energy-efficiently with graphics processing units (GPUs).</p> <p>This project worked to improve computer system energy-efficiency with many contributions that can be organized in the three.</p> <p><strong>Improved Cache Compression.</strong> Cache compression seeks to losslessly reduce the size of commonly-stored data so that data is more often found in a cache (a hit) rather than not (a miss). Misses cost time and energy. One result of this project is a cache design that ingeniously has cache data point back to address information (tags) to facilitate fast hits to data compressed by varying amounts. A follow-on result uses skewing to reduce address tag overhead and improve performance and energy.</p> <p><strong>Efficient Virtual Memory.</strong> Virtual memory is a technique for caching data in main memory from a vast storage system. Data in virtual memory is found using a translation lookaside buffer (TLB) that&mdash;like a cache&mdash;can hit or miss. TLB miss frequencies are increasing for especially (cloud) server workloads where the amount of main memory that can be purchased for $10K has increased a million-fold (from megabytes to terabytes) while TLB sizes have stayed relatively fixed. A result from this grant is a design with an arbitrarily-large ``direct segment&rsquo;&rsquo; that can eliminate TLB misses from a large fraction of memory, saving time and energy. This result was also generalized to support virtualized systems and to enable many direct segments.</p> <p><strong>Saving Energy with Graphics Processing Units.</strong> GPUs offer an energy efficient alternative to CPUs for executing some general-purpose workloads. GPUs can be hard to program and can interact poorly with memory hierarchies. A result is to provide programmer-friendly virtual memory for GPUs by adapting CPU TLB methods including proposing hardware that can process dozens of concurrent TLB misses. This is useful for handling bursts of misses that analysis found common for GPUs. Another result enables GPU programs to benefit from the synergy of two heretofore-incompatible alternatives: static hierarchical GPU synchronization and dynamic load balancing (e.g., via work stealing).</p> <p>Moreover, the project provided broader impacts several ways. To help NSF dollars go further, it developed and refined open-simulation infrastructures that have been used by 1000s of students and researchers (gem5, gem5-gpu, BadgerTrap). This grant has provided partial support for 6 different Ph.D. students. It has promulgated the work through an annual computer architecture affiliates meetings, and disseminated ideas and simulators in courses (Wisconsin and elsewhere) and via external presentations by faculty and students. Through student internships and graduating students joining the computer industry, ultimate outcome of work funded by this grant is not yet bounded.</p><br> <p>            Last Modified: 07/29/2015<br>      Modified by: Mark&nbsp;D&nbsp;Hill</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The early 21st century brings power and energy challenges to computer systems from the handheld to the data center. More energy-efficient computers provide greater utility or save environmental resources.  Two important aspects of computer systems are memory and processing. Memory keeps working information and is usually implemented in a hierarchy: small level-one caches holding the most active data, followed by larger caches, then even larger main memory, and ultimately permanent storage (disks, FLASH). Processing has been traditionally done with central processing units (CPUs), but it can be done more energy-efficiently with graphics processing units (GPUs).  This project worked to improve computer system energy-efficiency with many contributions that can be organized in the three.  Improved Cache Compression. Cache compression seeks to losslessly reduce the size of commonly-stored data so that data is more often found in a cache (a hit) rather than not (a miss). Misses cost time and energy. One result of this project is a cache design that ingeniously has cache data point back to address information (tags) to facilitate fast hits to data compressed by varying amounts. A follow-on result uses skewing to reduce address tag overhead and improve performance and energy.  Efficient Virtual Memory. Virtual memory is a technique for caching data in main memory from a vast storage system. Data in virtual memory is found using a translation lookaside buffer (TLB) that&mdash;like a cache&mdash;can hit or miss. TLB miss frequencies are increasing for especially (cloud) server workloads where the amount of main memory that can be purchased for $10K has increased a million-fold (from megabytes to terabytes) while TLB sizes have stayed relatively fixed. A result from this grant is a design with an arbitrarily-large ``direct segmentÆÆ that can eliminate TLB misses from a large fraction of memory, saving time and energy. This result was also generalized to support virtualized systems and to enable many direct segments.  Saving Energy with Graphics Processing Units. GPUs offer an energy efficient alternative to CPUs for executing some general-purpose workloads. GPUs can be hard to program and can interact poorly with memory hierarchies. A result is to provide programmer-friendly virtual memory for GPUs by adapting CPU TLB methods including proposing hardware that can process dozens of concurrent TLB misses. This is useful for handling bursts of misses that analysis found common for GPUs. Another result enables GPU programs to benefit from the synergy of two heretofore-incompatible alternatives: static hierarchical GPU synchronization and dynamic load balancing (e.g., via work stealing).  Moreover, the project provided broader impacts several ways. To help NSF dollars go further, it developed and refined open-simulation infrastructures that have been used by 1000s of students and researchers (gem5, gem5-gpu, BadgerTrap). This grant has provided partial support for 6 different Ph.D. students. It has promulgated the work through an annual computer architecture affiliates meetings, and disseminated ideas and simulators in courses (Wisconsin and elsewhere) and via external presentations by faculty and students. Through student internships and graduating students joining the computer industry, ultimate outcome of work funded by this grant is not yet bounded.       Last Modified: 07/29/2015       Submitted by: Mark D Hill]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
