<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Real-Time Computing Using GPUs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2012</AwardEffectiveDate>
<AwardExpirationDate>07/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The computing industry recently experienced a major shift in CPU architectures with the advent of multicore chips.  This shift has necessitated the adoption of new programming models, algorithms, and analysis methods to fully exploit the parallelism inherent in multicore chip designs.  While advances in these areas are well underway, industry has already begun yet another architectural shift towards systems with heterogeneous processing elements.  Heterogeneity creates new challenges because the availability of different types of processing elements means that nontrivial choices must be made when allocating hardware resources to software components.&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;One of the most successful applications of heterogeneity today is in architectures in which powerful graphics processing units (GPUs) are used alongside general-purpose CPUs.  Though originally intended as special-purpose graphics accelerators, GPUs are now being widely used for non-graphics processing in numerous application domains, including many domains in which real-time constraints (e.g., deadline requirements) exist.  For example, envisioned automated automotive systems will require real-time sensing and tracking features that GPUs can accelerate.  The goal of this project is to determine which resource allocation methods best facilitate the support of such real-time applications on heterogeneous platforms that may have multiple CPUs and GPUs.  This goal is being met by undertaking a broad study of issues affecting the deployment and analysis of real-time applications implemented on GPU-enabled multicore platforms.  Broader impacts include joint research with industry colleagues, and the development of publicly-available open-source software that can be used by other institutions for research and teaching purposes.</AbstractNarration>
<MinAmdLetterDate>08/27/2012</MinAmdLetterDate>
<MaxAmdLetterDate>08/27/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218693</AwardID>
<Investigator>
<FirstName>James</FirstName>
<LastName>Anderson</LastName>
<PI_MID_INIT>H</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>James H Anderson</PI_FULL_NAME>
<EmailAddress>anderson@cs.unc.edu</EmailAddress>
<PI_PHON>9195906057</PI_PHON>
<NSF_ID>000481767</NSF_ID>
<StartDate>08/27/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sanjoy</FirstName>
<LastName>Baruah</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sanjoy K Baruah</PI_FULL_NAME>
<EmailAddress>Baruah@wustl.edu</EmailAddress>
<PI_PHON>3149357546</PI_PHON>
<NSF_ID>000762080</NSF_ID>
<StartDate>08/27/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of North Carolina at Chapel Hill</Name>
<CityName>CHAPEL HILL</CityName>
<ZipCode>275991350</ZipCode>
<PhoneNumber>9199663411</PhoneNumber>
<StreetAddress>104 AIRPORT DR STE 2200</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>608195277</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of North Carolina at Chapel Hill]]></Name>
<CityName>Chapel Hill</CityName>
<StateCode>NC</StateCode>
<ZipCode>275993175</ZipCode>
<StreetAddress><![CDATA[201 S. Columbia St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~400000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Real-time systems are systems in which some computations have deadline constraints. &nbsp;For example, when the brake pedal of a car is depressed, the car should begin to slow within a specified number of milliseconds. &nbsp;The computations that must be supported within a real-time system are usually called "tasks." &nbsp;(A task is essentially just a computer program.) &nbsp;To save on hardware costs, it is often the case that many tasks with separate deadline requirements have to be supported on the same hardware platform. &nbsp;To ensure that each task meets its deadline requirements, a real-time scheduler must be used within the operating system that is cognizant of task deadlines and schedules tasks accordingly.</p> <p><br />From the perspective of designing and realizing real-time systems, one of the most profound recent developments in the computing arena is the advent of multicore computers. &nbsp;Such computers actually consist of multiple processors. &nbsp;Thus, a multicore computer can execute many tasks in parallel, i.e., at the same time. &nbsp;The introduction of parallelism greatly complicates the design of real-time schedulers and the analysis required for validating deadline requirements.</p> <p><br />In many applications domains, there is interest in augmenting ordinary computers with specialized computers that can accelerate certain computations. &nbsp;One particular kind of accelerator in which there is much current interest is a computational device called a graphics processing unit (GPU). &nbsp;GPUs were originally designed to accelerate graphics computations (such as the computations that produce the visual scenes that are displayed in computer gaming applications). &nbsp;However, the matrix-based mathematical nature of such computations is also seen in other settings, so the breadth of application domains where GPUs could be of use is expanding. &nbsp;For example, many high-end automobiles today employ cameras to monitor following distances, lane-keeping, etc. &nbsp;Computer vision algorithms are used to process the information from such cameras. &nbsp;The mathematical techniques employed by such algorithms are also matrix-based and can be sped up by using GPUs.</p> <p><br />For GPUs to be used alongside multicore computers &nbsp;in an application domain such as this, new resource allocation infrastructure, in the form of real-time schedulers and associated analysis for validating deadline requirements, is needed that takes into account the unique requirements and characteristics of GPUs. &nbsp;This project has been devoted to the development and evaluation of such infrastructure.</p> <p><br />This infrastructure has been produced in the form of a highly configurable system called GPUSync. &nbsp;GPUSync is used alongside existing real-time schedulers to enable tasks to share GPUs. &nbsp;GPUSync has over 9,000 configurations; a given configuration is defined by setting certain parameters. &nbsp;The main intellectual contributions of this project are threefold. &nbsp;First, GPUSync was conceived and implemented. &nbsp;Second, experiments were conducted to identify the "best" GPUSync configurations. &nbsp;Third, these best configurations were further evaluated in the context of a case study involving computer vision algorithms as used in automotive systems.</p> <p><br />In terms of broader impacts, the investigators presented talks on this work at numerous institutions, conferences, workshops, etc. &nbsp;Additionally, the results of this project formed the basis of the dissertations of two graduate students. &nbsp;The development of GPUSync has also led to follow-up work with researchers at General Motors Corp. on the usage of GPUs in automotive systems.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/12/2015<br>      Modified by: Sanjoy&nbsp;K&nbsp;Baruah</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Real-time systems are systems in which some computations have deadline constraints.  For example, when the brake pedal of a car is depressed, the car should begin to slow within a specified number of milliseconds.  The computations that must be supported within a real-time system are usually called "tasks."  (A task is essentially just a computer program.)  To save on hardware costs, it is often the case that many tasks with separate deadline requirements have to be supported on the same hardware platform.  To ensure that each task meets its deadline requirements, a real-time scheduler must be used within the operating system that is cognizant of task deadlines and schedules tasks accordingly.   From the perspective of designing and realizing real-time systems, one of the most profound recent developments in the computing arena is the advent of multicore computers.  Such computers actually consist of multiple processors.  Thus, a multicore computer can execute many tasks in parallel, i.e., at the same time.  The introduction of parallelism greatly complicates the design of real-time schedulers and the analysis required for validating deadline requirements.   In many applications domains, there is interest in augmenting ordinary computers with specialized computers that can accelerate certain computations.  One particular kind of accelerator in which there is much current interest is a computational device called a graphics processing unit (GPU).  GPUs were originally designed to accelerate graphics computations (such as the computations that produce the visual scenes that are displayed in computer gaming applications).  However, the matrix-based mathematical nature of such computations is also seen in other settings, so the breadth of application domains where GPUs could be of use is expanding.  For example, many high-end automobiles today employ cameras to monitor following distances, lane-keeping, etc.  Computer vision algorithms are used to process the information from such cameras.  The mathematical techniques employed by such algorithms are also matrix-based and can be sped up by using GPUs.   For GPUs to be used alongside multicore computers  in an application domain such as this, new resource allocation infrastructure, in the form of real-time schedulers and associated analysis for validating deadline requirements, is needed that takes into account the unique requirements and characteristics of GPUs.  This project has been devoted to the development and evaluation of such infrastructure.   This infrastructure has been produced in the form of a highly configurable system called GPUSync.  GPUSync is used alongside existing real-time schedulers to enable tasks to share GPUs.  GPUSync has over 9,000 configurations; a given configuration is defined by setting certain parameters.  The main intellectual contributions of this project are threefold.  First, GPUSync was conceived and implemented.  Second, experiments were conducted to identify the "best" GPUSync configurations.  Third, these best configurations were further evaluated in the context of a case study involving computer vision algorithms as used in automotive systems.   In terms of broader impacts, the investigators presented talks on this work at numerous institutions, conferences, workshops, etc.  Additionally, the results of this project formed the basis of the dissertations of two graduate students.  The development of GPUSync has also led to follow-up work with researchers at General Motors Corp. on the usage of GPUs in automotive systems.                Last Modified: 08/12/2015       Submitted by: Sanjoy K Baruah]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
