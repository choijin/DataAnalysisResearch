<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>RUI: Distributed Programming with AlphaZ</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2012</AwardEffectiveDate>
<AwardExpirationDate>05/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>133583.00</AwardTotalIntnAmount>
<AwardAmount>133583</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computer programmers must create software that produces a correct answer while making effective use of the computer hardware. This challenge of combining correctness and efficient hardware use is particularly difficult in scientific research, which often requires novel computing hardware for complex calculations. Different software "tuning" techniques are needed for shared-memory multi-core computers, distributed systems such as clusters of workstations, and high-speed graphics processors. Thus, scientific research with a computational element often requires great programming effort, which must be done with care, as performance tuning can introduce errors into a working program. The traditional alternative to manual performance tuning is the use of an automatic optimizing compiler. Such systems have largely replaced human beings for many tuning steps for single-core microprocessors (such as instruction selection and register allocation). More recently, research compilers such as Pluto have shown significant success in organizing the sharing of work within multi-core processors. Programmers using these systems are spared the work of tuning, but lose the ability to explore approaches that were not foreseen or chosen by the designer of the compiler. The AlphaZ system puts the mathematical foundation of the Pluto compiler (the "polyhedral framework") under control of the programmer, allowing manual tuning without needless effort or error. Like Pluto, AlphaZ can tune software for single- or multi-core systems. Pluto and AlphaZ are each the subject of ongoing research to support distributed computing by automatically transforming programs to distribute work across a cluster of computers with the MPI library. However, neither research project allows the programmer to explore novel ways to organize the motion of data among the constituent computers of a cluster.&lt;br/&gt;This RUI project is exploring extensions to the AlphaZ system to allow programmer-directed data transfer with MPI focusing both on the high-level design of these extensions and on anticipating implementation challenges. The envisioned extensions to AlphaZ will facilitate exploration, by both compiler writers and programmers, of strategies for moving data in a distributed computing environment. Furthermore, these extensions will validate a program tuning strategy that could be applied to other new architectures such as graphics processors.</AbstractNarration>
<MinAmdLetterDate>05/16/2012</MinAmdLetterDate>
<MaxAmdLetterDate>05/16/2012</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218827</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Wonnacott</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David G Wonnacott</PI_FULL_NAME>
<EmailAddress>davew@cs.haverford.edu</EmailAddress>
<PI_PHON>6108964973</PI_PHON>
<NSF_ID>000235940</NSF_ID>
<StartDate>05/16/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>John</FirstName>
<LastName>Dougherty</LastName>
<PI_MID_INIT>P</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John P Dougherty</PI_FULL_NAME>
<EmailAddress>jd@cs.haverford.edu</EmailAddress>
<PI_PHON>6108964993</PI_PHON>
<NSF_ID>000209259</NSF_ID>
<StartDate>05/16/2012</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Haverford College</Name>
<CityName>Haverford</CityName>
<ZipCode>190411336</ZipCode>
<PhoneNumber>6108961000</PhoneNumber>
<StreetAddress>370 Lancaster Avenue</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002502615</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CORPORATION OF HAVERFORD COLLEGE, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002502615</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Haverford College]]></Name>
<CityName>Haverford</CityName>
<StateCode>PA</StateCode>
<ZipCode>190411392</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9229</Code>
<Text>RES IN UNDERGRAD INST-RESEARCH</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~133583</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project has advanced the state of the art in high-performance computing research and education, in ways that support both computer science and computational work in other fields. &nbsp;It has broadened the applicability of automatic systems for improving program execution speed, demonstrated both the relevance and viability of a library-based alternative to automatic systems, trained undergraduates in the practice of computer science research, and produced educational materials to engage undergraduates in high-performance computing.</p> <p><br /><strong>Background</strong><br />The <em>polyhedral model</em>&nbsp;has been successful in dramatically improving the execution speed of certain <em>dense array codes</em>, which account for the main workload of a variety of important scientific applications. &nbsp;However, the fully-automatic program optimization tools based on this approach can be hypersensitive to the exact form of the program being optimized, with minor changes to the program form potentially causing the loss of all benefit.</p> <p><br /><strong>Intellectual Merit</strong><br />This project focused on the use of programmer-guided program transformation to put the power of polyhedral optimization under the control of the programmer. &nbsp;Programmer control could increase the speed at which new variants of the polyhedral approach are deployed to new hardware platforms (e.g., distributed systems) or extended to a broader class of programs.</p> <p>As part of this project, the PI identified a software structure now known as the&nbsp;<em>mostly-tileable loop nest</em>, which automatic polyhedral tools fail to optimize. The PI developed techniques for optimizing such structures, and demonstrated the new optimization's effectiveness via manual application with the Integer Set Library software tool. &nbsp;This work demonstrates that the full power of the polyhedral model is not realized by existing automatic tools, and that manual direction of the tools is a viable approach to addressing some of these limits (as is integration of each new technique into each polyhedral compiler). &nbsp;Unfortunately, the Integer Set Library tool is not a general-purpose programming language.</p> <p>The PI and collaborators also explored the use of the Chapel programming language's <em>iterator</em>&nbsp;construct, as a vehicle for such programmer-directed optimization. &nbsp;They demonstrated that iterator-based loop optimization can produce program speeds that roughly equal current research-grade automatic systems, even for examples where existing systems work well. &nbsp;These iterators can be developed by programmers, either manually or with polyhedral tools, and then distributed as libraries. &nbsp;This work demonstrates that programmer-constructed loop optimizations are not only desirable, but also possible.</p> <p>The Co-PI and PI of this project also adapted the lab exercises of their institution's High-Performance Scientific Computing course to allow the use of the Chapel language, to familiarize students with the Chapel language, and to let students explore the iterator-based approach to optimization. &nbsp;These exercises are publicly available from the course web page.</p> <p>&nbsp;</p> <p><strong>Broader Impact</strong></p> <p>The computer science subfield of automatic program optimization has been enriched by the development of techniques for mostly-tileable loop nests.</p> <p>Other fields that rely on computationally-intensive dense array codes will benefit from improvements to automatic optimization, and by opportunities to manually speed up codes by selecting iterators rather than extensively rewriting software or awaiting updates to fully-automatic optimization systems.</p> <p>Undergraduates will benefit from the enhancements to course materials, both at the PI's institution and at other institutions that adopt these lab projects.</p> <p>Undergraduates have also benefited from opportunities to engage computer science research. &nbsp;Note that women and underrepresented minority undergraduates participated in this research at rates higher than their national rates of participation in the computer science major, as reported in the September 2015 issue of Computing Research News.</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/30/2017<br>      Modified by: David&nbsp;G&nbsp;Wonnacott</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project has advanced the state of the art in high-performance computing research and education, in ways that support both computer science and computational work in other fields.  It has broadened the applicability of automatic systems for improving program execution speed, demonstrated both the relevance and viability of a library-based alternative to automatic systems, trained undergraduates in the practice of computer science research, and produced educational materials to engage undergraduates in high-performance computing.   Background The polyhedral model has been successful in dramatically improving the execution speed of certain dense array codes, which account for the main workload of a variety of important scientific applications.  However, the fully-automatic program optimization tools based on this approach can be hypersensitive to the exact form of the program being optimized, with minor changes to the program form potentially causing the loss of all benefit.   Intellectual Merit This project focused on the use of programmer-guided program transformation to put the power of polyhedral optimization under the control of the programmer.  Programmer control could increase the speed at which new variants of the polyhedral approach are deployed to new hardware platforms (e.g., distributed systems) or extended to a broader class of programs.  As part of this project, the PI identified a software structure now known as the mostly-tileable loop nest, which automatic polyhedral tools fail to optimize. The PI developed techniques for optimizing such structures, and demonstrated the new optimization's effectiveness via manual application with the Integer Set Library software tool.  This work demonstrates that the full power of the polyhedral model is not realized by existing automatic tools, and that manual direction of the tools is a viable approach to addressing some of these limits (as is integration of each new technique into each polyhedral compiler).  Unfortunately, the Integer Set Library tool is not a general-purpose programming language.  The PI and collaborators also explored the use of the Chapel programming language's iterator construct, as a vehicle for such programmer-directed optimization.  They demonstrated that iterator-based loop optimization can produce program speeds that roughly equal current research-grade automatic systems, even for examples where existing systems work well.  These iterators can be developed by programmers, either manually or with polyhedral tools, and then distributed as libraries.  This work demonstrates that programmer-constructed loop optimizations are not only desirable, but also possible.  The Co-PI and PI of this project also adapted the lab exercises of their institution's High-Performance Scientific Computing course to allow the use of the Chapel language, to familiarize students with the Chapel language, and to let students explore the iterator-based approach to optimization.  These exercises are publicly available from the course web page.     Broader Impact  The computer science subfield of automatic program optimization has been enriched by the development of techniques for mostly-tileable loop nests.  Other fields that rely on computationally-intensive dense array codes will benefit from improvements to automatic optimization, and by opportunities to manually speed up codes by selecting iterators rather than extensively rewriting software or awaiting updates to fully-automatic optimization systems.  Undergraduates will benefit from the enhancements to course materials, both at the PI's institution and at other institutions that adopt these lab projects.  Undergraduates have also benefited from opportunities to engage computer science research.  Note that women and underrepresented minority undergraduates participated in this research at rates higher than their national rates of participation in the computer science major, as reported in the September 2015 issue of Computing Research News.          Last Modified: 05/30/2017       Submitted by: David G Wonnacott]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
