<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Programming Interface And Runtime For Self-Tuning Scalable C/C++ Data Structures</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2012</AwardEffectiveDate>
<AwardExpirationDate>05/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>266000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A key challenge in developing multi-threaded applications on modern architectures is correctly synchronizing data shared among the threads while avoiding excessive performance penalties. Unsafe low-level synchronization mechanisms can easily introduce errors (e.g. race conditions and deadlock) that are extremely difficult to debug. At the same time, application performance and scalability are frequently compromised due to inefficient implementations of synchronous operations on shared data.    &lt;br/&gt;&lt;br/&gt;This research develops a library of highly concurrent scalable data containers with associated programming interface and optimization support to significantly enhance the productivity and performance of multi-threaded C/C++ applications on multicore architectures. The library provides an easy to use and composable interface similar to that of C++ Standard Template Library (STL) and enhances each container type with internal support for non-blocking synchronization of their data accesses, thereby providing better safety and performance than traditional blocking synchronization by eliminating hazards such as deadlock, livelock, and priority inversion, and by being highly scalable in supporting large numbers of threads. A higher level programming interface, similar to that of OpenMP, is supported by a preprocessing compiler associated with the runtime to ease the transition of existing sequential or multi-threaded C/C++ applications to using the non-blocking synchronous template library and to provide optimization and tuning support for the use of the library abstractions. The developed deliverables are expected to demonstrate a seamless integration of developer input, compiler optimization, and multicore runtimes to support systematic migration of C/C++ applications to continuously evolving architectures. &lt;br/&gt;&lt;br/&gt;The scalable template library and the associated programming interface and tuning support is expected to provide an immense productivity and performance boost for developers of high-end scientific and systems applications, including branch and bound, graph analysis, complex scene rendering, and goal propagation in autonomous embedded systems. The developed programming techniques and tools can enable the transformation of such applications into software that is substantially more reliable, efficient, and scalable than existing state of the art. The software techniques is also expected to be employed as an educational toolkit in the teaching of programming languages, compilers, systems software, and parallel programming courses.</AbstractNarration>
<MinAmdLetterDate>05/16/2012</MinAmdLetterDate>
<MaxAmdLetterDate>05/13/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1218100</AwardID>
<Investigator>
<FirstName>Damian</FirstName>
<LastName>Dechev</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Damian Dechev</PI_FULL_NAME>
<EmailAddress>dechev@cs.ucf.edu</EmailAddress>
<PI_PHON>4078232549</PI_PHON>
<NSF_ID>000572912</NSF_ID>
<StartDate>05/16/2012</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>The University of Central Florida Board of Trustees</Name>
<CityName>Orlando</CityName>
<ZipCode>328168005</ZipCode>
<PhoneNumber>4078230387</PhoneNumber>
<StreetAddress>4000 CNTRL FLORIDA BLVD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>150805653</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CENTRAL FLORIDA BOARD OF TRUSTEES, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>159621697</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Central Florida]]></Name>
<CityName/>
<StateCode>FL</StateCode>
<ZipCode>328168005</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~250000</FUND_OBLG>
<FUND_OBLG>2013~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project created new data structures for multiprocessor programming. The key property of these new containers is their wait-free progress guarantee, a condition that allows all threads to make progress. Wait-free containers allow for a higher degree of concurrency and improved safety in multiprocessor applications. In this work the PI created a framework for wait-free programming that includes a collection of data structure implementations including queues, stacks, priority queues, vectors, hash maps, and dictionaries. The design of many of these algorithms bring signficiant advancements to the theory of multiprocoessor algorithms design, as they present the first known wait-free designs of these conatiner types.</p> <p>Enabling effective multiprocessor programming will have an impact that crosscuts multiple areas of science and technology. The PI's work in concurrent algorithm design has been shown to provide a boost in performance and software reuse, consequently productivity, for developers of scientific and systems applications, which are predominantly in C/C++. The data structures and algorithms created in this work have been integrated and adopted in real-world applications by teams developing scientific software at research labs as well as start-up companies seeking to create novel distributed data communication and analysis technologies.&nbsp;</p> <p>In the lifetime of this award, the PI advanced the state-of-the-art in multiprocessor programming by creating new concurrent containers and software tools for the analysis of concurrent algorithms. This research led to the publication of 7 journal publications and 10 conference papers at top-tier academic venues (including a Best Paper Award at IEEE Samos 2013 and a Best Paper Finalist Award at ACM SPAA 2016).&nbsp;</p> <p>The wait-free programming elements developed are disseminated through the release of Tervel, a C++ library for wait-free programming and CCSpec, a tool for the correctness verification of concurrent algorithms. The software developed has been released under the BSD open source license and is available to the broad research and development community.&nbsp;</p> <p>Additionally, this project provided the opportunity to many graduate and undergraduate students at the University of Central Florida to acquire new skills in computer programming and begin successful careers in the field of software engineering.&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/05/2016<br>      Modified by: Damian&nbsp;Dechev</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project created new data structures for multiprocessor programming. The key property of these new containers is their wait-free progress guarantee, a condition that allows all threads to make progress. Wait-free containers allow for a higher degree of concurrency and improved safety in multiprocessor applications. In this work the PI created a framework for wait-free programming that includes a collection of data structure implementations including queues, stacks, priority queues, vectors, hash maps, and dictionaries. The design of many of these algorithms bring signficiant advancements to the theory of multiprocoessor algorithms design, as they present the first known wait-free designs of these conatiner types.  Enabling effective multiprocessor programming will have an impact that crosscuts multiple areas of science and technology. The PI's work in concurrent algorithm design has been shown to provide a boost in performance and software reuse, consequently productivity, for developers of scientific and systems applications, which are predominantly in C/C++. The data structures and algorithms created in this work have been integrated and adopted in real-world applications by teams developing scientific software at research labs as well as start-up companies seeking to create novel distributed data communication and analysis technologies.   In the lifetime of this award, the PI advanced the state-of-the-art in multiprocessor programming by creating new concurrent containers and software tools for the analysis of concurrent algorithms. This research led to the publication of 7 journal publications and 10 conference papers at top-tier academic venues (including a Best Paper Award at IEEE Samos 2013 and a Best Paper Finalist Award at ACM SPAA 2016).   The wait-free programming elements developed are disseminated through the release of Tervel, a C++ library for wait-free programming and CCSpec, a tool for the correctness verification of concurrent algorithms. The software developed has been released under the BSD open source license and is available to the broad research and development community.   Additionally, this project provided the opportunity to many graduate and undergraduate students at the University of Central Florida to acquire new skills in computer programming and begin successful careers in the field of software engineering.                 Last Modified: 08/05/2016       Submitted by: Damian Dechev]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
