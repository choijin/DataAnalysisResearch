<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: A Balance of Power: Programming and Reasoning for Software-Defined Networks</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
<AwardExpirationDate>06/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>1004152.00</AwardTotalIntnAmount>
<AwardAmount>1004152</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computer networks use switches, routers, and other devices to process and forward traffic. In a traditional network, these devices coordinate to agree on how traffic should be forwarded. Software-defined networks (SDN) replace this distributed control with a logically centralized controller program which dictates forwarding behavior to each device by installing rules which can include instructions to send certain traffic to the controller for processing or notification. Incorrect rules can lead to the controller missing vital notifications, giving it an incorrect view of the network's state and potentially harming network functionality. On the other hand, if traffic is sent to the controller needlessly, performance can suffer.&lt;br/&gt;&lt;br/&gt;This project is developing Flowlog, a tierless SDN programming language. A tierless language unifies the disparate layers of programming for SDNs: the controller program itself, switch forwarding rules, and the controller's internal state. Flowlog safely handles rule-management on the switches automatically, without any intervention from the programmer. This not only simplifies development, but also prevents the above bugs that can arise from manual rule-installation. Finally, Flowlog programs can interact with arbitrary other programs, even those not written in Flowlog. Since a failure in a controller program can compromise the entire network, program reliability is of central importance. Thus, Flowlog is designed to enable automatic reasoning about programs, and the project is building in support for program verification (both for a specific network and in general), differential analysis, fault-tolerance testing, and even automated repair of errant programs.</AbstractNarration>
<MinAmdLetterDate>05/14/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/14/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1408745</AwardID>
<Investigator>
<FirstName>Shriram</FirstName>
<LastName>Krishnamurthi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Shriram Krishnamurthi</PI_FULL_NAME>
<EmailAddress>sk+17@cs.brown.edu</EmailAddress>
<PI_PHON>4018637722</PI_PHON>
<NSF_ID>000280993</NSF_ID>
<StartDate>05/14/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brown University</Name>
<CityName>Providence</CityName>
<ZipCode>029129002</ZipCode>
<PhoneNumber>4018632777</PhoneNumber>
<StreetAddress>BOX 1929</StreetAddress>
<StreetAddress2><![CDATA[350 Eddy Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<StateCode>RI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>RI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001785542</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BROWN UNIVERSITY IN PROVIDENCE IN THE STATE OF RHODE ISLAND AND PROVIDENCE PLANTATIONS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001785542</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Brown University]]></Name>
<CityName>Providence</CityName>
<StateCode>RI</StateCode>
<ZipCode>029129093</ZipCode>
<StreetAddress><![CDATA[Office of Sponsored Projects]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>RI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~1004152</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The team contributed several novel results to the specific area of improving the robustness of software-defined networks, which are a critical new frontier in computer networking. This includes both traditional and novel forms of analysis to help programmers ensure their networks are functioning correctly.</p> <p>The team generalized their work to provide fundamental new results in the area of model-finding, which underlies not only their work but several other projects. These new results identify interesting ways to construct output in a human-meaningful way, hopefully making them more useful to the broader range of users (such as network operators) that are now seeing the output of such tools. These forms of output are designed to sit at the intersection of intellectual merit and broader impact, applying mathematically sophisticated techniques to make systems better for end-users.</p> <p>Due to the emphasis on human-meaingful resutls, the team also initiated a new line of work into the human factors of such "principled" output. The results from this study were fascinating. In particular, forms that most readers (including research reviewers) assumed would obviously be better for users &mdash; such as presenting the smallest examples &mdash; turned out to be very misleading, causing users to arrive at the wrong conclusions and therefore apply incorrect fixes, which is precisely the opposite of the intent of the research. This line of work is still preliminary but should engender much more skepticism about such tools in future, also showing the need for a cycle between new mathematical results and user studies that evaluate their effectiveness (and, in particular, potential for harm).</p> <p>Finally, the team has made significant progress on another important form of broader impact: education. They have not only incorporated their and related research content into programming languages courses, they have made significant progress on their innovative "Logic for Systems" course at Brown. This course is a bottom-up introduction to formal methods, driven by students' inherent impulse to model systems of interest. The course is extremely popular (despite its seemingly obscure content) and course evals are excellent. However, not content to rest on these, the team has begun to initiate research studies into the course's educational effectiveness.<br /><br /></p><br> <p>            Last Modified: 07/05/2019<br>      Modified by: Shriram&nbsp;Krishnamurthi</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The team contributed several novel results to the specific area of improving the robustness of software-defined networks, which are a critical new frontier in computer networking. This includes both traditional and novel forms of analysis to help programmers ensure their networks are functioning correctly.  The team generalized their work to provide fundamental new results in the area of model-finding, which underlies not only their work but several other projects. These new results identify interesting ways to construct output in a human-meaningful way, hopefully making them more useful to the broader range of users (such as network operators) that are now seeing the output of such tools. These forms of output are designed to sit at the intersection of intellectual merit and broader impact, applying mathematically sophisticated techniques to make systems better for end-users.  Due to the emphasis on human-meaingful resutls, the team also initiated a new line of work into the human factors of such "principled" output. The results from this study were fascinating. In particular, forms that most readers (including research reviewers) assumed would obviously be better for users &mdash; such as presenting the smallest examples &mdash; turned out to be very misleading, causing users to arrive at the wrong conclusions and therefore apply incorrect fixes, which is precisely the opposite of the intent of the research. This line of work is still preliminary but should engender much more skepticism about such tools in future, also showing the need for a cycle between new mathematical results and user studies that evaluate their effectiveness (and, in particular, potential for harm).  Finally, the team has made significant progress on another important form of broader impact: education. They have not only incorporated their and related research content into programming languages courses, they have made significant progress on their innovative "Logic for Systems" course at Brown. This course is a bottom-up introduction to formal methods, driven by students' inherent impulse to model systems of interest. The course is extremely popular (despite its seemingly obscure content) and course evals are excellent. However, not content to rest on these, the team has begun to initiate research studies into the course's educational effectiveness.         Last Modified: 07/05/2019       Submitted by: Shriram Krishnamurthi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
