<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Medium: Collaborative Research: Programming Abstractions and Systems Support for GPU-Based Acceleration of Irregular Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>739654.00</AwardTotalIntnAmount>
<AwardAmount>739654</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>There is growing interest in using Graphics Processing Units (GPUs) to increase the performance and the energy efficiency of applications outside the graphics domain. GPUs are particularly suited to run regular programs that perform operations similar to pixel processing, and they can offer a large advantage over multicore CPUs in terms of performance, price, and energy efficiency in this domain. Not surprisingly, GPUs are increasingly appearing in devices ranging from handhelds to supercomputers.&lt;br/&gt;&lt;br/&gt;Although regular algorithms are very important, new problem domains such as computational biology, data mining, and social networks necessitate very different algorithmic foundations: they require building, computing with, and updating large graphs. Unfortunately, relatively little is understood about how to implement irregular applications efficiently on current GPU architectures.  Features such as lockstep operation and the need to minimize thread divergence and maximize memory coalescing pose particular challenges to efficient implementation of irregular algorithms. Nevertheless, some recent successes in hand-porting irregular codes suggest that the difficulties lie not in the GPU hardware but in the immaturity of the state of the art of writing and tuning GPU code due to the lack of general, well-understood optimization techniques.&lt;br/&gt;&lt;br/&gt;This work will develop programming notations, compiler optimizations, and runtime system support that will enable programmers to express their algorithms at a high level of abstraction but still yield good performance. Projected tasks include producing highly optimized handwritten GPU implementations of important irregular algorithms and adding them to the LonestarGPU benchmark suite, identifying common patterns of optimizations and runtime systems support needed for efficient GPU implementations, developing a programming notation to permit the software developer to specify irregular algorithms at a high level of abstraction, implementing a synthesis system that automatically generates high-performance GPU code from these high-level specifications, and developing course material for teaching GPU programming of irregular codes.&lt;br/&gt;&lt;br/&gt;The higher performance and better energy efficiency of GPUs relative to multicore CPUs has sincere societal benifits. This work builds on the realization of these benefits by facilitating simpler and more widespread utilization of GPUs and incorporating more effective practices into future compilers and GPU hardware.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>09/10/2014</MinAmdLetterDate>
<MaxAmdLetterDate>09/14/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1406355</AwardID>
<Investigator>
<FirstName>Keshav</FirstName>
<LastName>Pingali</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Keshav Pingali</PI_FULL_NAME>
<EmailAddress>pingali@cs.utexas.edu</EmailAddress>
<PI_PHON>5122326567</PI_PHON>
<NSF_ID>000101776</NSF_ID>
<StartDate>09/10/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787121532</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~335514</FUND_OBLG>
<FUND_OBLG>2016~199564</FUND_OBLG>
<FUND_OBLG>2017~204576</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project developed programming notations, compiler optimizations, and runtime systems to enable programmers to program their applications at a high level but still obtain good performance on systems with GPUs or GPU-like accelerators.</p> <p>A new programming model and runtime system called Groute was implemented, and&nbsp; many applications were written using Groute. Experimental results show that with Groute, it is possible to implement applications for multiple GPUs that in most cases outperform state-of-the-art implementations, yielding up to 7X speedup on 8 GPUs compared to a baseline execution on a single GPU. Therefore Grout enables efficient implementation of complex graph analytic algorithms.</p> <p>Studies were conducted to determine how to run graph analytics applications on Intel Optane DC Persistent Memory (Optane PMM) and large-memory systems in general. This technology enables the design of systems that support up to 6TB of randomly accessible memory at relatively low cost. The study showed that Optane PMM can overcome the limitation of main memory for most single machine systems.</p> <p>The project also produced a new and efficient algorithm for hypergraph partitioning, an important application used in chip design and logic optimization. BiPart, the new algorithm, can partition a hypergraph with millions of nodes and hyperedges in just a few seconds. Experiments show that BiPart can produce quality partitions more than 10x faster than the current state of the art hypergraph partitioner. BiPart is being used in a DARPA project on open-source tools for chip design.</p> <p>These codes have been released publicly and they have been downloaded hundreds of times by other researchers.</p><br> <p>            Last Modified: 03/07/2021<br>      Modified by: Keshav&nbsp;Pingali</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project developed programming notations, compiler optimizations, and runtime systems to enable programmers to program their applications at a high level but still obtain good performance on systems with GPUs or GPU-like accelerators.  A new programming model and runtime system called Groute was implemented, and  many applications were written using Groute. Experimental results show that with Groute, it is possible to implement applications for multiple GPUs that in most cases outperform state-of-the-art implementations, yielding up to 7X speedup on 8 GPUs compared to a baseline execution on a single GPU. Therefore Grout enables efficient implementation of complex graph analytic algorithms.  Studies were conducted to determine how to run graph analytics applications on Intel Optane DC Persistent Memory (Optane PMM) and large-memory systems in general. This technology enables the design of systems that support up to 6TB of randomly accessible memory at relatively low cost. The study showed that Optane PMM can overcome the limitation of main memory for most single machine systems.  The project also produced a new and efficient algorithm for hypergraph partitioning, an important application used in chip design and logic optimization. BiPart, the new algorithm, can partition a hypergraph with millions of nodes and hyperedges in just a few seconds. Experiments show that BiPart can produce quality partitions more than 10x faster than the current state of the art hypergraph partitioner. BiPart is being used in a DARPA project on open-source tools for chip design.  These codes have been released publicly and they have been downloaded hundreds of times by other researchers.       Last Modified: 03/07/2021       Submitted by: Keshav Pingali]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
