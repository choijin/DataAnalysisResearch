<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: FULL: CCA: Collaborative Research: Cache-Adaptive Algorithms: How to Share Core among Many Cores</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>799999.00</AwardTotalIntnAmount>
<AwardAmount>799999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project will develop theoretical and algorithmic foundations for writing programs that efficiently share limited memory on multi-core computers. On a multi-core computer, each process is allocated some share of the memory, but its share can fluctuate over time as other processes start, stop, and change their demands for memory. Most of today's programs do not cope well with memory fluctuations -- they have difficulty taking full advantage of additional memory freed up by other processes and they can slow to a crawl when their memory allocation decreases.&lt;br/&gt;&lt;br/&gt;By enabling programmers to write software that can adapt to memory fluctuations, this research will provide new levels of flexibility, performance, and resource utilization for scientific and commercial applications running on shared-memory multi-core infrastructure. Cloud services will respond more rapidly to changes in workload. High-performance-computing applications will achieve higher memory utilization, enabling scientists to do more with less hardware. By creating a more efficient and flexible computing infrastructure, this project has the potential to accelerate the pace of discovery in other scientific fields.  For example, biological applications such as protein docking are likely to benefit from this research because the performance of current software is limited by contention for memory.&lt;br/&gt;&lt;br/&gt;This project will build upon the PIs' recently proposed notion of cache-adaptive algorithms, i.e., algorithms that automatically adapt to memory fluctuations.  This project will develop cache-adaptive theory and applications in four ways:&lt;br/&gt;&lt;br/&gt;1. The PIs will extend cache-adaptive analytical techniques to apply to more algorithms, such as cache-oblivious FFT and cache-oblivious serial and parallel dynamic programs.&lt;br/&gt;2. The PIs will develop the foundations of cache-adaptive data structures, such as cache-adaptive priority queues.&lt;br/&gt;3. The PIs will measure the impact of adaptivity on actual performance, focusing on cache-adaptive sorting, serial and parallel dynamic programs, and stencil computations.&lt;br/&gt;4. The PIs will implement cache-adaptive parallel software for computational biology applications, such as protein-protein docking, dynamic programs, and other HPC simulations.&lt;br/&gt;&lt;br/&gt;The PIs will offer courses on parallel algorithms, parallel programming, cache-efficient and external-memory algorithms as part of a new degree program in computational sciences that is being launched at Stony Brook through its recently established Institute for Advanced Computational Sciences (IACS).  These courses are designed to disseminate high-performance computing research results to students and faculty in other fields, such as physics, chemistry, biology and math.  The PIs will also design a course, targeted at computer science students, on theoretical and systems aspects of external memory computing in the context of big data, databases, and file systems. The PIs will use super-computing resources from the XSEDE program, giving students access to some of the world?s fastest supercomputing clusters for their programming assignments and course projects.&lt;br/&gt;&lt;br/&gt;The PIs will engage in outreach and dissemination by organizing parallel programming workshops as part of the IACS and in collaboration for Brookhaven National Labs.  PIs will also give tutorials on parallel computing, memory-efficient computing, and big data and at conferences and at other universities.</AbstractNarration>
<MinAmdLetterDate>08/01/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/01/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1439084</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Bender</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael A Bender</PI_FULL_NAME>
<EmailAddress>bender@cs.stonybrook.edu</EmailAddress>
<PI_PHON>6316327835</PI_PHON>
<NSF_ID>000092778</NSF_ID>
<StartDate>08/01/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Rob</FirstName>
<LastName>Johnson</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rob Johnson</PI_FULL_NAME>
<EmailAddress>rob@cs.stonybrook.edu</EmailAddress>
<PI_PHON>6316321643</PI_PHON>
<NSF_ID>000252323</NSF_ID>
<StartDate>08/01/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Rezaul</FirstName>
<LastName>Chowdhury</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rezaul A Chowdhury</PI_FULL_NAME>
<EmailAddress>rezaul@cs.stonybrook.edu</EmailAddress>
<PI_PHON>6316328959</PI_PHON>
<NSF_ID>000599542</NSF_ID>
<StartDate>08/01/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Stony Brook</Name>
<CityName>Stony Brook</CityName>
<ZipCode>117940001</ZipCode>
<PhoneNumber>6316329949</PhoneNumber>
<StreetAddress>WEST 5510 FRK MEL LIB</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804878247</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020657151</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SUNY at Stony Brook]]></Name>
<CityName>Stony Brook</CityName>
<StateCode>NY</StateCode>
<ZipCode>117944400</ZipCode>
<StreetAddress><![CDATA[Stony Brook University]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8283</Code>
<Text>Exploiting Parallel&amp;Scalabilty</Text>
</ProgramElement>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~799999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-1ef52283-7fff-f48f-95ec-b8ef20372b8f"> </span></p> <p dir="ltr"><span>This project explored techniques for sharing a multi-core computer&rsquo;s scarce RAM among many programs so that each program can make good progress.&nbsp; On a multi-core computer, each process is allocated some share of the memory, but its share can fluctuate over time as other processes start, stop, and change their demands for memory.&nbsp; Most of today&rsquo;s programs do not cope well with memory fluctuations -- they have difficulty taking full advantage of additional memory freed up by other processes and they can slow to a crawl when their memory allocation decreases.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>When computers and programs do a bad job of sharing RAM, they can run slowly due to excessive &ldquo;swapping&rdquo;, i.e., shuffling data between fast RAM and slower disks.&nbsp; Almost everyone has at some point experienced poor performance on their personal computer or smart phone due to swapping, and it is an important issue on cloud servers and scientific supercomputers, as well.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>The project created a theoretical framework for reasoning about program performance when programs must share a fixed amount of RAM.&nbsp; Almost all prior work had assumed that every program has exclusive access to all the RAM in the computer.  The PIs used the framework to show that numerous existing algorithms are optimally &ldquo;adaptive&rdquo;, i.e., they gracefully react to changes in their share of the computer&rsquo;s RAM.&nbsp; They also showed that several important algorithms are </span><span>not</span><span> adaptive, and gave a rule-of-thumb for algorithm designers who want to make adaptive algorithms.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>The PIs developed new algorithms for a class of problems called &ldquo;dynamic programs&rdquo;.&nbsp; Dynamic programs are at the heart of many other problems, such as finding routes in computer and road networks, aligning new genetic data to existing reference genomes, and analyzing how proteins fold.&nbsp; The PIs implemented these algorithms in new software tools.  Their tools for these problems are 5-150x faster than prior solutions.  Furthermore, their algorithms are highly parallel, meaning they can utilize all the cores on modern many-core computers.&nbsp; The PIs have also developed techniques to automatically transform many classical algorithms into fast algorithms that follow their methodology.</span></p> <p>&nbsp;</p> <p dir="ltr"><span>In summary, this project has created new tools that practitioners can use to analyze data hundreds of times faster and has created a theoretical framework to help future algorithms designers develop high-performance algorithms.</span></p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/28/2019<br>      Modified by: Michael&nbsp;A&nbsp;Bender</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   This project explored techniques for sharing a multi-core computer?s scarce RAM among many programs so that each program can make good progress.  On a multi-core computer, each process is allocated some share of the memory, but its share can fluctuate over time as other processes start, stop, and change their demands for memory.  Most of today?s programs do not cope well with memory fluctuations -- they have difficulty taking full advantage of additional memory freed up by other processes and they can slow to a crawl when their memory allocation decreases.    When computers and programs do a bad job of sharing RAM, they can run slowly due to excessive "swapping", i.e., shuffling data between fast RAM and slower disks.  Almost everyone has at some point experienced poor performance on their personal computer or smart phone due to swapping, and it is an important issue on cloud servers and scientific supercomputers, as well.    The project created a theoretical framework for reasoning about program performance when programs must share a fixed amount of RAM.  Almost all prior work had assumed that every program has exclusive access to all the RAM in the computer.  The PIs used the framework to show that numerous existing algorithms are optimally "adaptive", i.e., they gracefully react to changes in their share of the computer?s RAM.  They also showed that several important algorithms are not adaptive, and gave a rule-of-thumb for algorithm designers who want to make adaptive algorithms.    The PIs developed new algorithms for a class of problems called "dynamic programs".  Dynamic programs are at the heart of many other problems, such as finding routes in computer and road networks, aligning new genetic data to existing reference genomes, and analyzing how proteins fold.  The PIs implemented these algorithms in new software tools.  Their tools for these problems are 5-150x faster than prior solutions.  Furthermore, their algorithms are highly parallel, meaning they can utilize all the cores on modern many-core computers.  The PIs have also developed techniques to automatically transform many classical algorithms into fast algorithms that follow their methodology.    In summary, this project has created new tools that practitioners can use to analyze data hundreds of times faster and has created a theoretical framework to help future algorithms designers develop high-performance algorithms.             Last Modified: 10/28/2019       Submitted by: Michael A Bender]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
