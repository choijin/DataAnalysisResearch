<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: FULL: CCA:  Scalable Approximate Computing for Data Parallel Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>850000.00</AwardTotalIntnAmount>
<AwardAmount>850000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Yuanyuan Yang</SignBlockName>
<PO_EMAI>yyang@nsf.gov</PO_EMAI>
<PO_PHON>7032928067</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Data parallel applications are an important class of problems where energy consumption is a barrier to future performance scaling.  These applications provide a paradigm where thousands of threads are concurrently executed on parallel hardware.  A key characteristic shared by many of these applications is that absolute correctness of the output is not essential for proper operation.  This opens up a new design dimension for microprocessors to trade off performance and energy consumption with output correctness.  Image and video processing applications are well known candidates for approximation as users can tolerate occasional dropped frames or small losses in resolution during video playback.  Machine learning and data analysis on massive data sets provide opportunities to process subsets of input data in a fraction of the time, while still yielding representative results.  This project will design and develop the enabling application analysis, compiler, and run-time software technologies to facilitate scalable approximate computing.  Our goal is to increase the execution efficiency of data-parallel applications by an order of magnitude on commodity hardware by trading off small, user-controlled levels of output accuracy for increased efficiency.  By creating enabling technologies, we expect approximate computing to become pervasive, enabling data-intensive computing to be integrated into more aspects of life.  Outreach activities will introduce data-parallel computing and energy efficiency to a new generation of high school students through an effort to reach out to local high schools.&lt;br/&gt;&lt;br/&gt;This project uses a vertically integrated approach that combines deep application analysis, automatic generation of approximate kernels, and a run-time system that seamlessly manages approximate execution.  First, deep analysis of compute-intensive mobile and datacenter applications will automatically identify code regions that are amenable to approximation.  Second, an idiom recognition and replacement approach is used to identify common computation patterns and synthesize approximate versions with varying degrees of accuracy.  Third, sampling-based approaches as well as predictive strategies that perform approximate checking will be explored to ensure that output quality degradation does not exceed a user-specified threshold.  Finally, a run-time compiler and management layer orchestrates the usage of approximate kernels and error checking while ensuring user error thresholds are honored.</AbstractNarration>
<MinAmdLetterDate>07/17/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1438996</AwardID>
<Investigator>
<FirstName>Scott</FirstName>
<LastName>Mahlke</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Scott Mahlke</PI_FULL_NAME>
<EmailAddress>mahlke@eecs.umich.edu</EmailAddress>
<PI_PHON>7349361602</PI_PHON>
<NSF_ID>000296943</NSF_ID>
<StartDate>07/17/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Zhuoqing</FirstName>
<LastName>Mao</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zhuoqing M Mao</PI_FULL_NAME>
<EmailAddress>zmao@umich.edu</EmailAddress>
<PI_PHON>7347635407</PI_PHON>
<NSF_ID>000490161</NSF_ID>
<StartDate>07/17/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Lingjia</FirstName>
<LastName>Tang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Lingjia Tang</PI_FULL_NAME>
<EmailAddress>lingjia@umich.edu</EmailAddress>
<PI_PHON>4344092501</PI_PHON>
<NSF_ID>000628990</NSF_ID>
<StartDate>07/17/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jason</FirstName>
<LastName>Mars</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jason Mars</PI_FULL_NAME>
<EmailAddress>profmars@umich.edu</EmailAddress>
<PI_PHON>7347633229</PI_PHON>
<NSF_ID>000629579</NSF_ID>
<StartDate>07/17/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Regents of the University of Michigan - Ann Arbor</Name>
<CityName>Ann Arbor</CityName>
<ZipCode>481091274</ZipCode>
<PhoneNumber>7347636438</PhoneNumber>
<StreetAddress>3003 South State St. Room 1062</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI12</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>073133571</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF MICHIGAN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>073133571</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Michigan Ann Arbor]]></Name>
<CityName>Ann Arbor</CityName>
<StateCode>MI</StateCode>
<ZipCode>481092121</ZipCode>
<StreetAddress><![CDATA[2260 Hayward, Rm. 4633 BBB]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~850000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A key characteristic shared by many media and sensory data processing algorithms is that absolute correctness of the output data is not required. Rather, some degree of variation or error can be tolerated due to the inherent approximative nature of the algorithm (e.g., machine learning or data analysis) or because the human cannot perceive significant output differences (e.g., computer vision and image/video processing). The objective of this project is to systematically transform the opportunity for reduced output quality into higher performance, lower energy consumption, or both.</p> <p>This project focuses on creating the core technologies for approximate computing to go from a seldom used technique to a pervasive technology that can be readily deployed. The project outcomes center around answering the following three questions: Can effective approximation be applied on commodity computer systems to a broad set of applications?, How to control approximation error?, and How to deploy a transparent approximate computing system?&nbsp; For the first question, the project demonstrated that software-only approximate computing is both practical and effective across a range of imaging processing, machine learning and data analytics applications.&nbsp; Modern computer systems consisting of standard processors and graphics processing units can readily support software approximation and pattern-based identification of common code templates can be used to identify approximatable code segments in large applications.&nbsp; For the second question, a key outcome is that the majority of approximation error stems from a small set of inputs that generate relatively large errors.&nbsp; These inputs can be accurately identified using simple machine learning models to learn the characteristics of such inputs and invoke more conservative approximation methods for such input instances.&nbsp; A prototype run-time system, Rumba, was developed to predict approximation errors using a decision tree and eliminate virtually all large approximation errors with minimal false positives.&nbsp; Finally, for the third question, the project demonstrates that a dynamic compiler system can effectively perform transparent approximate computing.&nbsp; A prototype system called input responsive approximation, or IRA, automatically identifies opportunities for approximation removing the need for programmer involvement, adapts the aggressiveness of the approximation both based on the user?s target output quality metric as well as the characteristics of the application input, and provides statistical guarantees on output quality by validating the approximation methods on a small statistically representative sample of the input at run-time.</p> <p>The outcomes of this project that have broader impact include several notable items.&nbsp; First, the project supported six students obtaining their PhD degrees in Computer Science and Engineering from the University of Michigan, including one female student.&nbsp; The project partially supported several other students who are nearing completion of their graduate degrees.&nbsp; Second, the research was disseminated to the broader community through numerous conference and journal publications, two of which were honored with a Best Paper Award nomination and a Top Picks in Computer Architecture Honorable Mention.&nbsp; Third, the technology was transferred to several industry partners through seminars presented at numerous industry research and development groups as well as summer internships for the students supported by this project at leading technology companies.&nbsp; The University of Michigan was curriculum was augmented to include discussions of approximate computing techniques and challenges in the compiler and computer organization classes.&nbsp; The graduate compilers course featured several lectures on approximate computing and encouraged class projects on the topic using software infrastructure provided by this project as a basis.</p> <p>&nbsp;</p><br> <p>            Last Modified: 02/06/2019<br>      Modified by: Scott&nbsp;Mahlke</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A key characteristic shared by many media and sensory data processing algorithms is that absolute correctness of the output data is not required. Rather, some degree of variation or error can be tolerated due to the inherent approximative nature of the algorithm (e.g., machine learning or data analysis) or because the human cannot perceive significant output differences (e.g., computer vision and image/video processing). The objective of this project is to systematically transform the opportunity for reduced output quality into higher performance, lower energy consumption, or both.  This project focuses on creating the core technologies for approximate computing to go from a seldom used technique to a pervasive technology that can be readily deployed. The project outcomes center around answering the following three questions: Can effective approximation be applied on commodity computer systems to a broad set of applications?, How to control approximation error?, and How to deploy a transparent approximate computing system?  For the first question, the project demonstrated that software-only approximate computing is both practical and effective across a range of imaging processing, machine learning and data analytics applications.  Modern computer systems consisting of standard processors and graphics processing units can readily support software approximation and pattern-based identification of common code templates can be used to identify approximatable code segments in large applications.  For the second question, a key outcome is that the majority of approximation error stems from a small set of inputs that generate relatively large errors.  These inputs can be accurately identified using simple machine learning models to learn the characteristics of such inputs and invoke more conservative approximation methods for such input instances.  A prototype run-time system, Rumba, was developed to predict approximation errors using a decision tree and eliminate virtually all large approximation errors with minimal false positives.  Finally, for the third question, the project demonstrates that a dynamic compiler system can effectively perform transparent approximate computing.  A prototype system called input responsive approximation, or IRA, automatically identifies opportunities for approximation removing the need for programmer involvement, adapts the aggressiveness of the approximation both based on the user?s target output quality metric as well as the characteristics of the application input, and provides statistical guarantees on output quality by validating the approximation methods on a small statistically representative sample of the input at run-time.  The outcomes of this project that have broader impact include several notable items.  First, the project supported six students obtaining their PhD degrees in Computer Science and Engineering from the University of Michigan, including one female student.  The project partially supported several other students who are nearing completion of their graduate degrees.  Second, the research was disseminated to the broader community through numerous conference and journal publications, two of which were honored with a Best Paper Award nomination and a Top Picks in Computer Architecture Honorable Mention.  Third, the technology was transferred to several industry partners through seminars presented at numerous industry research and development groups as well as summer internships for the students supported by this project at leading technology companies.  The University of Michigan was curriculum was augmented to include discussions of approximate computing techniques and challenges in the compiler and computer organization classes.  The graduate compilers course featured several lectures on approximate computing and encouraged class projects on the topic using software infrastructure provided by this project as a basis.          Last Modified: 02/06/2019       Submitted by: Scott Mahlke]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
