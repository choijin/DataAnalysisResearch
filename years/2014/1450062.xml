<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER:  Combining Data and Instruction Level Parallelism through Demand Driven Execution of Imperative Programs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>97944.00</AwardTotalIntnAmount>
<AwardAmount>113910</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: EAGER: Combining Data and Instruction Level Parallelism through Demand Driven Execution of Imperative Programs&lt;br/&gt;&lt;br/&gt;This project advances a new execution paradigm, namely, demand-driven execution (DDE) of imperative programs. It studies the feasibility of the paradigm by establishing theoretical performance bounds, and identifying its key scalability aspects. The primary intellectual merit of the proposal is the DDE methodology and its use in removing impediments to parallelism due to data flow and control flow. The project's broader significance and importance stems from its impact on the design of future processors, and its synergistic use of compilers and microarchitectures. Processors built using the DDE approach can better utilize computing resources and are energy efficient.&lt;br/&gt;&lt;br/&gt;The basic idea behind the DDE methodology is to compile C-like programs such that both instruction-level and data-level parallelism can be used through a collaboration between compilers and microarchitectures. The basis for this collaboration is an executable, intermediate program representation known as "Future Gated Single Assignment" (FGSA) form into which a source program is compiled. The FGSA representation not only can be used by an optimizing compiler but also can be used as hardware instructions which can be directly executed by the microarchitecture.</AbstractNarration>
<MinAmdLetterDate>08/19/2014</MinAmdLetterDate>
<MaxAmdLetterDate>04/29/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1450062</AwardID>
<Investigator>
<FirstName>Soner</FirstName>
<LastName>Onder</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Soner Onder</PI_FULL_NAME>
<EmailAddress>soner@mtu.edu</EmailAddress>
<PI_PHON>9064872123</PI_PHON>
<NSF_ID>000207375</NSF_ID>
<StartDate>08/19/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Michigan Technological University</Name>
<CityName>Houghton</CityName>
<ZipCode>499311295</ZipCode>
<PhoneNumber>9064871885</PhoneNumber>
<StreetAddress>1400 Townsend Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>065453268</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MICHIGAN TECHNOLOGICAL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>065453268</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Michigan Technological University]]></Name>
<CityName>Houghton</CityName>
<StateCode>MI</StateCode>
<ZipCode>499311295</ZipCode>
<StreetAddress><![CDATA[1400 Townsend Dr]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~97944</FUND_OBLG>
<FUND_OBLG>2015~15966</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Currently there are two well-known execution paradigms: control-flow execution and data-flow execution. Almost all existing processors rely on the control-flow execution model, also known as Von Neumann computing model, in which the processor executes instructions more or less in sequence. An alternative execution model called data-flow executes instructions based on availability of their operands. This form of execution is used in signal processing as well as recently developed "accelerators" which help speed-up the execution of programs. This project explored an alternative execution paradigm called demand-driven execution which executes programs by starting from the outputs of the program, at each step computing what is necessary, progressing towards the inputs of the program.</p> <p>The project has investigated two primary questions. The first is the viability of translating programs from conventional programming languages such as C, Java, or Fortran into a form suitable for execution by a processor designed around this paradigm. The second is the scalability of the paradigm in terms of parallel execution.</p> <p>The project has laid-out some of the key principles in designing such architectures, and in our opinion has demonstrated that programs written in conventional programming languages can be mechanically translated to a form which can be efficiently executed under this paradigm. Additionally, the project illustrated that very high degrees of instruction-level parallelism can be achieved under the paradigm from unmodified scientific kernels. While this project is exploratory and further studies are needed to establish the effectiveness of this paradigm in a variety of domains, there is reason to believe that such architectures may be better building blocks for future systems, from hand-held devices to large scale supercomputers. Such systems can provide significant benefits to society by allowing the use of simple sequential programming languages while harvesting similar performance to what is achievable by programming parallel computers with parallel programming languages.</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/28/2016<br>      Modified by: Soner&nbsp;Onder</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Currently there are two well-known execution paradigms: control-flow execution and data-flow execution. Almost all existing processors rely on the control-flow execution model, also known as Von Neumann computing model, in which the processor executes instructions more or less in sequence. An alternative execution model called data-flow executes instructions based on availability of their operands. This form of execution is used in signal processing as well as recently developed "accelerators" which help speed-up the execution of programs. This project explored an alternative execution paradigm called demand-driven execution which executes programs by starting from the outputs of the program, at each step computing what is necessary, progressing towards the inputs of the program.  The project has investigated two primary questions. The first is the viability of translating programs from conventional programming languages such as C, Java, or Fortran into a form suitable for execution by a processor designed around this paradigm. The second is the scalability of the paradigm in terms of parallel execution.  The project has laid-out some of the key principles in designing such architectures, and in our opinion has demonstrated that programs written in conventional programming languages can be mechanically translated to a form which can be efficiently executed under this paradigm. Additionally, the project illustrated that very high degrees of instruction-level parallelism can be achieved under the paradigm from unmodified scientific kernels. While this project is exploratory and further studies are needed to establish the effectiveness of this paradigm in a variety of domains, there is reason to believe that such architectures may be better building blocks for future systems, from hand-held devices to large scale supercomputers. Such systems can provide significant benefits to society by allowing the use of simple sequential programming languages while harvesting similar performance to what is achievable by programming parallel computers with parallel programming languages.          Last Modified: 11/28/2016       Submitted by: Soner Onder]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
