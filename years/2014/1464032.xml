<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CRII: SHF: SimDB: An Automated Framework to Debug System-level Concurrency Faults</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2015</AwardEffectiveDate>
<AwardExpirationDate>02/28/2018</AwardExpirationDate>
<AwardTotalIntnAmount>174648.00</AwardTotalIntnAmount>
<AwardAmount>190648</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern computer systems utilize multiple CPUs, connect to a large array of peripheral devices, and sense their surroundings through various sensors and actuators. The increasing complexity of these systems can cause software that runs on them to suffer from deployment failures due to various forms of concurrency faults. When a software failure occurs in the deployed system, developers need to debug the system and find the cause of the failure in a timely manner. Unfortunately, debugging large complex concurrent software systems is difficult. This is because concurrency faults occur ?intermittently? and are thus difficult to reproduce, unless there is a specific interleaving that can cause such faults to occur. For example, a failure may involve participation of various software components and system events; reproducing these may require recreating a combination of many factors or specific system environment settings (e.g., hardware,network). &lt;br/&gt;&lt;br/&gt;The goal of this project is to provide an automated framework that allows engineers to effectively debug system-level concurrency faults in deployed systems. To achieve this goal, the project will investigate and develop advanced static and dynamic analysis techniques. Specifically, it will (i) develop light-weight static analysis techniques that can identify potential failure-inducing program paths; (ii) develop dynamic analysis techniques by using virtualization to effectively reproduce failures that occur in the deployed systems due to nondeterministic and heterogeneous system events; (iii) implement an automated debugging framework that provides rich user interfaces to facilitate in-house debugging processes. The outcome of this project will be a framework that is scalable, transparent, and capable of dealing with broad classes of concurrency faults. The process by which the framework is employed is mostly automated so it requires little human intervention. As such, the framework is expected to help developers understand and correct failures in deployed systems, with benefits to all who depend on such systems.</AbstractNarration>
<MinAmdLetterDate>03/23/2015</MinAmdLetterDate>
<MaxAmdLetterDate>05/12/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1464032</AwardID>
<Investigator>
<FirstName>Tingting</FirstName>
<LastName>Yu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tingting Yu</PI_FULL_NAME>
<EmailAddress>tyu@cs.uky.edu</EmailAddress>
<PI_PHON>8592579420</PI_PHON>
<NSF_ID>000677534</NSF_ID>
<StartDate>03/23/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Kentucky Research Foundation</Name>
<CityName>Lexington</CityName>
<ZipCode>405260001</ZipCode>
<PhoneNumber>8592579420</PhoneNumber>
<StreetAddress>109 Kinkead Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Kentucky</StateName>
<StateCode>KY</StateCode>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>KY06</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>939017877</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF KENTUCKY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007400724</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Kentucky Research Foundation]]></Name>
<CityName>Lexington</CityName>
<StateCode>KY</StateCode>
<ZipCode>405260001</ZipCode>
<StreetAddress><![CDATA[500 S Limestone 109 Kinkead Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Kentucky</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>KY06</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>8228</Code>
<Text>CISE Resrch Initiatn Initiatve</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~174648</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 16"> <div class="layoutArea"> <div class="column"> <p>Modern computer software systems are very complex and&nbsp;can result in varieties of concurrency faults in the deployment environment that can be difficult to identify, isolate, and correct. This research provides a set of novel techniques that empower software engineers to debug system-level concurrency faults for deployed systems. Unlike existing techniques that focus on single software applications, this research is implemented as the first&nbsp;fully automated approach for debugging applications involving multiple processes by using only default logs collected from deployment environment. Where empirical work is concerned, the approach is evaluated on a set of large-scale real-world applications. The&nbsp;experimental results show that the approach can successfully reproduce concurrency failures in 91.2% of applications. Further, &nbsp;the time taken by the approach to reproduce failures is typically a few minutes, indicating that the proposed method is efficient for practical use.</p> <p>This research yields several&nbsp;broader impacts. First,&nbsp;the research exposes important dimensions of complex software systems and&nbsp;thus opens a new avenue of software engineering research. Second, the project provides both undergraduate and graduate students&nbsp;with research experience that crosses traditional boundaries between systems and software engineering. Third, by making associated tools and data for experimentation available, our research can potentially enable&nbsp;experimentation and training of IT professionals and&nbsp;students at other institutions. Fourth, the accomplished project directly contributes to the goals of addressing problems fundamental to improving software&nbsp;quality and, thus, is likely to benefit all&nbsp;segments of society that depend on software.</p> </div> </div> </div> <p>&nbsp;</p><br> <p>            Last Modified: 06/27/2018<br>      Modified by: Tingting&nbsp;Yu</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2018/1464032/1464032_10355175_1530123322593_overview--rgov-214x142.jpg" original="/por/images/Reports/POR/2018/1464032/1464032_10355175_1530123322593_overview--rgov-800width.jpg" title="Overview"><img src="/por/images/Reports/POR/2018/1464032/1464032_10355175_1530123322593_overview--rgov-66x44.jpg" alt="Overview"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Overview of the Automated Debugging Framework.</div> <div class="imageCredit">1</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Tingting&nbsp;Yu</div> <div class="imageTitle">Overview</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    Modern computer software systems are very complex and can result in varieties of concurrency faults in the deployment environment that can be difficult to identify, isolate, and correct. This research provides a set of novel techniques that empower software engineers to debug system-level concurrency faults for deployed systems. Unlike existing techniques that focus on single software applications, this research is implemented as the first fully automated approach for debugging applications involving multiple processes by using only default logs collected from deployment environment. Where empirical work is concerned, the approach is evaluated on a set of large-scale real-world applications. The experimental results show that the approach can successfully reproduce concurrency failures in 91.2% of applications. Further,  the time taken by the approach to reproduce failures is typically a few minutes, indicating that the proposed method is efficient for practical use.  This research yields several broader impacts. First, the research exposes important dimensions of complex software systems and thus opens a new avenue of software engineering research. Second, the project provides both undergraduate and graduate students with research experience that crosses traditional boundaries between systems and software engineering. Third, by making associated tools and data for experimentation available, our research can potentially enable experimentation and training of IT professionals and students at other institutions. Fourth, the accomplished project directly contributes to the goals of addressing problems fundamental to improving software quality and, thus, is likely to benefit all segments of society that depend on software.             Last Modified: 06/27/2018       Submitted by: Tingting Yu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
