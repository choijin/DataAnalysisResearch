<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: EXPL: FP: Architecture and Software for Scalable Persistent Memory</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>269735.00</AwardTotalIntnAmount>
<AwardAmount>269735</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Emerging Storage Class Memory (SCM) technologies combine the non-volatility of storage devices like hard disks and solid state drives (SSDs) with the ability to access data at byte granularity rather than at a block level. Application developers can focus on a single fine-grained storage abstraction, rather than deal with word-granularity access for DRAM memory and a block interface for file-based disk storage. Accessing data directly from SCM instead of software-arbitrated block access has significant performance advantages, especially for modern data intensive applications based on graph and relation processing. However the use of direct SCM access places a significant burden on the application to achieve transactional and robust execution in the presence of unexpected machines failures and software aborts. &lt;br/&gt;&lt;br/&gt;The research will identify lightweight, scalable architectural and software techniques for developing robust SCM-based software.  The goal is to make the development of software for persistent memory comparable to programming conventional DRAM main-memory by relieving the programmer from the complexities of managing transactional atomicity and persistence. Both hardware solutions based on enhancements to the processor and memory-controller architecture, and software approaches in the form of a lightweight persistence library will be developed. The techniques will be scaled up to handle multiple threads and cores, and scale out to multiple CPU sockets and to distributed clustered architectures.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>07/28/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/28/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1439075</AwardID>
<Investigator>
<FirstName>Peter</FirstName>
<LastName>Varman</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Peter J Varman</PI_FULL_NAME>
<EmailAddress>pjv@rice.edu</EmailAddress>
<PI_PHON>7135273990</PI_PHON>
<NSF_ID>000378151</NSF_ID>
<StartDate>07/28/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>William Marsh Rice University</Name>
<CityName>Houston</CityName>
<ZipCode>770051827</ZipCode>
<PhoneNumber>7133484820</PhoneNumber>
<StreetAddress>6100 MAIN ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>050299031</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>WILLIAM MARSH RICE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>050299031</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[William Marsh Rice University]]></Name>
<CityName>Houston</CityName>
<StateCode>TX</StateCode>
<ZipCode>770051827</ZipCode>
<StreetAddress><![CDATA[6100 Main St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8283</Code>
<Text>Exploiting Parallel&amp;Scalabilty</Text>
</ProgramElement>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~269735</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goals of the project were to develop mechanisms to support atomic and durable concurrent transactions in emerging persistent memory devices, exemplified by the recent Apache Pass memory chips from Intel. These devices have capacity, speed, and power advantages over traditional block-based non-volatile media, and can be addressed directly by the programmer at word granularity using Load and Store instructions. This fast, direct access to non-volatile storage is at odds with existing transactional systems; in traditional systems, the low speed of the IO devices permit these accesses to be mediated by costly operating system or dedicated database management software. However, with persistent memory, applications must now deal with ensuring the consistency of the persistent medium in the presence of unexpected aborts caused by failures or exceptions.</p> <p>Several solutions for durable transaction support were developed in the project based on the idea of Write-aside Persistence (WrAP). WrAP aims to allow applications to execute at near-native speeds using the processor caches, while relegating persistence operations to the background. A software implementation was developed and embodied in a library called SoftWrap; the approach uses aliasing and redo logging to ensure atomicity by preventing untimely cache evictions from corrupting persistent memory. Another solution was based on employing simple hardware support in the memory controller to regulate the times at which evicted cache lines can be safely written back to persistent memory. In these solutions, isolation between concurrent threads was enforced by software-based locking. The mechanisms were evaluated using both micro benchmarks as well as by adapting an open-source in-memory database system for persistent memory.</p> <p>An additional component of the project dealt with using Hardware Transaction Memory (HTM) for durable persistent-memory transactions. HTM is a feature of high-end CPUs that uses processor mechanisms to ensure efficient transactional in-memory execution of concurrent threads. An additional challenge when using HTM with persistent memory is to ensure that the durable transaction ordering is consistent with the in-memory transaction ordering enforced by the HTM. Solutions based on extending SoftWrap as well as by extending the memory-controller design were developed and evaluated.&nbsp; Both emulation as well as implementation on early experimental Apache Pass hardware systems made available by Intel were used for evaluations. These are the first solutions that can be implemented on existing processor hardware without changes to the processor cache hierarchy or HTM mechanisms.</p> <p>The work supported the research of a graduate student for both an MS and a Ph.D. Several undergraduates were also involved in aspects of the research. There has also been considerable interest from industry in the work.</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/04/2018<br>      Modified by: Peter&nbsp;J&nbsp;Varman</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goals of the project were to develop mechanisms to support atomic and durable concurrent transactions in emerging persistent memory devices, exemplified by the recent Apache Pass memory chips from Intel. These devices have capacity, speed, and power advantages over traditional block-based non-volatile media, and can be addressed directly by the programmer at word granularity using Load and Store instructions. This fast, direct access to non-volatile storage is at odds with existing transactional systems; in traditional systems, the low speed of the IO devices permit these accesses to be mediated by costly operating system or dedicated database management software. However, with persistent memory, applications must now deal with ensuring the consistency of the persistent medium in the presence of unexpected aborts caused by failures or exceptions.  Several solutions for durable transaction support were developed in the project based on the idea of Write-aside Persistence (WrAP). WrAP aims to allow applications to execute at near-native speeds using the processor caches, while relegating persistence operations to the background. A software implementation was developed and embodied in a library called SoftWrap; the approach uses aliasing and redo logging to ensure atomicity by preventing untimely cache evictions from corrupting persistent memory. Another solution was based on employing simple hardware support in the memory controller to regulate the times at which evicted cache lines can be safely written back to persistent memory. In these solutions, isolation between concurrent threads was enforced by software-based locking. The mechanisms were evaluated using both micro benchmarks as well as by adapting an open-source in-memory database system for persistent memory.  An additional component of the project dealt with using Hardware Transaction Memory (HTM) for durable persistent-memory transactions. HTM is a feature of high-end CPUs that uses processor mechanisms to ensure efficient transactional in-memory execution of concurrent threads. An additional challenge when using HTM with persistent memory is to ensure that the durable transaction ordering is consistent with the in-memory transaction ordering enforced by the HTM. Solutions based on extending SoftWrap as well as by extending the memory-controller design were developed and evaluated.  Both emulation as well as implementation on early experimental Apache Pass hardware systems made available by Intel were used for evaluations. These are the first solutions that can be implemented on existing processor hardware without changes to the processor cache hierarchy or HTM mechanisms.  The work supported the research of a graduate student for both an MS and a Ph.D. Several undergraduates were also involved in aspects of the research. There has also been considerable interest from industry in the work.          Last Modified: 12/04/2018       Submitted by: Peter J Varman]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
