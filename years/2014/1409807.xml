<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Medium: Collaborative: Automated Reverse Engineering of Commodity Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software, including common examples such as commercial applications or embedded device firmware, is often delivered as closed-source binaries. While prior academic work has examined how to automatically discover vulnerabilities in binary software, and even how to automatically craft exploits for these vulnerabilities, the ability to answer basic security-relevant questions about closed-source software remains elusive.&lt;br/&gt;&lt;br/&gt;This project aims to provide algorithms and tools for answering these questions. Leveraging prior work on emulator-based dynamic analyses, we propose techniques for scaling this high-fidelity analysis to capture and extract whole-system behavior in the context of embedded device firmware and closed-source applications. Using a combination of dynamic execution traces collected from this analysis platform and binary code analysis techniques, we propose techniques for automated structural analysis of binary program artifacts, decomposing system and user-level programs into logical modules through inference of high-level semantic behavior. This decomposition provides as output an automatically learned description of the interfaces and information flows between each module at a sub-program granularity. Specific activities include: (a) developing software-guided whole-system emulator for supporting sophisticated dynamic analyses for real embedded systems; (b) developing advanced, automated techniques for structurally decomposing closed-source software into its constituent modules; (c) developing automated techniques for producing high-level summaries of whole system executions and software components; and (d) developing techniques for automating the reverse engineering and fuzz testing of encrypted network protocols. The research proposed herein will have a significant impact outside of the security research community. We will incorporate the research findings of our program into our undergraduate and graduate teaching curricula, as well as in extracurricular educational efforts such as Capture-the-Flag that have broad outreach in the greater Boston and Atlanta metropolitan areas.&lt;br/&gt;The close ties to industry that the collective PIs possess will facilitate transitioning the research into practical defensive tools that can be deployed into real-world systems and networks.</AbstractNarration>
<MinAmdLetterDate>08/04/2014</MinAmdLetterDate>
<MaxAmdLetterDate>03/06/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1409807</AwardID>
<Investigator>
<FirstName>Wenke</FirstName>
<LastName>Lee</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Wenke Lee</PI_FULL_NAME>
<EmailAddress>wenke@cc.gatech.edu</EmailAddress>
<PI_PHON>4048948384</PI_PHON>
<NSF_ID>000165836</NSF_ID>
<StartDate>03/06/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Tielei</FirstName>
<LastName>Wang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tielei Wang</PI_FULL_NAME>
<EmailAddress>twang99@mail.gatech.edu</EmailAddress>
<PI_PHON>4048944819</PI_PHON>
<NSF_ID>000658586</NSF_ID>
<StartDate>08/04/2014</StartDate>
<EndDate>03/06/2015</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>097394084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGIA TECH RESEARCH CORPORATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>097394084</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgia Institute of Technology]]></Name>
<CityName>Atlanta</CityName>
<StateCode>GA</StateCode>
<ZipCode>303320002</ZipCode>
<StreetAddress><![CDATA[225 North Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Cyberattacks are essentially exploits on vulnerabilities, in particular, the programming errors in software. Even the most widely used software, such as the Linux operating system and the major browsers, are riddled with security vulnerabilities. The research community has made a lot of progress in dealing with some of the most common bugs such as buffer-overflow. These are the shallow bugs in that it is (relatively) easy to identify them.</p> <p>This project has studied deeper security bugs in commodity software, including bad-type-casting that enables an attacker to corrupt memory, uninitialized reads that lead to kernel data leaks, and use-before-initialization that enables an attacker to control the kernel stack. This project has developed program analysis approaches that combine static checks and dynamic instrumentation to identify and mitigate these vulnerabilities. These approaches have been tested on large-scale commodity software including Linux kernel and the Chrome browser. The results show that these approaches are effective and more importantly, they can be efficiently applied either in compile-time and run-time. This project therefore significantly advances the state-of-the-art in software analysis and software security.</p> <p>The results of this project have been published in the top-tier security conferences including the USENIX Security Symposium, the ACM Conference on Computer and Communications Security, and the Network and Distributed System Security Symposium. In particular, the paper describing the bad-type-casting work, CAVER, won the Internet Defense Prize awarded by Facebook and USENIX in the 2015 USENIX Security Symposium. The CAVER system is now open-sourced.</p> <p>Three Ph.D. students completed their theses based on work in this project. They are now tenure-track assistant professors in major research universities in the US.</p> <p>&nbsp;</p><br> <p>            Last Modified: 03/19/2018<br>      Modified by: Wenke&nbsp;Lee</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Cyberattacks are essentially exploits on vulnerabilities, in particular, the programming errors in software. Even the most widely used software, such as the Linux operating system and the major browsers, are riddled with security vulnerabilities. The research community has made a lot of progress in dealing with some of the most common bugs such as buffer-overflow. These are the shallow bugs in that it is (relatively) easy to identify them.  This project has studied deeper security bugs in commodity software, including bad-type-casting that enables an attacker to corrupt memory, uninitialized reads that lead to kernel data leaks, and use-before-initialization that enables an attacker to control the kernel stack. This project has developed program analysis approaches that combine static checks and dynamic instrumentation to identify and mitigate these vulnerabilities. These approaches have been tested on large-scale commodity software including Linux kernel and the Chrome browser. The results show that these approaches are effective and more importantly, they can be efficiently applied either in compile-time and run-time. This project therefore significantly advances the state-of-the-art in software analysis and software security.  The results of this project have been published in the top-tier security conferences including the USENIX Security Symposium, the ACM Conference on Computer and Communications Security, and the Network and Distributed System Security Symposium. In particular, the paper describing the bad-type-casting work, CAVER, won the Internet Defense Prize awarded by Facebook and USENIX in the 2015 USENIX Security Symposium. The CAVER system is now open-sourced.  Three Ph.D. students completed their theses based on work in this project. They are now tenure-track assistant professors in major research universities in the US.          Last Modified: 03/19/2018       Submitted by: Wenke Lee]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
