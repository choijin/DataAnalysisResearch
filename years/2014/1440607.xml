<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSE: Collaborative Proposal: Symbolic-Numeric Approaches to Polynomials</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>199847.00</AwardTotalIntnAmount>
<AwardAmount>199847</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rajiv Ramnath</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Polynomial systems arise naturally in many areas of human endeavor. These include the modeling of tumor growth; the design of robotic devices; chemical systems arising in areas ranging from combustion to blood clotting; assorted problems in physics; plus many areas with mathematics. The solution of the polynomial systems answers questions critical to these endeavors. This research will be devoted to developing the next generation of Bertini, an open source software package, which has been used successfully by many researchers on many problems, which include all those mentioned above.&lt;br/&gt;&lt;br/&gt;Bertini will be rewritten in C++ to be scriptable and modular, which will allow it to be interfaced transparently with symbolic software. The new Bertini will include tools allowing the user to construct and manipulate homotopies based on the output of Bertini. A major focus of the research will be given to systems of polynomials arising from the discretization of systems of differential equations. The great challenge of these very large systems of polynomials is balanced by the great potential impact new efficient and robust methods of solution will have.</AbstractNarration>
<MinAmdLetterDate>08/01/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/01/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1440607</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Sommese</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrew J Sommese</PI_FULL_NAME>
<EmailAddress>sommese@nd.edu</EmailAddress>
<PI_PHON>5746316498</PI_PHON>
<NSF_ID>000201487</NSF_ID>
<StartDate>08/01/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Bei</FirstName>
<LastName>Hu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bei Hu</PI_FULL_NAME>
<EmailAddress>b1hu@nd.edu</EmailAddress>
<PI_PHON>5746315352</PI_PHON>
<NSF_ID>000291348</NSF_ID>
<StartDate>08/01/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Charles</FirstName>
<LastName>Wampler</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME>II</PI_SUFX_NAME>
<PI_FULL_NAME>Charles W Wampler</PI_FULL_NAME>
<EmailAddress>wampler.2@nd.edu</EmailAddress>
<PI_PHON>5746317245</PI_PHON>
<NSF_ID>000244859</NSF_ID>
<StartDate>08/01/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Notre Dame</Name>
<CityName>NOTRE DAME</CityName>
<ZipCode>465565708</ZipCode>
<PhoneNumber>5746317432</PhoneNumber>
<StreetAddress>940 Grace Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>824910376</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NOTRE DAME DU LAC</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>048994727</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Notre Dame]]></Name>
<CityName>Notre Dame</CityName>
<StateCode>IN</StateCode>
<ZipCode>465565612</ZipCode>
<StreetAddress><![CDATA[940 Grace Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1253</Code>
<Text>OFFICE OF MULTIDISCIPLINARY AC</Text>
</ProgramElement>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramElement>
<Code>8069</Code>
<Text>CDS&amp;E-MSS</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8005</Code>
<Text>Scientific Software Elements</Text>
</ProgramReference>
<ProgramReference>
<Code>8251</Code>
<Text>Math Sci Innovation Incubator</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~199847</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Polynomial systems arise throughout mathematics, science, and engineering, making the solution of such problems a fundamental concern in computational mathematics.&nbsp; The mathematical field called numerical algebraic geometry includes a wide range of techniques for computing numerical approximations of the solutions of polynomial systems.&nbsp; The primary goal of this&nbsp;<span class="il">project</span>&nbsp;was the construction of easily extensible and maintainable software for such computations.</p> <div> <div>More specifically, Bertini 2 is a re-implementation of Bertini 1 from C into C++ and Python.&nbsp; The&nbsp;<span class="il">project</span>, which is hosted publicly on GitHub and has a GPL3 open source license, currently consists of two major components.&nbsp; The first is the core library, implementing symbolics and numerics in C++.&nbsp; The second is PyBertini, consisting of the Python bindings for the core. The core provides a full set of tools for forming polynomial and non-polynomial systems directly in compiled code, as well as via parsed strings.&nbsp; A system may be differentiated, evaluated, and queried for various properties, as well as made projective via homogenization and patching.&nbsp; Numerical path tracking in double, multiple, and adaptive precisions are implemented, and extensible by overloading just a few functions.&nbsp; The total degree start system is provided, as is the multihomogeneous which accepts arbitrary variable groupings.&nbsp; The power series and Cauchy endgames are also provided.&nbsp;</div> <div>&nbsp;&nbsp;</div> <div>Taken together, a complete modern implementation of numerical homotopy continuation in a nice interface exists in the Bertini 2 core.&nbsp; PyBertini exposes the C++ core to Python via compiled bindings.&nbsp; Nearly the entire core is usable in Python, meaning that a user does not have to compile code to do numerical algebraic geometry, nor to they have to write or parse plain text data files.&nbsp; The entire system is supported by an Autotools build system, automated testing, automatically built and uploaded documentation and tutorials, and a wiki site.&nbsp; Distribution is handled via GitHub.&nbsp; The code can currently be compiled from source, though the developers are considering additional distribution methods to ease the burden on users. &nbsp;</div> </div><br> <p>            Last Modified: 10/30/2018<br>      Modified by: Andrew&nbsp;J&nbsp;Sommese</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Polynomial systems arise throughout mathematics, science, and engineering, making the solution of such problems a fundamental concern in computational mathematics.  The mathematical field called numerical algebraic geometry includes a wide range of techniques for computing numerical approximations of the solutions of polynomial systems.  The primary goal of this project was the construction of easily extensible and maintainable software for such computations.  More specifically, Bertini 2 is a re-implementation of Bertini 1 from C into C++ and Python.  The project, which is hosted publicly on GitHub and has a GPL3 open source license, currently consists of two major components.  The first is the core library, implementing symbolics and numerics in C++.  The second is PyBertini, consisting of the Python bindings for the core. The core provides a full set of tools for forming polynomial and non-polynomial systems directly in compiled code, as well as via parsed strings.  A system may be differentiated, evaluated, and queried for various properties, as well as made projective via homogenization and patching.  Numerical path tracking in double, multiple, and adaptive precisions are implemented, and extensible by overloading just a few functions.  The total degree start system is provided, as is the multihomogeneous which accepts arbitrary variable groupings.  The power series and Cauchy endgames are also provided.     Taken together, a complete modern implementation of numerical homotopy continuation in a nice interface exists in the Bertini 2 core.  PyBertini exposes the C++ core to Python via compiled bindings.  Nearly the entire core is usable in Python, meaning that a user does not have to compile code to do numerical algebraic geometry, nor to they have to write or parse plain text data files.  The entire system is supported by an Autotools build system, automated testing, automatically built and uploaded documentation and tutorials, and a wiki site.  Distribution is handled via GitHub.  The code can currently be compiled from source, though the developers are considering additional distribution methods to ease the burden on users.          Last Modified: 10/30/2018       Submitted by: Andrew J Sommese]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
