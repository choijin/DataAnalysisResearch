<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: RUI:  Fast and Precise Dynamic Race Detection: Eliminating State and Checking Redundancy</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>198993.00</AwardTotalIntnAmount>
<AwardAmount>198993</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF:Small:Collaborative Research:RUI: Fast and Precise Dynamic Race Detection: Eliminating State and Checking Redundancy&lt;br/&gt;&lt;br/&gt;The national computing infrastructure utilizes multicore processors and multiprocessor hardware across the entire spectrum of systems from small mobile devices to huge data centers.  These systems can execute many software threads of control concurrently to improve responsiveness and performance, but the potential for unintentional interference between threads makes it difficult to ensure their reliability.  Run-time analysis tools for automatically detecting interference problems can help improve software reliability, but they currently have significant performance shortcomings limiting their widespread adoption.  Developing more efficient analyses is thus essential.  This research examines how to improve the performance of run-time analyses for detecting data race conditions.  Data races are perhaps the most fundamental type of thread interference and occur when multiple threads manipulate a shared memory location without proper synchronization.&lt;br/&gt;&lt;br/&gt;The project addresses both the space and time overhead of dynamic race detection.  The techniques developed leverage memory access patterns observed during a target program's execution to adaptively compress the access history information maintained by a dynamic race detector, as well as new optimizations for eliminating redundant checks and for replacing multiple checks on related memory locations with a single coalesced check.  The intellectual merits are achieving substantial performance improvements over existing techniques and enabling comparable improvements in dynamic analyses for other important non-interference properties, including atomicity and determinism.  Such analyses must also reason about races.  The broader impacts are potentially transforming the principles and practices of multithreaded software engineering by enabling more widespread adoption of analysis tools to detect race conditions and other concurrency defects, contributing to the national software research infrastructure, and increasing access to science research opportunities and training for students.</AbstractNarration>
<MinAmdLetterDate>06/11/2014</MinAmdLetterDate>
<MaxAmdLetterDate>06/11/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421051</AwardID>
<Investigator>
<FirstName>Stephen</FirstName>
<LastName>Freund</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephen N Freund</PI_FULL_NAME>
<EmailAddress>freund@cs.williams.edu</EmailAddress>
<PI_PHON>4135974260</PI_PHON>
<NSF_ID>000110974</NSF_ID>
<StartDate>06/11/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Williams College</Name>
<CityName>Williamstown</CityName>
<ZipCode>012672600</ZipCode>
<PhoneNumber>4135974352</PhoneNumber>
<StreetAddress>880 Main St.</StreetAddress>
<StreetAddress2><![CDATA[Hopkins Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>020665972</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PRESIDENT &amp; TRUSTEES OF WILLIAMS COLLEGE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020665972</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Williams College]]></Name>
<CityName>Williamstown</CityName>
<StateCode>MA</StateCode>
<ZipCode>012672600</ZipCode>
<StreetAddress><![CDATA[880 Main Streat]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9229</Code>
<Text>RES IN UNDERGRAD INST-RESEARCH</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~198993</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-3ff0bdd4-7fff-35bf-7a56-86b3bf449dbd"> <span id="docs-internal-guid-cbb760c7-7fff-dd3a-ac12-e566580e6e77">&nbsp;</span></span></p> <p dir="ltr"><span>The nation's computing infrastructure plays a central role in all aspects of our society. Despite the prominence and importance of this infrastructure, constructing reliable software remains extremely challenging. Faulty software can have an enormous damaging effect on the economy, security, privacy, and even personal safety.</span></p> <p dir="ltr"><span>Most computing systems now use multicore or multiprocessor architectures capable of performing multiple tasks at the same time. This ability to run concurrent threads of control has enabled computations at scales previously unimaginable. However, threads may interfere with each other in subtle ways if the programmer does not properly coordinate their behavior. Errors caused by such unanticipated interactions are a particularly pernicious type of defect. They are difficult to discover during testing since they typically happen only intermittently and are discovered long after the damaging interference occurs.</span></p> <p dir="ltr"><span>This grant explored techniques for detecting data race conditions, perhaps the most fundamental interference problem. A data race occurs when two threads concurrently perform conflicting memory accesses to the same location, where at least one access is a write. &nbsp;The exact execution order of those accesses can impact shared state in adverse ways, making data races a common source of bugs in themselves. Moreover, reasoning about richer concurrency properties first requires identifying or limiting where races may occur.</span></p> <p dir="ltr"><span>As part of this work, we developed new dynamic analyses to detect data races. Dynamic analyses monitor programs at run time to identify defects. A key benefit of dynamic race detection is that it can be precise, reporting errors if and only if there is a race condition in the observed trace of the target program. However, the space and time overhead of precise dynamic race detectors was prohibitively high for many applications.</span></p> <p dir="ltr"><span>We developed a collection of optimizations to substantially reduce the cost of dynamic race detection. The key insight was that we can make dynamic checking more efficient by utilizing properties computed statically from the target program's source code. The intellectual merit and scientific contributions of this work include the development of tools facilitating more reliable software construction. It also pushes forward the state-of-the-art in program analysis techniques for concurrent systems.</span></p> <p dir="ltr"><span>This work has supported numerous undergraduate and graduate research students who received valuable training in performing scientific research. Several of our undergraduate researchers are now pursuing advanced degrees. In addition, we have participated in a number of curricular efforts and tutorials to improve and broaden the dissemination of our work on concurrent programming and program analysis.</span></p> <p dir="ltr"><span>The greatest broader impact of our work on data race detection is improving the reliability and robustness of the nation's software infrastructure. Our checkers can more efficiently identify common, but potentially highly damaging, defects due to improper coordination among threads. By integrating new analysis techniques and checking tools into computer science curricula, our work may also lead to wide adoption of improved software engineering practices.</span></p> <div><span><br /></span></div> <p dir="ltr">&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 09/04/2018<br>      Modified by: Stephen&nbsp;N&nbsp;Freund</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    The nation's computing infrastructure plays a central role in all aspects of our society. Despite the prominence and importance of this infrastructure, constructing reliable software remains extremely challenging. Faulty software can have an enormous damaging effect on the economy, security, privacy, and even personal safety. Most computing systems now use multicore or multiprocessor architectures capable of performing multiple tasks at the same time. This ability to run concurrent threads of control has enabled computations at scales previously unimaginable. However, threads may interfere with each other in subtle ways if the programmer does not properly coordinate their behavior. Errors caused by such unanticipated interactions are a particularly pernicious type of defect. They are difficult to discover during testing since they typically happen only intermittently and are discovered long after the damaging interference occurs. This grant explored techniques for detecting data race conditions, perhaps the most fundamental interference problem. A data race occurs when two threads concurrently perform conflicting memory accesses to the same location, where at least one access is a write.  The exact execution order of those accesses can impact shared state in adverse ways, making data races a common source of bugs in themselves. Moreover, reasoning about richer concurrency properties first requires identifying or limiting where races may occur. As part of this work, we developed new dynamic analyses to detect data races. Dynamic analyses monitor programs at run time to identify defects. A key benefit of dynamic race detection is that it can be precise, reporting errors if and only if there is a race condition in the observed trace of the target program. However, the space and time overhead of precise dynamic race detectors was prohibitively high for many applications. We developed a collection of optimizations to substantially reduce the cost of dynamic race detection. The key insight was that we can make dynamic checking more efficient by utilizing properties computed statically from the target program's source code. The intellectual merit and scientific contributions of this work include the development of tools facilitating more reliable software construction. It also pushes forward the state-of-the-art in program analysis techniques for concurrent systems. This work has supported numerous undergraduate and graduate research students who received valuable training in performing scientific research. Several of our undergraduate researchers are now pursuing advanced degrees. In addition, we have participated in a number of curricular efforts and tutorials to improve and broaden the dissemination of our work on concurrent programming and program analysis. The greatest broader impact of our work on data race detection is improving the reliability and robustness of the nation's software infrastructure. Our checkers can more efficiently identify common, but potentially highly damaging, defects due to improper coordination among threads. By integrating new analysis techniques and checking tools into computer science curricula, our work may also lead to wide adoption of improved software engineering practices.              Last Modified: 09/04/2018       Submitted by: Stephen N Freund]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
