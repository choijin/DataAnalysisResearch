<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Mainstream Transactional Memory</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>499415.00</AwardTotalIntnAmount>
<AwardAmount>499415</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Small: Mainstream Transactional Memory&lt;br/&gt;&lt;br/&gt;Transactional Memory (TM) is the union of two transformative ideas: first, that parallel programming will be easier if programmers can simply specify which operations in their code should be atomic, without specifying how to make them atomic; second, that this simplicity can be supported -- and performance often improved -- by a speculative implementation that executes atomic blocks in parallel, and backs out and retries when -- and only when -- those blocks conflict with one another.  After many years of research, TM is now entering widespread use.  Hardware support is commercially available from both IBM and Intel; software support is standard in Haskell and under consideration in several other programming languages -- notably C++.  The sponsored research extends the state of the art in transactional memory by focusing on (1) software acceleration of fast hardware transactions and (2) hardware acceleration of rich software transactions.&lt;br/&gt;&lt;br/&gt;The intellectual merits in focus area 1 comprise compiler-based techniques to increase speculation success rates, by safely and automatically moving commonly conflicting operations out of transactions, and by "pipelining" execution to serialize the remaining causes of conflict.  The intellectual merits in focus area 2 comprise enhancements to the STM run-time system for the Haskell programming language, where hardware support can be used to accelerate transactions whose semantics are too complex to implement directly with commercial hardware. The broader impacts begin with easier construction of correct, efficient parallel code that will allow programmers of all skill levels to write that code more easily. Moreover, the work will impact computer science and allied fields by smoothing the transition to ubiquitous multithreading, thereby extending performance improvements through the next generation of computing. In summary, the work will lead to progress in almost any domain that is driven by parallel computing, across academia and industry.</AbstractNarration>
<MinAmdLetterDate>07/02/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1422649</AwardID>
<Investigator>
<FirstName>Michael</FirstName>
<LastName>Scott</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Michael L Scott</PI_FULL_NAME>
<EmailAddress>scott@cs.rochester.edu</EmailAddress>
<PI_PHON>5852757745</PI_PHON>
<NSF_ID>000343030</NSF_ID>
<StartDate>07/02/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Rochester</Name>
<CityName>Rochester</CityName>
<ZipCode>146270140</ZipCode>
<PhoneNumber>5852754031</PhoneNumber>
<StreetAddress>518 HYLAN, RC BOX 270140</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY25</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041294109</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ROCHESTER</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041294109</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Rochester]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>146270140</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~499415</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Transactional memory is a computer hardware feature first proposed in 1993 and added to commodity processors from Intel and IBM around 2012.&nbsp; It has the potential both to simplify and to accelerate multicore programming by&nbsp;<em>speculating</em>&nbsp;that activities (transactions) of separate cores are independent, performing those transactions in parallel, and backing out when conflicts actually occur.</p> <p>Work performed under this project extended the state of the art in two key ways.&nbsp; First, it developed compiler techniques to increase the success rate of speculation by moving work out of transactions where possible and by using a small hypothetical hardware extension to allow otherwise independent transactions to perform conflicting operations one at a time.&nbsp; Second, it showed how Intel's transactional memory hardware can be used to significantly accelerate the performance of programs written in the Haskell programming language, despite language features that would naively be expected to preclude such acceleration.&nbsp; Additional work explored the extension of transactions to persistent data, held in nonvolatile memory.</p> <p>Speculation enhancement techniques developed as part of this project have begun to influence subsequent work in both academia and industry, charting a path toward better future hardware and compilers.&nbsp; Prototyped changes to the Glasgow Haskell compiler, in particular, are expected to be adopted back into the standard language implementation, enhancing performance for users throughout the world.&nbsp; Ideas from the project are also influencing standards committee efforts to incorporate transactional memory into the C++ programming language.&nbsp; Finally, formal correctness criteria for persistent transactions, emerging from this project, have been adopted by groups around the world, and are guiding the development of new software tools for nonvolatile memory.</p> <p>Human impacts of the project include the training of at least nine PhD students, one postdoc, and one undergraduate, all of whom appear as authors on refereed publications.&nbsp; The postdoc and two of the three core PhD students have begun tenure-track faculty positions; the third is now a research scientist at Intel.&nbsp; In the realm of educational resources, ideas from the project will figure in the forthcoming second edition of the PI's widely used monograph on Shared-Memory Synchronization [Morgan &amp; Claypool publishers, 2013].&nbsp; At the University of Rochester, the PI has been a key player in efforts to broaden participation in computing among underrepresented groups.</p><br> <p>            Last Modified: 11/17/2019<br>      Modified by: Michael&nbsp;L&nbsp;Scott</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Transactional memory is a computer hardware feature first proposed in 1993 and added to commodity processors from Intel and IBM around 2012.  It has the potential both to simplify and to accelerate multicore programming by speculating that activities (transactions) of separate cores are independent, performing those transactions in parallel, and backing out when conflicts actually occur.  Work performed under this project extended the state of the art in two key ways.  First, it developed compiler techniques to increase the success rate of speculation by moving work out of transactions where possible and by using a small hypothetical hardware extension to allow otherwise independent transactions to perform conflicting operations one at a time.  Second, it showed how Intel's transactional memory hardware can be used to significantly accelerate the performance of programs written in the Haskell programming language, despite language features that would naively be expected to preclude such acceleration.  Additional work explored the extension of transactions to persistent data, held in nonvolatile memory.  Speculation enhancement techniques developed as part of this project have begun to influence subsequent work in both academia and industry, charting a path toward better future hardware and compilers.  Prototyped changes to the Glasgow Haskell compiler, in particular, are expected to be adopted back into the standard language implementation, enhancing performance for users throughout the world.  Ideas from the project are also influencing standards committee efforts to incorporate transactional memory into the C++ programming language.  Finally, formal correctness criteria for persistent transactions, emerging from this project, have been adopted by groups around the world, and are guiding the development of new software tools for nonvolatile memory.  Human impacts of the project include the training of at least nine PhD students, one postdoc, and one undergraduate, all of whom appear as authors on refereed publications.  The postdoc and two of the three core PhD students have begun tenure-track faculty positions; the third is now a research scientist at Intel.  In the realm of educational resources, ideas from the project will figure in the forthcoming second edition of the PI's widely used monograph on Shared-Memory Synchronization [Morgan &amp; Claypool publishers, 2013].  At the University of Rochester, the PI has been a key player in efforts to broaden participation in computing among underrepresented groups.       Last Modified: 11/17/2019       Submitted by: Michael L Scott]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
