<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Frontier: Collaborative: CORE: Center for Encrypted Functionalities</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>950372.00</AwardTotalIntnAmount>
<AwardAmount>950372</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The Center for Encrypted Functionalities (CORE) tackles the deep and far-reaching problem of general-purpose "program obfuscation," which aims to enhance cybersecurity by making an arbitrary computer program unintelligible while preserving its functionality. This can in turn enable a host of applications, such as hiding from potential adversaries the existence of vulnerabilities that may have been introduced through human error in the design/development process, thereby preventing tampering or deterring reverse engineering, or hiding cryptographic keys within software, thereby strengthening encryption and information transfer. &lt;br/&gt; &lt;br/&gt;At the heart of the Center's research activities is the development of new and rigorous mathematical techniques to build faster and more secure general-purpose mechanisms enabling such software. In pursuit of this goal, the CORE team tackles many technical questions: Can secure general-purpose mechanisms avoid the inefficiency overhead that arises from Barrington's Theorem? Can the security of these mechanisms be proven to hold against idealized adversaries, or be based on natural non-interactive hardness assumptions? Can these approaches be securely leveraged to protect data from rogue insiders, who must be able to access some data in the clear? Finally, can these mechanisms be used to reduce the level of interaction required to accomplish secure communication and computation tasks? In addition to its direct research program, the Center organizes retreats and workshops to bring together researchers to carry out the Center's mission. The Center also engages in high-impact outreach efforts, such as the development of free Massive Open Online Courses (MOOCs).</AbstractNarration>
<MinAmdLetterDate>07/31/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/18/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1414082</AwardID>
<Investigator>
<FirstName>Brent</FirstName>
<LastName>Waters</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Brent Waters</PI_FULL_NAME>
<EmailAddress>bwaters@cs.utexas.edu</EmailAddress>
<PI_PHON>5124716424</PI_PHON>
<NSF_ID>000518000</NSF_ID>
<StartDate>07/31/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName/>
<StateCode>TX</StateCode>
<ZipCode>787121532</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>8087</Code>
<Text>Frontiers in SaTC</Text>
</ProgramReference>
<ProgramReference>
<Code>8251</Code>
<Text>Math Sci Innovation Incubator</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~369558</FUND_OBLG>
<FUND_OBLG>2016~187906</FUND_OBLG>
<FUND_OBLG>2017~193516</FUND_OBLG>
<FUND_OBLG>2018~199392</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p id="docs-internal-guid-208d3639-7fff-c21a-b9d1-b4e154b66773" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Program obfuscation is the ability to take a computer program or function P and run it through an obfuscator which itself outputs a program. The new program should (A) be functionally equivalent to the original (i.e. on any input x the original and the newly obfuscated program give the same output) and (B) reveal the minimal amount of information possible of the original program.&nbsp;</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">This project explores the applications and foundations of indistinguishability obfuscation which is a form of obfuscation that guarantees that it is intractable to distinguish obfuscations of two functionally equivalent programs. Highlights of results in this program include:</span></p> <p><br /><br /></p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">* Initial constructions for indistinguishability obfuscation were given in the circuit model where the size of the obfuscated program grew with the running time of the program. Our work showed how to move from obfuscating circuits to obfuscating general programs where we could obfuscate programs with descriptions that are much smaller than their running time. Unlike other works, there were no restrictions on the size of the programs.</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">* A primitive known as &ldquo;lockable obfuscation&rdquo; was introduced. In lockable obfuscation a program</span></p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">P is obfuscated alongside a lock value &lsquo;a&rsquo;. An evaluator that has input x can learn if P(x)=a. However, if &lsquo;a&rsquo; is chosen randomly, then no information about the program will be revealed. Our work showed how to construct this primitive from the Learning with Errors assumption. Moreover, we showed several applications of this including the ability to hide the recipient of *any* public key encryption system.</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">* The project&nbsp; also provided results showing the limits of obfuscation. In particular, we showed that a notion known as Differing Inputs Obfuscation was impossible for the Turing Machine model.</span></p> <p>&nbsp;</p> <p style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">* Our work also provided a Learning with Errors realization for a problem known as Traitor Tracing. In such a system a party can trace the source of a corrupted decryption device *even if the corrupted device is itself obfuscated. This result was the first one to accomplish this for any system with short parameters.</span></p><br> <p>            Last Modified: 11/30/2020<br>      Modified by: Brent&nbsp;R&nbsp;Waters</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[Program obfuscation is the ability to take a computer program or function P and run it through an obfuscator which itself outputs a program. The new program should (A) be functionally equivalent to the original (i.e. on any input x the original and the newly obfuscated program give the same output) and (B) reveal the minimal amount of information possible of the original program.     This project explores the applications and foundations of indistinguishability obfuscation which is a form of obfuscation that guarantees that it is intractable to distinguish obfuscations of two functionally equivalent programs. Highlights of results in this program include:     * Initial constructions for indistinguishability obfuscation were given in the circuit model where the size of the obfuscated program grew with the running time of the program. Our work showed how to move from obfuscating circuits to obfuscating general programs where we could obfuscate programs with descriptions that are much smaller than their running time. Unlike other works, there were no restrictions on the size of the programs.    * A primitive known as "lockable obfuscation" was introduced. In lockable obfuscation a program P is obfuscated alongside a lock value ‘a’. An evaluator that has input x can learn if P(x)=a. However, if ‘a’ is chosen randomly, then no information about the program will be revealed. Our work showed how to construct this primitive from the Learning with Errors assumption. Moreover, we showed several applications of this including the ability to hide the recipient of *any* public key encryption system.    * The project  also provided results showing the limits of obfuscation. In particular, we showed that a notion known as Differing Inputs Obfuscation was impossible for the Turing Machine model.    * Our work also provided a Learning with Errors realization for a problem known as Traitor Tracing. In such a system a party can trace the source of a corrupted decryption device *even if the corrupted device is itself obfuscated. This result was the first one to accomplish this for any system with short parameters.       Last Modified: 11/30/2020       Submitted by: Brent R Waters]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
