<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: SMALL: COLLABORATIVE RESEARCH: Compiler Coaching</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
<AwardExpirationDate>06/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>136247.00</AwardTotalIntnAmount>
<AwardAmount>136247</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Small: Collaborative Research: Compiler Coaching&lt;br/&gt;&lt;br/&gt;The ``Compiler Coaching'' (Dialog) project represents an investment in programming language tools and technology.  Software engineers use high-level programming languages on a daily basis to produce the apps and applications that everyone uses and that control everybody's lives. Once a programming language translator accepts a program as grammatically correct, it creates impenetrable computer codes without informing the programmer how well (fast or slow, small or large, energy hogging or efficient) these codes will work.  Indeed, modern programming languages employ increasingly sophisticated translation techniques and have become obscure black boxes to the working engineer.  The goal of the Dialog project is to create channels of communication between these translation processes and software engineers, with the expectation that the latter can use this new source of&lt;br/&gt;information to improve the speed, size, or energy consumption of their software.&lt;br/&gt;&lt;br/&gt;The PIs will explore the Dialog idea in two optimizing compiler settings, one on the conventional side and one on the modern one: for the Racket language, a teaching and research vehicle that they can modify as needed to create the desired channel, and the JavaScript programming language, the standardized tool for existing Web applications. The intellectual merits concern the fundamental principles of creating such communication channels and frameworks for gathering empirical evidence on how these channels benefit the working software engineer.  These results should enable the developers of any programming language to implement similar channels of communication to help their clients. The broader impacts are twofold. On one hand, the project is likely to positively impact the lives of working software engineers as industrial programming language creators adapt the Dialog idea. On the other hand, the project will contribute to a two-decades old, open-source programming language project with a large and longstanding history of educational outreach at multiple levels. The project has influenced hundreds of thousands of high school students in the past and is likely to do so in the future.</AbstractNarration>
<MinAmdLetterDate>07/02/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421652</AwardID>
<Investigator>
<FirstName>Sam</FirstName>
<LastName>Tobin-Hochstadt</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sam Tobin-Hochstadt</PI_FULL_NAME>
<EmailAddress>samth@cs.indiana.edu</EmailAddress>
<PI_PHON>8128563240</PI_PHON>
<NSF_ID>000611033</NSF_ID>
<StartDate>07/02/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Indiana University</Name>
<CityName>Bloomington</CityName>
<ZipCode>474013654</ZipCode>
<PhoneNumber>3172783473</PhoneNumber>
<StreetAddress>509 E 3RD ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN09</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>006046700</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF INDIANA UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>006046700</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Indiana University]]></Name>
<CityName>Bloomington</CityName>
<StateCode>IN</StateCode>
<ZipCode>474013654</ZipCode>
<StreetAddress><![CDATA[919 E. 10th Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>09</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN09</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>6892</Code>
<Text>CI REUSE</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~136247</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project focused on enabling compilers, software that translates<br />programs from high-level languages to low-level computer code, to<br />communicate better with programmers, allowing programs to be written<br />to be more efficient. It produced tools and techniques that apply<br />across a variety of compilers, and that are used by programmers today<br />in practice.<br /><br />The project developed compiler coaching tools for multiple languages,<br />specifically Racket and JavaScript (via the Firefox SpiderMonkey<br />JavaScript engine). These tools alert the programmer to the behavior<br />of the compiler and optimizer, allowing the programmer to understand<br />the previously-opaque decisions and refashion the program<br />accordingly. These hints can often result in substantial speedups,<br />even in previously-optimized programs.<br /><br />Additionally, compiler coaching was extended under this project to<br />help programmers understand other performance costs in their<br />program. This enables them to modify programs to remove hidden costs<br />that may be difficult to otherwise find, but easy to eliminate when<br />pointed out. Again, the tools developed in this work are now in<br />regular use in the Racket community.<br /><br />Since the variety of compiler technology poses as challenge for<br />compiler coaching, the PI also investigated a new compiler technology<br />to compare performance and compiler behavior with existing<br />systems. This resulted in a new Racket runtime system, under<br />continuing development and supporting research in multiple<br />areas. Additionally, extensive investigation into the interplay of<br />static and dynamic compilers showed complexity that requires further<br />research.<br /><br />Work supported by this award resulted in papers published in ECOOP<br />2015, CC 2015, and OOPSLA 2017. This award supported graduate students<br />at Indiana University, one of whom continues PhD studies, and one who<br />is now at Mathworks.</p><br> <p>            Last Modified: 11/30/2017<br>      Modified by: Sam&nbsp;Tobin-Hochstadt</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project focused on enabling compilers, software that translates programs from high-level languages to low-level computer code, to communicate better with programmers, allowing programs to be written to be more efficient. It produced tools and techniques that apply across a variety of compilers, and that are used by programmers today in practice.  The project developed compiler coaching tools for multiple languages, specifically Racket and JavaScript (via the Firefox SpiderMonkey JavaScript engine). These tools alert the programmer to the behavior of the compiler and optimizer, allowing the programmer to understand the previously-opaque decisions and refashion the program accordingly. These hints can often result in substantial speedups, even in previously-optimized programs.  Additionally, compiler coaching was extended under this project to help programmers understand other performance costs in their program. This enables them to modify programs to remove hidden costs that may be difficult to otherwise find, but easy to eliminate when pointed out. Again, the tools developed in this work are now in regular use in the Racket community.  Since the variety of compiler technology poses as challenge for compiler coaching, the PI also investigated a new compiler technology to compare performance and compiler behavior with existing systems. This resulted in a new Racket runtime system, under continuing development and supporting research in multiple areas. Additionally, extensive investigation into the interplay of static and dynamic compilers showed complexity that requires further research.  Work supported by this award resulted in papers published in ECOOP 2015, CC 2015, and OOPSLA 2017. This award supported graduate students at Indiana University, one of whom continues PhD studies, and one who is now at Mathworks.       Last Modified: 11/30/2017       Submitted by: Sam Tobin-Hochstadt]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
