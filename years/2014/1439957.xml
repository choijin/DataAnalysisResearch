<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Large: Collaborative Research:  Science and Tools for Software Evolution</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>11/18/2013</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>1682140.00</AwardTotalIntnAmount>
<AwardAmount>1698140</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Successful software constantly evolves. Most programmers work on projects they did not start. Most companies spend more on maintaining old systems than on building new ones. This is good, because it shows that companies build software that is worth keeping and maintaining, but it also means that change is the heart of software development. Most programming tools treat change at a very low level: programmers make most changes with text editors, and tools tend to focus on changes to lines of text, and although programming is predominantly about change, contemporary tools do not provide direct support for understanding or facilitating change. This makes programming more expensive, time-consuming, and error-prone than it should be. This research project will develop a change-oriented programming environment (COPE) that supports change by putting transformations at the center of software development. COPE will enable both average and expert programmers to write, script, modify, and replay their own transformations. COPE will enable programmers to think about programs as compositions of transformations, and to automate as many of these transformations as possible. Characterizing software development in terms of transformations is an essential step to take software engineering from manual development to automated (or semi-automated) development of software.&lt;br/&gt;&lt;br/&gt;By enabling programmers to express their programming tasks as program transformations, COPE will alter the way programmers think about, teach, create, reuse, and understand programs. Specifically, COPE considers five activities: (1) analyze what changes programmers typically make and how they perceive, recall, and communicate changes, (2) automate transformations to make it easier to apply and script changes, (3) develop tools that compose and manipulate transformations to make it easier to reuse them, (4) integrate transformations with version control to provide better ways for archiving and understanding changes, and (5) develop tools that infer higher-level transformations from lower-level changes. COPE will deliver a rich transformation-aware toolset that synergistically integrates all these activities. COPE aims to (a) change the way people program, (b) create a platform for research for future research, and (c) produce results that ultimately will become standard software development practice. The PIs will disseminate the results through presentations, books, publications, open-source code, industrial collaborations, and educational activities. A version of COPE will be used to revamp the software engineering curriculum at the University of Illinois and the University of Texas to emphasize the science of change in large code bases.</AbstractNarration>
<MinAmdLetterDate>04/28/2014</MinAmdLetterDate>
<MaxAmdLetterDate>04/10/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1439957</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Dig</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel Dig</PI_FULL_NAME>
<EmailAddress>danny.dig@colorado.edu</EmailAddress>
<PI_PHON>3034921293</PI_PHON>
<NSF_ID>000581803</NSF_ID>
<StartDate>04/28/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Oregon State University</Name>
<CityName>Corvallis</CityName>
<ZipCode>973318507</ZipCode>
<PhoneNumber>5417374933</PhoneNumber>
<StreetAddress>OREGON STATE UNIVERSITY</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>053599908</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OREGON STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053599908</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Oregon State University]]></Name>
<CityName>Corvallis</CityName>
<StateCode>OR</StateCode>
<ZipCode>973312140</ZipCode>
<StreetAddress><![CDATA[308 Kerr Admin Building]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~848361</FUND_OBLG>
<FUND_OBLG>2014~833779</FUND_OBLG>
<FUND_OBLG>2015~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software constantly changes. Most programmers work on projects that they did not start. Most companies spend more on maintaining old systems than on building new ones. It is widely known that at least two-thirds of software costs are due to evolution, with some industrial surveys claiming 90%. This is good, because it is a sign that we build software that is worth keeping. But it means that the traditional view of software development is wrong. Software development is not about the conversion of user requirements into&nbsp;<em>new software&nbsp;</em>as much as it is about responding to user needs by changing&nbsp;<em>existing software</em>. Change is the heart of software development.&nbsp;</p> <p>Although change is the heart of software development, programmers have difficulty managing change. Change is too ad-hoc and tools for change are too low-level, making programming expensive and error-prone. Change needs to move to a higher level of abstraction. Doing so could revolutionize software development and make programmers more productive and software more reliable.&nbsp;</p> <p>To turn our vision into reality, this project developed a Change-Oriented Programming Environment (COPE) that addressed four key challenges:</p> <p>(1) Understand transformations. We studied how programmers perceive, recall, and communicate change in complex code.</p> <p>(2) Automate transformations. Writing and scripting transformations today is hard, e.g., implementing a seemingly simple transformation such as Rename Method refactoring requires writing hundreds of lines of code. Our projectprovided better ways for average programmers to quickly script their own transformations and for experts to implement sophisticated transformations such as refactorings for design patterns.</p> <p>(3) Compose, manipulate, and visualize transformations. Understanding properties of transformations&mdash; e.g., commutativity, dependencies, parameterization&mdash;is central to transformation&rsquo;s analysis and reuse. We developed novel approaches to manipulate transformations as well as visualize their effects.</p> <p>(4) Infer transformations. We developed an infrastructure within COPE&nbsp;to infer higher-level changes (e.g., refactorings) from lower-level changes, especially code edits. This allows us to capture high-level program transformations even when the programmer did not specify them.&nbsp;</p> <p>The grant partially supported 56 top-conference and journal papers (of which 12 papers received awards), the public release of more than a dozen refactoring tools and datasets (available from http://refactoring.info/tools), and training for more than 15 graduate students (some joining industry, others joining the faculty at leading universities like CMU and UT Austin), and ten undergrad students.&nbsp;</p> <p>To increase the broader impacts, using our&nbsp;tools developed as part of this research, we found and reported several hundreds of bugs in real world open-source projects. The open source developers accepted more than 500 patches generated by our tools, thus showing that developers found our tools useful.&nbsp;</p> <p>Three of our refactoring toolsare already shipping with the official release of the NetBeans IDE, Microsoft Visual Studio IDE, and AndroidStudio which are used by millions of Java and C# developers.</p> <p>Our rich&nbsp;educational resources such as&nbsp;<a href="http://learnasync.net/">http://learnasync.net</a>&nbsp;provide tremendous education on the usage of parallel libraries and have attracted more than 150,000 visitors. Our results on the usage of parallel library features already influenced the design of the Java 8.0 concurrent library.</p> <p>In addition to developing university classes based on this material, the PIs taught 600+ professional programmers at summer schools, conference tutorials, and technical courses at large companies.</p> <p>&nbsp;</p><br> <p>            Last Modified: 07/16/2018<br>      Modified by: Daniel&nbsp;Dig</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software constantly changes. Most programmers work on projects that they did not start. Most companies spend more on maintaining old systems than on building new ones. It is widely known that at least two-thirds of software costs are due to evolution, with some industrial surveys claiming 90%. This is good, because it is a sign that we build software that is worth keeping. But it means that the traditional view of software development is wrong. Software development is not about the conversion of user requirements into new software as much as it is about responding to user needs by changing existing software. Change is the heart of software development.   Although change is the heart of software development, programmers have difficulty managing change. Change is too ad-hoc and tools for change are too low-level, making programming expensive and error-prone. Change needs to move to a higher level of abstraction. Doing so could revolutionize software development and make programmers more productive and software more reliable.   To turn our vision into reality, this project developed a Change-Oriented Programming Environment (COPE) that addressed four key challenges:  (1) Understand transformations. We studied how programmers perceive, recall, and communicate change in complex code.  (2) Automate transformations. Writing and scripting transformations today is hard, e.g., implementing a seemingly simple transformation such as Rename Method refactoring requires writing hundreds of lines of code. Our projectprovided better ways for average programmers to quickly script their own transformations and for experts to implement sophisticated transformations such as refactorings for design patterns.  (3) Compose, manipulate, and visualize transformations. Understanding properties of transformations&mdash; e.g., commutativity, dependencies, parameterization&mdash;is central to transformation?s analysis and reuse. We developed novel approaches to manipulate transformations as well as visualize their effects.  (4) Infer transformations. We developed an infrastructure within COPE to infer higher-level changes (e.g., refactorings) from lower-level changes, especially code edits. This allows us to capture high-level program transformations even when the programmer did not specify them.   The grant partially supported 56 top-conference and journal papers (of which 12 papers received awards), the public release of more than a dozen refactoring tools and datasets (available from http://refactoring.info/tools), and training for more than 15 graduate students (some joining industry, others joining the faculty at leading universities like CMU and UT Austin), and ten undergrad students.   To increase the broader impacts, using our tools developed as part of this research, we found and reported several hundreds of bugs in real world open-source projects. The open source developers accepted more than 500 patches generated by our tools, thus showing that developers found our tools useful.   Three of our refactoring toolsare already shipping with the official release of the NetBeans IDE, Microsoft Visual Studio IDE, and AndroidStudio which are used by millions of Java and C# developers.  Our rich educational resources such as http://learnasync.net provide tremendous education on the usage of parallel libraries and have attracted more than 150,000 visitors. Our results on the usage of parallel library features already influenced the design of the Java 8.0 concurrent library.  In addition to developing university classes based on this material, the PIs taught 600+ professional programmers at summer schools, conference tutorials, and technical courses at large companies.          Last Modified: 07/16/2018       Submitted by: Daniel Dig]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
