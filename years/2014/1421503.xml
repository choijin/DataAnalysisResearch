<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Revisiting Assumptions of Regression Testing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>12/01/2014</AwardEffectiveDate>
<AwardExpirationDate>11/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>462000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Regression testing is important as it checks that changes to software do not break previously working functionality.  However, regression testing is expensive as it requires executing a large number of tests and inspecting their failed runs.  To speed up regression testing, researchers have proposed many techniques, including test selection (which, given a set of tests and software changes, selects a subset of tests that are affected by the changes) and test-suite reduction (which identifies what tests can be removed from a test suite without substantially reducing its fault-detection capability).  While some of those techniques have been successful in practice, there is a lot of opportunity to further improve regression testing by alleviating the assumptions upon which the existing techniques are built.&lt;br/&gt;&lt;br/&gt;Specifically, this project improves regression testing by revisiting these six assumptions: (1) tests are not deterministic (but depend on timing, environment, or concurrency), (2) code histories are not linear (but convoluted graphs of branches and merges), (3) test selection is relevant not only for large projects (but developers manually select tests even for small projects), (4) test-suite reduction can decrease fault-detection capability in one version (but can decrease even more in future versions), (5) tests depend not only on code (but also on non-code artifacts), and (6) tests depend not only on manually written artifacts (but also on automatically generated artifacts).  The broader impacts of improving regression testing are to increase the speed of software development and improve the quality of developed software.</AbstractNarration>
<MinAmdLetterDate>07/31/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/10/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421503</AwardID>
<Investigator>
<FirstName>Darko</FirstName>
<LastName>Marinov</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Darko Marinov</PI_FULL_NAME>
<EmailAddress>marinov@illinois.edu</EmailAddress>
<PI_PHON>2172656117</PI_PHON>
<NSF_ID>000095315</NSF_ID>
<StartDate>07/31/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>618012302</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~450000</FUND_OBLG>
<FUND_OBLG>2016~12000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Regression testing is a software development activity that checks whether changes to software break previously working functionality. Regression testing is an important activity to increase software quality and developer productivity. However, regression testing is expensive because it requires executing a large number of tests and inspecting their failed runs. To speed up regression testing, researchers had proposed many techniques, including (1) regression test selection (RTS) -- given a set of tests and software changes, RTS selects a subset of tests that are affected by the changes; and (2) test-suite reduction (TSR) -- given a set of tests, TSR removes some tests that appear redundant with respect to the others. The goal of this project was to substantially improve regression testing.</p> <p>This project not only developed several new techniques and tools that can speed up regression testing but also initiated research on two emerging topics. One, this project has initiated academic study of what are now widely called "flaky tests", i.e., tests that can non-deterministically pass or fail even for the same test scenario (the same code under test and the same inputs readily controllable by testers). Flaky tests are detrimental to software development in general and regression testing in particular because failures of flaky tests do not indicate bugs in the most recent code changes. Two, this project had initially focused on regression testing done when developers run their tests locally, i.e., on their own laptops or desktops, but an increasingly popular approach is to run tests in the continuous integration (CI) systems in the cloud, so this project has initiated study on regression-testing techniques for CI.</p> <p>The grant partially supported (1) over 35 papers (primarily in main technical tracks of top software engineering and software testing conferences, with some additional tool, workshop, and journal papers); (2) three papers that won ACM SIGSOFT Distinguished Paper awards (ISSTA 2015, ASE 2016, ESEC/FSE 2017); (3) public release of several testing tools and datasets (some linked from http://mir.cs.illinois.edu page on software and data); and (4) training of over a dozen graduate students (including four PhD theses and one MS thesis) and several undergraduate students (some of whom co-authored papers or contributed to open-source code), either directly supported by the award or collaborating on the project. The broader impacts also include reporting numerous bugs and fixes to various open-source projects. In brief, the project provided improvements in both efficiency and reliability of regression testing.</p><br> <p>            Last Modified: 03/25/2020<br>      Modified by: Darko&nbsp;Marinov</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Regression testing is a software development activity that checks whether changes to software break previously working functionality. Regression testing is an important activity to increase software quality and developer productivity. However, regression testing is expensive because it requires executing a large number of tests and inspecting their failed runs. To speed up regression testing, researchers had proposed many techniques, including (1) regression test selection (RTS) -- given a set of tests and software changes, RTS selects a subset of tests that are affected by the changes; and (2) test-suite reduction (TSR) -- given a set of tests, TSR removes some tests that appear redundant with respect to the others. The goal of this project was to substantially improve regression testing.  This project not only developed several new techniques and tools that can speed up regression testing but also initiated research on two emerging topics. One, this project has initiated academic study of what are now widely called "flaky tests", i.e., tests that can non-deterministically pass or fail even for the same test scenario (the same code under test and the same inputs readily controllable by testers). Flaky tests are detrimental to software development in general and regression testing in particular because failures of flaky tests do not indicate bugs in the most recent code changes. Two, this project had initially focused on regression testing done when developers run their tests locally, i.e., on their own laptops or desktops, but an increasingly popular approach is to run tests in the continuous integration (CI) systems in the cloud, so this project has initiated study on regression-testing techniques for CI.  The grant partially supported (1) over 35 papers (primarily in main technical tracks of top software engineering and software testing conferences, with some additional tool, workshop, and journal papers); (2) three papers that won ACM SIGSOFT Distinguished Paper awards (ISSTA 2015, ASE 2016, ESEC/FSE 2017); (3) public release of several testing tools and datasets (some linked from http://mir.cs.illinois.edu page on software and data); and (4) training of over a dozen graduate students (including four PhD theses and one MS thesis) and several undergraduate students (some of whom co-authored papers or contributed to open-source code), either directly supported by the award or collaborating on the project. The broader impacts also include reporting numerous bugs and fixes to various open-source projects. In brief, the project provided improvements in both efficiency and reliability of regression testing.       Last Modified: 03/25/2020       Submitted by: Darko Marinov]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
