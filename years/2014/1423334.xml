<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Behavior-Based Zero-Day Intrusion Detection for Real-Time Cyber-Physical Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Cyber-Physical Systems (CPS) have distinct cyber and physical components that must work cohesively with each other to ensure correct operation. Examples include automobiles, power plants, avionics systems, and home automation systems. Traditionally such systems were isolated from external accesses and used proprietary components and protocols. Today that is not the case as CPS systems are increasingly networked. A failure to protect these systems from harm in cyber could result in significant physical harm. Many cyber-physical systems have real-time constraints i.e., they must function correctly within predetermined time scales. Systems that have such real-time properties are predictable by design. The execution behavior of such systems (e.g., execution time, memory usage, control flow, system properties, etc.) is analyzed in detail and controlled to a high degree of precision in order to guarantee predictable real-time behavior.&lt;br/&gt; &lt;br/&gt;This project aims to use this very predictability of real-time CPS to detect intrusions as soon as they occur and take evasive and corrective actions. This will be combined with the development of an architectural framework to (a) detect intrusions and (b) guarantee that the underlying physical system does not come to harm. The development of these analysis techniques and intrusion-detection architectures being proposed here will inherently make such systems more secure and hence, safer. It will bring us one step closer to understanding how to integrate two seemingly diverse yet important fields, CPS and cybersecurity, while gaining a better understanding of both areas.</AbstractNarration>
<MinAmdLetterDate>08/25/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/25/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1423334</AwardID>
<Investigator>
<FirstName>Lui</FirstName>
<LastName>Sha</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Lui Sha</PI_FULL_NAME>
<EmailAddress>lrs@illinois.edu</EmailAddress>
<PI_PHON>2177780691</PI_PHON>
<NSF_ID>000222870</NSF_ID>
<StartDate>08/25/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sibin</FirstName>
<LastName>Mohan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sibin Mohan</PI_FULL_NAME>
<EmailAddress>sibin@illinois.edu</EmailAddress>
<PI_PHON>2173332187</PI_PHON>
<NSF_ID>000637486</NSF_ID>
<StartDate>08/25/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>Urbana</CityName>
<StateCode>IL</StateCode>
<ZipCode>618013620</ZipCode>
<StreetAddress><![CDATA[506 S Wright Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Real-time Embedded Systems have deterministic behavior by design. This includes properties such as execution time, memory, system call information, scheduling behavior, etc. In this project we used this information to increase the security of such systems.&nbsp;</p> <p>&nbsp;</p> <p>The SecureCore architecture was the main framework that we designed as part of this project. One "secure" core given the ability to observe a &ldquo;main&rdquo; core. The latter would run the real-time tasks that are necessary to control the system. The secure core is protected by hypervisor and allocated separate memory regions. Also, it has no external (network) connectivity. When the secure core detects abnormal behavior on the main core (i.e. deviations from expected properties like the ones mentioned above), it takes control away from the main core and actuates the system &mdash; to ensure the correct functioning of the system. If (and when) the main core is restored to a correct state, control is transferred back to it. If not, the secure core can shut down the system in a safe/graceful manner.&nbsp;</p> <p>&nbsp;</p> <p>Information from the main core is relayed to the secure core via new hardware modules that would extract the required data directly from the main core. Note that the execution of the main core is not impacted as a result and the information is relayed via secure hardware channels.&nbsp;</p> <p>&nbsp;</p> <p>We used SecureCore to monitor the following properties:</p> <p>(a) execution time of real-time tasks</p> <p>(b) memory traffic of the entire system and</p> <p>(c) system call behavior of real-time tasks.&nbsp;</p> <p>&nbsp;</p> <p>In each case, we were able to detect intrusions almost instantaneously and ensure that the the cyber-physical system (CPS) remained secure (and hence, safe).</p> <p>&nbsp;</p> <p>We extended SecureCore to a more generic framework that can run on Linux and monitor general-purpose systems. A secure kernel module would run in the OS kernel of the main core. This kernel module can either collect information that is relayed back to the secure core or even carry out analysis &ldquo;in house&rdquo;. The integrity of the kernel module is guaranteed by the secure core (and additional hardware).</p> <p>&nbsp;</p> <p>SecureCore was also used to improve the security of unmanned aerial vehicles (UAVs) where the architecture was realized on virtual machines (instead of custom hardware modules).</p> <p>&nbsp;</p> <p>This research project led to multiple interesting, yet connected directions:</p> <p>(1) We realized that the regularity of the real-time schedules could lead to attackers being able to launch targeted attacks. Hence, we developed techniques that could introduce randomness (and hence, entropy) into the system while still guaranteeing that the deadlines are met for real-time tasks. This increases the difficulty for would be attackers while retaining the system guarantees.</p> <p>&nbsp;</p> <p>(2) integrating security in legacy real-time schedulers: there is a large number of real-time systems that are deployed (in avionics, cars, power grid components, industrial control systems, etc.). They have little to no security mechanisms in place. Retrofitting them with security introduces significant challenges:</p> <p>(i) they run on limited hardware and memory&nbsp;</p> <p>(ii) changing the entire architecture to introduce security may not be feasible</p> <p>(iii) security mechanisms should not cause delays in the Rea-time requirements of these systems.</p> <p>&nbsp;</p> <p>Hence, we introduced multiple pieces of work that can integrate existing security mechanisms into such systems while still ensuring that their real-time guarantees are not broken. This is ongoing work and is an open space for significant work.&nbsp;</p><br> <p>            Last Modified: 02/14/2019<br>      Modified by: Sibin&nbsp;Mohan</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161311507_securecore_architecture--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161311507_securecore_architecture--rgov-800width.jpg" title="SecureCore High-Level Architecture"><img src="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161311507_securecore_architecture--rgov-66x44.jpg" alt="SecureCore High-Level Architecture"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The abstract model of the SecureCore Architecture.</div> <div class="imageCredit">Man-Ki Yoon</div> <div class="imagePermisssions">Creative Commons</div> <div class="imageSubmitted">Sibin&nbsp;Mohan</div> <div class="imageTitle">SecureCore High-Level Architecture</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161407286_securecore_architecture_memory--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161407286_securecore_architecture_memory--rgov-800width.jpg" title="SecureCore Memory Tracing Architecture"><img src="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161407286_securecore_architecture_memory--rgov-66x44.jpg" alt="SecureCore Memory Tracing Architecture"></a> <div class="imageCaptionContainer"> <div class="imageCaption">SecureCore Architecture adapted to tracing memory traffic.</div> <div class="imageCredit">Man-Ki Yoon.</div> <div class="imagePermisssions">Creative Commons</div> <div class="imageSubmitted">Sibin&nbsp;Mohan</div> <div class="imageTitle">SecureCore Memory Tracing Architecture</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161479140_securecore_architecture_memory_memometer--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161479140_securecore_architecture_memory_memometer--rgov-800width.jpg" title="SecureCore Memometer Design"><img src="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161479140_securecore_architecture_memory_memometer--rgov-66x44.jpg" alt="SecureCore Memometer Design"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The "memometer" that is the heart of the memory tracing architecture for SecureCore</div> <div class="imageCredit">Man-Ki Yoon.</div> <div class="imagePermisssions">Creative Commons</div> <div class="imageSubmitted">Sibin&nbsp;Mohan</div> <div class="imageTitle">SecureCore Memometer Design</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161552030_securecore_architecture_syscall--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161552030_securecore_architecture_syscall--rgov-800width.jpg" title="SecureCore Syscall Tracing Architecture"><img src="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161552030_securecore_architecture_syscall--rgov-66x44.jpg" alt="SecureCore Syscall Tracing Architecture"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The SecureCore architecture modified to tracing system calls.</div> <div class="imageCredit">Man-Ki Yoon.</div> <div class="imagePermisssions">Creative Commons</div> <div class="imageSubmitted">Sibin&nbsp;Mohan</div> <div class="imageTitle">SecureCore Syscall Tracing Architecture</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161638090_securecore_architecture_dragonbeam_overview--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161638090_securecore_architecture_dragonbeam_overview--rgov-800width.jpg" title="DragonBeam High Level Architecture"><img src="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161638090_securecore_architecture_dragonbeam_overview--rgov-66x44.jpg" alt="DragonBeam High Level Architecture"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The SecureCore Architecture adapted to a general purpose platform (Linux) and named DragonBeam.</div> <div class="imageCredit">Man-Ki Yoon.</div> <div class="imagePermisssions">Creative Commons</div> <div class="imageSubmitted">Sibin&nbsp;Mohan</div> <div class="imageTitle">DragonBeam High Level Architecture</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161727999_securecore_architecture_dragonbeam_detailed_arch--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161727999_securecore_architecture_dragonbeam_detailed_arch--rgov-800width.jpg" title="DragonBeam Detailed Design"><img src="/por/images/Reports/POR/2019/1423334/1423334_10337727_1550161727999_securecore_architecture_dragonbeam_detailed_arch--rgov-66x44.jpg" alt="DragonBeam Detailed Design"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The detailed design of DragonBeam - implemented on an FPGA using Leon 3.</div> <div class="imageCredit">Man-Ki Yoon.</div> <div class="imageSubmitted">Sibin&nbsp;Mohan</div> <div class="imageTitle">DragonBeam Detailed Design</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Real-time Embedded Systems have deterministic behavior by design. This includes properties such as execution time, memory, system call information, scheduling behavior, etc. In this project we used this information to increase the security of such systems.      The SecureCore architecture was the main framework that we designed as part of this project. One "secure" core given the ability to observe a "main" core. The latter would run the real-time tasks that are necessary to control the system. The secure core is protected by hypervisor and allocated separate memory regions. Also, it has no external (network) connectivity. When the secure core detects abnormal behavior on the main core (i.e. deviations from expected properties like the ones mentioned above), it takes control away from the main core and actuates the system &mdash; to ensure the correct functioning of the system. If (and when) the main core is restored to a correct state, control is transferred back to it. If not, the secure core can shut down the system in a safe/graceful manner.      Information from the main core is relayed to the secure core via new hardware modules that would extract the required data directly from the main core. Note that the execution of the main core is not impacted as a result and the information is relayed via secure hardware channels.      We used SecureCore to monitor the following properties:  (a) execution time of real-time tasks  (b) memory traffic of the entire system and  (c) system call behavior of real-time tasks.      In each case, we were able to detect intrusions almost instantaneously and ensure that the the cyber-physical system (CPS) remained secure (and hence, safe).     We extended SecureCore to a more generic framework that can run on Linux and monitor general-purpose systems. A secure kernel module would run in the OS kernel of the main core. This kernel module can either collect information that is relayed back to the secure core or even carry out analysis "in house". The integrity of the kernel module is guaranteed by the secure core (and additional hardware).     SecureCore was also used to improve the security of unmanned aerial vehicles (UAVs) where the architecture was realized on virtual machines (instead of custom hardware modules).     This research project led to multiple interesting, yet connected directions:  (1) We realized that the regularity of the real-time schedules could lead to attackers being able to launch targeted attacks. Hence, we developed techniques that could introduce randomness (and hence, entropy) into the system while still guaranteeing that the deadlines are met for real-time tasks. This increases the difficulty for would be attackers while retaining the system guarantees.     (2) integrating security in legacy real-time schedulers: there is a large number of real-time systems that are deployed (in avionics, cars, power grid components, industrial control systems, etc.). They have little to no security mechanisms in place. Retrofitting them with security introduces significant challenges:  (i) they run on limited hardware and memory   (ii) changing the entire architecture to introduce security may not be feasible  (iii) security mechanisms should not cause delays in the Rea-time requirements of these systems.     Hence, we introduced multiple pieces of work that can integrate existing security mechanisms into such systems while still ensuring that their real-time guarantees are not broken. This is ongoing work and is an open space for significant work.        Last Modified: 02/14/2019       Submitted by: Sibin Mohan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
