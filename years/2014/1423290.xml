<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Quality Programmable Processing Platforms for Approximate Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>480625.00</AwardTotalIntnAmount>
<AwardAmount>480625</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The gap created by diminishing benefits from technology scaling and projected growth in computing demand has led to a need for new sources of computing efficiency. Fortunately, the workloads that are driving demand across the computing spectrum also present new opportunities. In data centers and the cloud, computing demand is driven by the need to organize, analyze, interpret, and search through exploding amounts of digital data. In mobile and deeply embedded devices, the creation and consumption of richer media and the need to interact more naturally and intelligently with users and the environment drive much of the computing demand. These applications are largely not about calculating a precise numerical end result; for them, "correctness'' is defined as producing results that are good enough, or of sufficient quality. How does this help design more efficient computing platforms? These emerging workloads, and many others, demonstrate a high degree of intrinsic resilience to their underlying computations being executed in an approximate or inexact manner. This project will explore approximate computing, an emerging design approach that improves the efficiency of computing platforms by designing them to leverage intrinsic application resilience.&lt;br/&gt;&lt;br/&gt;To establish approximate computing in a broader context, this research explores quality programmable processors - programmable platforms for approximate computing that offer the ability for software to express application resilience at the natural HW/SW interface, i.e., the instruction set. The hardware underlying a quality programmable processor is equipped to understand and guarantee the instruction-level quality specifications, while exploiting the flexibility that they provide to obtain performance or energy improvements. This project will explore quality programmable designs of various programmable architectures, including general-purpose cores, vector processors, and GPGPUs. It will also extend the notion of quality programmability to the memory system and on-chip interconnect network. Techniques will be developed to optimize programs for execution on quality programmable platforms by identifying resilient computations, and tuning the degree to which they can be approximated while maintaining acceptable application-level output quality. The project will leverage outreach programs at Purdue, including Summer Undergraduate Research Fellowships (SURF), the NCN (Network for Computational Nanotechnology), and the Women and Minority in Engineering programs, to involve undergraduates and minority students in this research.</AbstractNarration>
<MinAmdLetterDate>09/18/2014</MinAmdLetterDate>
<MaxAmdLetterDate>09/18/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1423290</AwardID>
<Investigator>
<FirstName>Kaushik</FirstName>
<LastName>Roy</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kaushik Roy</PI_FULL_NAME>
<EmailAddress>kaushik@ecn.purdue.edu</EmailAddress>
<PI_PHON>7654942361</PI_PHON>
<NSF_ID>000482731</NSF_ID>
<StartDate>09/18/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Anand</FirstName>
<LastName>Raghunathan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Anand Raghunathan</PI_FULL_NAME>
<EmailAddress>raghunathan@purdue.edu</EmailAddress>
<PI_PHON>7654943470</PI_PHON>
<NSF_ID>000515565</NSF_ID>
<StartDate>09/18/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072035</ZipCode>
<StreetAddress><![CDATA[465 Northwestern Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~480625</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The gap created by diminishing benefits from semiconductor technology scaling on the one hand, and projected growth in computing demand on the other, has led to a need for new sources of computing efficiency. Fortunately, the workloads that are driving demand across the computing spectrum also present new opportunities. At the server end, computing demand is driven by the need to organize, analyze, interpret, and search through exploding amounts of digital data. In mobile devices and deeply embedded systems, the creation and consumption of richer media and the need to interact more naturally and intelligently with users and the environment drive much of the computing demand. Common examples include web search, image, video and text analytics, and graphics processing. These applications do not compute a precise numerical end result; for them, ``correctness'' is defined as producing results that are good enough, or of sufficient quality.</p> <p>The motivation behind this project is the intrinsic resilience of modern computing workloads to their underlying computations being executed in an approximate or inexact manner. However, the design of the hardware that underlies computing platforms is still guided by the dogma that every computation must be executed with the same strict notion of correctness.</p> <p><span>To establish approximate computing in a broader context, this research explores quality programmable computing platforms - programmable platforms for approximate computing that offer the ability for software to express application resilience naturally using interfaces such as the instruction set.&nbsp;</span>The key outcomes of our efforts in this project can be summarized along three directions:</p> <ul> <li>We developed quality-programmable hardware designs for the key components in a computing system - processor cores, memory and system-level interconnects. These designs extend the state-of-the-art in the field of approximate computing by being&nbsp;equipped to understand and respect the quality specifications, while exploiting the flexibility that they provide to obtain performance or energy improvements. For example, quality-programmable processor cores translate instruction-level accuracy specifications into improved execution efficiency. Quality-programmable memory systems allow for data to be stored and retrieved with varying levels of accuracy, with corresponding improvements in speed and energy efficiency. Finally, quality-programmable interconnects allow for data to be communicated with different degrees of approximation while providing higher bandwidth for higher approximation levels</li> <li>We developed software interfaces that enable the application programmer to naturally specify quality constraints of her/his application to the underlying hardware. Specifically, these interfaces are realized in the form of libraries or program annotations. In some cases, the software frameworks translate the flexibility provided into speed and energy consumption benefits on commodity hardware that do not have any hardware enhanceents for approximate computing.&nbsp;</li> <li>In order to demonstrate the feasibility of the concepts and techniques developed in our research, we implemented and evaluated a range of machine learning applications, including state-of-the-art deep neural networks, using the proposed quality-programmable software and hardware platforms. Our results indicate that quality-programmable platforms are a promising approach to broaden the applicability and ease the adoption of approximate computing.</li> </ul> <p>The results of this research were disseminated to the research community through several publications in IEEE and ACM conferences and journals, invited talks and embedded tutorials at premier conferences, and enhancements to courses in the area of integrated circuit and system design.</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/27/2019<br>      Modified by: Anand&nbsp;Raghunathan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The gap created by diminishing benefits from semiconductor technology scaling on the one hand, and projected growth in computing demand on the other, has led to a need for new sources of computing efficiency. Fortunately, the workloads that are driving demand across the computing spectrum also present new opportunities. At the server end, computing demand is driven by the need to organize, analyze, interpret, and search through exploding amounts of digital data. In mobile devices and deeply embedded systems, the creation and consumption of richer media and the need to interact more naturally and intelligently with users and the environment drive much of the computing demand. Common examples include web search, image, video and text analytics, and graphics processing. These applications do not compute a precise numerical end result; for them, ``correctness'' is defined as producing results that are good enough, or of sufficient quality.  The motivation behind this project is the intrinsic resilience of modern computing workloads to their underlying computations being executed in an approximate or inexact manner. However, the design of the hardware that underlies computing platforms is still guided by the dogma that every computation must be executed with the same strict notion of correctness.  To establish approximate computing in a broader context, this research explores quality programmable computing platforms - programmable platforms for approximate computing that offer the ability for software to express application resilience naturally using interfaces such as the instruction set. The key outcomes of our efforts in this project can be summarized along three directions:  We developed quality-programmable hardware designs for the key components in a computing system - processor cores, memory and system-level interconnects. These designs extend the state-of-the-art in the field of approximate computing by being equipped to understand and respect the quality specifications, while exploiting the flexibility that they provide to obtain performance or energy improvements. For example, quality-programmable processor cores translate instruction-level accuracy specifications into improved execution efficiency. Quality-programmable memory systems allow for data to be stored and retrieved with varying levels of accuracy, with corresponding improvements in speed and energy efficiency. Finally, quality-programmable interconnects allow for data to be communicated with different degrees of approximation while providing higher bandwidth for higher approximation levels We developed software interfaces that enable the application programmer to naturally specify quality constraints of her/his application to the underlying hardware. Specifically, these interfaces are realized in the form of libraries or program annotations. In some cases, the software frameworks translate the flexibility provided into speed and energy consumption benefits on commodity hardware that do not have any hardware enhanceents for approximate computing.  In order to demonstrate the feasibility of the concepts and techniques developed in our research, we implemented and evaluated a range of machine learning applications, including state-of-the-art deep neural networks, using the proposed quality-programmable software and hardware platforms. Our results indicate that quality-programmable platforms are a promising approach to broaden the applicability and ease the adoption of approximate computing.   The results of this research were disseminated to the research community through several publications in IEEE and ACM conferences and journals, invited talks and embedded tutorials at premier conferences, and enhancements to courses in the area of integrated circuit and system design.          Last Modified: 05/27/2019       Submitted by: Anand Raghunathan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
