<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSE: Improving Vectorization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Robert Beverly</SignBlockName>
<PO_EMAI>rbeverly@nsf.gov</PO_EMAI>
<PO_PHON>7032927068</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The increasing width of vector instruction sets in processors and accelerators raises the importance of effective vectorization.  Although the topic of automatic vectorization by compilers has received significant attention over the last few decades, current vectorizing compilers can typically realize only a small fraction of a processor's peak performance. This project will explore several compiler optimization approaches for generating high-performance vectorized code. Advanced vectorization techniques will be incorporated in the open-source LLVM/Clang compiler through the Polly/LLVM module. A benchmark suite will also be developed, aimed at testing the effectiveness of vectorizing compilers.&lt;br/&gt;&lt;br/&gt;Production compilers limit their optimization search space in order to control the time taken to compile programs. This is because the majority of users expect rapid compile times. However, the developers of high-performance applications are generally very willing to tolerate a much longer wait for program compilation, in return for a boost in the performance of the compiled code. A significant focus of this project will be the development of vectorization approaches for such users who prioritize high application performance over short compile times. The project will investigate semantically-driven pattern-based approaches to vector optimization, a vectorization-friendly approach to tiling, and aggressive vector instruction scheduling approaches that promise higher performance at the expense of possibly high compile times.</AbstractNarration>
<MinAmdLetterDate>07/01/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/01/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1440749</AwardID>
<Investigator>
<FirstName>Ponnuswamy</FirstName>
<LastName>Sadayappan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ponnuswamy Sadayappan</PI_FULL_NAME>
<EmailAddress>saday@cs.utah.edu</EmailAddress>
<PI_PHON>6142164213</PI_PHON>
<NSF_ID>000182536</NSF_ID>
<StartDate>07/01/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Ohio State University</Name>
<CityName>Columbus</CityName>
<ZipCode>432101016</ZipCode>
<PhoneNumber>6146888735</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1960 Kenny Road]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>832127323</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OHIO STATE UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001964634</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Ohio State University]]></Name>
<CityName/>
<StateCode>OH</StateCode>
<ZipCode>432101063</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8005</Code>
<Text>Scientific Software Elements</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The main goal of the project was to&nbsp;advance compiler techniques to optimize execution on SIMD (Single Instruction Multiple Data) cores, including GPUs and short-vector SIMD instruction set architectures. The initial work on the project focused on general-purpose optimization and then focused on two important domains for scientific computing: stencils and tensors.&nbsp;</p> <p>The main outcomes of the project are listed below:</p> <p>1) A new compiler analysis was developed and incorporated into the LLVM-Polly system for performing delinearization of array subscript indexing functions for multi-dimensional arrays, so that the multi-dimensional view of the array could be extracted from a linearized array index expression. This analysis is important for polyhedral compiler optimization.</p> <p>2) A domain-specific code generator was developed for stencil computations on GPUs. It incorporated model-driven fusion and tiling and enables higher performance than existing alternatives, especially for 3D stencil computations. A second optimizer was developed for relieving register pressure on GPUs with high-order stencil computations. Both tools have been publicly released.</p> <p>3) Domain-specific libraries for GPUs were developed for tensor contraction/transpose computations, including both a direct contraction approach as well as a 2-step transpose+MatMult based approach. The developed code has been incorporated into the production NWChem quantum chemistry software suite from Pacific Northwest&nbsp;National Laboratory.</p> <p>4) Efficient GPU kernels for sparse matrix-matrix multiplication were developed.</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/30/2018<br>      Modified by: Ponnuswamy&nbsp;Sadayappan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The main goal of the project was to advance compiler techniques to optimize execution on SIMD (Single Instruction Multiple Data) cores, including GPUs and short-vector SIMD instruction set architectures. The initial work on the project focused on general-purpose optimization and then focused on two important domains for scientific computing: stencils and tensors.   The main outcomes of the project are listed below:  1) A new compiler analysis was developed and incorporated into the LLVM-Polly system for performing delinearization of array subscript indexing functions for multi-dimensional arrays, so that the multi-dimensional view of the array could be extracted from a linearized array index expression. This analysis is important for polyhedral compiler optimization.  2) A domain-specific code generator was developed for stencil computations on GPUs. It incorporated model-driven fusion and tiling and enables higher performance than existing alternatives, especially for 3D stencil computations. A second optimizer was developed for relieving register pressure on GPUs with high-order stencil computations. Both tools have been publicly released.  3) Domain-specific libraries for GPUs were developed for tensor contraction/transpose computations, including both a direct contraction approach as well as a 2-step transpose+MatMult based approach. The developed code has been incorporated into the production NWChem quantum chemistry software suite from Pacific Northwest National Laboratory.  4) Efficient GPU kernels for sparse matrix-matrix multiplication were developed.          Last Modified: 11/30/2018       Submitted by: Ponnuswamy Sadayappan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
