<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  A Hierarchical Symbolic Framework to Verify Logic, Timing, and Probabilistic Properties of Computing Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>125718.00</AwardTotalIntnAmount>
<AwardAmount>125718</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A symbolic framework for the analysis of logic, timing, and probabilistic properties of computer systems is developed, using decision diagrams for the storage and manipulation of large data structures.  Decision diagrams have been enormously effective in verification, but their potential has not been explored much in other settings.  The framework includes symbolic solutions for Markov models based on efficient classes of edge-valued decision diagrams to represent rate matrices, using under- and over-approximations to obtain bounds when an exact numerical study is infeasible, relying on aggregation or partial exploration of states at the logic level, computing probability bounds at the numerical level, and exchanging numerical values between hierarchical submodels.  The framework also addresses non-Markov settings, general distributions, and nondeterministic interval ranges for the timing of events by exploring the limits and potentials of symbolic encodings, hierarchical composition, and bounds, including hybrid techniques that integrate traditional discrete-event simulation with symbolic algorithms.&lt;br/&gt;&lt;br/&gt;The research results will positively affect several areas of computer science and engineering, by providing researchers and engineers with the ability to study the logic, timing, and probabilistic properties of much larger and more general system models than currently possible.  The software packages developed during this project will be an excellent hands-on tool for students and practitioners in need to model, verify, or analyze the logic and timing behavior of computer systems.</AbstractNarration>
<MinAmdLetterDate>04/28/2014</MinAmdLetterDate>
<MaxAmdLetterDate>04/28/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1442586</AwardID>
<Investigator>
<FirstName>Gianfranco</FirstName>
<LastName>Ciardo</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gianfranco Ciardo</PI_FULL_NAME>
<EmailAddress>ciardo@iastate.edu</EmailAddress>
<PI_PHON>5152943264</PI_PHON>
<NSF_ID>000254304</NSF_ID>
<StartDate>04/28/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005309844</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005309844</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Iowa State University]]></Name>
<CityName>Ames</CityName>
<StateCode>IA</StateCode>
<ZipCode>500112207</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2010~125718</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Most of the work on this grant was directed toward defining and implementing more powerful, efficient, and general versions of decision diagrams (DDs, a compact encoding of discrete functions, which are ubiquitous in computer science, as well as disciplines ranging from biology to material science) and algorithms to manipulate them.<br /><br />- We defined new reduction rules for decision diagrams that result in more compact representations for many functions of interest.&nbsp; These rules apply just as well to the traditional class of Binary Decision Diagrams (BDDs, which can encode boolean functions of some fixed number of boolean variables and normally only employ the &ldquo;fully reduced&rdquo; rule) and to our more general classes of DDs.<br /><br />- By letting the values of a variable span over an interval in the definition of the data structure for a DD node, we showed that the Interval Decision Diagrams (IDDs) can be treated as a special case of our DDs. This allows us to encode functions over integer variables (and, in principle, over real variables), in the the same framework.<br /><br />- We defined Sequence Decision Diagrams (SeqDDs), especially suited to encode sets of sequences of arbitrary and possibly different length over a given alphabet. SeqDDs have applications both to bioinformatics (DNA is a sequence over the alphabet {A,C,G,T}) and to verification (a counterexample or a witness to certain properties of interest is just a finite path, i.e., a finite sequence of events starting from the initial state). We defined two canonical forms of SeqDDs, one roughly corresponding to Deterministic Finite Automata and the other to a restricted class of Nondeterministic Finite Automata. A surprising result was that the two are not comparable: switching between them may result in a exponential blow-up in one direction, or a quadratic blow-up in the other direction, so which one is best depends on the specific application.<br /><br />- We developed new techniques for witness generation.&nbsp; In the future, these techniques could be combined with the above-mentioned SeqDDs and, when extended to incorporate real-valued edges (as we have done in the past with EX*MDDs), this will allow us to encode probabilistic/quantitative witnesses, which consist of not one but many paths of different length, each with an associated probability or weight. <br /><br />- In the probabilistic setting, we proved that an exact symbolic algorithm implementing a Gauss-Seidel style iteration is optimal under certain conditions, so that it is arguably the best algorithm to use for symbolic numerical computations on large models; before, the fastest algorithm was not symbolic, thus used more memory, while the most compact algorithm was symbolic, but it had a substantial runtime penalty.<br /><br />- We worked on efficient symbolic algorithms for the computation of the coarsest &ldquo;bisimulation&rdquo; (essentially, simplifying a large model using certain symmetries, so that studying the resulting smaller model can provide the same answers as the original one, at a lower cost).&nbsp; This is a first step to compute the coarsest &ldquo;lumping&rdquo; in continuous time Markov chains, which, again, allows to study a smaller probabilistic model without losing information.<br />&nbsp;<br />- We defined a new approach, based on a new bounding semantics that, for each CSL property P, returns a set of states that MUST satisfy P and a larger set of states that MAY satisfy P.&nbsp; This not only achieves the goals of being both correct and efficient, but also supports a hierarchical approach to analyze CSL properties (most previous CSL implementations target only "flat CSL properties").&nbsp; Importantly, this bounding approach provides guaranteed bounds, while traditional exact approaches are not really "exact", since insisting on a precise real value for the probability of a state is practically unfeasible and potentially misleading. We believe that this new approach will lead to a fruitful discussion of the question "What does it mean to do stochastic model checking?".<br /><br />Six students (three male, three female) were supported by this grant under the PI supervision.&nbsp; Two completed their PhD and one completed her MS.&nbsp; The remaining three, all PhD students, are expected to complete their studies in the next 6 to 18 months.<br /><br />The research results from this grant were published in twelve refereed papers, six in journals and six in conferences.&nbsp; In addition, the PI delivered an invited talk at SEMISH (Brazil, 2012), the tool "Nigma 1.1" was entered at the 2014 SAT solver competition, and the tool SMART was entered at the 2016 Model Checking Competition.<br /><br /><br /><br /></p><br> <p>            Last Modified: 10/28/2016<br>      Modified by: Gianfranco&nbsp;Ciardo</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Most of the work on this grant was directed toward defining and implementing more powerful, efficient, and general versions of decision diagrams (DDs, a compact encoding of discrete functions, which are ubiquitous in computer science, as well as disciplines ranging from biology to material science) and algorithms to manipulate them.  - We defined new reduction rules for decision diagrams that result in more compact representations for many functions of interest.  These rules apply just as well to the traditional class of Binary Decision Diagrams (BDDs, which can encode boolean functions of some fixed number of boolean variables and normally only employ the "fully reduced" rule) and to our more general classes of DDs.  - By letting the values of a variable span over an interval in the definition of the data structure for a DD node, we showed that the Interval Decision Diagrams (IDDs) can be treated as a special case of our DDs. This allows us to encode functions over integer variables (and, in principle, over real variables), in the the same framework.  - We defined Sequence Decision Diagrams (SeqDDs), especially suited to encode sets of sequences of arbitrary and possibly different length over a given alphabet. SeqDDs have applications both to bioinformatics (DNA is a sequence over the alphabet {A,C,G,T}) and to verification (a counterexample or a witness to certain properties of interest is just a finite path, i.e., a finite sequence of events starting from the initial state). We defined two canonical forms of SeqDDs, one roughly corresponding to Deterministic Finite Automata and the other to a restricted class of Nondeterministic Finite Automata. A surprising result was that the two are not comparable: switching between them may result in a exponential blow-up in one direction, or a quadratic blow-up in the other direction, so which one is best depends on the specific application.  - We developed new techniques for witness generation.  In the future, these techniques could be combined with the above-mentioned SeqDDs and, when extended to incorporate real-valued edges (as we have done in the past with EX*MDDs), this will allow us to encode probabilistic/quantitative witnesses, which consist of not one but many paths of different length, each with an associated probability or weight.   - In the probabilistic setting, we proved that an exact symbolic algorithm implementing a Gauss-Seidel style iteration is optimal under certain conditions, so that it is arguably the best algorithm to use for symbolic numerical computations on large models; before, the fastest algorithm was not symbolic, thus used more memory, while the most compact algorithm was symbolic, but it had a substantial runtime penalty.  - We worked on efficient symbolic algorithms for the computation of the coarsest "bisimulation" (essentially, simplifying a large model using certain symmetries, so that studying the resulting smaller model can provide the same answers as the original one, at a lower cost).  This is a first step to compute the coarsest "lumping" in continuous time Markov chains, which, again, allows to study a smaller probabilistic model without losing information.   - We defined a new approach, based on a new bounding semantics that, for each CSL property P, returns a set of states that MUST satisfy P and a larger set of states that MAY satisfy P.  This not only achieves the goals of being both correct and efficient, but also supports a hierarchical approach to analyze CSL properties (most previous CSL implementations target only "flat CSL properties").  Importantly, this bounding approach provides guaranteed bounds, while traditional exact approaches are not really "exact", since insisting on a precise real value for the probability of a state is practically unfeasible and potentially misleading. We believe that this new approach will lead to a fruitful discussion of the question "What does it mean to do stochastic model checking?".  Six students (three male, three female) were supported by this grant under the PI supervision.  Two completed their PhD and one completed her MS.  The remaining three, all PhD students, are expected to complete their studies in the next 6 to 18 months.  The research results from this grant were published in twelve refereed papers, six in journals and six in conferences.  In addition, the PI delivered an invited talk at SEMISH (Brazil, 2012), the tool "Nigma 1.1" was entered at the 2014 SAT solver competition, and the tool SMART was entered at the 2016 Model Checking Competition.           Last Modified: 10/28/2016       Submitted by: Gianfranco Ciardo]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
