<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>STTR Phase I: Linkage Objects for Generalized Instruction in Coding</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2015</AwardEffectiveDate>
<AwardExpirationDate>06/30/2016</AwardExpirationDate>
<AwardTotalIntnAmount>225000.00</AwardTotalIntnAmount>
<AwardAmount>254999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07070000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>IIP</Abbreviation>
<LongName>Div Of Industrial Innovation &amp; Partnersh</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Glenn H. Larsen</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This STTR Phase I project represents a revolutionary advance in adaptive educational systems for computer programming by using big data collected from previous coding exercises to automatically generate hints and feedback for students coding in an integrated development environment (IDE).  This work addresses NSF's Educational Applications subtopic "Tools for Learning and Assessment" by making adaptive learning widely available in a complex open-ended domain such as computer programming, and providing tools to assess student performance in order to make interventions as early as possible and help students succeed not only in developing solid computer programming skills, but also gaining a better understanding of best practices within an IDE when coding.  The core customers for this technology will be providers of training systems for computer programming.  This includes publishing organizations, developers of software tools, and institutions that teach computer science and programming.  Institutions that are struggling to educate STEM (Science, Technology, Engineering, and Mathematics)-capable students can add this technology into their existing teaching systems to help retain more students in these high-demand STEM fields, and thus address the fact that introductory computer programming is often the course that leads many students to dropout of a potentially high-paying computer science career.&lt;br/&gt;&lt;br/&gt;While most programming IDEs provide syntactical assistance, there are no products that have an integrated solution for assistance on higher-level development strategies, which represents a clear drawback of current technology. To address this need, this work introduces the idea of linkage objects, which are objects that allow abstraction of different code segments of complex computer programs into comparable objects.  These objects can then be linked into a large graph of known possible paths.  Applying Markov models to this path allows the technology to present the learner with context-specific hints and feedback, and thus the system will adapt to different types of learners.  A complicating factor is that, typically, programming homework problems will have many solutions that are only superficially correct, that is, some solutions give the correct answer while still exhibiting poor coding techniques.  This technology will avoid reinforcing such poor choices by using large data sets that allow for detecting various solutions and identifying the most common approaches used to solve the problem.  Additionally, automatically generated hints will suggest more optimal solution paths, allowing students to consider changing course to an alternative, more standard-approach solution.</AbstractNarration>
<MinAmdLetterDate>12/22/2014</MinAmdLetterDate>
<MaxAmdLetterDate>12/15/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1449001</AwardID>
<Investigator>
<FirstName>Bruce</FirstName>
<LastName>McLaren</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Bruce M McLaren</PI_FULL_NAME>
<EmailAddress>bmclaren@cs.cmu.edu</EmailAddress>
<PI_PHON>4122688278</PI_PHON>
<NSF_ID>000210941</NSF_ID>
<StartDate>04/24/2015</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>John</FirstName>
<LastName>Stamper</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John Stamper</PI_FULL_NAME>
<EmailAddress>jstamper@cs.cmu.edu</EmailAddress>
<PI_PHON>4122689690</PI_PHON>
<NSF_ID>000591821</NSF_ID>
<StartDate>12/22/2014</StartDate>
<EndDate>04/24/2015</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Ted</FirstName>
<LastName>Carmichael</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ted Carmichael</PI_FULL_NAME>
<EmailAddress>tcarmichael@tutorgen.com</EmailAddress>
<PI_PHON>5133781668</PI_PHON>
<NSF_ID>000661133</NSF_ID>
<StartDate>12/22/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>TutorGen, Inc.</Name>
<CityName>Mars</CityName>
<ZipCode>160467167</ZipCode>
<PhoneNumber>7046992541</PhoneNumber>
<StreetAddress>505 Linden Ct</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>17</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA17</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>967553566</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TUTORGEN, INC.</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[TutorGen, Inc.]]></Name>
<CityName>Fort Thomas</CityName>
<StateCode>KY</StateCode>
<ZipCode>410752281</ZipCode>
<StreetAddress><![CDATA[1037 S Fort Thomas Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Kentucky</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>KY04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1505</Code>
<Text>STTR Phase I</Text>
</ProgramElement>
<ProgramReference>
<Code>1505</Code>
<Text>STTR PHASE I</Text>
</ProgramReference>
<ProgramReference>
<Code>163E</Code>
<Text>SBIR Phase IB</Text>
</ProgramReference>
<ProgramReference>
<Code>8031</Code>
<Text>Education Products</Text>
</ProgramReference>
<ProgramReference>
<Code>8032</Code>
<Text>Software Services and Applications</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~225000</FUND_OBLG>
<FUND_OBLG>2016~29999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong><span style="text-decoration: underline;">Project Outcomes Summary</span></strong></p> <p><strong><span style="text-decoration: underline;">Project Overview</span></strong></p> <p>TutorGen&rsquo;s Linkage Objects for Generalized Instruction in Coding (LOGIC) represents a revolutionary advance in adaptive educational systems for computer programming, by using big data collected from previous coding exercises to automatically generate hints and feedback for students using an integrated development environment (IDE). This work addresses the STTR Educational Applications subtopic EA5 &ndash; Tools for Learning and Assessment by making adaptive learning widely available in a complex open-ended domain such as computer programming, and providing tools to assess student performance in order to make interventions as early as possible and help students succeed not only in developing solid computer programming skills, but also gaining a better understanding of best practices within an IDE when coding. Previous Intelligent Tutoring Systems for computer programming have been shown to be extremely effective, yet have not been used in companies or institutions of higher learning due to the cost of rebuilding the tutors when the current &ldquo;best programming languages&rdquo; change. LOGIC addresses this issue with a generalizable model that uses data to create the tutor, meaning that any programming language can be used with our system.</p> <p>The core customers of LOGIC will be providers of training systems for computer programming. This includes publishing organizations, developers of software tools, and institutions that teach computer science and programming. Increasingly, large publishers are looking for innovative applications to include with their education materials. The LOGIC system can provide their software the ability to increase learning, as well as visualization tools to show how effective their current materials are. LOGIC will also help software tool developers, as it can integrate advanced intelligent tutoring abilities into their existing training programs, increasing their effectiveness and leading to higher adoption of their tools. The fact that LOGIC can be integrated into their existing training system with minimal work also means they can leverage the training they have already developed. Finally, institutions are struggling to educate STEM capable students, and introductory computer programming is often the course that leads many students to dropout of a potential high paying computer science career. By adding LOGIC into their existing teaching systems, institutions will be able to retain more students in these high demand STEM fields.</p> <p>By integrating with LOGIC our customers will be able to provide more effective programming instruction without needing to hire more instructors or spending more time teaching. Further, LOGIC can be integrated into existing training systems, meaning training providers do not need to recreate their current training software to take advantage of the adaptive learning that LOGIC provides.</p> <p><strong><span style="text-decoration: underline;">Project Outcomes Summary</span></strong></p> <p>The core technology of LOGIC has now been shown to be effective across multiple programming languages, producing hint coverage for upwards of 80% of cases where students might need help.&nbsp; We have created a database schema for capturing the click-stream programming data, and implemented a back-end system for collecting this data in CloudCoder, an open-source Integrated Development Environment (IDE).&nbsp; Using this system we have captured new data across three different high school classes, as well as three additional college classes, and added these to our growing repository.&nbsp; These data have been tested on and analyzed to show a high hint coverage rate &ndash; easily comparable to our previous studies &ndash; as w...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Project Outcomes Summary  Project Overview  TutorGenÆs Linkage Objects for Generalized Instruction in Coding (LOGIC) represents a revolutionary advance in adaptive educational systems for computer programming, by using big data collected from previous coding exercises to automatically generate hints and feedback for students using an integrated development environment (IDE). This work addresses the STTR Educational Applications subtopic EA5 &ndash; Tools for Learning and Assessment by making adaptive learning widely available in a complex open-ended domain such as computer programming, and providing tools to assess student performance in order to make interventions as early as possible and help students succeed not only in developing solid computer programming skills, but also gaining a better understanding of best practices within an IDE when coding. Previous Intelligent Tutoring Systems for computer programming have been shown to be extremely effective, yet have not been used in companies or institutions of higher learning due to the cost of rebuilding the tutors when the current "best programming languages" change. LOGIC addresses this issue with a generalizable model that uses data to create the tutor, meaning that any programming language can be used with our system.  The core customers of LOGIC will be providers of training systems for computer programming. This includes publishing organizations, developers of software tools, and institutions that teach computer science and programming. Increasingly, large publishers are looking for innovative applications to include with their education materials. The LOGIC system can provide their software the ability to increase learning, as well as visualization tools to show how effective their current materials are. LOGIC will also help software tool developers, as it can integrate advanced intelligent tutoring abilities into their existing training programs, increasing their effectiveness and leading to higher adoption of their tools. The fact that LOGIC can be integrated into their existing training system with minimal work also means they can leverage the training they have already developed. Finally, institutions are struggling to educate STEM capable students, and introductory computer programming is often the course that leads many students to dropout of a potential high paying computer science career. By adding LOGIC into their existing teaching systems, institutions will be able to retain more students in these high demand STEM fields.  By integrating with LOGIC our customers will be able to provide more effective programming instruction without needing to hire more instructors or spending more time teaching. Further, LOGIC can be integrated into existing training systems, meaning training providers do not need to recreate their current training software to take advantage of the adaptive learning that LOGIC provides.  Project Outcomes Summary  The core technology of LOGIC has now been shown to be effective across multiple programming languages, producing hint coverage for upwards of 80% of cases where students might need help.  We have created a database schema for capturing the click-stream programming data, and implemented a back-end system for collecting this data in CloudCoder, an open-source Integrated Development Environment (IDE).  Using this system we have captured new data across three different high school classes, as well as three additional college classes, and added these to our growing repository.  These data have been tested on and analyzed to show a high hint coverage rate &ndash; easily comparable to our previous studies &ndash; as well as distinct patterns that hold across programming languages.  This confirms our suspicion that, at least in the introductory programming courses, data from one programming language can be used to provide hints to students using a different language.  Further, our analysis has shown that there is a distinction between the so...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
