<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: Assessing and Expanding the Impact of OpenDSA, an Open-Source, Interactive eTextbook for Data Structures and Algorithms</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2015</AwardEffectiveDate>
<AwardExpirationDate>12/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>183398.00</AwardTotalIntnAmount>
<AwardAmount>183398</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>11040200</Code>
<Directorate>
<Abbreviation>EHR</Abbreviation>
<LongName>Direct For Education and Human Resources</LongName>
</Directorate>
<Division>
<Abbreviation>DUE</Abbreviation>
<LongName>Division Of Undergraduate Education</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Stephanie August</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>OpenDSA is an open source project with international collaboration that has the potential to fundamentally change instruction in courses on Data Structures and Algorithms (DSA) and Formal Languages and Automata (FLA). By combining textbook-quality content with visualization and a rich collection of automatically assessed interactive exercises, OpenDSA helps students better understand the behavior of algorithms and their effects over time on data structures. &lt;br/&gt;&lt;br/&gt;This project will scale up OpenDSA in a number of ways. The highly successful JFLAP software for interactive instruction on FLA will be redeployed within the OpenDSA framework using HTML5 standards, thereby increasing access. A wide range of colleges and universities will be involved in disseminating OpenDSA and assessing its impact on student learning, and OpenDSA's use in a number of innovative instructional settings will be explored. The OpenDSA infrastructure will be enriched, allowing instructors to tailor the materials to their specific classroom needs, and encouraging new content contributions from these instructors. A number of technical pedagogical experiments will be conducted, such as measuring the effects of augmenting content with audio narration in slideshows, and navigation through topics with concept maps. A study of how these materials can improve teaching in a range of courses for which relevant content was created. These efforts will have an impact on future active eTextbook projects by demonstrating successful ways to integrate content, interactivity, and assessment in an open-source, creative-commons environment by focusing on the effects on student learning of integrating content with visualizations and a rich collection of practice exercises with automated feedback. In addition, this project will study how using eTextbook materials affects the evolving pedagogical approaches of instructors of DSA and FLA courses and will experiment with new models of dissemination for open-source content in conjunction with commercial online content publishers.</AbstractNarration>
<MinAmdLetterDate>08/17/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/17/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.076</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1431667</AwardID>
<Investigator>
<FirstName>Susan</FirstName>
<LastName>Rodger</LastName>
<PI_MID_INIT>H</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Susan H Rodger</PI_FULL_NAME>
<EmailAddress>rodger@cs.duke.edu</EmailAddress>
<PI_PHON>9196606595</PI_PHON>
<NSF_ID>000249531</NSF_ID>
<StartDate>08/17/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Duke University</Name>
<CityName>Durham</CityName>
<ZipCode>277054010</ZipCode>
<PhoneNumber>9196843030</PhoneNumber>
<StreetAddress>2200 W. Main St, Suite 710</StreetAddress>
<StreetAddress2><![CDATA[Erwin Square]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>044387793</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DUKE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>044387793</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Duke University]]></Name>
<CityName>Durham</CityName>
<StateCode>NC</StateCode>
<ZipCode>277080129</ZipCode>
<StreetAddress><![CDATA[308 Research Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1998</Code>
<Text>IUSE</Text>
</ProgramElement>
<ProgramReference>
<Code>8209</Code>
<Text>Improv Undergrad STEM Ed(IUSE)</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0414</Code>
<Name>NSF Education &amp; Human Resource</Name>
<APP_SYMB_ID>040106</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~183398</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A traditional way for students to learn is to read a textbook, and work<br />the exercises in the textbook. But students cannot interact with the<br />concepts they are learning, or get feedback on the exercises.<br />In this project we have taken a successful educational software tool<br />named JFLAP and integrated it into an active eTextbook platform named<br />OpenDSA. OpenDSA is infrastructure and materials to support the creation of<br />an online textbook with visualization, animations and interactive<br />exercises. With OpenDSA, students can interact with the concepts as they<br />learn them, and receive immediate feedback on exercises.<br /><br />JFLAP is a software tool for experimenting with formal languages and<br />automata, an area of theoretical computer science that represents the<br />background theory on recognizing if a program written in a computer<br />language such as Python is a syntactically correct program, and thus can be<br />run on input.&nbsp; If the program is not syntactically correct, this theory can<br />determine which line in the program is in error.<br />JFLAP is written in Java and was developed by PI Rodger originally in the<br />1990's in C++ and has evolved through ten versions.<br />JFLAP is a standalone tool that must be downloaded and run separately.<br /><br />Our project focused on developing parts of JFLAP for web pages in HTML5,<br />using the OpenDSA infrastructure. A team of seven Duke undergraduates and PI<br />Rodger developed prototypes for several algorithms in the area<br />of formal languages and automata, and worked with PI<br />Shaffer at Virginia Tech to integrate these interactive animations and<br />exercises into a new online textbook called OpenFLAP in the OpenDSA<br />platform.<br /><br />For example, the first step in recognizing if a python program is<br />syntactically correct, is to examine each word in the program to identify<br />its type. Is the word an integer, a keyword, a variable, a plus sign, a<br />right parentheses, etc? This can be done by examining each word character<br />by character, and modeling how a group of characters together are all<br />digits and thus represent an integer, or together form the word "while" that<br />is a keyword, or together form a word "count1" that is a variable name.<br />In formal languages a finite state machine is a simple computer that can be<br />programmed to identify all of these types of words. With JFLAP, a student<br />can write programs for a finite state machine, type in an input word and get<br />output on whether the word was valid or not, for example, whether the word<br />was a valid word in a python program, and if so what type of word it was.<br /><br />For this project, we implemented a finite state machine program in OpenFLAP<br />that a student can create any program for and then type in any input to<br />determine if their program works or not. We also implemented exercises a<br />student could generate, solve, and get feedback on. This program and many<br />other algorithms in formal languages were implemented into the<br />OpenFLAP online textbook. When a student uses this textbook they will read<br />about a concept, then try to develop the concept, such as write a finite<br />state machine program for the problem. Then the student can experiment with<br />the concept, such as run several inputs on their program, testing inputs<br />that should be accepted and also testing inputs that should not be<br />accepted. OpenFLAP can then ask the user questions about the concept they<br />just read and experimented with to see if the student understands the<br />concept.<br />Our textbook OpenFLAP will engage students and will be available<br />for faculty teaching formal languages to use with their course.</p><br> <p>            Last Modified: 04/15/2019<br>      Modified by: Susan&nbsp;H&nbsp;Rodger</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555353067813_jflapLogo--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555353067813_jflapLogo--rgov-800width.jpg" title="JFLAP logo"><img src="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555353067813_jflapLogo--rgov-66x44.jpg" alt="JFLAP logo"></a> <div class="imageCaptionContainer"> <div class="imageCaption">JFLAP is software for experimenting with formal languages and automata theory and has been integrated into OpenDSA.</div> <div class="imageCredit">Susan Rodger</div> <div class="imageSubmitted">Susan&nbsp;H&nbsp;Rodger</div> <div class="imageTitle">JFLAP logo</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555364984463_nfa--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555364984463_nfa--rgov-800width.jpg" title="Nondeterministic finite automaton"><img src="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555364984463_nfa--rgov-66x44.jpg" alt="Nondeterministic finite automaton"></a> <div class="imageCaptionContainer"> <div class="imageCaption">OpenFlap example of a finite state machine that is deterministic.</div> <div class="imageCredit">Susan Rodger</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Susan&nbsp;H&nbsp;Rodger</div> <div class="imageTitle">Nondeterministic finite automaton</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555365124548_nfaTrace--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555365124548_nfaTrace--rgov-800width.jpg" title="Example tracing input with NFA"><img src="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555365124548_nfaTrace--rgov-66x44.jpg" alt="Example tracing input with NFA"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Example in OpenFlap of tracing an input string on a Nondeterministic finite automaton (NFA)</div> <div class="imageCredit">Susan Rodger</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Susan&nbsp;H&nbsp;Rodger</div> <div class="imageTitle">Example tracing input with NFA</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555365199169_cfgNoLambda--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555365199169_cfgNoLambda--rgov-800width.jpg" title="Context-free grammar in OpenFlap"><img src="/por/images/Reports/POR/2019/1431667/1431667_10333413_1555365199169_cfgNoLambda--rgov-66x44.jpg" alt="Context-free grammar in OpenFlap"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Example of a context-free grammar in the OpenFlap book in OpenDSA.</div> <div class="imageCredit">Susan Rodger</div> <div class="imageSubmitted">Susan&nbsp;H&nbsp;Rodger</div> <div class="imageTitle">Context-free grammar in OpenFlap</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A traditional way for students to learn is to read a textbook, and work the exercises in the textbook. But students cannot interact with the concepts they are learning, or get feedback on the exercises. In this project we have taken a successful educational software tool named JFLAP and integrated it into an active eTextbook platform named OpenDSA. OpenDSA is infrastructure and materials to support the creation of an online textbook with visualization, animations and interactive exercises. With OpenDSA, students can interact with the concepts as they learn them, and receive immediate feedback on exercises.  JFLAP is a software tool for experimenting with formal languages and automata, an area of theoretical computer science that represents the background theory on recognizing if a program written in a computer language such as Python is a syntactically correct program, and thus can be run on input.  If the program is not syntactically correct, this theory can determine which line in the program is in error. JFLAP is written in Java and was developed by PI Rodger originally in the 1990's in C++ and has evolved through ten versions. JFLAP is a standalone tool that must be downloaded and run separately.  Our project focused on developing parts of JFLAP for web pages in HTML5, using the OpenDSA infrastructure. A team of seven Duke undergraduates and PI Rodger developed prototypes for several algorithms in the area of formal languages and automata, and worked with PI Shaffer at Virginia Tech to integrate these interactive animations and exercises into a new online textbook called OpenFLAP in the OpenDSA platform.  For example, the first step in recognizing if a python program is syntactically correct, is to examine each word in the program to identify its type. Is the word an integer, a keyword, a variable, a plus sign, a right parentheses, etc? This can be done by examining each word character by character, and modeling how a group of characters together are all digits and thus represent an integer, or together form the word "while" that is a keyword, or together form a word "count1" that is a variable name. In formal languages a finite state machine is a simple computer that can be programmed to identify all of these types of words. With JFLAP, a student can write programs for a finite state machine, type in an input word and get output on whether the word was valid or not, for example, whether the word was a valid word in a python program, and if so what type of word it was.  For this project, we implemented a finite state machine program in OpenFLAP that a student can create any program for and then type in any input to determine if their program works or not. We also implemented exercises a student could generate, solve, and get feedback on. This program and many other algorithms in formal languages were implemented into the OpenFLAP online textbook. When a student uses this textbook they will read about a concept, then try to develop the concept, such as write a finite state machine program for the problem. Then the student can experiment with the concept, such as run several inputs on their program, testing inputs that should be accepted and also testing inputs that should not be accepted. OpenFLAP can then ask the user questions about the concept they just read and experimented with to see if the student understands the concept. Our textbook OpenFLAP will engage students and will be available for faculty teaching formal languages to use with their course.       Last Modified: 04/15/2019       Submitted by: Susan H Rodger]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
