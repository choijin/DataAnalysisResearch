<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Interactive Refactoring for Multicore Parallelism</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/19/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>249263.00</AwardTotalIntnAmount>
<AwardAmount>249263</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In the multicore era, a major programming task is to make existing sequential programs parallel.  One approach to parallelizing an existing sequential program is to rewrite it from scratch.  However, the most common way is to parallelize a program incrementally, by changing the existing code.  Each small step can be seen as a behavior-preserving transformation, i.e., a refactoring.  While refactoring is more economical than rewriting, it is still tedious because it requires changing many lines of code, and it is error-prone and non-trivial because programmers need to ensure non-interference of parallel operations.&lt;br/&gt;&lt;br/&gt;This project aims to significantly enrich educational resources and programmers' toolset for refactoring sequential programs for parallelism and improving the performance of already parallel programs.  The PIs plan to pursue research activities in three areas:&lt;br/&gt;(1) mining refactorings by studying the evolution of widely used open-source programs; (2) automating refactorings for parallelism that programmers frequently use; and (3) suggesting refactorings that offer several candidate programs with different trade-offs in terms of performance or thread-safety.  This project has the potential to revolutionize how programmers parallelize software, to educate them about successful parallelization techniques, and to significantly reduce the cost and increase the quality of their code.</AbstractNarration>
<MinAmdLetterDate>04/14/2014</MinAmdLetterDate>
<MaxAmdLetterDate>04/14/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1442157</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Dig</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel Dig</PI_FULL_NAME>
<EmailAddress>danny.dig@colorado.edu</EmailAddress>
<PI_PHON>3034921293</PI_PHON>
<NSF_ID>000581803</NSF_ID>
<StartDate>04/14/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Oregon State University</Name>
<CityName>Corvallis</CityName>
<ZipCode>973318507</ZipCode>
<PhoneNumber>5417374933</PhoneNumber>
<StreetAddress>OREGON STATE UNIVERSITY</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>053599908</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>OREGON STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>053599908</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Oregon State University]]></Name>
<CityName>Corvallis</CityName>
<StateCode>OR</StateCode>
<ZipCode>973318507</ZipCode>
<StreetAddress><![CDATA[1148 Kelly Engineering Center]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>2878</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~249263</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In the multicore era, a major programming task is to make existing sequential programs parallel. One approach to parallelizing an existing sequential program is to rewrite it from scratch. However, the most common way is to parallelize a program <em>incrementally</em>, by changing the existing code. Each small step can be seen as a behavior-preserving transformation, i.e., a <em>refactoring</em>. While refactoring is more economical than rewriting, it is still tedious because it requires changing many lines of code, and it is error-prone and non-trivial because programmers need to ensure non-interference of parallel operations.</p> <p>To significantly enrich educational resources and programmers&rsquo; toolset for refactoring sequential programs for parallelism and improving the performance of already parallel programs, this project investigated the following areas. (1) Mining refactorings: We empirically studied the evolution of widely used open-source programs to <em>identify and classify the refactorings </em>for parallelism that programmers frequently use. We also provided a <em>searchable repository </em>of positive and negative examples of refactorings, which offer a tremendous educational value. (2) Automating refactorings: Grounded on our empirical studies, we <em>automated several refactorings </em>for parallelism. We designed, implemented, and evaluated several <em>program analyses </em>that are the pillars of refactorings for parallelism.</p> <p>The grant partially supported 14 top-conference papers (5 papers received awards), 3 journal papers, the public release of 9 refactoring tools and datasets (available from http://refactoring.info/tools), and training of at least six graduate students (including two PhD theses and two MS theses) and six undergrad students.</p> <p>To increase the broader impacts, using our static analysis tools developed as part of this research, we found and reported several hundreds of concurrency-related bugs in real world open-source projects. The open source developers accepted more than 500 refactoring patches generated by our tools, thus showing that developers found our refactorings useful.</p> <p>Two of our refactoring tools are already shipping with the official release of the NetBeans IDE and the Visual Studio IDE, which are used by millions of Java and C# developers.</p> <p>Our rich educational resources such as <a href="http://learnparallelism.net">http://learnparallelism.net</a> , <a href="http://www.taskifier.net">http://www.taskifier.net</a> , and <a href="http://learnasync.net">http://learnasync.net</a> provide tremendous education on the usage of parallel libraries and have attracted more than 150,000 visitors. Our results on the usage of parallel library features already influenced the design of the Java 8.0 concurrent library.</p> <p>In addition to developing university classes based on this material, the PI taught 600+ professional programmers on the topic of refactoring for parallelism at summer schools, conference tutorials, and technical courses at large companies.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 11/30/2015<br>      Modified by: Daniel&nbsp;Dig</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In the multicore era, a major programming task is to make existing sequential programs parallel. One approach to parallelizing an existing sequential program is to rewrite it from scratch. However, the most common way is to parallelize a program incrementally, by changing the existing code. Each small step can be seen as a behavior-preserving transformation, i.e., a refactoring. While refactoring is more economical than rewriting, it is still tedious because it requires changing many lines of code, and it is error-prone and non-trivial because programmers need to ensure non-interference of parallel operations.  To significantly enrich educational resources and programmersÃ† toolset for refactoring sequential programs for parallelism and improving the performance of already parallel programs, this project investigated the following areas. (1) Mining refactorings: We empirically studied the evolution of widely used open-source programs to identify and classify the refactorings for parallelism that programmers frequently use. We also provided a searchable repository of positive and negative examples of refactorings, which offer a tremendous educational value. (2) Automating refactorings: Grounded on our empirical studies, we automated several refactorings for parallelism. We designed, implemented, and evaluated several program analyses that are the pillars of refactorings for parallelism.  The grant partially supported 14 top-conference papers (5 papers received awards), 3 journal papers, the public release of 9 refactoring tools and datasets (available from http://refactoring.info/tools), and training of at least six graduate students (including two PhD theses and two MS theses) and six undergrad students.  To increase the broader impacts, using our static analysis tools developed as part of this research, we found and reported several hundreds of concurrency-related bugs in real world open-source projects. The open source developers accepted more than 500 refactoring patches generated by our tools, thus showing that developers found our refactorings useful.  Two of our refactoring tools are already shipping with the official release of the NetBeans IDE and the Visual Studio IDE, which are used by millions of Java and C# developers.  Our rich educational resources such as http://learnparallelism.net , http://www.taskifier.net , and http://learnasync.net provide tremendous education on the usage of parallel libraries and have attracted more than 150,000 visitors. Our results on the usage of parallel library features already influenced the design of the Java 8.0 concurrent library.  In addition to developing university classes based on this material, the PI taught 600+ professional programmers on the topic of refactoring for parallelism at summer schools, conference tutorials, and technical courses at large companies.                Last Modified: 11/30/2015       Submitted by: Daniel Dig]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
