<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Collaborative Research: Making Software Engineering Work for Computational Science and Engineering: An Integrated Approach</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>190411.00</AwardTotalIntnAmount>
<AwardAmount>250410</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Bogdan Mihaila</SignBlockName>
<PO_EMAI>bmihaila@nsf.gov</PO_EMAI>
<PO_PHON>7032928235</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Scientific and engineering advances are increasingly dependent upon software, and this overall field is often called Computational Science &amp; Engineering (CSE). With the increase in the reliance on software for many critical decisions and advances, it is of utmost importance for that software to be correct and easy to maintain. As a result, scientists and engineers are devoting a larger percentage of their time to the development and maintenance of code, leaving less time for the underlying science or engineering. The discipline of software engineering (SE) is focused on creating techniques and tools to help developers work more effectively and efficiently. Historically, the use of SE practices for science and engineering software (in CSE) has been relatively low. Modern SE has a number of light-weight practices that would likely fit well into the workflow of science and engineering software projects. The low use of SE in CSE appears to be the result, at least partially, of the lack of properly-tailored, lightweight, practices that have been shown effective in science/engineering domains.&lt;br/&gt;&lt;br/&gt;This project has three main activities:&lt;br/&gt;(1) Continuing the Software Engineering for Computational Science &amp; Engineering Workshop (SE-CSE) series.  This will bring together members of both communities and inform them about the problems and solutions each community has, and will lead to collaborations between the communities.&lt;br/&gt;(2) Evaluating the usefulness of peer code reviews on scientific and engineering software. By building and validating a set of checklists to support scientific/engineering peer code review, a deeper understanding of the types of defects commonly made by CSE developers will be obtained. This knowledge will not just motivate checklist items, but it will inform the development of additional SE methodologies.&lt;br/&gt;(3) Developing and evaluating whether properly chosen and clearly presented metrics can be beneficial for scientific and engineering developers.  A community survey concerning metrics will provide unique insight into the type of information the CSE developers are currently using and would be interested in using if provided properly. This type of knowledge does not currently exist and will be quite valuable to others in the community wishing to support the use of metrics. The project will build an initial version of a metrics dashboard. This dashboard will act as a proof-of-concept to illustrate that a standard SE methodology (i.e. using metrics to provide insight into the software development process) can be used effectively by CSE developers.&lt;br/&gt;&lt;br/&gt;In addition to the results of the individual activities, all of them together will help advance scientific/engineering progress by helping developers build higher quality software. The project will provide examples of how appropriate SE practices can be used effectively within the CSE domain. Dissemination of these results into the appropriate SE, CSE, and additional venues will allow them to have broad impacts.</AbstractNarration>
<MinAmdLetterDate>06/24/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/22/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1445344</AwardID>
<Investigator>
<FirstName>Jeffrey</FirstName>
<LastName>Carver</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jeffrey C Carver</PI_FULL_NAME>
<EmailAddress>carver@cs.ua.edu</EmailAddress>
<PI_PHON>2053489829</PI_PHON>
<NSF_ID>000359513</NSF_ID>
<StartDate>06/24/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Alabama Tuscaloosa</Name>
<CityName>Tuscaloosa</CityName>
<ZipCode>354870001</ZipCode>
<PhoneNumber>2053485152</PhoneNumber>
<StreetAddress>801 University Blvd.</StreetAddress>
<StreetAddress2><![CDATA[152 Rose Admin. / Box 870104]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Alabama</StateName>
<StateCode>AL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>AL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>045632635</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ALABAMA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>808245794</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Alabama Tuscaloosa]]></Name>
<CityName>Tuscaloosa</CityName>
<StateCode>AL</StateCode>
<ZipCode>354012029</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Alabama</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>AL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>026Z</Code>
<Text>NSCI: National Strategic Computing Initi</Text>
</ProgramReference>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<ProgramReference>
<Code>8005</Code>
<Text>Scientific Software Elements</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~190411</FUND_OBLG>
<FUND_OBLG>2018~59999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-f1348fef-7fff-a21d-5799-6c527c15c5df"> </span></p> <p dir="ltr"><span>This project had a number of interesting and diverse outcomes that all supported the advancement of Software Engineering for Science. This report summarizes some of the key outcomes over the duration of the project. We organize the outcomes into three categories: (1) PhD student production, (2) Key research findings, and (3) Products produced. The remainder of the report discusses each of these items in a bit of detail.</span></p> <p>&nbsp;</p> <p dir="ltr"><strong>PhD Student Production</strong></p> <p dir="ltr"><span>Dr. Nasir Eisty earned his PhD with a dissertation entitled &ldquo;Quality Assurance in Research Software&rdquo;, funded primarily by this grant. In his dissertation work he conducted empirical software engineering research on the human aspects of applying software quality practices to the development of research software. Research software is software developed in support of research, often (but not exclusively) by people who are domain experts but are not trained software engineers. Through interviews, surveys, workshops, and tutorials, he studied four software quality practices: metrics, software development process, peer code review, and software testing. While these practices are essential for any kind of software, due to their lower usage in research software projects, he investigated the motivations, challenges, barriers, and necessary improvements to make them effective for research software development. His dissertation work produced a series of recommendations on how the research software community can advance by better addressing their software quality issues.&nbsp;</span></p> <p>&nbsp;</p> <p dir="ltr"><strong>Key Research Findings</strong></p> <p dir="ltr"><span>We conducted four major research studies as part of this project. Here we summarize the key findings from three of them.</span></p> <p>&nbsp;</p> <p dir="ltr"><em>Software Testing Study</em></p> <p dir="ltr"><span>While software testing is an important activity for producing high-quality software, it is difficult to perform for research software due to the complexity of the underlying domain, lack of knowledge of expected results, and the culture of the research software community. We surveyed members of the research software developer community to understand their knowledge about and use of software testing. Even though research software developers report they have an average level of knowledge about software testing, they face a number of challenges. However, there are a number of ways to improve the situation including: proper training, a culture change to value testing, and devoting appropriate effort to writing and executing tests.&nbsp;</span></p> <p>&nbsp;</p> <p dir="ltr"><em>Code Review Study</em></p> <p dir="ltr"><span>Because peer code review is less prevalent in research software than it is in other types of software, the goal of this work was to understand the current practice of peer code review in the development of research software, identify challenges and barriers associated with peer code review in research software, and present approaches to improve the peer code review in research software. We conducted interviews and a community survey of research software developers to collect information about their current peer code review practices, difficulties they face, and how they address those difficulties. The results show that while research software teams review a large amount of their code, they lack formal process, proper organization, and adequate people to perform the reviews.&nbsp;</span></p> <p>&nbsp;</p> <p dir="ltr"><em>Software Development Process Study</em></p> <p dir="ltr"><span>This study focused on understanding how research software developers use a defined software development process. Use of a defined process results in improved design, more trustworthy results, and better project management. The results of our survey of research software developers showed they appear to follow a defined software development process at least some of the time. The respondents also have a strong positive perception about the value of following processes. To produce high-quality and reliable research software, which is critical for many research domains, research software developers must follow a proper software development process. The results indicate a positive perception of value about using defined development processes that should lead to both short-term benefits through improved results and long-term benefits through more maintainable software.</span></p> <p>&nbsp;</p> <p dir="ltr"><strong>Products Produced</strong></p> <p dir="ltr"><span>This grant provided partial support for the production of two key products (along with a number of other research papers reporting the results of the key research findings above).&nbsp;</span></p> <p>&nbsp;</p> <p><em>Software Engineering for Science Book</em></p> <p dir="ltr"><span>Together with Dr. Neil Chue Hong and Dr. George Thiruvathukal (a collaborator on this grant), I edited the book </span><span>Software Engineering for Science</span><span>. This book provides a series of peer-reviewed chapters that describe experiences with applying software engineering practices to the development of scientific software. This book is targeted at practicing scientific software developers to provide information that can help in their development of research software.&nbsp;</span></p> <p>&nbsp;</p> <p><em>Software Engineering for Science Website</em></p> <p dir="ltr"><span>We have developed the SE4Science website (</span><a href="http://www.se4science.org/"><span>http://www.SE4Science.org</span></a><span>). This website is a landing page to provide access to information regarding software engineering practices for scientific/research software. On this website, we host the web pages for the workshop series conducted at major international conferences. We also provide a &ldquo;paper hub&rdquo; that includes summaries of papers that are relevant to this topic. This resource provides information to the broader research software community on software engineering topics for research software.</span></p><br> <p>            Last Modified: 11/30/2020<br>      Modified by: Jeffrey&nbsp;C&nbsp;Carver</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   This project had a number of interesting and diverse outcomes that all supported the advancement of Software Engineering for Science. This report summarizes some of the key outcomes over the duration of the project. We organize the outcomes into three categories: (1) PhD student production, (2) Key research findings, and (3) Products produced. The remainder of the report discusses each of these items in a bit of detail.    PhD Student Production Dr. Nasir Eisty earned his PhD with a dissertation entitled "Quality Assurance in Research Software", funded primarily by this grant. In his dissertation work he conducted empirical software engineering research on the human aspects of applying software quality practices to the development of research software. Research software is software developed in support of research, often (but not exclusively) by people who are domain experts but are not trained software engineers. Through interviews, surveys, workshops, and tutorials, he studied four software quality practices: metrics, software development process, peer code review, and software testing. While these practices are essential for any kind of software, due to their lower usage in research software projects, he investigated the motivations, challenges, barriers, and necessary improvements to make them effective for research software development. His dissertation work produced a series of recommendations on how the research software community can advance by better addressing their software quality issues.     Key Research Findings We conducted four major research studies as part of this project. Here we summarize the key findings from three of them.    Software Testing Study While software testing is an important activity for producing high-quality software, it is difficult to perform for research software due to the complexity of the underlying domain, lack of knowledge of expected results, and the culture of the research software community. We surveyed members of the research software developer community to understand their knowledge about and use of software testing. Even though research software developers report they have an average level of knowledge about software testing, they face a number of challenges. However, there are a number of ways to improve the situation including: proper training, a culture change to value testing, and devoting appropriate effort to writing and executing tests.     Code Review Study Because peer code review is less prevalent in research software than it is in other types of software, the goal of this work was to understand the current practice of peer code review in the development of research software, identify challenges and barriers associated with peer code review in research software, and present approaches to improve the peer code review in research software. We conducted interviews and a community survey of research software developers to collect information about their current peer code review practices, difficulties they face, and how they address those difficulties. The results show that while research software teams review a large amount of their code, they lack formal process, proper organization, and adequate people to perform the reviews.     Software Development Process Study This study focused on understanding how research software developers use a defined software development process. Use of a defined process results in improved design, more trustworthy results, and better project management. The results of our survey of research software developers showed they appear to follow a defined software development process at least some of the time. The respondents also have a strong positive perception about the value of following processes. To produce high-quality and reliable research software, which is critical for many research domains, research software developers must follow a proper software development process. The results indicate a positive perception of value about using defined development processes that should lead to both short-term benefits through improved results and long-term benefits through more maintainable software.    Products Produced This grant provided partial support for the production of two key products (along with a number of other research papers reporting the results of the key research findings above).      Software Engineering for Science Book Together with Dr. Neil Chue Hong and Dr. George Thiruvathukal (a collaborator on this grant), I edited the book Software Engineering for Science. This book provides a series of peer-reviewed chapters that describe experiences with applying software engineering practices to the development of scientific software. This book is targeted at practicing scientific software developers to provide information that can help in their development of research software.      Software Engineering for Science Website We have developed the SE4Science website (http://www.SE4Science.org). This website is a landing page to provide access to information regarding software engineering practices for scientific/research software. On this website, we host the web pages for the workshop series conducted at major international conferences. We also provide a "paper hub" that includes summaries of papers that are relevant to this topic. This resource provides information to the broader research software community on software engineering topics for research software.       Last Modified: 11/30/2020       Submitted by: Jeffrey C Carver]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
