<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SI2-SSE: Synthesizing Self-Contained Scientific Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>499919.00</AwardTotalIntnAmount>
<AwardAmount>499919</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Bogdan Mihaila</SignBlockName>
<PO_EMAI>bmihaila@nsf.gov</PO_EMAI>
<PO_PHON>7032928235</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computational aspects of scientific experiments have been growing steadily. This creates an increasing need to be able to reproduce the results. Science is also increasingly performed by exploring diverse sets of data. Unsurprisingly, there is a demand for being able to easily repeat the numerous transformations performed. Software packaged with tools from this project will allow scientists to publish their code in a form that can be utilized by others with minimal effort. By eliminating many of the challenges of building, configuring, and running software, it will allow members of the scientific community to more easily reproduce each others' computational results.&lt;br/&gt;&lt;br/&gt;Increasingly, entire virtual machines are published to ensure that a recipient does not have to replicate the compute environment, retrieve data and code dependencies, or invest effort into configuring the system. However, this approach scales poorly with the growth in size of the included data sets, the extraneous functionality in applications that utilize versatile software libraries, and the irrelevant code in stock operating system distributions. This project will design, develop, and evaluate a toolchain that allows scientists to transform their software into specialized applications with all the necessary environmental conditions and portions of required data sets built directly into the code. The resulting scientific appliances can be distributed for others to explore and verify results without the overhead of shipping extraneous data and code.</AbstractNarration>
<MinAmdLetterDate>08/08/2014</MinAmdLetterDate>
<MaxAmdLetterDate>04/05/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1440800</AwardID>
<Investigator>
<FirstName>Ashish</FirstName>
<LastName>Gehani</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ashish Gehani</PI_FULL_NAME>
<EmailAddress>ashish.gehani@sri.com</EmailAddress>
<PI_PHON>6508592200</PI_PHON>
<NSF_ID>000315262</NSF_ID>
<StartDate>08/08/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SRI International</Name>
<CityName>Menlo Park</CityName>
<ZipCode>940253493</ZipCode>
<PhoneNumber>7032478529</PhoneNumber>
<StreetAddress>333 RAVENSWOOD AVE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009232752</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>SRI INTERNATIONAL</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009232752</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SRI International]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>940253493</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>2878</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>2878</Code>
<Text>SPECIAL PROJECTS - CCF</Text>
</ProgramReference>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<ProgramReference>
<Code>8005</Code>
<Text>Scientific Software Elements</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~499919</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of the project was to develop tools that simplify the process of packaging software into a self-contained form. We decomposed the task into multiple parts. The first builds the target and links it with its dependencies into a form suitable for further analysis. This was addressed through contributions to an external effort (WLLVM) and the creation of a high performance variant (GLLVM). The second focuses on customizing the resulting code to the context in which it is to be deployed by leveraging configuration details. Two approaches were explored for this. In one, an extant tool (OCCAM) was ported from FreeBSD to Linux and macOS and extended to incorporate dynamic analysis. In the other, custom support for lifting configuration file contents into program memory was developed as part of a new subsystem (Trimmer). Both use the static information gleaned to perform online partial evaluation. The third component aims to specialize code with respect to the subset of data that is utilized in a deployment. This functionality has been prototyped (MiDas). To ensure that both the build as well as its environment can be reproduced, a framework (Wholly!) was created to simplify the process. Since specialization can be guided by a policy, an extension (DeepOCCAM) was developed to explore whether the policy could be learned.</p> <p>&nbsp;</p><br> <p>            Last Modified: 12/15/2020<br>      Modified by: Ashish&nbsp;Gehani</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of the project was to develop tools that simplify the process of packaging software into a self-contained form. We decomposed the task into multiple parts. The first builds the target and links it with its dependencies into a form suitable for further analysis. This was addressed through contributions to an external effort (WLLVM) and the creation of a high performance variant (GLLVM). The second focuses on customizing the resulting code to the context in which it is to be deployed by leveraging configuration details. Two approaches were explored for this. In one, an extant tool (OCCAM) was ported from FreeBSD to Linux and macOS and extended to incorporate dynamic analysis. In the other, custom support for lifting configuration file contents into program memory was developed as part of a new subsystem (Trimmer). Both use the static information gleaned to perform online partial evaluation. The third component aims to specialize code with respect to the subset of data that is utilized in a deployment. This functionality has been prototyped (MiDas). To ensure that both the build as well as its environment can be reproduced, a framework (Wholly!) was created to simplify the process. Since specialization can be guided by a policy, an extension (DeepOCCAM) was developed to explore whether the policy could be learned.          Last Modified: 12/15/2020       Submitted by: Ashish Gehani]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
