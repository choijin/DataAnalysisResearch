<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Exploring the Potential of "Native Client" for Computational Science</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2014</AwardEffectiveDate>
<AwardExpirationDate>01/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>35923.00</AwardTotalIntnAmount>
<AwardAmount>35923</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Robert Chadduck</SignBlockName>
<PO_EMAI>rchadduc@nsf.gov</PO_EMAI>
<PO_PHON>7032922247</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This EAGER proposal is to test the usability and affordability of a new form of cloud service for providing more cost effective computational resources for certain types of research computations. The cloud service is Google's "Exacycle" cloud using their "Native Client"("NaCl") programming model which can be offered comparatively inexpensively because of its constrained demands on the overall Exacycle system's resources. The usability component of the test will determine the ease with which applications can be ported to the NaCl programming mode. The affordability depends on the application's relative demands for computation, memory, data storage, and data communication. The PI has selected a specific, scientifically important application for this test as representative of applications with suitable system demands. If successful, this new form of service can provide substantial additional computational resources cost-effectively by utilizing otherwise unused capabilities of a very large, commercial cloud.</AbstractNarration>
<MinAmdLetterDate>01/15/2014</MinAmdLetterDate>
<MaxAmdLetterDate>01/15/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1419547</AwardID>
<Investigator>
<FirstName>Nicholas</FirstName>
<LastName>Nystrom</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Nicholas Nystrom</PI_FULL_NAME>
<EmailAddress>nystrom@psc.edu</EmailAddress>
<PI_PHON>4128609095</PI_PHON>
<NSF_ID>000216722</NSF_ID>
<StartDate>01/15/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName/>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7619</Code>
<Text>Innovative HPC</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~35923</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Researchers are requesting computing time and storage resources from the national cyberinfrastructure at an unprecedented rate that outpaces the capacities of existing resources. Beyond that predictable load, &ldquo;urgent computing&rdquo; can require additional and possibly vast amounts of computing at short notice for emergency decision making and prediction. One approach to addressing those gaps in capacity is by leveraging cloud computing for the parts of the job mix for which clouds are well-suited.</p> <p><strong>Intellectual&nbsp;Merit:</strong> The goal of this modest project was to investigate and test the usability and affordability of a new form of cloud service for providing more cost-effective computational resources for certain types of research computations. If successful, this new service might provide substantial additional computational resources cost-effectively by utilizing otherwise unused capabilities of a large commercial cloud.</p> <p>The cloud service to be evaluated was Google&rsquo;s &ldquo;Exacycle&rdquo; cloud using their &ldquo;Native Client&rdquo; (&ldquo;NaCl&rdquo;) programming model. Native Client was a new approach to securing cloud-based applications that was originally developed for securing web applications to be run in a browser. Native Client, which ran on Google Exacycle, offered a Platform-as-a-Service (PaaS) consisting of a C++/C compiler, libraries, and a runtime system to securely leverage Exacycle&rsquo;s substantial capacity.</p> <p>We aimed to understand three to determine whether Native Client on Exacycle would be of strategic value to computational science. First, what were the practical implications of the source code changes required by Native Client&rsquo;s approach to security and to the constraints for running effectively under Exacycle? Second, once a Native Client applications was created, how smoothly could it be integrated with computational science workflows? Third, were the availability of the Exacycle NaCl platform and its cost model conducive to their inclusion in cyberinfrastructure for computational science?</p> <p>To gain realistic experience with Native Client and Exacycle, we chose an application in the field of genomics which performs multiple sequence alignment. This application, MSAProbs, is used by the research community and has an execution profile appropriate for Exacycle. Specifically, MSAProbs requires only one core and less than 1GB of RAM, runs in under an hour, and does little I/O. MSAProbs is available from SourceForge (<a href="http://msaprobs.sourceforge.net/homepage.htm">http://msaprobs.sourceforge.net/homepage.htm</a>) under an open-source (GPL3) license. It is written in C++. We used MSAProbs version 0.9.7.</p> <p>We used the NaCl compiler found in the Google Pepper SDK (v39), which was the latest version available at the time. Building the actual MSAProbs executable under the Pepper SDK required no source code changes and only minimal changes to the build system to ensure that the proper header files were included and the final executable was linked against the proper libraries. To facilitate benchmarking of the final executable on the Exacycle, we created a second NaCl binary to which we added timing code. After some effort, we successfully executed MSAProbs on Exacycle, piping standard output and standard error to the appropriate files in Google&rsquo;s Cloud Storage.</p> <p>We executed MSAProbs using six sequence datasets (workloads):</p> <ul> <li>TRNA: 7 sequences of t-RNA synthetases</li> <li>phospholipase A2 small: 8 phospholipase A2 protein sequences</li> <li>phospholipase A2 large: 272 phospholipase A2 protein sequences</li> <li>estradiol: 25 17-beta-dehydrogenase sequences</li> <li>Lyase_aromatic (PF00221): 143 sequences of phenylalanine ammonia-lyase, histidine ammonia-lyase, and tyrosine aminomutase</li> <li>AAA_35 (PF14516): 99 sequences of AAAs (ATPases Associated wit...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Researchers are requesting computing time and storage resources from the national cyberinfrastructure at an unprecedented rate that outpaces the capacities of existing resources. Beyond that predictable load, "urgent computing" can require additional and possibly vast amounts of computing at short notice for emergency decision making and prediction. One approach to addressing those gaps in capacity is by leveraging cloud computing for the parts of the job mix for which clouds are well-suited.  Intellectual Merit: The goal of this modest project was to investigate and test the usability and affordability of a new form of cloud service for providing more cost-effective computational resources for certain types of research computations. If successful, this new service might provide substantial additional computational resources cost-effectively by utilizing otherwise unused capabilities of a large commercial cloud.  The cloud service to be evaluated was GoogleÆs "Exacycle" cloud using their "Native Client" ("NaCl") programming model. Native Client was a new approach to securing cloud-based applications that was originally developed for securing web applications to be run in a browser. Native Client, which ran on Google Exacycle, offered a Platform-as-a-Service (PaaS) consisting of a C++/C compiler, libraries, and a runtime system to securely leverage ExacycleÆs substantial capacity.  We aimed to understand three to determine whether Native Client on Exacycle would be of strategic value to computational science. First, what were the practical implications of the source code changes required by Native ClientÆs approach to security and to the constraints for running effectively under Exacycle? Second, once a Native Client applications was created, how smoothly could it be integrated with computational science workflows? Third, were the availability of the Exacycle NaCl platform and its cost model conducive to their inclusion in cyberinfrastructure for computational science?  To gain realistic experience with Native Client and Exacycle, we chose an application in the field of genomics which performs multiple sequence alignment. This application, MSAProbs, is used by the research community and has an execution profile appropriate for Exacycle. Specifically, MSAProbs requires only one core and less than 1GB of RAM, runs in under an hour, and does little I/O. MSAProbs is available from SourceForge (http://msaprobs.sourceforge.net/homepage.htm) under an open-source (GPL3) license. It is written in C++. We used MSAProbs version 0.9.7.  We used the NaCl compiler found in the Google Pepper SDK (v39), which was the latest version available at the time. Building the actual MSAProbs executable under the Pepper SDK required no source code changes and only minimal changes to the build system to ensure that the proper header files were included and the final executable was linked against the proper libraries. To facilitate benchmarking of the final executable on the Exacycle, we created a second NaCl binary to which we added timing code. After some effort, we successfully executed MSAProbs on Exacycle, piping standard output and standard error to the appropriate files in GoogleÆs Cloud Storage.  We executed MSAProbs using six sequence datasets (workloads):  TRNA: 7 sequences of t-RNA synthetases phospholipase A2 small: 8 phospholipase A2 protein sequences phospholipase A2 large: 272 phospholipase A2 protein sequences estradiol: 25 17-beta-dehydrogenase sequences Lyase_aromatic (PF00221): 143 sequences of phenylalanine ammonia-lyase, histidine ammonia-lyase, and tyrosine aminomutase AAA_35 (PF14516): 99 sequences of AAAs (ATPases Associated with diverse cellular Activities)   Each of these alignments was run successfully on Exacycle. Run times ranged from several seconds to one minute. Queue wait times were less than one hour. Exacycle executed MSAProbs from 21% faster to 40% slower than a notebook computer equipped with an Intel Core i7-3639QM 2...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
