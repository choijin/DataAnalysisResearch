<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: A Hardware and Software Architecture for Data-Centric Parallel Computing</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/15/2015</AwardEffectiveDate>
<AwardExpirationDate>01/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Yuanyuan Yang</SignBlockName>
<PO_EMAI>yyang@nsf.gov</PO_EMAI>
<PO_PHON>7032928067</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Energy efficiency is the key challenge facing computer systems. To improve&lt;br/&gt;performance under a limited energy budget, systems are becoming increasingly&lt;br/&gt;parallel, featuring many smaller and simpler cores, and heterogeneous,&lt;br/&gt;featuring cores specialized for certain tasks. Even with these improvements,&lt;br/&gt;two critical challenges remain. First, without reducing data movement, memory&lt;br/&gt;accesses and communication will dominate energy consumption. Thus, limiting&lt;br/&gt;data movement must become a primary design objective. Second, these systems&lt;br/&gt;will be highly complex, and will need powerful abstractions to shield&lt;br/&gt;programmers from this complexity. Current systems are designed in a&lt;br/&gt;computation-centric way that is a poor match for these challenges. Memory&lt;br/&gt;hierarchies are hardware-managed and opaque to software, which needlessly&lt;br/&gt;increases data movement; and runtimes lack the proper hardware mechanisms and&lt;br/&gt;software policies to manage heterogeneous resources efficiently.&lt;br/&gt;&lt;br/&gt;This research project takes a holistic approach to addressing these challenges, by&lt;br/&gt;co-designing an architecture and runtime system that efficiently run dynamic&lt;br/&gt;parallel applications on systems with heterogeneous cores and memories.&lt;br/&gt;Redesigning hardware to be directly exploited by a dynamic runtime enables (a)&lt;br/&gt;many more opportunities to reduce data movement, (b) better usage of&lt;br/&gt;heterogeneous resources, and (c) much faster adaptation to changing application&lt;br/&gt;needs and available resources. Three key components underlie this design.&lt;br/&gt;First, a scalable memory system incorporates combinations of heterogeneous&lt;br/&gt;memory technologies to improve efficiency, and exposes them to software, which&lt;br/&gt;can divide these physical memories into many virtual cache and memory&lt;br/&gt;hierarchies to finely control data placement. Second, specialized programmable&lt;br/&gt;engines orchestrate communication among cores, accelerate intensive runtime&lt;br/&gt;functions such as load balancing, and monitor how tasks use hardware resources&lt;br/&gt;to guide runtime decisions. Third, a hardware-accelerated runtime leverages&lt;br/&gt;this novel architectural support to place data and computation to minimize data&lt;br/&gt;movement, use the most suitable core for each task, and quickly respond to&lt;br/&gt;changing application needs. This runtime targets a high-level programming model&lt;br/&gt;that lets programmers express fine-grained and irregular task, data, and&lt;br/&gt;pipeline parallelism. These techniques build on an analytical design approach&lt;br/&gt;that makes hardware easy to understand and predict, and enables runtimes to&lt;br/&gt;navigate multi-dimensional tradeoffs efficiently.&lt;br/&gt;&lt;br/&gt;If successful, this project will make heterogeneous systems more efficient,&lt;br/&gt;more broadly applicable, and easier to program. It will especially benefit&lt;br/&gt;applications with dynamic and fine-grained parallelism, advancing key emerging&lt;br/&gt;domains where these workloads are pervasive, such as graph analytics and online&lt;br/&gt;data-intensive services. In addition, the infrastructure developed as part of&lt;br/&gt;this project will be publicly released, enabling others to build on the results&lt;br/&gt;of this work.</AbstractNarration>
<MinAmdLetterDate>01/21/2015</MinAmdLetterDate>
<MaxAmdLetterDate>02/27/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1452994</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Sanchez Martin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel Sanchez Martin</PI_FULL_NAME>
<EmailAddress>sanchez@csail.mit.edu</EmailAddress>
<PI_PHON>6172531000</PI_PHON>
<NSF_ID>000636815</NSF_ID>
<StartDate>01/21/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394307</ZipCode>
<StreetAddress><![CDATA[77 Massachusetts Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7941</Code>
<Text>COMPUTER ARCHITECTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~200000</FUND_OBLG>
<FUND_OBLG>2017~200000</FUND_OBLG>
<FUND_OBLG>2019~100000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Computer systems are becoming increasingly parallel and specialized, and improving performance requires exploiting high degrees of parallelism. For example, multicore chips feature tens to hundreds cores, and specialized accelerators such as GPUs execute thousands of concurrent computation streams. However, parallelism and specialization alone are insufficient to improve performance in a sustainable way, due to three key challenges. First, memory accesses and communication limit performance in current systems, requiring new techniques to minimize data movement. Second, parallelism is limited in many applications, and current systems squander most of this available parallelism. Third, current parallel and heterogeneous systems are extremely complex, and need powerful abstractions to shield programmers from this complexity.&nbsp;</p> <p><span> <br /><strong>Intellectual Merit: </strong>This project has taken a holistic approach to address the challenges of data movement, limited parallelism, and complexity. We have co-designed hardware support, programming models, and runtime and compiler techniques that efficiently run dynamic parallel applications on systems with heterogeneous cores and memories. Our research has produced the following main outcomes: <br /> <br />First, we have investigated and designed <em>software-defined memory hierarchies</em>, a reconfigurable memory system that transparently adapts to application needs. Hardware and a software runtime collaborate to profile applications and learn high-performance configurations, building near-optimal memory hierarchies for each application. Moreover, we have designed hardware and runtime techniques that place both data and computation across the system to further reduce data movement. These techniques achieve order-of-magnitude reductions in data movement, and leverage both heterogeneous memory technologies and heterogeneous cores without exposing their complexity to programmers. <br /> <br />Second, we have investigated techniques to reduce data movement and communication on <em>irregular and dynamic applications</em>. Irregular applications, such as graph analytics, are dominated by memory accesses and synchronization. They use existing hardware poorly, which has been optimized for regular applications like linear algebra. To address this issue, we have designed simple hardware techniques that exploit high-level program semantics, such as commutativity and task structure, to avoid synchronization and dramatically reduce memory accesses. These techniques improve performance by 2-11x and achieve order-of-magnitude data movement reductions on applications that operate on irregular data structures, like graphs and hash tables. <br /> <br />Third, we have designed <em>object-based memory hierarchies</em>, a new memory hierarchy organization that exploits the object-based semantics of modern programming languages like Java, Rust, or Go. This memory system is built from the ground up to move and manage variable-sized objects instead of fixed-size chunks (e.g., cache lines) as in existing systems. Managing objects matches application-level semantics, reducing data movement. A new hardware-software interface hides the memory layout, and new hardware techniques exploit this interface to avoid the overheads of conventional memory hierarchies, like associative lookups and address translation, and to enable new optimizations, like object-based compression. As a result, object-based hierarchies improve performance by 30%-3x and reduce memory hierarchy energy by 2.6x. <br /> <br />Fourth, we have designed <em>Swarm</em>, a new parallel architecture for efficient fine-grain parallelism and synchronization. Swarm programs consist of tiny tasks with programmer-specified timestamps. Swarm runs tasks speculatively and out of order, and efficiently speculates thousands of tasks ahead of the earliest active task to uncover ordered parallelism. We have designed novel hardware support and programming models that make ordered speculation scalable and very efficient. Swarm makes parallel programming easier and uncovers abundant parallelism, scaling applications that are conventionally deemed sequential. At 256 cores, Swarm outperforms conventional parallel algorithms by one to two orders of magnitude, and achieves speedups of up to 600x. We have shown that Swarm's techniques can be used to reduce data movement, applied them to build specialized accelerators, and leveraged them to design a compiler that automatically parallelizes sequential applications. <br /> <br />To prototype and evaluate these techniques, we have developed a substantial amount of infrastructure, including state-of-the-art simulators, runtimes, benchmarks, an FPGA accelerator, and a compiler. We have released this infrastructure under open-source licenses, allowing others to build on the results of our work, both in research and in the classroom. <br /> <br />The results of this project have been disseminated through 24 publications in top-tier venues, which have been recognized through several awards. <br /><br /><strong>Broader Impacts: </strong>The techniques developed in this project make parallel and heterogeneous systems faster, more efficient, much more broadly applicable, and easier to program. These techniques especially benefit dynamic, irregular applications, advancing key emerging domains where these workloads are pervasive, such as big-data analytics and online data-intensive services. By innovating at both the hardware and software levels, these techniques have achieved performance and efficiency gains that neither hardware-only nor software-only approaches can provide. <br /> <br />Finally, this project has supported the training and professional development of 12 Ph.D. students, 4 M.Eng. students, and 13 undergraduate students. Five students have earned their doctoral degrees working under this project, and have graduated to leading research positions in academia and industry.</span></p><br> <p>            Last Modified: 05/29/2020<br>      Modified by: Daniel&nbsp;Sanchez Martin</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Computer systems are becoming increasingly parallel and specialized, and improving performance requires exploiting high degrees of parallelism. For example, multicore chips feature tens to hundreds cores, and specialized accelerators such as GPUs execute thousands of concurrent computation streams. However, parallelism and specialization alone are insufficient to improve performance in a sustainable way, due to three key challenges. First, memory accesses and communication limit performance in current systems, requiring new techniques to minimize data movement. Second, parallelism is limited in many applications, and current systems squander most of this available parallelism. Third, current parallel and heterogeneous systems are extremely complex, and need powerful abstractions to shield programmers from this complexity.     Intellectual Merit: This project has taken a holistic approach to address the challenges of data movement, limited parallelism, and complexity. We have co-designed hardware support, programming models, and runtime and compiler techniques that efficiently run dynamic parallel applications on systems with heterogeneous cores and memories. Our research has produced the following main outcomes:    First, we have investigated and designed software-defined memory hierarchies, a reconfigurable memory system that transparently adapts to application needs. Hardware and a software runtime collaborate to profile applications and learn high-performance configurations, building near-optimal memory hierarchies for each application. Moreover, we have designed hardware and runtime techniques that place both data and computation across the system to further reduce data movement. These techniques achieve order-of-magnitude reductions in data movement, and leverage both heterogeneous memory technologies and heterogeneous cores without exposing their complexity to programmers.    Second, we have investigated techniques to reduce data movement and communication on irregular and dynamic applications. Irregular applications, such as graph analytics, are dominated by memory accesses and synchronization. They use existing hardware poorly, which has been optimized for regular applications like linear algebra. To address this issue, we have designed simple hardware techniques that exploit high-level program semantics, such as commutativity and task structure, to avoid synchronization and dramatically reduce memory accesses. These techniques improve performance by 2-11x and achieve order-of-magnitude data movement reductions on applications that operate on irregular data structures, like graphs and hash tables.    Third, we have designed object-based memory hierarchies, a new memory hierarchy organization that exploits the object-based semantics of modern programming languages like Java, Rust, or Go. This memory system is built from the ground up to move and manage variable-sized objects instead of fixed-size chunks (e.g., cache lines) as in existing systems. Managing objects matches application-level semantics, reducing data movement. A new hardware-software interface hides the memory layout, and new hardware techniques exploit this interface to avoid the overheads of conventional memory hierarchies, like associative lookups and address translation, and to enable new optimizations, like object-based compression. As a result, object-based hierarchies improve performance by 30%-3x and reduce memory hierarchy energy by 2.6x.    Fourth, we have designed Swarm, a new parallel architecture for efficient fine-grain parallelism and synchronization. Swarm programs consist of tiny tasks with programmer-specified timestamps. Swarm runs tasks speculatively and out of order, and efficiently speculates thousands of tasks ahead of the earliest active task to uncover ordered parallelism. We have designed novel hardware support and programming models that make ordered speculation scalable and very efficient. Swarm makes parallel programming easier and uncovers abundant parallelism, scaling applications that are conventionally deemed sequential. At 256 cores, Swarm outperforms conventional parallel algorithms by one to two orders of magnitude, and achieves speedups of up to 600x. We have shown that Swarm's techniques can be used to reduce data movement, applied them to build specialized accelerators, and leveraged them to design a compiler that automatically parallelizes sequential applications.    To prototype and evaluate these techniques, we have developed a substantial amount of infrastructure, including state-of-the-art simulators, runtimes, benchmarks, an FPGA accelerator, and a compiler. We have released this infrastructure under open-source licenses, allowing others to build on the results of our work, both in research and in the classroom.    The results of this project have been disseminated through 24 publications in top-tier venues, which have been recognized through several awards.   Broader Impacts: The techniques developed in this project make parallel and heterogeneous systems faster, more efficient, much more broadly applicable, and easier to program. These techniques especially benefit dynamic, irregular applications, advancing key emerging domains where these workloads are pervasive, such as big-data analytics and online data-intensive services. By innovating at both the hardware and software levels, these techniques have achieved performance and efficiency gains that neither hardware-only nor software-only approaches can provide.    Finally, this project has supported the training and professional development of 12 Ph.D. students, 4 M.Eng. students, and 13 undergraduate students. Five students have earned their doctoral degrees working under this project, and have graduated to leading research positions in academia and industry.       Last Modified: 05/29/2020       Submitted by: Daniel Sanchez Martin]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
