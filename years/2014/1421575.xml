<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF:  Small:  Scalable and Maximal Predictive Runtime Verification for Concurrent Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The increasingly widespread use of multicore processors, whose computing power&lt;br/&gt;can only be unleashed by concurrent software, makes software defects, or bugs,&lt;br/&gt;become more common and labor-intensive to detect and repair.  Runtime verification&lt;br/&gt;is a novel analysis approach that extracts information from a running system and&lt;br/&gt;uses it to detect and possibly react to observed behaviors satisfying or violating&lt;br/&gt;certain properties.  Runtime verification scales well and avoids the complexity of&lt;br/&gt;traditional formal verification techniques. The techniques developed in this project &lt;br/&gt;will lead to robust production quality software by providing a scalable alternative &lt;br/&gt;to formal verification that provides many of the same guarantees for safety and security.&lt;br/&gt;&lt;br/&gt;This project aims to develop a scalable predictive runtime verification framework&lt;br/&gt;for concurrent software.  A major technical advancement over prior art is that it&lt;br/&gt;not only detects errors when they occur at runtime, but is able to predict general&lt;br/&gt;security and safety property violations before they actually surface, preventing&lt;br/&gt;bad behaviors from happening by taking proper actions defined by the users.  This&lt;br/&gt;project builds upon a sound and maximal causal model, hereby providing the provably&lt;br/&gt;maximum possible prediction power on the observed trace with no false alarms.  The&lt;br/&gt;core research insight of this work is to explore the maximal causality of concurrency&lt;br/&gt;with automated constraint solving, which has been studied for decades and is becoming&lt;br/&gt;increasingly powerful.</AbstractNarration>
<MinAmdLetterDate>07/02/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421575</AwardID>
<Investigator>
<FirstName>Grigore</FirstName>
<LastName>Rosu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Grigore Rosu</PI_FULL_NAME>
<EmailAddress>grosu@illinois.edu</EmailAddress>
<PI_PHON>2172447431</PI_PHON>
<NSF_ID>000488532</NSF_ID>
<StartDate>07/02/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>6892</Code>
<Text>CI REUSE</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software concurrency errors have caused catastrophic failures, such as securitybreaches and even loss of human life.&nbsp; Moreover, due to their non-deterministic nature and huge search space, concurrency errors are hard to detect and reproduce.&nbsp; The methods and tools developed in this project help in increasing the reliability of concurrent computer software.&nbsp; Specifically, this project has developed a technique and tools that allow us topredict concurrency errors by observing and analyzing system executions.&nbsp; Two fundamental aspects of the resulting technology are that it is sound, that is all the reported errors are real errors (no false positives), and it ismaximal, that is it misses no error in the observed execution.&nbsp; The key idea is to generate a mathematical formula from the observed execution, whose solutions capture precisely all the concurrency bugs.&nbsp; The solutions of the formula are then computed using off-the-shelf solvers.&nbsp; We have extended the main technique to also work in the context of symbolic program verification, as an advanced partial-order behavior reduction method.</p> <p><br />The methods, tools, and products produced as the result of this project have a significant positive impact on the reliability of concurrent production systems.&nbsp; Many disciplines rely on software systems that have multithreaded or distributed components, which are prone to concurrency errors.&nbsp; Consequently, such disciplines will directly or indirectly benefit from having atool that can automatically predict such errors.&nbsp; Moreover, this project has generated fourteen (14) journal and conference publications, two (2) graduate theses, and one (1) US patent, and the proposed technique has been incorporated in product commercialized by Runtime Verification, Inc., a startup founded by the PI.&nbsp; The students funded by this project have gained significant experience insoftware testing and verification, and are now considered runtime verificationexperts by the community.&nbsp; The PI has proposed and taught a new advanced course on Runtime Verification, which includes the predictive runtime analysis technique developed in this project, and has given various tutorials and seminars, in addition to conference presentations.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 05/13/2019<br>      Modified by: Grigore&nbsp;Rosu</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800373537_Capture4-NSF--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800373537_Capture4-NSF--rgov-800width.jpg" title="Tool Overview"><img src="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800373537_Capture4-NSF--rgov-66x44.jpg" alt="Tool Overview"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Overview of our general predictive runtime analysis tool, GPredict.</div> <div class="imageCredit">Own presentation (ICSE'15)</div> <div class="imageSubmitted">Grigore&nbsp;Rosu</div> <div class="imageTitle">Tool Overview</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800139686_Capture2-NSF--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800139686_Capture2-NSF--rgov-800width.jpg" title="Predictive Trace Analysis"><img src="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800139686_Capture2-NSF--rgov-66x44.jpg" alt="Predictive Trace Analysis"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Predictive trace analysis is more precise than static analysis and more powerful than ordinary dynamic analysis.</div> <div class="imageCredit">Own presentation (ICSE'15)</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Grigore&nbsp;Rosu</div> <div class="imageTitle">Predictive Trace Analysis</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800283915_Capture3-NSF--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800283915_Capture3-NSF--rgov-800width.jpg" title="Key Idea"><img src="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800283915_Capture3-NSF--rgov-66x44.jpg" alt="Key Idea"></a> <div class="imageCaptionContainer"> <div class="imageCaption">The key idea of our approach is to reduce the problem of predicting concurrency bugs to solving constraints using efficient, off-the-shelf solvers.</div> <div class="imageCredit">Own presentation (ICSE'15)</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Grigore&nbsp;Rosu</div> <div class="imageTitle">Key Idea</div> </div> </li> <li> <a href="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800022031_Capture1-NSF--rgov-214x142.jpg" original="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800022031_Capture1-NSF--rgov-800width.jpg" title="Concurrency Bugs"><img src="/por/images/Reports/POR/2019/1421575/1421575_10315317_1557800022031_Capture1-NSF--rgov-66x44.jpg" alt="Concurrency Bugs"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Concurrency bugs can be catastrophic and hard to detect.</div> <div class="imageCredit">Own presentation (ICSE'15)</div> <div class="imagePermisssions">Copyright owner is an institution with an existing agreement allowing use by NSF</div> <div class="imageSubmitted">Grigore&nbsp;Rosu</div> <div class="imageTitle">Concurrency Bugs</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software concurrency errors have caused catastrophic failures, such as securitybreaches and even loss of human life.  Moreover, due to their non-deterministic nature and huge search space, concurrency errors are hard to detect and reproduce.  The methods and tools developed in this project help in increasing the reliability of concurrent computer software.  Specifically, this project has developed a technique and tools that allow us topredict concurrency errors by observing and analyzing system executions.  Two fundamental aspects of the resulting technology are that it is sound, that is all the reported errors are real errors (no false positives), and it ismaximal, that is it misses no error in the observed execution.  The key idea is to generate a mathematical formula from the observed execution, whose solutions capture precisely all the concurrency bugs.  The solutions of the formula are then computed using off-the-shelf solvers.  We have extended the main technique to also work in the context of symbolic program verification, as an advanced partial-order behavior reduction method.   The methods, tools, and products produced as the result of this project have a significant positive impact on the reliability of concurrent production systems.  Many disciplines rely on software systems that have multithreaded or distributed components, which are prone to concurrency errors.  Consequently, such disciplines will directly or indirectly benefit from having atool that can automatically predict such errors.  Moreover, this project has generated fourteen (14) journal and conference publications, two (2) graduate theses, and one (1) US patent, and the proposed technique has been incorporated in product commercialized by Runtime Verification, Inc., a startup founded by the PI.  The students funded by this project have gained significant experience insoftware testing and verification, and are now considered runtime verificationexperts by the community.  The PI has proposed and taught a new advanced course on Runtime Verification, which includes the predictive runtime analysis technique developed in this project, and has given various tutorials and seminars, in addition to conference presentations.                Last Modified: 05/13/2019       Submitted by: Grigore Rosu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
