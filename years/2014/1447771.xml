<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>BIGDATA: F: DKM: Collaborative Research: PXFS: ParalleX Based Transformative I/O System for Big Data</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Recent decades have seen the development of computational science where modeling and data analysis are critical to exploration, discovery, and refinement of new innovations in science and engineering. More recently the techniques have been applied to arts, social, political and other fields less traditionally reliant on high performance computing. This innovation has grown out of realization some 20 years ago that I/O (input/output) support for high performance parallel and distributed architectures had lagged behind that of pure computational speed, and further that bring I/O up to speed was both critical, and a rather difficult problem. The core hurdle of contemporary I/O on large HPC machines relates to issues of latency in large parts caused by the deficiencies of the historical I/O model that was relevant when computers were exclusively large, centralized, single processor systems shared by many time-sharing programs. In order to improve I/O on scalability on future hardware architectures novel approaches are required.&lt;br/&gt;&lt;br/&gt;This project is conducting research on an extension of ParalleX, a new highly innovative parallel execution model. The extension provides a powerful I/O interface that allows researchers to create highly efficient data management, discovery, and analysis codes for Big Data applications.  This new extension, known as PXFS, is based on HPX, an implementation of ParalleX based on C++, and OrangeFS, a high performance parallel file system.  The research goal driving PXFS is to extend HPX objects into I/O space so that the objects become persistent and storage becomes another class of memory, all accessed as a single virtual address space and managed by an event driven dynamic adaptive computation environment.  Critical aspects of this approach include futures-based synchronization, dynamic locality management, dynamic resource management, hierarchical name space, and an active global address space (AGAS).  The overall goals of PXFS are to eliminate the division of programming imposed by conventional file system through the unification of name spaces and their management, and to minimize global synchronization in order to support asynchronous concurrency.  The research methodology is to implement a Map/Reduce application framework using PXFS and evaluate its effectiveness in both performance and ease of use.&lt;br/&gt;&lt;br/&gt;This project is conducted at three major research universities involving undergraduate and graduate students, post-docs, and high-school teachers and their students.  The project includes a PI from the functional genomics field acting as domain science expert in order to focus the development efforts on real world problems. Graduate students and post-docs involved in the project are trained in these areas to promote scientists who understanding both aspects of Big Data problems.  The project engages under represented minorities with the goal to inspire them to pursue a career in computer science or genomics. The software developed by the project is available open-source and archived using an integrated source code revision repository, wiki, and bug tracking software system in addition to code releases with accompanying documentation.</AbstractNarration>
<MinAmdLetterDate>08/22/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/22/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1447771</AwardID>
<Investigator>
<FirstName>Walter</FirstName>
<LastName>Ligon</LastName>
<PI_MID_INIT>B</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Walter B Ligon</PI_FULL_NAME>
<EmailAddress>walt@clemson.edu</EmailAddress>
<PI_PHON>8646561224</PI_PHON>
<NSF_ID>000359301</NSF_ID>
<StartDate>08/22/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>FRANK</FirstName>
<LastName>FELTUS</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>FRANK FELTUS</PI_FULL_NAME>
<EmailAddress>ffeltus@clemson.edu</EmailAddress>
<PI_PHON>8646563231</PI_PHON>
<NSF_ID>000261582</NSF_ID>
<StartDate>08/22/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Clemson University</Name>
<CityName>CLEMSON</CityName>
<ZipCode>296345701</ZipCode>
<PhoneNumber>8646562424</PhoneNumber>
<StreetAddress>230 Kappa Street</StreetAddress>
<StreetAddress2><![CDATA[Suite 200]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>South Carolina</StateName>
<StateCode>SC</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>SC03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042629816</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CLEMSON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042629816</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Clemson University]]></Name>
<CityName>Clemson</CityName>
<StateCode>SC</StateCode>
<ZipCode>296340001</ZipCode>
<StreetAddress><![CDATA[300 Brackett Hall, Box 345702]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>South Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>SC03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8083</Code>
<Text>Big Data Science &amp;Engineering</Text>
</ProgramElement>
<ProgramReference>
<Code>1640</Code>
<Text>INFORMATION TECHNOLOGY RESEARC</Text>
</ProgramReference>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>8083</Code>
<Text>Big Data Science &amp;Engineering</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~300000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The goal of this project has been to bring two HPC system software resources together to support Big Data computing.&nbsp; The two technologies are OrangeFS, a high performance parallel file system and HPX, a parallel programming runtime environment that provides for running computing tasks, passing data, synchronization, etc.&nbsp; The science driver was functional genomics which involves processing large volumes of genetic data across many species in order to isolate common genes and deduce their function.&nbsp; The jobs involve first downloading terrabyes of data and then preparing the files for processing in order to identify and the match genes.&nbsp; There is a significant amount of domain specific information in these files, and specialized code that has been developed and accepted by the genomics community over the years.&nbsp; Unlike many application areas in Big Data and HPC, it is not generally feasible to rewrite the programs for parallel execution because of this integrated domain-specific code.&nbsp; As a result we focused on a very coarse grain approach, which directed our system-level development is a different direction than expected.&nbsp; In particular we used the resources (HPX and OrangeFS) to develop a Big Data project manager that could run the domain-specific codes as tasks without altering the code, and extracted parallelism by running many instances of these codes while managing system resources such as memory and network bandwith.</p> <p>From this point, we sought to design a complete Big Data programming and runtime environment using HPX as a basis, integrating OrangeFS into HPX to handle IO streams, and building the task manager to support&nbsp; user code.&nbsp; The primary product produced by this project is the design of this infrastructure.&nbsp; This project was limited in time, thus we were only able to produce prototypes of some these features in order to explore their implementation and performance.</p> <p>In addition to this, a major issue is that most Big Data applicatin areas process data that is produced over a wide area - across a state, country, or the world.&nbsp; Genomics research is no different.&nbsp; Thus a major issue is transferring this data to a local site.&nbsp; This is a task that has been worked on for years in various forms, but our research showed that most such sofware packages do no perform very well when we consider large-scale transfer from one high-performance storage system, across a long distance, and into another sorage system.&nbsp; Thus part of our research involved working in this area learning to tune file-systems, networks, and a myriad of parameters to achieve as close to maximum theoretical throughput as possible.&nbsp; Thus another product of this project is the results of this study.</p> <p>The final report on this project contains the details of these developments, references to papers and other pertinent information.&nbsp; Similarly, the final reports submitted by our colaborators LSU and Indiana U further fill in the blanks of their portion of the project.</p><br> <p>            Last Modified: 01/08/2018<br>      Modified by: Walter&nbsp;B&nbsp;Ligon</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The goal of this project has been to bring two HPC system software resources together to support Big Data computing.  The two technologies are OrangeFS, a high performance parallel file system and HPX, a parallel programming runtime environment that provides for running computing tasks, passing data, synchronization, etc.  The science driver was functional genomics which involves processing large volumes of genetic data across many species in order to isolate common genes and deduce their function.  The jobs involve first downloading terrabyes of data and then preparing the files for processing in order to identify and the match genes.  There is a significant amount of domain specific information in these files, and specialized code that has been developed and accepted by the genomics community over the years.  Unlike many application areas in Big Data and HPC, it is not generally feasible to rewrite the programs for parallel execution because of this integrated domain-specific code.  As a result we focused on a very coarse grain approach, which directed our system-level development is a different direction than expected.  In particular we used the resources (HPX and OrangeFS) to develop a Big Data project manager that could run the domain-specific codes as tasks without altering the code, and extracted parallelism by running many instances of these codes while managing system resources such as memory and network bandwith.  From this point, we sought to design a complete Big Data programming and runtime environment using HPX as a basis, integrating OrangeFS into HPX to handle IO streams, and building the task manager to support  user code.  The primary product produced by this project is the design of this infrastructure.  This project was limited in time, thus we were only able to produce prototypes of some these features in order to explore their implementation and performance.  In addition to this, a major issue is that most Big Data applicatin areas process data that is produced over a wide area - across a state, country, or the world.  Genomics research is no different.  Thus a major issue is transferring this data to a local site.  This is a task that has been worked on for years in various forms, but our research showed that most such sofware packages do no perform very well when we consider large-scale transfer from one high-performance storage system, across a long distance, and into another sorage system.  Thus part of our research involved working in this area learning to tune file-systems, networks, and a myriad of parameters to achieve as close to maximum theoretical throughput as possible.  Thus another product of this project is the results of this study.  The final report on this project contains the details of these developments, references to papers and other pertinent information.  Similarly, the final reports submitted by our colaborators LSU and Indiana U further fill in the blanks of their portion of the project.       Last Modified: 01/08/2018       Submitted by: Walter B Ligon]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
