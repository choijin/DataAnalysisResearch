<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: TTP Option: Small: Collaborative: Scalable Techniques for Better Situational Awareness: Algorithmic Frameworks and Large-Scale Empirical Analyses</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>174900.00</AwardTotalIntnAmount>
<AwardAmount>174900</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Kevin Thompson</SignBlockName>
<PO_EMAI>kthompso@nsf.gov</PO_EMAI>
<PO_PHON>7032924220</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Attacks on computer networks are an all too familiar event, leaving operators with little choice but to deploy a myriad of monitoring devices to ensure dependable and stable service on the networks they operate. However, as networks grow bigger and faster, staying ahead of the constant deluge of attack traffic is becoming increasingly difficult. A case in point is the attacks on enterprise name servers that interact with the Domain Name System (DNS). These name servers are critical infrastructure, busily translating human readable domain names to IP addresses. DNS is a hotbed of malicious activity, and when properly monitored, it can offer invaluable information about network attacks and malicious activity.&lt;br/&gt;&lt;br/&gt;This project furthers our collective understanding of the growing abuse of enterprise name servers whereby infected clients (bots) use automated domain-name generation algorithms to bypass network defenses. More specifically, a framework for accurately identifying bots upon seeing only a handful of unique lookups is developed based on sequential hypothesis testing. The integration of NetFlow records, with novel their indexing data-structures, delivers even deeper insight into aberrant traffic. A live deployment of the system demonstrates the utility of this approach and provides the opportunity for interactively querying the recorded forensic information.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/13/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/13/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421747</AwardID>
<Investigator>
<FirstName>Angelos</FirstName>
<LastName>Stavrou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Angelos Stavrou</PI_FULL_NAME>
<EmailAddress>angelos@vt.edu</EmailAddress>
<PI_PHON>5712862530</PI_PHON>
<NSF_ID>000501775</NSF_ID>
<StartDate>08/13/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>George Mason University</Name>
<CityName>FAIRFAX</CityName>
<ZipCode>220304422</ZipCode>
<PhoneNumber>7039932295</PhoneNumber>
<StreetAddress>4400 UNIVERSITY DR</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>11</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA11</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>077817450</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGE MASON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>077817450</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[George Mason University]]></Name>
<CityName>FAIRFAX</CityName>
<StateCode>VA</StateCode>
<ZipCode>220304444</ZipCode>
<StreetAddress><![CDATA[4400 University Dr.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>11</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA11</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~174900</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><!-- p.p1 {margin: 0.0px 0.0px 12.0px 0.0px; line-height: 14.0px; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000} span.s1 {font-kerning: none} span.s2 {text-decoration: underline ; font-kerning: none; color: #0000ee; -webkit-text-stroke: 0px #0000ee; direction: ltr; unicode-bidi: embed} --> <p class="p1"><span class="s1">Computer misuse includes unauthorized access to computer systems, compromise of user privacy, exposure of con dential information, distribution of unwanted messages (SPAM), and denial of service. While many attack vectors are used, distribution of malicious software (malware) remains a key enabler of computer system abuse. To defend against unknown and new attacks, we often use machine learning to enable detection of malware. One of the fundamental weaknesses of defense systems that employ machine learning classification in adversarial environments is their susceptibility to evasion attacks. With evasion attacks, we refer to the classes of attacks that take advantage of knowledge of how the machine learning system operates, and in many cases utilize access to the training set and features, to evade detection passively or actively.</span></p> <p class="p1"><span class="s1"><strong>Our research introduced&nbsp; novel methods for identifying the observations on which a machine learning algorithms and specifically an ensemble classifier performs poorly</strong>. During detection, when a sufficient number of votes from individual classifiers disagree, the ensemble classifier prediction is shown to be unreliable. The proposed method, ensemble classifier<br /> mutual agreement analysis, allows the detection of many forms of classifier evasion without additional external ground truth.</span></p> <p class="p1"><span class="s1">Dr. Charles Smutz completed his thesis with support from this award. His thesis was titled <strong>"COUNTERING MALICIOUS DOCUMENTS AND ADVERSARIAL LEARNING". </strong>The aim was on preventing the use of common le formats as a carrier for malware, a topic that is both timely and important for detection of malware.&nbsp; Because it is not practical to block all exploits, we advanced methods for malware detection. To that end, Dr. Smutz proposed machine learning based classi ers that rely on features derived from document structure and metadata. This learning based detector, PDFrate (<a href="http://pdfrate.com/about"><span class="s2">http://pdfrate.com/about</span></a>), has been the target of numerous recent adversarial learning studies and helped promote the notion of adversarial learning for detecting PDF and other embedded malware.</span></p> <p class="p1"><span class="s1">Furthermore, We introduced <strong>novel defenses against Return-Oriented Programming (ROP) attacks</strong>, a new threat that has emerged as one of the most widely used techniques to exploit software vulnerabilities. We proposed <strong>EigenROP</strong>, a novel system to detect ROP attack payloads based on unsupervised statistical learning of program characteristics. We studied, for the first time, the feasibility and effectiveness of using microarchitecture-independent program characteristics namely, memory locality, register track, and memory reuse distance for detecting ROP. We produced a novel directional statistics based algorithm to identify deviations from the expected program characteristics during execution. EigenROP works transparently to the protected program, without requiring debug information, source code or disassembly. The key idea of EigenROP is to identify anomalies in program characteristics, due to the execution of ROP gadgets. In this context, it is dicult to precisely dene what anomalies are since that depends on the characteristics of both the monitored program and the ROP. However, it is reasonable to assume that some unexpected change occurs in the relationships among the dierent program characteristics due to the execution of the ROP. By extracting and learning arbitrary relationships among the program characteristics, EigenROP detects ROP by looking for unexpected changes in the learned relationships.</span></p> <p class="p1"><span class="s1"><strong>We studied the use maliciously crafted inputs aiming to exhaust available resources of the target software causing Software Denial-of-Service (DoS) attacks.</strong> These application-level DoS attacks have become even more prevalent due to the increasing code complexity and modular nature of Internet services that are deployed in cloud environments, where resources are shared and not always guaranteed. To make matters worse, many code testing and verification techniques cannot cope with the code size and diversity present in most services used to deliver the majority of everyday Internet applications.</span></p> <p class="p1"><span class="s1"><strong>We researched and developed Cogo, a practical system for early DoS detection and mitigation of software DoS attacks.</strong> Unlike prior solutions, Cogo builds behavioral models of network I/O events in linear time and employs Probabilistic Finite Automata (PFA) models to recognize future resource exhaustion states. Our tracing of events spans the entire code stack from userland to kernel. In many cases, we can block attacks far before impacting legitimate live sessions.</span></p> <p class="p1"><span class="s1">With support from this grant, we were able to reduce the attack surface of C++ binaries and introduce new defenses against both injection and resource starvation attacks without the need of source code using binary rewriting and monitoring of resources. Our paper analyzing and evaluatiing our prototype, called VCI, received a <strong>Distinguished paper</strong> <strong>award at ASIA CCS 2017.</strong></span></p> <p class="p1"><span class="s1">Finally, we <strong>filed for a patent application for our X86 debugging work called Methods and Systems for Increased Debugging Transparenc</strong>, patent #US 20160357657.</span></p> <p>&nbsp;</p><br> <p>            Last Modified: 11/27/2017<br>      Modified by: Angelos&nbsp;Stavrou</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Computer misuse includes unauthorized access to computer systems, compromise of user privacy, exposure of con dential information, distribution of unwanted messages (SPAM), and denial of service. While many attack vectors are used, distribution of malicious software (malware) remains a key enabler of computer system abuse. To defend against unknown and new attacks, we often use machine learning to enable detection of malware. One of the fundamental weaknesses of defense systems that employ machine learning classification in adversarial environments is their susceptibility to evasion attacks. With evasion attacks, we refer to the classes of attacks that take advantage of knowledge of how the machine learning system operates, and in many cases utilize access to the training set and features, to evade detection passively or actively. Our research introduced  novel methods for identifying the observations on which a machine learning algorithms and specifically an ensemble classifier performs poorly. During detection, when a sufficient number of votes from individual classifiers disagree, the ensemble classifier prediction is shown to be unreliable. The proposed method, ensemble classifier  mutual agreement analysis, allows the detection of many forms of classifier evasion without additional external ground truth. Dr. Charles Smutz completed his thesis with support from this award. His thesis was titled "COUNTERING MALICIOUS DOCUMENTS AND ADVERSARIAL LEARNING". The aim was on preventing the use of common le formats as a carrier for malware, a topic that is both timely and important for detection of malware.  Because it is not practical to block all exploits, we advanced methods for malware detection. To that end, Dr. Smutz proposed machine learning based classi ers that rely on features derived from document structure and metadata. This learning based detector, PDFrate (http://pdfrate.com/about), has been the target of numerous recent adversarial learning studies and helped promote the notion of adversarial learning for detecting PDF and other embedded malware. Furthermore, We introduced novel defenses against Return-Oriented Programming (ROP) attacks, a new threat that has emerged as one of the most widely used techniques to exploit software vulnerabilities. We proposed EigenROP, a novel system to detect ROP attack payloads based on unsupervised statistical learning of program characteristics. We studied, for the first time, the feasibility and effectiveness of using microarchitecture-independent program characteristics namely, memory locality, register track, and memory reuse distance for detecting ROP. We produced a novel directional statistics based algorithm to identify deviations from the expected program characteristics during execution. EigenROP works transparently to the protected program, without requiring debug information, source code or disassembly. The key idea of EigenROP is to identify anomalies in program characteristics, due to the execution of ROP gadgets. In this context, it is dicult to precisely dene what anomalies are since that depends on the characteristics of both the monitored program and the ROP. However, it is reasonable to assume that some unexpected change occurs in the relationships among the dierent program characteristics due to the execution of the ROP. By extracting and learning arbitrary relationships among the program characteristics, EigenROP detects ROP by looking for unexpected changes in the learned relationships. We studied the use maliciously crafted inputs aiming to exhaust available resources of the target software causing Software Denial-of-Service (DoS) attacks. These application-level DoS attacks have become even more prevalent due to the increasing code complexity and modular nature of Internet services that are deployed in cloud environments, where resources are shared and not always guaranteed. To make matters worse, many code testing and verification techniques cannot cope with the code size and diversity present in most services used to deliver the majority of everyday Internet applications. We researched and developed Cogo, a practical system for early DoS detection and mitigation of software DoS attacks. Unlike prior solutions, Cogo builds behavioral models of network I/O events in linear time and employs Probabilistic Finite Automata (PFA) models to recognize future resource exhaustion states. Our tracing of events spans the entire code stack from userland to kernel. In many cases, we can block attacks far before impacting legitimate live sessions. With support from this grant, we were able to reduce the attack surface of C++ binaries and introduce new defenses against both injection and resource starvation attacks without the need of source code using binary rewriting and monitoring of resources. Our paper analyzing and evaluatiing our prototype, called VCI, received a Distinguished paper award at ASIA CCS 2017. Finally, we filed for a patent application for our X86 debugging work called Methods and Systems for Increased Debugging Transparenc, patent #US 20160357657.          Last Modified: 11/27/2017       Submitted by: Angelos Stavrou]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
