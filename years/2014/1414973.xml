<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAPSI:Facilitating cooperation between unreliable processors without direct communication</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2014</AwardEffectiveDate>
<AwardExpirationDate>05/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>5070.00</AwardTotalIntnAmount>
<AwardAmount>5070</AwardAmount>
<AwardInstrument>
<Value>Fellowship Award</Value>
</AwardInstrument>
<Organization>
<Code>01090000</Code>
<Directorate>
<Abbreviation>O/D</Abbreviation>
<LongName>Office Of The Director</LongName>
</Directorate>
<Division>
<Abbreviation>OISE</Abbreviation>
<LongName>Office Of Internatl Science &amp;Engineering</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anne Emig</SignBlockName>
<PO_EMAI>aemig@nsf.gov</PO_EMAI>
<PO_PHON>7032927241</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Modern high-performance computers have many different processors that must work together to complete incoming tasks.  These processors cannot communicate efficiently, may run at different speeds, and can break down without warning.  This research will implement a new method that allows multiple, unreliable processors to complete tasks without communicating with each other directly. The processors have no prior knowledge of when the tasks will arrive, and must handle them as they come. Dividing work in this setting is a fundamental task in high-performance computing, and this research has the potential to improve performance of real systems. This work will be conducted at the National University of Singapore in collaboration with Professor Seth Gilbert, one of the inventors of this method that will provide invaluable assistance in implementation of this research.&lt;br/&gt; &lt;br/&gt;This data structure, the dynamic to-do tree, is the first task mapping data structure for asynchronous processors and online tasks that achieves theoretical guarantees (within log3 m of optimal where m is the maximum number of concurrent tasks). The goal will be to verify that the dynamic to-do tree also achieves good practical performance. This data structure will be compared with the current state of the art, hopefully showing a significant improvement.  These results may have broader implications for less restricted versions of the problem (i.e. the tasks are given offline) and to other similar tasks such as mutual exclusion and distributed clocks. This NSF EAPSI award is funded in collaboration with the National Research Foundation of Singapore.</AbstractNarration>
<MinAmdLetterDate>05/29/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/29/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.079</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1414973</AwardID>
<Investigator>
<FirstName>Samuel</FirstName>
<LastName>McCauley</LastName>
<PI_MID_INIT>R</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Samuel R McCauley</PI_FULL_NAME>
<EmailAddress/>
<PI_PHON>2037389158</PI_PHON>
<NSF_ID>000660373</NSF_ID>
<StartDate>05/29/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>McCauley                Samuel         R</Name>
<CityName>Port Jefferson</CityName>
<ZipCode>117771323</ZipCode>
<PhoneNumber/>
<StreetAddress/>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM/>
<ORG_LGL_BUS_NAME/>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[McCauley                Samuel         R]]></Name>
<CityName>Port Jefferson</CityName>
<StateCode>NY</StateCode>
<ZipCode>117771323</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7316</Code>
<Text>EAPSI</Text>
</ProgramElement>
<ProgramReference>
<Code>5927</Code>
<Text>EAST ASIA, OTHER</Text>
</ProgramReference>
<ProgramReference>
<Code>5978</Code>
<Text>EAST ASIA AND PACIFIC PROGRAM</Text>
</ProgramReference>
<ProgramReference>
<Code>7316</Code>
<Text>EAPSI</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~5070</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Initially, the main focus of our project was to implement a dynamic to-do tree. &nbsp;This data structure has many potential applications such as task mapping in highly parallel systems.<br />My initial meetings with Seth focused on how we should implement the data structure---what parts should be simulated, what parts should be run explicitly, and how we could achieve the best performance. &nbsp;Ultimately, we decided that the most efficient way to implement the data structure would be to use Transactional Memory. &nbsp;However, we did not have access to hardware transactional memory at the beginning of the summer, so we decided to simulate our results with software transactional memory simulators. &nbsp;Unfortunately, it quickly became clear that the overheads of software transactional memory are too significant and would alter our results. &nbsp;Meanwhile, the applications of the to-do tree already have many well-optimized (though fundamentally different) solutions---therefore, to obtain decent results, the to-do tree would have to be optimized for a particular system. &nbsp;For the remainder of the summer we chose to focus on our other projects, which showed more potential of short-term results.</p> <p> <p>Very-large-scale integration (VLSI) layouts determine how to lay out transistors and wires on a computer chip. &nbsp;Putting well-connected transistors close to each other, and minimizing the average length of wire on the chip can greatly improve performance. &nbsp;Generally these chips have very rules about how wires may be laid out---for example, it may be that only two wires can cross at a given point, or that wires can only cross at right angles. &nbsp;This topic has been studied extensively from a computational view. &nbsp;However, to our knowledge, we are the first to study the case when these layouts can change over time.<br />I collaborated with Seth Gilbert locally, and with Shikha Singh, Michael Bender, and Manoj Gupta remotely, to work on dynamic (changing over time) VLSI layouts. &nbsp;We used weight balance techniques, combined with standard amortization arguments, to achieve improved running times for adding wires, and excellent running times for adding or deleting transistors.<br />Our methods are very general. &nbsp;These performance guarantees apply to the number of operations used in designing the chip, the number of wires that must be moved on the chip, and the area of the chip that must be altered. &nbsp;Thus, the data structure is useful for many contexts---for example, whether a company wants to save money on chip design, or reduce the number of changes to the chip itself.</p> <p>Bloom Filters are a ubiquitous data structure with applications in databases, cloud computing, and big data. &nbsp;In short, they massively compress a data set so that each member can be stored using only a handful of bits. &nbsp;They can answer membership queries efficiently, but they have a small, bounded false positive rate which can be set arbitrarily, with only a small increase in the required space.<br />My second project in Singapore was to extend Bloom Filters to handle range queries. &nbsp;Unfortunately, recently after I had arrived, a colleague of mine informed me of a result that said that this was essentially impossible. &nbsp;Any data structure achieving Bloom Filter-like properties (in particular, the bounded false positive guarantee) for range queries requires nearly as much space as storing the original data set.<br />Thus, we modified the problem: if a small range Bloom Filter is impossible with the classical guarantees, is it possible to create a relaxed data structure that is still useful in practice? &nbsp;We focused our attention on databases. &nbsp;Generally, a Bloom Filter is stored in a cache of size M. &nbsp;When the database receives a membership query, it does a quick lookup in the cache of size M; it only does a full database search i...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Initially, the main focus of our project was to implement a dynamic to-do tree.  This data structure has many potential applications such as task mapping in highly parallel systems. My initial meetings with Seth focused on how we should implement the data structure---what parts should be simulated, what parts should be run explicitly, and how we could achieve the best performance.  Ultimately, we decided that the most efficient way to implement the data structure would be to use Transactional Memory.  However, we did not have access to hardware transactional memory at the beginning of the summer, so we decided to simulate our results with software transactional memory simulators.  Unfortunately, it quickly became clear that the overheads of software transactional memory are too significant and would alter our results.  Meanwhile, the applications of the to-do tree already have many well-optimized (though fundamentally different) solutions---therefore, to obtain decent results, the to-do tree would have to be optimized for a particular system.  For the remainder of the summer we chose to focus on our other projects, which showed more potential of short-term results.    Very-large-scale integration (VLSI) layouts determine how to lay out transistors and wires on a computer chip.  Putting well-connected transistors close to each other, and minimizing the average length of wire on the chip can greatly improve performance.  Generally these chips have very rules about how wires may be laid out---for example, it may be that only two wires can cross at a given point, or that wires can only cross at right angles.  This topic has been studied extensively from a computational view.  However, to our knowledge, we are the first to study the case when these layouts can change over time. I collaborated with Seth Gilbert locally, and with Shikha Singh, Michael Bender, and Manoj Gupta remotely, to work on dynamic (changing over time) VLSI layouts.  We used weight balance techniques, combined with standard amortization arguments, to achieve improved running times for adding wires, and excellent running times for adding or deleting transistors. Our methods are very general.  These performance guarantees apply to the number of operations used in designing the chip, the number of wires that must be moved on the chip, and the area of the chip that must be altered.  Thus, the data structure is useful for many contexts---for example, whether a company wants to save money on chip design, or reduce the number of changes to the chip itself.  Bloom Filters are a ubiquitous data structure with applications in databases, cloud computing, and big data.  In short, they massively compress a data set so that each member can be stored using only a handful of bits.  They can answer membership queries efficiently, but they have a small, bounded false positive rate which can be set arbitrarily, with only a small increase in the required space. My second project in Singapore was to extend Bloom Filters to handle range queries.  Unfortunately, recently after I had arrived, a colleague of mine informed me of a result that said that this was essentially impossible.  Any data structure achieving Bloom Filter-like properties (in particular, the bounded false positive guarantee) for range queries requires nearly as much space as storing the original data set. Thus, we modified the problem: if a small range Bloom Filter is impossible with the classical guarantees, is it possible to create a relaxed data structure that is still useful in practice?  We focused our attention on databases.  Generally, a Bloom Filter is stored in a cache of size M.  When the database receives a membership query, it does a quick lookup in the cache of size M; it only does a full database search if the element is in the Bloom Filter.  Note that this greatly improves the running time without hurting accuracy: if there is a false positive in the Bloom Filter, it will be detected by the database s...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
