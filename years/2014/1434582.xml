<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Collaborative: Similary-Based Program Analyses for Eliminating Vulnerabilities</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2013</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>265960</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The security of critical information infrastructures depends upon effective techniques to detect vulnerabilities commonly exploited by malicious attacks. Due to poor coding practices or human error, a known vulnerability discovered and patched in one code location may often exist in many other unpatched code locations, either in the same code base or other code bases. Furthermore, patches are often error-prone, resulting in new vulnerabilities. This project develops practical techniques for detecting code-level similarity to prevent such vulnerabilities. It has the potential to help build a more reliable and secure information system infrastructure, which will have tremendous economical impact on society because of our growing reliance on information technologies.&lt;br/&gt;&lt;br/&gt;In particular, the project aims to develop practical techniques for similarity-based testing and analysis to detect unpatched vulnerable code and validate patches to the detected vulnerable code at both the source code and binary levels. To this end, it focuses on three main technical directions: (1) developing techniques for detecting source-level vulnerabilities by adapting and refining an industrial-strength tool, (2) developing capabilities of detecting binary-level vulnerabilities by extending preliminary work on detecting code clones in binaries, and (3) supporting patch validation and repair by developing methodologies and techniques to validate software patches and help produce correct, secure patches. This project helps discover new techniques for source- and binary-level vulnerability analysis and gain better understandings of the fundamental and practical challenges for building highly secure and reliable software.</AbstractNarration>
<MinAmdLetterDate>02/28/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/05/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1434582</AwardID>
<Investigator>
<FirstName>Tao</FirstName>
<LastName>Xie</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tao Xie</PI_FULL_NAME>
<EmailAddress>taoxie@illinois.edu</EmailAddress>
<PI_PHON>2172445931</PI_PHON>
<NSF_ID>000430850</NSF_ID>
<StartDate>02/28/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName>CHAMPAIGN</CityName>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~250000</FUND_OBLG>
<FUND_OBLG>2014~15960</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>For the duration of this NSF project, we, the principal investigator and graduate students, have introduced and developed practical testing and analysis techniques to detect defects and validate patches at source and binary levels, and effectively recover from program runtime failures. This project has helped discover new analysis and runtime recovery techniques, and helped gain better understandings of the fundamental and practical challenges for building highly secure and reliable software. The conducted research and educational activities have advanced the state-of-the-art in improving software security and reliability, and helped train next generation researchers and engineers. More specifically,</p> <p>- We have developed three metrics that approximate the computation of behavioral similarity using dynamic analysis for measuring behavioral similarity of programs. We leverage random testing and dynamic symbolic execution (DSE) to generate test inputs, and run programs on these test inputs to compute metric values. The metric based on random testing provides highly accurate approximations to the behavioral similarity and the metric based on DSE is very effective in ordering programs based on behavioral similarity.</p> <p>- We have developed an approach of static program analysis that extracts the contexts of security-sensitive behaviors to assist mobile app analysis in differentiating between malicious and benign behaviors. The malicious and benign behaviors within apps can be differentiated based on the contexts that trigger security-sensitive behaviors, i.e., the events and conditions that cause the security-sensitive behaviors to occur. The maliciousness of a security-sensitive behavior is more closely related to the intention of the behavior (reflected via contexts) than the type of the security-sensitive resources that the behavior accesses.</p> <p>- We have developed an approach to prioritizing Android device models for individual mobile apps, based on mining large-scale usage data. The approach adapts the concept of operational profiling for mobile apps: the usage of an app on a specific device model reflects the importance of that device model for the app. The approach includes a collaborative filtering technique to predict the usage of an app on different device models, even if the app is entirely new, based on the usage data of a large collection of apps.</p> <p>- We have developed an automated approach for resolving the semantics of user inputs requested by mobile applications. The approach's design includes a number of novel techniques for extracting and resolving user interface labels and addressing ambiguity in semantics, resulting in significant improvements over prior work. Such work enables the clustering of similar user inputs/apps together for security analysis.</p> <p>- We have developed an approach to prioritizing test cases in performance regression testing for collection-intensive software, a common type of modern software heavily using collections. The approach for test prioritization is based on performance impact analysis that estimates the performance impact of a given code revision on a given test execution.&nbsp;</p> <p>- We have disseminated our research results through publications in top outlets such as highly-competitive conferences, tool&nbsp; distributions and research exchanges.</p> <p>- We have successfully trained the next generation computer scientists through graduate/undergraduate student advising, and engineers through undergraduate and graduate level education.</p><br> <p>            Last Modified: 01/18/2018<br>      Modified by: Tao&nbsp;Xie</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ For the duration of this NSF project, we, the principal investigator and graduate students, have introduced and developed practical testing and analysis techniques to detect defects and validate patches at source and binary levels, and effectively recover from program runtime failures. This project has helped discover new analysis and runtime recovery techniques, and helped gain better understandings of the fundamental and practical challenges for building highly secure and reliable software. The conducted research and educational activities have advanced the state-of-the-art in improving software security and reliability, and helped train next generation researchers and engineers. More specifically,  - We have developed three metrics that approximate the computation of behavioral similarity using dynamic analysis for measuring behavioral similarity of programs. We leverage random testing and dynamic symbolic execution (DSE) to generate test inputs, and run programs on these test inputs to compute metric values. The metric based on random testing provides highly accurate approximations to the behavioral similarity and the metric based on DSE is very effective in ordering programs based on behavioral similarity.  - We have developed an approach of static program analysis that extracts the contexts of security-sensitive behaviors to assist mobile app analysis in differentiating between malicious and benign behaviors. The malicious and benign behaviors within apps can be differentiated based on the contexts that trigger security-sensitive behaviors, i.e., the events and conditions that cause the security-sensitive behaviors to occur. The maliciousness of a security-sensitive behavior is more closely related to the intention of the behavior (reflected via contexts) than the type of the security-sensitive resources that the behavior accesses.  - We have developed an approach to prioritizing Android device models for individual mobile apps, based on mining large-scale usage data. The approach adapts the concept of operational profiling for mobile apps: the usage of an app on a specific device model reflects the importance of that device model for the app. The approach includes a collaborative filtering technique to predict the usage of an app on different device models, even if the app is entirely new, based on the usage data of a large collection of apps.  - We have developed an automated approach for resolving the semantics of user inputs requested by mobile applications. The approach's design includes a number of novel techniques for extracting and resolving user interface labels and addressing ambiguity in semantics, resulting in significant improvements over prior work. Such work enables the clustering of similar user inputs/apps together for security analysis.  - We have developed an approach to prioritizing test cases in performance regression testing for collection-intensive software, a common type of modern software heavily using collections. The approach for test prioritization is based on performance impact analysis that estimates the performance impact of a given code revision on a given test execution.   - We have disseminated our research results through publications in top outlets such as highly-competitive conferences, tool  distributions and research exchanges.  - We have successfully trained the next generation computer scientists through graduate/undergraduate student advising, and engineers through undergraduate and graduate level education.       Last Modified: 01/18/2018       Submitted by: Tao Xie]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
