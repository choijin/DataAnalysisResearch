<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>NeTS: Small: Collaborative Research: Tools for Design and Analysis of Provably Correct Networking Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>147996.00</AwardTotalIntnAmount>
<AwardAmount>147996</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Darleen Fisher</SignBlockName>
<PO_EMAI>dlfisher@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Networking and telecommunications infrastructure relies on many different network protocols which interact to provide communication services. Software that enables telecommunications and the Internet is inherently difficult to create, given the number and complexity of network protocols, diverse heterogeneous systems, and various administrative policies that must be accommodated. This complexity significantly increases the likelihood of implementation errors, which can cause network and security vulnerabilities (e.g., the well-publicized Heartbleed bug). The project will address these issues through the creation of a new programming language that supports the synthesis of network protocols and their corresponding stack through a correct-by-construction style of programming.&lt;br/&gt;&lt;br/&gt;This research project will investigate new transformational methods and tools for the design, analysis, construction, verification, configuration, and deployment of provably correct, safe, and efficient networking systems, rooted in the style and theory of systems programming languages. Specific objectives include (i) the investigation and analysis of abstractions present in the message layer, state machine, system interfaces, and configuration tools of network protocols, and (ii) the reification of these abstractions in a new systems programming language that supports the definition of provably correct and efficient communication stacks.&lt;br/&gt;&lt;br/&gt;The project entails the analysis of software and hardware abstractions in modern networking and communication systems in order to support the design of programming language features. The project will identify correct by construction techniques that enable the design and synthesis of efficient systems that are immune to broad classes of vulnerabilities based on common programmer mistakes. Furthermore, the project will produce a language, compiler and runtime system accessible to a large community of researchers and engineers without requiring specialized expertise in formal methods.&lt;br/&gt;&lt;br/&gt;This project will contribute to understanding the foundation of the design of provably correct and secure computer and networking systems. The methodology developed in the course of this project will facilitate rapid development of vulnerability-free systems and will greatly benefit researchers, industry developers, and educators. The project's results will help improve networking system safety, security, and attack resilience. The project will make a significant contribution to the broader areas of axiomatic programming, programming methodologies, and formal methods. The project's results, as well as the developed models, testbeds, and software, will be disseminated to the research community and networking industry under an open source license.</AbstractNarration>
<MinAmdLetterDate>08/26/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/26/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1422655</AwardID>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Sutton</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrew N Sutton</PI_FULL_NAME>
<EmailAddress>asutton@uakron.edu</EmailAddress>
<PI_PHON>3309724869</PI_PHON>
<NSF_ID>000661951</NSF_ID>
<StartDate>08/26/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Akron</Name>
<CityName>Akron</CityName>
<ZipCode>443250001</ZipCode>
<PhoneNumber>3309722760</PhoneNumber>
<StreetAddress>302 Buchtel Common</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<StateCode>OH</StateCode>
<CONGRESSDISTRICT>11</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OH11</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>045207552</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>THE UNIVERSITY OF AKRON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>045207552</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Akron]]></Name>
<CityName/>
<StateCode>OH</StateCode>
<ZipCode>443250001</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Ohio</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>11</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OH11</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7363</Code>
<Text>Networking Technology and Syst</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~147996</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>&nbsp;The project focused on the identification abstractions present in computer networking protocols their system design to develop computer programming languages and runtime systems that would support their provably safe specification and as-fast-as-hand-written execution in concrete systems. A significant application of this technology is in software-defined networking where protocol specifications are given as inputs to switch and router configurations to define robust and efficient forwarding and filtering applications. Much of the work was done in the context of the OpenFlow specification for software-defined switches, which defines a general-purpose flow-based architecture for implementing network protocols.</p> <p>The project had <span style="background-color: rgba(250, 214, 51, 0.25);">several</span>&nbsp;outcomes, particularly computer software. Two significant products of the proposal are the Steve programming language and the Freeflow virtual machine. The Steve language supported many different features, including the abilities to define a subset of existing network protocols and define table-based, event-driven packet processors (e.g., switches, IP routers, firewalls). &nbsp;Steve enforced several guarantees, including safe packet decoding and forward progress of the program. Steve programs are compiled into native code and can be used by the Freeflow virtual machine. Freeflow is a small virtual machine that provides the runtime resources and facilities needed to execute Steve programs. It defines abstractions for various types of flow tables, implements language intrinsics for safe and efficient packet decoding, and maintains the control flow of programs that it runs. The Freeflow project was initially designed to support experimenting with various forms of program composition, automatic transformation, automatic parallelization, and compilation to non-commodity switching hardware.</p> <p>Another outcome of the project was the invention of Pip abstract packet processor and its corresponding implementation. The goal of designing Pip was to identify the smallest language that could accommodate programmable packet decoding as a basis for studying higher-level safety abstractions. In other words, pip provides a kind of minimally typed assembly language for packet processing pipelines or forwarding engines.</p> <p>There were several other outcomes:</p> <ul> <li>The Arbiter is an extension to the Liz research programming language and its runtime library that models a generic OpenFlow pipeline, providing several compile-time safety checks (e.g., operator safety, vendor conformance).</li> <li>Aetherflow is an extension of the OpenFlow model to support programmable wireless switching. The extension treats radio interfaces and MAC controllers as first-class abstractions that can be queried or modified by a switching program. The implementation was built on top of Open vSwtich.</li> <li>FlowSim is a web-based data plane simulator that can be used to create and step through OpenFlow style SDN programs. The intent is to help users understand the networking and system primitives involved in the configuration of forwarding infrastructure and demonstrate how it works.</li> </ul> <p>Many of these projects are reported as conference proceedings. The Steve Programming Language and Freeflow virtual machine are published Masters&rsquo; theses.</p><br> <p>            Last Modified: 12/03/2018<br>      Modified by: Andrew&nbsp;N&nbsp;Sutton</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  The project focused on the identification abstractions present in computer networking protocols their system design to develop computer programming languages and runtime systems that would support their provably safe specification and as-fast-as-hand-written execution in concrete systems. A significant application of this technology is in software-defined networking where protocol specifications are given as inputs to switch and router configurations to define robust and efficient forwarding and filtering applications. Much of the work was done in the context of the OpenFlow specification for software-defined switches, which defines a general-purpose flow-based architecture for implementing network protocols.  The project had several outcomes, particularly computer software. Two significant products of the proposal are the Steve programming language and the Freeflow virtual machine. The Steve language supported many different features, including the abilities to define a subset of existing network protocols and define table-based, event-driven packet processors (e.g., switches, IP routers, firewalls).  Steve enforced several guarantees, including safe packet decoding and forward progress of the program. Steve programs are compiled into native code and can be used by the Freeflow virtual machine. Freeflow is a small virtual machine that provides the runtime resources and facilities needed to execute Steve programs. It defines abstractions for various types of flow tables, implements language intrinsics for safe and efficient packet decoding, and maintains the control flow of programs that it runs. The Freeflow project was initially designed to support experimenting with various forms of program composition, automatic transformation, automatic parallelization, and compilation to non-commodity switching hardware.  Another outcome of the project was the invention of Pip abstract packet processor and its corresponding implementation. The goal of designing Pip was to identify the smallest language that could accommodate programmable packet decoding as a basis for studying higher-level safety abstractions. In other words, pip provides a kind of minimally typed assembly language for packet processing pipelines or forwarding engines.  There were several other outcomes:  The Arbiter is an extension to the Liz research programming language and its runtime library that models a generic OpenFlow pipeline, providing several compile-time safety checks (e.g., operator safety, vendor conformance). Aetherflow is an extension of the OpenFlow model to support programmable wireless switching. The extension treats radio interfaces and MAC controllers as first-class abstractions that can be queried or modified by a switching program. The implementation was built on top of Open vSwtich. FlowSim is a web-based data plane simulator that can be used to create and step through OpenFlow style SDN programs. The intent is to help users understand the networking and system primitives involved in the configuration of forwarding infrastructure and demonstrate how it works.   Many of these projects are reported as conference proceedings. The Steve Programming Language and Freeflow virtual machine are published Masters? theses.       Last Modified: 12/03/2018       Submitted by: Andrew N Sutton]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
