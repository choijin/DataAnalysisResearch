<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Analysis and Automation of Systematic Software Modifications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>437285.00</AwardTotalIntnAmount>
<AwardAmount>437285</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software systems evolve. Developers must add features, fix bugs, and rewrite software systems to provide better functionality and higher performance. Existing systems also need to migrate to new hardware, computing environments, programming models, and libraries. There exist redundancies, inefficiencies, and error-proneness in the way that we evolve software systems today. In particular, recent empirical studies indicate that developers often apply similar but not identical changes to similar contexts. Making such systematic, repetitive program modifications is a tedious, manual, error-prone process.&lt;br/&gt;&lt;br/&gt;This project will investigate the extent and nature of repetitive program modifications and will design, build, and evaluate a novel approach, called SYDIT, which improves developer productivity in applying systematic changes.  In this approach, developers no longer apply similar changes manually. Instead, developers provide the old and new version of selected code as an example change, and SYDIT will generalize a reusable, abstract, context-aware program transformation from it.&lt;br/&gt;(1) SYDIT will compute program differences between the old and new version of selected code and create a reusable edit script by identifying relevant data and control flow context and by abstracting the edits' content and position.&lt;br/&gt;(2) SYDIT will then automatically identify related candidate change locations and produce concrete, customized edits to each candidate.&lt;br/&gt;Incorporation with testing and change impact analysis will help developers validate suggested changes. SYDIT's new differential delta analysis will help developers understand the effect of ported changes in each target context.&lt;br/&gt;(3) Using a large corpus of project histories, this project will investigate the frequency and types of repetitive changes. The resulting data set will be used to evaluate SYDIT's accuracy and capability and to assess a productivity gain that can be achieved by SYDIT.&lt;br/&gt;The impact of this research will be substantially improved developer productivity in evolving large software systems. By helping developers apply changes to similar contexts exhaustively and inspect the effect of suggested changes, SYDIT will reduce errors of omission and relieve developers from tedious, error-prone hand editing. The empirical studies will expand our understanding of repetitive program changes during software evolution.</AbstractNarration>
<MinAmdLetterDate>09/19/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/05/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1460325</AwardID>
<Investigator>
<FirstName>Miryung</FirstName>
<LastName>Kim</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Miryung Kim</PI_FULL_NAME>
<EmailAddress>miryung@cs.ucla.edu</EmailAddress>
<PI_PHON>3107940102</PI_PHON>
<NSF_ID>000676266</NSF_ID>
<StartDate>09/19/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Los Angeles</Name>
<CityName>LOS ANGELES</CityName>
<ZipCode>900951406</ZipCode>
<PhoneNumber>3107940102</PhoneNumber>
<StreetAddress>10889 Wilshire Boulevard</StreetAddress>
<StreetAddress2><![CDATA[Suite 700]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA33</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>092530369</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, LOS ANGELES</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[UNIVERSITY OF CALIFORNIA]]></Name>
<CityName/>
<StateCode>CA</StateCode>
<ZipCode>900951596</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>33</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA33</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>9103</Code>
<Text>CLB-Career</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>CL10</Code>
<Text>CLB-Career Life Balance</Text>
</ProgramReference>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2012~112836</FUND_OBLG>
<FUND_OBLG>2013~23285</FUND_OBLG>
<FUND_OBLG>2014~97493</FUND_OBLG>
<FUND_OBLG>2015~100476</FUND_OBLG>
<FUND_OBLG>2016~103195</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The main goal of this project to investigate the extent and nature of repetitive program modifications and design, build, and evaluate a novel program transformation approach that improves developer productivity in applying similar, repetitive changes.&nbsp;</p> <p><span style="font-size: 12px;">Intellectual Merits:&nbsp;</span></p> <p><span style="font-size: 12px;">For the first goal of searching and applying systematic changes, we have designed, implemented, and evaluated an automated program transformation approach that creates a control and data dependence aware edit script from two or more examples, and uses the script to automatically identify edit locations and to perform abstract-syntax tree level transformation (Lase, ICSE 2013), an automated clone removal refactoring technique that extracts common code during systematic edit application (Rase, ICSE 2015), an interactive clone search technique for finding similar change locations and detecting anomalies (Critics, ICSE 2015), and an active inductive logic programming approach to search systematic changes in an iterative manner without requiring programmers to provide change examples apriori (Alice, ICSE 2019).&nbsp;</span></p> <p><br />&nbsp;For the second goal of investigating the nature and extent of systematic changes, we built an analysis technique that compares program patches and investigated ported edits and recurring patches in similar forked projects (Repertoire, FSE 2012), investigated the extent of omission errors and supplementary patches (ASE 2014, EMSE 2017), and the adaptations and variations of online code examples by associating Stack Overflow examples and corresponding reused code snippets in GitHub (ExampleStack, ICSE 2019).&nbsp;&nbsp;</p> <p>For the third goal of validating systematic changes. we have designed a static analysis technique that detects inconsistencies in ported or cloned code (Spa, ASE 2013), a clone transplantation and differential testing technique to identify behavioral differences via code transplantation (Grafter, ICSE 2017), a static analysis technique to inspect manual refactoring edits (RefDistiller, TSE 2018), and a test prioritization technique for refactoring edits. &nbsp;</p> <p>&nbsp;</p> <p>Broader Impacts:<br /><br />Professor Kim trained graduate students and undergraduate students at UCLA and UT Austin, contributing to the training of technology workforce. This project produced twenty peer reviewed publications and contributed to producing several tenure track faculty members (Meng, Ray, and Song). Professor Kim actively involved female PhD students and undergraduate researchers students, promoting diversity and participation of underrepresented groups in computing. The resulting nine software tools are open-sourced and made available to public. In particular, an interactive clone search and code review tool Critics was evaluated by professional software engineers and was later tech-transferred to industry.&nbsp;&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/04/2020<br>      Modified by: Miryung&nbsp;Kim</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The main goal of this project to investigate the extent and nature of repetitive program modifications and design, build, and evaluate a novel program transformation approach that improves developer productivity in applying similar, repetitive changes.   Intellectual Merits:   For the first goal of searching and applying systematic changes, we have designed, implemented, and evaluated an automated program transformation approach that creates a control and data dependence aware edit script from two or more examples, and uses the script to automatically identify edit locations and to perform abstract-syntax tree level transformation (Lase, ICSE 2013), an automated clone removal refactoring technique that extracts common code during systematic edit application (Rase, ICSE 2015), an interactive clone search technique for finding similar change locations and detecting anomalies (Critics, ICSE 2015), and an active inductive logic programming approach to search systematic changes in an iterative manner without requiring programmers to provide change examples apriori (Alice, ICSE 2019).     For the second goal of investigating the nature and extent of systematic changes, we built an analysis technique that compares program patches and investigated ported edits and recurring patches in similar forked projects (Repertoire, FSE 2012), investigated the extent of omission errors and supplementary patches (ASE 2014, EMSE 2017), and the adaptations and variations of online code examples by associating Stack Overflow examples and corresponding reused code snippets in GitHub (ExampleStack, ICSE 2019).    For the third goal of validating systematic changes. we have designed a static analysis technique that detects inconsistencies in ported or cloned code (Spa, ASE 2013), a clone transplantation and differential testing technique to identify behavioral differences via code transplantation (Grafter, ICSE 2017), a static analysis technique to inspect manual refactoring edits (RefDistiller, TSE 2018), and a test prioritization technique for refactoring edits.       Broader Impacts:  Professor Kim trained graduate students and undergraduate students at UCLA and UT Austin, contributing to the training of technology workforce. This project produced twenty peer reviewed publications and contributed to producing several tenure track faculty members (Meng, Ray, and Song). Professor Kim actively involved female PhD students and undergraduate researchers students, promoting diversity and participation of underrepresented groups in computing. The resulting nine software tools are open-sourced and made available to public. In particular, an interactive clone search and code review tool Critics was evaluated by professional software engineers and was later tech-transferred to industry.                  Last Modified: 01/04/2020       Submitted by: Miryung Kim]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
