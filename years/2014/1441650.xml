<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SaTC: An Architecture for Restoring Trust in Our Personal Computing Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>02/28/2019</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>500000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computers today are so complex and opaque that a user cannot possibly hope to know, let alone trust, everything occurring within the machine. While software security techniques help ensure the integrity of user computations, they are only as trustworthy as the underlying hardware. Even though many proposals provide some relief to the problem of hardware trust, the user must ultimately rely on the assurances of other parties. This work restores hardware trust through a simple, small, and slow pluggable hardware element. This project investigates techniques that provides a kernel of trust that keeps even the most aggressive systems in line without slowing them down and is easy to manufacture.&lt;br/&gt;&lt;br/&gt;For this slow but trusted hardware element to be useful in real world systems, it must not degrade system performance significantly. To achieve this goal, this work develops two complimentary techniques: dependence-free parallel verification of executed instructions, and cryptographic hash-based memory integrity assurance. Additionally, cryptographic hashing also ensures code integrity and prevents the processor from executing its own malicious code. A combination of these techniques provides a secure hardware environment where users need not worry about their data being compromises, as long as their software is also secure. Therefore, when combined with well-developed software security techniques, this work provides a significant increase in the level of trust users place in their computing systems.</AbstractNarration>
<MinAmdLetterDate>08/14/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/14/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1441650</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>August</LastName>
<PI_MID_INIT>I</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>David I August</PI_FULL_NAME>
<EmailAddress>august@cs.princeton.edu</EmailAddress>
<PI_PHON>6092582085</PI_PHON>
<NSF_ID>000192343</NSF_ID>
<StartDate>08/14/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Princeton University</Name>
<CityName>Princeton</CityName>
<ZipCode>085442020</ZipCode>
<PhoneNumber>6092583090</PhoneNumber>
<StreetAddress>Off. of Research &amp; Proj. Admin.</StreetAddress>
<StreetAddress2><![CDATA[P.O. Box 36]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NJ12</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002484665</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF PRINCETON UNIVERSITY, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002484665</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Princeton University]]></Name>
<CityName>Princeton</CityName>
<StateCode>NJ</StateCode>
<ZipCode>085442020</ZipCode>
<StreetAddress><![CDATA[87 Prospect Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>12</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NJ12</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-7ae9aef6-7fff-1503-6b0d-25fd64f25d0d"> </span></p> <p><span id="docs-internal-guid-b57fea71-7fff-30ef-462d-8e782b44a3bf"> </span></p> <p dir="ltr"><span>Daily reports of cybersecurity breaches erode trust in computer systems. This project aims to restore trust in computer systems by providing a practical approach to building systems with proven security guarantees. &nbsp;Specifically, this work introduced the pluggable trust containment architecture designed to prevent the ill effects of buggy or malicious system components from leaving the system. Since the proposed architecture reduces the amount of trusted hardware and software in the system by many orders of magnitude, establishing proven formal security guarantees for complex systems becomes possible today.</span></p> <p dir="ltr"><span>The project demonstrated a pluggable trust containment architecture centered around a small, lightweight, user-supplied, pluggable hardware element, called the Sentry. Any component in the system that attempts to communicate to the outside world must prove to the Sentry that its communication is the result of the correct execution of signed software. &nbsp;Simulation results indicate that the pluggable trust architecture can achieve strong security guarantees with less than a 15% performance overhead.</span></p> <p dir="ltr"><span>To reduce trust in software, the project created a way for developers to create small trusted dynamic specification checks (DSC) to serve as verifiers for a large untrusted application. &nbsp;By combining the software protection provided by DSCs with the hardware protections provided by the Sentry, this model can provide an efficient bottom-up approach to true system security, from ensuring correct instruction execution of signed software instructions to ensuring correct overall system behavior.</span></p> <p dir="ltr"><span>The team prototyped the Sentry on an FPGA PCI card and built and tested a library and compiler system that allows programs to be selectively checked by the FPGA PCI card implementation. &nbsp;A prototype DSC was developed for a Redis server (a no-SQL database system). Using less than four thousand lines of trusted Verilog for the Sentry and three thousand lines of trusted C for the Redis DSC, this model can ensure the correct output from a commercial Redis server, the design of which totals hundreds of millions of lines of hardware and software.</span></p> <p dir="ltr"><span>Beyond the application of project artifacts to scientific research, the project also contributed in several ways to human resource development. For example, the PI's outreach to elementary school students has helped inspire the next generation to take up science, engineering, and technology as their future careers.&nbsp;</span></p> <div><span><br /></span></div> <p>&nbsp;</p> <p dir="ltr">&nbsp;</p><br> <p>            Last Modified: 03/29/2019<br>      Modified by: David&nbsp;I&nbsp;August</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[      Daily reports of cybersecurity breaches erode trust in computer systems. This project aims to restore trust in computer systems by providing a practical approach to building systems with proven security guarantees.  Specifically, this work introduced the pluggable trust containment architecture designed to prevent the ill effects of buggy or malicious system components from leaving the system. Since the proposed architecture reduces the amount of trusted hardware and software in the system by many orders of magnitude, establishing proven formal security guarantees for complex systems becomes possible today. The project demonstrated a pluggable trust containment architecture centered around a small, lightweight, user-supplied, pluggable hardware element, called the Sentry. Any component in the system that attempts to communicate to the outside world must prove to the Sentry that its communication is the result of the correct execution of signed software.  Simulation results indicate that the pluggable trust architecture can achieve strong security guarantees with less than a 15% performance overhead. To reduce trust in software, the project created a way for developers to create small trusted dynamic specification checks (DSC) to serve as verifiers for a large untrusted application.  By combining the software protection provided by DSCs with the hardware protections provided by the Sentry, this model can provide an efficient bottom-up approach to true system security, from ensuring correct instruction execution of signed software instructions to ensuring correct overall system behavior. The team prototyped the Sentry on an FPGA PCI card and built and tested a library and compiler system that allows programs to be selectively checked by the FPGA PCI card implementation.  A prototype DSC was developed for a Redis server (a no-SQL database system). Using less than four thousand lines of trusted Verilog for the Sentry and three thousand lines of trusted C for the Redis DSC, this model can ensure the correct output from a commercial Redis server, the design of which totals hundreds of millions of lines of hardware and software. Beyond the application of project artifacts to scientific research, the project also contributed in several ways to human resource development. For example, the PI's outreach to elementary school students has helped inspire the next generation to take up science, engineering, and technology as their future careers.               Last Modified: 03/29/2019       Submitted by: David I August]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
