<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: The Automata Programming Paradigm for Genomic Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>173004.00</AwardTotalIntnAmount>
<AwardAmount>229004</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Inferring knowledge from genetic data will drive future advances in the life sciences.  However, DNA sequences are being generated faster than they can be analyzed with existing computing technologies and algorithms. The core computations performed by many genomic applications involve pattern matching. This operation is normally implemented using automata-based algorithms and can be efficiently mapped onto non-general purpose platforms such as Field Programmable Gate Arrays (FPGA) and Micron?s recently announced Automata Processor (AP). However, the lack of high-level programming interfaces for these devices hampers their adoption in the bioinformatics community.&lt;br/&gt;&lt;br/&gt;This project fills this gap by developing novel programmatic descriptions of several genomic analyses and mapping them onto these two non-traditional architectures. The work advances the state-of-the-art in several ways. At an algorithmic level, new methods to address the biological problems of genome-scale orthology inference and regulatory motif search are being developed. At a computational abstraction level, the researchers are designing an extended finite automaton abstraction suitable to support diverse computations, and are mapping new and existing computational kernels onto it. At a hardware mapping level, automatic tuning techniques for the effective deployment of automata-based computations on FPGA and Micron?s AP are being developed. &lt;br/&gt;&lt;br/&gt; This interdisciplinary project will facilitate the adoption of FPGA and Micron?s Automata Processor by biologists by providing a new library of pattern matching routines and a high-level automata-based programming interface for these platforms. In addition, the researchers are developing instructional material in a variety of topics, such as genomic analysis, pattern matching, automata processing and high-performance computing. Finally, this project provides research opportunities and access to pre-production hardware to undergraduate and graduate students, interdisciplinary training, and technology transfer to industry. The results of this research will be made available through the release of software tools and publication in international conferences and journals.</AbstractNarration>
<MinAmdLetterDate>07/23/2014</MinAmdLetterDate>
<MaxAmdLetterDate>04/24/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421059</AwardID>
<Investigator>
<FirstName>Jason</FirstName>
<LastName>Bakos</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jason D Bakos</PI_FULL_NAME>
<EmailAddress>jbakos@cse.sc.edu</EmailAddress>
<PI_PHON>8037778627</PI_PHON>
<NSF_ID>000284090</NSF_ID>
<StartDate>07/23/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of South Carolina at Columbia</Name>
<CityName>COLUMBIA</CityName>
<ZipCode>292080001</ZipCode>
<PhoneNumber>8037777093</PhoneNumber>
<StreetAddress>Sponsored Awards Management</StreetAddress>
<StreetAddress2><![CDATA[1600 Hampton Street, Suite 414]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>South Carolina</StateName>
<StateCode>SC</StateCode>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>SC06</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041387846</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTH CAROLINA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041387846</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of South Carolina at Columbia]]></Name>
<CityName>Columbia</CityName>
<StateCode>SC</StateCode>
<ZipCode>292080001</ZipCode>
<StreetAddress><![CDATA[301 Main St. Suite 3A01L]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>South Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>SC06</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~173004</FUND_OBLG>
<FUND_OBLG>2015~8000</FUND_OBLG>
<FUND_OBLG>2016~16000</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<FUND_OBLG>2018~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-e8b381d3-7fff-7e8a-1460-5b795ce7cd9c"> <p dir="ltr"><span>This project produced several key technologies to support a domain-specific architecture for high-throughput and large-scale symbolic pattern matching. &nbsp;Our main contribution is a processor called NAPOLY:  Nondeterministic Automata Processor OverLaY.  NAPOLY is organized as a grid of state transition elements (STEs), each of which allocated to a transition taken from a set of input patterns as represented as a nondeterministic finite automata (NFA). &nbsp;Each STE is comprised of a RAM that stores the corresponding transition&rsquo;s symbols and a set of registers that contain the STE&rsquo;s activation state and the configuration of its gated connections to a set of predecessor STEs.  When implemented on an Field Programmable Gate Array, this structure allows for the usage of up to nearly 5 Terabits per second of on-chip memory bandwidth. &nbsp;The overlay is also designed for rapid reconfigurable, allowing for the efficient time-multiplexing of its array to support large designs.  NAPOLY also parameterizable, allowing its user to make tradeoffs between element density, interconnect density, and the size of the output buffer that constrains the maximum frequency of pattern acceptances.  This project also produced NAPOLY&rsquo;s compiler, which reads NFA descriptions and uses a heuristic to allocate logical transitions to physical elements in the array. &nbsp;In the development of NAPOLY we evaluated the extent to which pattern-matching architectures can achieve efficient acceleration for genomic analysis applications.  In this effort we built an accelerator for genomic database search, in which queries are matched against the patterns representing the high-scoring pairs of a given genomic database.  Matches on any of these patterns can be quickly resolved to database indexes.  This design achieved higher matching throughput as compared to equivalent software, despite the CPU having greater peak DRAM bandwidth.</span></p> </span></p><br> <p>            Last Modified: 12/17/2018<br>      Modified by: Jason&nbsp;D&nbsp;Bakos</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  This project produced several key technologies to support a domain-specific architecture for high-throughput and large-scale symbolic pattern matching.  Our main contribution is a processor called NAPOLY:  Nondeterministic Automata Processor OverLaY.  NAPOLY is organized as a grid of state transition elements (STEs), each of which allocated to a transition taken from a set of input patterns as represented as a nondeterministic finite automata (NFA).  Each STE is comprised of a RAM that stores the corresponding transition?s symbols and a set of registers that contain the STE?s activation state and the configuration of its gated connections to a set of predecessor STEs.  When implemented on an Field Programmable Gate Array, this structure allows for the usage of up to nearly 5 Terabits per second of on-chip memory bandwidth.  The overlay is also designed for rapid reconfigurable, allowing for the efficient time-multiplexing of its array to support large designs.  NAPOLY also parameterizable, allowing its user to make tradeoffs between element density, interconnect density, and the size of the output buffer that constrains the maximum frequency of pattern acceptances.  This project also produced NAPOLY?s compiler, which reads NFA descriptions and uses a heuristic to allocate logical transitions to physical elements in the array.  In the development of NAPOLY we evaluated the extent to which pattern-matching architectures can achieve efficient acceleration for genomic analysis applications.  In this effort we built an accelerator for genomic database search, in which queries are matched against the patterns representing the high-scoring pairs of a given genomic database.  Matches on any of these patterns can be quickly resolved to database indexes.  This design achieved higher matching throughput as compared to equivalent software, despite the CPU having greater peak DRAM bandwidth.        Last Modified: 12/17/2018       Submitted by: Jason D Bakos]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
