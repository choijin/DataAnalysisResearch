<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SEL: Small: Crowdsourced Software Engineering using Gamification</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>12/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>475000.00</AwardTotalIntnAmount>
<AwardAmount>475000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software engineering becomes more economically crucial every day, cutting across virtually all industries and scientific disciplines. Indeed, it has become so crucial that there are more tasks in software design, development, testing, maintenance, and analysis than our existing software engineering workforce can hope to accomplish.  Various solutions have been proposed: for example, making programmers more productive, making programmers less error prone, training programmers more effectively, training programmers from a younger age, and so on.  All innovations in this space can be characterized as either tools that assist skilled professionals or innovations that help train novices to be skilled professionals.&lt;br/&gt;&lt;br/&gt;A novel hybrid approach is proposed: Tools that assist skilled professionals while simultaneously training novices to be skilled professionals.  In short, it is proposed to build interfaces that make it possible to crowdsource software engineering tasks.  Such interfaces would assist skilled software engineers by allowing them to discharge some of their professional workload; and it would assist the unskilled crowd by paying them to become more skillful at solving software engineering problems.  A principle technique proposed in crowdsourcing is gamification.   Crowdsourcing will consist of two mutually dependent parts: 1) a gaming interface that allows human beings to leverage their natural problem-solving abilities on the engineering task at hand, and 2) automated pre-processing and post-processing algorithms for tasks such as decomposing the problem into smaller pieces, combining solutions, or helping with automated code generation.</AbstractNarration>
<MinAmdLetterDate>06/13/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/20/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1423517</AwardID>
<Investigator>
<FirstName>William</FirstName>
<LastName>Griswold</LastName>
<PI_MID_INIT>G</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>William G Griswold</PI_FULL_NAME>
<EmailAddress>wgg@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585346898</PI_PHON>
<NSF_ID>000202359</NSF_ID>
<StartDate>06/13/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sorin</FirstName>
<LastName>Lerner</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sorin Lerner</PI_FULL_NAME>
<EmailAddress>lerner@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585348883</PI_PHON>
<NSF_ID>000068847</NSF_ID>
<StartDate>06/13/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930404</ZipCode>
<StreetAddress><![CDATA[9500 Gilman Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~475000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software engineering becomes more economically crucial every day,   cutting across virtually all industries and scientific disciplines.   Indeed, it has become so crucial that there are more tasks in software   design, development, testing, maintenance, and analysis than our existing software engineering workforce can hope to accomplish.</p> <p>This  project explored the possibility of "crowdsourcing" software   engineering tasks to people of any walk of life by turning the tasks   into engaging computer games supported by sophisticated computing   infrastructure.&nbsp; The primary result of this project is that complex   software engineering tasks -- with some assumptions -- can be gamified.&nbsp;   This was demonstrated in a series of four projects, summarized below.</p> <p>1.  Proof Game. It was shown that simple mathematical proofs could be   achieved by play a puzzle piece game.&nbsp; The shapes of the pieces  entailed  logical properties, and when assembled properly constituted  the proof,  winning the game.&nbsp; Experiments showed that high school  students could  successfully play the game without knowing the  underlying logical  system.</p> <p>2. Minecraft Programming Environment.&nbsp; It was demonstrated  that an  existing exploratory gaming environment, Minecraft, could be  turned  into a programming environment for school-age children, by adapting a   prexisting drag-and-drop "blocks" language to use Minecraft   primitives.&nbsp; Complex structures could be built in the Minecraft world   through the use of iterative constructs.</p> <p>3. Programming Game.&nbsp; It  was demonstrated that it was possible to synthesize a computer program  by playing a game.&nbsp; The game was a bit like a Mario Brothers scroller,  but at your own pace.&nbsp; The object of the game was, given a set of  initial numbers ("inputs"), to go through a set of game steps that would  produce a set of goal numbers ("outputs").&nbsp; A critial insight was how  to synthesize recursion (a form of looping), which was necessary to be  able to concisely process or produce a list of values.&nbsp; This was  achieved by dropping through a worm hole that landing the player in  another instance, or level, of the game.&nbsp; Solving this level synthesized  the base case of the recursion.</p> <p>4. Invariants Game.&nbsp; A  game was developed in which players  unwittingly provide a loop invariant  -- a property that holds over every  iteration of a loop.&nbsp; The idea was  to execute the loop and show the  player the data from several  iterations, then having the player write a  simple algebraic formula  describing any observed patterns.&nbsp; Players do  not see the code itself.&nbsp;  Players reruited online were able to find  loop invariants that  best-in-class automated tools could not.&nbsp; A  competitive multi-player  version of this game was found to be very  engaging for the players.</p> <p>The project generated a number of broader impacts.&nbsp; The project trained  four graduate students in the techniques of crowdsourcing, gamification,  and program verfication.&nbsp; One student wrote a masters thesis on the  topic. Two others wrote Ph.D. dissertations on the topic of gamification  of software engineering.&nbsp; One of these students is the co-founder and CEO of an after-school computer science education company, ThoughtSTEM.&nbsp; The project also mentored four  undergraduates, and gave one Ph.D. student training in student mentoring.&nbsp; Finally, the invariants game was published on Facebook games,  exposing the general public to our work.</p><br> <p>            Last Modified: 04/09/2019<br>      Modified by: William&nbsp;G&nbsp;Griswold</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software engineering becomes more economically crucial every day,   cutting across virtually all industries and scientific disciplines.   Indeed, it has become so crucial that there are more tasks in software   design, development, testing, maintenance, and analysis than our existing software engineering workforce can hope to accomplish.  This  project explored the possibility of "crowdsourcing" software   engineering tasks to people of any walk of life by turning the tasks   into engaging computer games supported by sophisticated computing   infrastructure.  The primary result of this project is that complex   software engineering tasks -- with some assumptions -- can be gamified.    This was demonstrated in a series of four projects, summarized below.  1.  Proof Game. It was shown that simple mathematical proofs could be   achieved by play a puzzle piece game.  The shapes of the pieces  entailed  logical properties, and when assembled properly constituted  the proof,  winning the game.  Experiments showed that high school  students could  successfully play the game without knowing the  underlying logical  system.  2. Minecraft Programming Environment.  It was demonstrated  that an  existing exploratory gaming environment, Minecraft, could be  turned  into a programming environment for school-age children, by adapting a   prexisting drag-and-drop "blocks" language to use Minecraft   primitives.  Complex structures could be built in the Minecraft world   through the use of iterative constructs.  3. Programming Game.  It  was demonstrated that it was possible to synthesize a computer program  by playing a game.  The game was a bit like a Mario Brothers scroller,  but at your own pace.  The object of the game was, given a set of  initial numbers ("inputs"), to go through a set of game steps that would  produce a set of goal numbers ("outputs").  A critial insight was how  to synthesize recursion (a form of looping), which was necessary to be  able to concisely process or produce a list of values.  This was  achieved by dropping through a worm hole that landing the player in  another instance, or level, of the game.  Solving this level synthesized  the base case of the recursion.  4. Invariants Game.  A  game was developed in which players  unwittingly provide a loop invariant  -- a property that holds over every  iteration of a loop.  The idea was  to execute the loop and show the  player the data from several  iterations, then having the player write a  simple algebraic formula  describing any observed patterns.  Players do  not see the code itself.   Players reruited online were able to find  loop invariants that  best-in-class automated tools could not.  A  competitive multi-player  version of this game was found to be very  engaging for the players.  The project generated a number of broader impacts.  The project trained  four graduate students in the techniques of crowdsourcing, gamification,  and program verfication.  One student wrote a masters thesis on the  topic. Two others wrote Ph.D. dissertations on the topic of gamification  of software engineering.  One of these students is the co-founder and CEO of an after-school computer science education company, ThoughtSTEM.  The project also mentored four  undergraduates, and gave one Ph.D. student training in student mentoring.  Finally, the invariants game was published on Facebook games,  exposing the general public to our work.       Last Modified: 04/09/2019       Submitted by: William G Griswold]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
