<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Small: Linear and Polynomial Threshold Functions: Structural Analysis and Algorithmic Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Consider the commonly occurring situation in which a group of participants each casts a yes-or-no vote and a binary decision is made based on which outcome received the majority of the votes.  This simple scenario arises in countless different settings, from elections involving millions of people to small groups of friends deciding where to go for dinner. A generalization of a simple majority vote is a *weighted* majority voting scheme, in which different participants are allocated different numbers of votes. These weighted voting schemes have many interesting mathematical properties and are present across a wide range of areas, from corporate elections in which larger shareholders have more votes to cast to well-studied models of human neurons (which hold that neurons fire essentially according to a weighted vote of their input signals).  Even more generally, one may consider "higher-order" weighted voting schemes, in which each individual voter may belong to multiple "coalitions", each of which has a weighted vote to cast.&lt;br/&gt;&lt;br/&gt;In this project, the PI will study weighted majority voting schemes (known as "linear threshold functions" or LTFs) and higher-order generalizations of these schemes (known as "polynomial threshold functions" or PTFs) from a mathematical and computational perspective.  The goal of this study is both to obtain a better understanding of these functions, and to develop improved algorithms for working with these functions in a range of contexts.  Specific problems that the PI will address include: (1) Coming up with new ways to decompose "complex" PTFs into "simpler" PTFs, and to approximate complex PTFs using simpler PTFs.  (2) Developing efficient algorithms that can learn unknown PTFs and LTFs from noisy data, and can construct a desired LTF or PTF to meet a set of "design specifications" such as how much influence different individual voters should have over the final outcome.&lt;br/&gt;&lt;br/&gt;In terms of broader impacts, an improved understanding of LTFs and PTFs, and more efficient algorithms for working with these fundamental functions, may yield benefits in a range of areas (such as theoretical neuroscience, computer science, voting theory, and more) that use such functions. Other important focuses of the project are to train graduate students through research collaboration, disseminate research results through seminar talks, survey articles and other publications, and to continue ongoing outreach activities aimed at increasing interest in theoretical computer science topics in a broader population, including presentations at elementary schools.</AbstractNarration>
<MinAmdLetterDate>08/12/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/12/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1420349</AwardID>
<Investigator>
<FirstName>Rocco</FirstName>
<LastName>Servedio</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Rocco A Servedio</PI_FULL_NAME>
<EmailAddress>rocco@cs.columbia.edu</EmailAddress>
<PI_PHON>2129397065</PI_PHON>
<NSF_ID>000232661</NSF_ID>
<StartDate>08/12/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049179401</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049179401</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName>New York</CityName>
<StateCode>NY</StateCode>
<ZipCode>100276902</ZipCode>
<StreetAddress><![CDATA[2960 Broadway]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>All of us are familiar with the most basic type of voting scheme, in which each participant gets to cast a vote for or against some proposition and the majority opinion carries the day.&nbsp; But there are many possible ways that this most basic scheme can be extended and augmented.&nbsp; These ways include</p> <p>* weighted voting (for example, a shareholder in a corporation may be granted a number of votes proportional to the number of shares that he or she holds)</p> <p>* multi-level voting schemes (for example, the US electoral college system is a voting scheme in which a simple majority vote is used at the statewide level and then a weighted voting system is used across states)</p> <p>* and more complicated voting schemes, in which "coalitions" rather than individuals cast votes and an individual can belong to multiple coalitions.</p> <p>Each of these (and other) generalizations of simple majority-rule voting has been intensively studied in theoretical computer science and other fields because of broad applicability to a wide range of problems. (Weighted voting schemes are known as "linear threshold functions"; multi-level voting schemes correspond to circuits composed of linear threshold gates; and voting schemes based on coalitions correspond to "polynomial threshold functions".)&nbsp; As one example application area, theoretical neuroscience models use close analogues of weighted voting schemes to model how inputs to a neuron can cause it to fire (or not).</p> <p>&nbsp;</p> <p>The goal of this project was to study theoretical aspects of linear and polyonmial threshold functions and to explore applications to a range of different computational problems.&nbsp; The problems explored include computational learning problems (related to machine learning and, possibly, to the way learning takes place in the human brain); "property testing" problems that are closely related to super-fast algorithms for big data problems; and to "derandomization" problems which explore the fundamental question of whether the ability to use randomness (to "toss coins") enhances the power of computer systems.&nbsp; Another major goal of the research was to train graduate students in research methods and disseminate research results to communities of interest.</p> <p>&nbsp;</p> <p>The project resulted in a number of findings that are significant in the study of linear and polynomial threshold functions.&nbsp; Using structural results about linear and polynomial threshold functions, the PI developed new types of learning algorithms which can succeed given noisy and/or partial information about the decision rules being learned.&nbsp; The PI also gave a range of new fast data analysis algorithms, using tools and techniques from the study of linear and polynomial threshold functions, for a range of "big data" problems.&nbsp; Finally, the PI made significant progress on understanding the abilities and limitations of randomness as a computational resources, as it relates to computational problems involving linear and polynomial threshold functions.</p> <p>&nbsp;</p> <p>In terms of human resource development and dissemination of scientific results, the project aided in the training of a number of Columbia PhD students, one of whom has gone on to a postdoctoral position at Stanford University.&nbsp; Another close collaborator on much of the research was a different former Columbia PhD student who has gone on to a faculty position in computer science at Stanford.&nbsp; The project resulted in the publication of a number of research manuscripts, which have been disseminated through open-access channels such as the Electronic Colloquium on Computational Complexity (ECCC) and the publicly available ArXiV, and in a number of research seminar presentations.</p><br> <p>            Last Modified: 08/02/2018<br>      Modified by: Rocco&nbsp;A&nbsp;Servedio</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ All of us are familiar with the most basic type of voting scheme, in which each participant gets to cast a vote for or against some proposition and the majority opinion carries the day.  But there are many possible ways that this most basic scheme can be extended and augmented.  These ways include  * weighted voting (for example, a shareholder in a corporation may be granted a number of votes proportional to the number of shares that he or she holds)  * multi-level voting schemes (for example, the US electoral college system is a voting scheme in which a simple majority vote is used at the statewide level and then a weighted voting system is used across states)  * and more complicated voting schemes, in which "coalitions" rather than individuals cast votes and an individual can belong to multiple coalitions.  Each of these (and other) generalizations of simple majority-rule voting has been intensively studied in theoretical computer science and other fields because of broad applicability to a wide range of problems. (Weighted voting schemes are known as "linear threshold functions"; multi-level voting schemes correspond to circuits composed of linear threshold gates; and voting schemes based on coalitions correspond to "polynomial threshold functions".)  As one example application area, theoretical neuroscience models use close analogues of weighted voting schemes to model how inputs to a neuron can cause it to fire (or not).     The goal of this project was to study theoretical aspects of linear and polyonmial threshold functions and to explore applications to a range of different computational problems.  The problems explored include computational learning problems (related to machine learning and, possibly, to the way learning takes place in the human brain); "property testing" problems that are closely related to super-fast algorithms for big data problems; and to "derandomization" problems which explore the fundamental question of whether the ability to use randomness (to "toss coins") enhances the power of computer systems.  Another major goal of the research was to train graduate students in research methods and disseminate research results to communities of interest.     The project resulted in a number of findings that are significant in the study of linear and polynomial threshold functions.  Using structural results about linear and polynomial threshold functions, the PI developed new types of learning algorithms which can succeed given noisy and/or partial information about the decision rules being learned.  The PI also gave a range of new fast data analysis algorithms, using tools and techniques from the study of linear and polynomial threshold functions, for a range of "big data" problems.  Finally, the PI made significant progress on understanding the abilities and limitations of randomness as a computational resources, as it relates to computational problems involving linear and polynomial threshold functions.     In terms of human resource development and dissemination of scientific results, the project aided in the training of a number of Columbia PhD students, one of whom has gone on to a postdoctoral position at Stanford University.  Another close collaborator on much of the research was a different former Columbia PhD student who has gone on to a faculty position in computer science at Stanford.  The project resulted in the publication of a number of research manuscripts, which have been disseminated through open-access channels such as the Electronic Colloquium on Computational Complexity (ECCC) and the publicly available ArXiV, and in a number of research seminar presentations.       Last Modified: 08/02/2018       Submitted by: Rocco A Servedio]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
