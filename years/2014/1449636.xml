<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: EAGER: Collaborative Research: Mapping Software Analysis Problems to Efficient and Accurate Constraints</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>75001.00</AwardTotalIntnAmount>
<AwardAmount>75001</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Techniques for finding faults in software systems, such as crashes, security vulnerabilities, and deadlocks, have become increasingly powerful over the past two decades.  This is due in no small part to the development of efficient automated satisfiability solvers. The interest in applying these solvers to an ever wider class of software analysis applications has pushed solvers to their limits. As a result, analysis developers are currently forced to approximate analysis?s queries to make use of existing solvers.  Because of this software analyses can mistakenly diagnose an error, miss reporting a true error, and suffer unnecessarily poor performance. This research seeks to establish accuracy as an important missing dimension of solver support and its success will lead to broader and more cost-effective use of solvers to produce high-quality software.&lt;br/&gt;&lt;br/&gt;This project is the first to systematically explore and link the accuracy requirements of a software analysis to the accuracy provided by a solver. This project does this by exploring approaches to specify the accuracy requirements of solver clients and detect, recover and report solution accuracy for integer and string constraints.  These capabilities are being implemented in an existing solver interface framework, called Green, which is applied to perform symbolic execution of Java programs, using Symbolic Pathfinder.  The project will evaluate the extent to this approach simplifies client analysis development, enables clients to use a variety of solvers - even those that do not perfectly match accuracy requirements, and improves analysis performance.</AbstractNarration>
<MinAmdLetterDate>07/10/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/10/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1449636</AwardID>
<Investigator>
<FirstName>Elena</FirstName>
<LastName>Sherman</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Elena Sherman</PI_FULL_NAME>
<EmailAddress>elenasherman@boisestate.edu</EmailAddress>
<PI_PHON>2084261574</PI_PHON>
<NSF_ID>000643807</NSF_ID>
<StartDate>07/10/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Boise State University</Name>
<CityName>Boise</CityName>
<ZipCode>837250001</ZipCode>
<PhoneNumber>2084261574</PhoneNumber>
<StreetAddress>1910 University Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Idaho</StateName>
<StateCode>ID</StateCode>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>ID02</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072995848</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BOISE STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072995848</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Boise State University]]></Name>
<CityName>Boise</CityName>
<StateCode>ID</StateCode>
<ZipCode>837251135</ZipCode>
<StreetAddress><![CDATA[1910 University Dr.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Idaho</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>ID02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~75001</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software verification is an important software development process that focuses on eliminating software defects. Program analysis is an effective software verification technique that identifies all potential defects of a program without executing the program. Program analysis does it by interpreting software code and applying mathematical reasoning to it. Commonly software analysis employs automated constraint solver tools to help with reasoning tasks. &nbsp;However, constraint solvers are general-purpose tools and thus might lack particular constructs to accurately express certain constraints that program analysis generate. The problem is that program analysis researchers might not be aware of such inaccuracies, which could negatively affect the efficiency and effectiveness of program analyses. The research supported by this award studied the discrepancies between the available constraint solver support and the constraint processing needs of the program analysis researchers. The project considered several string constraint solvers and evaluated their ability to express string constraints that arise during symbolic execution, a path-sensitive static analysis technique. The results revealed that some constraint solvers were more efficient and accurate at solving some, but not all, constraints. The program analysis researchers can use these findings to choose appropriate constraint solvers that match the constraint profile of their programs. Furthermore, the same constraint solver may offer various abstraction models for representing string constraints. The project analyzed the effect of these models on the results of probabilistic symbolic execution, a special type of symbolic execution. The data showed that the accuracy of probabilistic symbolic execution strongly depends on the underlying string model that constraint solver used. An inaccurate probabilistic symbolic execution can lead to mislabeling high priority defects as low priority ones. In addition, the project produced 175 string constraints benchmarks obtained from real-world applications. Program analysis researchers working on improving string constraints solvers used these benchmarks in their empirical evaluations.&nbsp;</p><br> <p>            Last Modified: 11/22/2016<br>      Modified by: Elena&nbsp;Sherman</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software verification is an important software development process that focuses on eliminating software defects. Program analysis is an effective software verification technique that identifies all potential defects of a program without executing the program. Program analysis does it by interpreting software code and applying mathematical reasoning to it. Commonly software analysis employs automated constraint solver tools to help with reasoning tasks.  However, constraint solvers are general-purpose tools and thus might lack particular constructs to accurately express certain constraints that program analysis generate. The problem is that program analysis researchers might not be aware of such inaccuracies, which could negatively affect the efficiency and effectiveness of program analyses. The research supported by this award studied the discrepancies between the available constraint solver support and the constraint processing needs of the program analysis researchers. The project considered several string constraint solvers and evaluated their ability to express string constraints that arise during symbolic execution, a path-sensitive static analysis technique. The results revealed that some constraint solvers were more efficient and accurate at solving some, but not all, constraints. The program analysis researchers can use these findings to choose appropriate constraint solvers that match the constraint profile of their programs. Furthermore, the same constraint solver may offer various abstraction models for representing string constraints. The project analyzed the effect of these models on the results of probabilistic symbolic execution, a special type of symbolic execution. The data showed that the accuracy of probabilistic symbolic execution strongly depends on the underlying string model that constraint solver used. An inaccurate probabilistic symbolic execution can lead to mislabeling high priority defects as low priority ones. In addition, the project produced 175 string constraints benchmarks obtained from real-world applications. Program analysis researchers working on improving string constraints solvers used these benchmarks in their empirical evaluations.        Last Modified: 11/22/2016       Submitted by: Elena Sherman]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
