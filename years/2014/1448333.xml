<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Exploratory Research on the Micron Automata Processor</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The Micron Automata Processor is a reconfigurable non-Von Neumann co-processor which can be used to simultaneously execute multiple Non-deterministic Finite Automata over one or more input data streams. The technology supports an algorithmic model and a programming abstraction that is radically different from any processor or co-processor that is in existence today. The goal of this exploratory project is to conduct early-concept research on the Automata Processor so that the research community has access to techniques and tools for utilizing the technology. &lt;br/&gt;The project is developing algorithmic building blocks, programming techniques, and libraries for enabling researchers and developers to take advantage of this new architectural paradigm, and designing automata-based algorithms to solve path problems in graphs as a step towards exploring general purpose use of this architecture. The project will lead to fundamental research on how to solve problems using a new computational model. Research results will be shared through publications and release of automata libraries, to enable rapid adoption of this new technology by the computing community.</AbstractNarration>
<MinAmdLetterDate>08/15/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/31/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1448333</AwardID>
<Investigator>
<FirstName>Srinivas</FirstName>
<LastName>Aluru</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Srinivas Aluru</PI_FULL_NAME>
<EmailAddress>aluru@cc.gatech.edu</EmailAddress>
<PI_PHON>4043851486</PI_PHON>
<NSF_ID>000388133</NSF_ID>
<StartDate>08/15/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Georgia Tech Research Corporation</Name>
<CityName>Atlanta</CityName>
<ZipCode>303320420</ZipCode>
<PhoneNumber>4048944819</PhoneNumber>
<StreetAddress>Office of Sponsored Programs</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<StateCode>GA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>GA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>097394084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>GEORGIA TECH RESEARCH CORPORATION</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>097394084</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Georgia Institute of Technology]]></Name>
<CityName>Atlanta</CityName>
<StateCode>GA</StateCode>
<ZipCode>303320002</ZipCode>
<StreetAddress><![CDATA[225 North Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Georgia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>GA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7946</Code>
<Text>BIO COMPUTING</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~300000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-eefb6af9-7fff-8062-242f-1547e41b2e80">&nbsp;</span></p> <p dir="ltr"><span>The capability to perform complex and numerous concurrent pattern-matching operations is commonly found in nature. For example, it lies at the basis of understanding language, recognizing objects, and the analytical skills required to understand the text in this document. Even insects and animals use pattern-matching subconsciously to search for food, hunt, identify threats, etc. The requirement for matching patterns also shows up in many important computational challenges such as detecting cyberattacks, finding disease-causing genetic mutations in our genomes, etc. However, traditional computers are not adept at this kind of computing. In recent years, there have been multiple efforts to build computers that can perform fast large-scale pattern-matching. In this project, the team explored one such technology called the Automata Processor (AP).</span></p> <p dir="ltr"><span>The team evaluated this new technology for two pattern-matching applications for which the use of the AP follows naturally, cybersecurity and finding common functioning domains called motifs in proteins. For cybersecurity, the team implemented a method for detecting patterns of cyberattacks on the AP which is about 10 times faster than the state-of-the-art methods running on traditional computers. Similarly, the team accelerated a method for finding motifs in protein sequences which is up to 68 times faster than the state-of-the-art implementation on traditional computers. The team also tackled the harder problem of inexact pattern-matching, i.e., matching while allowing some errors. Specifically, the team looked at the biologically important bounded-mismatch motif search problem which requires finding common sequences of a fixed size between multiple given sequences while limiting the number of allowed mismatches. This problem is known to be hard to solve for traditional computers. The team was able to develop a method for solving this problem on the AP and show that this novel method could solve previously unsolved instances of this problem.</span></p> <p dir="ltr"><span>Many important problems in computer science can be modeled as graph problems. The team proposed a novel formulation for representing graphs on the AP and analyzing these graphs using the processor. This included solving the computationally hard problem of finding Hamiltonian paths in graphs. Further, the team developed a novel method for comparing floating-point numbers using the processor and showed that trillions of comparisons can be performed per second using the AP. With these two works, the team developed techniques to solve problems using the AP that were previously not thought of as related to &nbsp;pattern-matching.&nbsp;</span></p> <p dir="ltr"><span>The work performed under this project has a broad impact. The techniques and methods developed as part of this project have paved the way for future work on the AP. To facilitate dissemination and reuse of the work done as part of this project, the team published common algorithmic techniques and methods for solving problems using the AP.</span></p> <p dir="ltr"><span>The project supported the research of 2 Ph.D. students at Georgia Institute of Technology. The PI gave several invited and keynote presentations to inform the research community about results from this project.</span></p> <p>&nbsp;</p><br> <p>            Last Modified: 01/02/2020<br>      Modified by: Srinivas&nbsp;Aluru</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   The capability to perform complex and numerous concurrent pattern-matching operations is commonly found in nature. For example, it lies at the basis of understanding language, recognizing objects, and the analytical skills required to understand the text in this document. Even insects and animals use pattern-matching subconsciously to search for food, hunt, identify threats, etc. The requirement for matching patterns also shows up in many important computational challenges such as detecting cyberattacks, finding disease-causing genetic mutations in our genomes, etc. However, traditional computers are not adept at this kind of computing. In recent years, there have been multiple efforts to build computers that can perform fast large-scale pattern-matching. In this project, the team explored one such technology called the Automata Processor (AP). The team evaluated this new technology for two pattern-matching applications for which the use of the AP follows naturally, cybersecurity and finding common functioning domains called motifs in proteins. For cybersecurity, the team implemented a method for detecting patterns of cyberattacks on the AP which is about 10 times faster than the state-of-the-art methods running on traditional computers. Similarly, the team accelerated a method for finding motifs in protein sequences which is up to 68 times faster than the state-of-the-art implementation on traditional computers. The team also tackled the harder problem of inexact pattern-matching, i.e., matching while allowing some errors. Specifically, the team looked at the biologically important bounded-mismatch motif search problem which requires finding common sequences of a fixed size between multiple given sequences while limiting the number of allowed mismatches. This problem is known to be hard to solve for traditional computers. The team was able to develop a method for solving this problem on the AP and show that this novel method could solve previously unsolved instances of this problem. Many important problems in computer science can be modeled as graph problems. The team proposed a novel formulation for representing graphs on the AP and analyzing these graphs using the processor. This included solving the computationally hard problem of finding Hamiltonian paths in graphs. Further, the team developed a novel method for comparing floating-point numbers using the processor and showed that trillions of comparisons can be performed per second using the AP. With these two works, the team developed techniques to solve problems using the AP that were previously not thought of as related to  pattern-matching.  The work performed under this project has a broad impact. The techniques and methods developed as part of this project have paved the way for future work on the AP. To facilitate dissemination and reuse of the work done as part of this project, the team published common algorithmic techniques and methods for solving problems using the AP. The project supported the research of 2 Ph.D. students at Georgia Institute of Technology. The PI gave several invited and keynote presentations to inform the research community about results from this project.          Last Modified: 01/02/2020       Submitted by: Srinivas Aluru]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
