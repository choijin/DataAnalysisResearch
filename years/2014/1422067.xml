<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Hardware/Software Co-Monitoring</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>496737.00</AwardTotalIntnAmount>
<AwardAmount>528737</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Operating system crashes result in the interruption of vital services, productivity losses, and diminished system trustworthiness.  A frequent cause of operating system crashes is a malfunction in the interaction between a hardware device and its driver.  Such device/driver malfunctions are also a security threat which can be further exacerbated by backdoors planted in the drivers.  This project will develop techniques to monitor device/driver interactions at run-time which can be used to enhance driver reliability and security.&lt;br/&gt;&lt;br/&gt;This project explores hardware/software co-monitoring, i.e., simultaneous monitoring of hardware devices and software drivers. The research has four main goals. First, it develops techniques for run-time verification of properties at the device/driver interfaces. Second, it offers protection and adaptation mechanisms against both device and driver malfunctions. Third, it facilitates detection of (and protection against) transient hardware failures.  These errors are particularly difficult to detect with traditional debugging methods, because of lack of replayability. Fourth, it provides a mechanism for early detection of security vulnerabilities, and system supports for on-the-fly protection and adaptation mechanisms. The outcomes of this project are tools for developing trustworthy computers in the face of a continual trend towards integrated systems with many disparate devices and drivers. The results will be disseminated by academic publications, publicly releasing the co-monitoring framework and its supporting tools, integration into undergraduate and graduate curricula, and technology transfer to the industry via active collaboration.</AbstractNarration>
<MinAmdLetterDate>08/07/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/11/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1422067</AwardID>
<Investigator>
<FirstName>Fei</FirstName>
<LastName>Xie</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Fei Xie</PI_FULL_NAME>
<EmailAddress>xie@cs.pdx.edu</EmailAddress>
<PI_PHON>5037252403</PI_PHON>
<NSF_ID>000492528</NSF_ID>
<StartDate>08/07/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Portland State University</Name>
<CityName>Portland</CityName>
<ZipCode>972070751</ZipCode>
<PhoneNumber>5037259900</PhoneNumber>
<StreetAddress>1600 SW 4th Ave</StreetAddress>
<StreetAddress2><![CDATA[Attn: Sponsored Projects Admin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<StateCode>OR</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>OR03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052226800</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PORTLAND STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052226800</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Portland State University]]></Name>
<CityName>Portland</CityName>
<StateCode>OR</StateCode>
<ZipCode>972070751</ZipCode>
<StreetAddress><![CDATA[1900 SW 4th Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Oregon</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>OR03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7354</Code>
<Text>COMPUTER SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~496737</FUND_OBLG>
<FUND_OBLG>2015~16000</FUND_OBLG>
<FUND_OBLG>2017~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>Intellectual Merits.</strong> This research is about hardware/software co-monitoring, i.e., simultaneous monitoring of hardware devices and software drivers. Central to the framework is a formal device model (FDM), a transactional, non-deterministic device simulator derived from the interface and device specifications. The FDM provides a comprehensive set of run-time enforceable device rules. Given an FDM, the framework entails an integrated run-time environment involving co-execution of a device with its FDM. Asynchrony between the FDM execution and the device execution indicates device problems or spec violation, while violation of system-level assertions in the absence of such asynchrony indicates driver problems. The latter is detected through a property monitor, which observes the state transitions of both the FDM and the driver, and checks their conformance with driver design rules and system properties. The full observability of the FDM facilitates recording and inference of the device history; when a hardware problem is detected, this history is used to localize the source of the issue. The entire environment is integrated with the OS functionality, together with on-the-fly protection mechanisms on error detection, and methods for evading detected errors in subsequent execution.</p> <p>1. FDM Semantics and Modeling. The first challenge is to develop a framework for effective specification of FDMs for different hardware devices. To rule out ambiguity and inconsistency, FDMs must have a formal semantics. FDM modeling has to be sufficiently expressive to cover possible device behaviors while sufficiently abstract to avoid excessive modeling details. Finally, FDMs must be executable and light-weight to facilitate low-cost execution. To address these issues, we have designed a transaction level, non-deterministic modeling language for specifying FDMs. The language has executable formal semantics and is amenable to various analysis techniques for correctness validation and optimizations for run-time efficiency.</p> <p>2. System Integration Issues. The second challenge is to integrate co-monitoring into the OS and device/driver framework. Note that the design of a device driver is traditionally separate from the OS, and the interaction among the OS, driver, and device is usually based on a pre-defined framework whereby the OS handles device detection and execution of driver instances. Co-monitoring must interact with both the OS (for device related events) and the driver (for monitoring the driver states), without interfering with their normal operations. In addition, there is significant system integration challenge to instigate corrective or protective actions for errors detected runtime. We have explored both coarse-grained actions (e.g., reloading the driver and resetting the device) and fine-grained actions (e.g., constraining the execution paths in the driver).</p> <p>3. Controlling Execution Overhead. The third challenge is to co-monitor the device and driver without incurring prohibitive overheads. Note that the FDM is a (transaction-level) formal simulator while the device itself executes at full hardware speed; co-monitoring must permit co-execution of the hardware and the FDM in the presence of this speed mismatch. Furthermore, the co-monitoring mechanism may be triggered for potentially every driver I/O command or device interrupt; both types of events can happen with very high frequency, and any delay can significantly degrade the system performance, usability, and availability. We solve this challenge through a mixture of formal methods and system design techniques. On the formal methods side, we have developed FDM abstractions according to the system property to be monitored; the abstraction can be significantly simpler than the full FDM, and can significantly improve execution efficiency. On the systems side, we have experimented with approaches to dynamically optimizing executions of FDM modules through caching and batching techniques.</p> <p>4. Tool Development and Empirical Evaluation. We have developed a deployable prototype co-monitoring toolkit, namely CoMon, which will allow users to specify FDMs and PMs, integrate the co-monitoring mechanism into their OS, fine-tune the FDM abstractions, and adjust the run-time protection. We have conducted empirical evaluation of our approach and toolkit on devices which utilize popular interface standards, such as PCI/PCI-E (e.g., E100 and E1000), USB 2.0, and USB 3.0, with their Windows and Linux drivers.</p> <p><strong>Broader Impact and Outreaches.</strong> Devices and drivers are significant parts of the computing infrastructures of our society. This research provides tools for developing trustworthy computers in the face of a continual trend towards integrated systems with many disparate devices and drivers. The co-monitoring framework not only provides powerful tools for monitoring computer systems, but also sheds new light on the monitoring of other large scale systems such as industrial process controls, transportation systems, electrical grids, etc. The results were disseminated by academic publications, publicly releasing the framework and its supporting tools, integration into undergraduate and graduate curricula, and technology transfer to the industry via active collaboration. The research spawned three Ph.D. dissertations, and several master's and undergraduate projects. The PI has successfully recruited several female students to participate in this project. The research was introduced to high-school students through university outreach programs, encouraging them to pursue computer science education.</p><br> <p>            Last Modified: 01/07/2019<br>      Modified by: Fei&nbsp;Xie</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Intellectual Merits. This research is about hardware/software co-monitoring, i.e., simultaneous monitoring of hardware devices and software drivers. Central to the framework is a formal device model (FDM), a transactional, non-deterministic device simulator derived from the interface and device specifications. The FDM provides a comprehensive set of run-time enforceable device rules. Given an FDM, the framework entails an integrated run-time environment involving co-execution of a device with its FDM. Asynchrony between the FDM execution and the device execution indicates device problems or spec violation, while violation of system-level assertions in the absence of such asynchrony indicates driver problems. The latter is detected through a property monitor, which observes the state transitions of both the FDM and the driver, and checks their conformance with driver design rules and system properties. The full observability of the FDM facilitates recording and inference of the device history; when a hardware problem is detected, this history is used to localize the source of the issue. The entire environment is integrated with the OS functionality, together with on-the-fly protection mechanisms on error detection, and methods for evading detected errors in subsequent execution.  1. FDM Semantics and Modeling. The first challenge is to develop a framework for effective specification of FDMs for different hardware devices. To rule out ambiguity and inconsistency, FDMs must have a formal semantics. FDM modeling has to be sufficiently expressive to cover possible device behaviors while sufficiently abstract to avoid excessive modeling details. Finally, FDMs must be executable and light-weight to facilitate low-cost execution. To address these issues, we have designed a transaction level, non-deterministic modeling language for specifying FDMs. The language has executable formal semantics and is amenable to various analysis techniques for correctness validation and optimizations for run-time efficiency.  2. System Integration Issues. The second challenge is to integrate co-monitoring into the OS and device/driver framework. Note that the design of a device driver is traditionally separate from the OS, and the interaction among the OS, driver, and device is usually based on a pre-defined framework whereby the OS handles device detection and execution of driver instances. Co-monitoring must interact with both the OS (for device related events) and the driver (for monitoring the driver states), without interfering with their normal operations. In addition, there is significant system integration challenge to instigate corrective or protective actions for errors detected runtime. We have explored both coarse-grained actions (e.g., reloading the driver and resetting the device) and fine-grained actions (e.g., constraining the execution paths in the driver).  3. Controlling Execution Overhead. The third challenge is to co-monitor the device and driver without incurring prohibitive overheads. Note that the FDM is a (transaction-level) formal simulator while the device itself executes at full hardware speed; co-monitoring must permit co-execution of the hardware and the FDM in the presence of this speed mismatch. Furthermore, the co-monitoring mechanism may be triggered for potentially every driver I/O command or device interrupt; both types of events can happen with very high frequency, and any delay can significantly degrade the system performance, usability, and availability. We solve this challenge through a mixture of formal methods and system design techniques. On the formal methods side, we have developed FDM abstractions according to the system property to be monitored; the abstraction can be significantly simpler than the full FDM, and can significantly improve execution efficiency. On the systems side, we have experimented with approaches to dynamically optimizing executions of FDM modules through caching and batching techniques.  4. Tool Development and Empirical Evaluation. We have developed a deployable prototype co-monitoring toolkit, namely CoMon, which will allow users to specify FDMs and PMs, integrate the co-monitoring mechanism into their OS, fine-tune the FDM abstractions, and adjust the run-time protection. We have conducted empirical evaluation of our approach and toolkit on devices which utilize popular interface standards, such as PCI/PCI-E (e.g., E100 and E1000), USB 2.0, and USB 3.0, with their Windows and Linux drivers.  Broader Impact and Outreaches. Devices and drivers are significant parts of the computing infrastructures of our society. This research provides tools for developing trustworthy computers in the face of a continual trend towards integrated systems with many disparate devices and drivers. The co-monitoring framework not only provides powerful tools for monitoring computer systems, but also sheds new light on the monitoring of other large scale systems such as industrial process controls, transportation systems, electrical grids, etc. The results were disseminated by academic publications, publicly releasing the framework and its supporting tools, integration into undergraduate and graduate curricula, and technology transfer to the industry via active collaboration. The research spawned three Ph.D. dissertations, and several master's and undergraduate projects. The PI has successfully recruited several female students to participate in this project. The research was introduced to high-school students through university outreach programs, encouraging them to pursue computer science education.       Last Modified: 01/07/2019       Submitted by: Fei Xie]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
