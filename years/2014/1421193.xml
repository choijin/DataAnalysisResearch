<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: SMALL: NONSTANDARD COMPUTATIONAL MODELS OF LINEAR LOGIC</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>458000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>TItle: SHF: Small: Nonstandard Computational Models of Linear Logic&lt;br/&gt;&lt;br/&gt;Much of the interesting software being developed today relies on mathematical underpinnings that can best be expressed in terms of linear algebra (e.g. large scale matrices or graph data) and statistics (e.g. machine learning algorithms or "big data" analysis). Current programming languages aren't especially suited to working with such kinds of data, and so provide little built-in support to help scientists and software developers.  Conversely, many powerful mathematical techniques have been developed in the contexts of linear algebra and statistics, but those techniques have not been applicable to problems in programming language semantics.  This research project seeks to develop a theoretical foundation that connects the seemingly disparate topics of programming languages and these mathematical domains.&lt;br/&gt;&lt;br/&gt;The technical approach taken in this work is to develop "nonstandard" models of linear logic, which is an expressive and low-level framework for understanding program semantics.  The intellectual merits are found in developing novel connections between well-established, but distinct, mathematical domains, connecting proof theory and program semantics to representations in vector spaces and categories of probability measures.  The broader impacts of this work are best understood through its potential long-term applications, which include: smooth integration of programming language constructs for working with numerical data (like Matlab) with support for higher-order functions and abstract datatypes; new techniques for proof search based on numerical methods; and, better programming languages for expressing machine learning or probabilistic algorithm.</AbstractNarration>
<MinAmdLetterDate>07/23/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/11/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421193</AwardID>
<Investigator>
<FirstName>Stephan</FirstName>
<LastName>Zdancewic</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephan A Zdancewic</PI_FULL_NAME>
<EmailAddress>stevez@cis.upenn.edu</EmailAddress>
<PI_PHON>2158982661</PI_PHON>
<NSF_ID>000220116</NSF_ID>
<StartDate>07/23/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<StreetAddress2><![CDATA[3451 Walnut St, 5th Flr Franklin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042250712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042250712</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Pennsylvania]]></Name>
<CityName/>
<StateCode>PA</StateCode>
<ZipCode>191046205</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~450000</FUND_OBLG>
<FUND_OBLG>2016~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project conducted basic research into computational models of linear logic.Linear logic is a framework for desribing and reasoning about systems that have "consumable" resources.&nbsp; In this setting, a computational model is a semantics for linear logic that describes the kinds of algorithmic operations executableby a computer.</p> <p><br />The main outcomes of this project were threefold.&nbsp; First, we developed mathematical machinery needed to understand the connection between linear-logic based semantics and ordinary semantics.&nbsp; We showed how to frame this connection as a linear--nonlinear adjunction, which gives a mathematical explanation for how to embed a linear semantics into an ordinary semantics (and vice versa).Second, we using this abstract connection as a basis, we explored two implementations of these ideas.&nbsp; One, for the Haskell programming language, shows how to embed linear sublanguages as libraries that provide strong resource usage guarantees.&nbsp; The other implementation demonstrated how to embed a linear language into the Coq interactive theorem prover.</p> <p><br />The third outcome of this project was the development of QWIRE, a programming language for quantum computation circuits.&nbsp; It turns out that one natural computational model of linear logic is closely connected to mathematical models (called density matrices) that physicists use to describe the evolution of quantum systems.&nbsp; Our computational model of linear logic therefor provides anatural programming language with which to express quantum computations.&nbsp; QWIRE is an implementation of those ideas in the Coq theorem prover, a design that allows us to model and formally prove properties of quantum algorithms.&nbsp; This is a particularly compelling idea because quantum computers are (at least in thenear term) going to be expensive to construct, and they don't easily permit usual software-development methodologies such as testing or simulation.&nbsp; Formal verification of the correctness of quantum circuits provides a way to obtain higher confidence that the quantum computers are giving us reliable outputs.</p> <p>&nbsp;</p> <p>Beyond the deep theoretical questions that this proejct explored, it has creaded several other impacts.&nbsp; The QWIRE programming language is under active development and there is a growing community of researchers interested in the intersection of quantum computing and programming languages.&nbsp; This project also provided led to two Ph.D. theses.</p><br> <p>            Last Modified: 12/05/2019<br>      Modified by: Stephan&nbsp;A&nbsp;Zdancewic</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project conducted basic research into computational models of linear logic.Linear logic is a framework for desribing and reasoning about systems that have "consumable" resources.  In this setting, a computational model is a semantics for linear logic that describes the kinds of algorithmic operations executableby a computer.   The main outcomes of this project were threefold.  First, we developed mathematical machinery needed to understand the connection between linear-logic based semantics and ordinary semantics.  We showed how to frame this connection as a linear--nonlinear adjunction, which gives a mathematical explanation for how to embed a linear semantics into an ordinary semantics (and vice versa).Second, we using this abstract connection as a basis, we explored two implementations of these ideas.  One, for the Haskell programming language, shows how to embed linear sublanguages as libraries that provide strong resource usage guarantees.  The other implementation demonstrated how to embed a linear language into the Coq interactive theorem prover.   The third outcome of this project was the development of QWIRE, a programming language for quantum computation circuits.  It turns out that one natural computational model of linear logic is closely connected to mathematical models (called density matrices) that physicists use to describe the evolution of quantum systems.  Our computational model of linear logic therefor provides anatural programming language with which to express quantum computations.  QWIRE is an implementation of those ideas in the Coq theorem prover, a design that allows us to model and formally prove properties of quantum algorithms.  This is a particularly compelling idea because quantum computers are (at least in thenear term) going to be expensive to construct, and they don't easily permit usual software-development methodologies such as testing or simulation.  Formal verification of the correctness of quantum circuits provides a way to obtain higher confidence that the quantum computers are giving us reliable outputs.     Beyond the deep theoretical questions that this proejct explored, it has creaded several other impacts.  The QWIRE programming language is under active development and there is a growing community of researchers interested in the intersection of quantum computing and programming languages.  This project also provided led to two Ph.D. theses.       Last Modified: 12/05/2019       Submitted by: Stephan A Zdancewic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
