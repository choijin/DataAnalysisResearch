<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>II-EN: Collaborative Research: Positioning MLton for Next-Generation Programming Languages Research</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>224329.00</AwardTotalIntnAmount>
<AwardAmount>224329</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sankar Basu</SignBlockName>
<PO_EMAI>sabasu@nsf.gov</PO_EMAI>
<PO_PHON>7032927843</PO_PHON>
</ProgramOfficer>
<AbstractNarration>MLton is an open-source, whole-program, optimizing compiler for the Standard ML programming language. As with any large and mature software system, there is a need to evaluate the design and architecture of the MLton software  project, and to make any substantive changes required for continued research and development.  This Computing  Research Infrastructure project supports enhancements to position MLton as a vehicle for research in programming-language design and implementation.  These enhancements will directly support research, while providing students and next-generation of researchers with a software development experience in the context of a production-level compiler, a complex software system that draws together many themes of Computer Science education, and encourages critical thinking.  Finally, these enhancements will indirectly support both the broader programming-languages research community and industry software developers that use functional programming languages. The broader impacts of the project will be in training of student research assistants at all levels, the development of documentation and course materials for teaching compiler-related topics using the MLton infrastructure, and the continued support for MLton's industrial and academic users.&lt;br/&gt;&lt;br/&gt;Specific infrastructure enhancements will include development of type-checking and optimization infrastructures, threading and garbage collection frameworks, configuration and benchmarking support systems, and documentation including course material. These enhancements will directly support research exploring whole-program compilation of next-generation language features (such as first-class polymorphism, generalized algebraic data types, and higher-order polymorphism) and research exploring programming for next-generation execution platforms (such as multi-core parallel systems, real-time embedded systems, and cloud-based distributed systems). One significant goal is to provide a single research vehicle that is easily configurable to scientifically compare and contrast research results, thereby enabling researchers to make stronger claims based on more meaningful comparisons, rather than relying on weaker claims across multiple system stacks.</AbstractNarration>
<MinAmdLetterDate>07/30/2014</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1405770</AwardID>
<Investigator>
<FirstName>Matthew</FirstName>
<LastName>Fluet</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Matthew Fluet</PI_FULL_NAME>
<EmailAddress>mtf@cs.rit.edu</EmailAddress>
<PI_PHON/>
<NSF_ID>000105569</NSF_ID>
<StartDate>07/30/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Rochester Institute of Tech</Name>
<CityName>ROCHESTER</CityName>
<ZipCode>146235603</ZipCode>
<PhoneNumber>5854757987</PhoneNumber>
<StreetAddress>1 LOMB MEMORIAL DR</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY25</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002223642</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>ROCHESTER INSTITUTE OF TECHNOLOGY (INC)</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002223642</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Rochester Institute of Tech]]></Name>
<CityName>Rochester</CityName>
<StateCode>NY</StateCode>
<ZipCode>146235603</ZipCode>
<StreetAddress><![CDATA[1 Lomb Memorial Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7359</Code>
<Text>CCRI-CISE Cmnty Rsrch Infrstrc</Text>
</ProgramElement>
<ProgramReference>
<Code>7359</Code>
<Text>COMPUTING RES INFRASTRUCTURE</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~224329</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>MLton (http://mlton.org and https://github.com/MLton/mlton) is an open-source,whole-program, optimizing compiler for the Standard ML (SML) programminglanguage.&nbsp; MLton provides a feature rich SML programming environment and iswidely regarded as one of the best compilers for any functional programminglanguage; it is actively used in both industry and academia and has served asboth a direct research vehicle as well as critical infrastructure for otherresearch projects.&nbsp; This CISE Research Infrastructure (CRI) project supportedenhancements that aimed to position MLton as a vehicle for significant researchin programming-language design and implementation.<br />The most significant outcome of the project has been the participation of alarge number students: 1 PhD student, 11 MS students, and 10 BS students.&nbsp; Mostof the MS and BS students contributed part-time effort over a semester, while asmaller number contributed full-time effort over a summer or semester.&nbsp; Many ofthese students returned for a second semester or summer of participation.&nbsp; Thesestudents (the next-generation of researchers) had a software developmentexperience in the context of a production-level compiler, a complex softwaresystem that draws together many themes of Computer Science education andencourages critical thinking.&nbsp; A number of the MS students went on to completean MS project or MS thesis that either built on or was inspired by their work inthe context of MLton: "Successor ML Features for MLton (Project)", "Source-LevelDebugging for MLton (Project)", "Vector Expressions for MLton (Project)","Alternate Control-Flow Analyses for Defunctionalization in MLton (Project)","Loop Optimizations for MLton (Project)", "Implementation of Partial RedundancyElimination (PRE) for MLton Compiler (Project)", "Correctly RoundedFloating-point Binary-to-Decimal and Decimal-to-Binary Conversion Routines forStandard ML (Project)", "Formally Verified Space-Saftey for ProgramTransformations (Thesis)".<br />We made two public releases (MLton 20180206 and MLton 20200817), incorporatingmany of the infrastructure enhancements made by students supported by theproject; such support is clearly noted in the CHANGELOG.<br />Some of the more significant infrastructure enhancements undertaken during theproject are the following:<br />&nbsp;* Implemented many updates and improvements to the C and LLVM codegens: The&nbsp; &nbsp;main motivation has been to improve the performance of these codegens, which&nbsp; &nbsp;are required for non-x86 and non-x86_64 platforms, such as ARM and RISCV.<br />&nbsp;* Implemented parsers for the XML, SXML, SSA, and SSA2 IRs: This effort will&nbsp; &nbsp;make it easier to develop and debug new optimization passes, where they can&nbsp; &nbsp;be applied to small (comprehensible) input IL programs rather than only be&nbsp; &nbsp;applied to large (incomprehensible) whole-source input SML programs.<br />&nbsp;* Refactored the treatment of overflow-checking arithmetic primitives: The&nbsp; &nbsp;previous treatment of overflow-checking arithmetic primitives as special-case&nbsp; &nbsp;transfers complicated a number of optimization passes that duplicated logic&nbsp; &nbsp;for Arith transfers and arithmetic statements and had often been confusing&nbsp; &nbsp;for new developers.&nbsp; The new treatment, as explicit-boolean-result&nbsp; &nbsp;primitives, is more uniform and in concert with other compilers (GCC, clang),&nbsp; &nbsp;which provide overflow checking via boolean-returning functions.<br />&nbsp;* Developed a number of new optimization pases, including `BounceVars`&nbsp; &nbsp;`CollectStatics` `DuplicateGlobals` `LoopUnroll`, `LoopUnswitch`,&nbsp; &nbsp;`ShareZeroVec` `SplitTypes`.<br />&nbsp;* Improved benchmarking infrastructure that makes use of statistically rigorous&nbsp; &nbsp;experimentation and analysis techniques.</p><br> <p>            Last Modified: 09/14/2020<br>      Modified by: Matthew&nbsp;Fluet</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ MLton (http://mlton.org and https://github.com/MLton/mlton) is an open-source,whole-program, optimizing compiler for the Standard ML (SML) programminglanguage.  MLton provides a feature rich SML programming environment and iswidely regarded as one of the best compilers for any functional programminglanguage; it is actively used in both industry and academia and has served asboth a direct research vehicle as well as critical infrastructure for otherresearch projects.  This CISE Research Infrastructure (CRI) project supportedenhancements that aimed to position MLton as a vehicle for significant researchin programming-language design and implementation. The most significant outcome of the project has been the participation of alarge number students: 1 PhD student, 11 MS students, and 10 BS students.  Mostof the MS and BS students contributed part-time effort over a semester, while asmaller number contributed full-time effort over a summer or semester.  Many ofthese students returned for a second semester or summer of participation.  Thesestudents (the next-generation of researchers) had a software developmentexperience in the context of a production-level compiler, a complex softwaresystem that draws together many themes of Computer Science education andencourages critical thinking.  A number of the MS students went on to completean MS project or MS thesis that either built on or was inspired by their work inthe context of MLton: "Successor ML Features for MLton (Project)", "Source-LevelDebugging for MLton (Project)", "Vector Expressions for MLton (Project)","Alternate Control-Flow Analyses for Defunctionalization in MLton (Project)","Loop Optimizations for MLton (Project)", "Implementation of Partial RedundancyElimination (PRE) for MLton Compiler (Project)", "Correctly RoundedFloating-point Binary-to-Decimal and Decimal-to-Binary Conversion Routines forStandard ML (Project)", "Formally Verified Space-Saftey for ProgramTransformations (Thesis)". We made two public releases (MLton 20180206 and MLton 20200817), incorporatingmany of the infrastructure enhancements made by students supported by theproject; such support is clearly noted in the CHANGELOG. Some of the more significant infrastructure enhancements undertaken during theproject are the following:  * Implemented many updates and improvements to the C and LLVM codegens: The   main motivation has been to improve the performance of these codegens, which   are required for non-x86 and non-x86_64 platforms, such as ARM and RISCV.  * Implemented parsers for the XML, SXML, SSA, and SSA2 IRs: This effort will   make it easier to develop and debug new optimization passes, where they can   be applied to small (comprehensible) input IL programs rather than only be   applied to large (incomprehensible) whole-source input SML programs.  * Refactored the treatment of overflow-checking arithmetic primitives: The   previous treatment of overflow-checking arithmetic primitives as special-case   transfers complicated a number of optimization passes that duplicated logic   for Arith transfers and arithmetic statements and had often been confusing   for new developers.  The new treatment, as explicit-boolean-result   primitives, is more uniform and in concert with other compilers (GCC, clang),   which provide overflow checking via boolean-returning functions.  * Developed a number of new optimization pases, including `BounceVars`   `CollectStatics` `DuplicateGlobals` `LoopUnroll`, `LoopUnswitch`,   `ShareZeroVec` `SplitTypes`.  * Improved benchmarking infrastructure that makes use of statistically rigorous   experimentation and analysis techniques.       Last Modified: 09/14/2020       Submitted by: Matthew Fluet]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
