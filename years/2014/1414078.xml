<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>From Clarity to Efficiency for Distributed Algorithms</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
<AwardExpirationDate>06/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>1300000.00</AwardTotalIntnAmount>
<AwardAmount>1300000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: From Clarity to Efficiency for Distributed Algorithms&lt;br/&gt;&lt;br/&gt;Distributed algorithms are at the core of distributed systems, which are increasingly indispensable in daily lives. From search engines to social networks, and from cloud computing to mobile computing, the ability to develop high-assurance high-performance distributed applications at low cost is the key to the success and growth of virtually all computer applications. Yet, developing efficient implementations of distributed algorithms with rigorous correctness guarantees remains a challenging, recurring task. This project develops significantly advanced methods and tools for high-level specifications and efficient implementations of distributed algorithms with formally and rigorously verified correctness guarantees. The project also applies the results to the most important and difficult distributed algorithms and uses the results in developing teaching materials. The broader impacts are significant improvements to the development of efficient, reliable, and robust distributed systems, and to the teaching of languages and algorithms for distributed systems.&lt;br/&gt;&lt;br/&gt;To express and to reason about distributed algorithms easily and clearly, the project develops the language DistAlgo, which combines high-level non-deterministic control with high-level message-history queries for specifying synchronization conditions. The method for obtaining efficient implementations generates efficient message handlers from both general non-deterministic control and from quantifications over message histories, by systematically transforming expensive queries into efficient incremental computations. The method for correctness guarantees first translates DistAlgo to TLA+; next, to make the challenging verification tasks feasible, it uses appropriate formal verification tools like TLA Toolbox, to exploit high-level constructs in the specifications. The intellectual merits are a powerful and rigorous language that combines advantages of pseudocode languages, formal specification languages, and programming languages for distributed algorithms; advancement of a principled method for program optimization by incrementalization, the discrete counterpart of differentiation in calculus; and new technologies for formal verification of distributed algorithms.</AbstractNarration>
<MinAmdLetterDate>05/30/2014</MinAmdLetterDate>
<MaxAmdLetterDate>06/28/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1414078</AwardID>
<Investigator>
<FirstName>Yanhong</FirstName>
<LastName>Liu</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yanhong A Liu</PI_FULL_NAME>
<EmailAddress>liu@cs.stonybrook.edu</EmailAddress>
<PI_PHON>6316328463</PI_PHON>
<NSF_ID>000122290</NSF_ID>
<StartDate>05/30/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Scott</FirstName>
<LastName>Stoller</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Scott D Stoller</PI_FULL_NAME>
<EmailAddress>stoller@cs.stonybrook.edu</EmailAddress>
<PI_PHON>6316321627</PI_PHON>
<NSF_ID>000201137</NSF_ID>
<StartDate>05/30/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Stony Brook</Name>
<CityName>Stony Brook</CityName>
<ZipCode>117940001</ZipCode>
<PhoneNumber>6316329949</PhoneNumber>
<StreetAddress>WEST 5510 FRK MEL LIB</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804878247</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020657151</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SUNY at Stony Brook]]></Name>
<CityName>Stony Brook</CityName>
<StateCode>NY</StateCode>
<ZipCode>117944400</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7925</Code>
<Text>LARGE PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~800000</FUND_OBLG>
<FUND_OBLG>2016~500000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project led to the successful development of (1) a powerful high-level language, DistAlgo, for writing clear descriptions of distributed algorithms and systems, (2) a formal operational semantics of DistAlgo for precise reasoning and verification, (3) systematic optimizations for generating efficient implementations, and (4) general methods for specifying and verifying complex distributedalgorithms using automated proof checking systems. The language and formal semantics support high-level control flows with both synchronous and asynchronous communications. Complex synchronization conditions can be expressed using high-level queries, especially logic quantifications and with logic variables and patterns, over message history sequences. This allows sophisticated distributed algorithms to be written more easily and clearly than before. The optimizations automatically transform complex synchronization conditions into efficient incremental updates as messages are sent and received. The core of the optimizations is the first general method for generating efficient implementations of logic quantifications. This method further enabled our development of more powerful logic rule languages with a simple unified semantics over previously complex disagreeing semantics. The specification and verification methods exploit high-level queries over message history variables to arrive at simpler specifications and easier proofs. This led to the first complete, automatically checked, formal proof of Multi-Paxos using TLAPS, the TLA+ proof system; the simplified specifications and proofs of Paxos using only history variables; and proofs of more complex variants of Paxos fordistributed consensus. DistAlgo and our methods and tools have been applied for a large variety of challenging important algorithms, including over a dozen well-known algorithms and variants for classical consensus and blockchain consensus. This has allowed us to find improvements to both correctness and efficiency of well-known distributed algorithms. DistAlgo has also been used by many students, including in over 100 different course and research projects, studying complex distributedalgorithms.</p><br> <p>            Last Modified: 09/29/2020<br>      Modified by: Yanhong&nbsp;A&nbsp;Liu</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project led to the successful development of (1) a powerful high-level language, DistAlgo, for writing clear descriptions of distributed algorithms and systems, (2) a formal operational semantics of DistAlgo for precise reasoning and verification, (3) systematic optimizations for generating efficient implementations, and (4) general methods for specifying and verifying complex distributedalgorithms using automated proof checking systems. The language and formal semantics support high-level control flows with both synchronous and asynchronous communications. Complex synchronization conditions can be expressed using high-level queries, especially logic quantifications and with logic variables and patterns, over message history sequences. This allows sophisticated distributed algorithms to be written more easily and clearly than before. The optimizations automatically transform complex synchronization conditions into efficient incremental updates as messages are sent and received. The core of the optimizations is the first general method for generating efficient implementations of logic quantifications. This method further enabled our development of more powerful logic rule languages with a simple unified semantics over previously complex disagreeing semantics. The specification and verification methods exploit high-level queries over message history variables to arrive at simpler specifications and easier proofs. This led to the first complete, automatically checked, formal proof of Multi-Paxos using TLAPS, the TLA+ proof system; the simplified specifications and proofs of Paxos using only history variables; and proofs of more complex variants of Paxos fordistributed consensus. DistAlgo and our methods and tools have been applied for a large variety of challenging important algorithms, including over a dozen well-known algorithms and variants for classical consensus and blockchain consensus. This has allowed us to find improvements to both correctness and efficiency of well-known distributed algorithms. DistAlgo has also been used by many students, including in over 100 different course and research projects, studying complex distributedalgorithms.       Last Modified: 09/29/2020       Submitted by: Yanhong A Liu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
