<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CRII: SHF: Automatic Extraction of Error-Handling Specifications in Systems Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>03/15/2015</AwardEffectiveDate>
<AwardExpirationDate>09/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>175000.00</AwardTotalIntnAmount>
<AwardAmount>182500</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software error handling is the process of detecting and responding to&lt;br/&gt;the occurrence of errors during the execution of a program. Ideally,&lt;br/&gt;whenever a runtime error occurs, software systems should respond&lt;br/&gt;according to the programmer?s intent. Unfortunately, that is often not&lt;br/&gt;the case. Error-handling code is difficult to write, and tends to be&lt;br/&gt;poorly understood, poorly documented, and poorly tested.&lt;br/&gt;Unsurprisingly, error-handling code is often buggy. Bugs in software&lt;br/&gt;error handlers are some of the most pervasive, dangerous, and&lt;br/&gt;difficult to detect bugs. Incorrect error-handling is particularly&lt;br/&gt;alarming in systems software (e.g., the operating system) because user&lt;br/&gt;applications depend on the reliability of systems software. This&lt;br/&gt;research aims to gather a better understanding of error handling in&lt;br/&gt;systems software through automatic inference of error-handling&lt;br/&gt;specifications.&lt;br/&gt;&lt;br/&gt;Error-handling specifications describe how the system detects and&lt;br/&gt;recovers from errors. This research applies static program analysis&lt;br/&gt;techniques to automatically infer error-handling specifications in&lt;br/&gt;systems software. This task is particularly challenging because&lt;br/&gt;systems software implements numerous failure policies, and&lt;br/&gt;error-handling code is often diffused through the system. Furthermore,&lt;br/&gt;the analysis of such large code bases often faces scalability&lt;br/&gt;problems. Understanding existing error-handling strategies is the&lt;br/&gt;first step to ensure systems software is reliable. This understanding&lt;br/&gt;also has the potential to lead to the development of new&lt;br/&gt;error-handling mechanisms, and new programming language support for&lt;br/&gt;error handling. Both of these could have a significant impact on&lt;br/&gt;software reliability beyond systems software.</AbstractNarration>
<MinAmdLetterDate>03/23/2015</MinAmdLetterDate>
<MaxAmdLetterDate>07/18/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1464439</AwardID>
<Investigator>
<FirstName>Cindy</FirstName>
<LastName>Rubio Gonzalez</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Cindy Rubio Gonzalez</PI_FULL_NAME>
<EmailAddress>crubio@ucdavis.edu</EmailAddress>
<PI_PHON>5307547700</PI_PHON>
<NSF_ID>000678663</NSF_ID>
<StartDate>03/23/2015</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Davis</Name>
<CityName>Davis</CityName>
<ZipCode>956186134</ZipCode>
<PhoneNumber>5307547700</PhoneNumber>
<StreetAddress>OR/Sponsored Programs</StreetAddress>
<StreetAddress2><![CDATA[1850 Research Park Dr., Ste 300]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>047120084</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, DAVIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Davis]]></Name>
<CityName>Davis</CityName>
<StateCode>CA</StateCode>
<ZipCode>956165270</ZipCode>
<StreetAddress><![CDATA[1 Shields Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>8228</Code>
<Text>CISE Resrch Initiatn Initiatve</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2015~175000</FUND_OBLG>
<FUND_OBLG>2016~7500</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software error handling is the process of detecting and responding to the occurrence of errors during the execution of a program. Unfortunately, bugs in software error handlers are some of the most pervasive, dangerous, and difficult to detect bugs. Incorrect error-handling is particularly alarming in systems software (e.g., the operating system) because user applications depend on the reliability of systems software. In this project, we studied error handling and developed novel program analysis techniques to automatically infer specifications that describe how systems software handle errors.</p> <p>The contributions of this project include: (1) a formal definition of error-handling specifications, (2) a static analysis to identify error handling code in large software systems, (3) an specification mining technique to find error-handling specifications, and (4) an algorithm to compute vector embeddings for functions to find "function synonyms" that can be used to infer specifications with high support. In particular, we demonstrated that our approach can be used to find useful error-handling specifications in widely-used software such as Linux. The specifications provided a better understanding of error handling, and led to finding several previously unknown error-handling bugs in Linux. All bugs have been fixed by developers and the fixes are part of the current Linux distribution. In addition to our error-handling specification tool, we conducted empirical studies of error handling in user applications, which involved the development of a tool to select code changes relevant to error handling. The techniques and results have been published in top venues in Software Engineering, and our tools and data are publicly available.</p><br> <p>            Last Modified: 01/10/2019<br>      Modified by: Cindy&nbsp;Rubio Gonzalez</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software error handling is the process of detecting and responding to the occurrence of errors during the execution of a program. Unfortunately, bugs in software error handlers are some of the most pervasive, dangerous, and difficult to detect bugs. Incorrect error-handling is particularly alarming in systems software (e.g., the operating system) because user applications depend on the reliability of systems software. In this project, we studied error handling and developed novel program analysis techniques to automatically infer specifications that describe how systems software handle errors.  The contributions of this project include: (1) a formal definition of error-handling specifications, (2) a static analysis to identify error handling code in large software systems, (3) an specification mining technique to find error-handling specifications, and (4) an algorithm to compute vector embeddings for functions to find "function synonyms" that can be used to infer specifications with high support. In particular, we demonstrated that our approach can be used to find useful error-handling specifications in widely-used software such as Linux. The specifications provided a better understanding of error handling, and led to finding several previously unknown error-handling bugs in Linux. All bugs have been fixed by developers and the fixes are part of the current Linux distribution. In addition to our error-handling specification tool, we conducted empirical studies of error handling in user applications, which involved the development of a tool to select code changes relevant to error handling. The techniques and results have been published in top venues in Software Engineering, and our tools and data are publicly available.       Last Modified: 01/10/2019       Submitted by: Cindy Rubio Gonzalez]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
