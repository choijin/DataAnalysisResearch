<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: SMALL: Automatically Supporting Developer Learning in Context</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>02/28/2019</AwardExpirationDate>
<AwardTotalIntnAmount>515726.00</AwardTotalIntnAmount>
<AwardAmount>515726</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software developers striving to create and evolve large software systems find themselves frequently in need of learning. They join a new project where they need to learn a new software system and the development team?s culture.  They frequently need to learn new Application Programming Interfaces (APIs), or newer components of existing APIs. The project addresses the need for useful automated support for helping software developers learn APIs and how to use them effectively solve the task at hand. The envisioned system  performs the underlying automated analysis on a server which takes information from the user?s context and current maintenance or evolution task, as allowed by the user, and sends back learning nuggets as they perform their tasks.  With more effective ways to learn, software development could be more efficient and provide more reliable, higher quality software, which has a broad impact on society which depends increasingly on software.&lt;br/&gt;&lt;br/&gt;This project will contribute to the state of the art by tackling three major challenges to bring this kind of automated support for developer learning into practical use. First, we will develop analysis techniques to bridge the gap between single statement and whole method level analyses for automatic extraction, description, and generalization of information from source code at the multi-statement, algorithm-step level. Second, we will develop tools that automatically identify, extract and categorize different kinds of information such as facts, (positive and negative) opinions/advice, and usage information in mixed text-code artifacts such as emails, question-answer forums, and other developer communications. Third, we will develop tools to automatically identify the relevant context of the developer and identify the relevant learning nuggets for that context. The novel approach to analyses, the resulting tools, data sets, and experimental infrastructure developed within the project will be released, which will enable other researchers and practitioners to build on the project?s results and will ultimately advance knowledge and understanding within the field of Software Engineering.</AbstractNarration>
<MinAmdLetterDate>06/13/2014</MinAmdLetterDate>
<MaxAmdLetterDate>06/13/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1422184</AwardID>
<Investigator>
<FirstName>Lori</FirstName>
<LastName>Pollock</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Lori L Pollock</PI_FULL_NAME>
<EmailAddress>pollock@udel.edu</EmailAddress>
<PI_PHON>3028311953</PI_PHON>
<NSF_ID>000212323</NSF_ID>
<StartDate>06/13/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Vijay</FirstName>
<LastName>Shanker</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Vijay K Shanker</PI_FULL_NAME>
<EmailAddress>vijay@cis.udel.edu</EmailAddress>
<PI_PHON>3028311952</PI_PHON>
<NSF_ID>000206444</NSF_ID>
<StartDate>06/13/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Delaware</Name>
<CityName>Newark</CityName>
<ZipCode>197160099</ZipCode>
<PhoneNumber>3028312136</PhoneNumber>
<StreetAddress>210 Hullihen Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<StateCode>DE</StateCode>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>DE00</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>059007500</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF DELAWARE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>059007500</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Delaware]]></Name>
<CityName/>
<StateCode>DE</StateCode>
<ZipCode>197162553</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>DE00</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~515726</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p id="docs-internal-guid-c595376c-7fff-aa56-2569-e95a875fa8e6" style="line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 12pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">This project made significant strides towards automated assistance to ease the learning process for software developers. &nbsp;Throughout development, maintenance and evolution of a software system, software developers are faced with continual learning. They may be onboarding to a new software project and team, learning how to use a new API or new part of an API, determining how to implement a specific feature, identifying which language feature or coding design pattern is most appropriate for a particular task, or learning which tool to use and how to use that tool to work more efficiently. Both novice and experienced developers find themselves in these situations as applications, libraries, languages, tools and techniques evolve.</span></p> <p>&nbsp;</p> <p style="line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 12pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Our first contributions involve developing automated analyses of software to</span></p> <p style="line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 12pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">automatically extract, describe, and generalize information from a program at the &nbsp;granularity  level between single words and whole methods, that is, at the multi-statement, algorithm-step level. &nbsp;We designed highly accurate techniques to automatically identify high level actions or algorithmic steps that are coded as loop structures, which comprise a &nbsp;major part of programs. We also leveraged both programming language structure and textual clues in programmer?s naming of code elements to identify high level actions that occur as sequences of non-looping statements and automatically generate textual descriptions of the high level action for documentation to help with learning and reading code.</span></p> <p>&nbsp;</p> <p style="line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 12pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Other research as part of this project resulted in contributions towards gathering learning nuggets of knowledge for software developers by automatically identifying, extracting and distinguishing between different kinds of information such as facts, (positive and negative) opinions/advice, and usage information in mixed text-code artifacts such as emails, question-answer forums, and other developer communications where developers share their knowledge and advice. &nbsp;We conducted a study into the kinds of information that is embedded in different software-related documents beyond the software itself, that could potentially be extracted as learning nuggets. Code snippets (both good and bad examples) with good textual descriptions providing various information about the code occurs in many software artifacts.   Another study we performed showed that Q&amp;A chats can provide much the same information as can be found in Q&amp;A posts on Stack Overflow. However, Q&amp;A chats generally provide less of this information (e.g., API mentions) than do Q&amp;A posts. We developed a sentiment analysis-based technique to extract code examples that exhibit poor qualities from developer communications to provide bad examples along with good examples for learning. &nbsp;While it is challenging to identify negative code examples automatically from within source code, we leverage a key insight that the natural language in questions that include code examples posted on forums can provide adequate clues.  To help with gathering learning nuggets from developer question and answer forums, we developed a technique to automatically identify the developer?s goals and symptoms from analysis of the textual descriptions in the questions. </span></p><br> <p>            Last Modified: 04/26/2019<br>      Modified by: Lori&nbsp;L&nbsp;Pollock</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[This project made significant strides towards automated assistance to ease the learning process for software developers.  Throughout development, maintenance and evolution of a software system, software developers are faced with continual learning. They may be onboarding to a new software project and team, learning how to use a new API or new part of an API, determining how to implement a specific feature, identifying which language feature or coding design pattern is most appropriate for a particular task, or learning which tool to use and how to use that tool to work more efficiently. Both novice and experienced developers find themselves in these situations as applications, libraries, languages, tools and techniques evolve.    Our first contributions involve developing automated analyses of software to automatically extract, describe, and generalize information from a program at the  granularity  level between single words and whole methods, that is, at the multi-statement, algorithm-step level.  We designed highly accurate techniques to automatically identify high level actions or algorithmic steps that are coded as loop structures, which comprise a  major part of programs. We also leveraged both programming language structure and textual clues in programmer?s naming of code elements to identify high level actions that occur as sequences of non-looping statements and automatically generate textual descriptions of the high level action for documentation to help with learning and reading code.    Other research as part of this project resulted in contributions towards gathering learning nuggets of knowledge for software developers by automatically identifying, extracting and distinguishing between different kinds of information such as facts, (positive and negative) opinions/advice, and usage information in mixed text-code artifacts such as emails, question-answer forums, and other developer communications where developers share their knowledge and advice.  We conducted a study into the kinds of information that is embedded in different software-related documents beyond the software itself, that could potentially be extracted as learning nuggets. Code snippets (both good and bad examples) with good textual descriptions providing various information about the code occurs in many software artifacts.   Another study we performed showed that Q&amp;A chats can provide much the same information as can be found in Q&amp;A posts on Stack Overflow. However, Q&amp;A chats generally provide less of this information (e.g., API mentions) than do Q&amp;A posts. We developed a sentiment analysis-based technique to extract code examples that exhibit poor qualities from developer communications to provide bad examples along with good examples for learning.  While it is challenging to identify negative code examples automatically from within source code, we leverage a key insight that the natural language in questions that include code examples posted on forums can provide adequate clues.  To help with gathering learning nuggets from developer question and answer forums, we developed a technique to automatically identify the developer?s goals and symptoms from analysis of the textual descriptions in the questions.        Last Modified: 04/26/2019       Submitted by: Lori L Pollock]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
