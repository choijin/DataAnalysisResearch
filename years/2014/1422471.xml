<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Refinement Types For Verified Web Frameworks and Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>516000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Small: Refinement Types For Verified Web Frameworks and Applications&lt;br/&gt;&lt;br/&gt;Web applications play a crucial role in every aspect of our lives, including banking, commerce, education and healthcare and travel. Despite their importance and ubiquity, they remain notoriously hard to design, develop and deploy as they span several tiers and languages: an HTML/JavaScript client that runs on users' browsers, a central server that implements the application's logic in the "cloud" and a database that stores persistent user data. The goal of this research is to build upon recent advances in SMT-based software verification to develop reliable and secure web frameworks. The intellectual merits of this research are new techniques for specifying and verifying multi-lingual systems spanning databases, scripting languages and service protocols, which are essential ingredients of large software systems. Thus, the project's broader significance and importance is that it will lower the cost of constructing robust web applications, with strong guarantees about the protection of sensitive data about the users' health, finances and other personal information.&lt;br/&gt;&lt;br/&gt;To mitigate the impedance mismatch across tiers, developers use web frameworks which have simplified the construction of web applications. However, reliability and security concerns still cut across multiple tiers and languages, making them hard to achieve. This research will use refinement types to specify and verify properties for frameworks and end-to-end safety and security properties for applications. In particular, it will build on the refinement type system of LiquidHaskell, developed in preliminary research, to verify existing frameworks like Haskell's popular SNAP framework, and use it to develop a suite of applications with strong guarantees, thereby showing how the idea can be widely adopted in mainstream frameworks and languages.</AbstractNarration>
<MinAmdLetterDate>07/16/2014</MinAmdLetterDate>
<MaxAmdLetterDate>04/20/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1422471</AwardID>
<Investigator>
<FirstName>Ranjit</FirstName>
<LastName>Jhala</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ranjit Jhala</PI_FULL_NAME>
<EmailAddress>jhala@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585341420</PI_PHON>
<NSF_ID>000486287</NSF_ID>
<StartDate>07/16/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930404</ZipCode>
<StreetAddress><![CDATA[9500 Gilman Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~500000</FUND_OBLG>
<FUND_OBLG>2018~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project supported the development of the LiquidHaskell (LH) system,a language-integrated verifier for the Haskell programming language.<br />The system allows software engineers to enforce critical correctnessrequirements of their code by closely intertwining types and logicalassertions. As a result, LH empowers developers to specify, criticalproperties including:</p> <ol> <li>The absence of run-time exceptions,&nbsp; &nbsp;</li> <li>Termination,&nbsp; &nbsp;</li> <li>Memory safety,&nbsp; &nbsp;&nbsp;</li> <li>Data structure invariants,&nbsp; &nbsp;</li> <li>Information flow control, and&nbsp; &nbsp;&nbsp;</li> <li>Functional correctness</li> </ol> <p>and then to verify, at compile-time, that these requirements hold, no matter how the code is used at run time.</p> <p>In the limit, developers can write proofs of correctness of arbitrary properties of their code. Unlike specialized proof assistants, LH proofs are simply programs in Haskell, allowing the programmer to take advantage of a mature compiler and an ecosystem of libraries to produce efficient, verified code.<br /><br />This project directly supported the development of all the key ideas thatare the foundation of the LH system, including the development of:<br /><br />[1] Sound refinement typing for non-strict languages like Haskell;<br />[2] Case studies demonstrating how to use LH on real-world libraries;&nbsp;<br />[3] Bounded quantification as a way to dramatically extend the expressiveness&nbsp; &nbsp; of refinements while preserving decidable checking;<br />[3] Reflection as means of verifying properties of arbitrary user-defined&nbsp; &nbsp; functions in a complete fashion; and<br />[4] The Binah and LWeb frameworks for building secure web applications with&nbsp; &nbsp; formal guarantees about the what data is visible to each user.<br /><br />The tool is developed open-source on Github, and already has a small community of users, with more than 40 users. The project is downloade dabout 50 times a week from github and has been downloaded more than 8000 times from Hackage, the central repository for Haskell libraries.<br /><br />Several academic groups, including researchers at Carnegie Mellon University, Drexel University, the University of Maryland, and Yale University have used or based their research on LH.<br /><br />LH has also started to see some industrial adoption, for example,it has been used to verify the memory (pointer) safety of low-levelnetworking code, and of binary serialization libraries.<br /><br />[1] N. Vazou, E. L. Seidel, R. Jhala, D. Vytiniotis, and S. L. Peyton-Jones.&nbsp;&nbsp; &nbsp; Refinement Types for Haskell.&nbsp;&nbsp; &nbsp; In ICFP, 2014.&nbsp;&nbsp;<br /><br />[2] N. Vazou, E. L. Seidel, and R. Jhala.&nbsp; &nbsp; Liquidhaskell: Experience with refinement types in the real world.&nbsp; &nbsp; In ACM SIGPLAN symposium on Haskell, 2014.<br /><br />[3] N. Vazou, A. Bakst, and R. Jhala.&nbsp; &nbsp; Bounded refinement types.&nbsp;&nbsp; &nbsp; In ICFP, 2015.<br /><br />[4] N. Vazou, A. Tondwalkar, V. Choudhury, R. G. Scott, R. R. Newton, P. Wadler, and R. Jhala.&nbsp; &nbsp; Refinement reflection: Complete verification with SMT.&nbsp; &nbsp; In POPL, 2018.<br /><br />[5] J. Parker, N. Vazou, M.W. Hicks.&nbsp; &nbsp; Information flow security for multi-tier web applications.&nbsp; &nbsp; In POPL, 2019.</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/13/2019<br>      Modified by: Ranjit&nbsp;Jhala</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project supported the development of the LiquidHaskell (LH) system,a language-integrated verifier for the Haskell programming language. The system allows software engineers to enforce critical correctnessrequirements of their code by closely intertwining types and logicalassertions. As a result, LH empowers developers to specify, criticalproperties including:  The absence of run-time exceptions,    Termination,    Memory safety,     Data structure invariants,    Information flow control, and     Functional correctness   and then to verify, at compile-time, that these requirements hold, no matter how the code is used at run time.  In the limit, developers can write proofs of correctness of arbitrary properties of their code. Unlike specialized proof assistants, LH proofs are simply programs in Haskell, allowing the programmer to take advantage of a mature compiler and an ecosystem of libraries to produce efficient, verified code.  This project directly supported the development of all the key ideas thatare the foundation of the LH system, including the development of:  [1] Sound refinement typing for non-strict languages like Haskell; [2] Case studies demonstrating how to use LH on real-world libraries;  [3] Bounded quantification as a way to dramatically extend the expressiveness    of refinements while preserving decidable checking; [3] Reflection as means of verifying properties of arbitrary user-defined    functions in a complete fashion; and [4] The Binah and LWeb frameworks for building secure web applications with    formal guarantees about the what data is visible to each user.  The tool is developed open-source on Github, and already has a small community of users, with more than 40 users. The project is downloade dabout 50 times a week from github and has been downloaded more than 8000 times from Hackage, the central repository for Haskell libraries.  Several academic groups, including researchers at Carnegie Mellon University, Drexel University, the University of Maryland, and Yale University have used or based their research on LH.  LH has also started to see some industrial adoption, for example,it has been used to verify the memory (pointer) safety of low-levelnetworking code, and of binary serialization libraries.  [1] N. Vazou, E. L. Seidel, R. Jhala, D. Vytiniotis, and S. L. Peyton-Jones.     Refinement Types for Haskell.     In ICFP, 2014.    [2] N. Vazou, E. L. Seidel, and R. Jhala.    Liquidhaskell: Experience with refinement types in the real world.    In ACM SIGPLAN symposium on Haskell, 2014.  [3] N. Vazou, A. Bakst, and R. Jhala.    Bounded refinement types.     In ICFP, 2015.  [4] N. Vazou, A. Tondwalkar, V. Choudhury, R. G. Scott, R. R. Newton, P. Wadler, and R. Jhala.    Refinement reflection: Complete verification with SMT.    In POPL, 2018.  [5] J. Parker, N. Vazou, M.W. Hicks.    Information flow security for multi-tier web applications.    In POPL, 2019.          Last Modified: 01/13/2019       Submitted by: Ranjit Jhala]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
