<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Medium: Collaborative Research: On the Power of Mathematical Programming in Combinatorial Optimization</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>366404.00</AwardTotalIntnAmount>
<AwardAmount>366404</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Mathematical programming is a powerful tool for attacking combinatorial problems.  One transforms a discrete task into a related continuous one by casting it as optimization over a convex body.  Linear and semi-definite programming (LP and SDP) form important special cases and are central tools in the theory and practice of combinatorial optimization. These approaches have achieved spectacular success in computing approximately optimal solutions for problems where finding exact solutions is computationally intractable.&lt;br/&gt;&lt;br/&gt;While there are very strong bounds known on the efficacy of particular families of relaxations, it remains possible that adding a small number of variables or constraints could lead to drastically improved solutions.  We propose the development of a theory to unconditionally capture the power of LPs and SDPs without any complexity-theoretic assumptions.  Our approach has the potential to show something remarkable:  For many well-known problems, the basic LP or SDP is optimal among a very large class of algorithms.  More concretely, we suggest a method that could rigorously characterize the power of polynomial-size LPs and SDPs for a variety of combinatorial optimization tasks.   This involves deep issues at the intersection of many areas of mathematics and computer science, with the ultimate goal of significantly extending our understanding of efficient computation.&lt;br/&gt;&lt;br/&gt;Mathematical programming is of major importance to many fields---this is especially true for computer science and operations research.  These methods have also seen dramatically increasing use in the analysis of "big data" from across the scientific spectrum.  From a different perspective, LPs and SDPs can be thought of as rich proof systems, and characterizing their power is a basic problem in the theory of proof complexity. Thus the outcomes of the proposed research are of interest to a broad community of scientists, mathematicians, and practitioners.</AbstractNarration>
<MinAmdLetterDate>06/20/2014</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1408643</AwardID>
<Investigator>
<FirstName>Prasad</FirstName>
<LastName>Raghavendra</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Prasad Raghavendra</PI_FULL_NAME>
<EmailAddress>nrprasad@gmail.com</EmailAddress>
<PI_PHON>4043853353</PI_PHON>
<NSF_ID>000567499</NSF_ID>
<StartDate>06/20/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Berkeley</Name>
<CityName>BERKELEY</CityName>
<ZipCode>947101749</ZipCode>
<PhoneNumber>5106433891</PhoneNumber>
<StreetAddress>Sponsored Projects Office</StreetAddress>
<StreetAddress2><![CDATA[1608 Fourth Street, Suite 220]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>124726725</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Berkeley]]></Name>
<CityName>Berkeley</CityName>
<StateCode>CA</StateCode>
<ZipCode>947201776</ZipCode>
<StreetAddress><![CDATA[623 Soda Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7927</Code>
<Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~87341</FUND_OBLG>
<FUND_OBLG>2015~91771</FUND_OBLG>
<FUND_OBLG>2016~91306</FUND_OBLG>
<FUND_OBLG>2017~95986</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Linear and semidefinite programming are one of the strongest tools available to an algorithm designer in the area of combinatorial optimization.&nbsp; Semidefinite programming is the stronger of the two techniques.&nbsp; This project is devoted to understanding which computational problems in combinatorial optimization admit efficiene algorithms via linear and semidefinite programs.</p> <p>Here are the outcomes of the project:</p> <p>1)&nbsp; Prior to this work, there were no techniques to understand the limits of general semidefinite programs.&nbsp; Specifically, while some computational problems (known as NP-hard problems) are widely believed to computationally intractable for all algorithmic techniques, there was no way to formally rule out semidefinite programming based algorithms for these problems.&nbsp; The PIs developed the first technique to prove the limits of general semidefinite programs, and used it to show for the first time that indeed for some of these computational problems, semidefinite programming cannot yield efficient algorithms.</p> <p>2) On the positive note, the techniques developed here identify the best possible semidefinite program for a broad class of combinatorial optimization problems.&nbsp; Specifically, there are numerous (infinitely many) different semidefinite programs that one could try out for a given computational problem, and one of the tasks of an algorithm designer is to pick the correct semidefinite program.&nbsp; Given the computational time one is willing to invest, our approach identifies a single semidefinite program that yields the optimal results with that runtime, thus making algorithm design much simpler.</p> <p>The results of this project have had impact on the fields of combinatorial optimization and computational complexity.&nbsp; The techniques developed are still the only known approaches in some cases, and are likely to applied to various different problems in the future.</p> <p>The PI has given survey talks on the topic at various venues, and the material developed in this project has already been used in graduate courses on computational complexity.&nbsp;&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 04/10/2019<br>      Modified by: Prasad&nbsp;Raghavendra</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Linear and semidefinite programming are one of the strongest tools available to an algorithm designer in the area of combinatorial optimization.  Semidefinite programming is the stronger of the two techniques.  This project is devoted to understanding which computational problems in combinatorial optimization admit efficiene algorithms via linear and semidefinite programs.  Here are the outcomes of the project:  1)  Prior to this work, there were no techniques to understand the limits of general semidefinite programs.  Specifically, while some computational problems (known as NP-hard problems) are widely believed to computationally intractable for all algorithmic techniques, there was no way to formally rule out semidefinite programming based algorithms for these problems.  The PIs developed the first technique to prove the limits of general semidefinite programs, and used it to show for the first time that indeed for some of these computational problems, semidefinite programming cannot yield efficient algorithms.  2) On the positive note, the techniques developed here identify the best possible semidefinite program for a broad class of combinatorial optimization problems.  Specifically, there are numerous (infinitely many) different semidefinite programs that one could try out for a given computational problem, and one of the tasks of an algorithm designer is to pick the correct semidefinite program.  Given the computational time one is willing to invest, our approach identifies a single semidefinite program that yields the optimal results with that runtime, thus making algorithm design much simpler.  The results of this project have had impact on the fields of combinatorial optimization and computational complexity.  The techniques developed are still the only known approaches in some cases, and are likely to applied to various different problems in the future.  The PI has given survey talks on the topic at various venues, and the material developed in this project has already been used in graduate courses on computational complexity.               Last Modified: 04/10/2019       Submitted by: Prasad Raghavendra]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
