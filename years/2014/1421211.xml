<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Generation of Scientific Software Libraries</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/15/2014</AwardEffectiveDate>
<AwardExpirationDate>06/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>515517.00</AwardTotalIntnAmount>
<AwardAmount>515517</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Making experts more productive is critically important to software development.  This is particularly so in Scientific Computing (SC) where experts are rare and whose task is to develop software libraries on which SC research in academia, government labs, and industry depends. This project strives to create programming practices and tools that will revolutionize library development in SC.  By encoding expert knowledge about the science, mathematics, and software of a domain, a transformative approach called Design by Transformation (DxT) can automatically generate software that experts would have to write manually. DxT-generation is faster, cheaper, and produces better-trusted code.  In dense linear algebra libraries, DxT has exposed errors in manually-written code and found faster algorithms than those produced by experts. &lt;br/&gt;&lt;br/&gt;This research applies DxT to three new software domains: fault-tolerant dense linear algebra, graph analysis, and tensor computation.  While improving the performance of their software libraries will itself have an impact in national labs and industry, the lessons learned about automating software development will have broad effects.  SC software is growing more complicated as hardware complexity evolves (e.g., multi-core, many-core, co-processors, and GPUs). Automatic generation will aid experts in being more productive in this increasingly complicated engineering endeavor. It will enable American scientists and engineers to maintain their advantage in scientific library engineering.  Further, there is evidence that the DxT approach to engineering has a pedagogical value in teaching students and new engineers about software.  Encoding new domains will test these benefits.</AbstractNarration>
<MinAmdLetterDate>07/10/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/02/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421211</AwardID>
<Investigator>
<FirstName>Don</FirstName>
<LastName>Batory</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Don S Batory</PI_FULL_NAME>
<EmailAddress>batory@cs.utexas.edu</EmailAddress>
<PI_PHON>0000000055</PI_PHON>
<NSF_ID>000279420</NSF_ID>
<StartDate>07/10/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Robert</FirstName>
<LastName>van de Geijn</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Robert A van de Geijn</PI_FULL_NAME>
<EmailAddress>rvdg@cs.utexas.edu</EmailAddress>
<PI_PHON>5124719720</PI_PHON>
<NSF_ID>000336892</NSF_ID>
<StartDate>07/10/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787121532</ZipCode>
<StreetAddress><![CDATA[101 E. 27th Street, Suite 5.300]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>6892</Code>
<Text>CI REUSE</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~515517</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>1.&nbsp;&nbsp;&nbsp;&nbsp;</strong><strong>Uniform Random Sampling of SPL Configuration Spaces</strong></p> <p>A <strong>feature </strong>is an increment in product functionality. Every&nbsp;<strong>software product line (SPL)</strong>&nbsp;has a "feature model" that defines all legal combinations of features called&nbsp;<strong>configurations</strong>.&nbsp; Commercial SPLs have colossal product spaces; BusyBox (UNIX utilities for embedded Linux) has a space of 10^240 configurations.&nbsp; That's 10^149 greater than the estimated number of photons in the universe (10^91).</p> <p>Why is counting the size of configuration spaces important?&nbsp; Ans:&nbsp;<strong>&nbsp;</strong>Because we can use it to U<strong>niformly Random Sample (URS)</strong> SPL configurations. If C is the configuration space for an SPL and |C| is the size of this space, we can generate a random number j in [1..|C|], where all numbers in this interval are equally likely to be selected.&nbsp; The trick was to create a 1-to-1 mapping with numbers in [1..|C|] and configurations in C.&nbsp; (See papers for details).</p> <p>Why is&nbsp;URS&nbsp;important?&nbsp; URS provides accurate mathematical predictions about properties of a space. Most configuration space-sampling algorithms are NOT uniform.&nbsp; Yes, statistics can indeed be collected from such sampling efforts, but if samples are biased, so too are the results.&nbsp; URS is a scientific way to produce accurate estimates with accurate bounds.</p> <p>How can URS be used? Ex: How does one find a near-optimal configuration in a colossal 10^100 space?&nbsp; Probability tells us that n uniform samples will be (on average) distributed evenly in a space.&nbsp; We have proven that best performing sample out of n will be in the top 1/(n+1) percentile of all configurations on average --&nbsp;<strong>no matter how large the space</strong>.&nbsp; So, if one takes n=99 samples, the best performing sample will be on average in the top 1% of the space.&nbsp;</p> <p>Our extended analysis defines the sample set size for a given accuracy and confidence. For example: we have proven that the best-performing configuration in n=149 samples is in the top 2% of all configurations with 95% confidence --&nbsp;<strong>no matter how large the space.</strong>&nbsp;We believe this work will be basic to the area of sampling SPL configuration spaces.</p> <p><strong>2.&nbsp;&nbsp;&nbsp;&nbsp;</strong><strong>A Pure-Java Replacement for OCL and Model Transformation Languages for MDE</strong></p> <p>A central issue in&nbsp;<strong>Model Driven Engineering (MDE)</strong>&nbsp;is tooling: How can MDE tools be easier to use, maintain, and learn?&nbsp; OCL is a standard language in MDE to express metamodel constraints. Since its inception, OCL has been rightly criticized for being complicated, over-engineered, and difficult to learn. We discovered that an equally-powerful and syntactically similar language based on relational algebra can replace OCL. We call this language Aocl.</p> <p>Aocl is a Java package that is MDE-generated from the class diagram of the target MDE metamodel.&nbsp; Aocl can be used to write OCL-like constraints and model transformations in pure-Java using a standard Java IDE. The theoretical foundation for Aocl is Category Theory. Aocl was central to the next and last topic addressed.</p> <p><strong>3.&nbsp;&nbsp;&nbsp;&nbsp;</strong><strong>Verification of MDE Refactorings</strong></p> <p>An MDE metamodel M is an ordered pair [C,A], where C is a class diagram and A denotes Aocl constraints that must be satisfied by C instances. A metamodel refactoring R transforms one metamodel M0=[C0,A0] to another M1=[C1,A1], R(M0)=M1, by refactoring its class diagram, R(C0)=C1, and its constraints R(A0)=A1.&nbsp; Further, every refactoring R is an&nbsp;<strong>identity</strong>&nbsp;in the universe of metamodels.&nbsp; We say R translates M0 (defined at time 0) to M1 (defined at time 1), and the inverse of R translates M1 at time 1 to M0 at time 0.</p> <p>We used the Coq theorem prover to verify common MDE class diagram refactorings (pullup, move attribute, split-class, etc.)&nbsp; The key to the proofs is model data preservation and that every refactoring has an inverse.</p> <p>Refactoring constraints was harder.&nbsp; Refactorings remove classes, associations, and attributes and add others.&nbsp; Because UML class diagrams are static, dynamically restoring elements removed by refactorings is hard (unlike database systems where reproducing tables that were removed by a refactoring is easy).&nbsp; So instead of refactoring a constraint A0 forward in time to A1, we instead translate an M1 database m1 backwards in time to m0=R^-1(m1) so that A0 can be evaluated on m0.&nbsp; We call this&nbsp;<strong><em>time travel</em></strong>.</p> <p>A history of M0 is a sequence of refactorings R1, R2, &hellip; Rn that maps M0 to Mn, which we have demonstrated time travel.&nbsp; We have also generalized a history to interleave edits (class, association, and attribute insertions and deletions) with refactorings.</p> <p>Why couldn&rsquo;t we transform constraints from a prior time (A0) to a future time (An)?&nbsp; Refactorings remove classes, associations, and attributes and replace them with other classes, associations, and attributes.&nbsp; Unlike relational algebra where tables removed-by-refactoring can be recomputed on-demand, class diagrams are static; they do not admit dynamically created elements.&nbsp; Given this limitation, it was difficult to emulate dynamically created elements.&nbsp; We gave up because found it was too hard.</p> <p>&nbsp;</p><br> <p>            Last Modified: 08/09/2020<br>      Modified by: Don&nbsp;S&nbsp;Batory</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ 1.    Uniform Random Sampling of SPL Configuration Spaces  A feature is an increment in product functionality. Every software product line (SPL) has a "feature model" that defines all legal combinations of features called configurations.  Commercial SPLs have colossal product spaces; BusyBox (UNIX utilities for embedded Linux) has a space of 10^240 configurations.  That's 10^149 greater than the estimated number of photons in the universe (10^91).  Why is counting the size of configuration spaces important?  Ans:  Because we can use it to Uniformly Random Sample (URS) SPL configurations. If C is the configuration space for an SPL and |C| is the size of this space, we can generate a random number j in [1..|C|], where all numbers in this interval are equally likely to be selected.  The trick was to create a 1-to-1 mapping with numbers in [1..|C|] and configurations in C.  (See papers for details).  Why is URS important?  URS provides accurate mathematical predictions about properties of a space. Most configuration space-sampling algorithms are NOT uniform.  Yes, statistics can indeed be collected from such sampling efforts, but if samples are biased, so too are the results.  URS is a scientific way to produce accurate estimates with accurate bounds.  How can URS be used? Ex: How does one find a near-optimal configuration in a colossal 10^100 space?  Probability tells us that n uniform samples will be (on average) distributed evenly in a space.  We have proven that best performing sample out of n will be in the top 1/(n+1) percentile of all configurations on average -- no matter how large the space.  So, if one takes n=99 samples, the best performing sample will be on average in the top 1% of the space.   Our extended analysis defines the sample set size for a given accuracy and confidence. For example: we have proven that the best-performing configuration in n=149 samples is in the top 2% of all configurations with 95% confidence -- no matter how large the space. We believe this work will be basic to the area of sampling SPL configuration spaces.  2.    A Pure-Java Replacement for OCL and Model Transformation Languages for MDE  A central issue in Model Driven Engineering (MDE) is tooling: How can MDE tools be easier to use, maintain, and learn?  OCL is a standard language in MDE to express metamodel constraints. Since its inception, OCL has been rightly criticized for being complicated, over-engineered, and difficult to learn. We discovered that an equally-powerful and syntactically similar language based on relational algebra can replace OCL. We call this language Aocl.  Aocl is a Java package that is MDE-generated from the class diagram of the target MDE metamodel.  Aocl can be used to write OCL-like constraints and model transformations in pure-Java using a standard Java IDE. The theoretical foundation for Aocl is Category Theory. Aocl was central to the next and last topic addressed.  3.    Verification of MDE Refactorings  An MDE metamodel M is an ordered pair [C,A], where C is a class diagram and A denotes Aocl constraints that must be satisfied by C instances. A metamodel refactoring R transforms one metamodel M0=[C0,A0] to another M1=[C1,A1], R(M0)=M1, by refactoring its class diagram, R(C0)=C1, and its constraints R(A0)=A1.  Further, every refactoring R is an identity in the universe of metamodels.  We say R translates M0 (defined at time 0) to M1 (defined at time 1), and the inverse of R translates M1 at time 1 to M0 at time 0.  We used the Coq theorem prover to verify common MDE class diagram refactorings (pullup, move attribute, split-class, etc.)  The key to the proofs is model data preservation and that every refactoring has an inverse.  Refactoring constraints was harder.  Refactorings remove classes, associations, and attributes and add others.  Because UML class diagrams are static, dynamically restoring elements removed by refactorings is hard (unlike database systems where reproducing tables that were removed by a refactoring is easy).  So instead of refactoring a constraint A0 forward in time to A1, we instead translate an M1 database m1 backwards in time to m0=R^-1(m1) so that A0 can be evaluated on m0.  We call this time travel.  A history of M0 is a sequence of refactorings R1, R2, &hellip; Rn that maps M0 to Mn, which we have demonstrated time travel.  We have also generalized a history to interleave edits (class, association, and attribute insertions and deletions) with refactorings.  Why couldn’t we transform constraints from a prior time (A0) to a future time (An)?  Refactorings remove classes, associations, and attributes and replace them with other classes, associations, and attributes.  Unlike relational algebra where tables removed-by-refactoring can be recomputed on-demand, class diagrams are static; they do not admit dynamically created elements.  Given this limitation, it was difficult to emulate dynamically created elements.  We gave up because found it was too hard.          Last Modified: 08/09/2020       Submitted by: Don S Batory]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
