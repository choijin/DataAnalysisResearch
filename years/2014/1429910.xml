<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Automatically Generating Formal Human-Computer Interface Designs From Task Analytic Models</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>149976.00</AwardTotalIntnAmount>
<AwardAmount>149976</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Ephraim Glinert</SignBlockName>
<PO_EMAI>eglinert@nsf.gov</PO_EMAI>
<PO_PHON>7032928930</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The concurrent nature of human-computer interaction (HCI) can result in situations unanticipated by designers.  Usability may not always be properly maintained or human operators may not be able to complete the task goals that a system was designed to support.  This can result in poor adoption of the system, decreased productivity with its use, or unsafe operating conditions.  Mathematical tools and techniques called "formal methods" exist for modeling and providing proof-based evaluations of different elements of HCI including the human-computer interface, the human operator's task analytic behavior, and usability.  Unfortunately, these approaches require the creation of formal models of interface designs, something that is non-standard practice and prone to modeling error.  This project will show that a formal-methods approach can be used to automatically generate formal human-computer interface designs that are guaranteed to adhere to usability properties and to support human operator tasks.  Specifically, a system that uses the L* machine learning algorithm will be created that will generate formal interface designs using task analytic behavior models and formal representations of usability properties.&lt;br/&gt;&lt;br/&gt;The researchers will implement an interface generation system, test its performance with a suite of benchmark examples, and evaluate its ability to generate an interface for a realistic application.  To implement the generator, the researchers will first construct an oracle system capable of accepting or rejecting interface state transition sequences based on analyst-specified task models and usability properties.  This oracle system will be connected to an implementation of the L* algorithm that will progressively learn a formal interface model by observing how generated sequences of interface state transitions are accepted or rejected by the oracle.  Artificial test cases that exploit the different features of the system will be used to generate interface designs, and formal verification will be used to check that the designs exhibit the intended properties.  The system will be used to generate the human-computer interface for programming a patient controlled analgesia pump, a medical device that automatically delivers pain medication to patients intravenously.  The generated interface will then be compared against the formal interface design standard that exists for these devices.&lt;br/&gt;&lt;br/&gt;The automatic generation of human-computer interface designs from task analytic models and usability properties constitutes a novel approach to user-centered design.  By using this method in the creation of interfaces, designs will be guaranteed to always exhibit certain properties.  This will potentially help ensure that designs will be accepted by users, improve the associated system's efficiency, and facilitate safer operation.  The formal representation of user interfaces that result from the implementation of this method will also permit HCI designers to pursue formal analysis and verification of other interface properties, and will facilitate the automated generation of test cases for usability verification and certification purposes.&lt;br/&gt;&lt;br/&gt;Broader Impacts:  The proposed research has the potential to significantly change the way human-computer interfaces are designed.  By guaranteeing that generated interfaces are always usable, this research could improve the usability and safety of user interfaces across many domains.  The performance guarantees of the generated designs could allow development and testing times to be reduced, thus decreasing development and software costs.  This work will also enhance the education and research experience of UIC's diverse engineering student body.  The computational resources acquired for this work will be made available to student for research projects and study results will be incorporated into the curriculum of the PI's graduate and undergraduate courses.  Project results will be presented at conferences by student researchers and published with open access in high quality journals.  A dedicated website will be used to rapidly disseminate results and tools produced during this effort.</AbstractNarration>
<MinAmdLetterDate>01/30/2014</MinAmdLetterDate>
<MaxAmdLetterDate>01/30/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1429910</AwardID>
<Investigator>
<FirstName>Matthew</FirstName>
<LastName>Bolton</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Matthew L Bolton</PI_FULL_NAME>
<EmailAddress>matthewbolton@gmail.com</EmailAddress>
<PI_PHON>4344650666</PI_PHON>
<NSF_ID>000629266</NSF_ID>
<StartDate>01/30/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SUNY at Buffalo</Name>
<CityName>Buffalo</CityName>
<ZipCode>142282567</ZipCode>
<PhoneNumber>7166452634</PhoneNumber>
<StreetAddress>520 Lee Entrance</StreetAddress>
<StreetAddress2><![CDATA[Suite 211]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>26</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY26</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>038633251</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>020657151</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SUNY at Buffalo]]></Name>
<CityName/>
<StateCode>NY</StateCode>
<ZipCode>142602050</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>26</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY26</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7367</Code>
<Text>HCC-Human-Centered Computing</Text>
</ProgramElement>
<ProgramReference>
<Code>7367</Code>
<Text>Cyber-Human Systems</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~149976</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>The concurrent nature of human-computer interaction can result in situations unanticipated by designers. Usability may not always be properly maintained or human operators may not be able to complete the task goals the system was designed to support. This can result in poor adoption of the system, decreased productivity with its use, or unsafe operating conditions. Mathematical tools and techniques called formal methods exist for modeling and providing proof-based evaluations of different elements of HAI including the human interface, the human operator's task analytic behavior, and usability. Unfortunately, these approaches require the creation of formal models of interface designs, something that is non-standard practice and prone to modeling error. This work strove to show that a formal methods approach could be used to automatically generate formal human-automation interface designs guaranteed to always adhere to usability properties and support human operator tasks. Specifically, we created a system that uses the L* machine learning algorithm that generates formal interface designs using task analytic behavior models and formal representations of usability properties as input.</span></p> <p><span>&nbsp;</span>To implement the generation process, we used an existing implementation of an L* mealy machine learning process. This was coupled with a custom-created &ldquo;oracle&rdquo; that used model checking to examine actions sequences from the learning process and report back the corresponding outputs the machine should produce, according to the task model. &nbsp;The formal model used by the oracle was constructed so that it would only produce outputs for valid action sequences. Further, an observer was used to examine whether action sequences were conforming with usability properties related to action reversibility, undoability, and feedback. Collectively, these features allowed the generation method to produce interfaces that would always support the human operator task model, and do so while supporting the included usability considerations.</p> <p><span>&nbsp;</span>Test cases that exploited the different features of the system were used to generate interface designs. These included a light switch, a soda machine, a coffee machine, and a digital clock. &nbsp;In all cases, formal verification was used on the generated interfaces to ensure that they met the usability and task-support requirements. Finally, the learning process was used to generate the human-computer interface for programming a patient controlled analgesia pump, a medical device that automatically delivers pain medication to patients intravenously. The generated interface was then compared against the formal interface design standard that exists for such devices. This showed that the generated interface matched the design standard, further validating the reliability of the generation method.</p> <p>&nbsp;</p><br> <p>            Last Modified: 10/25/2016<br>      Modified by: Matthew&nbsp;L&nbsp;Bolton</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The concurrent nature of human-computer interaction can result in situations unanticipated by designers. Usability may not always be properly maintained or human operators may not be able to complete the task goals the system was designed to support. This can result in poor adoption of the system, decreased productivity with its use, or unsafe operating conditions. Mathematical tools and techniques called formal methods exist for modeling and providing proof-based evaluations of different elements of HAI including the human interface, the human operator's task analytic behavior, and usability. Unfortunately, these approaches require the creation of formal models of interface designs, something that is non-standard practice and prone to modeling error. This work strove to show that a formal methods approach could be used to automatically generate formal human-automation interface designs guaranteed to always adhere to usability properties and support human operator tasks. Specifically, we created a system that uses the L* machine learning algorithm that generates formal interface designs using task analytic behavior models and formal representations of usability properties as input.   To implement the generation process, we used an existing implementation of an L* mealy machine learning process. This was coupled with a custom-created "oracle" that used model checking to examine actions sequences from the learning process and report back the corresponding outputs the machine should produce, according to the task model.  The formal model used by the oracle was constructed so that it would only produce outputs for valid action sequences. Further, an observer was used to examine whether action sequences were conforming with usability properties related to action reversibility, undoability, and feedback. Collectively, these features allowed the generation method to produce interfaces that would always support the human operator task model, and do so while supporting the included usability considerations.   Test cases that exploited the different features of the system were used to generate interface designs. These included a light switch, a soda machine, a coffee machine, and a digital clock.  In all cases, formal verification was used on the generated interfaces to ensure that they met the usability and task-support requirements. Finally, the learning process was used to generate the human-computer interface for programming a patient controlled analgesia pump, a medical device that automatically delivers pain medication to patients intravenously. The generated interface was then compared against the formal interface design standard that exists for such devices. This showed that the generated interface matched the design standard, further validating the reliability of the generation method.          Last Modified: 10/25/2016       Submitted by: Matthew L Bolton]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
