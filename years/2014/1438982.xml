<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>XPS: FULL: FP: Collaborative Research:  Model-based, Event Driven Scalable Programming for the Mobile Cloud</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>666665.00</AwardTotalIntnAmount>
<AwardAmount>682665</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: XPS: FULL: FP: Collaborative Research: Model-based, Event Driven Scalable Programming for the Mobile Cloud&lt;br/&gt;&lt;br/&gt;Applications running on mobile devices backed by cloud servers and storage (mobile cloud apps) are an important paradigm that is not well supported by current programming technology.  Although cloud computing technology makes massive computational resources readily available, current frameworks for developing applications provide no simple and flexible way to map user-level application code to these resources.  The intellectual merits of this project are to develop a new methodology for building mobile cloud applications that can leverage cloud resources in a scalable way while dramatically simplifying the development effort.   The project's broader significance and importance are  that it will provide a method for software development teams to build and deploy distributed mobile applications that exploit massive concurrency and data storage with less effort than is required to build simple web applications today.&lt;br/&gt; &lt;br/&gt;Applications built following the proposed methodology have two distinct levels: a user level specifying the semantics of user interaction, and an architecture level specifying the allocation of computational resources.  At each level, behavior can be expressed in a simple but powerful language thus providing modularity.  The research project involves: (a) developing these languages; (b) devising automatic semantics-preserving translation from the user to the architecture level that allows the developer to adjust the application semantics and tune performance independently; (c) building a toolset that enables a range of analyses (including new forms of testing, model checking, and static analysis) that are less costly and more effective than traditional testing.</AbstractNarration>
<MinAmdLetterDate>07/18/2014</MinAmdLetterDate>
<MaxAmdLetterDate>06/25/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1438982</AwardID>
<Investigator>
<FirstName>Gul</FirstName>
<LastName>Agha</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gul A Agha</PI_FULL_NAME>
<EmailAddress>agha@cs.uiuc.edu</EmailAddress>
<PI_PHON>2172443087</PI_PHON>
<NSF_ID>000461849</NSF_ID>
<StartDate>07/18/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Darko</FirstName>
<LastName>Marinov</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Darko Marinov</PI_FULL_NAME>
<EmailAddress>marinov@illinois.edu</EmailAddress>
<PI_PHON>2172656117</PI_PHON>
<NSF_ID>000095315</NSF_ID>
<StartDate>07/18/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8283</Code>
<Text>Exploiting Parallel&amp;Scalabilty</Text>
</ProgramElement>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~666665</FUND_OBLG>
<FUND_OBLG>2015~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Distributed software is common in the real-world but remains error-prone.&nbsp; Even when the underlying logic is inherently sequential and simple, addressing distributed aspects results in complex cross-cutting code that undermines such simplicity.&nbsp; The project developed methods and tools to make distributed programming more robust. One approach was to provide a clean separation of concerns and retains the simplicity of sequential computation, using it as a basis onto which distributed aspects are added without corrupting the essential sequential structure, while offloading much of the complexity of implementing distributed concerns to the compiler. The approach was demonstrated on web applications.&nbsp;</p> <p>New methods for ensuring the correctness of distributed programs developed include methods for specifying and inferring the concurrency structure of distributed programs, as well as for testing programs.&nbsp;&nbsp; One area explored was to find erroneous assumptions in Java code by checking client code against models of library methods, which encode all behaviors allowed by the specifications. This was developed into a tool and demonstrated by applying to 46 tests.&nbsp; The results provide new insights into the complexity of exploring the behaviors of code that uses underdetermined APIs and the structure of state spaces that arise in the exploration.&nbsp; It also provides a basis for future work on better detecting faults in tests that invoke underdetermined APIs as well as developing tool support for writing and maintaining more robust test suites.&nbsp;&nbsp; The project further developed an approach to make regression testing&mdash;the process of testing programs that continuously updated&mdash;more efficient.&nbsp;</p> <p>A key problem in testing distributed programs is that there are too many potential schedules (orders in which concurrent activity may take places).&nbsp; The project developed methods which are effective in inferring if there are feasible schedules that could lead to problematic executions. &nbsp;A tool was developed for a popular programming framework (actors) used for distributed programming in industry (AKKA).&nbsp; Our evaluation showed that the tool achieved a relatively high target coverage (78% on 1,000 potentially problematic executions or targets) and detected previously unreported bugs.</p> <p>The project developed a dynamic inference tool to determine the intended concurrency structure of a distributed program.&nbsp; Such a structure can be expressed as pluggable types, checked and extended statically (without execution), and used as basis of transforming concurrent programs so that they are suitable for distributed execution (e.g. on the cloud and on mobile devices).&nbsp; The project also developed methods for inferring the evolution of the interface of a large class of programs, as different actors change state and are unable to perform certain functions at different times.&nbsp; Such evolution affects their interaction with other actors.&nbsp; By ensuring that only certain invocations are made in a particular order, we can enforce interaction protocols which avoid potentially problematic behaviors. &nbsp;&nbsp;Session type systems enable inference and enforcement of message exchange patterns for distributed programs. Essentially, session types can capture the evolution of interfaces of different actors in a system, including cross-program causal message passing dependencies.&nbsp; The project developed methods for specifying and inferring mutiparty session types, both to ensure safety and, for an important class of programs, to guarantee that the system makes progress.</p> <p>Many safety critical applications in the real-world, such as IoT devices, medical devices, industrial process controllers, and sensor networks, involve distributed systems.&nbsp; The results of project will further research in the field and suggests a number of ways to improve the safety and reliability of such distributed software in the future. &nbsp;</p><br> <p>            Last Modified: 11/26/2018<br>      Modified by: Gul&nbsp;A&nbsp;Agha</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Distributed software is common in the real-world but remains error-prone.  Even when the underlying logic is inherently sequential and simple, addressing distributed aspects results in complex cross-cutting code that undermines such simplicity.  The project developed methods and tools to make distributed programming more robust. One approach was to provide a clean separation of concerns and retains the simplicity of sequential computation, using it as a basis onto which distributed aspects are added without corrupting the essential sequential structure, while offloading much of the complexity of implementing distributed concerns to the compiler. The approach was demonstrated on web applications.   New methods for ensuring the correctness of distributed programs developed include methods for specifying and inferring the concurrency structure of distributed programs, as well as for testing programs.   One area explored was to find erroneous assumptions in Java code by checking client code against models of library methods, which encode all behaviors allowed by the specifications. This was developed into a tool and demonstrated by applying to 46 tests.  The results provide new insights into the complexity of exploring the behaviors of code that uses underdetermined APIs and the structure of state spaces that arise in the exploration.  It also provides a basis for future work on better detecting faults in tests that invoke underdetermined APIs as well as developing tool support for writing and maintaining more robust test suites.   The project further developed an approach to make regression testing&mdash;the process of testing programs that continuously updated&mdash;more efficient.   A key problem in testing distributed programs is that there are too many potential schedules (orders in which concurrent activity may take places).  The project developed methods which are effective in inferring if there are feasible schedules that could lead to problematic executions.  A tool was developed for a popular programming framework (actors) used for distributed programming in industry (AKKA).  Our evaluation showed that the tool achieved a relatively high target coverage (78% on 1,000 potentially problematic executions or targets) and detected previously unreported bugs.  The project developed a dynamic inference tool to determine the intended concurrency structure of a distributed program.  Such a structure can be expressed as pluggable types, checked and extended statically (without execution), and used as basis of transforming concurrent programs so that they are suitable for distributed execution (e.g. on the cloud and on mobile devices).  The project also developed methods for inferring the evolution of the interface of a large class of programs, as different actors change state and are unable to perform certain functions at different times.  Such evolution affects their interaction with other actors.  By ensuring that only certain invocations are made in a particular order, we can enforce interaction protocols which avoid potentially problematic behaviors.   Session type systems enable inference and enforcement of message exchange patterns for distributed programs. Essentially, session types can capture the evolution of interfaces of different actors in a system, including cross-program causal message passing dependencies.  The project developed methods for specifying and inferring mutiparty session types, both to ensure safety and, for an important class of programs, to guarantee that the system makes progress.  Many safety critical applications in the real-world, such as IoT devices, medical devices, industrial process controllers, and sensor networks, involve distributed systems.  The results of project will further research in the field and suggests a number of ways to improve the safety and reliability of such distributed software in the future.         Last Modified: 11/26/2018       Submitted by: Gul A Agha]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
