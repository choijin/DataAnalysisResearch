<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Small: Practical Assured Big Data Analysis in the Cloud</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>449999.00</AwardTotalIntnAmount>
<AwardAmount>449999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Shannon Beck</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The use of "cloud technologies" presents a promising avenue for the requirements of big data analysis.  Security concerns however represent a major impediment to the further adoption of clouds: through the sharing of  cloud resources, an attack succeeding on one node can tamper with many applications sharing that node. &lt;br/&gt; &lt;br/&gt;This project explores the combination of two readily-available, practical mechanisms to holistically achieve assured cloud-based big data processing: (1) Byzantine fault tolerant replication  and (2) partially homomorphic encryption. The former consists in replicating computational entities to achieve  availability, and comparing their produced results to enforce integrity of results as well as isolation of suspicious components.  The latter suggests leveraging the innate ability of existing "cryptosystems" to support certain specific operations on data in encrypted state in order to ensure its privacy.  &lt;br/&gt;&lt;br/&gt;The project envisions an efficient application of redundant computation (replication) and redundant storage (different encryptions of same data) through a smart breakdown of programs into sub-computations and sub-datasets based on boundaries identified via program analysis. To enable that vision, the scope of Byzantine fault tolerant replication is extended beyond the present client-server scenarios to avoid significant slowdowns when applied to fine-grained parallelization of large datasets; similarly, partially homomorphic encryption is made applicable without hampering parallelism and beyond very simple programs.  &lt;br/&gt;&lt;br/&gt;This project will have a high impact on software developers given the continuously increasing relevance of the cloud computing paradigm and of big data. Results will be made broadly available through scientific publications and use open-source software systems for implementation.</AbstractNarration>
<MinAmdLetterDate>08/22/2014</MinAmdLetterDate>
<MaxAmdLetterDate>02/02/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421910</AwardID>
<Investigator>
<FirstName>Patrick</FirstName>
<LastName>Eugster</LastName>
<PI_MID_INIT>T</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Patrick T Eugster</PI_FULL_NAME>
<EmailAddress>peugster@cs.purdue.edu</EmailAddress>
<PI_PHON>7654946015</PI_PHON>
<NSF_ID>000233715</NSF_ID>
<StartDate>02/02/2017</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Patrick</FirstName>
<LastName>Eugster</LastName>
<PI_MID_INIT>T</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Patrick T Eugster</PI_FULL_NAME>
<EmailAddress>peugster@cs.purdue.edu</EmailAddress>
<PI_PHON>7654946015</PI_PHON>
<NSF_ID>000233715</NSF_ID>
<StartDate>08/22/2014</StartDate>
<EndDate>02/02/2017</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Aniket</FirstName>
<LastName>Kate</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Aniket Kate</PI_FULL_NAME>
<EmailAddress>aniket@purdue.edu</EmailAddress>
<PI_PHON>7654941055</PI_PHON>
<NSF_ID>000705066</NSF_ID>
<StartDate>02/02/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072107</ZipCode>
<StreetAddress><![CDATA[305 N University St]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~449999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project is concerned with enforcing security while analyzing large datasets in third-party cloud datacenters. The main tenets are to shield the programmer as much as possible from manually using any specific mechanism to that end, but instead proposing a malleable system that chooses and combines different mechanisms based on availability and an application's security requirements in a way maximizing performance. Mechanims considered include hardware-based trusted execution environments such as Intel SGX and so-called partially homomorphic encryption schemes that allow specific operations to be performed on data while encrypted without leaking information. Concretely, the main outcomes of the project are threefold: 1. Formal program models are conceived for capturing security-sensitive computations that allow for automated individual or combined use of said security mechanisms. 2. Novel partially homomorphic encryption schemes are devised that are symmetric as opposed to existing widely used asymmetric schemes. Our novel schemes are much more efficient than the latter schemes in that they support faster encryption and decryption, faster and more homomorphic operations on correspondingly encrypted data, and lower memory footprint. 3. A prototype system that leverages and validates the results of both 1. and 2. to efficiently support analytical queries over large datasets without compromising security. Our prototype is significantly faster than prior approaches and scales to much larger datasets.&nbsp;</p><br> <p>            Last Modified: 01/30/2020<br>      Modified by: Patrick&nbsp;T&nbsp;Eugster</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project is concerned with enforcing security while analyzing large datasets in third-party cloud datacenters. The main tenets are to shield the programmer as much as possible from manually using any specific mechanism to that end, but instead proposing a malleable system that chooses and combines different mechanisms based on availability and an application's security requirements in a way maximizing performance. Mechanims considered include hardware-based trusted execution environments such as Intel SGX and so-called partially homomorphic encryption schemes that allow specific operations to be performed on data while encrypted without leaking information. Concretely, the main outcomes of the project are threefold: 1. Formal program models are conceived for capturing security-sensitive computations that allow for automated individual or combined use of said security mechanisms. 2. Novel partially homomorphic encryption schemes are devised that are symmetric as opposed to existing widely used asymmetric schemes. Our novel schemes are much more efficient than the latter schemes in that they support faster encryption and decryption, faster and more homomorphic operations on correspondingly encrypted data, and lower memory footprint. 3. A prototype system that leverages and validates the results of both 1. and 2. to efficiently support analytical queries over large datasets without compromising security. Our prototype is significantly faster than prior approaches and scales to much larger datasets.        Last Modified: 01/30/2020       Submitted by: Patrick T Eugster]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
