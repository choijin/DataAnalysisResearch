<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Moving MapReduce into the Cloud: Flexibility, Efficiency, and Elasticity</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>MapReduce, a parallel and distributed programming model on clusters of commodity hardware, has emerged as the de facto standard for processing large data sets. Although MapReduce provides a simple and generic interface for parallel programming, it incurs several problems when running in the cloud including low cluster resource utilization, suboptimal scalability and poor multi-tenancy support. This project explores and designs new techniques that let MapReduce fully exploit the benefits of flexible and elastic resource allocations in the cloud while addressing the overhead and issues caused by server virtualization. It broadens impact by allowing a flexible and cost-effective way to perform big data analytics. This project also involves industry collaboration, curriculum development, and provides more avenues to bring women, minority, and underrepresented students into research and graduate programs.&lt;br/&gt;&lt;br/&gt;Running MapReduce in the cloud offers many benefits, including rapid deployment, high availability, on-demand elasticity and secure multi-tenancy. However, a simple migration of MapReduce to the cloud environment does not fully exploit these benefits. The semantic gap between MapReduce runtime and cloud resource management, and the lack of optimizations of MapReduce workloads in cloud hypervisors, together make it difficult to attain flexibility, efficiency and elasticity. This project develops a synergistic approach for coordinating MapReduce and the cloud. This research centers on two key designs: 1) para-virtualized MapReduce, an enhancement of MapReduce to actively adapt job execution to the cloud dynamics, including interference and hardware heterogeneity; 2) MapReduce cloud, a collection of optimizations for MapReduce-aware cloud resource allocation and scheduling. This project combines computer system experimentations with rigorous system design to improve the flexibility, efficiency and elasticity of MapReduce in the cloud. It emphasizes the adaptability of MapReduce in a heterogeneous and dynamic cloud environment, proposes cross-layer optimizations to unlock the potential of cloud systems, and ensures that optimizations for MapReduce workloads do not compromise the requirements for high resource utilization and multi-tenant fairness.</AbstractNarration>
<MinAmdLetterDate>09/05/2014</MinAmdLetterDate>
<MaxAmdLetterDate>09/20/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1422119</AwardID>
<Investigator>
<FirstName>Xiaobo</FirstName>
<LastName>Zhou</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Xiaobo Zhou</PI_FULL_NAME>
<EmailAddress>xzhou@uccs.edu</EmailAddress>
<PI_PHON>7192553493</PI_PHON>
<NSF_ID>000330885</NSF_ID>
<StartDate>09/05/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Jia</FirstName>
<LastName>Rao</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jia Rao</PI_FULL_NAME>
<EmailAddress>jia.rao@uta.edu</EmailAddress>
<PI_PHON>8172720770</PI_PHON>
<NSF_ID>000627435</NSF_ID>
<StartDate>09/05/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Colorado Springs</Name>
<CityName>Colorado Springs</CityName>
<ZipCode>809183733</ZipCode>
<PhoneNumber>7192553153</PhoneNumber>
<StreetAddress>1420, Austin Bluffs Parkway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>186192829</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF COLORADO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007431505</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Colorado at Colorado Springs]]></Name>
<CityName>Colorado Springs</CityName>
<StateCode>CO</StateCode>
<ZipCode>809183733</ZipCode>
<StreetAddress><![CDATA[1420 Austin Bluffs Parkway]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~400000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>MapReduce, a parallel and distributed programming model on clusters of commodity hardware, has emerged as the de-facto-standard for processing large datasets. Although MapReduce provides a simple and generic interface for parallel programming, it incurs problems including low cluster resource utilization, suboptimal scalability and poor multi-tenancy support. In this project, we designed new techniques that let MapReduce fully exploit the benefits of flexible and elastic resource allocations in the cloud while addressing the overhead and issues caused by server virtualization. The research centers on two key designs: 1) para-virtualized MapReduce, an enhancement of MapReduce to actively adapt job execution to the cloud dynamics, including interference and hardware heterogeneity; 2) MapReduce cloud, a collection of optimizations for MapReduce-aware cloud resource scheduling. We made following outcomes in research deliverables, student training, and curricula integration.</p> <p>1) Para-virtualized MapReduce:</p> <p>MapReduce applications are commonly deployed in heterogeneous computing environments. The performance discrepancy due to hardware heterogeneity and interference present significant challenges to attain high job performance. We augmented MapReduce framework in task configuration and designed new techniques in task scheduling, data placement and troubleshooting for MapReduce in heterogeneous clouds. Specifically, we proposed FlexSlot, a user-transparent task slot management scheme that automatically identifies stragglers and resizes their slots to accelerate task execution. We designed <em>FlexMap</em>, a user-transparent approach that dynamically provisions tasks with different sizes to match distinct machine capacity in heterogeneous clusters. MapReduce increasingly executes iterative machine learning jobs that exhibit a non-linear relationship between the size of partitioned parameters and processing time within each iteration. We proposed FlexPara, a parameter partition approach that leverages the non-linear relationship and provisions adaptive tasks to match the distinct machine capacity so as to address the job skewness on clusters.</p> <p>Homogeneous configuration of tasks on heterogeneous nodes is an important source of load imbalance. We proposed an adaptive task tuning approach, Ant, that automatically finds the optimal settings for individual tasks running on different nodes. We also found that decoupling Hadoop per-node storage from its computation opens up opportunities for IO acceleration, locality improvement, and on-the-fly cluster resizing. We developed StoreApp, a shared storage appliance for virtual Hadoop worker nodes co-located on the same physical host. For a dynamic Hadoop cluster, we proposed RD<em>S</em>, a resource and deadline-aware Hadoop job scheduler that takes future resource availability into minimizing job deadline misses. Furthermore, we developed SDChecker, a tool that characterizes scheduling delay for low-latency MapReduce workloads, and LRTrace, a non-intrusive tracing tool for troubleshooting data-analytics applications in lightweight virtualized environments.</p> <p>2) MapReduce Cloud</p> <p>Clouds are evolving to host heterogeneous workloads on shared clusters to reduce the operational cost and achieve high resource utilization. However, it is challenging to schedule heterogeneous workloads with diverse resource requirements and QoS constraints. We proposed BIG-C, a container-based resource management framework for MapReduce clusters. The key design is to leverage lightweight containers to make tasks preemptable in cluster scheduling so as to achieve high resource efficiency and job performance. We designed PerfCloud, a middleware that utilizes system-level performance metrics for early detection of performance interference in a multi-tenant cloud, and provides non-invasive performance isolation. Out-of-memory errors and excessive garbage collection activities are common in data-intensive programs, which cause not only poor performance but also execution failures. We conducted a preliminary study Docker-MB, a simple approach to addressing memory pressure in data-parallel programs using lightweight virtualization.</p> <p>Our research was also extended to cluster support to iterative machine learning workloads. We designed an aggressive synchronization model A-BSP based on the convergent property of iterative machine learning algorithms, by allowing the algorithms to use the updates generated based on partial input data for agile synchronization. We also augmented parameter server architecture and delivered iBatch, a novel communication approach that batches parameter communication and forward computation for scalable deep learning training in clusters.</p> <p>Overall, this project combines system experimentation with rigorous design to improve the flexibility, efficiency and elasticity of MapReduce in the clouds. We emphasized the adaptability of MapReduce in a heterogeneous and dynamic cloud and made the core MapReduce components aware of these issues. We coordinated resource scheduling in MapReduce runtime and the cloud hypervisor, which greatly improves resource efficiency and performance scalability of MapReduce in the cloud.</p> <p>This project provided significant training and professional development for students. It supported four PhD students in conducting quality research. It also engages an undergraduate student in research experiences. One student obtained PhD in 2019 and joined Nvidia lab at Boulder as a research staff. Two students will defend their thesis in academic year 2019-20.</p> <p>The outcomes were disseminated to research communities by presentations in ACM/IEEE/USENIX conferences, keynote and outreach talks in domestic and oversea universities, publications in numerous IEEE Transactions, and open-source artifacts at GitHub. We integrated research results with curricula innovation by integrating some research results into one graduate-level course in Computer Communications.</p><br> <p>            Last Modified: 10/02/2019<br>      Modified by: Xiaobo&nbsp;Zhou</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ MapReduce, a parallel and distributed programming model on clusters of commodity hardware, has emerged as the de-facto-standard for processing large datasets. Although MapReduce provides a simple and generic interface for parallel programming, it incurs problems including low cluster resource utilization, suboptimal scalability and poor multi-tenancy support. In this project, we designed new techniques that let MapReduce fully exploit the benefits of flexible and elastic resource allocations in the cloud while addressing the overhead and issues caused by server virtualization. The research centers on two key designs: 1) para-virtualized MapReduce, an enhancement of MapReduce to actively adapt job execution to the cloud dynamics, including interference and hardware heterogeneity; 2) MapReduce cloud, a collection of optimizations for MapReduce-aware cloud resource scheduling. We made following outcomes in research deliverables, student training, and curricula integration.  1) Para-virtualized MapReduce:  MapReduce applications are commonly deployed in heterogeneous computing environments. The performance discrepancy due to hardware heterogeneity and interference present significant challenges to attain high job performance. We augmented MapReduce framework in task configuration and designed new techniques in task scheduling, data placement and troubleshooting for MapReduce in heterogeneous clouds. Specifically, we proposed FlexSlot, a user-transparent task slot management scheme that automatically identifies stragglers and resizes their slots to accelerate task execution. We designed FlexMap, a user-transparent approach that dynamically provisions tasks with different sizes to match distinct machine capacity in heterogeneous clusters. MapReduce increasingly executes iterative machine learning jobs that exhibit a non-linear relationship between the size of partitioned parameters and processing time within each iteration. We proposed FlexPara, a parameter partition approach that leverages the non-linear relationship and provisions adaptive tasks to match the distinct machine capacity so as to address the job skewness on clusters.  Homogeneous configuration of tasks on heterogeneous nodes is an important source of load imbalance. We proposed an adaptive task tuning approach, Ant, that automatically finds the optimal settings for individual tasks running on different nodes. We also found that decoupling Hadoop per-node storage from its computation opens up opportunities for IO acceleration, locality improvement, and on-the-fly cluster resizing. We developed StoreApp, a shared storage appliance for virtual Hadoop worker nodes co-located on the same physical host. For a dynamic Hadoop cluster, we proposed RDS, a resource and deadline-aware Hadoop job scheduler that takes future resource availability into minimizing job deadline misses. Furthermore, we developed SDChecker, a tool that characterizes scheduling delay for low-latency MapReduce workloads, and LRTrace, a non-intrusive tracing tool for troubleshooting data-analytics applications in lightweight virtualized environments.  2) MapReduce Cloud  Clouds are evolving to host heterogeneous workloads on shared clusters to reduce the operational cost and achieve high resource utilization. However, it is challenging to schedule heterogeneous workloads with diverse resource requirements and QoS constraints. We proposed BIG-C, a container-based resource management framework for MapReduce clusters. The key design is to leverage lightweight containers to make tasks preemptable in cluster scheduling so as to achieve high resource efficiency and job performance. We designed PerfCloud, a middleware that utilizes system-level performance metrics for early detection of performance interference in a multi-tenant cloud, and provides non-invasive performance isolation. Out-of-memory errors and excessive garbage collection activities are common in data-intensive programs, which cause not only poor performance but also execution failures. We conducted a preliminary study Docker-MB, a simple approach to addressing memory pressure in data-parallel programs using lightweight virtualization.  Our research was also extended to cluster support to iterative machine learning workloads. We designed an aggressive synchronization model A-BSP based on the convergent property of iterative machine learning algorithms, by allowing the algorithms to use the updates generated based on partial input data for agile synchronization. We also augmented parameter server architecture and delivered iBatch, a novel communication approach that batches parameter communication and forward computation for scalable deep learning training in clusters.  Overall, this project combines system experimentation with rigorous design to improve the flexibility, efficiency and elasticity of MapReduce in the clouds. We emphasized the adaptability of MapReduce in a heterogeneous and dynamic cloud and made the core MapReduce components aware of these issues. We coordinated resource scheduling in MapReduce runtime and the cloud hypervisor, which greatly improves resource efficiency and performance scalability of MapReduce in the cloud.  This project provided significant training and professional development for students. It supported four PhD students in conducting quality research. It also engages an undergraduate student in research experiences. One student obtained PhD in 2019 and joined Nvidia lab at Boulder as a research staff. Two students will defend their thesis in academic year 2019-20.  The outcomes were disseminated to research communities by presentations in ACM/IEEE/USENIX conferences, keynote and outreach talks in domestic and oversea universities, publications in numerous IEEE Transactions, and open-source artifacts at GitHub. We integrated research results with curricula innovation by integrating some research results into one graduate-level course in Computer Communications.       Last Modified: 10/02/2019       Submitted by: Xiaobo Zhou]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
