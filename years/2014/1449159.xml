<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Accountability Through Architecture for Decentralized Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>199960.00</AwardTotalIntnAmount>
<AwardAmount>199960</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Ralph Wachter</SignBlockName>
<PO_EMAI>rwachter@nsf.gov</PO_EMAI>
<PO_PHON>7032928950</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Advancing the ability to create trustworthy computing systems demands fundamental advances in many technologies and at many levels of abstraction. Creating trustworthy applications requires more than a set of excellent building blocks, however. It demands an architectural understanding; one that shows a viable approach to utilizing many contributions in mutually consistent and supportive ways. This project springs from a focus on achieving security through innovative software architecture, wherein novel combinations of technologies are applied and the essential mechanisms of security and accountability are built in.  In particular, the security concerns of prevent, detect, isolate, mitigate, and blame demand an architectural solution wherein systemic accountability is an architectural consequence, rather than an option.&lt;br/&gt;&lt;br/&gt;To this end the proposal offers a novel alternative architectural style, COAST, for constructing secure, large-scale, decentralized systems, coupled with a focus on capability accounting. A capability  is an unforgeable reference whose possession confers both authority and rights to a principal. Capability accounting is the practice of producing and maintaining a record or statement of the generation, transfer, or use of capability relating to a particular period or purpose. The approach facilitates the fine-grained use of capability accounting to prevent security problems, isolate them, mitigate consequences of problems, and, if necessary, assign blame for use in subsequent actions. Target applications are typified by SOAs (Service Oriented Architectures), such as those found in e-commerce, where there are multiple interacting parties but no single overarching authority.  Our approach is inspired and informed by the daily use of broad accounting principles in other industries, notably Hazard Analysis and Critical Control Points (HACCP), a systematic preventive approach to hazards in production processes, and the generally accepted accounting principles (GAAP) of finance and business.  Our immediate focus is assessing the viability of this approach in a notional Internet-of-Things application, where we rely on careful measurement and engineering analysis to guide future larger-scale projects.</AbstractNarration>
<MinAmdLetterDate>08/18/2014</MinAmdLetterDate>
<MaxAmdLetterDate>08/18/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1449159</AwardID>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>Taylor</LastName>
<PI_MID_INIT>N</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Richard N Taylor</PI_FULL_NAME>
<EmailAddress>taylor@ics.uci.edu</EmailAddress>
<PI_PHON>9498246429</PI_PHON>
<NSF_ID>000417152</NSF_ID>
<StartDate>08/18/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926970001</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~199960</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project centered on a fresh perspective for designing and developing secure decentralized software systems&mdash;emphasizing <em>systemic auditing</em>,<em> auditing policy</em>, and <em>architectural accountability</em>&mdash;for which the fundamental unit of accounting is either the creation of a capability, the exploitation of a capability, or a transfer of capability from one computation to another.</p> <p>A decentralized software system is a distributed system that operates under multiple, distinct spheres of authority in which collaboration among the principals is characterized by limited trust. Now commonplace, decentralized systems appear in a number of disparate domains: commerce, logistics, medicine, software development, manufacturing, and financial trading to name but a few. These systems of systems face two overlapping demands: security and safety to protect against errors, omissions and threats; and ease of adaptation in response to attack, faults, regulatory requirements, or market demands.&nbsp;</p> <p><em>Systemic auditing</em> is the sanctioned inspection and analysis of the capability logs of one or more parties. <em>Auditing policy</em> dictates the accounting standards for the transfer of capability (when, where, and how a capability transfer is logged), the manner in which capability logs are examined, correlated, and reported, and defines the significant transfers for which additional actions are required (for example, refusing service to an untrusted party, issuing a notification to system administrators, or revoking a specific capability). Underpinning systemic auditing is the concept and practice of <em>architectural accountability </em>where an architectural style is deliberately designed to support <em>capability accounting</em>.</p> <p>The approach hinges on previously unexplored alternatives in architecture-based security. First, starting with an architectural style (Computational State Transfer, or &ldquo;COAST&rdquo;) where the explicit management of capability and accountability are fundamental structural elements, we examined the degree to which an architectural style can induce the triad of architectural accountability, systemic auditing, and auditing policy.</p> <p>Within this context the research goals centered on the question: How can systemic auditing, auditing policy, and architectural accountability be employed to ensure and verify the integrity and security of decentralized services?</p> <p>The essential outcome of the project was demonstration of the feasibility of the proposed approach.&nbsp; The critical tooling was put in place, enabling not only development of trial applications but also capture and analysis of the capability events with respect to user-chosen criteria.&nbsp; In particular, we conducted an experiment to assess whether capability accounting is a feasible approach to monitor and audit a decentralized system. For that, we defined an auditing practice to fulfill our research process and goals. Using COAST, we created a prototype of an electronic trading system that illustrates the interactions among various independent systems. In the prototype, a Trader deploys a trading algorithm (i.e. Trading Computation) into a host for execution. We posed five typical problems in decentralized systems and the financial trading domain, each problem with one or more causes. We deployed multiple Trading Computations, one of them with no errors but the rest with faulty computations, that is, each one produces the manifestation of one of the posed problems. Along with the prototype, we created a verification model in COMET to assess that the Trading Computations behave and interact with other components as expected. After the Trading Computations were executed and the corresponding capability events were collected, we used that verification model to evaluate how the computations behaved and to present results. This preliminary experiment revealed that capability accounting can be useful for debugging, behavioral analysis, and early warning of threatening security events.</p><br> <p>            Last Modified: 10/21/2016<br>      Modified by: Richard&nbsp;N&nbsp;Taylor</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project centered on a fresh perspective for designing and developing secure decentralized software systems&mdash;emphasizing systemic auditing, auditing policy, and architectural accountability&mdash;for which the fundamental unit of accounting is either the creation of a capability, the exploitation of a capability, or a transfer of capability from one computation to another.  A decentralized software system is a distributed system that operates under multiple, distinct spheres of authority in which collaboration among the principals is characterized by limited trust. Now commonplace, decentralized systems appear in a number of disparate domains: commerce, logistics, medicine, software development, manufacturing, and financial trading to name but a few. These systems of systems face two overlapping demands: security and safety to protect against errors, omissions and threats; and ease of adaptation in response to attack, faults, regulatory requirements, or market demands.   Systemic auditing is the sanctioned inspection and analysis of the capability logs of one or more parties. Auditing policy dictates the accounting standards for the transfer of capability (when, where, and how a capability transfer is logged), the manner in which capability logs are examined, correlated, and reported, and defines the significant transfers for which additional actions are required (for example, refusing service to an untrusted party, issuing a notification to system administrators, or revoking a specific capability). Underpinning systemic auditing is the concept and practice of architectural accountability where an architectural style is deliberately designed to support capability accounting.  The approach hinges on previously unexplored alternatives in architecture-based security. First, starting with an architectural style (Computational State Transfer, or "COAST") where the explicit management of capability and accountability are fundamental structural elements, we examined the degree to which an architectural style can induce the triad of architectural accountability, systemic auditing, and auditing policy.  Within this context the research goals centered on the question: How can systemic auditing, auditing policy, and architectural accountability be employed to ensure and verify the integrity and security of decentralized services?  The essential outcome of the project was demonstration of the feasibility of the proposed approach.  The critical tooling was put in place, enabling not only development of trial applications but also capture and analysis of the capability events with respect to user-chosen criteria.  In particular, we conducted an experiment to assess whether capability accounting is a feasible approach to monitor and audit a decentralized system. For that, we defined an auditing practice to fulfill our research process and goals. Using COAST, we created a prototype of an electronic trading system that illustrates the interactions among various independent systems. In the prototype, a Trader deploys a trading algorithm (i.e. Trading Computation) into a host for execution. We posed five typical problems in decentralized systems and the financial trading domain, each problem with one or more causes. We deployed multiple Trading Computations, one of them with no errors but the rest with faulty computations, that is, each one produces the manifestation of one of the posed problems. Along with the prototype, we created a verification model in COMET to assess that the Trading Computations behave and interact with other components as expected. After the Trading Computations were executed and the corresponding capability events were collected, we used that verification model to evaluate how the computations behaved and to present results. This preliminary experiment revealed that capability accounting can be useful for debugging, behavioral analysis, and early warning of threatening security events.       Last Modified: 10/21/2016       Submitted by: Richard N Taylor]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
