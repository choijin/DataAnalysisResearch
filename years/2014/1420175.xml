<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Relational Parametricity for Program Verification</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2014</AwardEffectiveDate>
<AwardExpirationDate>08/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>377083.00</AwardTotalIntnAmount>
<AwardAmount>450474</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Small: Relational Parametricity for Program Verification&lt;br/&gt;&lt;br/&gt;The software market is currently estimated at $500 billion per year, and this figure is likely to grow significantly in real terms as software becomes ever more ubiquitous. One crucial aspect of software is that it be correct, i.e., that software does what's intended and does not go wrong. Even failures of everyday devices like iPods and mobile phones are inconvenient and frustrating, but software leaking credit card details or voting records, causing an airplane to crash, launching nuclear weapons without authorization, or compromising the global financial sector can lead to unprecedented and clearly unacceptable global uncertainties. The ever-growing size and sophistication of programs makes formal verification methods --- which use mathematical techniques to ensure that programs actually perform the computations they are designed to carry out and do not perform unintended ones --- increasingly critical for building truly secure and reliable software. The broader impact of this research is to make possible the development of better and more widely applicable formal program verification methods, and, thereby, to help ensure that even large and sophisticated software systems are provably correct.&lt;br/&gt;&lt;br/&gt;Relational parametricity is a key technique for formally verifying properties of software systems. Logical relations, upon which relational parametricity is based, provide a means of proving properties of a software system directly from the system itself. Logical relations have by now been developed for core fragments of many modern programming languages and verification systems. However, this has been accomplished by way of an enormous constellation of complicated and non-reusable logical relations, rather than by appealing to their uniform construction and transferrable development from fundamental principles. This research aims to improve the current state-of-the-art by providing an axiomatic framework for the construction of logical relations. The framework is principled, conceptually simple, comprehensive, uniform, and predictive. The intellectual merit of this research lies in its exposition and use of essential structures from category theory ("fibrations") to address the significant technical problems of constructing logical relations, and conceptualizing relational parametricity in sophisticated settings. It also lies in the novel and uniform formulation of parametricity to which this research will lead, and the application of this new framework to specific state-of-the-art computational problems. To ensure its uptake, a logic and tool support for the new framework will be provided. While the tool will permit users to experiment with the framework, the feedback from their practical experiences will further fortify the new foundations for parametricity.</AbstractNarration>
<MinAmdLetterDate>06/13/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/15/2015</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1420175</AwardID>
<Investigator>
<FirstName>Patricia</FirstName>
<LastName>Johann</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Patricia Johann</PI_FULL_NAME>
<EmailAddress>johannp@appstate.edu</EmailAddress>
<PI_PHON>8282627008</PI_PHON>
<NSF_ID>000659322</NSF_ID>
<StartDate>06/13/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Appalachian State University</Name>
<CityName>Boone</CityName>
<ZipCode>286082174</ZipCode>
<PhoneNumber>8282627459</PhoneNumber>
<StreetAddress>P.O. Box 32174</StreetAddress>
<StreetAddress2><![CDATA[Office of Research]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>781866264</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>APPALACHIAN STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Appalachian State University]]></Name>
<CityName>Boone</CityName>
<StateCode>NC</StateCode>
<ZipCode>286082068</ZipCode>
<StreetAddress><![CDATA[287 Rivers St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0115</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~377083</FUND_OBLG>
<FUND_OBLG>2015~73391</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In this project we corrected a rather large technical problem with a framework previously thought to guarantee type-uniformity in polymorphic programming languages. We discovered the problem with the existing framework, corrected it, showed that the corrected theory has as a direct instance type-uniformity for the language for which it was originally developed nearly 50 years ago, and showed that the corrected theory also extends to higher dimensions (and thus to languages supporting very sophisticated forms of type-uniformity). Showing that the corrected theory is also extensible to languages supporting more "real-world" features, such as algebraic effects, is ongoing work. Our framework for type-uniformity is a true framework, in the sense that it is developed once but used over and over again in different computational settings. For settings that are instances, our framework ensures that programs claiming to be type-uniform really do operate independently of their types, gives well-defined computational and mathematical meanings to algebraic data types, derives programming idioms and program transformations that can improve the performance of programs and be integrated into optimizing compilers, and provides strong correctness guarantees for programs that improve program verification.</p> <p>On the non-technical side, this project brought the first-ever post-doctoral researchers, and the first world-class research, to a primarily undergraduate department at a regional state university. It also involved an undergraduate researcher in some coding in support of the project.</p><br> <p>            Last Modified: 10/07/2018<br>      Modified by: Patricia&nbsp;Johann</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In this project we corrected a rather large technical problem with a framework previously thought to guarantee type-uniformity in polymorphic programming languages. We discovered the problem with the existing framework, corrected it, showed that the corrected theory has as a direct instance type-uniformity for the language for which it was originally developed nearly 50 years ago, and showed that the corrected theory also extends to higher dimensions (and thus to languages supporting very sophisticated forms of type-uniformity). Showing that the corrected theory is also extensible to languages supporting more "real-world" features, such as algebraic effects, is ongoing work. Our framework for type-uniformity is a true framework, in the sense that it is developed once but used over and over again in different computational settings. For settings that are instances, our framework ensures that programs claiming to be type-uniform really do operate independently of their types, gives well-defined computational and mathematical meanings to algebraic data types, derives programming idioms and program transformations that can improve the performance of programs and be integrated into optimizing compilers, and provides strong correctness guarantees for programs that improve program verification.  On the non-technical side, this project brought the first-ever post-doctoral researchers, and the first world-class research, to a primarily undergraduate department at a regional state university. It also involved an undergraduate researcher in some coding in support of the project.       Last Modified: 10/07/2018       Submitted by: Patricia Johann]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
