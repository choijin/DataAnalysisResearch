<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Small: Host-Assisted, Software-Defined Solid-State Disk</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>299960.00</AwardTotalIntnAmount>
<AwardAmount>299960</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Over the past two decades flash-based storage has crept up from a niche and relatively unknown storage technology to the mobile and embedded medium of choice, and made significant in-roads in the laptop and server arenas in the incarnation of Solid State Disk (SSD). Increasingly, many applications use SSDs and trends indicate that SSD usage will grow significantly. However, SSDs are no silver bullet - in reality, the flash firmware in all commercial SSDs is very rigid and highly unadaptable across input/output (I/O) workloads creating sincere challenges which include the added cost of firmware per SSD, firmware inflexibility, and assisting SSD hardware limitations. This work will address these key issues.  &lt;br/&gt;&lt;br/&gt;The research will investigate how SSDs should achieve the flexibility they need to perform best for a variety of I/O workloads by being software-defined. This manages the repeating cost of a copy of inflexible firmware for each SSD, and will push the current firmware into the more general and malleable software space. Another area of exploration will be to investigate how SSDs could be made capable of collaborating with the host such that resources on both sides can be shared towards a more flexible and higher-performing I/O device. This will prevent on-board SSD assisting hardware from being vastly over/under utilized, enabling the host to take advantage of workload-specific optimizations on the SSD itself instead of pushing the data back to the host. Increased flexibility in the mechanisms that drive flash-based SSDs will provide system administrators the ability to tune their flash storage for workloads in use. Increased cooperation and transparency between the host and the flash device should enable improved application/library/device-level optimizations that are impossible under the current rigid and protocol-obfuscated regime. Intelligent sharing of assisting hardware (mainly compute and memory) across the host and SSD will enable more expensive SSD optimizations to be performed given the host's compute and memory power, and more clever I/O optimizations to be performed given the SSD's locality to the underlying data. Further, bringing SSD related tasks to the host side can enable co-optimization of application threads and I/O threads, improving potentially computation, communication, and I/O, and similarly, SSD tasks can be co-optimized with application threads on the SSD side, leading to a more efficient active flash system.</AbstractNarration>
<MinAmdLetterDate>09/10/2014</MinAmdLetterDate>
<MaxAmdLetterDate>05/09/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1422923</AwardID>
<Investigator>
<FirstName>Carl</FirstName>
<LastName>Sechen</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Carl Sechen</PI_FULL_NAME>
<EmailAddress>cms057000@utdallas.edu</EmailAddress>
<PI_PHON>9728351611</PI_PHON>
<NSF_ID>000509021</NSF_ID>
<StartDate>05/09/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Myoungsoo</FirstName>
<LastName>Jung</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Myoungsoo Jung</PI_FULL_NAME>
<EmailAddress>jung@utdallas.edu</EmailAddress>
<PI_PHON>9728832313</PI_PHON>
<NSF_ID>000653296</NSF_ID>
<StartDate>09/10/2014</StartDate>
<EndDate>05/09/2016</EndDate>
<RoleCode>Former Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Dallas</Name>
<CityName>Richardson</CityName>
<ZipCode>750803021</ZipCode>
<PhoneNumber>9728832313</PhoneNumber>
<StreetAddress>800 W. Campbell Rd., AD15</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>32</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX32</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>800188161</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT DALLAS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Dallas]]></Name>
<CityName>Richardson</CityName>
<StateCode>TX</StateCode>
<ZipCode>750803021</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>32</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX32</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~299960</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>We introduced a CMOS computational fabric consisting of carefully arranged regular rows and columns of transistors which can be individually configured and appropriately interconnected in order to implement a target digital circuit. This TRAnsistor-level Programmable (TRAP) fabric allows simultaneous storage of four independent configurations, along with the ability to dynamically switch between them in a small fraction of a clock cycle. We term this&nbsp;<em>board-level virtualization</em>&nbsp;in that each configuration in effect implements an independent chip.&nbsp;&nbsp;TRAP also supports&nbsp;<em>chip-level virtualization</em>&nbsp;in which a single IC design is partitioned over a set of configurations and the computation cycles from one configuration to the next in the set. This allows a design that requires more computational logic than physically available on the TRAP chip to be nonetheless executable. TRAP also features rapid partial or full modification of any one of the stored configurations in a time proportional to the number of modified configuration bits through the use of hierarchically arranged, high throughput, pipelined memory buffers. TRAP supports libraries of cells of the same height and variable width, just as in a typical standard cell circuit. We developed a complete Computer-aided Design (CAD) tool flow for programming TRAP chips. A prototype 3mm X 3mm TRAP chip was fabricated using the Global Foundries 55nm process and all supplied chips were fully functional. We show that TRAP has substantially better area efficiency compared to a leading industrial FPGA and would therefore be ideal for embedded FPGA (eFPGA) applications. &nbsp;</p> <p>Widespread adoption of the fabless business model and utilization of third-party foundries have increased the exposure of sensitive designs to security threats. As a result, concerted interest in various design obfuscation schemes for deterring reverse engineering and/or unauthorized reproduction and usage of ICs has surfaced. In this paper we present a novel mechanism for structurally obfuscating sensitive parts of a design through post-fabrication TRAnsistor-level Programming (TRAP). We introduce a transistor-level programmable fabric and we discuss its unique advantages towards design obfuscation, as well as a customized CAD framework for seamlessly integrating this fabric in an ASIC design flow. We theoretically analyze the complexity of attacking TRAP-obfuscated designs through both brute-force and intelligent SAT-based attacks and we present a silicon implementation of a platform for experimenting with TRAP. Effectiveness of the proposed method is evaluated through selective obfuscation of various modules of a modern microprocessor design. Results corroborate that, as compared to an FPGA implementation, TRAP-based obfuscation offers superior resistance against both brute-force and oracle-guided SAT attacks, while incurring an order of magnitude less area, power and delay overhead.</p> <p>The protection of Intellectual Property (IP) has emerged as one of the most serious areas of concerns in the semiconductor industry. To address this issue, we present a method and architecture to map selectively portions of a design, given as a behavioral description for High-Level Synthesis (HLS), to a high-security embedded field-programmable gate array, or eFPGA. In this manner, only the end-user has access to the full functionality of the chip. We demonstrate time-to-break (TTB) security approaching 26000 hours while incurring area overheads under 20 percent and rather small latency increases.</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/14/2020<br>      Modified by: Carl&nbsp;Sechen</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050310516_FinalReport2019images1--rgov-214x142.jpg" original="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050310516_FinalReport2019images1--rgov-800width.jpg" title="Transistor-Level Programming (TRAP) for Cost-Effective Hardware Updates and IP Protection"><img src="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050310516_FinalReport2019images1--rgov-66x44.jpg" alt="Transistor-Level Programming (TRAP) for Cost-Effective Hardware Updates and IP Protection"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Transistor-Level Programming (TRAP) for Cost-Effective Hardware Updates and IP Protection</div> <div class="imageCredit">Carl Sechen</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Carl&nbsp;Sechen</div> <div class="imageTitle">Transistor-Level Programming (TRAP) for Cost-Effective Hardware Updates and IP Protection</div> </div> </li> <li> <a href="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050614380_FinalReport2019images2--rgov-214x142.jpg" original="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050614380_FinalReport2019images2--rgov-800width.jpg" title="Sources of Uncertainty in TRAP-based Obfuscation"><img src="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050614380_FinalReport2019images2--rgov-66x44.jpg" alt="Sources of Uncertainty in TRAP-based Obfuscation"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Sources of Uncertainty in TRAP-based Obfuscation</div> <div class="imageCredit">Carl Sechen</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Carl&nbsp;Sechen</div> <div class="imageTitle">Sources of Uncertainty in TRAP-based Obfuscation</div> </div> </li> <li> <a href="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050767287_FinalReport2019images3--rgov-214x142.jpg" original="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050767287_FinalReport2019images3--rgov-800width.jpg" title="TRAP fabric � (a) hierarchical architecture, (b) hardware support for virtual layers."><img src="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050767287_FinalReport2019images3--rgov-66x44.jpg" alt="TRAP fabric � (a) hierarchical architecture, (b) hardware support for virtual layers."></a> <div class="imageCaptionContainer"> <div class="imageCaption">TRAP fabric � (a) hierarchical architecture, (b) hardware support for virtual layers.</div> <div class="imageCredit">Carl Sechen</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Carl&nbsp;Sechen</div> <div class="imageTitle">TRAP fabric � (a) hierarchical architecture, (b) hardware support for virtual layers.</div> </div> </li> <li> <a href="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050879229_FinalReport2019images4--rgov-214x142.jpg" original="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050879229_FinalReport2019images4--rgov-800width.jpg" title="TRAP die micrograph"><img src="/por/images/Reports/POR/2020/1422923/1422923_10341680_1579050879229_FinalReport2019images4--rgov-66x44.jpg" alt="TRAP die micrograph"></a> <div class="imageCaptionContainer"> <div class="imageCaption">TRAP die micrograph</div> <div class="imageCredit">Carl Sechen</div> <div class="imagePermisssions">Copyrighted</div> <div class="imageSubmitted">Carl&nbsp;Sechen</div> <div class="imageTitle">TRAP die micrograph</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ We introduced a CMOS computational fabric consisting of carefully arranged regular rows and columns of transistors which can be individually configured and appropriately interconnected in order to implement a target digital circuit. This TRAnsistor-level Programmable (TRAP) fabric allows simultaneous storage of four independent configurations, along with the ability to dynamically switch between them in a small fraction of a clock cycle. We term this board-level virtualization in that each configuration in effect implements an independent chip.  TRAP also supports chip-level virtualization in which a single IC design is partitioned over a set of configurations and the computation cycles from one configuration to the next in the set. This allows a design that requires more computational logic than physically available on the TRAP chip to be nonetheless executable. TRAP also features rapid partial or full modification of any one of the stored configurations in a time proportional to the number of modified configuration bits through the use of hierarchically arranged, high throughput, pipelined memory buffers. TRAP supports libraries of cells of the same height and variable width, just as in a typical standard cell circuit. We developed a complete Computer-aided Design (CAD) tool flow for programming TRAP chips. A prototype 3mm X 3mm TRAP chip was fabricated using the Global Foundries 55nm process and all supplied chips were fully functional. We show that TRAP has substantially better area efficiency compared to a leading industrial FPGA and would therefore be ideal for embedded FPGA (eFPGA) applications.    Widespread adoption of the fabless business model and utilization of third-party foundries have increased the exposure of sensitive designs to security threats. As a result, concerted interest in various design obfuscation schemes for deterring reverse engineering and/or unauthorized reproduction and usage of ICs has surfaced. In this paper we present a novel mechanism for structurally obfuscating sensitive parts of a design through post-fabrication TRAnsistor-level Programming (TRAP). We introduce a transistor-level programmable fabric and we discuss its unique advantages towards design obfuscation, as well as a customized CAD framework for seamlessly integrating this fabric in an ASIC design flow. We theoretically analyze the complexity of attacking TRAP-obfuscated designs through both brute-force and intelligent SAT-based attacks and we present a silicon implementation of a platform for experimenting with TRAP. Effectiveness of the proposed method is evaluated through selective obfuscation of various modules of a modern microprocessor design. Results corroborate that, as compared to an FPGA implementation, TRAP-based obfuscation offers superior resistance against both brute-force and oracle-guided SAT attacks, while incurring an order of magnitude less area, power and delay overhead.  The protection of Intellectual Property (IP) has emerged as one of the most serious areas of concerns in the semiconductor industry. To address this issue, we present a method and architecture to map selectively portions of a design, given as a behavioral description for High-Level Synthesis (HLS), to a high-security embedded field-programmable gate array, or eFPGA. In this manner, only the end-user has access to the full functionality of the chip. We demonstrate time-to-break (TTB) security approaching 26000 hours while incurring area overheads under 20 percent and rather small latency increases.          Last Modified: 01/14/2020       Submitted by: Carl Sechen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
