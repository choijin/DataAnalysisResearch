<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>RI: Small: Mathematical Analysis of an Answer Set Programming Language</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>404037.00</AwardTotalIntnAmount>
<AwardAmount>404037</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>James Donlon</SignBlockName>
<PO_EMAI>jdonlon@nsf.gov</PO_EMAI>
<PO_PHON>7032928074</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Answer Set Programming (ASP) is a programming methodology designed for solving combinatorial search problems, where the goal is to find a solution among a finite but very large number of possibilities.  Such problems are common in science and technology.  In safety-critical applications of ASP it is important to have a higher level of confidence in the correctness of software than can be achieved by merely applying it to many test cases; mathematical methods must be used to prove with complete certainty that the program finds the correct answer in every possible case.  This project develops such mathematical methods.&lt;br/&gt;&lt;br/&gt;In the early days of ASP, the input languages of answer set solvers had a simple semantics based on the concept of a stable model.  But many constructs added over the years to the language of ASP because programmers found them useful cannot be explained in terms of stable models in the sense of the original definition of that concept or its straightforward generalizations.  Manuals written by the designers of answer set solvers explain the meaning of these programming constructs using examples and informal comments that appeal to the user's intuition, without references to any precise semantics.  The first goal of this project is to characterize the semantics of ASP in a mathematically precise way using an extension of stable models to logical formulas with infinite conjunctions and disjunctions.   Second, this semantics is used for verifying the correctness of ASP programs and optimization methods.  The broader impacts of this work include collaboration with other research groups for dissemination, validation and adoption of the research results, and integration of the research into graduate education.</AbstractNarration>
<MinAmdLetterDate>07/01/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/01/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1422455</AwardID>
<Investigator>
<FirstName>Vladimir</FirstName>
<LastName>Lifschitz</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Vladimir Lifschitz</PI_FULL_NAME>
<EmailAddress>vl@cs.utexas.edu</EmailAddress>
<PI_PHON>5124719564</PI_PHON>
<NSF_ID>000448397</NSF_ID>
<StartDate>07/01/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787121532</ZipCode>
<StreetAddress><![CDATA[101 E. 27th Street, Suite 5.300]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>25</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX25</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7495</Code>
<Text>Robust Intelligence</Text>
</ProgramElement>
<ProgramReference>
<Code>7495</Code>
<Text>ROBUST INTELLIGENCE</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~404037</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 3"> <div class="layoutArea"> <div class="column"> <p><span>Answer set programming (ASP) is a programming methodology rooted in research on artificial intelligence and computational logic. It was created at the turn of the century, and it is now used in many areas of science and technology.</span><span style="font-size: 12px;">&nbsp;The&nbsp;ASP approach to programming is declarative: an ASP program does not represent an algorithm. It only&nbsp;</span><span style="font-size: 12px;">describes in a formal way what is counted as a solution to the problem. Given such a description, an answer set solver finds a solution by the process of automated reasoning. Several answer set solvers are available today, and CLINGO, designed at the University of Potsdam in Germany, is one of the most efficient and widely used systems of this kind.</span></p> <p>We gave a precise description of the meaning of most constructs available to CLINGO programmers. Since 2016, this description has served as a specification for new versions of CLINGO, and it is used in teaching answer set programming to students. &nbsp;<span style="font-size: 12px;">We developed mathematical methods and software for verifying ASP programs, and described&nbsp;</span><span style="font-size: 12px;">strategies that faciltate the creation of correct and easy to understand programs of this kind. We clarified the relationship between the input language of CLINGO and another important dialect of answer set programming -- the ASP-Core language, developed by the ASP Standardization Working Group.</span></p> <p>&nbsp;</p> <p>&nbsp;</p> <p><span><br /></span></p> </div> </div> </div><br> <p>            Last Modified: 10/04/2018<br>      Modified by: Vladimir&nbsp;Lifschitz</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    Answer set programming (ASP) is a programming methodology rooted in research on artificial intelligence and computational logic. It was created at the turn of the century, and it is now used in many areas of science and technology. The ASP approach to programming is declarative: an ASP program does not represent an algorithm. It only describes in a formal way what is counted as a solution to the problem. Given such a description, an answer set solver finds a solution by the process of automated reasoning. Several answer set solvers are available today, and CLINGO, designed at the University of Potsdam in Germany, is one of the most efficient and widely used systems of this kind.  We gave a precise description of the meaning of most constructs available to CLINGO programmers. Since 2016, this description has served as a specification for new versions of CLINGO, and it is used in teaching answer set programming to students.  We developed mathematical methods and software for verifying ASP programs, and described strategies that faciltate the creation of correct and easy to understand programs of this kind. We clarified the relationship between the input language of CLINGO and another important dialect of answer set programming -- the ASP-Core language, developed by the ASP Standardization Working Group.                   Last Modified: 10/04/2018       Submitted by: Vladimir Lifschitz]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
