<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Computer-Aided Synthesis for Distributed Algorithms</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>499501.00</AwardTotalIntnAmount>
<AwardAmount>499501</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Formal verification techniques are used to exhaustively test a&lt;br/&gt;given design to detect if it has any possible undesirable behavior.&lt;br/&gt;Formal verification is a powerful paradigm since it can detect&lt;br/&gt;hard-to-find errors in a design that testing alone is unlikely to&lt;br/&gt;find. However, formal verification techniques can not be used on&lt;br/&gt;an incomplete design. This project explores the question of whether &lt;br/&gt;such methods be extended to help in the design process by completing &lt;br/&gt;a partial design and synthesizing correct systems. Such formal methods&lt;br/&gt;can have a broad impact by influencing the design and correctness of &lt;br/&gt;a wide variety of distributed systems.&lt;br/&gt;&lt;br/&gt;This project develops a general approach for formal model synthesis,&lt;br/&gt;called bounded model synthesis, and applies it to do computer-aided&lt;br/&gt;design of fault-tolerant distributed algorithms. Computation is becoming &lt;br/&gt;increasingly distributed, but designing correct, especially fault tolerant, &lt;br/&gt;distributed algorithms is an extremely challenging task.&lt;br/&gt;The bounded model synthesis approach provides tools that can help&lt;br/&gt;developers perform systematic design of distributed systems.&lt;br/&gt;The technical approach consists of lifting verification techniques,&lt;br/&gt;such as bounded model checking and k-induction, to perform model&lt;br/&gt;synthesis.  This project develops, implements, and evaluates the&lt;br/&gt;bounded model synthesis approach.</AbstractNarration>
<MinAmdLetterDate>07/02/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1423296</AwardID>
<Investigator>
<FirstName>Ashish</FirstName>
<LastName>Tiwari</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ashish Tiwari</PI_FULL_NAME>
<EmailAddress>tiwari@csl.sri.com</EmailAddress>
<PI_PHON>6508594774</PI_PHON>
<NSF_ID>000168554</NSF_ID>
<StartDate>07/02/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>SRI International</Name>
<CityName>Menlo Park</CityName>
<ZipCode>940253493</ZipCode>
<PhoneNumber>7032478529</PhoneNumber>
<StreetAddress>333 RAVENSWOOD AVE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>009232752</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>SRI INTERNATIONAL</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>009232752</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[SRI Internaitonal]]></Name>
<CityName>Menlo Park</CityName>
<StateCode>CA</StateCode>
<ZipCode>940253493</ZipCode>
<StreetAddress><![CDATA[333 Ravenswood Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~499501</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>&nbsp;</p> <div>Intellectual Merit:</div> <div>Program synthesis refers to the task of automatically generating a program, or a high-level description of an algorithm, given a set of program building blocks and some form of specification of the desired behavior of the program.&nbsp; Program synthesis is a powerful technique that has enormous potential to influence the way we interact with computers and even democratize programming.</div> <div>This project developed two new approaches for program synthesis: bounded model synthesis and duality-based program synthesis.<br />&nbsp;<br />The first approach, called bounded model synthesis, is a lifting of bounded model checking to synthesis.&nbsp; It takes a specification, which is usually given in terms of behaviors over unbounded time steps, and performs synthesis using a bounded time version of the specification.&nbsp; The underlying engine supporting synthesis is an exists-forall constraint solver.&nbsp;</div> <div>The second approach, called duality-based program synthesis, is based on replacing the verification step in program synthesis by a proof search step.&nbsp; This means we simultaneously search for the correct program and its proof of correctness. Due to replacement of the verification step by a proof search step, the underlying solver required to perform duality-based program synthesis is a regular (exists) constraint solver.</div> <div>This project developed these approaches, built prototype implementations of these approaches, and demonstrated their power by synthesizing algorithms in the field of fault-tolerant distributed systems, reverse engineering hardware, security protocols, and secure multi-party computation.</div> <div>The project also explored new approaches for controller synthesis in distributed cyberphysical systems, and developed the concepts of adaptive-horizon and adaptive-neighborhood (model-predictive) control.</div> <div><br />Broader Impact:</div> <div>The scientific results obtained in the project were published in several peer-reviewed conferences, and also made available via the web pages http://www.csl.sri.com/users/tiwari/softwares/synthesis, http://www.csl.sri.com/users/tiwari/auto-crypto/ and http://www.csl.sri.com/users/tiwari/softwares/synth_distributed/.&nbsp; A tool for performing synthesis, called Synudic, was released in open-source form on github. A new version of the widely-used and popular SMT solver Yices (http://yices.csl.sri.com/) was released that includes support for solving exists-forall constraints.</div> <div>The project contributed to education and training by supporting at least five summer students, and partly supporting several students under the International Fellows program.&nbsp; The post doctoral work of Adria Gascon was partly supported by this project. The project also partially supported PIs partition in summer schools.</div> <div>The project helped the PI collaborate with researchers in Stony Brook (NY) and Vienna (Austria)&nbsp; on topics related to controller synthesis for distributed systems.</div> <div>The project had a positive impact on the field of Quantified Boolean Formula (QBF) solving by providing a rich source of difficult exists-forall benchmarks.&nbsp; The project also initiated a fruitful collaboration with researchers working in security and multi-party computation.</div> <p>&nbsp;</p><br> <p>            Last Modified: 09/28/2018<br>      Modified by: Ashish&nbsp;Tiwari</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   Intellectual Merit: Program synthesis refers to the task of automatically generating a program, or a high-level description of an algorithm, given a set of program building blocks and some form of specification of the desired behavior of the program.  Program synthesis is a powerful technique that has enormous potential to influence the way we interact with computers and even democratize programming. This project developed two new approaches for program synthesis: bounded model synthesis and duality-based program synthesis.   The first approach, called bounded model synthesis, is a lifting of bounded model checking to synthesis.  It takes a specification, which is usually given in terms of behaviors over unbounded time steps, and performs synthesis using a bounded time version of the specification.  The underlying engine supporting synthesis is an exists-forall constraint solver.  The second approach, called duality-based program synthesis, is based on replacing the verification step in program synthesis by a proof search step.  This means we simultaneously search for the correct program and its proof of correctness. Due to replacement of the verification step by a proof search step, the underlying solver required to perform duality-based program synthesis is a regular (exists) constraint solver. This project developed these approaches, built prototype implementations of these approaches, and demonstrated their power by synthesizing algorithms in the field of fault-tolerant distributed systems, reverse engineering hardware, security protocols, and secure multi-party computation. The project also explored new approaches for controller synthesis in distributed cyberphysical systems, and developed the concepts of adaptive-horizon and adaptive-neighborhood (model-predictive) control.  Broader Impact: The scientific results obtained in the project were published in several peer-reviewed conferences, and also made available via the web pages http://www.csl.sri.com/users/tiwari/softwares/synthesis, http://www.csl.sri.com/users/tiwari/auto-crypto/ and http://www.csl.sri.com/users/tiwari/softwares/synth_distributed/.  A tool for performing synthesis, called Synudic, was released in open-source form on github. A new version of the widely-used and popular SMT solver Yices (http://yices.csl.sri.com/) was released that includes support for solving exists-forall constraints. The project contributed to education and training by supporting at least five summer students, and partly supporting several students under the International Fellows program.  The post doctoral work of Adria Gascon was partly supported by this project. The project also partially supported PIs partition in summer schools. The project helped the PI collaborate with researchers in Stony Brook (NY) and Vienna (Austria)  on topics related to controller synthesis for distributed systems. The project had a positive impact on the field of Quantified Boolean Formula (QBF) solving by providing a rich source of difficult exists-forall benchmarks.  The project also initiated a fruitful collaboration with researchers working in security and multi-party computation.          Last Modified: 09/28/2018       Submitted by: Ashish Tiwari]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
