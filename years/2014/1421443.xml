<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Specializing Compilers For High Performance Computing Through Coordinated Data and Algorithm Optimizations</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>477631.00</AwardTotalIntnAmount>
<AwardAmount>493631</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This research brings about a new methodology for developing compilers, where the data structure and algorithm implementations of software applications are independently normalized and categorized into commonly occurring patterns, compiler optimizations are made customizable components that can be flexibly composed, and all optimizations are closely coordinated and collectively specialized to attain a highest level of performance. The pattern-based specialization specifically targets a number of domains, e.g., dense/sparse matrix codes, stencil computations, and graph/machine learning algorithms, which are critical to scientific computing.  A uniform annotation interface is provided for developers to concisely document the higher-level semantics of abstractions provided by varying domain-specific and parallel programming libraries, thereby allowing the development of specially customized library-aware compilers that can automatically coordinate the uses of library abstractions to maximize the overall performance of large scale multiprocessor applications. Automated optimization tuning support is provided to support the performance portability of applications on modern heterogeneous computing platforms.&lt;br/&gt;&lt;br/&gt;The deliverables of this research include a collection of specialized compiler optimizers, distributed open source online, with associated auto-tuning toolkits to target them for varying modern multi-core and GPU platforms, and with a graphical user interface for users to interactively invoke these optimizers.  These optimizers, together with their interactive configuration interfaces, are expected to fundamentally change how high performance computing applications are developed, while providing computational specialists a toolset to automatically generate optimized library kernels without manually composing assembly codes.</AbstractNarration>
<MinAmdLetterDate>07/25/2014</MinAmdLetterDate>
<MaxAmdLetterDate>04/22/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421443</AwardID>
<Investigator>
<FirstName>Qing</FirstName>
<LastName>Yi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Qing Yi</PI_FULL_NAME>
<EmailAddress>qyi@uccs.edu</EmailAddress>
<PI_PHON>7192553066</PI_PHON>
<NSF_ID>000492904</NSF_ID>
<StartDate>07/25/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Colorado Springs</Name>
<CityName>Colorado Springs</CityName>
<ZipCode>809183733</ZipCode>
<PhoneNumber>7192553153</PhoneNumber>
<StreetAddress>1420, Austin Bluffs Parkway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CO05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>186192829</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>REGENTS OF THE UNIVERSITY OF COLORADO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>007431505</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Colorado at Colorado Springs]]></Name>
<CityName/>
<StateCode>CO</StateCode>
<ZipCode>809183733</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CO05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~477631</FUND_OBLG>
<FUND_OBLG>2016~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 5"> <div class="section"> <div class="layoutArea"> <div class="column"> <p>Aiming to bring about pattern-driven techniques to specialize general-purpose compiler optimizations, this research has successfully practiced and validated a new methodology for developing compilers, where the data structure and algorithm implementations of software applications are independently normalized and categorized into commonly occurring patterns, compiler optimizations are made customizable components that can be flexibly composed, and all optimizations are closely coordinated and collectively specialized to attain a highest level of performance. Specifically, this new methodology has been captured through the prototype of several special-purpose optimizers, developed for matrix/vector computation kernels, stencil computation kernels, and the innermost loops of scientific applications. These optimizers have restructured&nbsp;how program analysis and optimizations are organized in traditional compilers, by transforming each optimization pass into customizable components that can dynamically communicate with each other, so that they can be flexibly composed and specialized to attain the highest level of performance. A web-based Graphical User Interface has been developed to support software developers interactively compose compiler optimizations to select and specialize the optimization of designated code regions in large applications.&nbsp;</p> <p>As a second focus, this research has developed compiler techniques to support the separation of abstract representations of data structures and algorithms in large applications, thereby enabling compilers to accommodate the higher-level semantics of varying domains.&nbsp; Speciically, a source-to-source compiler has been developed to automate the selection of data structure implementations based on a collection of adapter specifications describing the interfaces and use-case scenarios of the data structures, and a special-purpose compiler has been developed to automatically convert sequentical C/C++ data abstractions into concurrent implementations using state-of-the-art non-blocking synchronization mechanisms.&nbsp;&nbsp;These techniques allow domain-specific knowledge be targeted without compromising the integrity of general purpose compilers, to explore synergized utilization of efficient data structure and algorithm implementations,&nbsp;</p> <p>The deliverables of this research include a collection of specialized compiler opti- mizers for domains such as dense/sparse matrix computations, stencils, and concurrent data structures (e.g., queues and hash maps). A majority of these optimizers have been distributed open source online,. A graphical user interface has been developed to allow users interactively compose optimizations to selected code regions to improve the efficiency of their applications.&nbsp; These source-to-source compilers are developed based on POET, a special-purose interpreted language for developing programmable and customizable compiler optimizations.&nbsp; The POET language has been integrated as an embeded scripting langauge and distributed open-source together with the ROSE C/C++/Fortran source-to-source compiler from DOE/LLNL&nbsp; and used together with the ROSE compiler to support specialized kernel optimizations and automated deployment of data structure implementations.</p> <div class="page" title="Page 5"> <div class="section"> <div class="layoutArea"> <div class="column"> <p>Two Ph.D students,and one post-doc visiting scholar, have been partially supported by this grant and trained in their professional development to become independent researchers. One MS student and five undergrad students, have also been involved and partially supported to conduct research related to this funded project. Technical results of this research have been published in conferences in the areas of programming languages, compilers, architectures, and software engineering. The POET-based compiler infrastructure, together with its GUI, has been used in teaching both undergraudate and graduate-level compiler construction and high performance computing courses at UCCS.</p> </div> </div> </div> </div> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> </div> </div> </div> </div><br> <p>            Last Modified: 09/07/2020<br>      Modified by: Qing&nbsp;Yi</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[     Aiming to bring about pattern-driven techniques to specialize general-purpose compiler optimizations, this research has successfully practiced and validated a new methodology for developing compilers, where the data structure and algorithm implementations of software applications are independently normalized and categorized into commonly occurring patterns, compiler optimizations are made customizable components that can be flexibly composed, and all optimizations are closely coordinated and collectively specialized to attain a highest level of performance. Specifically, this new methodology has been captured through the prototype of several special-purpose optimizers, developed for matrix/vector computation kernels, stencil computation kernels, and the innermost loops of scientific applications. These optimizers have restructured how program analysis and optimizations are organized in traditional compilers, by transforming each optimization pass into customizable components that can dynamically communicate with each other, so that they can be flexibly composed and specialized to attain the highest level of performance. A web-based Graphical User Interface has been developed to support software developers interactively compose compiler optimizations to select and specialize the optimization of designated code regions in large applications.   As a second focus, this research has developed compiler techniques to support the separation of abstract representations of data structures and algorithms in large applications, thereby enabling compilers to accommodate the higher-level semantics of varying domains.  Speciically, a source-to-source compiler has been developed to automate the selection of data structure implementations based on a collection of adapter specifications describing the interfaces and use-case scenarios of the data structures, and a special-purpose compiler has been developed to automatically convert sequentical C/C++ data abstractions into concurrent implementations using state-of-the-art non-blocking synchronization mechanisms.  These techniques allow domain-specific knowledge be targeted without compromising the integrity of general purpose compilers, to explore synergized utilization of efficient data structure and algorithm implementations,   The deliverables of this research include a collection of specialized compiler opti- mizers for domains such as dense/sparse matrix computations, stencils, and concurrent data structures (e.g., queues and hash maps). A majority of these optimizers have been distributed open source online,. A graphical user interface has been developed to allow users interactively compose optimizations to selected code regions to improve the efficiency of their applications.  These source-to-source compilers are developed based on POET, a special-purose interpreted language for developing programmable and customizable compiler optimizations.  The POET language has been integrated as an embeded scripting langauge and distributed open-source together with the ROSE C/C++/Fortran source-to-source compiler from DOE/LLNL  and used together with the ROSE compiler to support specialized kernel optimizations and automated deployment of data structure implementations.      Two Ph.D students,and one post-doc visiting scholar, have been partially supported by this grant and trained in their professional development to become independent researchers. One MS student and five undergrad students, have also been involved and partially supported to conduct research related to this funded project. Technical results of this research have been published in conferences in the areas of programming languages, compilers, architectures, and software engineering. The POET-based compiler infrastructure, together with its GUI, has been used in teaching both undergraudate and graduate-level compiler construction and high performance computing courses at UCCS.                                                   Last Modified: 09/07/2020       Submitted by: Qing Yi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
