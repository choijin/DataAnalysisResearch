<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Data Model Verification for Web Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/15/2014</AwardEffectiveDate>
<AwardExpirationDate>06/30/2018</AwardExpirationDate>
<AwardTotalIntnAmount>499888.00</AwardTotalIntnAmount>
<AwardAmount>499888</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>A typical web application is a complicated distributed system&lt;br/&gt;that consists of multiple components that run concurrently on multiple&lt;br/&gt;machines and interact with each other in complex ways via the Internet.&lt;br/&gt;As one would expect, developing such software systems is an error-prone&lt;br/&gt;task, and existing software development processes are not robust enough&lt;br/&gt;to produce dependable web applications. The tools developed as part of this&lt;br/&gt;project could have a broad impact by enable software developers to eliminate &lt;br/&gt;programming errors in web applications before they are deployed to end users.&lt;br/&gt;&lt;br/&gt;The fundamental building block of a web application is the data model that&lt;br/&gt;specifies the types of objects and the relations among the objects stored by&lt;br/&gt;the application, the constraints on the relations, and the actions that update &lt;br/&gt;the data by sending queries to the back-end datastore based on the user input.  &lt;br/&gt;The project develops techniques that automatically extract a formal &lt;br/&gt;model from a given web application that characterizes how its data is stored&lt;br/&gt;and modified based on user actions, and infers properties about the formal data&lt;br/&gt;model.  It is then possible to check the inferred properties by converting correctness &lt;br/&gt;queries about the data model to queries about satisfiability of logical formulas,&lt;br/&gt;and repair the data model to enforce the properties that are expected&lt;br/&gt;to hold.</AbstractNarration>
<MinAmdLetterDate>07/09/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/09/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1423623</AwardID>
<Investigator>
<FirstName>Tevfik</FirstName>
<LastName>Bultan</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tevfik Bultan</PI_FULL_NAME>
<EmailAddress>bultan@cs.ucsb.edu</EmailAddress>
<PI_PHON>8058933735</PI_PHON>
<NSF_ID>000232096</NSF_ID>
<StartDate>07/09/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Santa Barbara</Name>
<CityName>Santa Barbara</CityName>
<ZipCode>931062050</ZipCode>
<PhoneNumber>8058934188</PhoneNumber>
<StreetAddress>Office of Research</StreetAddress>
<StreetAddress2><![CDATA[Rm 3227 Cheadle Hall]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA24</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>094878394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SANTA BARBARA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Santa Barbara]]></Name>
<CityName>Santa Barbara</CityName>
<StateCode>CA</StateCode>
<ZipCode>931065110</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>24</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA24</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~499888</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The growing influence of web applications in every aspect of society makes their dependability an immense concern.&nbsp;Due to the convenience of cloud-based data stores, many web applications store private and sensitive user data, loss or leakage of which could be disastrous for individuals and organizations. The complexity of data models and access control rules used by modern web applications leads to programming errors that can compromise both integrity and privacy of data. Hence,eliminating data integrity and access control errors from web applications is a critical problem.</p> <p>One approach to find such errors is to use formal verification techniques based on mathematical logic reasoning. However, as a first step, most formal verification techniques require extraction of a mathematical model which is a difficult problem in itself due to dynamic features of modern languages, and it is typically done either manually, or using ad hoc techniques.</p> <p>One positive advancement in web application development has been the adoption of software design patterns such as Model-View-Controller (MVC) pattern and&nbsp;Representational State Transfer (REST) pattern. Many popular web application development frameworks such as Ruby on Rails, Zend for PHP, CakePHP, Django for Python, and Spring for J2EE use these patterns.</p> <p>A fundamental building block of web applications that are built using these software design patterns is the data model, which specifies the object classes and the relations among them. The modularity and separation of concerns principles imposed by these software design patterns provide opportunities for developing customized verification and analysis techniques. In this project we developed an approach for automated verification of data models that 1) extracts a formal data model from a given web application, 2) converts verification queries about the data model to queries about the satisfiability of formulas in a decidable theory, and 3) uses a decision procedure to check the satisfiability of the resulting formulas. We implemented this approach and applied it to open-source Rails applications, discovering data model and access control errors in existing applications and demonstrating the feasibility of our approach.&nbsp;</p><br> <p>            Last Modified: 02/02/2019<br>      Modified by: Tevfik&nbsp;Bultan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The growing influence of web applications in every aspect of society makes their dependability an immense concern. Due to the convenience of cloud-based data stores, many web applications store private and sensitive user data, loss or leakage of which could be disastrous for individuals and organizations. The complexity of data models and access control rules used by modern web applications leads to programming errors that can compromise both integrity and privacy of data. Hence,eliminating data integrity and access control errors from web applications is a critical problem.  One approach to find such errors is to use formal verification techniques based on mathematical logic reasoning. However, as a first step, most formal verification techniques require extraction of a mathematical model which is a difficult problem in itself due to dynamic features of modern languages, and it is typically done either manually, or using ad hoc techniques.  One positive advancement in web application development has been the adoption of software design patterns such as Model-View-Controller (MVC) pattern and Representational State Transfer (REST) pattern. Many popular web application development frameworks such as Ruby on Rails, Zend for PHP, CakePHP, Django for Python, and Spring for J2EE use these patterns.  A fundamental building block of web applications that are built using these software design patterns is the data model, which specifies the object classes and the relations among them. The modularity and separation of concerns principles imposed by these software design patterns provide opportunities for developing customized verification and analysis techniques. In this project we developed an approach for automated verification of data models that 1) extracts a formal data model from a given web application, 2) converts verification queries about the data model to queries about the satisfiability of formulas in a decidable theory, and 3) uses a decision procedure to check the satisfiability of the resulting formulas. We implemented this approach and applied it to open-source Rails applications, discovering data model and access control errors in existing applications and demonstrating the feasibility of our approach.        Last Modified: 02/02/2019       Submitted by: Tevfik Bultan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
