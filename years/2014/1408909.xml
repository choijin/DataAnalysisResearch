<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:  Developing a Constructive Logic-Based Theory of Value-Based Systems Engineering</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2016</AwardExpirationDate>
<AwardTotalIntnAmount>150000.00</AwardTotalIntnAmount>
<AwardAmount>150000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07030000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>CMMI</Abbreviation>
<LongName>Div Of Civil, Mechanical, &amp; Manufact Inn</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rich Malak</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Systems engineering is the discipline responsible for assuring the overall success of modern, often software-intensive, engineering projects. Success ultimately hinges on the creation of value for all success-critical stakeholders. Creating value requires understanding, specifying, managing, validating, and evolving complex trade-offs across properties of systems, and linking such properties to stakeholder value. Such properties include, for instance, affordabilty, reliability, evolvability, safety, and confidentiality. Today, however, major projects continue to go awry in large part due to a failure to adequately specify and manage such properties and trade-offs. A core problem is that many properties are defined and understood so imprecisely that they cause miscommunication and confusion. A long history of attempts to use natural and quasi-mathematical language to define such properties has not solved this problem. This project aims to develop and evaluate the highly expressive mathematical, logical, and computational language of constructive logic to produce and validate precise models of system properties, trade-off spaces, and linkages between such properties and stakeholder values. From such formal language specifications, computer implementations of the models will be automatically generated and provided as web services for application and testing by systems engineers.&lt;br/&gt;&lt;br/&gt;Formal languages have the potential to clarify and reveal conceptual errors in imprecise, ambiguous, incomplete, and inconsistent natural language specifications. Type theoretical notations offer high expressiveness based on higher-order logic, polymorphic types, and the seamless integration of computational and propositional content, as well as the ability to extract certified software from specifications. This project will employ constructive logic to develop, test, and refine definitions and models of system properties, trade-offs, and the mapping of trade-off spaces to stakeholder preferences. This approach is novel in systems engineering, and important gaps in knowledge remain. To fill them, the following research problems will be addressed (1) determine how best to represent uncertainty in type theoretic definitions of probabilistic system properties; (2) determine appropriate mechanisms for structuring general  property theories that can reliably be specialized to specific projects; (3)  develop and evaluate languages and models of system properties, including evolvability properties, in particular; (4) develop and evaluate formal frameworks linking system design, property, and value spaces; (5) enable user communities to engage with such theoretical constructs through web services. The project will develop and test the hypothesis that theories based in constructive logic can help systems engineers to reason better about system designs, properties, trade-offs, and stakeholder value.</AbstractNarration>
<MinAmdLetterDate>07/17/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1408909</AwardID>
<Investigator>
<FirstName>Barry</FirstName>
<LastName>Boehm</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Barry W Boehm</PI_FULL_NAME>
<EmailAddress>boehm@usc.edu</EmailAddress>
<PI_PHON>2137408163</PI_PHON>
<NSF_ID>000449631</NSF_ID>
<StartDate>07/17/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Southern California</Name>
<CityName>Los Angeles</CityName>
<ZipCode>900890001</ZipCode>
<PhoneNumber>2137407762</PhoneNumber>
<StreetAddress>University Park</StreetAddress>
<StreetAddress2><![CDATA[3720 S. Flower St.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA37</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072933393</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF SOUTHERN CALIFORNIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072933393</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Southern California]]></Name>
<CityName>Los Angeles</CityName>
<StateCode>CA</StateCode>
<ZipCode>900890001</ZipCode>
<StreetAddress><![CDATA[3720 S. Flower]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>37</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA37</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8085</Code>
<Text>SYS-Systems Science</Text>
</ProgramElement>
<ProgramReference>
<Code>067E</Code>
<Text>DESIGN TOOLS</Text>
</ProgramReference>
<ProgramReference>
<Code>068E</Code>
<Text>DESIGN THEORY</Text>
</ProgramReference>
<ProgramReference>
<Code>8024</Code>
<Text>Complex Systems</Text>
</ProgramReference>
<ProgramReference>
<Code>8043</Code>
<Text>System Design and Simulation</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~150000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>Project Outcomes</strong></p> <p><strong>&nbsp;I</strong>n developing the IDEF5 stakeholder value-based, means-ends, value variation ontology structure for a system&rsquo;s quality attributes (SQs), it was expected that the SQs would form a class hierarchy with mutually exclusive and exhaustive relationships.&nbsp; However, a major exception was found with the SQ of Maintainability.&nbsp; Its own means-ends SQs did form mutually exclusive and exhaustive relationships.&nbsp; The means for achieving Maintainability are either Repairability to repair defects and restore its existing capabilities, or Modifiability to effect changes in the system&rsquo;s capabilities.&nbsp;&nbsp; However, Maintainability was found to be a means to more than one higher-level SQ.&nbsp; It was found to be a means to the end of a stakeholder value-based SQ of Life Cycle Efficiency via reduction of the system&rsquo;s Total Ownership Cost: a 2015 General Accountablity Office report indicated that of the total US Government information technology (IT) costs of $79 billion, $58 billion or 73% were devoted to operations and maintenance.</p> <p>&nbsp;</p> <p>But Maintainability was also a means to the end of a stakeholder value-based SQ of Changeability via reduced time to make changes, and also a means to the end of a stakeholder value-based SQ of Dependability, in reducing a system&rsquo;s Mean Time to Repair (MTTR) as a means of improving a system&rsquo;s Availability, in terms of its probability of providing its value-added services.&nbsp; Given a system&rsquo;s Reliability in terms of Mean Time Between Failures (MTBF), its Availability is calculated via the relationship Availability = MTBF / (MTBF+MTTR).</p> <p>&nbsp;</p> <p>This ubiquitous role of Maintainability led us to perform a research deep dive on understanding the nature of maintainability and on how it could be improved.&nbsp; We experimented with a number of automated maintainability indices and technical debt analyzers using data analytics exploration of open-source software systems, and a number of human-oriented understandability assessment methods analyzing anonymous-student performance of maintenance tasks, and found that no single approach was best.&nbsp; The human assessments produced more accurate maintainability estimates, but were more labor-intensive.&nbsp; The automated methods required less effort and produced less accurate estimates, but provided better identification of the sources of maintenance difficulty.&nbsp; This led to a synergetic combined approach in which the automated methods would identify the parts of large software systems best suited for human assessment.</p> <p>&nbsp;</p> <p>The analyses of large software system maintainability shortfalls also identified that the primary sources of maintainability expenditures and technical debt were non-technical, in that the acquisition budgets and schedules were overly optimistic, and that management, personnel, and technical preparations for system and software maintenance were underperformed.&nbsp; This has led to the development and early piloting of an analog of Technology Readiness Level assessment called the System and Software Maintainability Readiness Framework (SMRF) for management assessment and rectification of the adequacy of management, personnel, and technical preparations for maintenance.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 06/02/2017<br>      Modified by: Barry&nbsp;W&nbsp;Boehm</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Project Outcomes   In developing the IDEF5 stakeholder value-based, means-ends, value variation ontology structure for a system?s quality attributes (SQs), it was expected that the SQs would form a class hierarchy with mutually exclusive and exhaustive relationships.  However, a major exception was found with the SQ of Maintainability.  Its own means-ends SQs did form mutually exclusive and exhaustive relationships.  The means for achieving Maintainability are either Repairability to repair defects and restore its existing capabilities, or Modifiability to effect changes in the system?s capabilities.   However, Maintainability was found to be a means to more than one higher-level SQ.  It was found to be a means to the end of a stakeholder value-based SQ of Life Cycle Efficiency via reduction of the system?s Total Ownership Cost: a 2015 General Accountablity Office report indicated that of the total US Government information technology (IT) costs of $79 billion, $58 billion or 73% were devoted to operations and maintenance.     But Maintainability was also a means to the end of a stakeholder value-based SQ of Changeability via reduced time to make changes, and also a means to the end of a stakeholder value-based SQ of Dependability, in reducing a system?s Mean Time to Repair (MTTR) as a means of improving a system?s Availability, in terms of its probability of providing its value-added services.  Given a system?s Reliability in terms of Mean Time Between Failures (MTBF), its Availability is calculated via the relationship Availability = MTBF / (MTBF+MTTR).     This ubiquitous role of Maintainability led us to perform a research deep dive on understanding the nature of maintainability and on how it could be improved.  We experimented with a number of automated maintainability indices and technical debt analyzers using data analytics exploration of open-source software systems, and a number of human-oriented understandability assessment methods analyzing anonymous-student performance of maintenance tasks, and found that no single approach was best.  The human assessments produced more accurate maintainability estimates, but were more labor-intensive.  The automated methods required less effort and produced less accurate estimates, but provided better identification of the sources of maintenance difficulty.  This led to a synergetic combined approach in which the automated methods would identify the parts of large software systems best suited for human assessment.     The analyses of large software system maintainability shortfalls also identified that the primary sources of maintainability expenditures and technical debt were non-technical, in that the acquisition budgets and schedules were overly optimistic, and that management, personnel, and technical preparations for system and software maintenance were underperformed.  This has led to the development and early piloting of an analog of Technology Readiness Level assessment called the System and Software Maintainability Readiness Framework (SMRF) for management assessment and rectification of the adequacy of management, personnel, and technical preparations for maintenance.             Last Modified: 06/02/2017       Submitted by: Barry W Boehm]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
