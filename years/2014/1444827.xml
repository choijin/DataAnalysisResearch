<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Collaborative: Using Cognitive Techniques To Detect and Prevent Security Flaws</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2015</AwardEffectiveDate>
<AwardExpirationDate>12/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>134255.00</AwardTotalIntnAmount>
<AwardAmount>134255</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Software vulnerabilities are a substantial problem that exists in part due to programmer errors. A common cause is that programmers have a cognitive gap between their understanding of what actions code will perform and the actual actions the code performs. This work takes a first step toward rigorously understanding how humans think about code to (eventually) help to dramatically reduce bugs by building more human understandable programming languages and programs. This project will perform a pilot study to determine how to understand such security bugs, tease out the key aspects of them, and integrate this understanding into expert tutoring systems to help programmers detect them.&lt;br/&gt;&lt;br/&gt;Cognitive science techniques will be used to derive the core contributing issues in existing security vulnerabilities by slicing vulnerabilities into their component parts and evaluating the resulting bugs. This will create a generalized understanding of security issues which will enable easy reproduction and replication of similar source code, which is ideal input for an expert tutoring tool. The resulting expert tutoring tool will be used to evaluate the effectiveness of tutoring in helping programmers reduce reduce their susceptibility to similar bugs.</AbstractNarration>
<MinAmdLetterDate>08/19/2014</MinAmdLetterDate>
<MaxAmdLetterDate>03/03/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1444827</AwardID>
<Investigator>
<FirstName>Justin</FirstName>
<LastName>Cappos</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME>Dr.</PI_SUFX_NAME>
<PI_FULL_NAME>Justin Cappos</PI_FULL_NAME>
<EmailAddress>jcappos@nyu.edu</EmailAddress>
<PI_PHON>7182603550</PI_PHON>
<NSF_ID>000600621</NSF_ID>
<StartDate>08/19/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Yanyan</FirstName>
<LastName>Zhuang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yanyan Zhuang</PI_FULL_NAME>
<EmailAddress>yzhuang@uccs.edu</EmailAddress>
<PI_PHON>7192553062</PI_PHON>
<NSF_ID>000656847</NSF_ID>
<StartDate>08/19/2014</StartDate>
<EndDate>03/03/2017</EndDate>
<RoleCode>Former Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Samuel</FirstName>
<LastName>Weber</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Samuel Weber</PI_FULL_NAME>
<EmailAddress>samweber@nyu.edu</EmailAddress>
<PI_PHON>9177334611</PI_PHON>
<NSF_ID>000663445</NSF_ID>
<StartDate>03/03/2017</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>New York University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100121019</ZipCode>
<PhoneNumber>2129982121</PhoneNumber>
<StreetAddress>70 WASHINGTON SQUARE S</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041968306</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NEW YORK UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041968306</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[New York University]]></Name>
<CityName>BROOKLYN</CityName>
<StateCode>NY</StateCode>
<ZipCode>112013846</ZipCode>
<StreetAddress><![CDATA[15 Metrotech Center]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY08</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>8225</Code>
<Text>SaTC Special Projects</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~134255</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The Atoms of Confusion project was initiated to identify the potential root causes of developer misunderstandings about software code. The research team started with a hypothesis that developers often struggle to understand the code they maintain and implement because of patterns within the code itself. We labeled this sense of misunderstanding as "confusion," and further defined that term as what happens when a developer anticipates a different output when a piece of code is run than what a computer would actually deliver.&nbsp;&nbsp;</p> <p><span id="docs-internal-guid-02938b3f-7bff-3e7e-dea8-4fea64725116"><span>The importance of the project lies largely in the consequences it seeks to prevent. The type of confusion described above can be costly, both in economic and human terms, as misunderstandings can easily lead to compromisable flaws. </span></span></p> <p><span id="docs-internal-guid-02938b3f-7bff-3e7e-dea8-4fea64725116"><span>Over the last two years, the team has identified small, self-contained patterns within lines of code as a source of this confusion.Through the use of empirical, objective techniques, and data collected through carefully constructed user studies, we have identified 15 of these patterns that we have named "Atoms of Confusion." With our hypothesis that the source of the confusion was in the code itself confirmed, the past year has been devoted to&nbsp;<span id="docs-internal-guid-02938b3f-7c01-e5eb-b0f6-36d6778a9338"><span>the &ldquo;whys, hows, and whats&rdquo; behind what we have found. In additional studies, we've begun to measure a number of factors that can affect levels of confusion, including where the atoms are located within a piece of code, and&nbsp;</span></span></span></span>the potential influence of native languages on programmer perceptions. This enhanced knowledge of what makes atoms confusing can form the groundwork for methods that can help developers avoid their use, and remove them when discovered. We've also begun to understand just how omnipresent these atoms are within code "in the wild," through&nbsp; a quantitative assessment of the frequency of atoms in real-world software.&nbsp;</p> <p><span id="docs-internal-guid-02938b3f-7c04-8c96-f86a-323ae1ed1415"> </span></p> <p dir="ltr"><span>As our knowledge of these atoms and how they create confusion for those who maintain software develops, it makes it possible to pursue a number of related goals. In the near future, we hope to translate what we learn about atoms into </span><span>the development and implementation of tools, training programs, and code guidelines that can help programmers work more efficiently, and create securer and more reliable systems and software. In terms of security, these efforts represent a first step towards a more holistic approach that incorporates security as a key element in the initial design of software. Stepping away from the current approach to security as an &ldquo;add-on&rdquo; feature can ensure fewer vulnerabilities in the future, as well as reduced maintenance costs.</span></p> <p dir="ltr"><span>On a broader scope, it is our hope that as other researchers learn of this work it will spark additional initiatives in this area of human/source code interaction. From the beginning, we have committed to making all of our data (once scrubbed of personally-identifying information) available to other researchers online, and this policy has continued. It is our hope that this free exchange of data will make it easier for other researchers to replicate or expand on our work. Furthemore, we hope that this commitment to transparency may encourage others doing related work to also share their data with the general public. Lastly, we view this project as an</span><span> exploratory step in finding ways to design software that is more "human-comprehensible.&rdquo; As such, it can help to bridge the natural vs. machine language gap that contributes to many safety and productivity issues. </span></p> <div><span><br /></span></div> <p>&nbsp;</p> <p><span><span><span><span><br /></span></span></span></span></p><br> <p>            Last Modified: 02/20/2018<br>      Modified by: Justin&nbsp;Cappos</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The Atoms of Confusion project was initiated to identify the potential root causes of developer misunderstandings about software code. The research team started with a hypothesis that developers often struggle to understand the code they maintain and implement because of patterns within the code itself. We labeled this sense of misunderstanding as "confusion," and further defined that term as what happens when a developer anticipates a different output when a piece of code is run than what a computer would actually deliver.    The importance of the project lies largely in the consequences it seeks to prevent. The type of confusion described above can be costly, both in economic and human terms, as misunderstandings can easily lead to compromisable flaws.   Over the last two years, the team has identified small, self-contained patterns within lines of code as a source of this confusion.Through the use of empirical, objective techniques, and data collected through carefully constructed user studies, we have identified 15 of these patterns that we have named "Atoms of Confusion." With our hypothesis that the source of the confusion was in the code itself confirmed, the past year has been devoted to the "whys, hows, and whats" behind what we have found. In additional studies, we've begun to measure a number of factors that can affect levels of confusion, including where the atoms are located within a piece of code, and the potential influence of native languages on programmer perceptions. This enhanced knowledge of what makes atoms confusing can form the groundwork for methods that can help developers avoid their use, and remove them when discovered. We've also begun to understand just how omnipresent these atoms are within code "in the wild," through  a quantitative assessment of the frequency of atoms in real-world software.     As our knowledge of these atoms and how they create confusion for those who maintain software develops, it makes it possible to pursue a number of related goals. In the near future, we hope to translate what we learn about atoms into the development and implementation of tools, training programs, and code guidelines that can help programmers work more efficiently, and create securer and more reliable systems and software. In terms of security, these efforts represent a first step towards a more holistic approach that incorporates security as a key element in the initial design of software. Stepping away from the current approach to security as an "add-on" feature can ensure fewer vulnerabilities in the future, as well as reduced maintenance costs. On a broader scope, it is our hope that as other researchers learn of this work it will spark additional initiatives in this area of human/source code interaction. From the beginning, we have committed to making all of our data (once scrubbed of personally-identifying information) available to other researchers online, and this policy has continued. It is our hope that this free exchange of data will make it easier for other researchers to replicate or expand on our work. Furthemore, we hope that this commitment to transparency may encourage others doing related work to also share their data with the general public. Lastly, we view this project as an exploratory step in finding ways to design software that is more "human-comprehensible." As such, it can help to bridge the natural vs. machine language gap that contributes to many safety and productivity issues.                Last Modified: 02/20/2018       Submitted by: Justin Cappos]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
