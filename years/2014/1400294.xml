<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research:  Developing a Constructive Logic-Based Theory of Value-Based Systems Engineering</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>150000.00</AwardTotalIntnAmount>
<AwardAmount>150000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07030000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>CMMI</Abbreviation>
<LongName>Div Of Civil, Mechanical, &amp; Manufact Inn</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Rob Stone</SignBlockName>
<PO_EMAI>rstone@nsf.gov</PO_EMAI>
<PO_PHON>7032924613</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Systems engineering is the discipline responsible for assuring the overall success of modern, often software-intensive, engineering projects. Success ultimately hinges on the creation of value for all success-critical stakeholders. Creating value requires understanding, specifying, managing, validating, and evolving complex trade-offs across properties of systems, and linking such properties to stakeholder value. Such properties include, for instance, affordabilty, reliability, evolvability, safety, and confidentiality. Today, however, major projects continue to go awry in large part due to a failure to adequately specify and manage such properties and trade-offs. A core problem is that many properties are defined and understood so imprecisely that they cause miscommunication and confusion. A long history of attempts to use natural and quasi-mathematical language to define such properties has not solved this problem. This project aims to develop and evaluate the highly expressive mathematical, logical, and computational language of constructive logic to produce and validate precise models of system properties, trade-off spaces, and linkages between such properties and stakeholder values. From such formal language specifications, computer implementations of the models will be automatically generated and provided as web services for application and testing by systems engineers.&lt;br/&gt;&lt;br/&gt;Formal languages have the potential to clarify and reveal conceptual errors in imprecise, ambiguous, incomplete, and inconsistent natural language specifications. Type theoretical notations offer high expressiveness based on higher-order logic, polymorphic types, and the seamless integration of computational and propositional content, as well as the ability to extract certified software from specifications. This project will employ constructive logic to develop, test, and refine definitions and models of system properties, trade-offs, and the mapping of trade-off spaces to stakeholder preferences. This approach is novel in systems engineering, and important gaps in knowledge remain. To fill them, the following research problems will be addressed (1) determine how best to represent uncertainty in type theoretic definitions of probabilistic system properties; (2) determine appropriate mechanisms for structuring general  property theories that can reliably be specialized to specific projects; (3)  develop and evaluate languages and models of system properties, including evolvability properties, in particular; (4) develop and evaluate formal frameworks linking system design, property, and value spaces; (5) enable user communities to engage with such theoretical constructs through web services. The project will develop and test the hypothesis that theories based in constructive logic can help systems engineers to reason better about system designs, properties, trade-offs, and stakeholder value.</AbstractNarration>
<MinAmdLetterDate>07/17/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1400294</AwardID>
<Investigator>
<FirstName>Kevin</FirstName>
<LastName>Sullivan</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kevin J Sullivan</PI_FULL_NAME>
<EmailAddress>sullivan@cs.virginia.edu</EmailAddress>
<PI_PHON>4349822200</PI_PHON>
<NSF_ID>000086645</NSF_ID>
<StartDate>07/17/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Virginia Main Campus</Name>
<CityName>CHARLOTTESVILLE</CityName>
<ZipCode>229044195</ZipCode>
<PhoneNumber>4349244270</PhoneNumber>
<StreetAddress>P.O.  BOX 400195</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>VA05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>065391526</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RECTOR &amp; VISITORS OF THE UNIVERSITY OF VIRGINIA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>065391526</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Virginia]]></Name>
<CityName>Charlottesville</CityName>
<StateCode>VA</StateCode>
<ZipCode>229044195</ZipCode>
<StreetAddress><![CDATA[P. O. Box 400195]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>VA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8085</Code>
<Text>SYS-Systems Science</Text>
</ProgramElement>
<ProgramReference>
<Code>067E</Code>
<Text>DESIGN TOOLS</Text>
</ProgramReference>
<ProgramReference>
<Code>068E</Code>
<Text>DESIGN THEORY</Text>
</ProgramReference>
<ProgramReference>
<Code>8024</Code>
<Text>Complex Systems</Text>
</ProgramReference>
<ProgramReference>
<Code>8043</Code>
<Text>System Design and Simulation</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~150000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-8a94ac0c-7fff-66b3-1b3e-b534c67405ea"> </span></p> <p dir="ltr"><span>This project addressed the problem of managing the </span><span>non-functional properties</span><span> of engineered systems. Whereas functional properties characterize what a system does--store information, move materials, etc.---non-functional properties characterize how well system does it. Non-functional properties include affordability, security, safety, reliability, usability, maintainability, evolvability, agility, resiliency etc. They are sometimes called </span><span>ilities,</span><span> or </span><span>system qualities </span><span>(SQs)</span><span>.</span></p> <p dir="ltr"><span>Today, systems engineering theory, methods, and tools are strong with respect to formulating the </span><span>functional properties</span><span> of engineered systems. By contrast, current theory and practice are weak with respect to </span><span>non-functional properties</span><span>. &nbsp;These weaknesses contribute to costly operational system and project failures. This project aimed to strengthen systems engineering theory with respect to ontologies for engineering non-functional properties of major systems.</span></p> <p dir="ltr"><span>Non-functional properties are as critical as the functional properties of most systems. An air transport without acceptable </span><span>safety </span><span>properties will not be trusted. A deterrent that does not meet </span><span>reliability</span><span> and </span><span>accuracy</span><span> requirements may fail to deter, leading to larger political and military failures. A system that is </span><span>unaffordable</span><span> fails in another way. The weaknesses of systems engineering in these areas cause huge inefficiencies in major projects, reducing our quality of life, and lead to lead to system failures that put people and nations at risk.</span></p> <p dir="ltr"><span>This project addressed the lack of comprehensive, effective ontologies of non-functional system properties. &nbsp;Attention has been given to properties in isolation. Researchers have organized around safety, for example, or reliability, or usability. But comprehensive treatment of all system properties and tradeoffs has received less attention. Different terms are often used for the same property, and one term for different properties, leading to misunderstandings and errors. Different stakeholders in a project often have unresolved conflicting priorities for non-functional properties. Precise, complete representations of non-functional properties are often missing. Existing standards, e.g., ISO/IEC 25010, are lacking in the structure and precision required by contemporary systems and projects. Without agreement on properties of interest, shared languages for formulating them, and a comprehensive approach to managing properties and tradeoffs, it will be hard to devise the practices and tools needed for successful engineering of next-generation systems.</span></p> <p dir="ltr"><span>A key intellectual outcome of this project was the development of a prototype comprehensive system quality ontology and its formalization using the logic of type theory. Key concepts include the following. First, non-functional properties (SQs) are organized in means-ends hierarchies. Without security, privacy protection fails, for example, so security is an SQ that supports privacy. Second, SQs are diverse. The draft ontology is comprehensive, spanning concerns from safety and reliability to affordability, usability, etc. Third, the ontology provides a framework for representing required, predicted, and measured non-functional properties, varying by stakeholder, project phase, context of use, and other parameters. It establishes a framework for modeling and managing conflicts and synergies among properties, and stakeholder priorities across the life cycle.</span></p> <p dir="ltr"><span>Central to this PI&rsquo;s efforts, the project formalized the ontology as a language of non-functional system properties embedded in the language of type theory. Type theory, or constructive logic, has emerged as a major enabler of the specification of the syntax and semantics of formal languages: from logics, to programming languages, to abstract mathematics. &nbsp;This project formalized the expression of comprehensive SQ requirements as values of a recursively defined, polymorphic SQ expression type. At the leaves of an expression tree are representations of basic SQs. The structure of a syntax tree expresses the SQ means-ends hierarchy. A key insight was that at the leaves of such a tree, different forms of expression would be needed for &ldquo;the same&rdquo; quality, from system to system. The tracking </span><span>accuracy</span><span> of a satellite tracking radar, for example, might be expressed only in the direction of motion in one system, for example, but also laterally in another. The formal language was thus defined to be polymorphic with respect to individual SQ modeling languages and formal system models. &nbsp;Evidence that leaf-level requirements are met, in the form of either deductive formal-system-model-based proofs, or axiomatically accepted assumptions certified by other means, are aggregated, yielding a form of evidence tree that might be used to certify that a system has addressed (and met) all relevant SQ requirements.</span></p> <p dir="ltr"><span>This project also recognized that software impacts numerous SQs and that malfunctions undercut multiple SQs. The project addressed an especially worrying failure mode in which software is over-abstracted from, and thus under-constrained in its behavior with respect to, the physics of the system. A key outcome of this work was the notion of </span><span>real-world type annotations </span><span>that, added to code, give it a precise physical interpretation. Code can then be checked for consistency with the physics of the system. In terms of broader impact, such checking could have avoided the loss of the Mars Polar Orbiter Mission, which failed due to erroneous computations on over-abstracted representations of physical impulses inadvertently represented using incompatible (metric and English) physical units.</span></p><br> <p>            Last Modified: 05/07/2019<br>      Modified by: Kevin&nbsp;J&nbsp;Sullivan</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   This project addressed the problem of managing the non-functional properties of engineered systems. Whereas functional properties characterize what a system does--store information, move materials, etc.---non-functional properties characterize how well system does it. Non-functional properties include affordability, security, safety, reliability, usability, maintainability, evolvability, agility, resiliency etc. They are sometimes called ilities, or system qualities (SQs). Today, systems engineering theory, methods, and tools are strong with respect to formulating the functional properties of engineered systems. By contrast, current theory and practice are weak with respect to non-functional properties.  These weaknesses contribute to costly operational system and project failures. This project aimed to strengthen systems engineering theory with respect to ontologies for engineering non-functional properties of major systems. Non-functional properties are as critical as the functional properties of most systems. An air transport without acceptable safety properties will not be trusted. A deterrent that does not meet reliability and accuracy requirements may fail to deter, leading to larger political and military failures. A system that is unaffordable fails in another way. The weaknesses of systems engineering in these areas cause huge inefficiencies in major projects, reducing our quality of life, and lead to lead to system failures that put people and nations at risk. This project addressed the lack of comprehensive, effective ontologies of non-functional system properties.  Attention has been given to properties in isolation. Researchers have organized around safety, for example, or reliability, or usability. But comprehensive treatment of all system properties and tradeoffs has received less attention. Different terms are often used for the same property, and one term for different properties, leading to misunderstandings and errors. Different stakeholders in a project often have unresolved conflicting priorities for non-functional properties. Precise, complete representations of non-functional properties are often missing. Existing standards, e.g., ISO/IEC 25010, are lacking in the structure and precision required by contemporary systems and projects. Without agreement on properties of interest, shared languages for formulating them, and a comprehensive approach to managing properties and tradeoffs, it will be hard to devise the practices and tools needed for successful engineering of next-generation systems. A key intellectual outcome of this project was the development of a prototype comprehensive system quality ontology and its formalization using the logic of type theory. Key concepts include the following. First, non-functional properties (SQs) are organized in means-ends hierarchies. Without security, privacy protection fails, for example, so security is an SQ that supports privacy. Second, SQs are diverse. The draft ontology is comprehensive, spanning concerns from safety and reliability to affordability, usability, etc. Third, the ontology provides a framework for representing required, predicted, and measured non-functional properties, varying by stakeholder, project phase, context of use, and other parameters. It establishes a framework for modeling and managing conflicts and synergies among properties, and stakeholder priorities across the life cycle. Central to this PI?s efforts, the project formalized the ontology as a language of non-functional system properties embedded in the language of type theory. Type theory, or constructive logic, has emerged as a major enabler of the specification of the syntax and semantics of formal languages: from logics, to programming languages, to abstract mathematics.  This project formalized the expression of comprehensive SQ requirements as values of a recursively defined, polymorphic SQ expression type. At the leaves of an expression tree are representations of basic SQs. The structure of a syntax tree expresses the SQ means-ends hierarchy. A key insight was that at the leaves of such a tree, different forms of expression would be needed for "the same" quality, from system to system. The tracking accuracy of a satellite tracking radar, for example, might be expressed only in the direction of motion in one system, for example, but also laterally in another. The formal language was thus defined to be polymorphic with respect to individual SQ modeling languages and formal system models.  Evidence that leaf-level requirements are met, in the form of either deductive formal-system-model-based proofs, or axiomatically accepted assumptions certified by other means, are aggregated, yielding a form of evidence tree that might be used to certify that a system has addressed (and met) all relevant SQ requirements. This project also recognized that software impacts numerous SQs and that malfunctions undercut multiple SQs. The project addressed an especially worrying failure mode in which software is over-abstracted from, and thus under-constrained in its behavior with respect to, the physics of the system. A key outcome of this work was the notion of real-world type annotations that, added to code, give it a precise physical interpretation. Code can then be checked for consistency with the physics of the system. In terms of broader impact, such checking could have avoided the loss of the Mars Polar Orbiter Mission, which failed due to erroneous computations on over-abstracted representations of physical impulses inadvertently represented using incompatible (metric and English) physical units.       Last Modified: 05/07/2019       Submitted by: Kevin J Sullivan]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
