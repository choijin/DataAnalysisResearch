<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>TWC: Medium: A Layered Approach to Securing Web Services</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2014</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>900000.00</AwardTotalIntnAmount>
<AwardAmount>900000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The modern web experience is dynamic, providing users with a highly responsive interface through which to interact with the world. Today's mechanisms allow servers---even those which are controlled by an attacker---to download arbitrary programs into a user's browser.  It is extraordinarily difficult to secure the web browser (and its user) against attack in this scenario.  While tools and techniques are useful to analyze and restrict downloaded code, they are by their very nature incomplete.  As a result, the security of web services relies on a series of ad hoc, service-provided techniques. Thus even large organizations routinely outsource too-difficult-to-secure web services.&lt;br/&gt;&lt;br/&gt;This project will explore an alternative: A modern, dynamic web experience with a focus on safety. Rather than attempting to make arbitrary code safe, it aims to design a safe interface which is far less complex than today's browser environment.  This interface will be analyzed for its security properties.  It will result in a more tractable environment in which to secure web applications than exists today.  Many security properties will be built in; such properties are not dependent on the server side-efforts to secure them.  Thus, when using this interface, visiting web sites will pose a smaller threat to users, even from sites which are under the control of an attacker.  The project will develop a new semantic foundation for web security and make available open source tools and educational materials for the next generation of web developers.</AbstractNarration>
<MinAmdLetterDate>07/24/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/24/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1409868</AwardID>
<Investigator>
<FirstName>Jon</FirstName>
<LastName>Solworth</LastName>
<PI_MID_INIT>A</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jon A Solworth</PI_FULL_NAME>
<EmailAddress>solworth@cs.uic.edu</EmailAddress>
<PI_PHON>3129960955</PI_PHON>
<NSF_ID>000190427</NSF_ID>
<StartDate>07/24/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Bernstein</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel J Bernstein</PI_FULL_NAME>
<EmailAddress>proposal-qlznvbgnroelrkdkzl@box.cr.yp.to</EmailAddress>
<PI_PHON>7739358017</PI_PHON>
<NSF_ID>000147338</NSF_ID>
<StartDate>07/24/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Christopher</FirstName>
<LastName>Kanich</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christopher Kanich</PI_FULL_NAME>
<EmailAddress>ckanich@uic.edu</EmailAddress>
<PI_PHON/>
<NSF_ID>000632966</NSF_ID>
<StartDate>07/24/2014</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606124305</ZipCode>
<PhoneNumber>3129962862</PhoneNumber>
<StreetAddress>809 S. Marshfield Avenue</StreetAddress>
<StreetAddress2><![CDATA[MB 502, M/C 551]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>098987217</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Chicago]]></Name>
<CityName>Chicago</CityName>
<StateCode>IL</StateCode>
<ZipCode>606077053</ZipCode>
<StreetAddress><![CDATA[851 South Morgan]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~900000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>It has been extraordinarily difficult to produce secure and private software.&nbsp; In general, it is necessary to show that Security and Privacy Properties hold for the program.&nbsp; These properties are mathematical statements.&nbsp; Unfortunately due to Rice's Theorem,&nbsp; any non-trivial property is undecidable.&nbsp; This means that we cannot prove that a property holds for an arbitraruy program.</p> <p>In the traditional software stacks, this means that it is impossible to automatically find where the properties are violated, and even if it were possible to do so, they would still need to be fixed and rechecked.&nbsp; This is an expensive process, in addition to being incomplete.</p> <p>In contrast, the semantics of system software can guarantee security and privacy properties hold.&nbsp; For example, in the Ethos OS all networking is encrypted, meaning that the contents of network packets are not readable outside the host.&nbsp; This happens automatically on all networking in Ethos, without requiring any application code. Hence encrypted networking is guarateed in Ethos and is impossible to bypass.&nbsp; (In the traditional case, encrypted networking is the responsibility of the application programmer to get correct, and so can be missing or incorrectly implemented.)</p> <p>This project looks at webApps---applications built using the web.&nbsp; To fuel such applications, code is executed on the client to make the webApp highly interactive.&nbsp; But this exposes the web browser to code which may be insecure or even malicious.&nbsp; Our goal is to make webApps safe, regarless of the intentions and capability of the service,</p> <p>To do that we define high level components----and then define behavior associated with these components.&nbsp; The behavior is controlled by client-side software, and hence is trusted.&nbsp; But the millions of different sevices are not trusted, and yet provide desired security and privacy properites.&nbsp; This properties are the result of the CRISP protocol (an HTTP alternative) whose semantics are designed to ensure these properties.</p> <p>Almost all the security and privacy building blocks are provided by the Ethos OS.&nbsp; A client-side proxy translations CRISP to HTTP and downloads the code into an off-the-shelf browser.&nbsp; We note that the proxy is much smaller than the browser and thus easier to check for correctness.</p> <p>We build several webApps variants, showing the genrality, usabiility and also the security and privacy propeties of this technique.</p> <p>The project generated MS protjects and a PhD thesis, and was used in a variety of courses.</p> <p>&nbsp;</p><br> <p>            Last Modified: 06/21/2020<br>      Modified by: Jon&nbsp;A&nbsp;Solworth</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ It has been extraordinarily difficult to produce secure and private software.  In general, it is necessary to show that Security and Privacy Properties hold for the program.  These properties are mathematical statements.  Unfortunately due to Rice's Theorem,  any non-trivial property is undecidable.  This means that we cannot prove that a property holds for an arbitraruy program.  In the traditional software stacks, this means that it is impossible to automatically find where the properties are violated, and even if it were possible to do so, they would still need to be fixed and rechecked.  This is an expensive process, in addition to being incomplete.  In contrast, the semantics of system software can guarantee security and privacy properties hold.  For example, in the Ethos OS all networking is encrypted, meaning that the contents of network packets are not readable outside the host.  This happens automatically on all networking in Ethos, without requiring any application code. Hence encrypted networking is guarateed in Ethos and is impossible to bypass.  (In the traditional case, encrypted networking is the responsibility of the application programmer to get correct, and so can be missing or incorrectly implemented.)  This project looks at webApps---applications built using the web.  To fuel such applications, code is executed on the client to make the webApp highly interactive.  But this exposes the web browser to code which may be insecure or even malicious.  Our goal is to make webApps safe, regarless of the intentions and capability of the service,  To do that we define high level components----and then define behavior associated with these components.  The behavior is controlled by client-side software, and hence is trusted.  But the millions of different sevices are not trusted, and yet provide desired security and privacy properites.  This properties are the result of the CRISP protocol (an HTTP alternative) whose semantics are designed to ensure these properties.  Almost all the security and privacy building blocks are provided by the Ethos OS.  A client-side proxy translations CRISP to HTTP and downloads the code into an off-the-shelf browser.  We note that the proxy is much smaller than the browser and thus easier to check for correctness.  We build several webApps variants, showing the genrality, usabiility and also the security and privacy propeties of this technique.  The project generated MS protjects and a PhD thesis, and was used in a variety of courses.          Last Modified: 06/21/2020       Submitted by: Jon A Solworth]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
