<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research: Compiler Coaching</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2014</AwardEffectiveDate>
<AwardExpirationDate>12/31/2018</AwardExpirationDate>
<AwardTotalIntnAmount>316433.00</AwardTotalIntnAmount>
<AwardAmount>316433</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Title: SHF: Small: Collaborative Research: Compiler Coaching&lt;br/&gt;&lt;br/&gt;The ``Compiler Coaching'' (Dialog) project represents an investment in programming language tools and technology.  Software engineers use high-level programming languages on a daily basis to produce the apps and applications that everyone uses and that control everybody's lives. Once a programming language translator accepts a program as grammatically correct, it creates impenetrable computer codes without informing the programmer how well (fast or slow, small or large, energy hogging or efficient) these codes will work.  Indeed, modern programming languages employ increasingly sophisticated translation techniques and have become obscure black boxes to the working engineer.  The goal of the Dialog project is to create channels of communication between these translation processes and software engineers, with the expectation that the latter can use this new source of&lt;br/&gt;information to improve the speed, size, or energy consumption of their software.&lt;br/&gt;&lt;br/&gt;The PIs will explore the Dialog idea in two optimizing compiler settings, one on the conventional side and one on the modern one: for the Racket language, a teaching and research vehicle that they can modify as needed to create the desired channel, and the JavaScript programming language, the standardized tool for existing Web applications. The intellectual merits concern the fundamental principles of creating such communication channels and frameworks for gathering empirical evidence on how these channels benefit the working software engineer.  These results should enable the developers of any programming language to implement similar channels of communication to help their clients. The broader impacts are twofold. On one hand, the project is likely to positively impact the lives of working software engineers as industrial programming language creators adapt the Dialog idea. On the other hand, the project will contribute to a two-decades old, open-source programming language project with a large and longstanding history of educational outreach at multiple levels. The project has influenced hundreds of thousands of high school students in the past and is likely to do so in the future.</AbstractNarration>
<MinAmdLetterDate>07/02/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1421412</AwardID>
<Investigator>
<FirstName>Matthias</FirstName>
<LastName>Felleisen</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Matthias Felleisen</PI_FULL_NAME>
<EmailAddress>matthias@ccs.neu.edu</EmailAddress>
<PI_PHON>6173732462</PI_PHON>
<NSF_ID>000286813</NSF_ID>
<StartDate>07/02/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northeastern University</Name>
<CityName>BOSTON</CityName>
<ZipCode>021155005</ZipCode>
<PhoneNumber>6173733004</PhoneNumber>
<StreetAddress>360 HUNTINGTON AVE</StreetAddress>
<StreetAddress2><![CDATA[177-500]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001423631</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHEASTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001423631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northeastern University]]></Name>
<CityName/>
<StateCode>MA</StateCode>
<ZipCode>021155005</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>6892</Code>
<Text>CI REUSE</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7433</Code>
<Text>CyberInfra Frmwrk 21st (CIF21)</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~316433</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Software engineers develop computer code in high-level programminglanguages and use compilers to translate their programs into instructionsfor a computer. Like a human translator, a compiler can choose from a(large) range of different translations. While each of them faithfullyreflects the meaning of the oroginal program, some of them finish much morequickly than others---and people tend to prefer getting results rathersooner or later. However, the complexity of the compiler makes it hard forsoftware engineers to predict the performance characteristics of their code.&nbsp;</p> <p><br />This project investigated how a compiler could be supplemented withsoftware tools to explain its approach to translating programs. Theresearchers expected that these explanations would help software engineersto improve their understanding of a program's performance characteristicsand improve the performance itself. The project had two outcomes.&nbsp;</p> <p><br />The first outcome is a tool that tells a software engineer when thecompiler could have chosen a "fast" translation if the program had beenwritten slightly differently. Using this information, a software engineercan decide whether the proposed change affects the meaning of the programin a significant way and, if not, accept the compiler's proposedimprovements.&nbsp;</p> <p><br />The second outcome is a novel idea of how to analyze the performance ofprograms. Existing performance analysis tools gather information during aprogram run that helps them highlight the most expensive individual linesor small contiguous segments of code. While this information is useful,modern programming languages offer features (concepts like groups of nounsor verbs) that cause slowdowns if used the wrong way but whose cost cannotbe understood in terms of a small number of contiguous lines of code. Theproject's "feature specific" performance analysis remedies this situation.The research term assisted Mozilla to adapt the idea of a feature-specificprofiler for its Firefox developer tool suite.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 02/07/2019<br>      Modified by: Matthias&nbsp;Felleisen</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Software engineers develop computer code in high-level programminglanguages and use compilers to translate their programs into instructionsfor a computer. Like a human translator, a compiler can choose from a(large) range of different translations. While each of them faithfullyreflects the meaning of the oroginal program, some of them finish much morequickly than others---and people tend to prefer getting results rathersooner or later. However, the complexity of the compiler makes it hard forsoftware engineers to predict the performance characteristics of their code.    This project investigated how a compiler could be supplemented withsoftware tools to explain its approach to translating programs. Theresearchers expected that these explanations would help software engineersto improve their understanding of a program's performance characteristicsand improve the performance itself. The project had two outcomes.    The first outcome is a tool that tells a software engineer when thecompiler could have chosen a "fast" translation if the program had beenwritten slightly differently. Using this information, a software engineercan decide whether the proposed change affects the meaning of the programin a significant way and, if not, accept the compiler's proposedimprovements.    The second outcome is a novel idea of how to analyze the performance ofprograms. Existing performance analysis tools gather information during aprogram run that helps them highlight the most expensive individual linesor small contiguous segments of code. While this information is useful,modern programming languages offer features (concepts like groups of nounsor verbs) that cause slowdowns if used the wrong way but whose cost cannotbe understood in terms of a small number of contiguous lines of code. Theproject's "feature specific" performance analysis remedies this situation.The research term assisted Mozilla to adapt the idea of a feature-specificprofiler for its Firefox developer tool suite.                Last Modified: 02/07/2019       Submitted by: Matthias Felleisen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
