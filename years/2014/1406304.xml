<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR: Medium: Collaborative Research: Programming Abstractions and Systems Support for GPU-Based Acceleration of Irregular Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2014</AwardEffectiveDate>
<AwardExpirationDate>09/30/2019</AwardExpirationDate>
<AwardTotalIntnAmount>360001.00</AwardTotalIntnAmount>
<AwardAmount>376001</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Marilyn McClure</SignBlockName>
<PO_EMAI>mmcclure@nsf.gov</PO_EMAI>
<PO_PHON>7032925197</PO_PHON>
</ProgramOfficer>
<AbstractNarration>There is growing interest in using Graphics Processing Units (GPUs) to increase the performance and the energy efficiency of applications outside the graphics domain. GPUs are particularly suited to run regular programs that perform operations similar to pixel processing, and they can offer a large advantage over multicore CPUs in terms of performance, price, and energy efficiency in this domain. Not surprisingly, GPUs are increasingly appearing in devices ranging from handhelds to supercomputers.&lt;br/&gt;&lt;br/&gt;Although regular algorithms are very important, new problem domains such as computational biology, data mining, and social networks necessitate very different algorithmic foundations: they require building, computing with, and updating large graphs. Unfortunately, relatively little is understood about how to implement irregular applications efficiently on current GPU architectures. Features such as lockstep operation and the need to minimize thread divergence and maximize memory coalescing pose particular challenges to efficient implementation of irregular algorithms. Nevertheless, some recent successes in hand-porting irregular codes suggest that the difficulties lie not in the GPU hardware but in the immaturity of the state of the art of writing and tuning GPU code due to the lack of general, well-understood optimization techniques.&lt;br/&gt;&lt;br/&gt;This work will develop programming notations, compiler optimizations, and runtime system support that will enable programmers to express their algorithms at a high level of abstraction but still yield good performance. Projected tasks include producing highly optimized handwritten GPU implementations of important irregular algorithms and adding them to the LonestarGPU benchmark suite, identifying common patterns of optimizations and runtime systems support needed for efficient GPU implementations, developing a programming notation to permit the software developer to specify irregular algorithms at a high level of abstraction, implementing a synthesis system that automatically generates high-performance GPU code from these high-level specifications, and developing course material for teaching GPU programming of irregular codes.&lt;br/&gt;&lt;br/&gt;The higher performance and better energy efficiency of GPUs relative to multicore CPUs has sincere societal benifits. This work builds on the realization of these benefits by facilitating simpler and more widespread utilization of GPUs and incorporating more effective practices into future compilers and GPU hardware.</AbstractNarration>
<MinAmdLetterDate>09/10/2014</MinAmdLetterDate>
<MaxAmdLetterDate>07/26/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1406304</AwardID>
<Investigator>
<FirstName>Martin</FirstName>
<LastName>Burtscher</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Martin Burtscher</PI_FULL_NAME>
<EmailAddress>burtscher@txstate.edu</EmailAddress>
<PI_PHON>5122452314</PI_PHON>
<NSF_ID>000572212</NSF_ID>
<StartDate>09/10/2014</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Texas State University - San Marcos</Name>
<CityName>San Marcos</CityName>
<ZipCode>786664616</ZipCode>
<PhoneNumber>5122452314</PhoneNumber>
<StreetAddress>601 University Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>28</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX28</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>074602368</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TEXAS STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>101405814</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Texas State University]]></Name>
<CityName>San Marcos</CityName>
<StateCode>TX</StateCode>
<ZipCode>786664684</ZipCode>
<StreetAddress><![CDATA[601 University Dr]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>35</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX35</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0114</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2014~360001</FUND_OBLG>
<FUND_OBLG>2016~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Graphics Processing Units (GPUs) are now widely used in devices ranging from supercomputers to handhelds to perform computations outside the graphics domain. Naturally, they are particularly suited to run regular programs that execute operations similar to pixel processing, and they can offer a large advantage over multicore CPUs in terms of performance, price, and energy efficiency on these types of codes. Although regular algorithms are very important, new domains such as computational biology, data mining, and social network analysis necessitate very different algorithmic foundations: they require building, computing with, and updating large graphs. Such irregular codes are unlike pixel processing, more difficult to parallelize, and not a natural fit for GPUs.<br /><br />The goal of this project was to develop new techniques and optimizations to make the advantages provided by GPUs also available to complex and irregular codes. To this end, we have devised some of the fastest GPU programs for computing prefix sums, digital filters, maximal independent sets, connected components, and graph coloring. These algorithms are essential steps in many important applications, including cancer and tumor detection, drug discovery, and image processing. In addition to the publications describing our parallelization and optimization techniques, the source code for all these programs is available to anyone from the PI&rsquo;s home page for direct use, study, modification, and inclusion in other applications.<br /><br />This project has resulted in the training of multiple researchers and has yielded new teaching material that has been and will continue to be taught to hundreds of students at Texas State. The codes and strategies devised in this work can be used directly by programmers and may be incorporated into future compilers to accelerate countless applications. Increased utilization of GPU computing has several societal benefits due to the higher performance and better energy efficiency of GPUs relative to multicore CPUs, including making important and possibly life-saving computations much faster.</p><br> <p>            Last Modified: 01/13/2020<br>      Modified by: Martin&nbsp;Burtscher</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Graphics Processing Units (GPUs) are now widely used in devices ranging from supercomputers to handhelds to perform computations outside the graphics domain. Naturally, they are particularly suited to run regular programs that execute operations similar to pixel processing, and they can offer a large advantage over multicore CPUs in terms of performance, price, and energy efficiency on these types of codes. Although regular algorithms are very important, new domains such as computational biology, data mining, and social network analysis necessitate very different algorithmic foundations: they require building, computing with, and updating large graphs. Such irregular codes are unlike pixel processing, more difficult to parallelize, and not a natural fit for GPUs.  The goal of this project was to develop new techniques and optimizations to make the advantages provided by GPUs also available to complex and irregular codes. To this end, we have devised some of the fastest GPU programs for computing prefix sums, digital filters, maximal independent sets, connected components, and graph coloring. These algorithms are essential steps in many important applications, including cancer and tumor detection, drug discovery, and image processing. In addition to the publications describing our parallelization and optimization techniques, the source code for all these programs is available to anyone from the PIâ€™s home page for direct use, study, modification, and inclusion in other applications.  This project has resulted in the training of multiple researchers and has yielded new teaching material that has been and will continue to be taught to hundreds of students at Texas State. The codes and strategies devised in this work can be used directly by programmers and may be incorporated into future compilers to accelerate countless applications. Increased utilization of GPU computing has several societal benefits due to the higher performance and better energy efficiency of GPUs relative to multicore CPUs, including making important and possibly life-saving computations much faster.       Last Modified: 01/13/2020       Submitted by: Martin Burtscher]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
