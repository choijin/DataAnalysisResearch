<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR---EHS: SHIM: Developing Embedded Systems with Deterministic Concurrency</AwardTitle>
<AwardEffectiveDate>09/01/2006</AwardEffectiveDate>
<AwardExpirationDate>02/28/2010</AwardExpirationDate>
<AwardAmount>240000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
</ProgramOfficer>
<AbstractNarration>This project is creating the SHIM (software/hardware integration medium) development environment for the software in next-generation embedded systems.  SHIM will improve designer productivity by making it easier to design correct systems and will facilitate architectural exploration by providing software synthesis.  The SHIM model of computation provides deterministic concurrency with reliable communication, simplifying validation because behavior is reproducible.  Based on asynchronous concurrent processes that communicate through rendezvous channels, SHIM can handle control, multi- and variable-rate dataflow, and data-dependent decisions.&lt;br/&gt;&lt;br/&gt;The SHIM language will give designers a correct-by-construction way to describe concurrent systems.  Based on a formal semantics, SHIM guarantees systems comply with the model, something that would be difficult to ensure by adding a library to an existing language.  An efficient simulator for SHIM will allow software to be simulated before hardware is available.  Because of its determinism, SHIM guarantees fidelity between simulated behavior and the final implementation.  A software synthesis system will generate C that works within existing environments such as real-time operating systems.  The goals of this are configurability, (e.g., providing control over what is implemented as an interrupt routine) performance, and size optimization.  A formal analysis tool will statically predict deadlocks, predict performance bottlenecks, and identify other design problems.  Since SHIM is finite-state and fairly high level, formal analysis of SHIM systems is practical. Like any programming system, developers need libraries to use SHIM most efficiently.  Facilitating such libraries will be a major focus of the language design; such libraries will be created as part of this project.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/07/2006</MinAmdLetterDate>
<MaxAmdLetterDate>11/03/2009</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0614799</AwardID>
<Investigator>
<FirstName>Stephen</FirstName>
<LastName>Edwards</LastName>
<EmailAddress>sedwards@cs.columbia.edu</EmailAddress>
<StartDate>06/07/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>Computer Systems Research (CSR</Text>
</ProgramElement>
<ProgramReference>
<Code>2801</Code>
<Text>EMBEDDED &amp; HYBRID SYSTEMS(EHS)</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
