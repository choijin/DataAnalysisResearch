<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Foundations for Attack-Resistant, Collaborative Peer-to-peer Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2007</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Jeremy Epstein</SignBlockName>
<PO_EMAI>jepstein@nsf.gov</PO_EMAI>
<PO_PHON>7032928338</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Jared Saia&lt;br/&gt;University of New Mexico&lt;br/&gt;CAREER: Foundations for Attack-Resistant Collaborative Peer-to-Peer Systems&lt;br/&gt;0644058&lt;br/&gt;Panel ID: 070111&lt;br/&gt;&lt;br/&gt;Abstract&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;How can a group of agents achieve a goal despite efforts by some of the agents to prevent this?  This important question cuts across many disciplines including political science, economics, mathematics and computer science.  In this proposal, we are exploring this question by focusing on the following problem.  A set of n agents wants to compute the value of a function, f, of n inputs, where each agent holds a unique input of f.   Our goal is to create a distributed algorithm that ensures that each agent learns the output of f.  Our algorithm will be attack-resistant in that it works correctly even when up to a constant fraction of the agents are controlled by an omniscient adversary that tries to prevent the function from being computed.  Our algorithm will also be scalable in the sense that each node in the network sends and receives a number of messages and bits that is only polylogarithmic in n i.e. O(logc n) where c is a fixed constant. We are making use of several tools to solve this problem including: the use of expander-like graphs to enable robust communication; the use of small randomly chosen committees as single trustworthy functional units; and algorithmic techniques to harden against denial of service attacks.  Solving this problem will likely have broader impact in such diverse areas as voting, spam detection, worm and malware detection, distributed file systems, auction and mechanism enforcement, collaborative filtering, and web search.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>01/18/2007</MinAmdLetterDate>
<MaxAmdLetterDate>07/20/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0644058</AwardID>
<Investigator>
<FirstName>Jared</FirstName>
<LastName>Saia</LastName>
<PI_MID_INIT>C</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jared C Saia</PI_FULL_NAME>
<EmailAddress>saia@cs.unm.edu</EmailAddress>
<PI_PHON>5052772256</PI_PHON>
<NSF_ID>000260597</NSF_ID>
<StartDate>01/18/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of New Mexico</Name>
<CityName>Albuquerque</CityName>
<ZipCode>871310001</ZipCode>
<PhoneNumber>5052774186</PhoneNumber>
<StreetAddress>1700 Lomas Blvd. NE, Suite 2200</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New Mexico</StateName>
<StateCode>NM</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NM01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>868853094</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF NEW MEXICO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>784121725</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of New Mexico]]></Name>
<CityName>Albuquerque</CityName>
<StateCode>NM</StateCode>
<ZipCode>871310001</ZipCode>
<StreetAddress><![CDATA[1700 Lomas Blvd. NE, Suite 2200]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Mexico</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NM01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~80000</FUND_OBLG>
<FUND_OBLG>2008~80001</FUND_OBLG>
<FUND_OBLG>2009~80000</FUND_OBLG>
<FUND_OBLG>2010~79999</FUND_OBLG>
<FUND_OBLG>2011~80000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><strong>Intellectual Merit:</strong> This project had outcomes in two major areas related to intellectial merit. &nbsp;The first main area was designing efficient algorithms for the problem of Byzantine agreement. &nbsp;Intuitively, the Byzantine agreement problem asks if a group of processors can come to agreement on a single bit, despite the efforts of a hidden fraction of processors to subvert this goal. &nbsp;Byzantine agreement is one of the most fundamental problems in computer science and has applications in areas as diverse as airplane flight systems, data base systems, computer auctions, peer-to-peer systems and cloud computing. &nbsp;</p> <p>We have two major results on Byzantine agreement. &nbsp;Our first result resolves a problem that has been open since 1983: does there exist an polynomial time &nbsp;algorithm for Byzantine agreement in the <em>hard</em> model? &nbsp;Intuitively, polynomial time means efficient in terms of the amount of time the algorithm requires to terminate. &nbsp;In the&nbsp;hard model, the adversary is adaptive: it can take over processors at any point during the protocol, up to the point of taking over a certain threshold. Communication is asynchronous: the scheduling of the delivery of messages is set by the adversary, so that the delays are unpredictable to the algorithm. Finally, the adversary has full information: it knows the states of all processors at any time, and is assumed to be computationally unbounded. &nbsp;Our paper on this result was published in the prestigious conferences Foundations of Computer Science (FOCS) and Symposium on Discrete Algorithms (SODA).</p> <p>Our second major result in Byzantine agreement is an algorithm that is efficient in terms of badwidth i.e. the total number of messages that must be communicated among the processors. &nbsp;Previous algorithms for Byzantine agreement required each processor to send at least n messages , where n is the number of processors. &nbsp;Our algorithm reduces this amount to roughly square root of n.&nbsp;</p> <p>The second major area of results was for the problem of secure multiparty computation. &nbsp;The secure multiparty computation (MPC) problem is a generalization of the Byzantine agreement problem. &nbsp;In MPC, there are n processors, each with a private input that want to compute a function f over all of their inputs, without revealing any more information about the private inputs than what is revealed by the output of f. &nbsp;The problem is complicated by the fact that a hidden fraction of the players are controlled by an adversary that is actively trying to corrupt the output and/or obtain information about the inputs. &nbsp;This problem has application in many areas of computer security.</p> <p>Our result in this area is an algorithm that is scalable in the sense that the number of messages sent by each processor is essentially the square root of n, the number of processors. &nbsp;This contrasts with previous results for this problem where the number of messages sent is linear in n. &nbsp;Our result used mathematical and algorithmic tools that we previously developed in solving the Byzantine agreement problem. &nbsp; Our paper describing this result won a best paper award at the International Conference on Distributed Computing and Networking (ICDCN), 2014.</p> <p>In all, this grant has generater over 20 papers, 1 best paper award and one article in the Journal of the ACM.</p> <p><strong>Broader Impact:</strong></p> <p>This grant supported four PhD students, two of whom have graduated and two of whom are within one year of graduation. &nbsp;PhD student Muyiwa Olumuyiwasa, graduated in the spring of 2011. &nbsp;Muyiwa is a minority student (native Nigerian) and is now working at Intel Corporation. &nbsp;PhD student Navin Rustagi graduated in the summer of 2010 and became a post doc in the Statistics department at Rice University. &nbsp;PhD student Geor...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Intellectual Merit: This project had outcomes in two major areas related to intellectial merit.  The first main area was designing efficient algorithms for the problem of Byzantine agreement.  Intuitively, the Byzantine agreement problem asks if a group of processors can come to agreement on a single bit, despite the efforts of a hidden fraction of processors to subvert this goal.  Byzantine agreement is one of the most fundamental problems in computer science and has applications in areas as diverse as airplane flight systems, data base systems, computer auctions, peer-to-peer systems and cloud computing.    We have two major results on Byzantine agreement.  Our first result resolves a problem that has been open since 1983: does there exist an polynomial time  algorithm for Byzantine agreement in the hard model?  Intuitively, polynomial time means efficient in terms of the amount of time the algorithm requires to terminate.  In the hard model, the adversary is adaptive: it can take over processors at any point during the protocol, up to the point of taking over a certain threshold. Communication is asynchronous: the scheduling of the delivery of messages is set by the adversary, so that the delays are unpredictable to the algorithm. Finally, the adversary has full information: it knows the states of all processors at any time, and is assumed to be computationally unbounded.  Our paper on this result was published in the prestigious conferences Foundations of Computer Science (FOCS) and Symposium on Discrete Algorithms (SODA).  Our second major result in Byzantine agreement is an algorithm that is efficient in terms of badwidth i.e. the total number of messages that must be communicated among the processors.  Previous algorithms for Byzantine agreement required each processor to send at least n messages , where n is the number of processors.  Our algorithm reduces this amount to roughly square root of n.   The second major area of results was for the problem of secure multiparty computation.  The secure multiparty computation (MPC) problem is a generalization of the Byzantine agreement problem.  In MPC, there are n processors, each with a private input that want to compute a function f over all of their inputs, without revealing any more information about the private inputs than what is revealed by the output of f.  The problem is complicated by the fact that a hidden fraction of the players are controlled by an adversary that is actively trying to corrupt the output and/or obtain information about the inputs.  This problem has application in many areas of computer security.  Our result in this area is an algorithm that is scalable in the sense that the number of messages sent by each processor is essentially the square root of n, the number of processors.  This contrasts with previous results for this problem where the number of messages sent is linear in n.  Our result used mathematical and algorithmic tools that we previously developed in solving the Byzantine agreement problem.   Our paper describing this result won a best paper award at the International Conference on Distributed Computing and Networking (ICDCN), 2014.  In all, this grant has generater over 20 papers, 1 best paper award and one article in the Journal of the ACM.  Broader Impact:  This grant supported four PhD students, two of whom have graduated and two of whom are within one year of graduation.  PhD student Muyiwa Olumuyiwasa, graduated in the spring of 2011.  Muyiwa is a minority student (native Nigerian) and is now working at Intel Corporation.  PhD student Navin Rustagi graduated in the summer of 2010 and became a post doc in the Statistics department at Rice University.  PhD student George Saad will be  graduating in the Spring of 2014 and plans to find a job in industry.  Finally, PhD student Jeffrey Knockel will likely graduate in 2015 or 2016.  The grant also supported one female MS student, Jenny Chen, who is graduating in the fall of 2014.     ...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
