<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Cross-Layer Schemes For Flexible Resource Sharing in Multicore Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2007</AwardEffectiveDate>
<AwardExpirationDate>07/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hong Jiang</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>PROJECT ABSTRACT:&lt;br/&gt;&lt;br/&gt;The proposal addresses the challenge of flexibly and efficiently managing the allocation of shared caches and shared memory bandwidth among applications/threads for diverse sharing scenarios (co-operative, competitive and adversarial) in multicore systems. The proposed solution which spans the hardware, operating system (OS) and application layers, consists of two parts, one at the hardware-OS boundary and another at the OS-application boundary. The first part proposes a hardware-assisted, OS-driven resource allocation technique that effectively combines the flexibility of OS-based resource management with the efficiency of hardware resource management. The second part proposes adoption of currency-based market mechanisms at the application/OS boundary wherein contenders negotiate/bid for access to resources in exchange for some notional currency. Market mechanisms, which have been studied for other resource allocation problems, incentivize good behavior because it is in the participants' interest to make efficient use of resources and release resources that are not used. &lt;br/&gt;In the specific context of shared caches and shared memory bandwidth, market mechanisms allow development of sophisticated management policies with prioritization across and within applications. With appropriate interfaces, they also enable several other optimizations at the OS and application layers such as (a) adaptive applications that modify their behavior according to resource availability, (b) co-scheduling of sharers with complementary resource needs and (c) demand-driven pricing" of resources.&lt;br/&gt;&lt;br/&gt;The key components of the education plan include (a) integration of parallelism and multicore  concepts into the graduate and undergraduate computer architecture related courses, (b) development of a graduate-level, advanced computer architecture course to focus on architecture design patterns recurring architecture optimizations similar to the high-level, object-oriented programming design patterns" &lt;br/&gt;captured by Gamma et.al. and (c) fostering research participation at both undergraduate and graduate levels.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/07/2007</MinAmdLetterDate>
<MaxAmdLetterDate>07/04/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0644183</AwardID>
<Investigator>
<FirstName>Mithuna</FirstName>
<LastName>Thottethodi</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Mithuna S Thottethodi</PI_FULL_NAME>
<EmailAddress>mithuna@purdue.edu</EmailAddress>
<PI_PHON>7654944600</PI_PHON>
<NSF_ID>000253970</NSF_ID>
<StartDate>05/07/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[Young Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>2884</Code>
<Text>NEXT GENERATION SOFTWARE PROGR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~50000</FUND_OBLG>
<FUND_OBLG>2008~50000</FUND_OBLG>
<FUND_OBLG>2009~50000</FUND_OBLG>
<FUND_OBLG>2010~50000</FUND_OBLG>
<FUND_OBLG>2011~50000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Shared resources in multicore servers, unless carefully managed, can result in destructive interference among the processes/threads/applications that use these resources. This project addresses the challenge of designing mechanisms and policies to manage such shared resources to minimize such destructive interference. The project addresses shared resources within a single multicore server (e.g., shared cache capacity, shared memory bandwidth and shared interconnect bandwidth) as well as shared pools of resources such as clusters of servers that are used as memory-caching pools in the cloud computing context.</p> <p>The key outcomes of this project are as follows:</p> <p>&nbsp;The project developed mechanisms and policies that span the operating system (OS) and architecture layers to manage shared memory (DRAM) bandwidth. We extend the design to enable a unified mechanism that supports both shared cache and shared memory bandwidth management. Further the unified mechanism can allow for hierarchical management of shared resources in virtualized environments. For example, at the lowest level, the hypervisor may manage resource allocation among guest operating systems; each guest OS may then hierarchically manage its resource allocation among its own applications/processes.<br /><br />The project also addressed shared interconnect bandwidth and developed a cross-layer technique that spans the compiler layer and the hardware layer to provide optimal application specific network bandwidth. Effectively, the technique enables communication routing with minimal interference on shared network links.</p> <p>Beyond a single multicore node, the project developed cost-minimizing resource provisioning techniques in certain cloud computing environments (specifically, infrastructure-as-a-service environments such as Amazon EC2). &nbsp;This outcome enables significant cost savings for users of cloud services while retaining the statistical performance guarantees of running with dedicated server pool.</p> <p>Finally, the project also developed automatic load-balancing techniques for shared pools of memory-caching servers which are a key part of the infrastructure at many large companies such as Facebook, Google, and Yahoo. Compared to a popular memory caching architecture, the new design with improved load balancing &nbsp;can achieve similar performance with fewer servers or significantly better performance with the same number of servers.&nbsp;</p> <p>In addition to the above research outcomes, the project also supported the training of multiple graduate students in key aspects of computer and systems architecture. The research on this project directly lead to the Ph.D. thesis research and final dissertation of two graduate students.</p><br> <p>            Last Modified: 01/19/2014<br>      Modified by: Mithuna&nbsp;S&nbsp;Thottethodi</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Shared resources in multicore servers, unless carefully managed, can result in destructive interference among the processes/threads/applications that use these resources. This project addresses the challenge of designing mechanisms and policies to manage such shared resources to minimize such destructive interference. The project addresses shared resources within a single multicore server (e.g., shared cache capacity, shared memory bandwidth and shared interconnect bandwidth) as well as shared pools of resources such as clusters of servers that are used as memory-caching pools in the cloud computing context.  The key outcomes of this project are as follows:   The project developed mechanisms and policies that span the operating system (OS) and architecture layers to manage shared memory (DRAM) bandwidth. We extend the design to enable a unified mechanism that supports both shared cache and shared memory bandwidth management. Further the unified mechanism can allow for hierarchical management of shared resources in virtualized environments. For example, at the lowest level, the hypervisor may manage resource allocation among guest operating systems; each guest OS may then hierarchically manage its resource allocation among its own applications/processes.  The project also addressed shared interconnect bandwidth and developed a cross-layer technique that spans the compiler layer and the hardware layer to provide optimal application specific network bandwidth. Effectively, the technique enables communication routing with minimal interference on shared network links.  Beyond a single multicore node, the project developed cost-minimizing resource provisioning techniques in certain cloud computing environments (specifically, infrastructure-as-a-service environments such as Amazon EC2).  This outcome enables significant cost savings for users of cloud services while retaining the statistical performance guarantees of running with dedicated server pool.  Finally, the project also developed automatic load-balancing techniques for shared pools of memory-caching servers which are a key part of the infrastructure at many large companies such as Facebook, Google, and Yahoo. Compared to a popular memory caching architecture, the new design with improved load balancing  can achieve similar performance with fewer servers or significantly better performance with the same number of servers.   In addition to the above research outcomes, the project also supported the training of multiple graduate students in key aspects of computer and systems architecture. The research on this project directly lead to the Ph.D. thesis research and final dissertation of two graduate students.       Last Modified: 01/19/2014       Submitted by: Mithuna S Thottethodi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
