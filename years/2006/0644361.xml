<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Software Reliability via Assert-Generated Interfaces</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2007</AwardEffectiveDate>
<AwardExpirationDate>05/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Building reliable software systems remains a challenging problem. The main difficulty is that such systems are built by integrating smaller components written by developers working in isolation. Each component functions correctly only under some specific conditions that remain unarticulated in the development process, thereby complicating the task of checking the compatibility of the different parts.&lt;br/&gt;&lt;br/&gt;This research proposes to develop Assert-Generated Interfaces, a toolkit to increase the reliability of software by ensuring that large systems are built from compatible components. Individual component builders then locally specify properties critical to the correct working of the components using assert statements embedded within the implementation. &lt;br/&gt;&lt;br/&gt;These assertions are automatically analyzed to obtain interfaces that describe how the component may be safely used. Automatic generation ensures the interface evolves with the implementation. Assert Generated Interfaces decompose the task of system-level correctness checking into manageable component-level checks, and when static checking is impossible, the interfaces can be used to build wrappers that dynamically shield components by blocking unsafe uses.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/04/2007</MinAmdLetterDate>
<MaxAmdLetterDate>05/13/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0644361</AwardID>
<Investigator>
<FirstName>Ranjit</FirstName>
<LastName>Jhala</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ranjit Jhala</PI_FULL_NAME>
<EmailAddress>jhala@cs.ucsd.edu</EmailAddress>
<PI_PHON>8585341420</PI_PHON>
<NSF_ID>000486287</NSF_ID>
<StartDate>06/04/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-San Diego</Name>
<CityName>La Jolla</CityName>
<ZipCode>920930934</ZipCode>
<PhoneNumber>8585344896</PhoneNumber>
<StreetAddress>Office of Contract &amp; Grant Admin</StreetAddress>
<StreetAddress2><![CDATA[9500 Gilman Drive, 0934]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA49</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>804355790</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, SAN DIEGO</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-San Diego]]></Name>
<CityName>La Jolla</CityName>
<StateCode>CA</StateCode>
<ZipCode>920930934</ZipCode>
<StreetAddress><![CDATA[Office of Contract &amp; Grant A]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>49</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA49</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~80000</FUND_OBLG>
<FUND_OBLG>2008~80000</FUND_OBLG>
<FUND_OBLG>2009~80000</FUND_OBLG>
<FUND_OBLG>2010~80000</FUND_OBLG>
<FUND_OBLG>2011~80000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project led to the several distinct and important outcomes, allrelated to the general idea of modular and compositional analysis ofsoftware system via inferring appropriate interfaces.</p> <p><strong>Intellectual Merit</strong></p> <p>1. Liquid Types<br />The most significant outcome is the development of the technique ofliquid types, which shows how advances in SMT solvers can be used toenrich vanilla type signatures with very precise information aboutthe behavior of components. Additionally, through types, we areable to address the problem of analyzing unbounded data structures&nbsp;that has been a long standing problem in software verification.Going forward, we believe that this combination of powerful logic machinery(SMT) with the most widely used formal method for ensuring reliability(types) will have a significant impact on ensuring the compatibilityand composability of software components from different sources.</p> <p>2. RELAY Race Detector<br />The second most significant outcome is the design, implementation andevaluation of scalable tools for concurrency analysis based on the notionof "Relative LockSets". The resulting RELAY race detector was the firstto scale to million line code bases, and was the basis of a generictechnique for data flow analysis of concurrent programs.</p> <p><br /><strong>Broader Impact</strong><br /><br />The liquid types work was published in a series of papers at the very topvenues in the field. While the work was done originally in the context ofOCAML and C, it has now been extended by others to other languages,different kinds of properties -- from compiler optimizations to securityand deterministic parallelism. &nbsp;The lead student (Patrick Rondon's) PhD dissertation received the SIGPLAN Distinguished Dissertation Award. From the citation: <em>"Patrick Rondon&rsquo;s dissertation makes several significant contributions tothe field of automatic program verification. It takes a type system -- ahighly scalable yet not quite precise method of dealing with programs --and refines it using Satisfiability Modulo Theory (SMT) techniques tocompensate for the precision loss. There are implementations for both OCamland C. The achieved degree of effectiveness and automation is astonishing:programs that are beyond the existing verification tools can be handledfully automatically within seconds. It demonstrates that formalverification can yield significant reliability guarantees for mainstreamsoftware engineering, at a reasonable cost."</em></p> <p>The project supported the PhD theses of three students:</p> <p>1. Patrick Rondon</p> <p>2. Ming Kawaguchi</p> <p>3. Jan Voung</p> <p>&nbsp;</p> <p>The source code for RELAY, DSOLVE (liquid types for Ocaml) and CSOLVE(liquid types for C) have been publicly released and used already byseveral other groups that have started working on related areas.<br /><br /></p><br> <p>            Last Modified: 09/06/2013<br>      Modified by: Ranjit&nbsp;Jhala</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project led to the several distinct and important outcomes, allrelated to the general idea of modular and compositional analysis ofsoftware system via inferring appropriate interfaces.  Intellectual Merit  1. Liquid Types The most significant outcome is the development of the technique ofliquid types, which shows how advances in SMT solvers can be used toenrich vanilla type signatures with very precise information aboutthe behavior of components. Additionally, through types, we areable to address the problem of analyzing unbounded data structures that has been a long standing problem in software verification.Going forward, we believe that this combination of powerful logic machinery(SMT) with the most widely used formal method for ensuring reliability(types) will have a significant impact on ensuring the compatibilityand composability of software components from different sources.  2. RELAY Race Detector The second most significant outcome is the design, implementation andevaluation of scalable tools for concurrency analysis based on the notionof "Relative LockSets". The resulting RELAY race detector was the firstto scale to million line code bases, and was the basis of a generictechnique for data flow analysis of concurrent programs.   Broader Impact  The liquid types work was published in a series of papers at the very topvenues in the field. While the work was done originally in the context ofOCAML and C, it has now been extended by others to other languages,different kinds of properties -- from compiler optimizations to securityand deterministic parallelism.  The lead student (Patrick Rondon's) PhD dissertation received the SIGPLAN Distinguished Dissertation Award. From the citation: "Patrick RondonÆs dissertation makes several significant contributions tothe field of automatic program verification. It takes a type system -- ahighly scalable yet not quite precise method of dealing with programs --and refines it using Satisfiability Modulo Theory (SMT) techniques tocompensate for the precision loss. There are implementations for both OCamland C. The achieved degree of effectiveness and automation is astonishing:programs that are beyond the existing verification tools can be handledfully automatically within seconds. It demonstrates that formalverification can yield significant reliability guarantees for mainstreamsoftware engineering, at a reasonable cost."  The project supported the PhD theses of three students:  1. Patrick Rondon  2. Ming Kawaguchi  3. Jan Voung     The source code for RELAY, DSOLVE (liquid types for Ocaml) and CSOLVE(liquid types for C) have been publicly released and used already byseveral other groups that have started working on related areas.         Last Modified: 09/06/2013       Submitted by: Ranjit Jhala]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
