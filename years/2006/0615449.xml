<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR---EHS: A Modern Verifying Compiler</AwardTitle>
<AwardEffectiveDate>07/01/2006</AwardEffectiveDate>
<AwardExpirationDate>09/30/2008</AwardExpirationDate>
<AwardTotalIntnAmount>160000.00</AwardTotalIntnAmount>
<AwardAmount>160000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
</ProgramOfficer>
<AbstractNarration>A program is a detailed description of how to manipulate data to achieve some end.  Unfortunately, programs often do not achieve what their programmers intended.  Fortunately, it is usually possible to specify logically what is intended through in-line assertions and function preconditions and postconditions.  A function precondition is an assertion that describes the expected input, while a postcondition describes the relation between the returned data and the given data. The challenge is then to prove that a program meets its specification.&lt;br/&gt;&lt;br/&gt;It is well known that proving that each of a program's functions adheres to its specification is undecidable.  In practice, though, many program properties can be analyzed.  The goal of this work is to extend the range of programs that can be verified mostly automatically with a verifying compiler.  A modern verifying compiler must do two tasks well.  First, it must strengthen the given annotations by generating inductive invariants.  An inductive invariant has the properties that it holds initially, and that each instruction of the program maintains it.  Second, it must prove that the given annotations are inductive relative to the generated ones, thus proving correctness.This work addresses the first task by scaling constraint-based invariant generation and ranking function synthesis to whole programs. Automatic invariant generation and ranking function synthesis reduces the need for annotations beyond the program specification.  It addresses the second task by finding expressive and decidable fragments of first-order theories relevant for verification.  Finally, the theoretical results are implemented in a verifying compiler that is used in an undergraduate course on program verification and decision procedures.   &lt;br/&gt;&lt;br/&gt;This is expected to have impact for the discipline of Computer Science, where increased demand is predicted for specialized static analysis techniques and decision procedures that will improve efficiency and accuracy.  This is especially true in the area of embedded systems, where achieving correct and reliable systems without the assistance of analysis tools is particularly difficult.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/27/2006</MinAmdLetterDate>
<MaxAmdLetterDate>05/19/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0615449</AwardID>
<Investigator>
<FirstName>Zohar</FirstName>
<LastName>Manna</LastName>
<EmailAddress>zm@cs.stanford.edu</EmailAddress>
<StartDate>06/27/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>2801</Code>
<Text>EMBEDDED &amp; HYBRID SYSTEMS(EHS)</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
