<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR-EHS: Enhancing the Effectiveness of Utilizing an Instruction Register File</AwardTitle>
<AwardEffectiveDate>09/01/2006</AwardEffectiveDate>
<AwardExpirationDate>08/31/2010</AwardExpirationDate>
<AwardAmount>302000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Embedded applications have to meet different and often conflicting constraints involving energy consumption, space, and time.  While a compiler optimization and/or an architectural feature may be developed to improve one aspect of an embedded application, it often comes at the detriment of another.  An instruction register file (IRF) can help to achieve these goals.  Frequently used instructions are placed in the IRF, and multiple IRF instructions can be referenced by a single packed instruction in ROM or a level-one (L1) instruction cache.  This approach enables multiple instructions to be referenced in a single instruction fetched from the memory system and results&lt;br/&gt;in multiple instances of the same instruction in the executable being replaced with a smaller IRF index.  This research investigates a variety of techniques to enhance the effectiveness of utilizing an IRF.  By increasing the number of instructions referenced from the IRF, it is possible to further reduce energy consumption and decrease code size.  The project is implementing a number of compilation and architectural techniques to address previous limitations on the number of instructions being packed in an application.  The research also explores how an IRF can complement other compiler optimizations and/or architectural features that save energy and reduce code size.  Finally, the research pursues experimentation with different instruction sets, over instructions referenced from the memory system and the IRF, to identify approaches that provide greater flexibility and overall efficiency.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/13/2006</MinAmdLetterDate>
<MaxAmdLetterDate>06/09/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0615085</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Whalley</LastName>
<EmailAddress>whalley@cs.fsu.edu</EmailAddress>
<StartDate>06/13/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Gary</FirstName>
<LastName>Tyson</LastName>
<EmailAddress>tyson@cs.fsu.edu</EmailAddress>
<StartDate>06/13/2006</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Florida State University</Name>
<CityName>TALLAHASSEE</CityName>
<ZipCode>323064166</ZipCode>
<PhoneNumber>8506445260</PhoneNumber>
<StreetAddress>874 Traditions Way, 3rd Floor</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>Computer Systems Research (CSR</Text>
</ProgramElement>
<ProgramReference>
<Code>2801</Code>
<Text>EMBEDDED &amp; HYBRID SYSTEMS(EHS)</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
