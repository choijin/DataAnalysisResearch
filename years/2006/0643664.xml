<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Modeling Data Locality For Next Generation Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/15/2007</AwardEffectiveDate>
<AwardExpirationDate>03/31/2015</AwardExpirationDate>
<AwardTotalIntnAmount>316960.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Although the introduction of multi-core systems has increased overall processor speed without significantly increasing CPU clock rates, a significant speed disparity remains between the CPU core and main memory. Multi-level caches have long been used to bridge this gap. Conventional cache design favors applications with good locality.  The community's understanding of locality, however, is more qualitative than quantitative.  A quantitative understanding of locality is essential to exploit memory hierarchy and achieve maximal performance.  The new generation of multi-core systems adds the challenge of quantifying data locality for multi-threaded programs.&lt;br/&gt;&lt;br/&gt;This research models data locality as a function of three parameters: data size, path history, and thread count, relying on close cooperation among the compiler, the profiler, and hardware just-in-time monitoring.  The compiler provides a global view of the program. The profiler, using traces, has a view of the run-time behavior of a program, but this view is based on only a limited number of training inputs. Although the hardware's view is run specific, its prediction, often depending on hardware buffers, is not always effective due to buffer size limitations.  The cooperative model being developed combines the advantages of static analysis and run-time sampling and profiling, providing an accurate view of program locality for both single-threaded and multi-threaded programs.  Given this model the project explores memory system performance including managing data movement in conventional multi-level cache as well as non-uniform cache architecture (NUCA) caches, reducing the memory traffic of a state-of-the-art hardware-only region prefetcher, and improving spatial locality of Java programs.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>04/09/2007</MinAmdLetterDate>
<MaxAmdLetterDate>01/13/2014</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0643664</AwardID>
<Investigator>
<FirstName>Zhenlin</FirstName>
<LastName>Wang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Zhenlin Wang</PI_FULL_NAME>
<EmailAddress>zlwang@mtu.edu</EmailAddress>
<PI_PHON>9064872187</PI_PHON>
<NSF_ID>000105719</NSF_ID>
<StartDate>04/09/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Michigan Technological University</Name>
<CityName>Houghton</CityName>
<ZipCode>499311295</ZipCode>
<PhoneNumber>9064871885</PhoneNumber>
<StreetAddress>1400 Townsend Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<StateCode>MI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>065453268</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MICHIGAN TECHNOLOGICAL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>065453268</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Michigan Technological University]]></Name>
<CityName>Houghton</CityName>
<StateCode>MI</StateCode>
<ZipCode>499311295</ZipCode>
<StreetAddress><![CDATA[1400 Townsend Drive]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Michigan</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~74876</FUND_OBLG>
<FUND_OBLG>2008~162161</FUND_OBLG>
<FUND_OBLG>2010~79541</FUND_OBLG>
<FUND_OBLG>2011~83422</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The research goal of this award is to model and predict data locality for modern architectures and applications, With better locality models, we are able to develop techniques to improve performance for modern applications and data centers.<br /><br />We have developed a series of models and techniques to explore how data is accessed in a system. The research community terms the property of data accesses and their reuses ``locality''. Locality modeling is a key to tackle the dilemma between enormous amount of data and limited capacity of computer systems. Our research finding on application and system locality shows that future data accesses are highly predictable with limited online sampling and/or offline analysis. This research opens a new path for compiler optimization, operating system and architecture design. We have applied and extended our locality models to guide cache partitioning and improve the overall throughput of a multi-core machine. We have developed a cross-architecture co-run performance regression model. This model helps us to better understand the impact of different memory architectures on the performance of multiple applications that share cache and memory bandwidth. We have designed a low-overhead dynamic locality model that predicts memory demands of a virtual machine. Using this model to balance memory allocation in a virtualized system, the overall system performance can be significantly improved. Dynamic memory resource allocation can help a data center reduce it operating cost without sacrificing quality of service (QoS). Our research can thus benefit data centers as well as cloud computing users.<br /><br />With a better understanding of applications' behavior, we have improved the state-of-the-art C/C++ memory allocators so they can better fit into modern data centers that employ virtualization technology. With our algorithms, we show that some hardware support for memory virtualization is no longer necessary and can be replaced by a software solution. This research will lead us to reconsider memory management algorithms and runtime system design for cloud computing. Our work on data server key-value memory caching shows that data center requests that benefit from memory caching to boost performance still pertain strong locality. We propose a locality-based memory allocation scheme to manage memory cache allocation dynamically and effectively improve its performance. <br /><br />The project has helped to train and educate four PhD students and five masters students in the Department of Computer Science at Michigan Tech. One PhD and four masters students graduated with the support of this grant. Another PhD student is expected to receive his PhD in a year. The grant has supported, in part, 11 Conference papers, 6 workshop, abstract, or short papers, and 5 journal papers.<br /><br />Two new courses, ``Virtual Machines'' and ``Cloud Computing'' were introduced into the PI's department. The results in this research have been integrated into the curricula. The PI has also developed a module to attract high school students into computer science through the summer youth program at Michigan Tech.</p><br> <p>            Last Modified: 06/12/2015<br>      Modified by: Zhenlin&nbsp;Wang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The research goal of this award is to model and predict data locality for modern architectures and applications, With better locality models, we are able to develop techniques to improve performance for modern applications and data centers.  We have developed a series of models and techniques to explore how data is accessed in a system. The research community terms the property of data accesses and their reuses ``locality''. Locality modeling is a key to tackle the dilemma between enormous amount of data and limited capacity of computer systems. Our research finding on application and system locality shows that future data accesses are highly predictable with limited online sampling and/or offline analysis. This research opens a new path for compiler optimization, operating system and architecture design. We have applied and extended our locality models to guide cache partitioning and improve the overall throughput of a multi-core machine. We have developed a cross-architecture co-run performance regression model. This model helps us to better understand the impact of different memory architectures on the performance of multiple applications that share cache and memory bandwidth. We have designed a low-overhead dynamic locality model that predicts memory demands of a virtual machine. Using this model to balance memory allocation in a virtualized system, the overall system performance can be significantly improved. Dynamic memory resource allocation can help a data center reduce it operating cost without sacrificing quality of service (QoS). Our research can thus benefit data centers as well as cloud computing users.  With a better understanding of applications' behavior, we have improved the state-of-the-art C/C++ memory allocators so they can better fit into modern data centers that employ virtualization technology. With our algorithms, we show that some hardware support for memory virtualization is no longer necessary and can be replaced by a software solution. This research will lead us to reconsider memory management algorithms and runtime system design for cloud computing. Our work on data server key-value memory caching shows that data center requests that benefit from memory caching to boost performance still pertain strong locality. We propose a locality-based memory allocation scheme to manage memory cache allocation dynamically and effectively improve its performance.   The project has helped to train and educate four PhD students and five masters students in the Department of Computer Science at Michigan Tech. One PhD and four masters students graduated with the support of this grant. Another PhD student is expected to receive his PhD in a year. The grant has supported, in part, 11 Conference papers, 6 workshop, abstract, or short papers, and 5 journal papers.  Two new courses, ``Virtual Machines'' and ``Cloud Computing'' were introduced into the PI's department. The results in this research have been integrated into the curricula. The PI has also developed a module to attract high school students into computer science through the summer youth program at Michigan Tech.       Last Modified: 06/12/2015       Submitted by: Zhenlin Wang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
