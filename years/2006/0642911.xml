<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: A Framework For Customizable Program Flow Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2007</AwardEffectiveDate>
<AwardExpirationDate>07/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>416000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>CCF-0642911&lt;br/&gt;&lt;br/&gt;CAREER: A Framework for Customizable Program Flow Analysis&lt;br/&gt;&lt;br/&gt;Ana Milanova&lt;br/&gt;&lt;br/&gt;Today's software systems are large, complex and costly and research on program flow analysis for software productivity and software quality is increasingly relevant. Tools based on flow analysis can aid and improve software tasks such as development, testing, program understanding, verification, debugging, reverse engineering, and restructuring. This wide variety of tasks demands a wide variety of customized flow analyses with different degrees of precision and cost.&lt;br/&gt;&lt;br/&gt;This research builds technology that will allow specifying and developing customized flow analyses that support software tasks on large and complex software systems. There are three contributions. First, we develop the theory of contextual set constraints, a flexible declarative formalism for specifying flow analyses. Second, we design and implement a novel engine for resolution of set constraint which takes advantage of efficient Binary Decision Diagram (BDD) technology for set representation and set manipulation. Third, we build an analysis framework based on contextual set constraints and efficient constraint resolution. The framework is used to specify and develop new flow analyses that target long-standing problems related to software security and software dependability.&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/17/2007</MinAmdLetterDate>
<MaxAmdLetterDate>07/28/2016</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0642911</AwardID>
<Investigator>
<FirstName>Ana</FirstName>
<LastName>Milanova</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ana Milanova</PI_FULL_NAME>
<EmailAddress>milanova@cs.rpi.edu</EmailAddress>
<PI_PHON>5182766887</PI_PHON>
<NSF_ID>000200571</NSF_ID>
<StartDate>08/17/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Rensselaer Polytechnic Institute</Name>
<CityName>Troy</CityName>
<ZipCode>121803522</ZipCode>
<PhoneNumber>5182766000</PhoneNumber>
<StreetAddress>110 8TH ST</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY20</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>002430742</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>RENSSELAER POLYTECHNIC INSTITUTE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>002430742</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Rensselaer Polytechnic Institute]]></Name>
<CityName>Troy</CityName>
<StateCode>NY</StateCode>
<ZipCode>121803522</ZipCode>
<StreetAddress><![CDATA[110 8TH ST]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY20</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~80000</FUND_OBLG>
<FUND_OBLG>2008~80000</FUND_OBLG>
<FUND_OBLG>2009~80000</FUND_OBLG>
<FUND_OBLG>2010~80000</FUND_OBLG>
<FUND_OBLG>2011~80000</FUND_OBLG>
<FUND_OBLG>2012~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>NSF Award CCF-0642911 (includes a Research Experience for Undergraduates (REU) supplement) builds novel techniques that advance software quality and software productivity. The <strong>intellectual merits</strong> include a type inference and checking framework, which allows developers to &ldquo;plug in&rdquo; type systems on top of existing programs. A &ldquo;plugged-in&rdquo; type system can effectively detect common program bugs such as unwanted mutation and null pointer dereference, as well as unwanted information flows that can lead to dangerous security vulnerabilities. This work paves the way for a highly effective tool that detects privacy leaks in real Android apps, which we fully developed in follow-up work. The type inference and checking framework, as well as other software artifacts are publicly available at: https://github.com/proganalysis/type-inference. This work has produced close to 20 publications, including ones in top Software engineering and Programming languages venues such as ACM/IEEE ICSE, ECOOP, and ACM OOPSLA.</p> <p>The <strong>broader impacts</strong> include valuable educational and training opportunities for graduate and undergraduate students. The award fully supported 2 graduate students (one of whom is female), who successfully defended their PhD theses, and are currently employed by Google. The REU supplement supported 7 undergraduate students who participated in research projects ranging from core programming languages topics such as type inference, to more applied ones such as application type inference to automated grading in the Computer Science curriculum. The students received valuable research experience.</p><br> <p>            Last Modified: 11/15/2017<br>      Modified by: Ana&nbsp;Milanova</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ NSF Award CCF-0642911 (includes a Research Experience for Undergraduates (REU) supplement) builds novel techniques that advance software quality and software productivity. The intellectual merits include a type inference and checking framework, which allows developers to "plug in" type systems on top of existing programs. A "plugged-in" type system can effectively detect common program bugs such as unwanted mutation and null pointer dereference, as well as unwanted information flows that can lead to dangerous security vulnerabilities. This work paves the way for a highly effective tool that detects privacy leaks in real Android apps, which we fully developed in follow-up work. The type inference and checking framework, as well as other software artifacts are publicly available at: https://github.com/proganalysis/type-inference. This work has produced close to 20 publications, including ones in top Software engineering and Programming languages venues such as ACM/IEEE ICSE, ECOOP, and ACM OOPSLA.  The broader impacts include valuable educational and training opportunities for graduate and undergraduate students. The award fully supported 2 graduate students (one of whom is female), who successfully defended their PhD theses, and are currently employed by Google. The REU supplement supported 7 undergraduate students who participated in research projects ranging from core programming languages topics such as type inference, to more applied ones such as application type inference to automated grading in the Computer Science curriculum. The students received valuable research experience.       Last Modified: 11/15/2017       Submitted by: Ana Milanova]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
