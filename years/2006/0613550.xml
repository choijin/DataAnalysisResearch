<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SoD-TEAM:  Problem-Solving Methodology in Collaborative Design</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2006</AwardEffectiveDate>
<AwardExpirationDate>07/31/2011</AwardExpirationDate>
<AwardTotalIntnAmount>0.00</AwardTotalIntnAmount>
<AwardAmount>465642</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Directorate for Computer and Information Science and Engineering (CISE)&lt;br/&gt;Division Computer and Network Systems (CNS)&lt;br/&gt;Science of Design (SoD) Program&lt;br/&gt;&lt;br/&gt;Proposal Number: 0613550 &lt;br/&gt;P/I:   Steven Tanimoto &lt;br/&gt;PI's Department: Computer Science and Engineering &lt;br/&gt;Institution:  University of Washington&lt;br/&gt;Award:   $ 449,642&lt;br/&gt;&lt;br/&gt;Title:    "SoD-TEAM: Problem-Solving Methodology in Collaborative Design"&lt;br/&gt;&lt;br/&gt;This project focuses on software tools that facilitate collaboration among members of a design team. The project permits a design team to manage the explored portions of a space of alternative designs. In addition, it supports evaluation and communication among team members about design alternatives. One goal of the project is to develop a methodology and a framework for software-designers that is based on studies that will lead to understanding how to support end-user exploration of solution-spaces. In addition the project facilitates collaboration among designers with different interests, expertise and the need to have both private as well as share common group-based designs. The theory of problem solving that forms the basis of the project involves "state-space search." The state-space search methodology applies to both formal problem solving (where automation without human intervention is possible) and to complex design problems in which some aspects can be "fuzzy". However, the approach proposed with this project is to merge the two genres of software and create a new one: software that allows a collaboration among automatic design processes and human designers, and one that makes visible not only the details of particular designs but also a substantial piece of the space of possible designs. In support of this project, the proposers developed the core of an initial research prototype software system to support design with transparent display of design spaces. This system, T-Star, implements a human interface that supports problem-solving using an approach from artificial intelligence that includes a view of the portion of the solution space that has been explored so far. Having a visual rendition of the spatial context of exploration helps ground design team collaboration.&lt;br/&gt;&lt;br/&gt;Program Manager: Anita J. La Salle&lt;br/&gt;Date: June 26, 2006&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/07/2006</MinAmdLetterDate>
<MaxAmdLetterDate>07/06/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0613550</AwardID>
<Investigator>
<FirstName>Steven</FirstName>
<LastName>Tanimoto</LastName>
<PI_MID_INIT>L</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Steven L Tanimoto</PI_FULL_NAME>
<EmailAddress>tanimoto@cs.washington.edu</EmailAddress>
<PI_PHON>2065434848</PI_PHON>
<NSF_ID>000107623</NSF_ID>
<StartDate>08/07/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>William</FirstName>
<LastName>Winn</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>William Winn</PI_FULL_NAME>
<EmailAddress>billwinn@u.washington.edu</EmailAddress>
<PI_PHON>2066851185</PI_PHON>
<NSF_ID>000292327</NSF_ID>
<StartDate>08/07/2006</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington]]></Name>
<CityName>Seattle</CityName>
<StateCode>WA</StateCode>
<ZipCode>981950001</ZipCode>
<StreetAddress><![CDATA[4333 Brooklyn Ave NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7372</Code>
<Text>ITR-SCIENCE OF DESIGN</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>7372</Code>
<Text>ITR-SCIENCE OF DESIGN</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0106</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2006~449642</FUND_OBLG>
<FUND_OBLG>2010~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The science of design is a field that involves theory and experiment to better understand how people can create solutions that meet given requirements.&nbsp; An important theory for design is the classical theory of problem solving that was developed during the 1960s by artificial intelligence pioneers such as Allen Newell and Herbert Simon.&nbsp; This theory provides a structure for the problem solving process that may reduce the creative leaps needed for a solution to a systematic search through a space of alternative solutions or partial solutions.&nbsp;</p> <p>The project described here tested two applications of that theory to collaborative design by teams of human designers.&nbsp; In the first application, a type of multimedia game was developed and a software tool was developed so that design teams could create their own games.&nbsp;&nbsp; The games, called PRIME games (Puzzle Rooms with Image and Music Experiences) incorporate four media components: architectural/spatial arrangement of rooms and doors, image-processing puzzles, musical melody permutation puzzles, and logical game control structure.&nbsp; Each of four designers on a team took responsibility for one of these game components.&nbsp; The design tool, known as PRIME designer, ran on PCs (and Macs and Linux machines), and it was moderately successful in supporting this kind of collaborative design.&nbsp; However, the mechanics of sharing game components via uploading to and downloading from a server were awkward to the point of severely limiting the granularity and frequency with which sharing partial solutions could take place.</p> <p>Consequently, the project group developed a web-based collaborative problem-solving tool known as CoSolve that had strong support for sharing of work embedded in its design from the outset.&nbsp;&nbsp; A significant new concept pioneered in CoSolve is the partitioning of general problem solving activity into two essential phases: posing and solving.&nbsp; CoSolve offers two sets of affordances to users in order to support each of these phases of the process.&nbsp; CoSolve posers receive end-user programming support in order to create problem representations that are fully compatible with the solving process mandated by the classical theory of problem solving.&nbsp; CoSolve solvers, on the other hand, benefit from a client interface (and several alternatives are available) that allows them to see not only their own work on a problem, but that of their teammates.&nbsp; Within CoSolve, a solver&rsquo;s activity consists of (1) creating new partial solutions (called states) by making changes (applying &ldquo;operators&rdquo;) to existing partial solutions, and (2) annotating existing partial solutions with comments, evaluations, and strategic information for the team.&nbsp;&nbsp; Examples client views of a CoSolve solving session are shown in the illustrations.&nbsp; In one case the problem of designing an urban development plan has been formulated in a game-like manner.&nbsp; In another, a problem in constructive geometry is shown.</p> <p>An advanced feature of CoSolve is a facility that allows solvers to set up computational tasks and invoke software agents to perform them on behalf of the team of solvers.</p> <p>The project has succeeded in identifying many of the issues faced when providing a computer system to support problem solving and design using the classical theory of problem solving.&nbsp; The issues include how to partition the problem solving process into phases that permit a clear differentiation in skill requirements for human posers and solvers.&nbsp; Furthermore, the issues include how to provide general problem posing and solving frameworks that work not only computationally, but from a human perspective.&nbsp; The project has pioneered the design and implementation of two systems that offer specific approaches to those issues.&nbsp; This work provide...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The science of design is a field that involves theory and experiment to better understand how people can create solutions that meet given requirements.  An important theory for design is the classical theory of problem solving that was developed during the 1960s by artificial intelligence pioneers such as Allen Newell and Herbert Simon.  This theory provides a structure for the problem solving process that may reduce the creative leaps needed for a solution to a systematic search through a space of alternative solutions or partial solutions.   The project described here tested two applications of that theory to collaborative design by teams of human designers.  In the first application, a type of multimedia game was developed and a software tool was developed so that design teams could create their own games.   The games, called PRIME games (Puzzle Rooms with Image and Music Experiences) incorporate four media components: architectural/spatial arrangement of rooms and doors, image-processing puzzles, musical melody permutation puzzles, and logical game control structure.  Each of four designers on a team took responsibility for one of these game components.  The design tool, known as PRIME designer, ran on PCs (and Macs and Linux machines), and it was moderately successful in supporting this kind of collaborative design.  However, the mechanics of sharing game components via uploading to and downloading from a server were awkward to the point of severely limiting the granularity and frequency with which sharing partial solutions could take place.  Consequently, the project group developed a web-based collaborative problem-solving tool known as CoSolve that had strong support for sharing of work embedded in its design from the outset.   A significant new concept pioneered in CoSolve is the partitioning of general problem solving activity into two essential phases: posing and solving.  CoSolve offers two sets of affordances to users in order to support each of these phases of the process.  CoSolve posers receive end-user programming support in order to create problem representations that are fully compatible with the solving process mandated by the classical theory of problem solving.  CoSolve solvers, on the other hand, benefit from a client interface (and several alternatives are available) that allows them to see not only their own work on a problem, but that of their teammates.  Within CoSolve, a solverÆs activity consists of (1) creating new partial solutions (called states) by making changes (applying "operators") to existing partial solutions, and (2) annotating existing partial solutions with comments, evaluations, and strategic information for the team.   Examples client views of a CoSolve solving session are shown in the illustrations.  In one case the problem of designing an urban development plan has been formulated in a game-like manner.  In another, a problem in constructive geometry is shown.  An advanced feature of CoSolve is a facility that allows solvers to set up computational tasks and invoke software agents to perform them on behalf of the team of solvers.  The project has succeeded in identifying many of the issues faced when providing a computer system to support problem solving and design using the classical theory of problem solving.  The issues include how to partition the problem solving process into phases that permit a clear differentiation in skill requirements for human posers and solvers.  Furthermore, the issues include how to provide general problem posing and solving frameworks that work not only computationally, but from a human perspective.  The project has pioneered the design and implementation of two systems that offer specific approaches to those issues.  This work provides a strong foundation for further study of collaborative problem solving and design with computers.          Last Modified: 11/06/2011       Submitted by: Steven L Tanimoto]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
