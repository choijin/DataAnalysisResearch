<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Semantics and Hardware Implementation of Transactional Memory</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>06/01/2007</AwardEffectiveDate>
<AwardExpirationDate>05/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>320000.00</AwardTotalIntnAmount>
<AwardAmount>415800</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>After decades of research on shared-memory multiprocessors, computers with multiple processors have now been widely embraced with the arrival of the multicore revolution.  Unlike the previous microprocessor revolution---which required no fundamental software changes---the multicore revolution requires a significant shift for software.  Because much of the accustomed exponential performance improvements over the next decade will come directly from multiplying the number of processor cores on a chip, programmers that wish to harness this computational power must undertake the difficult task of creating parallel versions of their programs.&lt;br/&gt;&lt;br/&gt;To reduce the difficulty of this task of creating correct and efficient shared-memory programs, recent work on "transactional memory" has focused on providing the programmer with a higher-level primitive than just lock- based critical sections for managing concurrency in their shared-memory programs: a region of code annotated to execute as if it was not running in parallel with other code.  Although conceptually serial, advanced implementations allow for concurrent execution while still providing a serializable semantics.&lt;br/&gt;&lt;br/&gt;The goal of this research is to identify, understand, and resolve the most important semantic and implementation challenges of hardware-based transactional memory.  Just as the multiprocessor research successfully overcame important challenges, this research tackles the analogous challenges for hardware transactional memory: (i) understanding the semantics of the hardware/software interface, (ii) developing simple and fast hardware implementations, and (iii) creating critical experimental simulation and workload infrastructures.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>03/26/2007</MinAmdLetterDate>
<MaxAmdLetterDate>05/05/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0644197</AwardID>
<Investigator>
<FirstName>Milo</FirstName>
<LastName>Martin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Milo Martin</PI_FULL_NAME>
<EmailAddress>milom@cis.upenn.edu</EmailAddress>
<PI_PHON>2157462972</PI_PHON>
<NSF_ID>000383219</NSF_ID>
<StartDate>03/26/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Pennsylvania</Name>
<CityName>Philadelphia</CityName>
<ZipCode>191046205</ZipCode>
<PhoneNumber>2158987293</PhoneNumber>
<StreetAddress>Research Services</StreetAddress>
<StreetAddress2><![CDATA[3451 Walnut St, 5th Flr Franklin]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042250712</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042250712</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Pennsylvania]]></Name>
<CityName>Philadelphia</CityName>
<StateCode>PA</StateCode>
<ZipCode>191046205</ZipCode>
<StreetAddress><![CDATA[Research Services]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>1640</Code>
<Text>Information Technology Researc</Text>
</ProgramElement>
<ProgramElement>
<Code>7329</Code>
<Text>COMPILERS</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~80000</FUND_OBLG>
<FUND_OBLG>2008~160000</FUND_OBLG>
<FUND_OBLG>2009~15800</FUND_OBLG>
<FUND_OBLG>2010~80000</FUND_OBLG>
<FUND_OBLG>2011~80000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Transactional memory is a ground-breaking approach for coordinating the operations of software running on multicore chips. This hardware-supported mechanism has the potential to ameliorate the traditional challenges of multicore programming that relies on conventional synchronization methods such as locks. &nbsp;Transactional memory systems allow programmers to specify regions of code, called transactions, the execution of which are logically serialized (that is, transactions are isolated from one another). &nbsp;Transactional memory systems optimistically execute transactions concurrently, yet the appearance of serialization is preserved because when two concurrent transactions share data (and at least one writes it), they are serialized by aborting, rolling back, and restarting one of them. &nbsp;The global serialization property gives transactions more powerful semantics than locks, affording programmers the simplicity of coarse-grained locks, while achieving the performance of fine-grained locks.</p> <p>Although the above advantages of transactional memory show tremendous potential, transactional memory faces many challenges. &nbsp;This project endeavored to address both immediate and longer term challenges. Specifically, the project focused on understanding various possible semantics and their implementation ramifications, discovering efficient and complexity-effective implementation techniques, developing the simulation and workload infrastructure necessary to evaluate transactional memory proposals, and identifying software restructurings and hardware mechanisms to avoid performance-sapping transactional conflicts.</p> <p>The project resulted in several advances in scientific understanding and research infrastructure. &nbsp;The project was the first to articulate the subtle semantics of transactional memory and identified the interaction of locks and transactions as an additional salient semantic barrier to the deployment of transactional memory. To improve and simplify the implementation of transactional memory, the project focused on extending the common-case implementation of transactional memory by proposing a "permissions-only cache". &nbsp;This cache can efficiently extend the size at which a transaction must overflow, decoupling that size from the size of the data cache. &nbsp;This technique allows a designer to engineer a system to make transactional overflow &nbsp;vanishingly rare. &nbsp;Making such overflows rare provides the opportunity to create simpler methods for handling overflows, one of which we developed and evaluated that also supports performing input/output operations within transactions. &nbsp;To address a potential performance limiter, the project developed techniques for mitigating the negative performance impact of true conflicts by using "transactional repair" techniques that use value-based conflict detection (rather than address-based detection), symbolic tracking of values, and recording of control flow constraints to avoid aborts via commit-time repair of transactions. &nbsp;Finally, we developed and publicly distributed the simulation tools developed in the course of this project, which have been subsequently used by other researchers in dozens of research papers.</p> <p>As part of the project's goal to integrate research and education, a new course on multicore programming was developed and a new "bottom up" introductory systems course specifically tailored to students without extensive prior computer knowledge was introduced into the curriculum. &nbsp;This award partially supported three undergraduate summer students and five different PhD students during various stages of their graduate training. &nbsp;The project's findings were broadly disseminated through publications and presentations on the work to both academic and industrial audiences. A PhD dissertation written by one of the supported students cohesively describes th...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Transactional memory is a ground-breaking approach for coordinating the operations of software running on multicore chips. This hardware-supported mechanism has the potential to ameliorate the traditional challenges of multicore programming that relies on conventional synchronization methods such as locks.  Transactional memory systems allow programmers to specify regions of code, called transactions, the execution of which are logically serialized (that is, transactions are isolated from one another).  Transactional memory systems optimistically execute transactions concurrently, yet the appearance of serialization is preserved because when two concurrent transactions share data (and at least one writes it), they are serialized by aborting, rolling back, and restarting one of them.  The global serialization property gives transactions more powerful semantics than locks, affording programmers the simplicity of coarse-grained locks, while achieving the performance of fine-grained locks.  Although the above advantages of transactional memory show tremendous potential, transactional memory faces many challenges.  This project endeavored to address both immediate and longer term challenges. Specifically, the project focused on understanding various possible semantics and their implementation ramifications, discovering efficient and complexity-effective implementation techniques, developing the simulation and workload infrastructure necessary to evaluate transactional memory proposals, and identifying software restructurings and hardware mechanisms to avoid performance-sapping transactional conflicts.  The project resulted in several advances in scientific understanding and research infrastructure.  The project was the first to articulate the subtle semantics of transactional memory and identified the interaction of locks and transactions as an additional salient semantic barrier to the deployment of transactional memory. To improve and simplify the implementation of transactional memory, the project focused on extending the common-case implementation of transactional memory by proposing a "permissions-only cache".  This cache can efficiently extend the size at which a transaction must overflow, decoupling that size from the size of the data cache.  This technique allows a designer to engineer a system to make transactional overflow  vanishingly rare.  Making such overflows rare provides the opportunity to create simpler methods for handling overflows, one of which we developed and evaluated that also supports performing input/output operations within transactions.  To address a potential performance limiter, the project developed techniques for mitigating the negative performance impact of true conflicts by using "transactional repair" techniques that use value-based conflict detection (rather than address-based detection), symbolic tracking of values, and recording of control flow constraints to avoid aborts via commit-time repair of transactions.  Finally, we developed and publicly distributed the simulation tools developed in the course of this project, which have been subsequently used by other researchers in dozens of research papers.  As part of the project's goal to integrate research and education, a new course on multicore programming was developed and a new "bottom up" introductory systems course specifically tailored to students without extensive prior computer knowledge was introduced into the curriculum.  This award partially supported three undergraduate summer students and five different PhD students during various stages of their graduate training.  The project's findings were broadly disseminated through publications and presentations on the work to both academic and industrial audiences. A PhD dissertation written by one of the supported students cohesively describes the core findings of this project.  When this project began six years ago, transactional memory was a newly rediscovered academic idea, and it was ...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
