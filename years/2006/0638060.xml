<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SBIR Phase I: Application of Advanced Environment Analysis for Secure, Scalable Software Development</AwardTitle>
    <AwardEffectiveDate>01/01/2007</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2007</AwardExpirationDate>
    <AwardAmount>99969</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>07070000</Code>
      <Directorate>
        <LongName>Directorate For Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Div Of Industrial Innovation &amp; Partnersh</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Ian M. Bennett</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>This Small Business Innovation Research Phase I research project supports the research and engineering required to adapt a software verification framework to the C programming language that enables the removal of all potential security flaws from software-based applications before product release. Several research and engineering challenges have prevented industry adoption so far, including: Time Often, verification of a complex system takes days, weeks or months; False Positives Frequently, current techniques report 'flaws' which are, in fact, perfectly valid code; User Interaction Existing verifiers, such as ACL2, require highly advanced expert knowledge not suitable for mainstream programmers. The integration of many techniques have been developed for specific problems, but these techniques are often fixed to a specific programming paradigm or feature set; integrating these techniques into a single verifier remains a challenge. &lt;br/&gt;&lt;br/&gt;Several large research groups have been chasing the elusive goal of scalable, precise software verification for nearly a decade. Software verification is has been called the "Holy Grail," because it promises an end to bugs, to security flaws and to patching. However, despite tens of millions spent in the quest, precise, scalable software verification has not been achieved. Current software verification tools are cumbersome and prohibitively slow on standard hardware and too inaccurate to be considered a viable option for commercial use. Inaccuracy, in the context of verification, means that the tool flags too many perfectly legitimate lines of code as potentially flawed: frustrating programmers and wasting productivity. This research will make automatic, secure software verification possible for real, commercial code bases.</AbstractNarration>
    <MinAmdLetterDate>11/09/2006</MinAmdLetterDate>
    <MaxAmdLetterDate>06/08/2007</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0638060</AwardID>
    <Investigator>
      <FirstName>Matthew</FirstName>
      <LastName>Might</LastName>
      <EmailAddress>might@cs.utah.edu</EmailAddress>
      <StartDate>11/09/2006</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Diagis Systems, Inc.</Name>
      <CityName>Atlanta</CityName>
      <ZipCode>303081023</ZipCode>
      <PhoneNumber>4043582192</PhoneNumber>
      <StreetAddress>75 5th Street N.W.</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Georgia</StateName>
      <StateCode>GA</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0110000</Code>
      <Name>Technology Transfer</Name>
    </FoaInformation>
  </Award>
</rootTag>
