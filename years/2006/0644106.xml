<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Querying and Controlling Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>02/01/2007</AwardEffectiveDate>
<AwardExpirationDate>01/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>499995.00</AwardTotalIntnAmount>
<AwardAmount>535995</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Frank Olken</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>The increasing complexity, scale, and dynamics of networked computing systems make it hard for users and system administrators to understand and control these systems.   A significant fraction of time and money is spent tackling unexpected system performance problems or tuning large systems with many components, the performance of which depends on thousands of dependencies and parameters.   This problem is tackled by the Ques project using innovative data management techniques.  Ques treats a computing system as a rich source of data about system configuration and activity, available typically as continuous, rapid, and time-varying data streams.   System administrators are   given the ability to pose  a broad range of system management queries over this data.   Ques addresses challenges in developing simple and intuitive ways to express these queries, processing the queries automatically and efficiently using query execution plans, and controlling systems based on statistical and performance models learned from system data.  A fully functional prototype of Ques is developed and deployed in a real world setting.  The ideas from Ques are incorporated into two new courses for graduate and undergraduate students at Duke.  Automated plan generation algorithms for complex system management queries will have a major impact towards making systems more manageable by human administrators.  The source code of Ques will be released publicly and the technology will be migrated potentially to industrial strength system management products. Results from Ques will be disseminated via the project Web site  (http://www.cs.duke.edu/~shivnath/ques.html).</AbstractNarration>
<MinAmdLetterDate>01/05/2007</MinAmdLetterDate>
<MaxAmdLetterDate>01/05/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0644106</AwardID>
<Investigator>
<FirstName>Shivnath</FirstName>
<LastName>Babu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Shivnath Babu</PI_FULL_NAME>
<EmailAddress>shivnath@cs.duke.edu</EmailAddress>
<PI_PHON>9196606579</PI_PHON>
<NSF_ID>000488390</NSF_ID>
<StartDate>01/05/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Duke University</Name>
<CityName>Durham</CityName>
<ZipCode>277054010</ZipCode>
<PhoneNumber>9196843030</PhoneNumber>
<StreetAddress>2200 W. Main St, Suite 710</StreetAddress>
<StreetAddress2><![CDATA[Erwin Square]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>044387793</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>DUKE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>044387793</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Duke University]]></Name>
<CityName>Durham</CityName>
<StateCode>NC</StateCode>
<ZipCode>277054010</ZipCode>
<StreetAddress><![CDATA[2200 W. Main St, Suite 710]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9216</Code>
<Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<ProgramReference>
<Code>SMET</Code>
<Text>SCIENCE, MATH, ENG &amp; TECH EDUCATION</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~87917</FUND_OBLG>
<FUND_OBLG>2008~106005</FUND_OBLG>
<FUND_OBLG>2009~111706</FUND_OBLG>
<FUND_OBLG>2010~123554</FUND_OBLG>
<FUND_OBLG>2011~106813</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Business-critical systems often have hundreds of&nbsp;components---e.g., applications, databases, storage area&nbsp;networks---whose performance depend on thousands of&nbsp;intricate and time-varying dependencies and parameters.&nbsp;The Ques project used innovative data management techniques to address the dangerous spiral towards unwieldy&nbsp;systems, high system administration costs, and frustrated users.&nbsp;Ques treats a computing system as a rich source of data&nbsp;about system configuration and activity, available typically as&nbsp;continuous, rapid, and time-varying data streams.&nbsp;</p> <p><br />Ques has enabled users and system administrators to pose a&nbsp;broad range of system-management queries over the data. Important query types in Ques include forecasting (e.g.,&nbsp;how long will this application take to complete?),&nbsp;diagnosis (e.g., why is my application two times slower today compared to last week?), and recommendation (e.g., what memory&nbsp;configuration settings should I use for my database&nbsp;server in order to get the lowest response time for requests?) Analytical as well as empirical studies were done to identify the challenges in answering such system-management queries automatically and efficiently. Various types of systems were considered &nbsp;in these studies. Examples include relational database&nbsp;servers like MySQL and PostgreSQL, Web servers such as&nbsp;the Apache Web server, application servers such as Apache Tomcat,&nbsp;storage area networks such as IBM DS6000, and systems&nbsp;for distributed data processing such as the Hadoop MapReduce system.&nbsp;</p> <p>A number of algorithms were developed in Ques in order to&nbsp;answer system-management queries automatically. Two important&nbsp;types of innovations are present in these algorithms.&nbsp;First, these algorithms use a hybrid combination of&nbsp;techniques from analytical system modeling and machine-learning&nbsp;analysis, often in conjunction with domain knowledge that system administrators possess. Second, many of these algorithms&nbsp;have the ability to identify data that is currently missing. Collecting such missing data will enable the algorithms to&nbsp;provide more accurate query results. Empirical studies&nbsp;were done to show the benefits of these algorithms by implementing them in a prototype of Ques.&nbsp;</p> <p>Features of the Ques prototype have been demonstrated at a number&nbsp;of venues. The demonstrated features include: (a) query specification interface and automated processing algorithms for diagnosis and anomaly-detection queries in the context of database systems and&nbsp;storage area networks, (b) recommendation queries arising from resource provisioning for virtual machines running&nbsp;data-intensive applications on clusters, and (c) recommendation&nbsp;queries arising from query execution plan and configuration parameter&nbsp;tuning for relational database servers, the Hadoop MapReduce system, and&nbsp;continuous query processing systems.&nbsp;</p> <p>Demonstration of the Ques prototype won the best system demonstration&nbsp;award at the ACM SIGMOD Conference in 2010. An educational version of this software was also developed for use in classes that&nbsp;teach the design and implementation of data-intensive computing&nbsp;systems. This software makes it easy for students to deploy and run&nbsp;distributed systems such as Hadoop on cloud platforms such as Amazon Web Services. In addition, the software has deep introspection and visualization capabilities that help students better understand distributed query processing techniques.&nbsp;</p> <p>Many research publications and Ph.D. dissertations, M.S. projects,&nbsp;undergraduate research projects, as well as high-school senior projects have emerged from the Ques project. Students working on the Ques project have won awards such as the Doctoral Dissertation Award and&nbsp;Doctoral Candi...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Business-critical systems often have hundreds of components---e.g., applications, databases, storage area networks---whose performance depend on thousands of intricate and time-varying dependencies and parameters. The Ques project used innovative data management techniques to address the dangerous spiral towards unwieldy systems, high system administration costs, and frustrated users. Ques treats a computing system as a rich source of data about system configuration and activity, available typically as continuous, rapid, and time-varying data streams.    Ques has enabled users and system administrators to pose a broad range of system-management queries over the data. Important query types in Ques include forecasting (e.g., how long will this application take to complete?), diagnosis (e.g., why is my application two times slower today compared to last week?), and recommendation (e.g., what memory configuration settings should I use for my database server in order to get the lowest response time for requests?) Analytical as well as empirical studies were done to identify the challenges in answering such system-management queries automatically and efficiently. Various types of systems were considered  in these studies. Examples include relational database servers like MySQL and PostgreSQL, Web servers such as the Apache Web server, application servers such as Apache Tomcat, storage area networks such as IBM DS6000, and systems for distributed data processing such as the Hadoop MapReduce system.   A number of algorithms were developed in Ques in order to answer system-management queries automatically. Two important types of innovations are present in these algorithms. First, these algorithms use a hybrid combination of techniques from analytical system modeling and machine-learning analysis, often in conjunction with domain knowledge that system administrators possess. Second, many of these algorithms have the ability to identify data that is currently missing. Collecting such missing data will enable the algorithms to provide more accurate query results. Empirical studies were done to show the benefits of these algorithms by implementing them in a prototype of Ques.   Features of the Ques prototype have been demonstrated at a number of venues. The demonstrated features include: (a) query specification interface and automated processing algorithms for diagnosis and anomaly-detection queries in the context of database systems and storage area networks, (b) recommendation queries arising from resource provisioning for virtual machines running data-intensive applications on clusters, and (c) recommendation queries arising from query execution plan and configuration parameter tuning for relational database servers, the Hadoop MapReduce system, and continuous query processing systems.   Demonstration of the Ques prototype won the best system demonstration award at the ACM SIGMOD Conference in 2010. An educational version of this software was also developed for use in classes that teach the design and implementation of data-intensive computing systems. This software makes it easy for students to deploy and run distributed systems such as Hadoop on cloud platforms such as Amazon Web Services. In addition, the software has deep introspection and visualization capabilities that help students better understand distributed query processing techniques.   Many research publications and Ph.D. dissertations, M.S. projects, undergraduate research projects, as well as high-school senior projects have emerged from the Ques project. Students working on the Ques project have won awards such as the Doctoral Dissertation Award and Doctoral Candidacy Award from the Department of Computer Science at Duke University. The project has also benefited from research contributions by students from underrepresented minorities through the Mellon Mays Undergraduate Fellowship.       Last Modified: 04/25/2013       Submitted by: Shivnath Babu]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
