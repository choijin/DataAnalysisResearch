<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CT-ISG: Representation, Analysis, and Verification of Access Control in Dynamic Environments</AwardTitle>
<AwardEffectiveDate>09/15/2006</AwardEffectiveDate>
<AwardExpirationDate>08/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Access-control policies have grown from simple matrices to non-trivial specifications in their own right: they are written, separately from the applications that use them, in domain-specific languages; they are often composed of (sometimes geographically distributed) fragments, which are combined using semantically rich policy-combination operators; and they consult a dynamic environment comprised of information from many sources including the underlying application and the operating environment of the system.  These features make policies hard to get right, in part because policy authors must understand how their policies will interact with an environment that is constantly changing.&lt;br/&gt;&lt;br/&gt;Policy authors thus need increasingly strong tools to help understand the effects of their policies.  These tools must support common authoring scenarios.  Authors often have a policy that "works" and a new policy that encapsulates a desired change.  Testing can foster confidence that the changes do what is desired, but generally miss effects that weren't expected.  For such scenarios, it is far more useful to employ a process such as change-impact analysis, which semantically compares two policies while respecting the dynamic nature of the environment.  Traditional property-based analyses such as formal verification, while useful, do not support this scenario.&lt;br/&gt;&lt;br/&gt;This project is developing the theoretical foundations and prototype tools for analyzing realistic access-control policies in their dynamic environments.  The tools support both property-based verification and property-free analyses such as change-impact analysis for industrial standard policy languages (such as XACML).  The novel components of this project are its fine-grained and rich model of the dynamic environment and its focus on property-free analyses that accommodate common authoring scenarios.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/29/2006</MinAmdLetterDate>
<MaxAmdLetterDate>07/17/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0627310</AwardID>
<Investigator>
<FirstName>Shriram</FirstName>
<LastName>Krishnamurthi</LastName>
<EmailAddress>sk+17@cs.brown.edu</EmailAddress>
<StartDate>08/29/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brown University</Name>
<CityName>Providence</CityName>
<ZipCode>029129002</ZipCode>
<PhoneNumber>4018632777</PhoneNumber>
<StreetAddress>BOX 1929</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<StateCode>RI</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7371</Code>
<Text>CYBER TRUST</Text>
</ProgramElement>
<ProgramElement>
<Code>7456</Code>
<Text>ITR-CYBERTRUST</Text>
</ProgramElement>
<ProgramReference>
<Code>7254</Code>
<Text>CYBER SECURITY ACT PROPOSALS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
