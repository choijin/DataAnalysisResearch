<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CT-ER: Automatic Identification and Protection of Security Critical Data</AwardTitle>
<AwardEffectiveDate>09/01/2006</AwardEffectiveDate>
<AwardExpirationDate>08/31/2009</AwardExpirationDate>
<AwardTotalIntnAmount>200000.00</AwardTotalIntnAmount>
<AwardAmount>200000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>carl landwehr</SignBlockName>
</ProgramOfficer>
<AbstractNarration>The most popular avenue exploited by malicious software authors for the past dozen years has been to pervert normal program execution by corrupting control data. Many defenses have been developed that mitigate such attacks and safeguards against them are being deployed with popular commodity operating systems. Because of the success of those defenses, attackers will seek out new vulnerabilities. Attacks against security-sensitive non-control data, which have been demonstrated against several applications, are expected to become more widespread.&lt;br/&gt;&lt;br/&gt;This project develops and evaluates a defense against memory-corrupting non-control data attacks. The defense combines commonly-available hardware and operating system support with program transformations and inference techniques to automatically protect security-critical program data from corruption. The research is developing techniques that minimize the window of opportunity when critical data can be compromised by storing critical data in special read-only memory pages that are protected by hardware and operating system mechanisms. This project develops inference algorithms for identifying security-critical data and program transformations to place such data in secure storage and control access to it.&lt;br/&gt;&lt;br/&gt;This defense offers low run-time overhead and a high assurance of protection regardless of the means used by an attacker to corrupt memory. This project is evaluated using formal proofs of soundness, tests against real and constructed vulnerabilities and attacks, and measurements of the inference effectiveness and transformation performance costs of a prototype implementation applied to popular software servers.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/16/2006</MinAmdLetterDate>
<MaxAmdLetterDate>08/06/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0627523</AwardID>
<Investigator>
<FirstName>David</FirstName>
<LastName>Evans</LastName>
<EmailAddress>evans@cs.virginia.edu</EmailAddress>
<StartDate>08/16/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Westley</FirstName>
<LastName>Weimer</LastName>
<EmailAddress>weimerw@umich.edu</EmailAddress>
<StartDate>08/16/2006</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Virginia Main Campus</Name>
<CityName>CHARLOTTESVILLE</CityName>
<ZipCode>229044195</ZipCode>
<PhoneNumber>4349244270</PhoneNumber>
<StreetAddress>P.O.  BOX 400195</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Virginia</StateName>
<StateCode>VA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7371</Code>
<Text>CYBER TRUST</Text>
</ProgramElement>
<ProgramElement>
<Code>7456</Code>
<Text>ITR-CYBERTRUST</Text>
</ProgramElement>
<ProgramReference>
<Code>7254</Code>
<Text>CYBER SECURITY ACT PROPOSALS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
