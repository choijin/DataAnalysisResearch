<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CSR---EHS.  Quest: A System for Application-Specific Real-Time Services</AwardTitle>
<AwardEffectiveDate>07/01/2006</AwardEffectiveDate>
<AwardExpirationDate>06/30/2009</AwardExpirationDate>
<AwardAmount>150000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
</ProgramOfficer>
<AbstractNarration>In order to eliminate the costs of proprietary systems and special purpose hardware, many real-time and embedded computing platforms are being built on commodity operating systems and generic hardware. Unfortunately, many such systems are ill-suited to the low-latency and predictable timing requirements of real-time applications. This proposal, therefore, focuses on application-specific service technologies for low-cost commodity computing platforms, so that real-time service guarantees can be met. One of the main thrusts of this work is the structure of systems software, so that a common code-base can be reused for a number of diverse applications on a range of commonly-used (but contrasting) hardware. Novel methods for providing service isolation, protection, and efficient and predictable execution are considered.&lt;br/&gt;&lt;br/&gt;This research expands on prior efforts towards system extensibility and safety. The research seeks quality-of-service safe (QoS safe) extensions within the kernels of commodity systems such as Linux, as well as at user-level. By QoS safe we mean a service is not only memory-safe, in that it does not encroach on addresses for which it is not granted access, but also that it executes in a predictable manner according to quality of service (QoS) constraints. Lessons from prior work on user-level sandboxing (ULS) and safe kernel extensions (SafeX) are being used to design a new system software architecture, called Quest, comprising mechanisms and policies that guarantee the safe and predictable composition of user-specified services for real-time and embedded applications.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>06/21/2006</MinAmdLetterDate>
<MaxAmdLetterDate>04/16/2007</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0615153</AwardID>
<Investigator>
<FirstName>Richard</FirstName>
<LastName>West</LastName>
<EmailAddress>richwest@cs.bu.edu</EmailAddress>
<StartDate>06/21/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Trustees of Boston University</Name>
<CityName>BOSTON</CityName>
<ZipCode>022151300</ZipCode>
<PhoneNumber>6173534365</PhoneNumber>
<StreetAddress>881 COMMONWEALTH AVE</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>Computer Systems Research (CSR</Text>
</ProgramElement>
<ProgramReference>
<Code>2801</Code>
<Text>EMBEDDED &amp; HYBRID SYSTEMS(EHS)</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
