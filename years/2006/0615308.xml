<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: CSR---EHS: Improving Sensor Network Software Reliability through Language, Tool, and OS Co-Design</AwardTitle>
<AwardEffectiveDate>09/15/2006</AwardEffectiveDate>
<AwardExpirationDate>08/31/2010</AwardExpirationDate>
<AwardTotalIntnAmount>360000.00</AwardTotalIntnAmount>
<AwardAmount>360000</AwardAmount>
<AwardInstrument>
<Value>Continuing grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Wireless sensor networks enable fine-grained, real-time information collection from the real world.  Sensor net software must be reliable because it is long-lived, large scale, and deeply embedded.  This research project addresses the challenge of improving the reliability of component-based wireless sensor network software through the parallel co-design of an operating system, its language, and supporting program analysis tools.  The project focuses on TinyOS and seeks to solve difficult component composition problems that even expert developers encounter.  The long-term vision is to make creating robust applications largely from existing components feasible for non-expert developers.  The research is based on three complementary approaches. First, the PIs are developing tool support for giving developers advice about how to meet time constraints.  Timing problems are difficult to deal with in TinyOS because they cut across component boundaries in non-intuitive ways.  Second, the PIs are adding support for component interface contracts to TinyOS.  Contracts verify that the "rules" for using a component are respected, pinpointing errors when developers misunderstand or misuse an interface, avoiding difficult debugging sessions.  Finally, based on their experiences with the tradeoffs between static and dynamic timing and contract checking, the PIs are revisiting the basic abstractions and structure of TinyOS, redesigning them to be more easily checkable, and therefore more reliable.  The intent is to improve reliability by rendering many classes of bugs impossible by design, rather than relying on heroic analysis and testing techniques</AbstractNarration>
<MinAmdLetterDate>06/23/2006</MinAmdLetterDate>
<MaxAmdLetterDate>08/15/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0615308</AwardID>
<Investigator>
<FirstName>Dawson</FirstName>
<LastName>Engler</LastName>
<EmailAddress>engler@csl.stanford.edu</EmailAddress>
<StartDate>06/23/2006</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Philip</FirstName>
<LastName>Levis</LastName>
<EmailAddress>pal@cs.stanford.edu</EmailAddress>
<StartDate>06/23/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stanford University</Name>
<CityName>Stanford</CityName>
<ZipCode>943052004</ZipCode>
<PhoneNumber>6507232300</PhoneNumber>
<StreetAddress>450 Jane Stanford Way</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>2801</Code>
<Text>EMBEDDED &amp; HYBRID SYSTEMS(EHS)</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
