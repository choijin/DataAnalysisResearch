<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER:  Horseshoes and Hand Grenades:  Exploiting Error Tolerance in Applications</AwardTitle>
<AwardEffectiveDate>06/01/2007</AwardEffectiveDate>
<AwardExpirationDate>02/28/2009</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>120000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Chitaranjan Das</SignBlockName>
</ProgramOfficer>
<AbstractNarration>The goal in most reliability projects has, traditionally, been to prevent errors of all kinds.  Researchers are now discovering that not all errors cause a failure. Some errors can be masked within the circuits as not all inputs affect final results.  By preventing all errors rather than only those errors that change a result, time and power get wasted.  This project proposes to explore techniques which allow errors to occur that do not change final results. In many applications such as facial recognition or voice recognition, many of the data errors will not be noticed by the software, depending on the particular data. For example, if we one bit gets flipped in an incoming audio signal for voice recognition, it may not affect the result at all. The proper word may be recognized despite the error in one sample. A key observation, however, is that even these applications are not very resistant to control flow errors. For example, if the voice recognition software stops before it completes its analysis of the audio signal, the wrong word would most likely be recognized leading to failure. &lt;br/&gt;&lt;br/&gt;This project explores how to take advantage of partial tolerance to unreliability.  More efficient reliability mechanisms can be designed that are targeted towards only the important instructions, not all instructions. In even more tolerant applications, errors can be introduced into the system in order to speed up the system--allowing the process to proceed without waiting for slow operations.  In order to discover and exploit error-tolerance, this project will identify 10-15 applications that are tolerant to errors, develop heuristics to determine which instructions are more tolerant to error than others, develop specific techniques for efficiently protecting only critical instructions from errors, and develop mechanisms to introduce errors into less important, high-latency instructions in order to save power and/or improve performance.</AbstractNarration>
<MinAmdLetterDate>06/04/2007</MinAmdLetterDate>
<MaxAmdLetterDate>06/25/2008</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>0643621</AwardID>
<Investigator>
<FirstName>Diana</FirstName>
<LastName>Franklin</LastName>
<EmailAddress>dmfranklin@uchicago.edu</EmailAddress>
<StartDate>06/04/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>California Polytechnic State University Foundation</Name>
<CityName>San Luis Obispo</CityName>
<ZipCode>934070830</ZipCode>
<PhoneNumber>8057562982</PhoneNumber>
<StreetAddress>One Grand Ave</StreetAddress>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
</Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
</Award>
</rootTag>
