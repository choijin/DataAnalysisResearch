<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Operating System Support For Transactional Memory: Construction and Performance Scalability of Parallel Programs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2007</AwardEffectiveDate>
<AwardExpirationDate>12/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>D. Helen Gill</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>CAREER: Self-Managing Resource Allocation in Unsupervised Distributed Systems&lt;br/&gt;&lt;br/&gt;Recent years have seen a growing deployment of distributed computing&lt;br/&gt;infrastructures such as Grids, PlanetLab, @home, and peer-to-peer systems,&lt;br/&gt;that run a variety of Web, commercial, and scientific applications.&lt;br/&gt;Many of these infrastructures are unsupervised---they consist of large number &lt;br/&gt;of loosely-connected nodes that contribute computational and storage &lt;br/&gt;resources but are not centrally managed. Such unsupervised infrastructures &lt;br/&gt;are characterized by uncertainty in their resource availability caused by &lt;br/&gt;failures, varying load conditions, and node churn, thus putting undue burden on&lt;br/&gt;application writers and system administrators for the successful&lt;br/&gt;deployment and execution of applications. This project is developing a &lt;br/&gt;self-managing resource allocation framework that would hide&lt;br/&gt;the infrastructure uncertainties and dynamics from applications, &lt;br/&gt;while transparently adapting to changing conditions within the infrastructure.&lt;br/&gt;As part of this framework, this project is developing techniques for:&lt;br/&gt;(i) Predictable resource aggregation to provide resource guarantees to &lt;br/&gt;applications in the presence of dynamic loads and changing resource availability,&lt;br/&gt;(ii) Reliability-aware resource management to provide desired levels&lt;br/&gt;of reliability and availability, and&lt;br/&gt;(iii) System inference and prediction to enable decentralized inference&lt;br/&gt;of global system conditions for proactive response to dynamic infrastructure changes.&lt;br/&gt;These techniques are based on cooperation and redundancy among nodes in the &lt;br/&gt;infrastructure to provide scalability and decentralization. &lt;br/&gt;The proposed research will have significant impact on distributed &lt;br/&gt;computing by enabling effective deployment of large-scale scientific &lt;br/&gt;and commercial applications on resource-rich but unreliable infrastructures.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>12/21/2006</MinAmdLetterDate>
<MaxAmdLetterDate>01/14/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0644205</AwardID>
<Investigator>
<FirstName>Emmett</FirstName>
<LastName>Witchel</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Emmett Witchel</PI_FULL_NAME>
<EmailAddress>witchel@cs.utexas.edu</EmailAddress>
<PI_PHON>5122327889</PI_PHON>
<NSF_ID>000164959</NSF_ID>
<StartDate>12/21/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at Austin</Name>
<CityName>Austin</CityName>
<ZipCode>787595316</ZipCode>
<PhoneNumber>5124716424</PhoneNumber>
<StreetAddress>3925 W Braker Lane, Ste 3.340</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>170230239</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT AUSTIN</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at Austin]]></Name>
<CityName>Austin</CityName>
<StateCode>TX</StateCode>
<ZipCode>787595316</ZipCode>
<StreetAddress><![CDATA[3925 W Braker Lane, Ste 3.340]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>4090</Code>
<Text>ADVANCED NET INFRA &amp; RSCH</Text>
</ProgramElement>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~88793</FUND_OBLG>
<FUND_OBLG>2008~85587</FUND_OBLG>
<FUND_OBLG>2009~75107</FUND_OBLG>
<FUND_OBLG>2010~75718</FUND_OBLG>
<FUND_OBLG>2011~74795</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Processors, the computational heart of computer systems, have been changing rapidly over the past five years. &nbsp;With single-threaded performance increasing much more slowly than it did in the 90s and early 2000s, manufacturers have been increasing core counts. &nbsp;But making use of these increasing core counts has been an engineering struggle.</p> <p><br />CNS-0644205 is a CAREER grant intended to address software support for increasing core counts by developing the technology of memory transactions. &nbsp;Memory transactions allow the programmer to specify that certain data structure updates must complete as a unit, without partial results visible to other computational threads in the system.For example, a memory transaction would allow a programmer to add an item to a queue, which is an operation that requires several memory updates. &nbsp;Other threads would be able to observe only the legal beforestate and the legal after state, i.e., the state without and then with the new item. &nbsp;Threads could not observe the queue state as it isbeing updated.</p> <p><br />Transactions in database systems have been a historically successful programming abstraction, so memory transactions should help make multicore programming easier. &nbsp;Transactions should improve performance, reduce implementation complexity, and most importantly reduce the conceptual complexity of implementing system services.</p> <p><br />The project accomplished its goals via the following major findings.</p> <p>Our work on TxLinux establishes how a modern operating system (OS) could use memory transactions, and how it must support memory transactions with modified scheduling policies.&nbsp;</p> <p><br />Our work on dependence aware transactions demonstrates a provably safe optimization that allows more memory transactions to safely commit.</p> <p><br />TxOS is a version of Linux that provides transactions as part of its system call interface. &nbsp;It shows how system transactions provide a safe and efficient concurrency API and how they can be provided at modest performance cost. &nbsp;We further demonstrate the utility of TxOS by adapting multiple server applications to use it, for example, an IMAP mail server and a Byzantine fault tolerant library.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 02/01/2013<br>      Modified by: Emmett&nbsp;Witchel</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Processors, the computational heart of computer systems, have been changing rapidly over the past five years.  With single-threaded performance increasing much more slowly than it did in the 90s and early 2000s, manufacturers have been increasing core counts.  But making use of these increasing core counts has been an engineering struggle.   CNS-0644205 is a CAREER grant intended to address software support for increasing core counts by developing the technology of memory transactions.  Memory transactions allow the programmer to specify that certain data structure updates must complete as a unit, without partial results visible to other computational threads in the system.For example, a memory transaction would allow a programmer to add an item to a queue, which is an operation that requires several memory updates.  Other threads would be able to observe only the legal beforestate and the legal after state, i.e., the state without and then with the new item.  Threads could not observe the queue state as it isbeing updated.   Transactions in database systems have been a historically successful programming abstraction, so memory transactions should help make multicore programming easier.  Transactions should improve performance, reduce implementation complexity, and most importantly reduce the conceptual complexity of implementing system services.   The project accomplished its goals via the following major findings.  Our work on TxLinux establishes how a modern operating system (OS) could use memory transactions, and how it must support memory transactions with modified scheduling policies.    Our work on dependence aware transactions demonstrates a provably safe optimization that allows more memory transactions to safely commit.   TxOS is a version of Linux that provides transactions as part of its system call interface.  It shows how system transactions provide a safe and efficient concurrency API and how they can be provided at modest performance cost.  We further demonstrate the utility of TxOS by adapting multiple server applications to use it, for example, an IMAP mail server and a Byzantine fault tolerant library.             Last Modified: 02/01/2013       Submitted by: Emmett Witchel]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
