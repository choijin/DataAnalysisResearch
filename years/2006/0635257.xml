<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>Collaborative Research: Spectral Graph Theory and Its Applications</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/01/2007</AwardEffectiveDate>
<AwardExpirationDate>04/30/2012</AwardExpirationDate>
<AwardTotalIntnAmount>472000.00</AwardTotalIntnAmount>
<AwardAmount>480000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Balasubramanian Kalyanasundaram</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Spectral Graph Theory or Algebraic Graph Theory, as it is also known,&lt;br/&gt;is the study of the relationship between the eigenvalues and&lt;br/&gt;eigenvectors of graphs and their combinatorial properties. Random&lt;br/&gt;walks on graphs, expander graphs, clustering, and several other&lt;br/&gt;combinatorial aspects of graphs are intimately connected to their&lt;br/&gt;spectral properties.  Recent approaches to the analysis of&lt;br/&gt;high-dimensional data have exploited the fundamental eigenvectors of&lt;br/&gt;the data. These data sets are large and ever increasing requiring&lt;br/&gt;``real-time" accurate responses to the given queries. This creates the&lt;br/&gt;need for very fast algorithms, that also provide strict theoretical&lt;br/&gt;guarantees on their output. Spectral techniques have been applied to image&lt;br/&gt;processing, both by computers and in the primary visual cortex of&lt;br/&gt;monkeys.  Critical component to all these application is algorithms&lt;br/&gt;with efficiency and accuracy guarantees for solving these linear system&lt;br/&gt;and finding their fundamental  eigenvectors.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;A multidisciplinary team consisting of Theoretical Computer&lt;br/&gt;Scientists, Machine Learning Scientist, and Neuroscientist will&lt;br/&gt;develop and apply spectral graph theory to applications from data&lt;br/&gt;mining to clustering, and image processing.  Enabling technology&lt;br/&gt;develop will include: 1) linear-work or O(m log m)-work algorithms&lt;br/&gt;that run in poly-logarithmic parallel time for computing extreme&lt;br/&gt;eigenvalues and generalized eigenvalues of diagonally-dominant&lt;br/&gt;matrices, including Laplacian matrices, as well as algorithms of&lt;br/&gt;similar complexity for solving the related linear systems. 2) Better&lt;br/&gt;estimates for Fiedler values and generalized Fiedler values.&lt;br/&gt;Application development: 1) Improvements in spectral image&lt;br/&gt;segmentation. 2) The use of generalized eigenvalues in data mining and&lt;br/&gt;image segmentation to combine multiple sources of information. 3) The&lt;br/&gt;use of preconditioners for approximate inference in graphical models.&lt;br/&gt;and 4) Combine insights into the problem of image segmentation gained&lt;br/&gt;from spectral algorithms with knowledge gained from recent experiments in visual system&lt;br/&gt;of monkeys to better understand how the primary visual cortex functions.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>05/01/2007</MinAmdLetterDate>
<MaxAmdLetterDate>04/09/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0635257</AwardID>
<Investigator>
<FirstName>Gary</FirstName>
<LastName>Miller</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gary Miller</PI_FULL_NAME>
<EmailAddress>glmiller@cs.cmu.edu</EmailAddress>
<PI_PHON>4122682631</PI_PHON>
<NSF_ID>000462221</NSF_ID>
<StartDate>05/01/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>John</FirstName>
<LastName>Lafferty</LastName>
<PI_MID_INIT>D</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>John D Lafferty</PI_FULL_NAME>
<EmailAddress>john.lafferty@yale.edu</EmailAddress>
<PI_PHON>2034368105</PI_PHON>
<NSF_ID>000092106</NSF_ID>
<StartDate>05/01/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Tai Sing</FirstName>
<LastName>Lee</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Tai Sing Lee</PI_FULL_NAME>
<EmailAddress>tai@cnbc.cmu.edu</EmailAddress>
<PI_PHON>4122681060</PI_PHON>
<NSF_ID>000181351</NSF_ID>
<StartDate>05/01/2007</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>PITTSBURGH</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>2860</Code>
<Text>THEORY OF COMPUTING</Text>
</ProgramElement>
<ProgramElement>
<Code>7351</Code>
<Text>THEORETICAL FOUNDATIONS (TF)</Text>
</ProgramElement>
<ProgramElement>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramElement>
<ProgramReference>
<Code>2860</Code>
<Text>THEORY OF COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~160000</FUND_OBLG>
<FUND_OBLG>2008~312000</FUND_OBLG>
<FUND_OBLG>2010~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The proposal was a collaboration beween four institutions: Berkeley, Carnegie Mellon, USC, and Yale. The work and findings described here were preformed at CMU.&nbsp; The main goal of this research was to find new more efficient computer algorithms for many problems that arrise in Computer Science, Engineering, the Sciences, and Medicine. The research focused on three main algorithmic areas: combinatorial graph theory, linear algebra, and computational geometry. The first two areas combine to form an area called spectral graph theory.&nbsp; We start by describing our work in this area first.<br /><br /><br />Spectral graph theory uses both graph algorithms to help solve problems in linear algebra and linear alebra to help solve problems in graph theory.<br />Possibly the most basic question in linear algebra is finding a solution to a system of simultaneous linear equations.<br />Humans have been studying this problem for at least the last two thousand years.&nbsp; The most famous method is Gaussian elimination.&nbsp; <br />Unfortunately as the systems have more degrees of freedom this method becomes both very slow and requires a lot of space&nbsp; because it runs in time cubic in the number of variables being solved and quadratic in the space<br />needed. As an example as to what this means suppose we what to solve an image problem<br />coming from an iphone with about ten million pixels. Thus Gaussian elimination would take about<br />thousand-billion-billion steps, a very large number even for a big machine.<br /><br />Our approach to this problem was to find methods for special yet useful cases of linear system solving.&nbsp; <br />The class of systems we focussed on are called Symmetric Diagonally Dominate (SDD) systems.<br />In work partially funded by this grant and more recent NSF grants we have been able to find an algorithm that solves SDD systems to constant precision in approximately&nbsp; m log m time,&nbsp; were m is the number of nonzero coefficients is the system.&nbsp; For our image example and ignoring<br />constants our algorithm wold take about a billion steps.<br /><br />This improves on the fairly complicated algorithm of Spielman and Teng that<br />ran in m times some-large-number-of-logarithmic-factors time. <br />This new algorithm&nbsp; is yet to be implemented. But an earlier algorithm that we developed, partially funded by this gran, has been implemented, made available to researchers, and used by us it to show the importance of solving the special case of SDD systems.<br /><br />There has been a growing number of applications of fast SDD solvers.<br />The list includes&nbsp; solving the heat equation,&nbsp; images denoising, image segmentation, generating a random spanning tree of a graph, and&nbsp; finding a flow maximum&nbsp; in a graph.&nbsp; <br />For each of these applications the best known asymptotic fast algorithm relies on the existence of&nbsp; fast SDD solvers.<br /><br />The second main research effort was in the area of computational geometry.<br />In particular, we focused on the problem of efficiently generating finite element meshes, more simply known as mesh generation.&nbsp; <br />As an example, suppose one wants to simulated<br />heat dissipation on a computer chip and determine the temperature at all points on the chip.&nbsp;&nbsp; <br />In the finite element approach one needs to determine a method to represent this function of the approximate temperatures to be returned.&nbsp; <br />A standard approach is to decompose the chip into triangles for 2-dimensional simulation, or into tetrahedra for a full 3-dimensional simulation.<br />After the appropriate system is solved the answer will be a function<br />that is piecewise linear on each element, triangle or tet. <br />In order that the function returned is a good approximation to the real solution<br />one also needs that the triangles and tets are well shaped.<br /...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The proposal was a collaboration beween four institutions: Berkeley, Carnegie Mellon, USC, and Yale. The work and findings described here were preformed at CMU.  The main goal of this research was to find new more efficient computer algorithms for many problems that arrise in Computer Science, Engineering, the Sciences, and Medicine. The research focused on three main algorithmic areas: combinatorial graph theory, linear algebra, and computational geometry. The first two areas combine to form an area called spectral graph theory.  We start by describing our work in this area first.   Spectral graph theory uses both graph algorithms to help solve problems in linear algebra and linear alebra to help solve problems in graph theory. Possibly the most basic question in linear algebra is finding a solution to a system of simultaneous linear equations. Humans have been studying this problem for at least the last two thousand years.  The most famous method is Gaussian elimination.   Unfortunately as the systems have more degrees of freedom this method becomes both very slow and requires a lot of space  because it runs in time cubic in the number of variables being solved and quadratic in the space needed. As an example as to what this means suppose we what to solve an image problem coming from an iphone with about ten million pixels. Thus Gaussian elimination would take about thousand-billion-billion steps, a very large number even for a big machine.  Our approach to this problem was to find methods for special yet useful cases of linear system solving.   The class of systems we focussed on are called Symmetric Diagonally Dominate (SDD) systems. In work partially funded by this grant and more recent NSF grants we have been able to find an algorithm that solves SDD systems to constant precision in approximately  m log m time,  were m is the number of nonzero coefficients is the system.  For our image example and ignoring constants our algorithm wold take about a billion steps.  This improves on the fairly complicated algorithm of Spielman and Teng that ran in m times some-large-number-of-logarithmic-factors time.  This new algorithm  is yet to be implemented. But an earlier algorithm that we developed, partially funded by this gran, has been implemented, made available to researchers, and used by us it to show the importance of solving the special case of SDD systems.  There has been a growing number of applications of fast SDD solvers. The list includes  solving the heat equation,  images denoising, image segmentation, generating a random spanning tree of a graph, and  finding a flow maximum  in a graph.   For each of these applications the best known asymptotic fast algorithm relies on the existence of  fast SDD solvers.  The second main research effort was in the area of computational geometry. In particular, we focused on the problem of efficiently generating finite element meshes, more simply known as mesh generation.   As an example, suppose one wants to simulated heat dissipation on a computer chip and determine the temperature at all points on the chip.    In the finite element approach one needs to determine a method to represent this function of the approximate temperatures to be returned.   A standard approach is to decompose the chip into triangles for 2-dimensional simulation, or into tetrahedra for a full 3-dimensional simulation. After the appropriate system is solved the answer will be a function that is piecewise linear on each element, triangle or tet.  In order that the function returned is a good approximation to the real solution one also needs that the triangles and tets are well shaped. In work funded by this and more recent NSF grants,  we have found an optimal time algorithm for the meshing problem.   That is the algorithm runs in time n log n + m time up to constant factors where n is the description size of the domain and m the size of the mesh generated. The mesh generation problem is a critical step in a l...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
