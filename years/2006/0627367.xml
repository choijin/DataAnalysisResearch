<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CT-T:  The Detection and Prevention of Spyware</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2006</AwardEffectiveDate>
<AwardExpirationDate>08/31/2012</AwardExpirationDate>
<AwardTotalIntnAmount>950000.00</AwardTotalIntnAmount>
<AwardAmount>958000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Samuel M. Weber</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Steve Gribble&lt;br/&gt;University of Washington&lt;br/&gt;0626367&lt;br/&gt;Panel: P060975&lt;br/&gt;The detection and prevention of spyware&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;This project is building a foundation for understanding spyware, and&lt;br/&gt;is advancing the state of the art in detecting and preventing spyware&lt;br/&gt;infections.  Our research consists of four broad activities:&lt;br/&gt;&lt;br/&gt;Measurement:  Using a combination of passive network monitoring&lt;br/&gt;and active Web crawling, we are gathering quantitative evidence&lt;br/&gt;about the nature of spyware and its lifecycle.&lt;br/&gt;&lt;br/&gt;Early detection: We are exploring schemes to detect new spyware&lt;br/&gt;threats before they have had the opportunity to cause widespread&lt;br/&gt;infection.  For example, we are developing techniques for examining&lt;br/&gt;software found while Web crawling to automatically identify&lt;br/&gt;"spyware-like" behavior, or to statically analyze software to look for&lt;br/&gt;code fragments in common with previously detected spyware.&lt;br/&gt;&lt;br/&gt;Prevention: To prevent spyware from reaching a computer, we are&lt;br/&gt;augmenting firewall and proxy systems to detect and block spyware&lt;br/&gt;before it reaches its victims.  As well, to prevent new code from&lt;br/&gt;gaining a foothold on a PC, we are exploring ways of "locking down"&lt;br/&gt;what code is permitted to execute.&lt;br/&gt;&lt;br/&gt;Infrastructure development: To conduct our research, we are developing&lt;br/&gt;new spyware testing infrastructure and workload repositories; our virtual&lt;br/&gt;"spyware laboratory" uses clusters and virtual machine monitors to&lt;br/&gt;enable high-throughput, scalable sandboxing and observation of&lt;br/&gt;malicious code.  As well, we are amassing a large collection of&lt;br/&gt;known spyware programs to enable additional analysis.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/25/2006</MinAmdLetterDate>
<MaxAmdLetterDate>05/21/2010</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0627367</AwardID>
<Investigator>
<FirstName>Henry</FirstName>
<LastName>Levy</LastName>
<PI_MID_INIT>M</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Henry M Levy</PI_FULL_NAME>
<EmailAddress>levy@cs.washington.edu</EmailAddress>
<PI_PHON>2065439204</PI_PHON>
<NSF_ID>000234457</NSF_ID>
<StartDate>08/25/2006</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Steven</FirstName>
<LastName>Gribble</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Steven Gribble</PI_FULL_NAME>
<EmailAddress>gribble@cs.washington.edu</EmailAddress>
<PI_PHON>2066851958</PI_PHON>
<NSF_ID>000491026</NSF_ID>
<StartDate>08/25/2006</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Washington</Name>
<CityName>Seattle</CityName>
<ZipCode>981950001</ZipCode>
<PhoneNumber>2065434043</PhoneNumber>
<StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>605799469</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF WASHINGTON</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042803536</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Washington]]></Name>
<CityName>Seattle</CityName>
<StateCode>WA</StateCode>
<ZipCode>981950001</ZipCode>
<StreetAddress><![CDATA[4333 Brooklyn Ave NE]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7371</Code>
<Text>CYBER TRUST</Text>
</ProgramElement>
<ProgramElement>
<Code>7795</Code>
<Text>TRUSTWORTHY COMPUTING</Text>
</ProgramElement>
<ProgramReference>
<Code>7254</Code>
<Text>CYBER SECURITY ACT PROPOSALS</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0106</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2006~300000</FUND_OBLG>
<FUND_OBLG>2007~200000</FUND_OBLG>
<FUND_OBLG>2008~250000</FUND_OBLG>
<FUND_OBLG>2009~200000</FUND_OBLG>
<FUND_OBLG>2010~8000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In this project, we investigated, designed, and prototyped systems for detecting and preventing spyware, improving the robustness of web browsers, analyzing botnets, and helping clients audit activity on theft-prone devices such as smartphones.&nbsp; Some major highlights from our work include the following:</p> <p>&nbsp;</p> <p><strong>SpyProxy:</strong>&nbsp; In this line of work, we explored the use of execution-based web content analysis to protect users from internet-borne malware. Many anti-malware tools use signatures to identify malware infections on a user's PC. In contrast, our approach was to render and observe active web content in a disposable virtual machine before it reaches the user's browser, identifying and blocking pages whose behavior is suspicious. Our research demonstratedh that execution-based analysis can defend against undiscovered threats and zero-day attacks. However, our results also showed how the approach faces challenges, such as achieving good interactive performance, and limitations, such as defending against malicious web content that contains non-determinism.</p> <p>&nbsp;</p> <p><strong>Browser Processes:</strong>&nbsp; Web content now includes programs that are executed directly within a web browser. Executable content, though, creates new reliability and trust problems for users who rely on the browser to provide program services typical of operating systems. In particular, we found that the runtime environments of current browsers poorly isolate applications from one another. As a result, one web application executing within the browser can interfere with others, whether it be through an explicit failure or the excessive consumption of resources. In this line of work, our goal was to make the browser a safe environment for running programs by introducing an OS-based process isolation mechanism that insulates one application from the behavior of another.&nbsp; Some of the results from this work were integrated into Google's Chrome browser, resulting in significant industrial impact and use.</p> <p>&nbsp;</p> <p><strong>Botlab:</strong> In this line of work we developed Botlab, a platform that continually monitors and analyzes the behavior of spam-oriented botnets, and finds new sources of bot infection by building upon our earlier spyware crawling work. Botlab gathereds multiple real-time streams of information about botnets taken from distinct perspectives. By combining and analyzing these streams, we showed that Botlab can produce accurate, timely, and comprehensive data about spam botnet behavior. Our prototype system integrated information about spam arriving at the University of Washington, outgoing spam generated by captive botnet nodes, and information gleaned from DNS about URLs found within these spam messages.</p> <p>&nbsp;</p> <p><strong>Web Tripwires:</strong> In this line of work, we developed <em>Web Tripwires</em>, published the results of a tripwire measurement study, and released a public toolkit and also a tripwire web service. Our research group was surprised to hear that some ISPs have started 'injecting advertisements into web pages requested by their end users,' according to a recent <em>Slashdot </em>article. As a result, we set out to measure how often web pages are changed after leaving the server and before arriving in the user's browser. With our measurement tool, we found that approximately 1% of 50,000 visitors received pages that had been changed 'in-flight.' Most of these changes were caused by software that users installed on their computer (such as personal firewalls or ad blockers), but many were caused by agents in the network, such as ISPs and enterprise firewalls. Worse, we found that many of the products that users installed introduced bugs or security vulnerabilities into the web pages they requested. We proposed that publishers deploy web tripwires to detect changes to their web pages. A ...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In this project, we investigated, designed, and prototyped systems for detecting and preventing spyware, improving the robustness of web browsers, analyzing botnets, and helping clients audit activity on theft-prone devices such as smartphones.  Some major highlights from our work include the following:     SpyProxy:  In this line of work, we explored the use of execution-based web content analysis to protect users from internet-borne malware. Many anti-malware tools use signatures to identify malware infections on a user's PC. In contrast, our approach was to render and observe active web content in a disposable virtual machine before it reaches the user's browser, identifying and blocking pages whose behavior is suspicious. Our research demonstratedh that execution-based analysis can defend against undiscovered threats and zero-day attacks. However, our results also showed how the approach faces challenges, such as achieving good interactive performance, and limitations, such as defending against malicious web content that contains non-determinism.     Browser Processes:  Web content now includes programs that are executed directly within a web browser. Executable content, though, creates new reliability and trust problems for users who rely on the browser to provide program services typical of operating systems. In particular, we found that the runtime environments of current browsers poorly isolate applications from one another. As a result, one web application executing within the browser can interfere with others, whether it be through an explicit failure or the excessive consumption of resources. In this line of work, our goal was to make the browser a safe environment for running programs by introducing an OS-based process isolation mechanism that insulates one application from the behavior of another.  Some of the results from this work were integrated into Google's Chrome browser, resulting in significant industrial impact and use.     Botlab: In this line of work we developed Botlab, a platform that continually monitors and analyzes the behavior of spam-oriented botnets, and finds new sources of bot infection by building upon our earlier spyware crawling work. Botlab gathereds multiple real-time streams of information about botnets taken from distinct perspectives. By combining and analyzing these streams, we showed that Botlab can produce accurate, timely, and comprehensive data about spam botnet behavior. Our prototype system integrated information about spam arriving at the University of Washington, outgoing spam generated by captive botnet nodes, and information gleaned from DNS about URLs found within these spam messages.     Web Tripwires: In this line of work, we developed Web Tripwires, published the results of a tripwire measurement study, and released a public toolkit and also a tripwire web service. Our research group was surprised to hear that some ISPs have started 'injecting advertisements into web pages requested by their end users,' according to a recent Slashdot article. As a result, we set out to measure how often web pages are changed after leaving the server and before arriving in the user's browser. With our measurement tool, we found that approximately 1% of 50,000 visitors received pages that had been changed 'in-flight.' Most of these changes were caused by software that users installed on their computer (such as personal firewalls or ad blockers), but many were caused by agents in the network, such as ISPs and enterprise firewalls. Worse, we found that many of the products that users installed introduced bugs or security vulnerabilities into the web pages they requested. We proposed that publishers deploy web tripwires to detect changes to their web pages. A web tripwire is JavaScript code that can detect textual changes to an HTTP web page, with the ability to report any changes to the user and to the publisher.     KeyPad:  We designed and evaluated KeyPad, an auditing file system for the...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
