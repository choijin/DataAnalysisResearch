<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: Cascade -- Precision on Demand for Software Verification</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2007</AwardEffectiveDate>
<AwardExpirationDate>08/31/2014</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>485753</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Formal static analysis is an approach which has great potential for improving the reliability of computer systems.  One of the key techniques used in static analysis is abstraction.  There are many different kinds of abstractions, but they all have essentially the same goal: to achieve scalability by sacrificing precision.  Unfortunately, abstraction leads to the possibility of false errors: scenarios in which a bug is reported even though there is no actual bug in the system.&lt;br/&gt;&lt;br/&gt;The main research hypothesis of this proposal is that many false errors can be eliminated by using a two-stage approach in which potential errors are subjected to further analysis by a tool whose focus is precision rather than abstraction.  The second-stage tool provides precision on demand for a small and specific set of potential errors.  The research will focus on novel techniques for precise analysis, performance, and scalability.  These will be implemented and evaluated in the context of the Cascade tool: a fast, robust, and automatic tool providing precision on demand for static analysis of software.&lt;br/&gt;</AbstractNarration>
<MinAmdLetterDate>08/22/2007</MinAmdLetterDate>
<MaxAmdLetterDate>08/26/2013</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0644299</AwardID>
<Investigator>
<FirstName>Clark</FirstName>
<LastName>Barrett</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Clark Barrett</PI_FULL_NAME>
<EmailAddress>barrett@cs.stanford.edu</EmailAddress>
<PI_PHON>6507360822</PI_PHON>
<NSF_ID>000423674</NSF_ID>
<StartDate>08/22/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>New York University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100121019</ZipCode>
<PhoneNumber>2129982121</PhoneNumber>
<StreetAddress>70 WASHINGTON SQUARE S</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041968306</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NEW YORK UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041968306</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Courant Institute of Math Sciences]]></Name>
<CityName>New York</CityName>
<StateCode>NY</StateCode>
<ZipCode>100121092</ZipCode>
<StreetAddress><![CDATA[New York University]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY10</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0108</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0109</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0112</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~67593</FUND_OBLG>
<FUND_OBLG>2008~86306</FUND_OBLG>
<FUND_OBLG>2009~83565</FUND_OBLG>
<FUND_OBLG>2010~86833</FUND_OBLG>
<FUND_OBLG>2011~81704</FUND_OBLG>
<FUND_OBLG>2012~25874</FUND_OBLG>
<FUND_OBLG>2013~53878</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>The purpose of this project was to develop automated techniques for reasoning about programs in order to either find bugs or prove that no bugs exist, thereby providing tools that can improve the robustness and reliability of software systems.</p> <p>The project focused on building two significant systems: Cascade, a verification platform for C programs; and CVC4 an automated reasoning tool. &nbsp;The idea is that Cascade takes as input a C program and a "control file" which specifies specific properties that the C program should exhibit. &nbsp;Cascade produces as output "verification conditions", formulas which, if proved, are sufficient to show that the program is correct. &nbsp;The verification conditions are passed to CVC4 which either proves them or fails to prove them. &nbsp;In the second case, CVC4 provides a specific example of how the program fails that can be used to debug the program.</p> <p>A number of research challenges were involved in this project. &nbsp;On the one hand, it was challenging to develop the theoretical and engineering expertise to implement the CVC4 solver. &nbsp;We made several advances in this area, especially in support for the theory of bitvectors which is used to model and reason about data in software programs. &nbsp;Towards the end of the project, CVC4 won several awards (see attached image) in competitions for automated reasoning tools.</p> <p>Another challenge was to develop the right way of translating a C program into formulas. &nbsp;We developed a novel way of encoding and reasoning about memory operations which we call a "partitioned memory model." &nbsp;Experimental results showed that the partitioned memory model outperformed other memory models. &nbsp;Cascade with the partitioned memory model was entered into the 2015 software verification competition and placed third in the memory safety category. &nbsp;This is especially impressive considering that Cascade is a simpler system than many in the competition. &nbsp;It's strong performance is largely due to the memory model.</p> <p>Both CVC4 and Cascade are open-source systems, available online at http://cvc4.cs.nyu.edu and http://cascade.cims.nyu.edu respectively. &nbsp;</p><br> <p>            Last Modified: 11/16/2016<br>      Modified by: Clark&nbsp;Barrett</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2016/0644299/0644299_10022511_1479350758761_photo-1-300x225--rgov-214x142.jpg" original="/por/images/Reports/POR/2016/0644299/0644299_10022511_1479350758761_photo-1-300x225--rgov-800width.jpg" title="CVC4 awards"><img src="/por/images/Reports/POR/2016/0644299/0644299_10022511_1479350758761_photo-1-300x225--rgov-66x44.jpg" alt="CVC4 awards"></a> <div class="imageCaptionContainer"> <div class="imageCaption">(Left) ?Forall? award for outstanding performance in SMT-COMP. (Middle) First place trophy for TFA division of CASC. (Right) Kurt Goedel medal also for winning the TFA division of CASC.</div> <div class="imageCredit">Clark Barrett</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Clark&nbsp;Barrett</div> <div class="imageTitle">CVC4 awards</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The purpose of this project was to develop automated techniques for reasoning about programs in order to either find bugs or prove that no bugs exist, thereby providing tools that can improve the robustness and reliability of software systems.  The project focused on building two significant systems: Cascade, a verification platform for C programs; and CVC4 an automated reasoning tool.  The idea is that Cascade takes as input a C program and a "control file" which specifies specific properties that the C program should exhibit.  Cascade produces as output "verification conditions", formulas which, if proved, are sufficient to show that the program is correct.  The verification conditions are passed to CVC4 which either proves them or fails to prove them.  In the second case, CVC4 provides a specific example of how the program fails that can be used to debug the program.  A number of research challenges were involved in this project.  On the one hand, it was challenging to develop the theoretical and engineering expertise to implement the CVC4 solver.  We made several advances in this area, especially in support for the theory of bitvectors which is used to model and reason about data in software programs.  Towards the end of the project, CVC4 won several awards (see attached image) in competitions for automated reasoning tools.  Another challenge was to develop the right way of translating a C program into formulas.  We developed a novel way of encoding and reasoning about memory operations which we call a "partitioned memory model."  Experimental results showed that the partitioned memory model outperformed other memory models.  Cascade with the partitioned memory model was entered into the 2015 software verification competition and placed third in the memory safety category.  This is especially impressive considering that Cascade is a simpler system than many in the competition.  It's strong performance is largely due to the memory model.  Both CVC4 and Cascade are open-source systems, available online at http://cvc4.cs.nyu.edu and http://cascade.cims.nyu.edu respectively.         Last Modified: 11/16/2016       Submitted by: Clark Barrett]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
