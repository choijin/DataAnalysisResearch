<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CAREER: A Formal, Integrated Analysis Framework for Contract-based Reasoning of Strong Properties of Open Systems</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/15/2007</AwardEffectiveDate>
<AwardExpirationDate>03/31/2013</AwardExpirationDate>
<AwardTotalIntnAmount>319977.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This research aims to develop a formal, integrated analysis framework based on a synergistic combination of various analysis techniques such as symbolic execution, model checking, static analysis, constraint solving, and theorem proving for reasoning about behaviors of open systems (whose computational structures are incomplete). The framework enables a holistic approach to quality-assurance of modern software systems for strong behavioral properties including contract checking, assisting code inspection and understanding, and automatic test case generation. Key technical challenges in providing such framework are scalability of the analysis and support for modular reasoning about deep semantic properties of software components that heavily use dynamically created heap objects, high-level programming constructs and abstractions (e.g., design patterns), libraries, and software frameworks. This project lays the foundation for a long-term investigation of an automatic formal analysis for open object-oriented systems that draws its strengths from significant advancements of various analysis techniques over the past several years. In addition to reasoning about strong functional properties, the approach can support a spectrum of software quality-assurance techniques for future investigations such as analyzing concurrency aspects, secure information-flow, and system event orderings (e.g., useful for checking protocol conformance of application programming interfaces).</AbstractNarration>
<MinAmdLetterDate>04/12/2007</MinAmdLetterDate>
<MaxAmdLetterDate>03/11/2011</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>0644288</AwardID>
<Investigator>
<FirstName>-</FirstName>
<LastName>Robby</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>- Robby</PI_FULL_NAME>
<EmailAddress>robby@k-state.edu</EmailAddress>
<PI_PHON>7855326350</PI_PHON>
<NSF_ID>000362214</NSF_ID>
<StartDate>04/12/2007</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Kansas State University</Name>
<CityName>Manhattan</CityName>
<ZipCode>665061100</ZipCode>
<PhoneNumber>7855326804</PhoneNumber>
<StreetAddress>2 FAIRCHILD HALL</StreetAddress>
<StreetAddress2><![CDATA[1601 VATTIER STREET]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Kansas</StateName>
<StateCode>KS</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>KS01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>929773554</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>KANSAS STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041146432</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Kansas State University]]></Name>
<CityName>Manhattan</CityName>
<StateCode>KS</StateCode>
<ZipCode>665061100</ZipCode>
<StreetAddress><![CDATA[2 FAIRCHILD HALL]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Kansas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>KS01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<FoaInformation>
<Code>0000912</Code>
<Name>Computer Science</Name>
</FoaInformation>
<ProgramElement>
<Code>7352</Code>
<Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
</ProgramElement>
<ProgramElement>
<Code>9150</Code>
<Text>EPSCoR Co-Funding</Text>
</ProgramElement>
<ProgramReference>
<Code>1045</Code>
<Text>CAREER-Faculty Erly Career Dev</Text>
</ProgramReference>
<ProgramReference>
<Code>1187</Code>
<Text>PECASE- eligible</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9215</Code>
<Text>HIGH PERFORMANCE COMPUTING SYSTEMS</Text>
</ProgramReference>
<ProgramReference>
<Code>9218</Code>
<Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
</ProgramReference>
<ProgramReference>
<Code>HPCC</Code>
<Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
</ProgramReference>
<Appropriation>
<Code>0107</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>490100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0110</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0111</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0407</Code>
<Name>NSF,Education &amp; Human Resource</Name>
<APP_SYMB_ID>490106</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2007~239979</FUND_OBLG>
<FUND_OBLG>2010~79992</FUND_OBLG>
<FUND_OBLG>2011~80029</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Best practices in software development techniques heavily emphasize the development of reusable and modular software, which allow software components to be developed and maintained independently. On the other hand, the most commonly used technique to assure software quality today is testing. Testing fails to adequately address a wide-range of quality-assurance issues when following these best practices such as assuring individual component behaviors and component integration. Testing does not provide high-assurance and it is expensive (i.e., it usually accounts for more than 50% of the total software development cost). &nbsp;</p> <p>Despite significant advances in software analysis techniques to assure software quality (e.g., symbolic execution, model checking, theorem proving, and static analyses), each of these techniques does not address emerging issues in modern open systems. Some key technical challenges are scalability of the analysis and support for modular reasoning about deep semantic properties of software components that heavily use dynamically created heap objects, high-level programming constructs and abstractions (e.g., design patterns), libraries, and software frameworks. For example, reasoning frameworks like ESC/Java offer contract-based reasoning of open systems; while they have been successful to some extent, they do not provide analysis of strong heap properties. In addition, their analysis is not directly leveraged for automating some of the developers' daily tasks such as code understanding and testing. Thus, developers are less likely to adopt the approach because the burden of writing contracts is not perceived to be cost-effective.</p> <p>To provide a research foundation for addressing these challenges, in this NSF CAREER project, we investigated novel software quality assurance techniques that could reason about strong properties of open systems, as well as providing a well-thought out application methodology that developers are likely willing to adopt. We developed a holistic approach to quality-assurance of modern software systems for strong behavioral properties including contract checking, assisting code inspection and understanding, and automatic test case generation.</p> <p>We applied our techniques to two domains: (1) dynamic Java software with contracts specified using the widely used Java Modeling Language (JML) research contract language for Java, and (2) safety/security-critical embedded systems written in Spark Ada -- a subset of Ada; the Spark<strong> </strong>language and toolset developed by Altran Praxis and AdaCore is one of the premier commercial development systems for developing high-assurance software.</p> <p>We developed prototypes for these application domains and demonstrated that our approach gives at least two-order magnitudes of reduction in terms analysis time and space (i.e., computer memory and storage) cost than previously known techniques on various realistic systems including secure embedded systems supplied as challenge problems by our industrial partner -- Rockwell Collins. In addition, we demonstrated that our approach could automatically generate test cases with a very high-degree coverage. We also integrated our research prototypes in a popular Eclipse Integrated Development Environment (IDE) to illustrate how our prototypes could be deployed in a regular software development workflow to aid code inspection, understanding, and debugging. We are currently collaborating with AdaCore and Altran-Praxis to transition our techniques/research prototypes as back-end tools for the next generation of Spark toolset to be released in 2014.</p> <p>Regarding broader impacts of the work, the research investigations and collaborations with industry led to: (a) several academic papers on how to verify contracts efficiently while producing evidences (e.g., test cases) that justify the conclusions reached by the analysis...]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Best practices in software development techniques heavily emphasize the development of reusable and modular software, which allow software components to be developed and maintained independently. On the other hand, the most commonly used technique to assure software quality today is testing. Testing fails to adequately address a wide-range of quality-assurance issues when following these best practices such as assuring individual component behaviors and component integration. Testing does not provide high-assurance and it is expensive (i.e., it usually accounts for more than 50% of the total software development cost).    Despite significant advances in software analysis techniques to assure software quality (e.g., symbolic execution, model checking, theorem proving, and static analyses), each of these techniques does not address emerging issues in modern open systems. Some key technical challenges are scalability of the analysis and support for modular reasoning about deep semantic properties of software components that heavily use dynamically created heap objects, high-level programming constructs and abstractions (e.g., design patterns), libraries, and software frameworks. For example, reasoning frameworks like ESC/Java offer contract-based reasoning of open systems; while they have been successful to some extent, they do not provide analysis of strong heap properties. In addition, their analysis is not directly leveraged for automating some of the developers' daily tasks such as code understanding and testing. Thus, developers are less likely to adopt the approach because the burden of writing contracts is not perceived to be cost-effective.  To provide a research foundation for addressing these challenges, in this NSF CAREER project, we investigated novel software quality assurance techniques that could reason about strong properties of open systems, as well as providing a well-thought out application methodology that developers are likely willing to adopt. We developed a holistic approach to quality-assurance of modern software systems for strong behavioral properties including contract checking, assisting code inspection and understanding, and automatic test case generation.  We applied our techniques to two domains: (1) dynamic Java software with contracts specified using the widely used Java Modeling Language (JML) research contract language for Java, and (2) safety/security-critical embedded systems written in Spark Ada -- a subset of Ada; the Spark language and toolset developed by Altran Praxis and AdaCore is one of the premier commercial development systems for developing high-assurance software.  We developed prototypes for these application domains and demonstrated that our approach gives at least two-order magnitudes of reduction in terms analysis time and space (i.e., computer memory and storage) cost than previously known techniques on various realistic systems including secure embedded systems supplied as challenge problems by our industrial partner -- Rockwell Collins. In addition, we demonstrated that our approach could automatically generate test cases with a very high-degree coverage. We also integrated our research prototypes in a popular Eclipse Integrated Development Environment (IDE) to illustrate how our prototypes could be deployed in a regular software development workflow to aid code inspection, understanding, and debugging. We are currently collaborating with AdaCore and Altran-Praxis to transition our techniques/research prototypes as back-end tools for the next generation of Spark toolset to be released in 2014.  Regarding broader impacts of the work, the research investigations and collaborations with industry led to: (a) several academic papers on how to verify contracts efficiently while producing evidences (e.g., test cases) that justify the conclusions reached by the analysis, and (b) a software infrastructure suitable as research and teaching vehicles for prototyping software analysis t...]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
