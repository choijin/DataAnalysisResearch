<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Dynamic Analysis on Code Fragments</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2018</AwardEffectiveDate>
<AwardExpirationDate>09/30/2022</AwardExpirationDate>
<AwardTotalIntnAmount>485993.00</AwardTotalIntnAmount>
<AwardAmount>485993</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>In many software engineering environments, software developers would like to understand, test, debug and verify a relatively small fragment of code instead of the entire program. However, currently available program analysis and testing tools only work on programs that are whole, in the sense that they can be compiled and executed as a whole program. When the goal is to target only a small code fragment, it is excessively expensive and time-consuming to test and analyze the targeted code in the context of entire programs, which requires configuring a whole system, setting up the execution environment, and finding suites of test inputs that supply all the needed data values to execute the whole program.  Software development processes would be much more efficient and effective if a program property for the code fragment of interest could be checked as a standalone unit of code. This research project addresses the technical challenges in converting code fragments into testable units. If software testing and analysis could be applied successfully to code fragments, rather than whole programs, the overall process of developing correct code would be streamlined. This project focuses on dynamic program analysis, which is the analysis of computer software that is performed by executing programs in a run-time environment (as opposed to static analysis, which is analysis of the source code). The project will generate algorithms, tools, and data that can advance the state of the art of program analysis tools and software engineering practice. The results will be disseminated through conferences, classrooms, open source projects, industrial collaborations and STEM volunteer opportunities.&lt;br/&gt;&lt;br/&gt;For dynamic program analysis to be effective, the target program must be executed with sufficient test inputs to produce interesting (e.g., incorrect or anomalous) behaviors. Dynamic analysis is made difficult by frequently huge numbers of program paths, and the large number of inputs that must be tested. Often, the tests are ineffective because they produce an overwhelming number of false positives and often fail on parts of the program that are not even relevant to the purpose of understanding, debugging or verifying the targeted code.  The project will develop an approach to take code fragments, selected or constructed from the original program, and generate compilable and executable units, using new syntactic patching techniques to enable dynamic analysis on code fragments. It will also develop a techniques to search for and select meaningful code fragments on which to operate.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>08/23/2018</MinAmdLetterDate>
<MaxAmdLetterDate>08/23/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1816352</AwardID>
<Investigator>
<FirstName>Wei</FirstName>
<LastName>Le</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Wei Le</PI_FULL_NAME>
<EmailAddress>weile@iastate.edu</EmailAddress>
<PI_PHON>5152948813</PI_PHON>
<NSF_ID>000599868</NSF_ID>
<StartDate>08/23/2018</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Iowa State University</Name>
<CityName>AMES</CityName>
<ZipCode>500112207</ZipCode>
<PhoneNumber>5152945225</PhoneNumber>
<StreetAddress>1138 Pearson</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>005309844</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>005309844</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Iowa State University]]></Name>
<CityName>Ames</CityName>
<StateCode>IA</StateCode>
<ZipCode>500111079</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9102</Code>
<Text>WOMEN, MINORITY, DISABLED, NEC</Text>
</ProgramReference>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2018~485993</FUND_OBLG>
</Award>
</rootTag>
