<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Empirical Software Engineering for  Computational  Science</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/01/2018</AwardEffectiveDate>
<AwardExpirationDate>07/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>124628.00</AwardTotalIntnAmount>
<AwardAmount>124628</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05090000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>OAC</Abbreviation>
<LongName>Office of Advanced Cyberinfrastructure (OAC)</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Stefan Robila</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>Science has become increasingly reliant on Computational Science methods implemented in software. These methods are complex, and therefore the software that implements them is prone to errors. This projects seeks to transformatively improve the state of the practice in the development of Computational Science software by applying systematic, data-driven methods (known as empirical methods) to evaluate how software is being developed and to suggest improvements. Improving the software engineering methods of Computational Science would result in higher quality software, and consequently increase our confidence in the research in scientific phenomena conducted by Computational Scientists, &lt;br/&gt;&lt;br/&gt;Much of the work in Computational Science is related to the software that implements it. In this project, the researcher will apply state of the art empirical software engineering methods to Computational Science software. Qualitative methods will be applied to conduct large scale surveys of computational science. Quantitative data mining tools (classifiers, intelligent data preprocessor, automatic hyperparameter optimizers) will be used to can learn predictive models of time series of SE data such as "Where in this system should we look for current bugs?" and "How many bugs are left on the system?". These models can be used to guide developer effort in building new code or maintaining old code.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>04/16/2018</MinAmdLetterDate>
<MaxAmdLetterDate>04/16/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1826574</AwardID>
<Investigator>
<FirstName>Timothy</FirstName>
<LastName>Menzies</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Timothy J Menzies</PI_FULL_NAME>
<EmailAddress>timm@ieee.org</EmailAddress>
<PI_PHON>3043762859</PI_PHON>
<NSF_ID>000248284</NSF_ID>
<StartDate>04/16/2018</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2><![CDATA[Admin. III, STE 240]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[North Carolina State University]]></Name>
<CityName/>
<StateCode>NC</StateCode>
<ZipCode>276958206</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>02</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC02</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramElement>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramElement>
<ProgramReference>
<Code>026Z</Code>
<Text>NSCI: National Strategic Computing Initi</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>8004</Code>
<Text>Software Institutes</Text>
</ProgramReference>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2018~124628</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>&nbsp;</p> <div>What   (if   anything)   can computational   science   learn from empirical software engineering  (SE)?  Decades  of  empirical   SE   has   found   useful quality assurance methods for Google,  Facebook,  Microsoft-style  software. But   are   such   methods   useful  for  software  that  explores (e.g.) astronomy, astrophysics, chemistry, weather prediction, economics,  genomics,  molecular   biology,    oceanography, physics,  political  science,  and many engineering fields?</div> <div>This is an important question.  Computational science is becoming more dependent on software.  For example,  in  2013  a  Nobel  Prize  went  to  chemists  using  computer  models  to  explore  chemical  reactions during  photosynthesis. In  the  press  release  of  the  award,  the  Nobel  Prize  committee  wrote  &ldquo;Today  the</div> <div>computer is just as important a tool for chemists as the test tube&rdquo;.</div> <div>But building software is hard and building quality software is even harder.  This is especially true in computational science where many software developers have not formally studied computer science or software engineering.  The proposal claims that empirical SE methods can help bridge the skill gap via</div> <div>automatic agents that can suggest to developers when (e.g.)  they should redo part of their code. &nbsp;&nbsp;</div> <p>&nbsp;</p> <div>In this work, we &nbsp;showed that &nbsp;empirical SE quality assurance operators can be applied, usefully, &nbsp;computational science. To ensure scalability, our operators &nbsp;use automatic instruments based on some kind of data mining algorithm.</div> <div>&nbsp;</div> <div>We found that we had to adjust those instruments to handle the particulars of &nbsp;computational science software. We also found that that tuning was not an arduous or &nbsp; time-consuming process (indeed, it could be done automatically within minimal additional CPU resources). &nbsp;And after&nbsp;tuning,  those quality operators yielded &nbsp;higher performance (e.g. better defect detection) when applied to computational science software.</div> <p>&nbsp;</p> <p>The above results come from a study&nbsp;&nbsp;of a dozen computational science projects. The next steps are to scale the above results to to far more projects.</p><br> <p>            Last Modified: 08/13/2019<br>      Modified by: Timothy&nbsp;J&nbsp;Menzies</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[   What   (if   anything)   can computational   science   learn from empirical software engineering  (SE)?  Decades  of  empirical   SE   has   found   useful quality assurance methods for Google,  Facebook,  Microsoft-style  software. But   are   such   methods   useful  for  software  that  explores (e.g.) astronomy, astrophysics, chemistry, weather prediction, economics,  genomics,  molecular   biology,    oceanography, physics,  political  science,  and many engineering fields? This is an important question.  Computational science is becoming more dependent on software.  For example,  in  2013  a  Nobel  Prize  went  to  chemists  using  computer  models  to  explore  chemical  reactions during  photosynthesis. In  the  press  release  of  the  award,  the  Nobel  Prize  committee  wrote  "Today  the computer is just as important a tool for chemists as the test tube". But building software is hard and building quality software is even harder.  This is especially true in computational science where many software developers have not formally studied computer science or software engineering.  The proposal claims that empirical SE methods can help bridge the skill gap via automatic agents that can suggest to developers when (e.g.)  they should redo part of their code.       In this work, we  showed that  empirical SE quality assurance operators can be applied, usefully,  computational science. To ensure scalability, our operators  use automatic instruments based on some kind of data mining algorithm.   We found that we had to adjust those instruments to handle the particulars of  computational science software. We also found that that tuning was not an arduous or   time-consuming process (indeed, it could be done automatically within minimal additional CPU resources).  And after tuning,  those quality operators yielded  higher performance (e.g. better defect detection) when applied to computational science software.     The above results come from a study  of a dozen computational science projects. The next steps are to scale the above results to to far more projects.       Last Modified: 08/13/2019       Submitted by: Timothy J Menzies]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
