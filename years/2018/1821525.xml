<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Statistical Modeling of Linguistic Change in Open Source Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>05/01/2018</AwardEffectiveDate>
<AwardExpirationDate>04/30/2021</AwardExpirationDate>
<AwardTotalIntnAmount>63067.00</AwardTotalIntnAmount>
<AwardAmount>63067</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The project explores a theory of open source software (OSS) evolution based on statistical natural language processing techniques. Based on the emerging recognition that software code is, in many ways, as "natural" as natural language (e.g., English), there is a trend to apply statistical models for software development tasks such as code analysis, comprehension, and programmer support. This grant extends the "naturalness of code" theory by studying how the code lexicon evolves in open source software as different developers work on a software project and features are added, modified, deleted.  The goal is to learn the extent to which the evolution of a developer's lexicon follows the laws of natural language evolution.&lt;br/&gt;&lt;br/&gt;To create the needed demonstration, large datasets of code lexicons are being collected from a large number of OSS projects and their revisions (on GitHub and SourceForge). The main constructs of the frequency model of natural language evolution will be applied to track and identify the main patterns of language changes (e.g., birth, propagation, death of terms in the lexicon) throughout OSS projects life cycle. Part of the challenge is to better understand how events that instigate code evolution, such as maintenance activities and team formation, are fundamentally different from the events that instigate change in natural language, such as war and migration. The research should lead to new ways to predict software project outcomes and to improve software productivity and quality. The project will make available the data, tools, and algorithms that will be produced by the project, which will support future work to understand the dynamics of code evolution in open source software ecosystems.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>04/25/2018</MinAmdLetterDate>
<MaxAmdLetterDate>04/25/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1821525</AwardID>
<Investigator>
<FirstName>Anas</FirstName>
<LastName>Mahmoud</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Anas Mahmoud</PI_FULL_NAME>
<EmailAddress>mahmoud@csc.lsu.edu</EmailAddress>
<PI_PHON>2255782760</PI_PHON>
<NSF_ID>000677825</NSF_ID>
<StartDate>04/25/2018</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Louisiana State University</Name>
<CityName>Baton Rouge</CityName>
<ZipCode>708032701</ZipCode>
<PhoneNumber>2255782760</PhoneNumber>
<StreetAddress>202 Himes Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Louisiana</StateName>
<StateCode>LA</StateCode>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>LA06</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>075050765</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>LOUISIANA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>940050792</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Louisiana State University and A&M College]]></Name>
<CityName>Baton Rouge</CityName>
<StateCode>LA</StateCode>
<ZipCode>708030100</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Louisiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>06</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>LA06</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2018~63067</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>In this project, we studied linguistic change in Open Source Software (OSS). Our aim was to introduce a new window on software history. In particular, we proposed to analyze software evolution through the lens of developers? language, also known as code lexicon. The main hypothesis was that words in a software system?s vocabulary exhibit evolutionary patterns similar to natural language words, influenced by various human and system factors of OSS development. Observing, understanding, and modeling the dynamics of code lexicon evolution enable developers to diagnose and reverse the symptoms of code aging, make informed design and maintenance decisions, and ensure a sustainable and stable delivery process.</p> <p>To conduct our analysis, we collected, indexed, and analyzed large datasets of OSS projects, their revisions, and metadata. Our objective was to test multiple hypotheses related to linguistic change in OSS projects. These hypotheses were intended to provide an in-depth understating of how OSS developers? language emerges and becomes shaped by maintenance activities. Our analysis was conducted by applying multiple frequency-based models of natural language evolution to the code lexicon of OSS projects in our datasets. Our results showed that:</p> <ul> <li>Different maintenance activities (bug fixes, feature additions, and general improvements) can predict linguistic change at different levels of accuracy (Figure 1). Feature additions are the best predictors of change, often leading to major disturbances in the project?s linguistic identity by adding new words to the project?s vocabulary. However, the magnitude of the effect depends on the programming language used in the project.</li> </ul> <ul> <li>Linguistic change can be significantly predicted by the number of published releases and commits of an OSS project. The longer the project lives, the more likely its linguistic identity will change. The number of contributors tends to show mixed results, in other words, more contributors does not necessarily lead to more linguistic change.</li> </ul> <ul> <li>Different syntactic forms appearing in code lexicon have different survival capacity, or fitness. In particular, natural language words are the fittest (live longer and appear more frequently throughout the project?s lifecycle), followed by short forms (abbreviations), and followed by misspellings. In general, optimal syntactic forms, such as variables composite of natural language words, live longer in the project. In terms of optimal length analysis, tokens between 4 to 7 characters tend to live longer than other tokens. </li> </ul> <p>In terms of applications, our results were used as a basis to improve the accuracy of bug localization engines utilizing Information Retrieval (IR) methods. Our findings emphasized the value of using optimal syntactic forms in code lexicon (e.g., meaningful domain-specific words). Meaningful words give the code its linguistic identity. Semantically-aware IR methods, such as Pointwise Mutual Information, exploit this identity to establish connections between natural language bug reports and fragments of source code. Our results provided further evidence that maintaining the accuracy of IR-based code processing methods requires preserving the linguistic fitness of the system by constantly refactoring linguistic anomalies and suboptimal linguistic forms during code reviews.</p> <p>In our future work, our findings will be used to establish a research infrastructure for code lexicon evolution analysis. This infrastructure will enable further empirical investigations to gain new theoretical insights into the complex interplay between linguistic change and various system and human aspects of OSS development, and in the long run, will serve as a starting point for building a unified theory for describing the evolution of developers? language in OSS projects and its relations to OSS quality attributes, such as reliability, maintainability, and structural stability, as well as developers productivity, creativity, and retention. &nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 06/25/2021<br>      Modified by: Anas&nbsp;Mahmoud</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2021/1821525/1821525_10540734_1624384615980_Figure1--rgov-214x142.jpg" original="/por/images/Reports/POR/2021/1821525/1821525_10540734_1624384615980_Figure1--rgov-800width.jpg" title="Figure 1"><img src="/por/images/Reports/POR/2021/1821525/1821525_10540734_1624384615980_Figure1--rgov-66x44.jpg" alt="Figure 1"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Linguistic Change for Synapse, compared against the number of bug fixes, feature additions, and improvements</div> <div class="imageCredit">Anas Mahmoud</div> <div class="imagePermisssions">Public Domain</div> <div class="imageSubmitted">Anas&nbsp;Mahmoud</div> <div class="imageTitle">Figure 1</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ In this project, we studied linguistic change in Open Source Software (OSS). Our aim was to introduce a new window on software history. In particular, we proposed to analyze software evolution through the lens of developers? language, also known as code lexicon. The main hypothesis was that words in a software system?s vocabulary exhibit evolutionary patterns similar to natural language words, influenced by various human and system factors of OSS development. Observing, understanding, and modeling the dynamics of code lexicon evolution enable developers to diagnose and reverse the symptoms of code aging, make informed design and maintenance decisions, and ensure a sustainable and stable delivery process.  To conduct our analysis, we collected, indexed, and analyzed large datasets of OSS projects, their revisions, and metadata. Our objective was to test multiple hypotheses related to linguistic change in OSS projects. These hypotheses were intended to provide an in-depth understating of how OSS developers? language emerges and becomes shaped by maintenance activities. Our analysis was conducted by applying multiple frequency-based models of natural language evolution to the code lexicon of OSS projects in our datasets. Our results showed that:  Different maintenance activities (bug fixes, feature additions, and general improvements) can predict linguistic change at different levels of accuracy (Figure 1). Feature additions are the best predictors of change, often leading to major disturbances in the project?s linguistic identity by adding new words to the project?s vocabulary. However, the magnitude of the effect depends on the programming language used in the project.   Linguistic change can be significantly predicted by the number of published releases and commits of an OSS project. The longer the project lives, the more likely its linguistic identity will change. The number of contributors tends to show mixed results, in other words, more contributors does not necessarily lead to more linguistic change.   Different syntactic forms appearing in code lexicon have different survival capacity, or fitness. In particular, natural language words are the fittest (live longer and appear more frequently throughout the project?s lifecycle), followed by short forms (abbreviations), and followed by misspellings. In general, optimal syntactic forms, such as variables composite of natural language words, live longer in the project. In terms of optimal length analysis, tokens between 4 to 7 characters tend to live longer than other tokens.    In terms of applications, our results were used as a basis to improve the accuracy of bug localization engines utilizing Information Retrieval (IR) methods. Our findings emphasized the value of using optimal syntactic forms in code lexicon (e.g., meaningful domain-specific words). Meaningful words give the code its linguistic identity. Semantically-aware IR methods, such as Pointwise Mutual Information, exploit this identity to establish connections between natural language bug reports and fragments of source code. Our results provided further evidence that maintaining the accuracy of IR-based code processing methods requires preserving the linguistic fitness of the system by constantly refactoring linguistic anomalies and suboptimal linguistic forms during code reviews.  In our future work, our findings will be used to establish a research infrastructure for code lexicon evolution analysis. This infrastructure will enable further empirical investigations to gain new theoretical insights into the complex interplay between linguistic change and various system and human aspects of OSS development, and in the long run, will serve as a starting point for building a unified theory for describing the evolution of developers? language in OSS projects and its relations to OSS quality attributes, such as reliability, maintainability, and structural stability, as well as developers productivity, creativity, and retention.            Last Modified: 06/25/2021       Submitted by: Anas Mahmoud]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
