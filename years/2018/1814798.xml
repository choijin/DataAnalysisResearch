<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: SMALL: DockerizeME: Automatic Inference and Repair of Computing Environments</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2018</AwardEffectiveDate>
<AwardExpirationDate>09/30/2021</AwardExpirationDate>
<AwardTotalIntnAmount>345875.00</AwardTotalIntnAmount>
<AwardAmount>349675</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>When developing or deploying software, programmers must ensure that any external libraries or services which are necessary to run an application are properly installed and configured. The process of preparing computing infrastructure to properly execute an application is referred to as software configuration. Currently, programmers often manually perform software configuration, which can result in errors and poor maintainability; as a result, improper software configuration can cost billions of dollars of loss for business, lead to unexpected downtime of services, and cause failure of critical infrastructure and loss of data. Unfortunately, the skills required for proper software configuration can be orthogonal to software development, meaning there are limited programmers who are trained in software configuration skills.&lt;br/&gt;&lt;br/&gt;This project will develop techniques to automatically perform the software configuration necessary to run an arbitrary application. Two main research tasks will be investigated for this project. One task will be to develop an approach for automatically inferring a Dockerfile, a configuration script for the Docker container system, capable of executing an application. The approach will use automatic code analysis of existing software libraries to build an offline knowledge base capable of recovering the dependencies between them. The approach will augment the knowledge base with rules learned by mining existing Dockerfiles, configuration scripts, and developer resources like Stack Overflow. Further, the approach will apply minimization techniques on environment specifications extracted from this knowledge base to arrive at a minimal set of application dependencies. The second task will develop a system to detect when configuration scripts are incompatible with code, such as in the event of a dependency upgrade, and use search-based techniques to automatically repair these configuration scripts. In addition, transfer learning will be used to guide successful inferences and repairs. Finally, these approaches are applied in two applications: detecting when code snippets in community resources are incompatible with an API version, and building repair bots that can automatically create a pull request for repairing configuration scripts.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>06/07/2018</MinAmdLetterDate>
<MaxAmdLetterDate>12/11/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1814798</AwardID>
<Investigator>
<FirstName>Christopher</FirstName>
<LastName>Parnin</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Christopher J Parnin</PI_FULL_NAME>
<EmailAddress>cjparnin@ncsu.edu</EmailAddress>
<PI_PHON>9195152444</PI_PHON>
<NSF_ID>000688802</NSF_ID>
<StartDate>06/07/2018</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<CountyName/>
<ZipCode>276957514</ZipCode>
<PhoneNumber>9195152444</PhoneNumber>
<StreetAddress>2601 Wolf Village Way</StreetAddress>
<StreetAddress2>Admin. III, STE 240</StreetAddress2>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<StateCode>NC</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NC04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>042092122</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTH CAROLINA STATE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>142363428</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name>North Carolina State University</Name>
<CityName>Raleigh</CityName>
<CountyName>WAKE</CountyName>
<StateCode>NC</StateCode>
<ZipCode>276958206</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>North Carolina</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NC04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2018~345875</FUND_OBLG>
<FUND_OBLG>2019~3800</FUND_OBLG>
</Award>
</rootTag>
