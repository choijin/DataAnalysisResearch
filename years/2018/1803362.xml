<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Semantics for Learning Functional Programming</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/01/2018</AwardEffectiveDate>
<AwardExpirationDate>06/30/2021</AwardExpirationDate>
<AwardTotalIntnAmount>150000.00</AwardTotalIntnAmount>
<AwardAmount>158000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Programming is a rigorous and intellectually demanding activity. Programmers are expected to provide instructions to a black box device, whose behavior is very different from their own, to accomplish complex tasks. Even seasoned professionals can find this challenging, and beginners often struggle to do it. These problems are greatly amplified when a program has errors or produces incorrect output. A major obstacle is for the programmer to understand how the computer works at a level that is useful for expressing their needs and correcting their programs. The intellectual merits are to evaluate existing models of programming systems, and to define new ones that enable programmers to better understand the computer's execution. The project's broader significance and importance are to make effective programming more accessible to a much broader range of people, including those who intend to apply computing in other data-intensive domains.&lt;br/&gt;&lt;br/&gt;Concretely, the research examines the use of programming language semantics as explanatory tools for non-technical users. Existing semantics provide rich explanations of behavior, but are expressed in highly technical terms that require significant expertise to understand and use. Furthermore, they have not been tested through application to actual debugging tasks. Therefore, this work intends to open up investigation into the human factors aspects of programming language semantics, understanding how well they perform in different settings, and potentially defining new semantics forms that are better suited to a broad range of programmers. The work will specifically focus on functional programming with an eye towards its role in data science curricula, which are of value across a broad spectrum of disciplines.</AbstractNarration>
<MinAmdLetterDate>12/18/2017</MinAmdLetterDate>
<MaxAmdLetterDate>04/23/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1803362</AwardID>
<Investigator>
<FirstName>Kathryn</FirstName>
<LastName>Fisler</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Kathryn Fisler</PI_FULL_NAME>
<EmailAddress>kathryn_fisler@brown.edu</EmailAddress>
<PI_PHON>4018637600</PI_PHON>
<NSF_ID>000131380</NSF_ID>
<StartDate>12/18/2017</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Shriram</FirstName>
<LastName>Krishnamurthi</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Shriram Krishnamurthi</PI_FULL_NAME>
<EmailAddress>sk+17@cs.brown.edu</EmailAddress>
<PI_PHON>4018637722</PI_PHON>
<NSF_ID>000280993</NSF_ID>
<StartDate>12/18/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Brown University</Name>
<CityName>Providence</CityName>
<ZipCode>029129002</ZipCode>
<PhoneNumber>4018632777</PhoneNumber>
<StreetAddress>BOX 1929</StreetAddress>
<StreetAddress2><![CDATA[350 Eddy Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<StateCode>RI</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>RI01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001785542</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>BROWN UNIVERSITY IN PROVIDENCE IN THE STATE OF RHODE ISLAND AND PROVIDENCE PLANTATIONS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001785542</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Brown University]]></Name>
<CityName/>
<StateCode>RI</StateCode>
<ZipCode>029129002</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Rhode Island</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>RI01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2018~158000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Broadly speaking, the project set out to understand the interaction between semantics and humans. These concepts can sometimes seem like opposing poles. We view semantics coldly in terms of mathematics concepts, divorced from human behavior, opinion, and understanding; often, significant (mathematical and other) expertise is needed to make sense of them. This expertise falls outside the ken of most humans, who therefore cannot make sense of a semantics.</p> <p>This clash becomes problematic because we often <em>justify</em>&nbsp;semantics in human terms: that they aid comprehension, help find problems, etc. This calls for the development of potentially new forms of semantics, ones for which these claims have actually been successfully evaluated on humans.</p> <p>This proposal has attempted to study these issues from several perspectives. Some of the effort has gone into the comprehension of semantics of <em>programming languages</em>; other effort has gone into the comprehension of (the behavior of) <em>specific problems</em>.</p> <p>The latter, in particular, addresses a major concern in computing education, where results have shown that students will often start solving a problem without having fully grasped it. Having done so, they create a faulty program structure. Loss-aversion, however, makes them disinclined to change that structure significantly, meaning they will only tinker rather than comprehensively fix any mistakes. This can lead to not only poor outcomes in terms of grades, it has deeper educational consequences: e.g., a lack of grasping the learning outcomes that led to assigning those tasks in the first place.</p> <p>On the first front, the project showed preliminary differences between standard models used in programming language semantics, and how some led to better program understanding than others. On the second, the project built new tools to use example- and test-writing as a way of confirming understanding of problems.</p> <p>A third prong the project studied is related to the second: the types of mistakes made in property-based testing, an advanced form of program testing that serves as a bridge between conventional testing and full-blown mathematical verification. The project proposed a novel way to evaluate student work in this space: by decompsing the property into a set of semantically-meaningful sub-properties whose conjunction yields the original property. It then used these sub-properties to generate targeted tests, whose success and failure point to student misconceptions. Not only did this yield concrete results, the resulting technique appears to have general power and is being ported by the team to other settings.</p> <p>In short, the project has confirmed what the proposal suspected: that the intersection between semantics and humans is rich, multidimensional, interesting, important, and has barely been explored. These results are first steps in a few different directions, with many long paths to be trekked along each of them and many others.</p><br> <p>            Last Modified: 07/12/2021<br>      Modified by: Shriram&nbsp;Krishnamurthi</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Broadly speaking, the project set out to understand the interaction between semantics and humans. These concepts can sometimes seem like opposing poles. We view semantics coldly in terms of mathematics concepts, divorced from human behavior, opinion, and understanding; often, significant (mathematical and other) expertise is needed to make sense of them. This expertise falls outside the ken of most humans, who therefore cannot make sense of a semantics.  This clash becomes problematic because we often justify semantics in human terms: that they aid comprehension, help find problems, etc. This calls for the development of potentially new forms of semantics, ones for which these claims have actually been successfully evaluated on humans.  This proposal has attempted to study these issues from several perspectives. Some of the effort has gone into the comprehension of semantics of programming languages; other effort has gone into the comprehension of (the behavior of) specific problems.  The latter, in particular, addresses a major concern in computing education, where results have shown that students will often start solving a problem without having fully grasped it. Having done so, they create a faulty program structure. Loss-aversion, however, makes them disinclined to change that structure significantly, meaning they will only tinker rather than comprehensively fix any mistakes. This can lead to not only poor outcomes in terms of grades, it has deeper educational consequences: e.g., a lack of grasping the learning outcomes that led to assigning those tasks in the first place.  On the first front, the project showed preliminary differences between standard models used in programming language semantics, and how some led to better program understanding than others. On the second, the project built new tools to use example- and test-writing as a way of confirming understanding of problems.  A third prong the project studied is related to the second: the types of mistakes made in property-based testing, an advanced form of program testing that serves as a bridge between conventional testing and full-blown mathematical verification. The project proposed a novel way to evaluate student work in this space: by decompsing the property into a set of semantically-meaningful sub-properties whose conjunction yields the original property. It then used these sub-properties to generate targeted tests, whose success and failure point to student misconceptions. Not only did this yield concrete results, the resulting technique appears to have general power and is being ported by the team to other settings.  In short, the project has confirmed what the proposal suspected: that the intersection between semantics and humans is rich, multidimensional, interesting, important, and has barely been explored. These results are first steps in a few different directions, with many long paths to be trekked along each of them and many others.       Last Modified: 07/12/2021       Submitted by: Shriram Krishnamurthi]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
