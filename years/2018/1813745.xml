<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Collaborative Research:  Concurrent Software Verification  with Rely/Guarantee Abstraction</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/16/2017</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>65597.00</AwardTotalIntnAmount>
<AwardAmount>65597</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Nina Amla</SignBlockName>
<PO_EMAI>namla@nsf.gov</PO_EMAI>
<PO_PHON>7032927991</PO_PHON>
</ProgramOfficer>
<AbstractNarration>It is now widely recognized that increasing the reliability of&lt;br/&gt;concurrent software is one of the most important scientific and&lt;br/&gt;technological challenges in the emerging era of multi-core and&lt;br/&gt;distributed computing.  The last decade has seen substantial advances&lt;br/&gt;in automatic verification technology to improve the reliability of&lt;br/&gt;sequential programs, and software tools that can be applied to large &lt;br/&gt;industrial code bases. Unfortunately, the underlying technology of &lt;br/&gt;such tools cannot be directly applied to concurrent programs. &lt;br/&gt;&lt;br/&gt;This project investigates scalable techniques for automatic verification of &lt;br/&gt;concurrent software. The approach uses thread-modular decomposition of &lt;br/&gt;the overall problem that does not completely decompose to the granularity &lt;br/&gt;of an individual thread. Since base components may exhibit concurrent &lt;br/&gt;behavior, the investigators develop analysis algorithms for these base components &lt;br/&gt;so that they can be automatically proven correct with respect to their environment&lt;br/&gt;description and vice-versa. This work yields automatic verification tools that &lt;br/&gt;exploit richer notions of modular reasoning about parallelism, thereby offering &lt;br/&gt;improved scalability and robustness over previous approaches. The project team&lt;br/&gt;includes graduate and undergraduate students.</AbstractNarration>
<MinAmdLetterDate>12/01/2017</MinAmdLetterDate>
<MaxAmdLetterDate>12/01/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1813745</AwardID>
<Investigator>
<FirstName>Eric</FirstName>
<LastName>Koskinen</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Eric Koskinen</PI_FULL_NAME>
<EmailAddress>eric.koskinen@stevens.edu</EmailAddress>
<PI_PHON>2016691206</PI_PHON>
<NSF_ID>000608272</NSF_ID>
<StartDate>12/01/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Stevens Institute of Technology</Name>
<CityName>HOBOKEN</CityName>
<ZipCode>070305991</ZipCode>
<PhoneNumber>2012168762</PhoneNumber>
<StreetAddress>CASTLE POINT ON HUDSON</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<StateCode>NJ</StateCode>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NJ08</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>064271570</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>STEVENS INSTITUTE OF TECHNOLOGY (INC)</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>064271570</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Stevens Institute of Technology]]></Name>
<CityName/>
<StateCode>NJ</StateCode>
<ZipCode>070305991</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New Jersey</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>08</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NJ08</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~65597</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-cf510f66-7fff-2c4d-a3d6-1afe6f708670">&nbsp;</span></p> <p><span id="docs-internal-guid-3d2210e9-7fff-e1bb-30cf-230bf6580e51"> <p dir="ltr"><span>Software is pervasive, impacting our lives in countless ways. Meanwhile, in response to modern multicore architectures, software is becoming increasingly concurrent in nature and it is well-known that it is difficult to build correct, concurrent software. This project has yielded advances toward ensuring the robustness of concurrent software. In one portion of this project, novel techniques and implementations were developed to ensure the correct, concurrent execution of blockchain smart contracts. Commutativity is an essential ingredient to correct concurrency in this and many other contexts and, at a more foundational level, the project also led to the first techniques for synthesizing logical commutativity conditions. Finally, this project developed concurrent verification abstractions and type-theoretic methods for correctness of programs with higher-order features.&nbsp;</span></p> <p dir="ltr"><span>The </span><span>intellectual merit</span><span> of this project includes foundational mathematical theories (eg logical commutativity condition synthesis), algorithms (for concurrent smart contract execution by blockchain miners and validators), and software artifacts. Results were peer-reviewed and published in proceedings of conferences including VMCAI 2021, Journal of Automated Reasoning 2020, APLAS 2019, Journal of Distributed Computing 2019, TACAS 2018, LICS 2018 and PODC 2017. New software artifacts include the Servois commutativity synthesizer and the Proust Transactional Object system.</span></p> <span>The </span><span>broader impacts</span><span> of this project extend the foundations for correctness of concurrent software, enabling future generations of software to safely exploit multicore and distributed architectures. From a pedagogy perspective, PI Koskinen incorporated these topics into his lectures that pertain to societal impact and tutorial-style lectures given to undergraduates and masters students. Funding was also used to train two postdoctoral researchers in verification and concurrency. Finally, the software artifacts were released publicly for the benefit of society at large.</span></span></p><br> <p>            Last Modified: 02/08/2021<br>      Modified by: Eric&nbsp;Koskinen</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[     Software is pervasive, impacting our lives in countless ways. Meanwhile, in response to modern multicore architectures, software is becoming increasingly concurrent in nature and it is well-known that it is difficult to build correct, concurrent software. This project has yielded advances toward ensuring the robustness of concurrent software. In one portion of this project, novel techniques and implementations were developed to ensure the correct, concurrent execution of blockchain smart contracts. Commutativity is an essential ingredient to correct concurrency in this and many other contexts and, at a more foundational level, the project also led to the first techniques for synthesizing logical commutativity conditions. Finally, this project developed concurrent verification abstractions and type-theoretic methods for correctness of programs with higher-order features.  The intellectual merit of this project includes foundational mathematical theories (eg logical commutativity condition synthesis), algorithms (for concurrent smart contract execution by blockchain miners and validators), and software artifacts. Results were peer-reviewed and published in proceedings of conferences including VMCAI 2021, Journal of Automated Reasoning 2020, APLAS 2019, Journal of Distributed Computing 2019, TACAS 2018, LICS 2018 and PODC 2017. New software artifacts include the Servois commutativity synthesizer and the Proust Transactional Object system. The broader impacts of this project extend the foundations for correctness of concurrent software, enabling future generations of software to safely exploit multicore and distributed architectures. From a pedagogy perspective, PI Koskinen incorporated these topics into his lectures that pertain to societal impact and tutorial-style lectures given to undergraduates and masters students. Funding was also used to train two postdoctoral researchers in verification and concurrency. Finally, the software artifacts were released publicly for the benefit of society at large.       Last Modified: 02/08/2021       Submitted by: Eric Koskinen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
