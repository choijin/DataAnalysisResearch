<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SaTC:  CORE:  Small:  Collaborative:  Guarding the Integrity of Mobile Graphical User Interfaces</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/01/2017</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>266000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Dan Cosley</SignBlockName>
<PO_EMAI>dcosley@nsf.gov</PO_EMAI>
<PO_PHON>7032928832</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Today?s mobile applications and services display information to the user via a Graphical User Interface (GUI). Unfortunately, an attacker may tamper with that display, maliciously hiding, altering, or entirely fabricating display contents.  User apps or the cloud services providing the information may be entirely unaware of the tampering.  Mobile operating systems, such as Android and iOS, cannot guarantee the integrity and correctness of the app GUI content.  This project is developing techniques to guarantee the integrity and correctness of security-sensitive GUI regions, to ensure that what a user sees in those regions is exactly what the app (or cloud service) intends to display. &lt;br/&gt;&lt;br/&gt;The researchers are developing the concept of a protected GUI region called a "viewport," which a cloud backend may statically associate with an app. The intent is to ensure that only the GUI of the application is able to display into the specified portion of the screen. The researchers are developing a viewport security enforcement monitor, using hardware features of the ARM processor, and developing programming and operating system support for viewports.  The project exploits a synergy of hardware features, including virtualization, ARM TrustZone, and modern display controller with support for overlaid layers. Finally, the research team is evaluating the security assurance provided, performance overhead, and ease of use by application developers.</AbstractNarration>
<MinAmdLetterDate>07/24/2017</MinAmdLetterDate>
<MaxAmdLetterDate>06/05/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1718702</AwardID>
<Investigator>
<FirstName>Felix Xiaozhu</FirstName>
<LastName>Lin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Felix Xiaozhu Lin</PI_FULL_NAME>
<EmailAddress>felixlin@virginia.edu</EmailAddress>
<PI_PHON>4349822200</PI_PHON>
<NSF_ID>000677143</NSF_ID>
<StartDate>07/24/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Purdue University</Name>
<CityName>West Lafayette</CityName>
<ZipCode>479072114</ZipCode>
<PhoneNumber>7654941055</PhoneNumber>
<StreetAddress>Young Hall</StreetAddress>
<StreetAddress2><![CDATA[155 S Grant Street]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<StateCode>IN</StateCode>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IN04</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>072051394</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>PURDUE UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>072051394</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Purdue University]]></Name>
<CityName>West Lafayette</CityName>
<StateCode>IN</StateCode>
<ZipCode>479072114</ZipCode>
<StreetAddress><![CDATA[155 South Grant Street]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Indiana</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>04</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IN04</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>025Z</Code>
<Text>SaTC: Secure and Trustworthy Cyberspace</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2017~250000</FUND_OBLG>
<FUND_OBLG>2018~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project seeks to safeguard privacy-sensitive information on the edge and client computing devices. It addresses three key software components: i) the graphics stack that displays graphical user interfaces; ii) the analytics stack that processes sensor data streams; iii) the storage stack that keeps sensitive data persistent. These software components suffer from vulnerabilities of the same nature -- the inability of modern software stacks in guaranteeing their integrity, allowing for important attacks on applications or their services.</p> <p><strong>Project outcome.</strong> The theme of this project is to exploit a Trusted Execution Environment, a hardware enclave on modern processors, to protect the software components. To this end, this project contributes a series of novel principles and designs. Notable examples include instantiating a trusted cloud monitor to validate the integrity of client graphics stacks; separating an analytics engine's data plane and control plane at the boundary of Trusted Execution Environment; instantiating multiple sybil filesystem images outside of the Environment to confuse attackers. The project results in multiple publications and a large open-source codebase called StreamBox which facilitates future development of trustworthy software.</p> <p><strong>Broader impacts. </strong>The PI has recruited multiple research assistants through this project and thus trained the future workforce with security-oriented programming expertise. The PI has engaged undergrad RAs, multiple of them are underrepresented minorities, through this project. The PI has incorporated the experience and software outcome as part of the graduate-level and undergrad-level OS curricula at the University of Virginia. The technologies developed are likely to impact the way the industry construct and analyze secure software. The security research conducted is likely to further raise the public's awareness of security concerns in client and edge deployment.</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/12/2021<br>      Modified by: Felix Xiaozhu&nbsp;Lin</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project seeks to safeguard privacy-sensitive information on the edge and client computing devices. It addresses three key software components: i) the graphics stack that displays graphical user interfaces; ii) the analytics stack that processes sensor data streams; iii) the storage stack that keeps sensitive data persistent. These software components suffer from vulnerabilities of the same nature -- the inability of modern software stacks in guaranteeing their integrity, allowing for important attacks on applications or their services.  Project outcome. The theme of this project is to exploit a Trusted Execution Environment, a hardware enclave on modern processors, to protect the software components. To this end, this project contributes a series of novel principles and designs. Notable examples include instantiating a trusted cloud monitor to validate the integrity of client graphics stacks; separating an analytics engine's data plane and control plane at the boundary of Trusted Execution Environment; instantiating multiple sybil filesystem images outside of the Environment to confuse attackers. The project results in multiple publications and a large open-source codebase called StreamBox which facilitates future development of trustworthy software.  Broader impacts. The PI has recruited multiple research assistants through this project and thus trained the future workforce with security-oriented programming expertise. The PI has engaged undergrad RAs, multiple of them are underrepresented minorities, through this project. The PI has incorporated the experience and software outcome as part of the graduate-level and undergrad-level OS curricula at the University of Virginia. The technologies developed are likely to impact the way the industry construct and analyze secure software. The security research conducted is likely to further raise the public's awareness of security concerns in client and edge deployment.                Last Modified: 01/12/2021       Submitted by: Felix Xiaozhu Lin]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
