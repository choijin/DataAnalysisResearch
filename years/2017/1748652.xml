<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Software-Hardware Co-Design Approaches for Multi-Level Memories</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2017</AwardEffectiveDate>
<AwardExpirationDate>09/30/2020</AwardExpirationDate>
<AwardTotalIntnAmount>300000.00</AwardTotalIntnAmount>
<AwardAmount>300000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Erik Brunvand</SignBlockName>
<PO_EMAI>ebrunvan@nsf.gov</PO_EMAI>
<PO_PHON>7032922767</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The effective solution of big data problems requires computers that have very large memory capacity and that are able to perform very many operations per second. Since providing the required amount of main memory with sufficient bandwidth to achieve the desired throughput is cost prohibitive, vendors have resorted to multi-level memory (MLM) architectures in which main memory comprises two or more levels, with each level having memory with different bandwidth and cost characteristics. The Intel Knights Landing is an example; it has two levels of main memory - 16Gigabytes of high-cost, high-throughput memory, and up to 384Gigabytes of relatively low-cost, low-throughput memory. The Knights Landing also has 72 compute cores capable of performing up to 6 teraflops of single precision or 3 teraflops of double precision operations. This project seeks to demonstrate the effectiveness of multicore MLM architectures in solving big data problems.&lt;br/&gt;&lt;br/&gt;This project will develop efficient multicore MLM software for representative applications with different workflow characteristics: data parallel, hierarchical, and task parallel. The specific applications being considered are simulation of compressible multiphase turbulence, sparse matrix factorization, and image reconstruction from synthetic aperture radar data. The software will be evaluated on the Knights Landing as well as using MLM simulation software. Techniques for the development of such software and optimal MLM configurations based on workload characterization will be identified.</AbstractNarration>
<MinAmdLetterDate>09/07/2017</MinAmdLetterDate>
<MaxAmdLetterDate>09/07/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1748652</AwardID>
<Investigator>
<FirstName>Sartaj</FirstName>
<LastName>Sahni</LastName>
<PI_MID_INIT>K</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sartaj K Sahni</PI_FULL_NAME>
<EmailAddress>sahni@cise.ufl.edu</EmailAddress>
<PI_PHON>3523921527</PI_PHON>
<NSF_ID>000126089</NSF_ID>
<StartDate>09/07/2017</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Sanjay</FirstName>
<LastName>Ranka</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sanjay Ranka</PI_FULL_NAME>
<EmailAddress>ranka@cise.ufl.edu</EmailAddress>
<PI_PHON>3525144213</PI_PHON>
<NSF_ID>000381796</NSF_ID>
<StartDate>09/07/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Florida</Name>
<CityName>GAINESVILLE</CityName>
<ZipCode>326112002</ZipCode>
<PhoneNumber>3523923516</PhoneNumber>
<StreetAddress>1 UNIVERSITY OF FLORIDA</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL03</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>969663814</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF FLORIDA</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>159621697</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Florida]]></Name>
<CityName>Gainesville</CityName>
<StateCode>FL</StateCode>
<ZipCode>326112002</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>03</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL03</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7354</Code>
<Text>CSR-Computer Systems Research</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2017~300000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Observed computer performance is often limited by memory speed. Since memory cost increases&nbsp;rapidly with memory speed, computers are built with multiple levels of memory that differ in capacity and speed. In a computer, the slowest memory has the largest capacity and the fastest has least capacity. Programs typically begin with all data in the slowest memory and data is moved selectively to faster memories as needed. While automated methods to accomplish this required data movement are quite successful on some applications, they do not result in good performance on many others. </span></p> <p><span>In this project, we researched a variety of applications and developed methods&nbsp;to orchestrate data movement among the available levels of computer memory to attain significant run time performance improvement over automated methods that have been incorporated into hardware and compilers. For example, using our memory orchestration methods, we were able to reduce the run time of a popular community detection algorithm by up to 75+ percent; a speedup of up to&nbsp; eight was obtained for the value iteration method that is used to solve reinforcement learning problems.</span></p> <p>&nbsp;</p> <p><span><span>The project trained two PhD students (one male and one female) in the art of developing efficient algorithms for multilevel memories. It is expected that the developed methods will be incorporated&nbsp;into existing courses and through this a larger number of future software engineers will be trained in the efficient orchestration of algorithms across the memory hierarchy.</span><br /></span></p><br> <p>            Last Modified: 02/23/2021<br>      Modified by: Sanjay&nbsp;Ranka</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Observed computer performance is often limited by memory speed. Since memory cost increases rapidly with memory speed, computers are built with multiple levels of memory that differ in capacity and speed. In a computer, the slowest memory has the largest capacity and the fastest has least capacity. Programs typically begin with all data in the slowest memory and data is moved selectively to faster memories as needed. While automated methods to accomplish this required data movement are quite successful on some applications, they do not result in good performance on many others.   In this project, we researched a variety of applications and developed methods to orchestrate data movement among the available levels of computer memory to attain significant run time performance improvement over automated methods that have been incorporated into hardware and compilers. For example, using our memory orchestration methods, we were able to reduce the run time of a popular community detection algorithm by up to 75+ percent; a speedup of up to  eight was obtained for the value iteration method that is used to solve reinforcement learning problems.     The project trained two PhD students (one male and one female) in the art of developing efficient algorithms for multilevel memories. It is expected that the developed methods will be incorporated into existing courses and through this a larger number of future software engineers will be trained in the efficient orchestration of algorithms across the memory hierarchy.        Last Modified: 02/23/2021       Submitted by: Sanjay Ranka]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
