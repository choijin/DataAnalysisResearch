<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF:Small:Limitations on Algebraic Methods via Boolean Complexity Theory</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/20/2017</AwardEffectiveDate>
<AwardExpirationDate>06/30/2017</AwardExpirationDate>
<AwardTotalIntnAmount>70641.00</AwardTotalIntnAmount>
<AwardAmount>70641</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Computer science has discovered a variety of ways to model real-world computing. Perhaps the most natural language for describing computation is that of bits, and this "Boolean" view predominates the field. However, many fundamental computation problems on objects such as matrices or numbers are naturally expressed in the language of algebra, which speaks of addition and multiplication over different arithmetic systems. In those settings, the number of arithmetic operations (additions, multiplications, and possibly divisions) needed to solve the problem is a good measure for the complexity of the problem. Over the years, the algebraic view of computation has wielded considerable power in the design of algorithms. Many of these algebraic algorithms drive real-world engineering; conversely, ruling out the existence of good algorithms for a problem can drive applications in fields like cryptography, and lead to more productive engineering.&lt;br/&gt;&lt;br/&gt;This project will explore how algebraic methods can be understood by examining the core problems through the "Boolean" lens of bits, studying relationships between Boolean and algebraic complexity theory. There are subtle differences between the two theories; a major goal of this project is to iron-out these subtleties, and explore which techniques from one theory can be extended to the other. The broader impacts of the project include the design of new courses by the PI and postdoc, training graduate students, theory advocacy in the general public, and community-building activities co-organized by the PI and postdoc.&lt;br/&gt;&lt;br/&gt;An important class of algorithmic techniques come from algebra, and these techniques often arise in broad, high-impact settings. However, we do not fully understand the power of the algebraic toolkit, and there are major open problems in this regard which present fundamental challenges in algebraic geometry and complexity theory. Three major research threads of this project are: (1) functional lower bounds on Boolean problems, by viewing them in an arithmetic way, (2) an algebraic analogue of the "Natural Proofs" barrier in Boolean complexity, searching for fundamental limitations in the present technology for reasoning about algebraic computation, and (3) new algebraic approaches for designing algorithms for fundamental problems such as Boolean Satisfiability. The thread of functional lower bounds will apply recent insights of the postdoc, characterizing a class of well-studied and interesting Boolean problems in a surprising algebraic framework. The Natural Proofs analogue will study a new notion of "algebraic pseudorandom functions" proposed by the PI and postdoc, understanding how certain cryptographic primitives can be viewed algebraically. The algebraic algorithm design thread will proceed from recent work of the PI on probabilistic non-interactive proof systems for refuting unsatisfiable Boolean formulas, attempting to either "de-randomize" the proof system or understand the obstacles involved.</AbstractNarration>
<MinAmdLetterDate>04/25/2017</MinAmdLetterDate>
<MaxAmdLetterDate>04/25/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1741638</AwardID>
<Investigator>
<FirstName>Ryan</FirstName>
<LastName>Williams</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ryan Williams</PI_FULL_NAME>
<EmailAddress>rrw@mit.edu</EmailAddress>
<PI_PHON>6177155835</PI_PHON>
<NSF_ID>000606346</NSF_ID>
<StartDate>04/25/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394307</ZipCode>
<StreetAddress><![CDATA[77 Massachusetts Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7927</Code>
<Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~70641</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Computational complexity theory seeks to prove "lower bounds" showing that certain tasks are essentially intractable for all computers to solve, no matter how they are programmed. Despite extensive research, many basic intractability questions about computational complexity remain unanswered. To explain this state of affairs, over the decades researchers have formalized several existing mathematical proof techniques that have been used to prove weak lower bound results so far, and have shown that these techniques are insufficient for stronger proofs of lower bounds. One such formalization is the "natural proofs" framework of Razborov and Rudich from 1994, which applies to many techniques for Boolean logic circuits (which are based on the manipulation of bits). Work supported by this grant (by postdoc Forbes) shows how the Razborov-Rudich natural proof framework can be modified to apply to algebraic circuits which are based on arithmetic operations; this is also an interesting and actively studied model for which less is currently known about the potential of its present tools. The work studies the evidence for whether algebraically natural proofs can unconditionally establish intractability, and give some limited evidence that they cannot.<br /><br />Interactive proofs are a computational model where a computationally bounded verifier interacts with a computationally powerful prover to enhance its computational abilities, while ensuring against possibly malicious provers. One of the foundational protocols in this area is the "sum check" protocol, which allows a verifier to solve any desired (even intractable) counting problem with help from a powerful prover. One important feature of interactive protocols, relevant for cybersecurity, is their ability to become zero-knowledge, which means that the verifier only learns the outcome of the computation, and does not learn (potentially confidential or sensitive) side information, such as how the prover got his/her answer. Many tools exist for endowing protocols with this zero-knowledge property, but many of these tools significantly complicate the protocols. Work supported by this grant (by postdoc Forbes) &nbsp;demonstrates how the sum-check protocol can be made zero-knowledge in a native way, using mathematical techniques from the "de-randomization" of algebraic algorithms. One downside of the aforementioned new sum-check protocol is that it only worked well in a "one-shot" setting with a single interaction between the prover and verifier, whereas many important applications of the sum-check protocol use this protocol recursively. As such, further work (by postdoc Forbes) strengthens the guarantees of the zero-knowledge sum-check, by appealing to lower bounds for algebraic query complexity. These strengthenings led to zero-knowledge protocols for more complex delegation of computation.<br /><br />Another outcome of this project was the discovery of a connection between algorithms for important algebraic tasks and fascinating mathematical objects called Kakeya sets, which (roughly speaking) are "small" sets that contain lines in every direction. Efficient constructions of such sets (generalized from lines to higher-degree polynomials) were used to derive improved algorithms for computing the permanent and fermionant of a matrix, important tasks in simulating certain classical and quantum physical systems (joint work of the PI with Andreas Bjorklund and Petteri Kaski).<br /><br />Being a small project, it partially supported a postdoctoral position for Michael Forbes at Stanford, and partially supported PhD students of PI Williams as they learned about connections between the topics studied in the project. The above work was all widely disseminated at conferences in the field.</p><br> <p>            Last Modified: 10/02/2017<br>      Modified by: Ryan&nbsp;Williams</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Computational complexity theory seeks to prove "lower bounds" showing that certain tasks are essentially intractable for all computers to solve, no matter how they are programmed. Despite extensive research, many basic intractability questions about computational complexity remain unanswered. To explain this state of affairs, over the decades researchers have formalized several existing mathematical proof techniques that have been used to prove weak lower bound results so far, and have shown that these techniques are insufficient for stronger proofs of lower bounds. One such formalization is the "natural proofs" framework of Razborov and Rudich from 1994, which applies to many techniques for Boolean logic circuits (which are based on the manipulation of bits). Work supported by this grant (by postdoc Forbes) shows how the Razborov-Rudich natural proof framework can be modified to apply to algebraic circuits which are based on arithmetic operations; this is also an interesting and actively studied model for which less is currently known about the potential of its present tools. The work studies the evidence for whether algebraically natural proofs can unconditionally establish intractability, and give some limited evidence that they cannot.  Interactive proofs are a computational model where a computationally bounded verifier interacts with a computationally powerful prover to enhance its computational abilities, while ensuring against possibly malicious provers. One of the foundational protocols in this area is the "sum check" protocol, which allows a verifier to solve any desired (even intractable) counting problem with help from a powerful prover. One important feature of interactive protocols, relevant for cybersecurity, is their ability to become zero-knowledge, which means that the verifier only learns the outcome of the computation, and does not learn (potentially confidential or sensitive) side information, such as how the prover got his/her answer. Many tools exist for endowing protocols with this zero-knowledge property, but many of these tools significantly complicate the protocols. Work supported by this grant (by postdoc Forbes)  demonstrates how the sum-check protocol can be made zero-knowledge in a native way, using mathematical techniques from the "de-randomization" of algebraic algorithms. One downside of the aforementioned new sum-check protocol is that it only worked well in a "one-shot" setting with a single interaction between the prover and verifier, whereas many important applications of the sum-check protocol use this protocol recursively. As such, further work (by postdoc Forbes) strengthens the guarantees of the zero-knowledge sum-check, by appealing to lower bounds for algebraic query complexity. These strengthenings led to zero-knowledge protocols for more complex delegation of computation.  Another outcome of this project was the discovery of a connection between algorithms for important algebraic tasks and fascinating mathematical objects called Kakeya sets, which (roughly speaking) are "small" sets that contain lines in every direction. Efficient constructions of such sets (generalized from lines to higher-degree polynomials) were used to derive improved algorithms for computing the permanent and fermionant of a matrix, important tasks in simulating certain classical and quantum physical systems (joint work of the PI with Andreas Bjorklund and Petteri Kaski).  Being a small project, it partially supported a postdoctoral position for Michael Forbes at Stanford, and partially supported PhD students of PI Williams as they learned about connections between the topics studied in the project. The above work was all widely disseminated at conferences in the field.       Last Modified: 10/02/2017       Submitted by: Ryan Williams]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
