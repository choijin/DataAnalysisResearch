<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>WiFiUS: Collaborative Research: SELIOT: Securing Lifecycle of Internet-of-Things</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>04/01/2017</AwardEffectiveDate>
<AwardExpirationDate>03/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>150000.00</AwardTotalIntnAmount>
<AwardAmount>150000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Monisha Ghosh</SignBlockName>
<PO_EMAI/>
<PO_PHON/>
</ProgramOfficer>
<AbstractNarration>This project focuses on developing effective and efficient methods for detection of vulnerable devices in an IoT network, as well as mitigation techniques, as a reaction to identified vulnerabilities. The vision for the scientific impact of this project is a comprehensive set of tools for securing networked IoT devices throughout their lifecycle, coupled with the requirement to co-exist with inherently vulnerable or legacy devices. The project aims to achieve this vision by focusing on three phases of an IoT device's lifecycle:&lt;br/&gt;&lt;br/&gt;1. Birth: identify vulnerable devices when they are first introduced into an IoT network.&lt;br/&gt;2. Life: verify the configuration and operation of devices during their normal operation and updating firmware even in resource-constrained devices. &lt;br/&gt;3. Repurposing: infer changes in device ownership (including disposal) and perform secure deletion of sensitive data whenever ownership change is confirmed.&lt;br/&gt;&lt;br/&gt;All of the above will be achieved with a strong emphasis on assuring that new security techniques are meaningful and usable by a wide range of users.&lt;br/&gt;&lt;br/&gt;Research outcomes of this project are expected to benefit society in addressing important IoT security problems before manufacturers saturate the market with ostensibly useful and innovative gadgets that lack sufficient security features, thus being vulnerable to attacks and malware infestations, which can turn them into rogue agents. PhD students involved in the project will benefit from unique opportunities for developing valuable research skills in the important emerging area of IoT security, as well as collaborating with international partners, thus exposing them to new research perspectives. One aspect of anticipated impact is in training the next generation of information security experts who, beyond understanding and appreciating security and privacy concerns in IoT, are also sufficiently skilled to address them. Another aspect of this project's impact will be achieved by transferring our results into prototypes, which can be turned into products and services.</AbstractNarration>
<MinAmdLetterDate>03/27/2017</MinAmdLetterDate>
<MaxAmdLetterDate>03/27/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1702911</AwardID>
<Investigator>
<FirstName>Gene</FirstName>
<LastName>Tsudik</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Gene Tsudik</PI_FULL_NAME>
<EmailAddress>gts@ics.uci.edu</EmailAddress>
<PI_PHON/>
<NSF_ID>000374443</NSF_ID>
<StartDate>03/27/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of California-Irvine</Name>
<CityName>Irvine</CityName>
<ZipCode>926977600</ZipCode>
<PhoneNumber>9498247295</PhoneNumber>
<StreetAddress>160 Aldrich Hall</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<StateCode>CA</StateCode>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>CA45</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>046705849</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CALIFORNIA, IRVINE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>071549000</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of California-Irvine]]></Name>
<CityName>Irvine</CityName>
<StateCode>CA</StateCode>
<ZipCode>926173067</ZipCode>
<StreetAddress><![CDATA[CS Department]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>California</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>45</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>CA45</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramReference>
<Code>7363</Code>
<Text>RES IN NETWORKING TECH &amp; SYS</Text>
</ProgramReference>
<ProgramReference>
<Code>8229</Code>
<Text>WiFiUS</Text>
</ProgramReference>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2017~150000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span style="font-family: Times New Roman, Times, serif;">The project yielded outcomes in two main areas:<br /> <br /> I. Formal Verification of Security Services for Low-End&nbsp; Devices:<br /> <br /> Despite much prior work, state-of-the-art Remote Attestation (RA)  techniques lack any solid foundation and offer no       ironclad security, safety or robustness guarantees. We argue that       computer-aided formal verification and synthesis of binaries of       RA protocols and hybrid (software-hardware) architectures is       required and currently unaddressed. This is       achievable with current&nbsp; formal methods tools, which can help  advance RA research. We highlight several examples where subtle       issues were missed in design and security analysis of RA       techniques. Despite deceptive simplicity of such protocols, manual       analyses and ad hoc implementations often lead to       over-simplification of&nbsp; important       details in the underlying processor and system architectures.       Computer-aided formal verification forces a more scrupulous and       disciplined consideration of such details. The key objective of  the proposed research       direction is to increase confidence in correctness and   <br /> security guarantees of RA techniques and their       implementations.<br /> <br /> As the first concrete step towards formal verification of Remote       Attestation (RA), we design and verify an architecture called       VRASED: Verifiable Remote Attestation for&nbsp; Simple Embedded       Devices. VRASED instantiates a hybrid (HW/SW) RA co-design aimed       at low-end embedded systems, e.g., simple IoT devices. VRASED       provides a level of security comparable to HW-based approaches,       while relying on SW to minimize additional HW costs. Since       security properties must be jointly guaranteed by HW and SW,       verification is a challenging task, which has never been attempted       before in the context of RA. VRASED is the first formally verified       RA scheme and the first formal verification of a HW/SW       implementation of any security service. To demonstrate&nbsp;       practicality , we instantiate it on a       commodity platform (TI MSP430). <br /> <br /> As the next step, we show how an RA architecture can be       extended to enable important security services. In particular, we extend VRASED to implement provably secure       software update, erasure, and system-wide resets. When (serially)       composed, these features guarantee that a remote device is updated to a functional and malware-free state, and was       properly initialized thereafter. Our       results demonstrate that such services incur minimal additional       overhead (0.4% extra hardware footprint, and 100-s milliseconds to       generate combined proofs of update, erasure and reset), making       them practical even for the lowest-end embedded devices, e.g.,       those based on MSP430 or AVR ATMega micro-controller units (MCUs).       All changes introduced by our new services to VRASED are also       formally verified.<br /> <br /> In an earlier (late 2018) and very related effort, we focused       solelety on the device update phase since secure firmware update       is an important stage in the IoT device life-cycle. Prior       techniques, designed for other computational settings, are not       readily suitable for IoT devices, since they do not consider       idiosyncrasies of a realistic large-scale IoT deployment. This       motivates our design of ASSURED, a secure and scalable update       framework for IoT. ASSURED includes all stakeholders in a typical       IoT update ecosystem, while providing end-to-end security between       manufacturers and devices. To demonstrate its feasibility and       practicality, ASSURED is instantiated and experimentally evaluated       on two commodity hardware platforms. Results show that ASSURED is       considerably faster than current update mechanisms in realistic       settings.</span><br /> <span style="font-family: Times New Roman, Times, serif;"><br /> <br />II. Collective (aka Group or Swarm) RA:<br /> <br /> Networks of and embedded (IoT) devices are becoming increasingly       popular, particularly, in settings such as smart homes, factories       and vehicles. They can include numerous (potentially diverse)       devices that collectively perform certain tasks. In order to       guarantee overall safety and privacy, especially in the face of       remote exploits, software integrity of each device must be       continuously assured, e.g., via Remote Attestation (RA). While RA       of a single device is well understood, collective RA of large       numbers of networked embedded devices poses new research       challenges. In particular, unlike single-device RA, collective RA       has not benefited from any systematic treatment. Thus,       unsurprisingly, prior collective RA schemes are designed in an ad       hoc fashion. We initiate the approach to systematic design of       collective RA, in order to help place collective RA onto a solid       ground and serve as a set of design guidelines for both       researchers and practitioners. We explore the design space for       collective RA and show how the notions of security and       effectiveness can be formally defined according to a given       application domain. We then design and evaluate a concrete       collective RA scheme systematically designed to satisfy these       goals.<br /> <br /> In a related effort, we started by observing that       current collective RA schemes focus on detecting whether devices       are infected by malware, but not on disinfecting&nbsp; and/or restoring       them to a benign state. To this end, we develop HEALED &ndash; the first       collective RA scheme that allows both detection of software       compromise and disinfection of compromised devices. HEALED uses       Merkle Hash Trees (MHTs) for measurement of software state, which       allows restoring a device to a benign state in a secure and       efficient manner.</span><span style="font-family: Times New Roman, Times, serif;"><br /> </span></p><br> <p>            Last Modified: 11/13/2019<br>      Modified by: Gene&nbsp;Tsudik</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ The project yielded outcomes in two main areas:    I. Formal Verification of Security Services for Low-End  Devices:    Despite much prior work, state-of-the-art Remote Attestation (RA)  techniques lack any solid foundation and offer no       ironclad security, safety or robustness guarantees. We argue that       computer-aided formal verification and synthesis of binaries of       RA protocols and hybrid (software-hardware) architectures is       required and currently unaddressed. This is       achievable with current  formal methods tools, which can help  advance RA research. We highlight several examples where subtle       issues were missed in design and security analysis of RA       techniques. Despite deceptive simplicity of such protocols, manual       analyses and ad hoc implementations often lead to       over-simplification of  important       details in the underlying processor and system architectures.       Computer-aided formal verification forces a more scrupulous and       disciplined consideration of such details. The key objective of  the proposed research       direction is to increase confidence in correctness and     security guarantees of RA techniques and their       implementations.    As the first concrete step towards formal verification of Remote       Attestation (RA), we design and verify an architecture called       VRASED: Verifiable Remote Attestation for  Simple Embedded       Devices. VRASED instantiates a hybrid (HW/SW) RA co-design aimed       at low-end embedded systems, e.g., simple IoT devices. VRASED       provides a level of security comparable to HW-based approaches,       while relying on SW to minimize additional HW costs. Since       security properties must be jointly guaranteed by HW and SW,       verification is a challenging task, which has never been attempted       before in the context of RA. VRASED is the first formally verified       RA scheme and the first formal verification of a HW/SW       implementation of any security service. To demonstrate        practicality , we instantiate it on a       commodity platform (TI MSP430).     As the next step, we show how an RA architecture can be       extended to enable important security services. In particular, we extend VRASED to implement provably secure       software update, erasure, and system-wide resets. When (serially)       composed, these features guarantee that a remote device is updated to a functional and malware-free state, and was       properly initialized thereafter. Our       results demonstrate that such services incur minimal additional       overhead (0.4% extra hardware footprint, and 100-s milliseconds to       generate combined proofs of update, erasure and reset), making       them practical even for the lowest-end embedded devices, e.g.,       those based on MSP430 or AVR ATMega micro-controller units (MCUs).       All changes introduced by our new services to VRASED are also       formally verified.    In an earlier (late 2018) and very related effort, we focused       solelety on the device update phase since secure firmware update       is an important stage in the IoT device life-cycle. Prior       techniques, designed for other computational settings, are not       readily suitable for IoT devices, since they do not consider       idiosyncrasies of a realistic large-scale IoT deployment. This       motivates our design of ASSURED, a secure and scalable update       framework for IoT. ASSURED includes all stakeholders in a typical       IoT update ecosystem, while providing end-to-end security between       manufacturers and devices. To demonstrate its feasibility and       practicality, ASSURED is instantiated and experimentally evaluated       on two commodity hardware platforms. Results show that ASSURED is       considerably faster than current update mechanisms in realistic       settings.     II. Collective (aka Group or Swarm) RA:    Networks of and embedded (IoT) devices are becoming increasingly       popular, particularly, in settings such as smart homes, factories       and vehicles. They can include numerous (potentially diverse)       devices that collectively perform certain tasks. In order to       guarantee overall safety and privacy, especially in the face of       remote exploits, software integrity of each device must be       continuously assured, e.g., via Remote Attestation (RA). While RA       of a single device is well understood, collective RA of large       numbers of networked embedded devices poses new research       challenges. In particular, unlike single-device RA, collective RA       has not benefited from any systematic treatment. Thus,       unsurprisingly, prior collective RA schemes are designed in an ad       hoc fashion. We initiate the approach to systematic design of       collective RA, in order to help place collective RA onto a solid       ground and serve as a set of design guidelines for both       researchers and practitioners. We explore the design space for       collective RA and show how the notions of security and       effectiveness can be formally defined according to a given       application domain. We then design and evaluate a concrete       collective RA scheme systematically designed to satisfy these       goals.    In a related effort, we started by observing that       current collective RA schemes focus on detecting whether devices       are infected by malware, but not on disinfecting  and/or restoring       them to a benign state. To this end, we develop HEALED &ndash; the first       collective RA scheme that allows both detection of software       compromise and disinfection of compromised devices. HEALED uses       Merkle Hash Trees (MHTs) for measurement of software state, which       allows restoring a device to a benign state in a secure and       efficient manner.         Last Modified: 11/13/2019       Submitted by: Gene Tsudik]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
