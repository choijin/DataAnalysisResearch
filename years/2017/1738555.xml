<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SBIR Phase II:  Proactive Network Configuration Analysis</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/15/2017</AwardEffectiveDate>
<AwardExpirationDate>01/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>750000.00</AwardTotalIntnAmount>
<AwardAmount>1249999</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>07070000</Code>
<Directorate>
<Abbreviation>ENG</Abbreviation>
<LongName>Directorate For Engineering</LongName>
</Directorate>
<Division>
<Abbreviation>IIP</Abbreviation>
<LongName>Div Of Industrial Innovation &amp; Partnersh</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Peter Atherton</SignBlockName>
<PO_EMAI>patherto@nsf.gov</PO_EMAI>
<PO_PHON>7032928772</PO_PHON>
</ProgramOfficer>
<AbstractNarration>The broader impact/commercial potential of this Small Business Innovation Research (SBIR) Phase II project stems from technology for automatic network configuration analysis.  As ever more devices connect to the Internet and rich services move to the "cloud," both the complexity of computer networks and their reliability requirements are rapidly escalating. It is no wonder that network outages and security breaches are common.  Yet another side effect of this complexity, which does not make the headlines but is equally damaging, is that network engineers are understandably fearful of making configuration changes, so networks are unable to evolve at a speed that keeps up with changing business needs.  The technology developed in this project will enable network engineers to validate correctness, security, and performance properties of their networks proactively, before errors reach the running network.  This technology has the potential to improve the robustness of critical network infrastructure that is widely relied upon, to prevent unauthorized access to resources, and to increase the pace of innovation.  The project will also provide insights into the largest "pain points" in modern networks and develop design and analysis techniques to address them.&lt;br/&gt;&lt;br/&gt;This Small Business Innovation Research (SBIR) Phase II project further develops the Batfish network configuration analysis technology.  Interactions with pilot customers as well as many interviews with potential customers identified the needs of the marketplace and how the Batfish technology can best be adapted to meet those needs. As a result, the specific goal of this project is to seamlessly aid network engineers in validating network behavior during the policy design phase. Drawing inspiration from how software is developed today, the company will extend Batfish to support continuous integration of network configurations and develop a series of analyses that can find errors in network configurations with minimal input from the network engineers. The anticipated outcome of these research thrusts is a technology that allows network engineers to easily understand and gain confidence in their proposed network designs and to iterate these designs more quickly.   The project will be driven by continued interactions with several pilot customers.</AbstractNarration>
<MinAmdLetterDate>09/19/2017</MinAmdLetterDate>
<MaxAmdLetterDate>01/23/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.041</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1738555</AwardID>
<Investigator>
<FirstName>Ari</FirstName>
<LastName>Fogel</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ari Fogel</PI_FULL_NAME>
<EmailAddress>ari@intentionet.com</EmailAddress>
<PI_PHON>6318800531</PI_PHON>
<NSF_ID>000712721</NSF_ID>
<StartDate>09/19/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Intentionet, Inc.</Name>
<CityName>Redmond</CityName>
<ZipCode>980524444</ZipCode>
<PhoneNumber>2065796567</PhoneNumber>
<StreetAddress>16625 Redmond Way Ste M241</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<StateCode>WA</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>WA01</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>080073865</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>INTENTIONET, INC.</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Intentionet, Inc.]]></Name>
<CityName>Redmond</CityName>
<StateCode>WA</StateCode>
<ZipCode>980524444</ZipCode>
<StreetAddress><![CDATA[16625 Redmond Way, Ste M241]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Washington</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>WA01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>5373</Code>
<Text>SBIR Phase II</Text>
</ProgramElement>
<ProgramReference>
<Code>165E</Code>
<Text>SBIR Phase IIB</Text>
</ProgramReference>
<ProgramReference>
<Code>5373</Code>
<Text>SMALL BUSINESS PHASE II</Text>
</ProgramReference>
<ProgramReference>
<Code>8033</Code>
<Text>Hardware Software Integration</Text>
</ProgramReference>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2017~750000</FUND_OBLG>
<FUND_OBLG>2018~499999</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>As ever more devices connect to the Internet and rich services move to the "cloud,'' both the complexity of computer networks and their reliability requirements are rapidly escalating. Yet, by and large, network engineers today still employ the same rudimentary tools for understanding and validating network behavior that have been used for decades.&nbsp; It is no wonder that network outages and security breaches are common. Yet another side effect of this complexity, which does not make the headlines but is equally damaging, is that network engineers are understandably fearful of making changes to the network. As a result even the smallest changes can require weeks of design and testing, so networks are unable to evolve at a pace that keeps up with changing business needs.<br /><br />Studies over the last two decades have consistently shown that the dominant root causes of such issues are errors in <em>network configuration</em>, which is done today through hundreds of low-level directives that determine the behavior of individual network devices. Network engineers' task is to configure each device appropriately to meet global policy requirements. To minimize outages and security breaches and to quickly and confidently make configuration changes, engineers need methods to flag configuration errors and help devise correct configuration.<br /><br />This project continued the development of an approach and associated technology, called Batfish, for automated network configuration validation.&nbsp; Batfish takes as input the unmodified configuration files for each router, which are expressed in various vendor-specific languages (e.g., Cisco's IOS, Juniper's JunOS). Batfish answers queries about network behavior, either guaranteeing that the desired network property holds or providing a concrete example packet and path through the network that illustrates the violation, along with relevant lines of the network configuration.<br /><br />Because Batfish analyzes a network's configuration files offline, without requiring access to the network itself, it enables a <em>proactive</em> approach to network validation. Network engineers can validate proposed configuration changes in advance, removing any identified errors and vulnerabilities before they are installed in the running network. Further, Batfish enables a host of other capabilities that are absent today. For example, network engineers can propose "what if'" questions about network behavior under various failure and other scenarios. As another example, network engineers can go "back in time'' to understand why something worked yesterday but is broken today.<br /><br />In this project we extended Batfish in three main directions, with the overall goal of improving the effectiveness of the technology in practice.&nbsp; First, a limitation of Batfish as originally developed is that it required users to specify the properties that they want to check on their networks, which is tedious and error prone.&nbsp; We developed several techniques to provide actionable information about network errors with zero or minimal information from users other than the network configurations themselves.&nbsp; Second, we developed techniques to seamlessly integrate Batfish into common network engineering workflows.&nbsp; These techniques lower the barriers to entry for new Batfish users and enable network configurations to be automatically re-validated as soon as they are changed.&nbsp; Finally, we developed new approaches to improve the efficiency of Batfish's most complex analyses, so that Batfish can scale to handle larger networks. <br /><br /></p><br> <p>            Last Modified: 02/11/2020<br>      Modified by: Ari&nbsp;Fogel</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ As ever more devices connect to the Internet and rich services move to the "cloud,'' both the complexity of computer networks and their reliability requirements are rapidly escalating. Yet, by and large, network engineers today still employ the same rudimentary tools for understanding and validating network behavior that have been used for decades.  It is no wonder that network outages and security breaches are common. Yet another side effect of this complexity, which does not make the headlines but is equally damaging, is that network engineers are understandably fearful of making changes to the network. As a result even the smallest changes can require weeks of design and testing, so networks are unable to evolve at a pace that keeps up with changing business needs.  Studies over the last two decades have consistently shown that the dominant root causes of such issues are errors in network configuration, which is done today through hundreds of low-level directives that determine the behavior of individual network devices. Network engineers' task is to configure each device appropriately to meet global policy requirements. To minimize outages and security breaches and to quickly and confidently make configuration changes, engineers need methods to flag configuration errors and help devise correct configuration.  This project continued the development of an approach and associated technology, called Batfish, for automated network configuration validation.  Batfish takes as input the unmodified configuration files for each router, which are expressed in various vendor-specific languages (e.g., Cisco's IOS, Juniper's JunOS). Batfish answers queries about network behavior, either guaranteeing that the desired network property holds or providing a concrete example packet and path through the network that illustrates the violation, along with relevant lines of the network configuration.  Because Batfish analyzes a network's configuration files offline, without requiring access to the network itself, it enables a proactive approach to network validation. Network engineers can validate proposed configuration changes in advance, removing any identified errors and vulnerabilities before they are installed in the running network. Further, Batfish enables a host of other capabilities that are absent today. For example, network engineers can propose "what if'" questions about network behavior under various failure and other scenarios. As another example, network engineers can go "back in time'' to understand why something worked yesterday but is broken today.  In this project we extended Batfish in three main directions, with the overall goal of improving the effectiveness of the technology in practice.  First, a limitation of Batfish as originally developed is that it required users to specify the properties that they want to check on their networks, which is tedious and error prone.  We developed several techniques to provide actionable information about network errors with zero or minimal information from users other than the network configurations themselves.  Second, we developed techniques to seamlessly integrate Batfish into common network engineering workflows.  These techniques lower the barriers to entry for new Batfish users and enable network configurations to be automatically re-validated as soon as they are changed.  Finally, we developed new approaches to improve the efficiency of Batfish's most complex analyses, so that Batfish can scale to handle larger networks.          Last Modified: 02/11/2020       Submitted by: Ari Fogel]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
