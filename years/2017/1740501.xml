<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>BSF:2012338:Shortest Paths: Upper and lower bounds</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>01/16/2017</AwardEffectiveDate>
<AwardExpirationDate>08/31/2017</AwardExpirationDate>
<AwardTotalIntnAmount>2414.00</AwardTotalIntnAmount>
<AwardAmount>2414</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Tracy Kimbrel</SignBlockName>
<PO_EMAI>tkimbrel@nsf.gov</PO_EMAI>
<PO_PHON>7032927924</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project is funded as part of the United States-Israel Collaboration in Computer Science (USICCS) program.  Through this program, NSF and the United States - Israel Binational Science Foundation (BSF) jointly support collaborations among US-based researchers and Israel-based researchers.&lt;br/&gt;&lt;br/&gt;Many important problems in the modern world can be solved by finding shortest paths in some network. Some examples include computing driving directions from one city to another in a road network, or routing internet traffic from one computer to another in a communication network such as the internet. The networks in such applications are not only complex, but can also be extremely large.  The development of fast, reliable and scalable algorithms for shortest paths is thus of crucial importance.  The major goal of the proposed research is to provide such algorithms in a variety of settings, providing mathematical guarantees on their performance and scalability.&lt;br/&gt;&lt;br/&gt;The research will focus on two notions of data structures maintaining shortest paths, both focusing on storing distance information using small space. The first are Distance oracles (DOs), data structures that compactly represent the path structure of a network with the ability to quickly retrieve approximate distances and shortest paths between any two given nodes. The research aims at deepening our understanding of DOs in several different ways: by obtaining DOs with improved guarantees in new (e.g. distributed) settings, by developing faster algorithms for constructing DOs, and by proving conditional, or preferably unconditional cell-probe lower bounds showing that the obtained guarantees are essentially optimal.  The second type of shortest paths data structures that will be considered are Distance sensitivity oracles (DSOs). These are data structures that provide a compact representation of the distances in a graph in which edges can become unavailable. A query to a DSO consists of a failed edge and two nodes, a source and a target, and the DSO must return a shortest path from the source to the target that does not use the failed edge. The goal here is to develop faster algorithms for constructing DSOs with fast query times, and to prove relationships between DSOs and other closely related problems such as all-pairs shortest paths. In addition to their intrinsic value, DSOs may also help develop efficient dynamic shortest paths algorithms which is another objective of this project.&lt;br/&gt;&lt;br/&gt;Besides the clear practical motivation behind the project, the problems to be studied have intriguing relations to many concepts in mathematics (metric embeddings, graph and geometric spanners, etc). Thus the impact of this research goes beyond the strict boundaries of computer science.  The PI is whole-heartedly committed to diversity. The PI has experience in recruiting and mentoring minority students, and will continue to take an active role in seeking and recruiting students from diverse cultures and backgrounds.</AbstractNarration>
<MinAmdLetterDate>03/31/2017</MinAmdLetterDate>
<MaxAmdLetterDate>03/31/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1740501</AwardID>
<Investigator>
<FirstName>Virginia</FirstName>
<LastName>Williams</LastName>
<PI_MID_INIT>V</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Virginia V Williams</PI_FULL_NAME>
<EmailAddress>virgi@mit.edu</EmailAddress>
<PI_PHON>6177155833</PI_PHON>
<NSF_ID>000640555</NSF_ID>
<StartDate>03/31/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Massachusetts Institute of Technology</Name>
<CityName>Cambridge</CityName>
<ZipCode>021394301</ZipCode>
<PhoneNumber>6172531000</PhoneNumber>
<StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
<StreetAddress2><![CDATA[NE18-901]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001425594</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>MASSACHUSETTS INSTITUTE OF TECHNOLOGY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001425594</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Massachusetts Institute of Technology]]></Name>
<CityName>Cambridge</CityName>
<StateCode>MA</StateCode>
<ZipCode>021394307</ZipCode>
<StreetAddress><![CDATA[77 Massachusetts Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>2878</Code>
<Text>Special Projects - CCF</Text>
</ProgramElement>
<ProgramReference>
<Code>7796</Code>
<Text>ALGORITHMIC FOUNDATIONS</Text>
</ProgramReference>
<Appropriation>
<Code>0113</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2013~2414</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Many important problems in the modern world can be solved by finding shortest paths in some network. Some examples include computing driving directions from one city to another in a road network, or routing internet traffic from one computer to another in a communication network such as the internet. The networks in such applications are not only complex, but can also be extremely large. The development of fast, reliable and scalable algorithms for shortest paths is thus of crucial importance. The major goal of this project is to provide such algorithms in a variety of settings, providing mathematical guarantees on their performance and scalability. The research focused on developing fast algorithms for detecting patterns in networks, estimating natural parameters such as the network diameter, and developing data structures that store shortest paths in networks using small space.</p> <p>The first outcome is the fastest algorithm to date for enumerating triangle patterns in networks. Triangles are very simple patterns: three nodes, every two connected by an edge. Being able to list all triangles in a network has numerous applications, including detecting web spam, fake users, suspicious accounts, finding communities, and many more. The algorithm developed in this project is not only the most efficient known algorithm that works in arbitrary networks, but its running time is optimal, under a popular hardness conjecture from fine-grained complexity.</p> <p>The second sequence of outcomes is a study of graph distance compression: how much information does one need to store about a given graph so that one can still recover accurate information about the distances between specified (or all) pairs of nodes? To guarantee a finite approximation of the distances, one at least needs linear in N storage space, where N is the number of nodes of the graph, as one at least needs to store information about connectivity. The first result is that if one insists on using linear space (the minimum possible), then all pairwise distances can be maintained with only an additive error of roughly N^{3/7}. Moreover, the compressed information is a subgraph of the original graph, making it possible to use graph algorithms directly on it. This result is still the best known for linear space compression. The second result is that if one insists on having exact distance answers (no error) for a pre-specified set of P pairs of vertices, then regardless of the pairs, one can store their distances using asymptotically only (NP)^{2/3} + NP^{1/3} space; the trivial bound is PN as each shortest path might have a linear in N number of edges. This result is still the best known for preserving distances exactly, and it has various applications in constructing other distance preserving objects such as spanners and emulators. Finally, since real-world networks are prone to failures, it makes sense to study fault-tolerant distance preservers. This turns out to be a surprisingly difficult task. For every small but arbitrary set of edge or node failures, the preservers need to contain shortest replacement paths around the faulted set. In this project we make substantial progress on fault tolerant preservers, providing novel algorithmic constructions and proving limitations.</p> <p>The last outcome concerns fast algorithms that approximate the diameter of any given graph. The diameter measures how far the farthest two nodes in the network are from each other. A natural graph parameter, the diameter problem is well studied. Unfortunately, in general graphs, the only known way to compute the diameter has been to compute all pairwise distances and take the maximum. This is very computationally expensive. In this project we develop faster algorithms which return a good estimate for the diameter. We prove that the estimate is never more than a factor of 1.5 away from the true answer, and that under a popular hardness hypothesis from fine-grained complexity, any better approximation would essentially require the computation of all pairwise distances, at least in sparse graphs.</p><br> <p>            Last Modified: 07/18/2018<br>      Modified by: Virginia&nbsp;V&nbsp;Williams</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Many important problems in the modern world can be solved by finding shortest paths in some network. Some examples include computing driving directions from one city to another in a road network, or routing internet traffic from one computer to another in a communication network such as the internet. The networks in such applications are not only complex, but can also be extremely large. The development of fast, reliable and scalable algorithms for shortest paths is thus of crucial importance. The major goal of this project is to provide such algorithms in a variety of settings, providing mathematical guarantees on their performance and scalability. The research focused on developing fast algorithms for detecting patterns in networks, estimating natural parameters such as the network diameter, and developing data structures that store shortest paths in networks using small space.  The first outcome is the fastest algorithm to date for enumerating triangle patterns in networks. Triangles are very simple patterns: three nodes, every two connected by an edge. Being able to list all triangles in a network has numerous applications, including detecting web spam, fake users, suspicious accounts, finding communities, and many more. The algorithm developed in this project is not only the most efficient known algorithm that works in arbitrary networks, but its running time is optimal, under a popular hardness conjecture from fine-grained complexity.  The second sequence of outcomes is a study of graph distance compression: how much information does one need to store about a given graph so that one can still recover accurate information about the distances between specified (or all) pairs of nodes? To guarantee a finite approximation of the distances, one at least needs linear in N storage space, where N is the number of nodes of the graph, as one at least needs to store information about connectivity. The first result is that if one insists on using linear space (the minimum possible), then all pairwise distances can be maintained with only an additive error of roughly N^{3/7}. Moreover, the compressed information is a subgraph of the original graph, making it possible to use graph algorithms directly on it. This result is still the best known for linear space compression. The second result is that if one insists on having exact distance answers (no error) for a pre-specified set of P pairs of vertices, then regardless of the pairs, one can store their distances using asymptotically only (NP)^{2/3} + NP^{1/3} space; the trivial bound is PN as each shortest path might have a linear in N number of edges. This result is still the best known for preserving distances exactly, and it has various applications in constructing other distance preserving objects such as spanners and emulators. Finally, since real-world networks are prone to failures, it makes sense to study fault-tolerant distance preservers. This turns out to be a surprisingly difficult task. For every small but arbitrary set of edge or node failures, the preservers need to contain shortest replacement paths around the faulted set. In this project we make substantial progress on fault tolerant preservers, providing novel algorithmic constructions and proving limitations.  The last outcome concerns fast algorithms that approximate the diameter of any given graph. The diameter measures how far the farthest two nodes in the network are from each other. A natural graph parameter, the diameter problem is well studied. Unfortunately, in general graphs, the only known way to compute the diameter has been to compute all pairwise distances and take the maximum. This is very computationally expensive. In this project we develop faster algorithms which return a good estimate for the diameter. We prove that the estimate is never more than a factor of 1.5 away from the true answer, and that under a popular hardness hypothesis from fine-grained complexity, any better approximation would essentially require the computation of all pairwise distances, at least in sparse graphs.       Last Modified: 07/18/2018       Submitted by: Virginia V Williams]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
