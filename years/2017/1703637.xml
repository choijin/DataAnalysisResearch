<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Medium: Collaborative Research: Testing in the Era of Approximation</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2017</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>250000.00</AwardTotalIntnAmount>
<AwardAmount>250000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Many computations, such as image processing, machine learning, and engineering simulations are inherently approximate -- they trade off quality of results for better performance. However, approximation also introduces new challenges when reasoning about program behaviors and finding bugs. At present, testing in this area requires more principled and effective approaches. Simultaneously, approximation itself provides an effective new basis for innovations in the well-trodden field of testing, thereby making testing more efficient and valuable. The project will develop a bi-directional integration of testing and automated approximation, new approach for developing and optimizing an increasingly important class of programs. The results will be embodied in open source tool sets and rigorously evaluated using open-source and proprietary applications. New educational and course materials will be developed for courses on compilers, program analysis and software engineering.&lt;br/&gt;&lt;br/&gt;More concretely, the project will develop a set of techniques and tools for testing approximate programs, including a test specification language and techniques for automated migration of existing tests to the new language, techniques for dynamic approximate-program analysis, and techniques for optimal approximation discovery.  Moreover, the project will develop approximate computing techniques to improve the performance of regression testing and mutation testing.</AbstractNarration>
<MinAmdLetterDate>08/31/2017</MinAmdLetterDate>
<MaxAmdLetterDate>08/31/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1703637</AwardID>
<Investigator>
<FirstName>Sasa</FirstName>
<LastName>Misailovic</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Sasa Misailovic</PI_FULL_NAME>
<EmailAddress>misailo@illinois.edu</EmailAddress>
<PI_PHON/>
<NSF_ID>000715355</NSF_ID>
<StartDate>08/31/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Urbana-Champaign</Name>
<CityName>Champaign</CityName>
<ZipCode>618207406</ZipCode>
<PhoneNumber>2173332187</PhoneNumber>
<StreetAddress>1901 South First Street</StreetAddress>
<StreetAddress2><![CDATA[Suite A]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IL13</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>041544081</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF ILLINOIS</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>041544081</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Illinois at Urbana-Champaign]]></Name>
<CityName/>
<StateCode>IL</StateCode>
<ZipCode>618207473</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IL13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7924</Code>
<Text>MEDIUM PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2017~250000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Approximate computing has recently emerged as an area within computer systems that exposes additional sources of approximation at the computer system level, e.g., in programming languages, compilers, runtime and operating systems, and hardware architectures, thereby enabling us to re-define how we think about programs that implement novel solutions to an important class of problems. However, the use of approximation introduces a new dimension of complexity for reasoning about program behaviors and identification of bugs. Testing of approximate software had been traditionally ad-hoc, ill-understood, and ineffective.<br /><br />The main goal of this project was to improve testing techniques for approximate programs as well as develop approximation techniques to make testing more practical. Our research developed new techniques for<br />testing approximate and randomized programs through test specification languages and tools for reasoning about result accuracy, techniques for dynamic and static analysis of approximate programs, and techniques for optimal approximation discovery and auto-tuning. Our research also investigated how approximations (both deterministic and randomized) can improve the execution time of standard testing practices, including regression testing, mutation testing, test generation, and model counting. We have been working on rigorously evaluating our techniques using case-studies on a variety of open-source applications.<br /><br />The grant partially supported 15 conference papers, one tool paper, one new ideas paper, and two workshop papers. We publically released six testing/optimization tools and datasets (available from http://misailo.cs.illinois.edu/software.html page on software and data) and trained at least ten students (including four Ph.D. students and six undergraduate students). The broader impacts also include bug reports and fixed bugs in various open-source projects. This research is a step toward more accurate, robust, and cost-efficient testing tools, which will ultimately help improve the quality and cost of software used in everyday life.</p><br> <p>            Last Modified: 12/20/2020<br>      Modified by: Sasa&nbsp;Misailovic</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Approximate computing has recently emerged as an area within computer systems that exposes additional sources of approximation at the computer system level, e.g., in programming languages, compilers, runtime and operating systems, and hardware architectures, thereby enabling us to re-define how we think about programs that implement novel solutions to an important class of problems. However, the use of approximation introduces a new dimension of complexity for reasoning about program behaviors and identification of bugs. Testing of approximate software had been traditionally ad-hoc, ill-understood, and ineffective.  The main goal of this project was to improve testing techniques for approximate programs as well as develop approximation techniques to make testing more practical. Our research developed new techniques for testing approximate and randomized programs through test specification languages and tools for reasoning about result accuracy, techniques for dynamic and static analysis of approximate programs, and techniques for optimal approximation discovery and auto-tuning. Our research also investigated how approximations (both deterministic and randomized) can improve the execution time of standard testing practices, including regression testing, mutation testing, test generation, and model counting. We have been working on rigorously evaluating our techniques using case-studies on a variety of open-source applications.  The grant partially supported 15 conference papers, one tool paper, one new ideas paper, and two workshop papers. We publically released six testing/optimization tools and datasets (available from http://misailo.cs.illinois.edu/software.html page on software and data) and trained at least ten students (including four Ph.D. students and six undergraduate students). The broader impacts also include bug reports and fixed bugs in various open-source projects. This research is a step toward more accurate, robust, and cost-efficient testing tools, which will ultimately help improve the quality and cost of software used in everyday life.       Last Modified: 12/20/2020       Submitted by: Sasa Misailovic]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
