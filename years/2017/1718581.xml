<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>III: Small: Multi-Version Concurrency Control on Modern Hardware</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2017</AwardEffectiveDate>
<AwardExpirationDate>07/31/2022</AwardExpirationDate>
<AwardTotalIntnAmount>500000.00</AwardTotalIntnAmount>
<AwardAmount>516000</AwardAmount>
<AwardInstrument>
<Value>Continuing Grant</Value>
</AwardInstrument>
<Organization>
<Code>05020000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>IIS</Abbreviation>
<LongName>Div Of Information &amp; Intelligent Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Hector Munoz-Avila</SignBlockName>
<PO_EMAI>hmunoz@nsf.gov</PO_EMAI>
<PO_PHON>7032924481</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Database systems generally fall into two categories with respect to how they update data: either they overwrite the old value with the new value, or they store (and make accessible) both the old version and new version of the data. Most early database systems fall in the first category (overwriting data) because storage was expensive and limited. However, as compliance, auditing, reporting, back-up, and disaster recovery use-cases increasingly rely on reading database snapshots and data that may have been later updated, the ability of a database system to maintain recent versions of record values in near-line access modes has become increasingly important. Furthermore, maintaining multiple versions of record values potentially enables the database to improve its throughput of handling transaction requests - reads and writes of the same record can potentially occur concurrently instead of delaying transactions to avoid inconsistent reads. Therefore, the trend in database system architecture is towards the second category: keeping around multiple versions of data values. Existing multi-versioned database systems have done an adequate job in handling the compliance, auditing, reporting, back-up, and disaster recovery use-cases that exist today. However, in many cases they provide no protection against snapshot isolation anomalies that violates the correctness of the data in the database and can result in bugs in application code written on top of the database system. The few existing systems that avoid these anomalies only do so at significant costs to throughput and database performance. Furthermore, most existing multi-versioned database systems&lt;br/&gt;are designed for disk-storage, and struggle to perform well under main-memory workloads.&lt;br/&gt;&lt;br/&gt;We are building a completely redesigned multi-versioned database system, designed for main-memory deployments. It is architected to achieve extremely high throughput, while avoiding the fundamental write skew anomalies that have existed in previous systems affecting both application developers and database users. We are integrating novel techniques for database recoverability and transaction chopping into the multi-versioned database system architecture in order to improve transaction throughput by at least an order of magnitude. We are also investigating techniques for continuous snapshot replication and serving consistent read queries from geo-distributed replicas with bounded staleness. Furthermore, we are performing extensive experimental studies that both motivate the design of our system, and also motivate the use of multi-versioned database systems in general vs. single-versioned systems.</AbstractNarration>
<MinAmdLetterDate>08/04/2017</MinAmdLetterDate>
<MaxAmdLetterDate>07/28/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1718581</AwardID>
<Investigator>
<FirstName>Daniel</FirstName>
<LastName>Abadi</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Daniel J Abadi</PI_FULL_NAME>
<EmailAddress>abadi@umd.edu</EmailAddress>
<PI_PHON>3014052662</PI_PHON>
<NSF_ID>000508003</NSF_ID>
<StartDate>08/04/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Maryland, College Park</Name>
<CityName>College Park</CityName>
<ZipCode>207425141</ZipCode>
<PhoneNumber>3014056269</PhoneNumber>
<StreetAddress>3112 LEE BLDG 7809 Regents Drive</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<StateCode>MD</StateCode>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MD05</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>790934285</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF MARYLAND, COLLEGE PARK</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>003256088</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Maryland College Park]]></Name>
<CityName/>
<StateCode>MD</StateCode>
<ZipCode>207425103</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Maryland</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MD05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7364</Code>
<Text>Info Integration &amp; Informatics</Text>
</ProgramElement>
<ProgramReference>
<Code>7364</Code>
<Text>INFO INTEGRATION &amp; INFORMATICS</Text>
</ProgramReference>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2017~500000</FUND_OBLG>
<FUND_OBLG>2020~16000</FUND_OBLG>
</Award>
</rootTag>
