<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: Small: The Complexity of Random CSPs</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>09/01/2017</AwardEffectiveDate>
<AwardExpirationDate>08/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>450000.00</AwardTotalIntnAmount>
<AwardAmount>450000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>A. Funda Ergun</SignBlockName>
<PO_EMAI>fergun@nsf.gov</PO_EMAI>
<PO_PHON>7032922216</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This project is concerned with understanding the computational difficulty of solving very large, randomly generated tasks called "constraint satisfaction problems."  One major motivation for this study is cryptography.  Cryptographic protocols used to transmit and compute on securely encrypted data rely on our ability to easily generate random, hard-to-solve computational tasks.  As an example, many cryptographic protocols rely on the assumption that if you multiply together two random prime numbers of many digits, it is computationally difficult to factor the resulting product.  Recent research in cryptography has sought new sources of easy-to-generate hard problems, both for added flexibility and for facilitating different types of cryptographic tasks.  However, although we have a fairly good understanding of what kinds of computational tasks can be hard to solve in the worst case, we do not know nearly as much about what kinds of computational tasks are expected to be hard when they are chosen at random.  The class of "constraint satisfaction problems (CSPs)" seems to be a good and potentially useful candidate for a class of problems that is hard when chosen at random.  This project will involve furthering our understanding of the computational feasibility of random CSPs, studying how the various parameters involved (such as the ratio of constraints to variables, the kinds of constraints, etc.) affects their easiness/difficulty.  An additional aspect of the project will be scientific and educational training for computer science undergraduate and graduate students at Carnegie Mellon University, as well as wide dissemination of the research produced.&lt;br/&gt;&lt;br/&gt;At a more technical level, the project has several lines of inquiry related both to the computational complexity of random CSPs, as well as algorithms for their solution.  The PI will consider the tradeoffs between constraint density, constraint type, quality of approximation/refutation algorithms, and running time.  Particularly, the PI will investigate the power and limitations of the powerful "Sum-of-Squares (SOS) semidefinite programming hierarchy" in the context of random CSPs.  The PI will also investigate potential new hardness results for non-CSPs and learning theory problems, based on the assumed intractability of random CSPs.</AbstractNarration>
<MinAmdLetterDate>08/30/2017</MinAmdLetterDate>
<MaxAmdLetterDate>08/30/2017</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1717606</AwardID>
<Investigator>
<FirstName>Ryan</FirstName>
<LastName>O'Donnell</LastName>
<PI_MID_INIT>W</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Ryan W O'Donnell</PI_FULL_NAME>
<EmailAddress>odonnell@cs.cmu.edu</EmailAddress>
<PI_PHON>4123308512</PI_PHON>
<NSF_ID>000431551</NSF_ID>
<StartDate>08/30/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 Forbes Avenue</StreetAddress>
<StreetAddress2><![CDATA[WQED Building]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>052184116</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>052184116</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie Mellon University]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133890</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Avenue]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7927</Code>
<Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
</ProgramReference>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2017~450000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>A major effort in computer science is developing algorithms to effectively solve <em>optimization problems</em>, especially <em>constraint satisfaction problems</em>.&nbsp; These are tasks (like scheduling and data clustering) where there are many discrete choices to be made, and many <em>constraints</em> on how different choices should interact.&nbsp; To stress-test researchers? algorithms, we need to come up with very <em>challenging </em>instances of these problems, and it seems the best way to do this is to generate large <em>random</em> instances of the problems.&nbsp; The major goal of this NSF project was to understand how efficiently and effectively algorithms can solve random instances of constraint satisfaction problems.</p> <p>&nbsp;</p> <p>The main algorithmic tools used to solve optimizations problems are Linear Programming (LP) and Semidefinite Programming (SDP).&nbsp; The PI and his collaborators discovered several new facts about the ability ? and non-ability ? of LP and SDP to efficiently solve random constraint satisfaction problems.&nbsp; For example, it was previously believed that only SDP, and not LP, was able to effectively solve random instances of the Maximum-Cut problem; the PI?s research overturned this belief.&nbsp; As another example, for wide class of optimization problems, the PI discovered the exact threshold on the number of constraints beyond which SDP algorithms are effective.</p> <p>&nbsp;</p> <p>Crucial to analyzing these SDP algorithms were new mathematical tools introduced by the PI and collaborators.&nbsp; These tools allowed for improved understanding of how long it takes a ?random walker? in a large network to cover/explore all nodes.&nbsp; Using these new tools, the PI and collaborators were able to give new, explicit ways to construct large networks with almost optimal ?explorability? properties.</p> <p>&nbsp;</p> <p>&nbsp;</p><br> <p>            Last Modified: 01/06/2021<br>      Modified by: Ryan&nbsp;W&nbsp;O'donnell</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Image         </div> <div class="galControls onePhoto" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation onePhoto" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2021/1717606/1717606_10519924_1609947156642_hex--rgov-214x142.jpg" original="/por/images/Reports/POR/2021/1717606/1717606_10519924_1609947156642_hex--rgov-800width.jpg" title="An infinite network"><img src="/por/images/Reports/POR/2021/1717606/1717606_10519924_1609947156642_hex--rgov-66x44.jpg" alt="An infinite network"></a> <div class="imageCaptionContainer"> <div class="imageCaption">Illustration of the template for a large random network.  Following the PI's research, we can now explicitly construct large finite networks that resemble this one both "graphically" and "spectrally".</div> <div class="imageCredit">O'Donnell and Wu</div> <div class="imagePermisssions">Creative Commons</div> <div class="imageSubmitted">Ryan&nbsp;W&nbsp;O'donnell</div> <div class="imageTitle">An infinite network</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ A major effort in computer science is developing algorithms to effectively solve optimization problems, especially constraint satisfaction problems.  These are tasks (like scheduling and data clustering) where there are many discrete choices to be made, and many constraints on how different choices should interact.  To stress-test researchers? algorithms, we need to come up with very challenging instances of these problems, and it seems the best way to do this is to generate large random instances of the problems.  The major goal of this NSF project was to understand how efficiently and effectively algorithms can solve random instances of constraint satisfaction problems.     The main algorithmic tools used to solve optimizations problems are Linear Programming (LP) and Semidefinite Programming (SDP).  The PI and his collaborators discovered several new facts about the ability ? and non-ability ? of LP and SDP to efficiently solve random constraint satisfaction problems.  For example, it was previously believed that only SDP, and not LP, was able to effectively solve random instances of the Maximum-Cut problem; the PI?s research overturned this belief.  As another example, for wide class of optimization problems, the PI discovered the exact threshold on the number of constraints beyond which SDP algorithms are effective.     Crucial to analyzing these SDP algorithms were new mathematical tools introduced by the PI and collaborators.  These tools allowed for improved understanding of how long it takes a ?random walker? in a large network to cover/explore all nodes.  Using these new tools, the PI and collaborators were able to give new, explicit ways to construct large networks with almost optimal ?explorability? properties.             Last Modified: 01/06/2021       Submitted by: Ryan W O'donnell]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
