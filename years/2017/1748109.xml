<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER:  Tracing Privacy-Policy Statements into Code for Privacy-Aware Mobile App Development</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>08/15/2017</AwardEffectiveDate>
<AwardExpirationDate>07/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>128288.00</AwardTotalIntnAmount>
<AwardAmount>144288</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05050000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CNS</Abbreviation>
<LongName>Division Of Computer and Network Systems</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Privacy for smartphone and mobile applications users present unprecedented threats. In the United States, privacy policies serve as the primary means to inform users about how mobile apps process privacy data. The application developers are responsible for implementing privacy policies so that the code corresponds to the policies. Currently, there are no techniques for tracing high-level privacy practices into code.  New research is needed to develop automatic privacy-aware development tools, as well as tools to determine if the code implements the policies correctly. &lt;br/&gt;&lt;br/&gt;To automatically trace high-level privacy practices in privacy policies into application code, the project borrows the idea of context-based classification from information extraction in natural language processing (NLP).  In particular, both the natural-language-based policies and the program code are subjected to statistical NLP techniques to determine relationships between the policies and their implementations.  The assumption that NLP techniques can be applied to code is based on recent work that has established the "naturalness" of software, in the sense that statistical NLP techniques appear to work just as well for computer programs as they do for, say, English. The project will mine a large set of privacy policies and corresponding code to find out how, or to what extent, policies manifest themselves in code. To the extent that consistency between privacy policies and code can be determined, new approaches to privacy policy understanding and enforcement might be possible.</AbstractNarration>
<MinAmdLetterDate>08/07/2017</MinAmdLetterDate>
<MaxAmdLetterDate>06/05/2018</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1748109</AwardID>
<Investigator>
<FirstName>Jianwei</FirstName>
<LastName>Niu</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jianwei Niu</PI_FULL_NAME>
<EmailAddress>jianwei.niu@utsa.edu</EmailAddress>
<PI_PHON>2104587360</PI_PHON>
<NSF_ID>000492449</NSF_ID>
<StartDate>08/07/2017</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Xiaoyin</FirstName>
<LastName>Wang</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Xiaoyin Wang</PI_FULL_NAME>
<EmailAddress>Xiaoyin.Wang@UTSA.EDU</EmailAddress>
<PI_PHON>2104584340</PI_PHON>
<NSF_ID>000653136</NSF_ID>
<StartDate>08/07/2017</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Texas at San Antonio</Name>
<CityName>San Antonio</CityName>
<ZipCode>782491644</ZipCode>
<PhoneNumber>2104584340</PhoneNumber>
<StreetAddress>One UTSA Circle</StreetAddress>
<StreetAddress2><![CDATA[Grants, Contracts & Ind. Agr.]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<StateCode>TX</StateCode>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>TX20</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>800189185</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF TEXAS AT SAN ANTONIO, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>042000273</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Texas at San Antonio]]></Name>
<CityName>San Antonio</CityName>
<StateCode>TX</StateCode>
<ZipCode>782491644</ZipCode>
<StreetAddress><![CDATA[One UTSA Circle]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Texas</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>20</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>TX20</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>1714</Code>
<Text>Special Projects - CNS</Text>
</ProgramElement>
<ProgramElement>
<Code>8060</Code>
<Text>Secure &amp;Trustworthy Cyberspace</Text>
</ProgramElement>
<ProgramReference>
<Code>025Z</Code>
<Text>SaTC: Secure and Trustworthy Cyberspace</Text>
</ProgramReference>
<ProgramReference>
<Code>065Z</Code>
<Text>Human factors for security research</Text>
</ProgramReference>
<ProgramReference>
<Code>7434</Code>
<Text>CNCI</Text>
</ProgramReference>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>9178</Code>
<Text>UNDERGRADUATE EDUCATION</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0117</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2017~128288</FUND_OBLG>
<FUND_OBLG>2018~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>As mobile devices and software become indispensable in people's daily life, user privacy faces unprecedented threats from unauthorized collection and share of user data. In the United States, privacy policies serve as the primary means to inform users about how mobile apps process privacy data. The application developers are responsible for implementing privacy policies so that the code corresponds to the policies. However, this implementation process can be error-prone due to the fast evolution of software code base. Therefore, techniques to help developers trace high-level privacy practices into code is highly desirable. In this project, the PIs explores the feasibility of automatic and precisely tracing high-level privacy information types (e.g., user email, age, ID, body metrics, income) to code elements with the consideration of the code context of the code elements. To automatically trace high-level privacy practices in privacy policies into application code, the project borrows the idea of context-based classification from information extraction in natural language processing (NLP). The assumption that NLP techniques can be applied to code is based on recent work that has established the "naturalness" of software.</p> <p>In particular, the PIs considered tracing high-level information types to multiple categories of code elements: the input boxes in the GUI, the data sent to third-party services, and arbitrary application methods. For input boxes, we consider both text labels and icons as their context, and in our experiment we found that tracing of information types can be done with high accuracy and helps to detect privacy violations. In particular, our GUILeak tool detected 39 privacy policy violations in 120 popular apps, and by adding icons as contexts, our IconIntent tool can largely reduce false positives in the violation detection. For data sent to third-party services, we considered the dynamic data flows from user profiles to configuration methods of third-party libraries as their context, and our PAMDroid tool helps to detect 131 misconfigurations which leak personal-identifiable information in 120 popular apps, and in 52 of the 120 apps, the misconfigurations lead to violation of the app's privacy policy or the usage policy of the third-party service. For an arbitrary application method (a small piece of code written by developers to implement some basic computation, serving as an elementary computation unit in software code), we use a machine-learning-based approach to predict how the return type of an application method can map to high-level information types, with the consideration of its dynamic stack trace (the chain of method invocations from the main method of the application to the corresponding method) as its context. Among 100 testing apps, our DynACTA tool identified 542 methods returning data with high-level privacy information types with an average precision of 84% and an average recall of 51%. Among the 542 methods, 78 are not detectable using any existing static or dynamic approaches.</p> <p>Besides the findings from our experiments, our project also led to a number of important tools and artifacts that can be reused for future research. In the GUILeak project, we developed the GUILeak tool and the dataset of 120 apps from three privacy-related domains with their privacy policies. In the IconIntent project, we developed the IconIntent tool and a large icon dataset of more than 5,000 icons with labeled data type. In the PAMDroid project, we developed the PAMDroid tool, and a list of configuration API methods from 18 popular analytics service libraries. In the DynACTA project, we developed a large dataset with more than 30,000 labeled method invocations which can be used in future research on method return type prediction.</p><br> <p>            Last Modified: 09/12/2020<br>      Modified by: Xiaoyin&nbsp;Wang</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ As mobile devices and software become indispensable in people's daily life, user privacy faces unprecedented threats from unauthorized collection and share of user data. In the United States, privacy policies serve as the primary means to inform users about how mobile apps process privacy data. The application developers are responsible for implementing privacy policies so that the code corresponds to the policies. However, this implementation process can be error-prone due to the fast evolution of software code base. Therefore, techniques to help developers trace high-level privacy practices into code is highly desirable. In this project, the PIs explores the feasibility of automatic and precisely tracing high-level privacy information types (e.g., user email, age, ID, body metrics, income) to code elements with the consideration of the code context of the code elements. To automatically trace high-level privacy practices in privacy policies into application code, the project borrows the idea of context-based classification from information extraction in natural language processing (NLP). The assumption that NLP techniques can be applied to code is based on recent work that has established the "naturalness" of software.  In particular, the PIs considered tracing high-level information types to multiple categories of code elements: the input boxes in the GUI, the data sent to third-party services, and arbitrary application methods. For input boxes, we consider both text labels and icons as their context, and in our experiment we found that tracing of information types can be done with high accuracy and helps to detect privacy violations. In particular, our GUILeak tool detected 39 privacy policy violations in 120 popular apps, and by adding icons as contexts, our IconIntent tool can largely reduce false positives in the violation detection. For data sent to third-party services, we considered the dynamic data flows from user profiles to configuration methods of third-party libraries as their context, and our PAMDroid tool helps to detect 131 misconfigurations which leak personal-identifiable information in 120 popular apps, and in 52 of the 120 apps, the misconfigurations lead to violation of the app's privacy policy or the usage policy of the third-party service. For an arbitrary application method (a small piece of code written by developers to implement some basic computation, serving as an elementary computation unit in software code), we use a machine-learning-based approach to predict how the return type of an application method can map to high-level information types, with the consideration of its dynamic stack trace (the chain of method invocations from the main method of the application to the corresponding method) as its context. Among 100 testing apps, our DynACTA tool identified 542 methods returning data with high-level privacy information types with an average precision of 84% and an average recall of 51%. Among the 542 methods, 78 are not detectable using any existing static or dynamic approaches.  Besides the findings from our experiments, our project also led to a number of important tools and artifacts that can be reused for future research. In the GUILeak project, we developed the GUILeak tool and the dataset of 120 apps from three privacy-related domains with their privacy policies. In the IconIntent project, we developed the IconIntent tool and a large icon dataset of more than 5,000 icons with labeled data type. In the PAMDroid project, we developed the PAMDroid tool, and a list of configuration API methods from 18 popular analytics service libraries. In the DynACTA project, we developed a large dataset with more than 30,000 labeled method invocations which can be used in future research on method return type prediction.       Last Modified: 09/12/2020       Submitted by: Xiaoyin Wang]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
