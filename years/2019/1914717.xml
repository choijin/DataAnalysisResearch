<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>EAGER: Recomputation-Based Checkpointing for Sparse Matrices</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2018</AwardEffectiveDate>
<AwardExpirationDate>04/30/2021</AwardExpirationDate>
<AwardTotalIntnAmount>236234.00</AwardTotalIntnAmount>
<AwardAmount>252234</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Almadena Chtchelkanova</SignBlockName>
<PO_EMAI>achtchel@nsf.gov</PO_EMAI>
<PO_PHON>7032927498</PO_PHON>
</ProgramOfficer>
<AbstractNarration>High-performance computing (HPC) is essential for maintaining the US international competitive edge and leadership in science, technology, engineering, and mathematics (STEM). Advances in HPC are vital to national interests by providing infrastructure for scientific discovery that improves the national health, prosperity, welfare, and defense. To solve large-scale scientific problems, HPC relies on an increasing number of nodes and components, which makes it likelier for long-running computation to be interrupted with failures before completing. A critical technique to ensure computation completion is checkpointing. Checkpointing allows snapshots of the computation to be saved so that when a failure occurs, computation state can be restored from the last snapshot and continues execution, rather than restarting from the beginning. The research in this project seeks to advance the state-of-the-art checkpointing technique by making it significantly faster and lowering its cost. This project also plans to contribute to the training of future workforce by providing students with exposure to the mechanisms and inefficiencies of current checkpointing mechanisms on NVMM, and the new in-place checkpointing. The project seeks to increase participation of minority and under-represented groups and involves undergraduates in research.&lt;br/&gt;&lt;br/&gt;Prior approaches to checkpointing rely on taking a snapshot of the system state (system-level checkpointing) or the application state (application-level checkpointing) and saving it to secondary non-volatile storage. With the advent of non-volatile main memory (NVMM), a new approach to checkpointing becomes possible.  In contrast to traditional approaches to checkpointing that rely on storing separate snapshots in a separate secondary storage, the project uses a new approach where checkpoints can be constructed in-place in the NVMM  utilizing the working data structures used by the applications. This allows only very minimal additional state beyond what the program already saves to memory, making checkpointing significantly faster and incurring lower cost, in turn providing further HPC scaling.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>02/01/2019</MinAmdLetterDate>
<MaxAmdLetterDate>05/16/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1914717</AwardID>
<Investigator>
<FirstName>Yan</FirstName>
<LastName>Solihin</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Yan Solihin</PI_FULL_NAME>
<EmailAddress>yan.solihin@ucf.edu</EmailAddress>
<PI_PHON>4078234191</PI_PHON>
<NSF_ID>000299551</NSF_ID>
<StartDate>02/01/2019</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>The University of Central Florida Board of Trustees</Name>
<CityName>Orlando</CityName>
<ZipCode>328168005</ZipCode>
<PhoneNumber>4078230387</PhoneNumber>
<StreetAddress>4000 CNTRL FLORIDA BLVD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<StateCode>FL</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>FL07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>150805653</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF CENTRAL FLORIDA BOARD OF TRUSTEES, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>159621697</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Central Florida]]></Name>
<CityName/>
<StateCode>FL</StateCode>
<ZipCode>328168005</ZipCode>
<StreetAddress/>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Florida</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>FL07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7916</Code>
<Text>EAGER</Text>
</ProgramReference>
<ProgramReference>
<Code>7942</Code>
<Text>HIGH-PERFORMANCE COMPUTING</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0118</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2018~236234</FUND_OBLG>
<FUND_OBLG>2019~16000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>As high-performance computing relies on an increasing number of nodes and components, Mean Time To Failure (MTTF) suffers. Long-running computation is likely interrupted with failures before completing. Checkpointing is a critical technique that allows computation state to be saved so that when a failure occurs, a recent checkpoint can be restored and computation can re-run from the checkpoint rather than restarting from the beginning.&nbsp;&nbsp;<br />Recently, non-volatile memory technologies (e.g. 3D XPoint) have emerged as a strong contender for future main memory, either for augmenting or replacing DRAM. These new non-volatile main memory (NVMM) technologies are byte-addressable and have access latencies that are not much slower than DRAM. While challenges remain (limited write endurance and expensive writes), NVMMs provide compelling density, cost-per-bit, and near-zero idle power advantages over DRAM. NVMM provides a new opportunity to rethink how checkpoint/restart should be supported in HPC because main memory can now hold the persistent state of a program, thereby serving the same role as a checkpoint.&nbsp;</p> <p><br />Intellectual Merit: Prior approaches to checkpointing rely on taking a snapshot of the system state (system-level checkpointing) or the application state (application-level checkpointing) and saving it to secondary non-volatile storage. While NVM can automatically slightly accelerate them if it is used as fabric for faster secondary storage, the high performance overheads of massive amount of snapshot copying and the tremendous costs in write endurance and write energy make these approaches problematic.&nbsp;&nbsp;<br />Instead of following traditional approaches to checkpointing, we considered a new approach. We observed that a system with NVMM already saves computation in a non-volatile fashion, so we do not need to make additional copies to create a checkpoint. Instead, checkpoints can be constructed {\em in-place} in the NVMM&nbsp; utilizing the working data structures used by the applications. Furthermore, we need only persist a small amount of additional state to enable efficient re-execution. Consequently, only very minimal additional state beyond what the program already saves to memory needs to be recorded. Furthermore, our approach is restore-free because no checkpoint needs to be copied back to memory since the required checkpoint is still held in place. Results showed that small performance overheads and small increase in number of writes to NVMM were achieved with the approach.</p> <p>Broader Impact: Checkpointing is necessary technology for achieving and extending exascale HPC architectures. With tens of thousands of processor cores running and solving a single computational problem, failures become quite common and frequent. Checkpointing allows forward execution progress guarantee, but at a steep cost of execution time and storage overheads. The proposed research of using in-place checkpointing provides a promising alternative that can reduce these overheads significantly, providing further HPC scaling.&nbsp;</p> <p>This project contributed in the training of future workforce by providing students with exposure to the mechanisms and inefficiencies of current checkpointing mechanisms on NVMM, and the new in-place checkpointing. Through this project, we increased participation of minority and under-represented groups, such as females, African Americans, Hispanics, and those from low socio-economic status (SES). Research Experience for Undergraduate (REU) supplement for this project was obtained and students from under-represented groups were recruited.&nbsp;</p><br> <p>            Last Modified: 06/22/2021<br>      Modified by: Yan&nbsp;Solihin</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ As high-performance computing relies on an increasing number of nodes and components, Mean Time To Failure (MTTF) suffers. Long-running computation is likely interrupted with failures before completing. Checkpointing is a critical technique that allows computation state to be saved so that when a failure occurs, a recent checkpoint can be restored and computation can re-run from the checkpoint rather than restarting from the beginning.   Recently, non-volatile memory technologies (e.g. 3D XPoint) have emerged as a strong contender for future main memory, either for augmenting or replacing DRAM. These new non-volatile main memory (NVMM) technologies are byte-addressable and have access latencies that are not much slower than DRAM. While challenges remain (limited write endurance and expensive writes), NVMMs provide compelling density, cost-per-bit, and near-zero idle power advantages over DRAM. NVMM provides a new opportunity to rethink how checkpoint/restart should be supported in HPC because main memory can now hold the persistent state of a program, thereby serving the same role as a checkpoint.    Intellectual Merit: Prior approaches to checkpointing rely on taking a snapshot of the system state (system-level checkpointing) or the application state (application-level checkpointing) and saving it to secondary non-volatile storage. While NVM can automatically slightly accelerate them if it is used as fabric for faster secondary storage, the high performance overheads of massive amount of snapshot copying and the tremendous costs in write endurance and write energy make these approaches problematic.   Instead of following traditional approaches to checkpointing, we considered a new approach. We observed that a system with NVMM already saves computation in a non-volatile fashion, so we do not need to make additional copies to create a checkpoint. Instead, checkpoints can be constructed {\em in-place} in the NVMM  utilizing the working data structures used by the applications. Furthermore, we need only persist a small amount of additional state to enable efficient re-execution. Consequently, only very minimal additional state beyond what the program already saves to memory needs to be recorded. Furthermore, our approach is restore-free because no checkpoint needs to be copied back to memory since the required checkpoint is still held in place. Results showed that small performance overheads and small increase in number of writes to NVMM were achieved with the approach.  Broader Impact: Checkpointing is necessary technology for achieving and extending exascale HPC architectures. With tens of thousands of processor cores running and solving a single computational problem, failures become quite common and frequent. Checkpointing allows forward execution progress guarantee, but at a steep cost of execution time and storage overheads. The proposed research of using in-place checkpointing provides a promising alternative that can reduce these overheads significantly, providing further HPC scaling.   This project contributed in the training of future workforce by providing students with exposure to the mechanisms and inefficiencies of current checkpointing mechanisms on NVMM, and the new in-place checkpointing. Through this project, we increased participation of minority and under-represented groups, such as females, African Americans, Hispanics, and those from low socio-economic status (SES). Research Experience for Undergraduate (REU) supplement for this project was obtained and students from under-represented groups were recruited.        Last Modified: 06/22/2021       Submitted by: Yan Solihin]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
