<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>FMitF: Track II: Transitioning Ruby Types to Practice</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2019</AwardEffectiveDate>
<AwardExpirationDate>12/31/2020</AwardExpirationDate>
<AwardTotalIntnAmount>99998.00</AwardTotalIntnAmount>
<AwardAmount>99998</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Ruby is a popular programming language that is perhaps best known for Ruby on Rails, a framework for developing web sites. However, unlike some other programming languages, Ruby does not have a static type system, which helps detect bugs in programs as they are written. This lack of a static type system can make developing Ruby programs harder, and it also means certain kinds of bugs might remain latent until programs are actually run by users. Over the last ten years, the investigator has been carrying  out research on adding static types to Ruby and similar languages. As a result of this work, very recently two key things happened: (1) Stripe, a major payment processing company, decided to develop their own static Ruby type system, and (2) the core Ruby development team decided to add static types to Ruby 3, the next version of the Ruby programming language. The goal of this project is to help bring type checking successfully to Ruby 3 and into practice by transitioning the investigator's research results, knowledge, and experience with Ruby type systems, in collaboration with Stripe and the core Ruby development team. The project's novelties are helping develop a common type annotation language for Ruby, including source-level annotations; integrating those annotations with Ruby document-generation tools; and developing extensive support for type checking Ruby on Rails applications. The project's impacts are that the technology will make it easier and faster to eliminate bugs in Ruby programs earlier in the software development cycle. Since Ruby is widely used, these improvements have the potential to improve the software of many of the websites that millions of people rely on every day.&lt;br/&gt;&lt;br/&gt;The project builds on RDL, a static type system for Ruby previously developed by the investigator. RDL supports a wide range of type features: nominal types, structural types, high-order method types, intersection and union types, tuple and finite hash types, generics, and a self type, among others. RDL's type language, as well as Stripe's type language, will form the basis of Ruby 3's type language. RDL also has special support for metaprogramming, in which code generates classes and methods as it runs, for use later  during execution. Metaprogramming is used extensively in Ruby on Rails. RDL supports meetaprogramming by storing type information at run-time, thereby allowing  metaprogramming code to also generate type information for any classes and methods it creates. As part of the project, the PI and his collaborators will use this metaprogramming support to generate type information for Ruby 3's and Stripe's type systems. They will also develop a range of type annotations for popular Ruby libraries and other frameworks.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>07/02/2019</MinAmdLetterDate>
<MaxAmdLetterDate>07/02/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1918233</AwardID>
<Investigator>
<FirstName>Jeffrey</FirstName>
<LastName>Foster</LastName>
<PI_MID_INIT>S</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Jeffrey S Foster</PI_FULL_NAME>
<EmailAddress>jfoster@cs.tufts.edu</EmailAddress>
<PI_PHON>6176272225</PI_PHON>
<NSF_ID>000095036</NSF_ID>
<StartDate>07/02/2019</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Tufts University</Name>
<CityName>Boston</CityName>
<ZipCode>021111817</ZipCode>
<PhoneNumber>6176273696</PhoneNumber>
<StreetAddress>136 Harrison Ave</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>073134835</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF TUFTS COLLEGE INC</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>073134835</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Tufts University School of Engineering]]></Name>
<CityName>Medford</CityName>
<StateCode>MA</StateCode>
<ZipCode>021555528</ZipCode>
<StreetAddress><![CDATA[161 College Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>05</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA05</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>094Y</Code>
<Text>FMitF: Formal Methods in the F</Text>
</ProgramElement>
<ProgramReference>
<Code>062Z</Code>
<Text>Harnessing the Data Revolution</Text>
</ProgramReference>
<ProgramReference>
<Code>071Z</Code>
<Text>FMitF-Formal Methods in the Field</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2019~99998</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Ruby is a popular dynamic scripting language, perhaps best known for the Ruby on Rails web framework. Over the last ten years, I have been working on bringing the benefits of static typing to Ruby. A few years ago, the creator of Ruby decided that Ruby 3 should include types. The goal of my project was to aid the effort to bring types to Ruby 3 by transferring my existing knowledge of Ruby typing to the group developing Ruby 3 types, and by building tools to help the typing process.</p> <p><br />There were two key outcomes of this project. First, as part of the project, I met regularly with the group planning Ruby 3 types to provide my insight and advice to that effort. Ultimately, Ruby 3 was released in December 2020, and it includes support for types. Many choices about the design of Ruby 3 types were influenced by the group. Second, I explored the problem of inferring <em>usable</em> types for Ruby, i.e., type annotations that match what a programmer would write. Such a technique could be very useful for annotating the myriad Ruby programs that currently exist but do not yet have types. I developed a novel system that combines standard type inference, manually written heuristics, and machine learning to soundly infer types for Ruby. I evaluated the system by running it on a range of Ruby programs to demonstrate that it can produce usable type information.</p><br> <p>            Last Modified: 05/31/2021<br>      Modified by: Jeffrey&nbsp;S&nbsp;Foster</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Ruby is a popular dynamic scripting language, perhaps best known for the Ruby on Rails web framework. Over the last ten years, I have been working on bringing the benefits of static typing to Ruby. A few years ago, the creator of Ruby decided that Ruby 3 should include types. The goal of my project was to aid the effort to bring types to Ruby 3 by transferring my existing knowledge of Ruby typing to the group developing Ruby 3 types, and by building tools to help the typing process.   There were two key outcomes of this project. First, as part of the project, I met regularly with the group planning Ruby 3 types to provide my insight and advice to that effort. Ultimately, Ruby 3 was released in December 2020, and it includes support for types. Many choices about the design of Ruby 3 types were influenced by the group. Second, I explored the problem of inferring usable types for Ruby, i.e., type annotations that match what a programmer would write. Such a technique could be very useful for annotating the myriad Ruby programs that currently exist but do not yet have types. I developed a novel system that combines standard type inference, manually written heuristics, and machine learning to soundly infer types for Ruby. I evaluated the system by running it on a range of Ruby programs to demonstrate that it can produce usable type information.       Last Modified: 05/31/2021       Submitted by: Jeffrey S Foster]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
