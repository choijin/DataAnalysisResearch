<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Testing and Profiling Asynchronous Software</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2019</AwardEffectiveDate>
<AwardExpirationDate>09/30/2022</AwardExpirationDate>
<AwardTotalIntnAmount>499828.00</AwardTotalIntnAmount>
<AwardAmount>507828</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol Greenspan</SignBlockName>
<PO_EMAI>sgreensp@nsf.gov</PO_EMAI>
<PO_PHON>7032927841</PO_PHON>
</ProgramOfficer>
<AbstractNarration>Asynchronous programming is an increasingly popular programming paradigm that targets scenarios where actions need to be performed in response to events. Typical examples of such scenarios include user input being entered in the graphical user interface of a web application, or messages arriving via network connections in a server application. In such scenarios, is undesirable for program execution to block until an event arrives. Event-driven programming is widely used to accommodate asynchrony, and involves structuring an application as a collection of event handlers that are executed in response to detected events. However, recent years have seen the introduction, and broad adoption, of more advanced programming-language features for asynchronous programming. These features are complex, and lack of familiarity with their use may lead to asynchronous software that is insufficiently well-tested, and that may exhibit poor performance. Existing techniques for testing and performance analysis do not work well for asynchronous applications. The main goal of this project is the development of practical algorithms and tools for testing and profiling asynchronous software. The project's broader significance and importance follows from improvements in the quality of asynchronous software that are enabled by the developed algorithms and tools.&lt;br/&gt;&lt;br/&gt;The technical focus of this project is on the development of techniques for testing and profiling asynchronous software. This includes the design, implementation, and evaluation of feedback-directed random-testing techniques for event-driven asynchronous applications. In addition, the research includes the establishment of coverage criteria for promise-based asynchronous software and the development of techniques for systematically exploring the execution paths in such programs with the objective of maximizing coverage. The project also includes the design, implementation, and evaluation of profiling tools for detecting situations where suboptimal scheduling of asynchronous computations causes performance degradation.  The research targets software written in the JavaScript programming language, a setting where asynchronous programming is practiced out of necessity due to the absence of concurrency at the language level. Together, the developed techniques facilitate the development of more reliable and efficient asynchronous software, by providing programmers with suitable tools for testing and detecting performance bottlenecks.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>07/03/2019</MinAmdLetterDate>
<MaxAmdLetterDate>05/19/2021</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1907727</AwardID>
<Investigator>
<FirstName>Frank</FirstName>
<LastName>Tip</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Frank Tip</PI_FULL_NAME>
<EmailAddress>f.tip@northeastern.edu</EmailAddress>
<PI_PHON>6173733784</PI_PHON>
<NSF_ID>000129422</NSF_ID>
<StartDate>07/03/2019</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Northeastern University</Name>
<CityName>BOSTON</CityName>
<ZipCode>021155005</ZipCode>
<PhoneNumber>6173733004</PhoneNumber>
<StreetAddress>360 HUNTINGTON AVE</StreetAddress>
<StreetAddress2><![CDATA[177-500]]></StreetAddress2>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<StateCode>MA</StateCode>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>MA07</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>001423631</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>NORTHEASTERN UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>001423631</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Northeastern University]]></Name>
<CityName>Boston</CityName>
<StateCode>MA</StateCode>
<ZipCode>021155005</ZipCode>
<StreetAddress><![CDATA[360 Huntington Ave]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Massachusetts</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>07</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>MA07</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
<ProgramReference>
<Code>9251</Code>
<Text>REU SUPP-Res Exp for Ugrd Supp</Text>
</ProgramReference>
<Appropriation>
<Code>0119</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Appropriation>
<Code>0121</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2019~499828</FUND_OBLG>
<FUND_OBLG>2021~8000</FUND_OBLG>
</Award>
</rootTag>
