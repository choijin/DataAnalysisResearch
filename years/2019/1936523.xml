<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>CHS: Small: Translating Compilers for Visual Computing in Dynamic Languages</AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2018</AwardEffectiveDate>
<AwardExpirationDate>08/31/2019</AwardExpirationDate>
<AwardTotalIntnAmount>20300.00</AwardTotalIntnAmount>
<AwardAmount>20300</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration>This collaborative project is developing technologies to enable students, scientists, and other non-expert developers to use computer languages that facilitate rapid prototyping, and yet still automatically convert such programs to have high performance. In this research, the PI and co-PIs focus on programs that operate over visual data, such as programs in computer graphics, computer vision, and visualization. Visual data is important because visual datasets are rapidly growing in size, due to the use of cell-phone cameras, photo and video sharing online, and in scientific and medical imaging. The intellectual merits are that specialized program optimizations are being developed specifically for visual computing and for languages that enable rapid prototyping, alongside techniques that allow the computer to automatically search through different candidate optimizations and choose the fastest one. The project's broader significance and importance are that it will make the writing of computer programs that operate over visual datasets more accessible to novice programmers, make visual computing more accessible to a broader audience, permit faster research and development over visual programs, and make such programs themselves be more efficient.&lt;br/&gt;&lt;br/&gt;More specifically, this research program is producing translating compilers that are specialized to handle programs that compute over visual data. The group led by the PI is researching new compilers that translate code from dynamic languages into highly efficient code in a target language. Dynamic languages are defined as those with a very dynamic run-time model, for example, MATLAB, Python, and Javascript. The target language is a language such as C that permits implementation of highly efficient programs. This research framework incorporates ideas from compilers, graphics, computer vision, visual perception, and formal and natural languages. The research will make a number of key intellectual contributions. First, new domain-specific translations and optimizations for visual computing will be formalized into manual rules that can be applied to any input program. Second, the team will research a novel approach of automatically learning translations, instead of using manually-coded rules. This can take the form of learning translation "suggestions" from humans, who can interactively suggest better output code. Third, a new search process based on offline auto-tuning will be used to select the translations that result in the fastest program. The success of the project will be verified against a comprehensive test suite of programs from computer vision and graphics.</AbstractNarration>
<MinAmdLetterDate>06/24/2019</MinAmdLetterDate>
<MaxAmdLetterDate>06/24/2019</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>1936523</AwardID>
<Investigator>
<FirstName>Baishakhi</FirstName>
<LastName>Ray</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Baishakhi Ray</PI_FULL_NAME>
<EmailAddress>rayb@cs.columbia.edu</EmailAddress>
<PI_PHON>3037482958</PI_PHON>
<NSF_ID>000701468</NSF_ID>
<StartDate>06/24/2019</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Columbia University</Name>
<CityName>NEW YORK</CityName>
<ZipCode>100276902</ZipCode>
<PhoneNumber>2128546851</PhoneNumber>
<StreetAddress>2960 Broadway</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>10</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY10</CONGRESS_DISTRICT_ORG>
<ORG_DUNS_NUM>049179401</ORG_DUNS_NUM>
<ORG_LGL_BUS_NAME>TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK, THE</ORG_LGL_BUS_NAME>
<ORG_PRNT_DUNS_NUM>049179401</ORG_PRNT_DUNS_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Columbia University]]></Name>
<CityName>New York</CityName>
<StateCode>NY</StateCode>
<ZipCode>100277922</ZipCode>
<StreetAddress><![CDATA[615 West 131st St.]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>13</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY13</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<FUND_OBLG>2016~20300</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span id="docs-internal-guid-574e309b-7fff-9516-0fd0-ca5967eb5e22"> <p dir="ltr"><span>The proposal primarily aims to develop new compilers that translate code written in dynamic languages into highly efficient code in a target language. A secondary objective of the proposal was to search for necessary transformation from existing transformations and automatically learn them.&nbsp; There were four significant outcomes:</span></p> <p dir="ltr"><span>[1] We build a novel domain-specific compiler, which translates visual computing programs written in dynamic languages (e.g., Python) to highly efficient code. Our compiler allows substantial performance gains (frequently orders of magnitude) over general compilers for dynamic languages by specializing the compiler for visual computation. Specifically, our compiler takes advantage of three key properties of visual computing programs, which permit optimizations: (1) many array data structures have small, constant, or bounded size, (2) many operations on visual data are supported in hardware or are embarrassingly parallel, and (3) humans are not sensitive to small numerical errors in visual outputs due to changing floating-point precisions. We show that dependent type analysis can be used to infer sizes and guide optimizations for many small-sized array operations that arise in visual programs. Programmers who are not experts on visual computation can use our compiler to produce more efficient Python programs than if they write manually parallelized C, with fewer lines of application logic.</span></p> <p dir="ltr"><span>[2] We further introduce a general method to approximate the convolution of a program with a Gaussian kernel. This results in the program being smoothed. Our compiler framework models intermediate values in the program as random variables, by using mean and variance statistics. We decompose the input program into atomic parts and relate the statistics of the different parts of the smoothed program. We give several approximate smoothing rules that can be used for the parts of the program. We apply this framework to the problem of automatically band-limiting procedural shader programs. We evaluate our method on a variety of geometries and complex shaders, including shaders with parallax mapping, animation, and spatially varying statistics. The resulting smoothed shader programs outperform previous approaches both numerically and aesthetically.</span></p> <p dir="ltr"><span>[3]&nbsp; We develop a technique to automate code translation by learning from existing translations.&nbsp; The advancement of Neural Machine Translation (NMT) and the availability of vast open-source evolutionary data open up the possibility of automatically learning translation templates from the wild. However, unlike natural languages, for which NMT techniques were originally devised, source code and its changes have certain properties. For instance, compared to natural language, source code vocabulary can be significantly larger. Further, good changes in code do not break its syntactic structure. Thus, deploying state-of-the-art NMT models without adapting the methods to the source code domain yields sub-optimal results. To this end, we propose a novel Tree-based NMT system to model source code changes and learn translation patterns from the wild. Our evaluation shows the effectiveness of the tool to automate code changes and generating bug fix patches.&nbsp;</span></p> <p dir="ltr"><span>[4] The Michigan team focused on a two-pronged research effort: (1) translating compilers for hardware accelerators, and (2) bringing tool support for this new domain. For the former, significant research and industrial interest have focused on dealing with silicon limits and the end of Moore's Law and Dennard Scaling. One promising line of research is to favor hardware accelerators, such as GPUs, FPGAs, or custom Automata Processors, that admit a high degree of parallelism. Unfortunately, these devices can be difficult to program. Existing compilers, such as CUDA, are not always performance portable and do not always expose the right abstractions to programmers. We developed RAPID, a translating compiler for pattern-matching problems. RAPID is efficient, concise, and portable to multiple accelerator architectures. We also focused on reproducible research and broadening the impact of our advances through an open-source benchmark suite for this new field. Second, beyond translating compiler support, we also improved tool support for such new languages. Tools that automatically generate test inputs (e.g., fuzz testers like AFL or KLEE) and tools that automatically repair programs (e.g., Facebook's InFix, GenProg, etc.) are becoming increasingly popular. Such tools reduce the costs associated with software maintenance by helping to find bugs (testing) or remove them (automated program repair). However, such tool support can arrive slowly for new languages. In a strong theoretical result, we find that test input generation and template-based program repair are reducible problems, and thus tools developed for one can be used to solve the other, magnifying the impact and reach of both.</span></p> <p dir="ltr"><span>We further leverage the knowledge gained from this project to advance the code search. We empirically evaluate how users search code as opposed to text in order to build a code search engine. We then build IR based techniques to search GitHub for relevant code. To this end, the interdisciplinary nature of the team helped bring together advances and applications in three different fields: Graphics, Software Engineering, and Machine Learning.&nbsp;</span></p> <br /></span></p> <p>&nbsp;</p><br> <p>            Last Modified: 03/16/2020<br>      Modified by: Baishakhi&nbsp;Ray</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[  The proposal primarily aims to develop new compilers that translate code written in dynamic languages into highly efficient code in a target language. A secondary objective of the proposal was to search for necessary transformation from existing transformations and automatically learn them.  There were four significant outcomes: [1] We build a novel domain-specific compiler, which translates visual computing programs written in dynamic languages (e.g., Python) to highly efficient code. Our compiler allows substantial performance gains (frequently orders of magnitude) over general compilers for dynamic languages by specializing the compiler for visual computation. Specifically, our compiler takes advantage of three key properties of visual computing programs, which permit optimizations: (1) many array data structures have small, constant, or bounded size, (2) many operations on visual data are supported in hardware or are embarrassingly parallel, and (3) humans are not sensitive to small numerical errors in visual outputs due to changing floating-point precisions. We show that dependent type analysis can be used to infer sizes and guide optimizations for many small-sized array operations that arise in visual programs. Programmers who are not experts on visual computation can use our compiler to produce more efficient Python programs than if they write manually parallelized C, with fewer lines of application logic. [2] We further introduce a general method to approximate the convolution of a program with a Gaussian kernel. This results in the program being smoothed. Our compiler framework models intermediate values in the program as random variables, by using mean and variance statistics. We decompose the input program into atomic parts and relate the statistics of the different parts of the smoothed program. We give several approximate smoothing rules that can be used for the parts of the program. We apply this framework to the problem of automatically band-limiting procedural shader programs. We evaluate our method on a variety of geometries and complex shaders, including shaders with parallax mapping, animation, and spatially varying statistics. The resulting smoothed shader programs outperform previous approaches both numerically and aesthetically. [3]  We develop a technique to automate code translation by learning from existing translations.  The advancement of Neural Machine Translation (NMT) and the availability of vast open-source evolutionary data open up the possibility of automatically learning translation templates from the wild. However, unlike natural languages, for which NMT techniques were originally devised, source code and its changes have certain properties. For instance, compared to natural language, source code vocabulary can be significantly larger. Further, good changes in code do not break its syntactic structure. Thus, deploying state-of-the-art NMT models without adapting the methods to the source code domain yields sub-optimal results. To this end, we propose a novel Tree-based NMT system to model source code changes and learn translation patterns from the wild. Our evaluation shows the effectiveness of the tool to automate code changes and generating bug fix patches.  [4] The Michigan team focused on a two-pronged research effort: (1) translating compilers for hardware accelerators, and (2) bringing tool support for this new domain. For the former, significant research and industrial interest have focused on dealing with silicon limits and the end of Moore's Law and Dennard Scaling. One promising line of research is to favor hardware accelerators, such as GPUs, FPGAs, or custom Automata Processors, that admit a high degree of parallelism. Unfortunately, these devices can be difficult to program. Existing compilers, such as CUDA, are not always performance portable and do not always expose the right abstractions to programmers. We developed RAPID, a translating compiler for pattern-matching problems. RAPID is efficient, concise, and portable to multiple accelerator architectures. We also focused on reproducible research and broadening the impact of our advances through an open-source benchmark suite for this new field. Second, beyond translating compiler support, we also improved tool support for such new languages. Tools that automatically generate test inputs (e.g., fuzz testers like AFL or KLEE) and tools that automatically repair programs (e.g., Facebook's InFix, GenProg, etc.) are becoming increasingly popular. Such tools reduce the costs associated with software maintenance by helping to find bugs (testing) or remove them (automated program repair). However, such tool support can arrive slowly for new languages. In a strong theoretical result, we find that test input generation and template-based program repair are reducible problems, and thus tools developed for one can be used to solve the other, magnifying the impact and reach of both. We further leverage the knowledge gained from this project to advance the code search. We empirically evaluate how users search code as opposed to text in order to build a code search engine. We then build IR based techniques to search GitHub for relevant code. To this end, the interdisciplinary nature of the team helped bring together advances and applications in three different fields: Graphics, Software Engineering, and Machine Learning.             Last Modified: 03/16/2020       Submitted by: Baishakhi Ray]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
